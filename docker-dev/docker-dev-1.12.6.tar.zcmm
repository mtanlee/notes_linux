at particular
interpreter.  This is done by calling the \f(CW\*(C`PERL_SET_CONTEXT\*(C'\fR macro in that
thread as the first thing you do:
.PP
.Vb 2
\&        /* do this before doing anything else with some_perl */
\&        PERL_SET_CONTEXT(some_perl);
\&
\&        ... other Perl API calls on some_perl go here ...
.Ve
.SS "Future Plans and \s-1PERL_IMPLICIT_SYS\s0"
.IX Subsection "Future Plans and PERL_IMPLICIT_SYS"
Just as \s-1PERL_IMPLICIT_CONTEXT\s0 provides a way to bundle up everything
that the interpreter knows about itself and pass it around, so too are
there plans to allow the interpreter to bundle up everything it knows
about the environment it's running on.  This is enabled with the
\&\s-1PERL_IMPLICIT_SYS\s0 macro.  Currently it only works with \s-1USE_ITHREADS\s0 on
Windows.
.PP
This allows the ability to provide an extra pointer (called the \*(L"host\*(R"
environment) for all the system calls.  This makes it possible for
all the system stuff to maintain their own state, broken down into
seven C structures.  These are thin wrappers around the usual system
calls (see \fIwin32/perllib.c\fR) for the default perl executable, but for a
more ambitious host (like the one that would do \fIfork()\fR emulation) all
the extra work needed to pretend that different interpreters are
actually different \*(L"processes\*(R", would be done here.
.PP
The Perl engine/interpreter and the host are orthogonal entities.
There could be one or more interpreters in a process, and one or
more \*(L"hosts\*(R", with free association between them.
.SH "Internal Functions"
.IX Header "Internal Functions"
All of Perl's internal functions which will be exposed to the outside
world are prefixed by \f(CW\*(C`Perl_\*(C'\fR so that they will not conflict with \s-1XS\s0
functions or functions used in a program in which Perl is embedded.
Similarly, all global variables begin with \f(CW\*(C`PL_\*(C'\fR. (By convention,
static functions start with \f(CW\*(C`S_\*(C'\fR.)
.PP
Inside the Perl core (\f(CW\*(C`PERL_CORE\*(C'\fR defined), you can get at the functions
either with or without the \f(CW\*(C`Perl_\*(C'\fR prefix, thanks to a bunch of defines
that live in \fIembed.h\fR. Note that extension code should \fInot\fR set
\&\f(CW\*(C`PERL_CORE\*(C'\fR; this exposes the full perl internals, and is likely to cause
breakage of the \s-1XS\s0 in each new perl release.
.PP
The file \fIembed.h\fR is generated automatically from
\&\fIembed.pl\fR and \fIembed.fnc\fR. \fIembed.pl\fR also creates the prototyping
header files for the internal functions, generates the documentation
and a lot of other bits and pieces. It's important that when you add
a new function to the core or change an existing one, you change the
data in the table in \fIembed.fnc\fR as well. Here's a sample entry from
that table:
.PP
.Vb 1
\&    Apd |SV**   |av_fetch   |AV* ar|I32 key|I32 lval
.Ve
.PP
The second column is the return type, the third column the name. Columns
after that are the arguments. The first column is a set of flags:
.IP "A" 3
.IX Item "A"
This function is a part of the public \s-1API.\s0 All such functions should also
have 'd', very few do not.
.IP "p" 3
.IX Item "p"
This function has a \f(CW\*(C`Perl_\*(C'\fR prefix; i.e. it is defined as
\&\f(CW\*(C`Perl_av_fetch\*(C'\fR.
.IP "d" 3
.IX Item "d"
This function has documentation using the \f(CW\*(C`apidoc\*(C'\fR feature which we'll
look at in a second.  Some functions have 'd' but not 'A'; docs are good.
.PP
Other available flags are:
.IP "s" 3
.IX Item "s"
This is a static function and is defined as \f(CW\*(C`STATIC S_whatever\*(C'\fR, and
usually called within the sources as \f(CW\*(C`whatever(...)\*(C'\fR.
.IP "n" 3
.IX Item "n"
This does not need an interpreter context, so the definition has no
\&\f(CW\*(C`pTHX\*(C'\fR, and it follows that callers don't use \f(CW\*(C`aTHX\*(C'\fR.  (See
\&\*(L"Background and \s-1PERL_IMPLICIT_CONTEXT\*(R"\s0.)
.IP "r" 3
.IX Item "r"
This function never returns; \f(CW\*(C`croak\*(C'\fR, \f(CW\*(C`exit\*(C'\fR and friends.
.IP "f" 3
.IX Item "f"
This function takes a variable number of arguments, \f(CW\*(C`printf\*(C'\fR style.
The argument list should end with \f(CW\*(C`...\*(C'\fR, like this:
.Sp
.Vb 1
\&    Afprd   |void   |croak          |const char* pat|...
.Ve
.IP "M" 3
.IX Item "M"
This function is part of the experimental development \s-1API,\s0 and may change
or disappear without notice.
.IP "o" 3
.IX Item "o"
This function should not have a compatibility macro to define, say,
\&\f(CW\*(C`Perl_parse\*(C'\fR to \f(CW\*(C`parse\*(C'\fR. It must be called as \f(CW\*(C`Perl_parse\*(C'\fR.
.IP "x" 3
.IX Item "x"
This function isn't exported out of the Perl core.
.IP "m" 3
.IX Item "m"
This is implemented as a macro.
.IP "X" 3
.IX Item "X"
This function is explicitly exported.
.IP "E" 3
.IX Item "E"
This function is visible to extensions included in the Perl core.
.IP "b" 3
.IX Item "b"
Binary backward compatibility; this function is a macro but also has
a \f(CW\*(C`Perl_\*(C'\fR implementation (which is exported).
.IP "others" 3
.IX Item "others"
See the comments at the top of \f(CW\*(C`embed.fnc\*(C'\fR for others.
.PP
If you edit \fIembed.pl\fR or \fIembed.fnc\fR, you will need to run
\&\f(CW\*(C`make regen_headers\*(C'\fR to force a rebuild of \fIembed.h\fR and other
auto-generated files.
.SS "Formatted Printing of IVs, UVs, and NVs"
.IX Subsection "Formatted Printing of IVs, UVs, and NVs"
If you are printing IVs, UVs, or \s-1NVS\s0 instead of the \fIstdio\fR\|(3) style
formatting codes like \f(CW%d\fR, \f(CW%ld\fR, \f(CW%f\fR, you should use the
following macros for portability
.PP
.Vb 7
\&        IVdf            IV in decimal
\&        UVuf            UV in decimal
\&        UVof            UV in octal
\&        UVxf            UV in hexadecimal
\&        NVef            NV %e\-like
\&        NVff            NV %f\-like
\&        NVgf            NV %g\-like
.Ve
.PP
These will take care of 64\-bit integers and long doubles.
For example:
.PP
.Vb 1
\&        printf("IV is %"IVdf"\en", iv);
.Ve
.PP
The IVdf will expand to whatever is the correct format for the IVs.
.PP
If you are printing addresses of pointers, use UVxf combined
with \s-1\fIPTR2UV\s0()\fR, do not use \f(CW%lx\fR or \f(CW%p\fR.
.SS "Pointer-To-Integer and Integer-To-Pointer"
.IX Subsection "Pointer-To-Integer and Integer-To-Pointer"
Because pointer size does not necessarily equal integer size,
use the follow macros to do it right.
.PP
.Vb 4
\&        PTR2UV(pointer)
\&        PTR2IV(pointer)
\&        PTR2NV(pointer)
\&        INT2PTR(pointertotype, integer)
.Ve
.PP
For example:
.PP
.Vb 2
\&        IV  iv = ...;
\&        SV *sv = INT2PTR(SV*, iv);
.Ve
.PP
and
.PP
.Vb 2
\&        AV *av = ...;
\&        UV  uv = PTR2UV(av);
.Ve
.SS "Exception Handling"
.IX Subsection "Exception Handling"
There are a couple of macros to do very basic exception handling in \s-1XS\s0
modules. You have to define \f(CW\*(C`NO_XSLOCKS\*(C'\fR before including \fI\s-1XSUB\s0.h\fR to
be able to use these macros:
.PP
.Vb 2
\&        #define NO_XSLOCKS
\&        #include "XSUB.h"
.Ve
.PP
You can use these macros if you call code that may croak, but you need
to do some cleanup before giving control back to Perl. For example:
.PP
.Vb 1
\&        dXCPT;    /* set up necessary variables */
\&
\&        XCPT_TRY_START {
\&          code_that_may_croak();
\&        } XCPT_TRY_END
\&
\&        XCPT_CATCH
\&        {
\&          /* do cleanup here */
\&          XCPT_RETHROW;
\&        }
.Ve
.PP
Note that you always have to rethrow an exception that has been
caught. Using these macros, it is not possible to just catch the
exception and ignore it. If you have to ignore the exception, you
have to use the \f(CW\*(C`call_*\*(C'\fR function.
.PP
The advantage of using the above macros is that you don't have
to setup an extra function for \f(CW\*(C`call_*\*(C'\fR, and that using these
macros is faster than using \f(CW\*(C`call_*\*(C'\fR.
.SS "Source Documentation"
.IX Subsection "Source Documentation"
There's an effort going on to document the internal functions and
automatically produce reference manuals from them \- perlapi is one
such manual which details all the functions which are available to \s-1XS\s0
writers. perlintern is the autogenerated manual for the functions
which are not part of the \s-1API\s0 and are supposedly for internal use only.
.PP
Source documentation is created by putting \s-1POD\s0 comments into the C
source, like this:
.PP
.Vb 2
\& /*
\& =for apidoc sv_setiv
\&
\& Copies an integer into the given SV.  Does not handle \*(Aqset\*(Aq magic.  See
\& C<sv_setiv_mg>.
\&
\& =cut
\& */
.Ve
.PP
Please try and supply some documentation if you add functions to the
Perl core.
.SS "Backwards compatibility"
.IX Subsection "Backwards compatibility"
The Perl \s-1API\s0 changes over time. New functions are added or the interfaces
of existing functions are changed. The \f(CW\*(C`Devel::PPPort\*(C'\fR module tries to
provide compatibility code for some of these changes, so \s-1XS\s0 writers don't
have to code it themselves when supporting multiple versions of Perl.
.PP
\&\f(CW\*(C`Devel::PPPort\*(C'\fR generates a C header file \fIppport.h\fR that can also
be run as a Perl script. To generate \fIppport.h\fR, run:
.PP
.Vb 1
\&    perl \-MDevel::PPPort \-eDevel::PPPort::WriteFile
.Ve
.PP
Besides checking existing \s-1XS\s0 code, the script can also be used to retrieve
compatibility information for various \s-1API\s0 calls using the \f(CW\*(C`\-\-api\-info\*(C'\fR
command line switch. For example:
.PP
.Vb 1
\&  % perl ppport.h \-\-api\-info=sv_magicext
.Ve
.PP
For details, see \f(CW\*(C`perldoc ppport.h\*(C'\fR.
.SH "Unicode Support"
.IX Header "Unicode Support"
Perl 5.6.0 introduced Unicode support. It's important for porters and \s-1XS\s0
writers to understand this support and make sure that the code they
write does not corrupt Unicode data.
.SS "What \fBis\fP Unicode, anyway?"
.IX Subsection "What is Unicode, anyway?"
In the olden, less enlightened times, we all used to use \s-1ASCII.\s0 Most of
us did, anyway. The big problem with \s-1ASCII\s0 is that it's American. Well,
no, that's not actually the problem; the problem is that it's not
particularly useful for people who don't use the Roman alphabet. What
used to happen was that particular languages would stick their own
alphabet in the upper range of the sequence, between 128 and 255. Of
course, we then ended up with plenty of variants that weren't quite
\&\s-1ASCII,\s0 and the whole point of it being a standard was lost.
.PP
Worse still, if you've got a language like Chinese or
Japanese that has hundreds or thousands of characters, then you really
can't fit them into a mere 256, so they had to forget about \s-1ASCII\s0
altogether, and build their own systems using pairs of numbers to refer
to one character.
.PP
To fix this, some people formed Unicode, Inc. and
produced a new character set containing all the characters you can
possibly think of and more. There are several ways of representing these
characters, and the one Perl uses is called \s-1UTF\-8. UTF\-8\s0 uses
a variable number of bytes to represent a character. You can learn more
about Unicode and Perl's Unicode model in perlunicode.
.SS "How can I recognise a \s-1UTF\-8\s0 string?"
.IX Subsection "How can I recognise a UTF-8 string?"
You can't. This is because \s-1UTF\-8\s0 data is stored in bytes just like
non\-UTF\-8 data. The Unicode character 200, (\f(CW0xC8\fR for you hex types)
capital E with a grave accent, is represented by the two bytes
\&\f(CW\*(C`v196.172\*(C'\fR. Unfortunately, the non-Unicode string \f(CW\*(C`chr(196).chr(172)\*(C'\fR
has that byte sequence as well. So you can't tell just by looking \- this
is what makes Unicode input an interesting problem.
.PP
In general, you either have to know what you're dealing with, or you
have to guess.  The \s-1API\s0 function \f(CW\*(C`is_utf8_string\*(C'\fR can help; it'll tell
you if a string contains only valid \s-1UTF\-8\s0 characters. However, it can't
do the work for you. On a character-by-character basis,
\&\f(CW\*(C`is_utf8_char_buf\*(C'\fR
will tell you whether the current character in a string is valid \s-1UTF\-8. \s0
.SS "How does \s-1UTF\-8\s0 represent Unicode characters?"
.IX Subsection "How does UTF-8 represent Unicode characters?"
As mentioned above, \s-1UTF\-8\s0 uses a variable number of bytes to store a
character. Characters with values 0...127 are stored in one byte, just
like good ol' \s-1ASCII.\s0 Character 128 is stored as \f(CW\*(C`v194.128\*(C'\fR; this
continues up to character 191, which is \f(CW\*(C`v194.191\*(C'\fR. Now we've run out of
bits (191 is binary \f(CW10111111\fR) so we move on; 192 is \f(CW\*(C`v195.128\*(C'\fR. And
so it goes on, moving to three bytes at character 2048.
.PP
Assuming you know you're dealing with a \s-1UTF\-8\s0 string, you can find out
how long the first character in it is with the \f(CW\*(C`UTF8SKIP\*(C'\fR macro:
.PP
.Vb 2
\&    char *utf = "\e305\e233\e340\e240\e201";
\&    I32 len;
\&
\&    len = UTF8SKIP(utf); /* len is 2 here */
\&    utf += len;
\&    len = UTF8SKIP(utf); /* len is 3 here */
.Ve
.PP
Another way to skip over characters in a \s-1UTF\-8\s0 string is to use
\&\f(CW\*(C`utf8_hop\*(C'\fR, which takes a string and a number of characters to skip
over. You're on your own about bounds checking, though, so don't use it
lightly.
.PP
All bytes in a multi-byte \s-1UTF\-8\s0 character will have the high bit set,
so you can test if you need to do something special with this
character like this (the \s-1\fIUTF8_IS_INVARIANT\s0()\fR is a macro that tests
whether the byte can be encoded as a single byte even in \s-1UTF\-8\s0):
.PP
.Vb 4
\&    U8 *utf;
\&    U8 *utf_end; /* 1 beyond buffer pointed to by utf */
\&    UV uv;      /* Note: a UV, not a U8, not a char */
\&    STRLEN len; /* length of character in bytes */
\&
\&    if (!UTF8_IS_INVARIANT(*utf))
\&        /* Must treat this as UTF\-8 */
\&        uv = utf8_to_uvchr_buf(utf, utf_end, &len);
\&    else
\&        /* OK to treat this character as a byte */
\&        uv = *utf;
.Ve
.PP
You can also see in that example that we use \f(CW\*(C`utf8_to_uvchr_buf\*(C'\fR to get the
value of the character; the inverse function \f(CW\*(C`uvchr_to_utf8\*(C'\fR is available
for putting a \s-1UV\s0 into \s-1UTF\-8:\s0
.PP
.Vb 6
\&    if (!UTF8_IS_INVARIANT(uv))
\&        /* Must treat this as UTF8 */
\&        utf8 = uvchr_to_utf8(utf8, uv);
\&    else
\&        /* OK to treat this character as a byte */
\&        *utf8++ = uv;
.Ve
.PP
You \fBmust\fR convert characters to UVs using the above functions if
you're ever in a situation where you have to match \s-1UTF\-8\s0 and non\-UTF\-8
characters. You may not skip over \s-1UTF\-8\s0 characters in this case. If you
do this, you'll lose the ability to match hi-bit non\-UTF\-8 characters;
for instance, if your \s-1UTF\-8\s0 string contains \f(CW\*(C`v196.172\*(C'\fR, and you skip
that character, you can never match a \f(CW\*(C`chr(200)\*(C'\fR in a non\-UTF\-8 string.
So don't do that!
.SS "How does Perl store \s-1UTF\-8\s0 strings?"
.IX Subsection "How does Perl store UTF-8 strings?"
Currently, Perl deals with Unicode strings and non-Unicode strings
slightly differently. A flag in the \s-1SV, \s0\f(CW\*(C`SVf_UTF8\*(C'\fR, indicates that the
string is internally encoded as \s-1UTF\-8.\s0 Without it, the byte value is the
codepoint number and vice versa (in other words, the string is encoded
as iso\-8859\-1, but \f(CW\*(C`use feature \*(Aqunicode_strings\*(Aq\*(C'\fR is needed to get iso\-8859\-1
semantics). You can check and manipulate this flag with the
following macros:
.PP
.Vb 3
\&    SvUTF8(sv)
\&    SvUTF8_on(sv)
\&    SvUTF8_off(sv)
.Ve
.PP
This flag has an important effect on Perl's treatment of the string: if
Unicode data is not properly distinguished, regular expressions,
\&\f(CW\*(C`length\*(C'\fR, \f(CW\*(C`substr\*(C'\fR and other string handling operations will have
undesirable results.
.PP
The problem comes when you have, for instance, a string that isn't
flagged as \s-1UTF\-8,\s0 and contains a byte sequence that could be \s-1UTF\-8 \-\s0
especially when combining non\-UTF\-8 and \s-1UTF\-8\s0 strings.
.PP
Never forget that the \f(CW\*(C`SVf_UTF8\*(C'\fR flag is separate to the \s-1PV\s0 value; you
need be sure you don't accidentally knock it off while you're
manipulating SVs. More specifically, you cannot expect to do this:
.PP
.Vb 4
\&    SV *sv;
\&    SV *nsv;
\&    STRLEN len;
\&    char *p;
\&
\&    p = SvPV(sv, len);
\&    frobnicate(p);
\&    nsv = newSVpvn(p, len);
.Ve
.PP
The \f(CW\*(C`char*\*(C'\fR string does not tell you the whole story, and you can't
copy or reconstruct an \s-1SV\s0 just by copying the string value. Check if the
old \s-1SV\s0 has the \s-1UTF8\s0 flag set, and act accordingly:
.PP
.Vb 5
\&    p = SvPV(sv, len);
\&    frobnicate(p);
\&    nsv = newSVpvn(p, len);
\&    if (SvUTF8(sv))
\&        SvUTF8_on(nsv);
.Ve
.PP
In fact, your \f(CW\*(C`frobnicate\*(C'\fR function should be made aware of whether or
not it's dealing with \s-1UTF\-8\s0 data, so that it can handle the string
appropriately.
.PP
Since just passing an \s-1SV\s0 to an \s-1XS\s0 function and copying the data of
the \s-1SV\s0 is not enough to copy the \s-1UTF8\s0 flags, even less right is just
passing a \f(CW\*(C`char *\*(C'\fR to an \s-1XS\s0 function.
.SS "How do I convert a string to \s-1UTF\-8\s0?"
.IX Subsection "How do I convert a string to UTF-8?"
If you're mixing \s-1UTF\-8\s0 and non\-UTF\-8 strings, it is necessary to upgrade
one of the strings to \s-1UTF\-8.\s0 If you've got an \s-1SV,\s0 the easiest way to do
this is:
.PP
.Vb 1
\&    sv_utf8_upgrade(sv);
.Ve
.PP
However, you must not do this, for example:
.PP
.Vb 2
\&    if (!SvUTF8(left))
\&        sv_utf8_upgrade(left);
.Ve
.PP
If you do this in a binary operator, you will actually change one of the
strings that came into the operator, and, while it shouldn't be noticeable
by the end user, it can cause problems in deficient code.
.PP
Instead, \f(CW\*(C`bytes_to_utf8\*(C'\fR will give you a UTF\-8\-encoded \fBcopy\fR of its
string argument. This is useful for having the data available for
comparisons and so on, without harming the original \s-1SV.\s0 There's also
\&\f(CW\*(C`utf8_to_bytes\*(C'\fR to go the other way, but naturally, this will fail if
the string contains any characters above 255 that can't be represented
in a single byte.
.SS "Is there anything else I need to know?"
.IX Subsection "Is there anything else I need to know?"
Not really. Just remember these things:
.IP "\(bu" 3
There's no way to tell if a string is \s-1UTF\-8\s0 or not. You can tell if an \s-1SV\s0
is \s-1UTF\-8\s0 by looking at its \f(CW\*(C`SvUTF8\*(C'\fR flag. Don't forget to set the flag if
something should be \s-1UTF\-8.\s0 Treat the flag as part of the \s-1PV,\s0 even though
it's not \- if you pass on the \s-1PV\s0 to somewhere, pass on the flag too.
.IP "\(bu" 3
If a string is \s-1UTF\-8, \s0\fBalways\fR use \f(CW\*(C`utf8_to_uvchr_buf\*(C'\fR to get at the value,
unless \f(CW\*(C`UTF8_IS_INVARIANT(*s)\*(C'\fR in which case you can use \f(CW*s\fR.
.IP "\(bu" 3
When writing a character \f(CW\*(C`uv\*(C'\fR to a \s-1UTF\-8\s0 string, \fBalways\fR use
\&\f(CW\*(C`uvchr_to_utf8\*(C'\fR, unless \f(CW\*(C`UTF8_IS_INVARIANT(uv))\*(C'\fR in which case
you can use \f(CW\*(C`*s = uv\*(C'\fR.
.IP "\(bu" 3
Mixing \s-1UTF\-8\s0 and non\-UTF\-8 strings is tricky. Use \f(CW\*(C`bytes_to_utf8\*(C'\fR to get
a new string which is \s-1UTF\-8\s0 encoded, and then combine them.
.SH "Custom Operators"
.IX Header "Custom Operators"
Custom operator support is an experimental feature that allows you to
define your own ops. This is primarily to allow the building of
interpreters for other languages in the Perl core, but it also allows
optimizations through the creation of \*(L"macro-ops\*(R" (ops which perform the
functions of multiple ops which are usually executed together, such as
\&\f(CW\*(C`gvsv, gvsv, add\*(C'\fR.)
.PP
This feature is implemented as a new op type, \f(CW\*(C`OP_CUSTOM\*(C'\fR. The Perl
core does not \*(L"know\*(R" anything special about this op type, and so it will
not be involved in any optimizations. This also means that you can
define your custom ops to be any op structure \- unary, binary, list and
so on \- you like.
.PP
It's important to know what custom operators won't do for you. They
won't let you add new syntax to Perl, directly. They won't even let you
add new keywords, directly. In fact, they won't change the way Perl
compiles a program at all. You have to do those changes yourself, after
Perl has compiled the program. You do this either by manipulating the op
tree using a \f(CW\*(C`CHECK\*(C'\fR block and the \f(CW\*(C`B::Generate\*(C'\fR module, or by adding
a custom peephole optimizer with the \f(CW\*(C`optimize\*(C'\fR module.
.PP
When you do this, you replace ordinary Perl ops with custom ops by
creating ops with the type \f(CW\*(C`OP_CUSTOM\*(C'\fR and the \f(CW\*(C`op_ppaddr\*(C'\fR of your own
\&\s-1PP\s0 function. This should be defined in \s-1XS\s0 code, and should look like
the \s-1PP\s0 ops in \f(CW\*(C`pp_*.c\*(C'\fR. You are responsible for ensuring that your op
takes the appropriate number of values from the stack, and you are
responsible for adding stack marks if necessary.
.PP
You should also \*(L"register\*(R" your op with the Perl interpreter so that it
can produce sensible error and warning messages. Since it is possible to
have multiple custom ops within the one \*(L"logical\*(R" op type \f(CW\*(C`OP_CUSTOM\*(C'\fR,
Perl uses the value of \f(CW\*(C`o\->op_ppaddr\*(C'\fR to determine which custom op
it is dealing with. You should create an \f(CW\*(C`XOP\*(C'\fR structure for each
ppaddr you use, set the properties of the custom op with
\&\f(CW\*(C`XopENTRY_set\*(C'\fR, and register the structure against the ppaddr using
\&\f(CW\*(C`Perl_custom_op_register\*(C'\fR. A trivial example might look like:
.PP
.Vb 2
\&    static XOP my_xop;
\&    static OP *my_pp(pTHX);
\&
\&    BOOT:
\&        XopENTRY_set(&my_xop, xop_name, "myxop");
\&        XopENTRY_set(&my_xop, xop_desc, "Useless custom op");
\&        Perl_custom_op_register(aTHX_ my_pp, &my_xop);
.Ve
.PP
The available fields in the structure are:
.IP "xop_name" 4
.IX Item "xop_name"
A short name for your op. This will be included in some error messages,
and will also be returned as \f(CW\*(C`$op\->name\*(C'\fR by the B module, so
it will appear in the output of module like B::Concise.
.IP "xop_desc" 4
.IX Item "xop_desc"
A short description of the function of the op.
.IP "xop_class" 4
.IX Item "xop_class"
Which of the various \f(CW*OP\fR structures this op uses. This should be one of
the \f(CW\*(C`OA_*\*(C'\fR constants from \fIop.h\fR, namely
.RS 4
.IP "\s-1OA_BASEOP\s0" 4
.IX Item "OA_BASEOP"
.PD 0
.IP "\s-1OA_UNOP\s0" 4
.IX Item "OA_UNOP"
.IP "\s-1OA_BINOP\s0" 4
.IX Item "OA_BINOP"
.IP "\s-1OA_LOGOP\s0" 4
.IX Item "OA_LOGOP"
.IP "\s-1OA_LISTOP\s0" 4
.IX Item "OA_LISTOP"
.IP "\s-1OA_PMOP\s0" 4
.IX Item "OA_PMOP"
.IP "\s-1OA_SVOP\s0" 4
.IX Item "OA_SVOP"
.IP "\s-1OA_PADOP\s0" 4
.IX Item "OA_PADOP"
.IP "\s-1OA_PVOP_OR_SVOP\s0" 4
.IX Item "OA_PVOP_OR_SVOP"
.PD
This should be interpreted as '\f(CW\*(C`PVOP\*(C'\fR' only. The \f(CW\*(C`_OR_SVOP\*(C'\fR is because
the only core \f(CW\*(C`PVOP\*(C'\fR, \f(CW\*(C`OP_TRANS\*(C'\fR, can sometimes be a \f(CW\*(C`SVOP\*(C'\fR instead.
.IP "\s-1OA_LOOP\s0" 4
.IX Item "OA_LOOP"
.PD 0
.IP "\s-1OA_COP\s0" 4
.IX Item "OA_COP"
.RE
.RS 4
.PD
.Sp
The other \f(CW\*(C`OA_*\*(C'\fR constants should not be used.
.RE
.IP "xop_peep" 4
.IX Item "xop_peep"
This member is of type \f(CW\*(C`Perl_cpeep_t\*(C'\fR, which expands to \f(CW\*(C`void
(*Perl_cpeep_t)(aTHX_ OP *o, OP *oldop)\*(C'\fR. If it is set, this function
will be called from \f(CW\*(C`Perl_rpeep\*(C'\fR when ops of this type are encountered
by the peephole optimizer. \fIo\fR is the \s-1OP\s0 that needs optimizing;
\&\fIoldop\fR is the previous \s-1OP\s0 optimized, whose \f(CW\*(C`op_next\*(C'\fR points to \fIo\fR.
.PP
\&\f(CW\*(C`B::Generate\*(C'\fR directly supports the creation of custom ops by name.
.SH "AUTHORS"
.IX Header "AUTHORS"
Until May 1997, this document was maintained by Jeff Okamoto
<okamoto@corp.hp.com>.  It is now maintained as part of Perl
itself by the Perl 5 Porters <perl5\-porters@perl.org>.
.PP
With lots of help and suggestions from Dean Roehrich, Malcolm Beattie,
Andreas Koenig, Paul Hudson, Ilya Zakharevich, Paul Marquess, Neil
Bowers, Matthew Green, Tim Bunce, Spider Boardman, Ulrich Pfeifer,
Stephen McCamant, and Gurusamy Sarathy.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
perlapi, perlintern, perlxs, perlembed
                                                                                                                                                                                                                                                                                                                                                                                     osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perlguts5.16.1                               0100644 0001750 0001750 00000423302 12566207420 023117  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLGUTS 1"
.TH PERLGUTS 1 "2013-03-04" "perl v5.16.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlguts \- Introduction to the Perl API
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document attempts to describe how to use the Perl \s-1API\s0, as well as
to provide some info on the basic workings of the Perl core. It is far
from complete and probably contains many errors. Please refer any
questions or comments to the author below.
.SH "Variables"
.IX Header "Variables"
.SS "Datatypes"
.IX Subsection "Datatypes"
Perl has three typedefs that handle Perl's three main data types:
.PP
.Vb 3
\&    SV  Scalar Value
\&    AV  Array Value
\&    HV  Hash Value
.Ve
.PP
Each typedef has specific routines that manipulate the various data types.
.ie n .SS "What is an ""\s-1IV\s0""?"
.el .SS "What is an ``\s-1IV\s0''?"
.IX Subsection "What is an IV?"
Perl uses a special typedef \s-1IV\s0 which is a simple signed integer type that is
guaranteed to be large enough to hold a pointer (as well as an integer).
Additionally, there is the \s-1UV\s0, which is simply an unsigned \s-1IV\s0.
.PP
Perl also uses two special typedefs, I32 and I16, which will always be at
least 32\-bits and 16\-bits long, respectively. (Again, there are U32 and U16,
as well.)  They will usually be exactly 32 and 16 bits long, but on Crays
they will both be 64 bits.
.SS "Working with SVs"
.IX Subsection "Working with SVs"
An \s-1SV\s0 can be created and loaded with one command.  There are five types of
values that can be loaded: an integer value (\s-1IV\s0), an unsigned integer
value (\s-1UV\s0), a double (\s-1NV\s0), a string (\s-1PV\s0), and another scalar (\s-1SV\s0).
.PP
The seven routines are:
.PP
.Vb 7
\&    SV*  newSViv(IV);
\&    SV*  newSVuv(UV);
\&    SV*  newSVnv(double);
\&    SV*  newSVpv(const char*, STRLEN);
\&    SV*  newSVpvn(const char*, STRLEN);
\&    SV*  newSVpvf(const char*, ...);
\&    SV*  newSVsv(SV*);
.Ve
.PP
\&\f(CW\*(C`STRLEN\*(C'\fR is an integer type (Size_t, usually defined as size_t in
\&\fIconfig.h\fR) guaranteed to be large enough to represent the size of
any string that perl can handle.
.PP
In the unlikely case of a \s-1SV\s0 requiring more complex initialisation, you
can create an empty \s-1SV\s0 with newSV(len).  If \f(CW\*(C`len\*(C'\fR is 0 an empty \s-1SV\s0 of
type \s-1NULL\s0 is returned, else an \s-1SV\s0 of type \s-1PV\s0 is returned with len + 1 (for
the \s-1NUL\s0) bytes of storage allocated, accessible via SvPVX.  In both cases
the \s-1SV\s0 has the undef value.
.PP
.Vb 3
\&    SV *sv = newSV(0);   /* no storage allocated  */
\&    SV *sv = newSV(10);  /* 10 (+1) bytes of uninitialised storage
\&                          * allocated */
.Ve
.PP
To change the value of an \fIalready-existing\fR \s-1SV\s0, there are eight routines:
.PP
.Vb 9
\&    void  sv_setiv(SV*, IV);
\&    void  sv_setuv(SV*, UV);
\&    void  sv_setnv(SV*, double);
\&    void  sv_setpv(SV*, const char*);
\&    void  sv_setpvn(SV*, const char*, STRLEN)
\&    void  sv_setpvf(SV*, const char*, ...);
\&    void  sv_vsetpvfn(SV*, const char*, STRLEN, va_list *,
\&                                                    SV **, I32, bool *);
\&    void  sv_setsv(SV*, SV*);
.Ve
.PP
Notice that you can choose to specify the length of the string to be
assigned by using \f(CW\*(C`sv_setpvn\*(C'\fR, \f(CW\*(C`newSVpvn\*(C'\fR, or \f(CW\*(C`newSVpv\*(C'\fR, or you may
allow Perl to calculate the length by using \f(CW\*(C`sv_setpv\*(C'\fR or by specifying
0 as the second argument to \f(CW\*(C`newSVpv\*(C'\fR.  Be warned, though, that Perl will
determine the string's length by using \f(CW\*(C`strlen\*(C'\fR, which depends on the
string terminating with a \s-1NUL\s0 character, and not otherwise containing
NULs.
.PP
The arguments of \f(CW\*(C`sv_setpvf\*(C'\fR are processed like \f(CW\*(C`sprintf\*(C'\fR, and the
formatted output becomes the value.
.PP
\&\f(CW\*(C`sv_vsetpvfn\*(C'\fR is an analogue of \f(CW\*(C`vsprintf\*(C'\fR, but it allows you to specify
either a pointer to a variable argument list or the address and length of
an array of SVs.  The last argument points to a boolean; on return, if that
boolean is true, then locale-specific information has been used to format
the string, and the string's contents are therefore untrustworthy (see
perlsec).  This pointer may be \s-1NULL\s0 if that information is not
important.  Note that this function requires you to specify the length of
the format.
.PP
The \f(CW\*(C`sv_set*()\*(C'\fR functions are not generic enough to operate on values
that have \*(L"magic\*(R".  See \*(L"Magic Virtual Tables\*(R" later in this document.
.PP
All SVs that contain strings should be terminated with a \s-1NUL\s0 character.
If it is not NUL-terminated there is a risk of
core dumps and corruptions from code which passes the string to C
functions or system calls which expect a NUL-terminated string.
Perl's own functions typically add a trailing \s-1NUL\s0 for this reason.
Nevertheless, you should be very careful when you pass a string stored
in an \s-1SV\s0 to a C function or system call.
.PP
To access the actual value that an \s-1SV\s0 points to, you can use the macros:
.PP
.Vb 5
\&    SvIV(SV*)
\&    SvUV(SV*)
\&    SvNV(SV*)
\&    SvPV(SV*, STRLEN len)
\&    SvPV_nolen(SV*)
.Ve
.PP
which will automatically coerce the actual scalar type into an \s-1IV\s0, \s-1UV\s0, double,
or string.
.PP
In the \f(CW\*(C`SvPV\*(C'\fR macro, the length of the string returned is placed into the
variable \f(CW\*(C`len\*(C'\fR (this is a macro, so you do \fInot\fR use \f(CW&len\fR).  If you do
not care what the length of the data is, use the \f(CW\*(C`SvPV_nolen\*(C'\fR macro.
Historically the \f(CW\*(C`SvPV\*(C'\fR macro with the global variable \f(CW\*(C`PL_na\*(C'\fR has been
used in this case.  But that can be quite inefficient because \f(CW\*(C`PL_na\*(C'\fR must
be accessed in thread-local storage in threaded Perl.  In any case, remember
that Perl allows arbitrary strings of data that may both contain NULs and
might not be terminated by a \s-1NUL\s0.
.PP
Also remember that C doesn't allow you to safely say \f(CW\*(C`foo(SvPV(s, len),
len);\*(C'\fR. It might work with your compiler, but it won't work for everyone.
Break this sort of statement up into separate assignments:
.PP
.Vb 5
\&    SV *s;
\&    STRLEN len;
\&    char *ptr;
\&    ptr = SvPV(s, len);
\&    foo(ptr, len);
.Ve
.PP
If you want to know if the scalar value is \s-1TRUE\s0, you can use:
.PP
.Vb 1
\&    SvTRUE(SV*)
.Ve
.PP
Although Perl will automatically grow strings for you, if you need to force
Perl to allocate more memory for your \s-1SV\s0, you can use the macro
.PP
.Vb 1
\&    SvGROW(SV*, STRLEN newlen)
.Ve
.PP
which will determine if more memory needs to be allocated.  If so, it will
call the function \f(CW\*(C`sv_grow\*(C'\fR.  Note that \f(CW\*(C`SvGROW\*(C'\fR can only increase, not
decrease, the allocated memory of an \s-1SV\s0 and that it does not automatically
add space for the trailing \s-1NUL\s0 byte (perl's own string functions typically do
\&\f(CW\*(C`SvGROW(sv, len + 1)\*(C'\fR).
.PP
If you have an \s-1SV\s0 and want to know what kind of data Perl thinks is stored
in it, you can use the following macros to check the type of \s-1SV\s0 you have.
.PP
.Vb 3
\&    SvIOK(SV*)
\&    SvNOK(SV*)
\&    SvPOK(SV*)
.Ve
.PP
You can get and set the current length of the string stored in an \s-1SV\s0 with
the following macros:
.PP
.Vb 2
\&    SvCUR(SV*)
\&    SvCUR_set(SV*, I32 val)
.Ve
.PP
You can also get a pointer to the end of the string stored in the \s-1SV\s0
with the macro:
.PP
.Vb 1
\&    SvEND(SV*)
.Ve
.PP
But note that these last three macros are valid only if \f(CW\*(C`SvPOK()\*(C'\fR is true.
.PP
If you want to append something to the end of string stored in an \f(CW\*(C`SV*\*(C'\fR,
you can use the following functions:
.PP
.Vb 6
\&    void  sv_catpv(SV*, const char*);
\&    void  sv_catpvn(SV*, const char*, STRLEN);
\&    void  sv_catpvf(SV*, const char*, ...);
\&    void  sv_vcatpvfn(SV*, const char*, STRLEN, va_list *, SV **,
\&                                                             I32, bool);
\&    void  sv_catsv(SV*, SV*);
.Ve
.PP
The first function calculates the length of the string to be appended by
using \f(CW\*(C`strlen\*(C'\fR.  In the second, you specify the length of the string
yourself.  The third function processes its arguments like \f(CW\*(C`sprintf\*(C'\fR and
appends the formatted output.  The fourth function works like \f(CW\*(C`vsprintf\*(C'\fR.
You can specify the address and length of an array of SVs instead of the
va_list argument. The fifth function extends the string stored in the first
\&\s-1SV\s0 with the string stored in the second \s-1SV\s0.  It also forces the second \s-1SV\s0
to be interpreted as a string.
.PP
The \f(CW\*(C`sv_cat*()\*(C'\fR functions are not generic enough to operate on values that
have \*(L"magic\*(R".  See \*(L"Magic Virtual Tables\*(R" later in this document.
.PP
If you know the name of a scalar variable, you can get a pointer to its \s-1SV\s0
by using the following:
.PP
.Vb 1
\&    SV*  get_sv("package::varname", 0);
.Ve
.PP
This returns \s-1NULL\s0 if the variable does not exist.
.PP
If you want to know if this variable (or any other \s-1SV\s0) is actually \f(CW\*(C`defined\*(C'\fR,
you can call:
.PP
.Vb 1
\&    SvOK(SV*)
.Ve
.PP
The scalar \f(CW\*(C`undef\*(C'\fR value is stored in an \s-1SV\s0 instance called \f(CW\*(C`PL_sv_undef\*(C'\fR.
.PP
Its address can be used whenever an \f(CW\*(C`SV*\*(C'\fR is needed. Make sure that
you don't try to compare a random sv with \f(CW&PL_sv_undef\fR. For example
when interfacing Perl code, it'll work correctly for:
.PP
.Vb 1
\&  foo(undef);
.Ve
.PP
But won't work when called as:
.PP
.Vb 2
\&  $x = undef;
\&  foo($x);
.Ve
.PP
So to repeat always use \fISvOK()\fR to check whether an sv is defined.
.PP
Also you have to be careful when using \f(CW&PL_sv_undef\fR as a value in
AVs or HVs (see \*(L"AVs, HVs and undefined values\*(R").
.PP
There are also the two values \f(CW\*(C`PL_sv_yes\*(C'\fR and \f(CW\*(C`PL_sv_no\*(C'\fR, which contain
boolean \s-1TRUE\s0 and \s-1FALSE\s0 values, respectively.  Like \f(CW\*(C`PL_sv_undef\*(C'\fR, their
addresses can be used whenever an \f(CW\*(C`SV*\*(C'\fR is needed.
.PP
Do not be fooled into thinking that \f(CW\*(C`(SV *) 0\*(C'\fR is the same as \f(CW&PL_sv_undef\fR.
Take this code:
.PP
.Vb 5
\&    SV* sv = (SV*) 0;
\&    if (I\-am\-to\-return\-a\-real\-value) {
\&            sv = sv_2mortal(newSViv(42));
\&    }
\&    sv_setsv(ST(0), sv);
.Ve
.PP
This code tries to return a new \s-1SV\s0 (which contains the value 42) if it should
return a real value, or undef otherwise.  Instead it has returned a \s-1NULL\s0
pointer which, somewhere down the line, will cause a segmentation violation,
bus error, or just weird results.  Change the zero to \f(CW&PL_sv_undef\fR in the
first line and all will be well.
.PP
To free an \s-1SV\s0 that you've created, call \f(CW\*(C`SvREFCNT_dec(SV*)\*(C'\fR.  Normally this
call is not necessary (see \*(L"Reference Counts and Mortality\*(R").
.SS "Offsets"
.IX Subsection "Offsets"
Perl provides the function \f(CW\*(C`sv_chop\*(C'\fR to efficiently remove characters
from the beginning of a string; you give it an \s-1SV\s0 and a pointer to
somewhere inside the \s-1PV\s0, and it discards everything before the
pointer. The efficiency comes by means of a little hack: instead of
actually removing the characters, \f(CW\*(C`sv_chop\*(C'\fR sets the flag \f(CW\*(C`OOK\*(C'\fR
(offset \s-1OK\s0) to signal to other functions that the offset hack is in
effect, and it puts the number of bytes chopped off into the \s-1IV\s0 field
of the \s-1SV\s0. It then moves the \s-1PV\s0 pointer (called \f(CW\*(C`SvPVX\*(C'\fR) forward that
many bytes, and adjusts \f(CW\*(C`SvCUR\*(C'\fR and \f(CW\*(C`SvLEN\*(C'\fR.
.PP
Hence, at this point, the start of the buffer that we allocated lives
at \f(CW\*(C`SvPVX(sv) \- SvIV(sv)\*(C'\fR in memory and the \s-1PV\s0 pointer is pointing
into the middle of this allocated storage.
.PP
This is best demonstrated by example:
.PP
.Vb 8
\&  % ./perl \-Ilib \-MDevel::Peek \-le \*(Aq$a="12345"; $a=~s/.//; Dump($a)\*(Aq
\&  SV = PVIV(0x8128450) at 0x81340f0
\&    REFCNT = 1
\&    FLAGS = (POK,OOK,pPOK)
\&    IV = 1  (OFFSET)
\&    PV = 0x8135781 ( "1" . ) "2345"\e0
\&    CUR = 4
\&    LEN = 5
.Ve
.PP
Here the number of bytes chopped off (1) is put into \s-1IV\s0, and
\&\f(CW\*(C`Devel::Peek::Dump\*(C'\fR helpfully reminds us that this is an offset. The
portion of the string between the \*(L"real\*(R" and the \*(L"fake\*(R" beginnings is
shown in parentheses, and the values of \f(CW\*(C`SvCUR\*(C'\fR and \f(CW\*(C`SvLEN\*(C'\fR reflect
the fake beginning, not the real one.
.PP
Something similar to the offset hack is performed on AVs to enable
efficient shifting and splicing off the beginning of the array; while
\&\f(CW\*(C`AvARRAY\*(C'\fR points to the first element in the array that is visible from
Perl, \f(CW\*(C`AvALLOC\*(C'\fR points to the real start of the C array. These are
usually the same, but a \f(CW\*(C`shift\*(C'\fR operation can be carried out by
increasing \f(CW\*(C`AvARRAY\*(C'\fR by one and decreasing \f(CW\*(C`AvFILL\*(C'\fR and \f(CW\*(C`AvMAX\*(C'\fR.
Again, the location of the real start of the C array only comes into
play when freeing the array. See \f(CW\*(C`av_shift\*(C'\fR in \fIav.c\fR.
.SS "What's Really Stored in an \s-1SV\s0?"
.IX Subsection "What's Really Stored in an SV?"
Recall that the usual method of determining the type of scalar you have is
to use \f(CW\*(C`Sv*OK\*(C'\fR macros.  Because a scalar can be both a number and a string,
usually these macros will always return \s-1TRUE\s0 and calling the \f(CW\*(C`Sv*V\*(C'\fR
macros will do the appropriate conversion of string to integer/double or
integer/double to string.
.PP
If you \fIreally\fR need to know if you have an integer, double, or string
pointer in an \s-1SV\s0, you can use the following three macros instead:
.PP
.Vb 3
\&    SvIOKp(SV*)
\&    SvNOKp(SV*)
\&    SvPOKp(SV*)
.Ve
.PP
These will tell you if you truly have an integer, double, or string pointer
stored in your \s-1SV\s0.  The \*(L"p\*(R" stands for private.
.PP
There are various ways in which the private and public flags may differ.
For example, a tied \s-1SV\s0 may have a valid underlying value in the \s-1IV\s0 slot
(so SvIOKp is true), but the data should be accessed via the \s-1FETCH\s0
routine rather than directly, so SvIOK is false. Another is when
numeric conversion has occurred and precision has been lost: only the
private flag is set on 'lossy' values. So when an \s-1NV\s0 is converted to an
\&\s-1IV\s0 with loss, SvIOKp, SvNOKp and SvNOK will be set, while SvIOK wont be.
.PP
In general, though, it's best to use the \f(CW\*(C`Sv*V\*(C'\fR macros.
.SS "Working with AVs"
.IX Subsection "Working with AVs"
There are two ways to create and load an \s-1AV\s0.  The first method creates an
empty \s-1AV:\s0
.PP
.Vb 1
\&    AV*  newAV();
.Ve
.PP
The second method both creates the \s-1AV\s0 and initially populates it with SVs:
.PP
.Vb 1
\&    AV*  av_make(I32 num, SV **ptr);
.Ve
.PP
The second argument points to an array containing \f(CW\*(C`num\*(C'\fR \f(CW\*(C`SV*\*(C'\fR's.  Once the
\&\s-1AV\s0 has been created, the SVs can be destroyed, if so desired.
.PP
Once the \s-1AV\s0 has been created, the following operations are possible on it:
.PP
.Vb 4
\&    void  av_push(AV*, SV*);
\&    SV*   av_pop(AV*);
\&    SV*   av_shift(AV*);
\&    void  av_unshift(AV*, I32 num);
.Ve
.PP
These should be familiar operations, with the exception of \f(CW\*(C`av_unshift\*(C'\fR.
This routine adds \f(CW\*(C`num\*(C'\fR elements at the front of the array with the \f(CW\*(C`undef\*(C'\fR
value.  You must then use \f(CW\*(C`av_store\*(C'\fR (described below) to assign values
to these new elements.
.PP
Here are some other functions:
.PP
.Vb 3
\&    I32   av_len(AV*);
\&    SV**  av_fetch(AV*, I32 key, I32 lval);
\&    SV**  av_store(AV*, I32 key, SV* val);
.Ve
.PP
The \f(CW\*(C`av_len\*(C'\fR function returns the highest index value in an array (just
like $#array in Perl).  If the array is empty, \-1 is returned.  The
\&\f(CW\*(C`av_fetch\*(C'\fR function returns the value at index \f(CW\*(C`key\*(C'\fR, but if \f(CW\*(C`lval\*(C'\fR
is non-zero, then \f(CW\*(C`av_fetch\*(C'\fR will store an undef value at that index.
The \f(CW\*(C`av_store\*(C'\fR function stores the value \f(CW\*(C`val\*(C'\fR at index \f(CW\*(C`key\*(C'\fR, and does
not increment the reference count of \f(CW\*(C`val\*(C'\fR.  Thus the caller is responsible
for taking care of that, and if \f(CW\*(C`av_store\*(C'\fR returns \s-1NULL\s0, the caller will
have to decrement the reference count to avoid a memory leak.  Note that
\&\f(CW\*(C`av_fetch\*(C'\fR and \f(CW\*(C`av_store\*(C'\fR both return \f(CW\*(C`SV**\*(C'\fR's, not \f(CW\*(C`SV*\*(C'\fR's as their
return value.
.PP
A few more:
.PP
.Vb 3
\&    void  av_clear(AV*);
\&    void  av_undef(AV*);
\&    void  av_extend(AV*, I32 key);
.Ve
.PP
The \f(CW\*(C`av_clear\*(C'\fR function deletes all the elements in the AV* array, but
does not actually delete the array itself.  The \f(CW\*(C`av_undef\*(C'\fR function will
delete all the elements in the array plus the array itself.  The
\&\f(CW\*(C`av_extend\*(C'\fR function extends the array so that it contains at least \f(CW\*(C`key+1\*(C'\fR
elements.  If \f(CW\*(C`key+1\*(C'\fR is less than the currently allocated length of the array,
then nothing is done.
.PP
If you know the name of an array variable, you can get a pointer to its \s-1AV\s0
by using the following:
.PP
.Vb 1
\&    AV*  get_av("package::varname", 0);
.Ve
.PP
This returns \s-1NULL\s0 if the variable does not exist.
.PP
See \*(L"Understanding the Magic of Tied Hashes and Arrays\*(R" for more
information on how to use the array access functions on tied arrays.
.SS "Working with HVs"
.IX Subsection "Working with HVs"
To create an \s-1HV\s0, you use the following routine:
.PP
.Vb 1
\&    HV*  newHV();
.Ve
.PP
Once the \s-1HV\s0 has been created, the following operations are possible on it:
.PP
.Vb 2
\&    SV**  hv_store(HV*, const char* key, U32 klen, SV* val, U32 hash);
\&    SV**  hv_fetch(HV*, const char* key, U32 klen, I32 lval);
.Ve
.PP
The \f(CW\*(C`klen\*(C'\fR parameter is the length of the key being passed in (Note that
you cannot pass 0 in as a value of \f(CW\*(C`klen\*(C'\fR to tell Perl to measure the
length of the key).  The \f(CW\*(C`val\*(C'\fR argument contains the \s-1SV\s0 pointer to the
scalar being stored, and \f(CW\*(C`hash\*(C'\fR is the precomputed hash value (zero if
you want \f(CW\*(C`hv_store\*(C'\fR to calculate it for you).  The \f(CW\*(C`lval\*(C'\fR parameter
indicates whether this fetch is actually a part of a store operation, in
which case a new undefined value will be added to the \s-1HV\s0 with the supplied
key and \f(CW\*(C`hv_fetch\*(C'\fR will return as if the value had already existed.
.PP
Remember that \f(CW\*(C`hv_store\*(C'\fR and \f(CW\*(C`hv_fetch\*(C'\fR return \f(CW\*(C`SV**\*(C'\fR's and not just
\&\f(CW\*(C`SV*\*(C'\fR.  To access the scalar value, you must first dereference the return
value.  However, you should check to make sure that the return value is
not \s-1NULL\s0 before dereferencing it.
.PP
The first of these two functions checks if a hash table entry exists, and the 
second deletes it.
.PP
.Vb 2
\&    bool  hv_exists(HV*, const char* key, U32 klen);
\&    SV*   hv_delete(HV*, const char* key, U32 klen, I32 flags);
.Ve
.PP
If \f(CW\*(C`flags\*(C'\fR does not include the \f(CW\*(C`G_DISCARD\*(C'\fR flag then \f(CW\*(C`hv_delete\*(C'\fR will
create and return a mortal copy of the deleted value.
.PP
And more miscellaneous functions:
.PP
.Vb 2
\&    void   hv_clear(HV*);
\&    void   hv_undef(HV*);
.Ve
.PP
Like their \s-1AV\s0 counterparts, \f(CW\*(C`hv_clear\*(C'\fR deletes all the entries in the hash
table but does not actually delete the hash table.  The \f(CW\*(C`hv_undef\*(C'\fR deletes
both the entries and the hash table itself.
.PP
Perl keeps the actual data in a linked list of structures with a typedef of \s-1HE\s0.
These contain the actual key and value pointers (plus extra administrative
overhead).  The key is a string pointer; the value is an \f(CW\*(C`SV*\*(C'\fR.  However,
once you have an \f(CW\*(C`HE*\*(C'\fR, to get the actual key and value, use the routines
specified below.
.PP
.Vb 10
\&    I32    hv_iterinit(HV*);
\&            /* Prepares starting point to traverse hash table */
\&    HE*    hv_iternext(HV*);
\&            /* Get the next entry, and return a pointer to a
\&               structure that has both the key and value */
\&    char*  hv_iterkey(HE* entry, I32* retlen);
\&            /* Get the key from an HE structure and also return
\&               the length of the key string */
\&    SV*    hv_iterval(HV*, HE* entry);
\&            /* Return an SV pointer to the value of the HE
\&               structure */
\&    SV*    hv_iternextsv(HV*, char** key, I32* retlen);
\&            /* This convenience routine combines hv_iternext,
\&               hv_iterkey, and hv_iterval.  The key and retlen
\&               arguments are return values for the key and its
\&               length.  The value is returned in the SV* argument */
.Ve
.PP
If you know the name of a hash variable, you can get a pointer to its \s-1HV\s0
by using the following:
.PP
.Vb 1
\&    HV*  get_hv("package::varname", 0);
.Ve
.PP
This returns \s-1NULL\s0 if the variable does not exist.
.PP
The hash algorithm is defined in the \f(CW\*(C`PERL_HASH(hash, key, klen)\*(C'\fR macro:
.PP
.Vb 4
\&    hash = 0;
\&    while (klen\-\-)
\&        hash = (hash * 33) + *key++;
\&    hash = hash + (hash >> 5);                  /* after 5.6 */
.Ve
.PP
The last step was added in version 5.6 to improve distribution of
lower bits in the resulting hash value.
.PP
See \*(L"Understanding the Magic of Tied Hashes and Arrays\*(R" for more
information on how to use the hash access functions on tied hashes.
.SS "Hash \s-1API\s0 Extensions"
.IX Subsection "Hash API Extensions"
Beginning with version 5.004, the following functions are also supported:
.PP
.Vb 2
\&    HE*     hv_fetch_ent  (HV* tb, SV* key, I32 lval, U32 hash);
\&    HE*     hv_store_ent  (HV* tb, SV* key, SV* val, U32 hash);
\&
\&    bool    hv_exists_ent (HV* tb, SV* key, U32 hash);
\&    SV*     hv_delete_ent (HV* tb, SV* key, I32 flags, U32 hash);
\&
\&    SV*     hv_iterkeysv  (HE* entry);
.Ve
.PP
Note that these functions take \f(CW\*(C`SV*\*(C'\fR keys, which simplifies writing
of extension code that deals with hash structures.  These functions
also allow passing of \f(CW\*(C`SV*\*(C'\fR keys to \f(CW\*(C`tie\*(C'\fR functions without forcing
you to stringify the keys (unlike the previous set of functions).
.PP
They also return and accept whole hash entries (\f(CW\*(C`HE*\*(C'\fR), making their
use more efficient (since the hash number for a particular string
doesn't have to be recomputed every time).  See perlapi for detailed
descriptions.
.PP
The following macros must always be used to access the contents of hash
entries.  Note that the arguments to these macros must be simple
variables, since they may get evaluated more than once.  See
perlapi for detailed descriptions of these macros.
.PP
.Vb 6
\&    HePV(HE* he, STRLEN len)
\&    HeVAL(HE* he)
\&    HeHASH(HE* he)
\&    HeSVKEY(HE* he)
\&    HeSVKEY_force(HE* he)
\&    HeSVKEY_set(HE* he, SV* sv)
.Ve
.PP
These two lower level macros are defined, but must only be used when
dealing with keys that are not \f(CW\*(C`SV*\*(C'\fRs:
.PP
.Vb 2
\&    HeKEY(HE* he)
\&    HeKLEN(HE* he)
.Ve
.PP
Note that both \f(CW\*(C`hv_store\*(C'\fR and \f(CW\*(C`hv_store_ent\*(C'\fR do not increment the
reference count of the stored \f(CW\*(C`val\*(C'\fR, which is the caller's responsibility.
If these functions return a \s-1NULL\s0 value, the caller will usually have to
decrement the reference count of \f(CW\*(C`val\*(C'\fR to avoid a memory leak.
.SS "AVs, HVs and undefined values"
.IX Subsection "AVs, HVs and undefined values"
Sometimes you have to store undefined values in AVs or HVs. Although
this may be a rare case, it can be tricky. That's because you're
used to using \f(CW&PL_sv_undef\fR if you need an undefined \s-1SV\s0.
.PP
For example, intuition tells you that this \s-1XS\s0 code:
.PP
.Vb 2
\&    AV *av = newAV();
\&    av_store( av, 0, &PL_sv_undef );
.Ve
.PP
is equivalent to this Perl code:
.PP
.Vb 2
\&    my @av;
\&    $av[0] = undef;
.Ve
.PP
Unfortunately, this isn't true. AVs use \f(CW&PL_sv_undef\fR as a marker
for indicating that an array element has not yet been initialized.
Thus, \f(CW\*(C`exists $av[0]\*(C'\fR would be true for the above Perl code, but
false for the array generated by the \s-1XS\s0 code.
.PP
Other problems can occur when storing \f(CW&PL_sv_undef\fR in HVs:
.PP
.Vb 1
\&    hv_store( hv, "key", 3, &PL_sv_undef, 0 );
.Ve
.PP
This will indeed make the value \f(CW\*(C`undef\*(C'\fR, but if you try to modify
the value of \f(CW\*(C`key\*(C'\fR, you'll get the following error:
.PP
.Vb 1
\&    Modification of non\-creatable hash value attempted
.Ve
.PP
In perl 5.8.0, \f(CW&PL_sv_undef\fR was also used to mark placeholders
in restricted hashes. This caused such hash entries not to appear
when iterating over the hash or when checking for the keys
with the \f(CW\*(C`hv_exists\*(C'\fR function.
.PP
You can run into similar problems when you store \f(CW&PL_sv_yes\fR or
\&\f(CW&PL_sv_no\fR into AVs or HVs. Trying to modify such elements
will give you the following error:
.PP
.Vb 1
\&    Modification of a read\-only value attempted
.Ve
.PP
To make a long story short, you can use the special variables
\&\f(CW&PL_sv_undef\fR, \f(CW&PL_sv_yes\fR and \f(CW&PL_sv_no\fR with AVs and
HVs, but you have to make sure you know what you're doing.
.PP
Generally, if you want to store an undefined value in an \s-1AV\s0
or \s-1HV\s0, you should not use \f(CW&PL_sv_undef\fR, but rather create a
new undefined value using the \f(CW\*(C`newSV\*(C'\fR function, for example:
.PP
.Vb 2
\&    av_store( av, 42, newSV(0) );
\&    hv_store( hv, "foo", 3, newSV(0), 0 );
.Ve
.SS "References"
.IX Subsection "References"
References are a special type of scalar that point to other data types
(including other references).
.PP
To create a reference, use either of the following functions:
.PP
.Vb 2
\&    SV* newRV_inc((SV*) thing);
\&    SV* newRV_noinc((SV*) thing);
.Ve
.PP
The \f(CW\*(C`thing\*(C'\fR argument can be any of an \f(CW\*(C`SV*\*(C'\fR, \f(CW\*(C`AV*\*(C'\fR, or \f(CW\*(C`HV*\*(C'\fR.  The
functions are identical except that \f(CW\*(C`newRV_inc\*(C'\fR increments the reference
count of the \f(CW\*(C`thing\*(C'\fR, while \f(CW\*(C`newRV_noinc\*(C'\fR does not.  For historical
reasons, \f(CW\*(C`newRV\*(C'\fR is a synonym for \f(CW\*(C`newRV_inc\*(C'\fR.
.PP
Once you have a reference, you can use the following macro to dereference
the reference:
.PP
.Vb 1
\&    SvRV(SV*)
.Ve
.PP
then call the appropriate routines, casting the returned \f(CW\*(C`SV*\*(C'\fR to either an
\&\f(CW\*(C`AV*\*(C'\fR or \f(CW\*(C`HV*\*(C'\fR, if required.
.PP
To determine if an \s-1SV\s0 is a reference, you can use the following macro:
.PP
.Vb 1
\&    SvROK(SV*)
.Ve
.PP
To discover what type of value the reference refers to, use the following
macro and then check the return value.
.PP
.Vb 1
\&    SvTYPE(SvRV(SV*))
.Ve
.PP
The most useful types that will be returned are:
.PP
.Vb 9
\&    SVt_IV    Scalar
\&    SVt_NV    Scalar
\&    SVt_PV    Scalar
\&    SVt_RV    Scalar
\&    SVt_PVAV  Array
\&    SVt_PVHV  Hash
\&    SVt_PVCV  Code
\&    SVt_PVGV  Glob (possibly a file handle)
\&    SVt_PVMG  Blessed or Magical Scalar
.Ve
.PP
See the \fIsv.h\fR header file for more details.
.SS "Blessed References and Class Objects"
.IX Subsection "Blessed References and Class Objects"
References are also used to support object-oriented programming.  In perl's
\&\s-1OO\s0 lexicon, an object is simply a reference that has been blessed into a
package (or class).  Once blessed, the programmer may now use the reference
to access the various methods in the class.
.PP
A reference can be blessed into a package with the following function:
.PP
.Vb 1
\&    SV* sv_bless(SV* sv, HV* stash);
.Ve
.PP
The \f(CW\*(C`sv\*(C'\fR argument must be a reference value.  The \f(CW\*(C`stash\*(C'\fR argument
specifies which class the reference will belong to.  See
\&\*(L"Stashes and Globs\*(R" for information on converting class names into stashes.
.PP
/* Still under construction */
.PP
The following function upgrades rv to reference if not already one.
Creates a new \s-1SV\s0 for rv to point to.  If \f(CW\*(C`classname\*(C'\fR is non-null, the \s-1SV\s0
is blessed into the specified class.  \s-1SV\s0 is returned.
.PP
.Vb 1
\&        SV* newSVrv(SV* rv, const char* classname);
.Ve
.PP
The following three functions copy integer, unsigned integer or double
into an \s-1SV\s0 whose reference is \f(CW\*(C`rv\*(C'\fR.  \s-1SV\s0 is blessed if \f(CW\*(C`classname\*(C'\fR is
non-null.
.PP
.Vb 3
\&        SV* sv_setref_iv(SV* rv, const char* classname, IV iv);
\&        SV* sv_setref_uv(SV* rv, const char* classname, UV uv);
\&        SV* sv_setref_nv(SV* rv, const char* classname, NV iv);
.Ve
.PP
The following function copies the pointer value (\fIthe address, not the
string!\fR) into an \s-1SV\s0 whose reference is rv.  \s-1SV\s0 is blessed if \f(CW\*(C`classname\*(C'\fR
is non-null.
.PP
.Vb 1
\&        SV* sv_setref_pv(SV* rv, const char* classname, void* pv);
.Ve
.PP
The following function copies a string into an \s-1SV\s0 whose reference is \f(CW\*(C`rv\*(C'\fR.
Set length to 0 to let Perl calculate the string length.  \s-1SV\s0 is blessed if
\&\f(CW\*(C`classname\*(C'\fR is non-null.
.PP
.Vb 2
\&    SV* sv_setref_pvn(SV* rv, const char* classname, char* pv,
\&                                                         STRLEN length);
.Ve
.PP
The following function tests whether the \s-1SV\s0 is blessed into the specified
class.  It does not check inheritance relationships.
.PP
.Vb 1
\&        int  sv_isa(SV* sv, const char* name);
.Ve
.PP
The following function tests whether the \s-1SV\s0 is a reference to a blessed object.
.PP
.Vb 1
\&        int  sv_isobject(SV* sv);
.Ve
.PP
The following function tests whether the \s-1SV\s0 is derived from the specified
class. \s-1SV\s0 can be either a reference to a blessed object or a string
containing a class name. This is the function implementing the
\&\f(CW\*(C`UNIVERSAL::isa\*(C'\fR functionality.
.PP
.Vb 1
\&        bool sv_derived_from(SV* sv, const char* name);
.Ve
.PP
To check if you've got an object derived from a specific class you have
to write:
.PP
.Vb 1
\&        if (sv_isobject(sv) && sv_derived_from(sv, class)) { ... }
.Ve
.SS "Creating New Variables"
.IX Subsection "Creating New Variables"
To create a new Perl variable with an undef value which can be accessed from
your Perl script, use the following routines, depending on the variable type.
.PP
.Vb 3
\&    SV*  get_sv("package::varname", GV_ADD);
\&    AV*  get_av("package::varname", GV_ADD);
\&    HV*  get_hv("package::varname", GV_ADD);
.Ve
.PP
Notice the use of \s-1GV_ADD\s0 as the second parameter.  The new variable can now
be set, using the routines appropriate to the data type.
.PP
There are additional macros whose values may be bitwise \s-1OR\s0'ed with the
\&\f(CW\*(C`GV_ADD\*(C'\fR argument to enable certain extra features.  Those bits are:
.IP "\s-1GV_ADDMULTI\s0" 4
.IX Item "GV_ADDMULTI"
Marks the variable as multiply defined, thus preventing the:
.Sp
.Vb 1
\&  Name <varname> used only once: possible typo
.Ve
.Sp
warning.
.IP "\s-1GV_ADDWARN\s0" 4
.IX Item "GV_ADDWARN"
Issues the warning:
.Sp
.Vb 1
\&  Had to create <varname> unexpectedly
.Ve
.Sp
if the variable did not exist before the function was called.
.PP
If you do not specify a package name, the variable is created in the current
package.
.SS "Reference Counts and Mortality"
.IX Subsection "Reference Counts and Mortality"
Perl uses a reference count-driven garbage collection mechanism. SVs,
AVs, or HVs (xV for short in the following) start their life with a
reference count of 1.  If the reference count of an xV ever drops to 0,
then it will be destroyed and its memory made available for reuse.
.PP
This normally doesn't happen at the Perl level unless a variable is
undef'ed or the last variable holding a reference to it is changed or
overwritten.  At the internal level, however, reference counts can be
manipulated with the following macros:
.PP
.Vb 3
\&    int SvREFCNT(SV* sv);
\&    SV* SvREFCNT_inc(SV* sv);
\&    void SvREFCNT_dec(SV* sv);
.Ve
.PP
However, there is one other function which manipulates the reference
count of its argument.  The \f(CW\*(C`newRV_inc\*(C'\fR function, you will recall,
creates a reference to the specified argument.  As a side effect,
it increments the argument's reference count.  If this is not what
you want, use \f(CW\*(C`newRV_noinc\*(C'\fR instead.
.PP
For example, imagine you want to return a reference from an \s-1XSUB\s0 function.
Inside the \s-1XSUB\s0 routine, you create an \s-1SV\s0 which initially has a reference
count of one.  Then you call \f(CW\*(C`newRV_inc\*(C'\fR, passing it the just-created \s-1SV\s0.
This returns the reference as a new \s-1SV\s0, but the reference count of the
\&\s-1SV\s0 you passed to \f(CW\*(C`newRV_inc\*(C'\fR has been incremented to two.  Now you
return the reference from the \s-1XSUB\s0 routine and forget about the \s-1SV\s0.
But Perl hasn't!  Whenever the returned reference is destroyed, the
reference count of the original \s-1SV\s0 is decreased to one and nothing happens.
The \s-1SV\s0 will hang around without any way to access it until Perl itself
terminates.  This is a memory leak.
.PP
The correct procedure, then, is to use \f(CW\*(C`newRV_noinc\*(C'\fR instead of
\&\f(CW\*(C`newRV_inc\*(C'\fR.  Then, if and when the last reference is destroyed,
the reference count of the \s-1SV\s0 will go to zero and it will be destroyed,
stopping any memory leak.
.PP
There are some convenience functions available that can help with the
destruction of xVs.  These functions introduce the concept of \*(L"mortality\*(R".
An xV that is mortal has had its reference count marked to be decremented,
but not actually decremented, until \*(L"a short time later\*(R".  Generally the
term \*(L"short time later\*(R" means a single Perl statement, such as a call to
an \s-1XSUB\s0 function.  The actual determinant for when mortal xVs have their
reference count decremented depends on two macros, \s-1SAVETMPS\s0 and \s-1FREETMPS\s0.
See perlcall and perlxs for more details on these macros.
.PP
\&\*(L"Mortalization\*(R" then is at its simplest a deferred \f(CW\*(C`SvREFCNT_dec\*(C'\fR.
However, if you mortalize a variable twice, the reference count will
later be decremented twice.
.PP
\&\*(L"Mortal\*(R" SVs are mainly used for SVs that are placed on perl's stack.
For example an \s-1SV\s0 which is created just to pass a number to a called sub
is made mortal to have it cleaned up automatically when it's popped off
the stack. Similarly, results returned by XSUBs (which are pushed on the
stack) are often made mortal.
.PP
To create a mortal variable, use the functions:
.PP
.Vb 3
\&    SV*  sv_newmortal()
\&    SV*  sv_2mortal(SV*)
\&    SV*  sv_mortalcopy(SV*)
.Ve
.PP
The first call creates a mortal \s-1SV\s0 (with no value), the second converts an existing
\&\s-1SV\s0 to a mortal \s-1SV\s0 (and thus defers a call to \f(CW\*(C`SvREFCNT_dec\*(C'\fR), and the
third creates a mortal copy of an existing \s-1SV\s0.
Because \f(CW\*(C`sv_newmortal\*(C'\fR gives the new \s-1SV\s0 no value, it must normally be given one
via \f(CW\*(C`sv_setpv\*(C'\fR, \f(CW\*(C`sv_setiv\*(C'\fR, etc. :
.PP
.Vb 2
\&    SV *tmp = sv_newmortal();
\&    sv_setiv(tmp, an_integer);
.Ve
.PP
As that is multiple C statements it is quite common so see this idiom instead:
.PP
.Vb 1
\&    SV *tmp = sv_2mortal(newSViv(an_integer));
.Ve
.PP
You should be careful about creating mortal variables.  Strange things
can happen if you make the same value mortal within multiple contexts,
or if you make a variable mortal multiple times. Thinking of \*(L"Mortalization\*(R"
as deferred \f(CW\*(C`SvREFCNT_dec\*(C'\fR should help to minimize such problems.
For example if you are passing an \s-1SV\s0 which you \fIknow\fR has a high enough \s-1REFCNT\s0
to survive its use on the stack you need not do any mortalization.
If you are not sure then doing an \f(CW\*(C`SvREFCNT_inc\*(C'\fR and \f(CW\*(C`sv_2mortal\*(C'\fR, or
making a \f(CW\*(C`sv_mortalcopy\*(C'\fR is safer.
.PP
The mortal routines are not just for SVs; AVs and HVs can be
made mortal by passing their address (type-casted to \f(CW\*(C`SV*\*(C'\fR) to the
\&\f(CW\*(C`sv_2mortal\*(C'\fR or \f(CW\*(C`sv_mortalcopy\*(C'\fR routines.
.SS "Stashes and Globs"
.IX Subsection "Stashes and Globs"
A \fBstash\fR is a hash that contains all variables that are defined
within a package.  Each key of the stash is a symbol
name (shared by all the different types of objects that have the same
name), and each value in the hash table is a \s-1GV\s0 (Glob Value).  This \s-1GV\s0
in turn contains references to the various objects of that name,
including (but not limited to) the following:
.PP
.Vb 6
\&    Scalar Value
\&    Array Value
\&    Hash Value
\&    I/O Handle
\&    Format
\&    Subroutine
.Ve
.PP
There is a single stash called \f(CW\*(C`PL_defstash\*(C'\fR that holds the items that exist
in the \f(CW\*(C`main\*(C'\fR package.  To get at the items in other packages, append the
string \*(L"::\*(R" to the package name.  The items in the \f(CW\*(C`Foo\*(C'\fR package are in
the stash \f(CW\*(C`Foo::\*(C'\fR in PL_defstash.  The items in the \f(CW\*(C`Bar::Baz\*(C'\fR package are
in the stash \f(CW\*(C`Baz::\*(C'\fR in \f(CW\*(C`Bar::\*(C'\fR's stash.
.PP
To get the stash pointer for a particular package, use the function:
.PP
.Vb 2
\&    HV*  gv_stashpv(const char* name, I32 flags)
\&    HV*  gv_stashsv(SV*, I32 flags)
.Ve
.PP
The first function takes a literal string, the second uses the string stored
in the \s-1SV\s0.  Remember that a stash is just a hash table, so you get back an
\&\f(CW\*(C`HV*\*(C'\fR.  The \f(CW\*(C`flags\*(C'\fR flag will create a new package if it is set to \s-1GV_ADD\s0.
.PP
The name that \f(CW\*(C`gv_stash*v\*(C'\fR wants is the name of the package whose symbol table
you want.  The default package is called \f(CW\*(C`main\*(C'\fR.  If you have multiply nested
packages, pass their names to \f(CW\*(C`gv_stash*v\*(C'\fR, separated by \f(CW\*(C`::\*(C'\fR as in the Perl
language itself.
.PP
Alternately, if you have an \s-1SV\s0 that is a blessed reference, you can find
out the stash pointer by using:
.PP
.Vb 1
\&    HV*  SvSTASH(SvRV(SV*));
.Ve
.PP
then use the following to get the package name itself:
.PP
.Vb 1
\&    char*  HvNAME(HV* stash);
.Ve
.PP
If you need to bless or re-bless an object you can use the following
function:
.PP
.Vb 1
\&    SV*  sv_bless(SV*, HV* stash)
.Ve
.PP
where the first argument, an \f(CW\*(C`SV*\*(C'\fR, must be a reference, and the second
argument is a stash.  The returned \f(CW\*(C`SV*\*(C'\fR can now be used in the same way
as any other \s-1SV\s0.
.PP
For more information on references and blessings, consult perlref.
.SS "Double-Typed SVs"
.IX Subsection "Double-Typed SVs"
Scalar variables normally contain only one type of value, an integer,
double, pointer, or reference.  Perl will automatically convert the
actual scalar data from the stored type into the requested type.
.PP
Some scalar variables contain more than one type of scalar data.  For
example, the variable \f(CW$!\fR contains either the numeric value of \f(CW\*(C`errno\*(C'\fR
or its string equivalent from either \f(CW\*(C`strerror\*(C'\fR or \f(CW\*(C`sys_errlist[]\*(C'\fR.
.PP
To force multiple data values into an \s-1SV\s0, you must do two things: use the
\&\f(CW\*(C`sv_set*v\*(C'\fR routines to add the additional scalar type, then set a flag
so that Perl will believe it contains more than one type of data.  The
four macros to set the flags are:
.PP
.Vb 4
\&        SvIOK_on
\&        SvNOK_on
\&        SvPOK_on
\&        SvROK_on
.Ve
.PP
The particular macro you must use depends on which \f(CW\*(C`sv_set*v\*(C'\fR routine
you called first.  This is because every \f(CW\*(C`sv_set*v\*(C'\fR routine turns on
only the bit for the particular type of data being set, and turns off
all the rest.
.PP
For example, to create a new Perl variable called \*(L"dberror\*(R" that contains
both the numeric and descriptive string error values, you could use the
following code:
.PP
.Vb 2
\&    extern int  dberror;
\&    extern char *dberror_list;
\&
\&    SV* sv = get_sv("dberror", GV_ADD);
\&    sv_setiv(sv, (IV) dberror);
\&    sv_setpv(sv, dberror_list[dberror]);
\&    SvIOK_on(sv);
.Ve
.PP
If the order of \f(CW\*(C`sv_setiv\*(C'\fR and \f(CW\*(C`sv_setpv\*(C'\fR had been reversed, then the
macro \f(CW\*(C`SvPOK_on\*(C'\fR would need to be called instead of \f(CW\*(C`SvIOK_on\*(C'\fR.
.SS "Magic Variables"
.IX Subsection "Magic Variables"
[This section still under construction.  Ignore everything here.  Post no
bills.  Everything not permitted is forbidden.]
.PP
Any \s-1SV\s0 may be magical, that is, it has special features that a normal
\&\s-1SV\s0 does not have.  These features are stored in the \s-1SV\s0 structure in a
linked list of \f(CW\*(C`struct magic\*(C'\fR's, typedef'ed to \f(CW\*(C`MAGIC\*(C'\fR.
.PP
.Vb 10
\&    struct magic {
\&        MAGIC*      mg_moremagic;
\&        MGVTBL*     mg_virtual;
\&        U16         mg_private;
\&        char        mg_type;
\&        U8          mg_flags;
\&        I32         mg_len;
\&        SV*         mg_obj;
\&        char*       mg_ptr;
\&    };
.Ve
.PP
Note this is current as of patchlevel 0, and could change at any time.
.SS "Assigning Magic"
.IX Subsection "Assigning Magic"
Perl adds magic to an \s-1SV\s0 using the sv_magic function:
.PP
.Vb 1
\&  void sv_magic(SV* sv, SV* obj, int how, const char* name, I32 namlen);
.Ve
.PP
The \f(CW\*(C`sv\*(C'\fR argument is a pointer to the \s-1SV\s0 that is to acquire a new magical
feature.
.PP
If \f(CW\*(C`sv\*(C'\fR is not already magical, Perl uses the \f(CW\*(C`SvUPGRADE\*(C'\fR macro to
convert \f(CW\*(C`sv\*(C'\fR to type \f(CW\*(C`SVt_PVMG\*(C'\fR. Perl then continues by adding new magic
to the beginning of the linked list of magical features.  Any prior entry
of the same type of magic is deleted.  Note that this can be overridden,
and multiple instances of the same type of magic can be associated with an
\&\s-1SV\s0.
.PP
The \f(CW\*(C`name\*(C'\fR and \f(CW\*(C`namlen\*(C'\fR arguments are used to associate a string with
the magic, typically the name of a variable. \f(CW\*(C`namlen\*(C'\fR is stored in the
\&\f(CW\*(C`mg_len\*(C'\fR field and if \f(CW\*(C`name\*(C'\fR is non-null then either a \f(CW\*(C`savepvn\*(C'\fR copy of
\&\f(CW\*(C`name\*(C'\fR or \f(CW\*(C`name\*(C'\fR itself is stored in the \f(CW\*(C`mg_ptr\*(C'\fR field, depending on
whether \f(CW\*(C`namlen\*(C'\fR is greater than zero or equal to zero respectively.  As a
special case, if \f(CW\*(C`(name && namlen == HEf_SVKEY)\*(C'\fR then \f(CW\*(C`name\*(C'\fR is assumed
to contain an \f(CW\*(C`SV*\*(C'\fR and is stored as-is with its \s-1REFCNT\s0 incremented.
.PP
The sv_magic function uses \f(CW\*(C`how\*(C'\fR to determine which, if any, predefined
\&\*(L"Magic Virtual Table\*(R" should be assigned to the \f(CW\*(C`mg_virtual\*(C'\fR field.
See the \*(L"Magic Virtual Tables\*(R" section below.  The \f(CW\*(C`how\*(C'\fR argument is also
stored in the \f(CW\*(C`mg_type\*(C'\fR field. The value of \f(CW\*(C`how\*(C'\fR should be chosen
from the set of macros \f(CW\*(C`PERL_MAGIC_foo\*(C'\fR found in \fIperl.h\fR. Note that before
these macros were added, Perl internals used to directly use character
literals, so you may occasionally come across old code or documentation
referring to 'U' magic rather than \f(CW\*(C`PERL_MAGIC_uvar\*(C'\fR for example.
.PP
The \f(CW\*(C`obj\*(C'\fR argument is stored in the \f(CW\*(C`mg_obj\*(C'\fR field of the \f(CW\*(C`MAGIC\*(C'\fR
structure.  If it is not the same as the \f(CW\*(C`sv\*(C'\fR argument, the reference
count of the \f(CW\*(C`obj\*(C'\fR object is incremented.  If it is the same, or if
the \f(CW\*(C`how\*(C'\fR argument is \f(CW\*(C`PERL_MAGIC_arylen\*(C'\fR, or if it is a \s-1NULL\s0 pointer,
then \f(CW\*(C`obj\*(C'\fR is merely stored, without the reference count being incremented.
.PP
See also \f(CW\*(C`sv_magicext\*(C'\fR in perlapi for a more flexible way to add magic
to an \s-1SV\s0.
.PP
There is also a function to add magic to an \f(CW\*(C`HV\*(C'\fR:
.PP
.Vb 1
\&    void hv_magic(HV *hv, GV *gv, int how);
.Ve
.PP
This simply calls \f(CW\*(C`sv_magic\*(C'\fR and coerces the \f(CW\*(C`gv\*(C'\fR argument into an \f(CW\*(C`SV\*(C'\fR.
.PP
To remove the magic from an \s-1SV\s0, call the function sv_unmagic:
.PP
.Vb 1
\&    int sv_unmagic(SV *sv, int type);
.Ve
.PP
The \f(CW\*(C`type\*(C'\fR argument should be equal to the \f(CW\*(C`how\*(C'\fR value when the \f(CW\*(C`SV\*(C'\fR
was initially made magical.
.PP
However, note that \f(CW\*(C`sv_unmagic\*(C'\fR removes all magic of a certain \f(CW\*(C`type\*(C'\fR from the
\&\f(CW\*(C`SV\*(C'\fR. If you want to remove only certain magic of a \f(CW\*(C`type\*(C'\fR based on the magic
virtual table, use \f(CW\*(C`sv_unmagicext\*(C'\fR instead:
.PP
.Vb 1
\&    int sv_unmagicext(SV *sv, int type, MGVTBL *vtbl);
.Ve
.SS "Magic Virtual Tables"
.IX Subsection "Magic Virtual Tables"
The \f(CW\*(C`mg_virtual\*(C'\fR field in the \f(CW\*(C`MAGIC\*(C'\fR structure is a pointer to an
\&\f(CW\*(C`MGVTBL\*(C'\fR, which is a structure of function pointers and stands for
\&\*(L"Magic Virtual Table\*(R" to handle the various operations that might be
applied to that variable.
.PP
The \f(CW\*(C`MGVTBL\*(C'\fR has five (or sometimes eight) pointers to the following
routine types:
.PP
.Vb 5
\&    int  (*svt_get)(SV* sv, MAGIC* mg);
\&    int  (*svt_set)(SV* sv, MAGIC* mg);
\&    U32  (*svt_len)(SV* sv, MAGIC* mg);
\&    int  (*svt_clear)(SV* sv, MAGIC* mg);
\&    int  (*svt_free)(SV* sv, MAGIC* mg);
\&
\&    int  (*svt_copy)(SV *sv, MAGIC* mg, SV *nsv,
\&                                          const char *name, I32 namlen);
\&    int  (*svt_dup)(MAGIC *mg, CLONE_PARAMS *param);
\&    int  (*svt_local)(SV *nsv, MAGIC *mg);
.Ve
.PP
This \s-1MGVTBL\s0 structure is set at compile-time in \fIperl.h\fR and there are
currently 32 types.  These different structures contain pointers to various
routines that perform additional actions depending on which function is
being called.
.PP
.Vb 8
\&   Function pointer    Action taken
\&   \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-    \-\-\-\-\-\-\-\-\-\-\-\-
\&   svt_get             Do something before the value of the SV is
\&                       retrieved.
\&   svt_set             Do something after the SV is assigned a value.
\&   svt_len             Report on the SV\*(Aqs length.
\&   svt_clear           Clear something the SV represents.
\&   svt_free            Free any extra storage associated with the SV.
\&
\&   svt_copy            copy tied variable magic to a tied element
\&   svt_dup             duplicate a magic structure during thread cloning
\&   svt_local           copy magic to local value during \*(Aqlocal\*(Aq
.Ve
.PP
For instance, the \s-1MGVTBL\s0 structure called \f(CW\*(C`vtbl_sv\*(C'\fR (which corresponds
to an \f(CW\*(C`mg_type\*(C'\fR of \f(CW\*(C`PERL_MAGIC_sv\*(C'\fR) contains:
.PP
.Vb 1
\&    { magic_get, magic_set, magic_len, 0, 0 }
.Ve
.PP
Thus, when an \s-1SV\s0 is determined to be magical and of type \f(CW\*(C`PERL_MAGIC_sv\*(C'\fR,
if a get operation is being performed, the routine \f(CW\*(C`magic_get\*(C'\fR is
called.  All the various routines for the various magical types begin
with \f(CW\*(C`magic_\*(C'\fR.  \s-1NOTE:\s0 the magic routines are not considered part of
the Perl \s-1API\s0, and may not be exported by the Perl library.
.PP
The last three slots are a recent addition, and for source code
compatibility they are only checked for if one of the three flags
MGf_COPY, MGf_DUP or MGf_LOCAL is set in mg_flags. This means that most
code can continue declaring a vtable as a 5\-element value. These three are
currently used exclusively by the threading code, and are highly subject
to change.
.PP
The current kinds of Magic Virtual Tables are:
.PP
.Vb 10
\& mg_type
\& (old\-style char and macro)   MGVTBL          Type of magic
\& \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-   \-\-\-\-\-\-          \-\-\-\-\-\-\-\-\-\-\-\-\-
\& \e0 PERL_MAGIC_sv             vtbl_sv         Special scalar variable
\& #  PERL_MAGIC_arylen         vtbl_arylen     Array length ($#ary)
\& %  PERL_MAGIC_rhash          (none)          extra data for restricted
\&                                              hashes
\& .  PERL_MAGIC_pos            vtbl_pos        pos() lvalue
\& :  PERL_MAGIC_symtab         (none)          extra data for symbol
\&                                              tables
\& <  PERL_MAGIC_backref        vtbl_backref    for weak ref data
\& @  PERL_MAGIC_arylen_p       (none)          to move arylen out of
\&                                              XPVAV
\& A  PERL_MAGIC_overload       vtbl_amagic     %OVERLOAD hash
\& a  PERL_MAGIC_overload_elem  vtbl_amagicelem %OVERLOAD hash element
\& B  PERL_MAGIC_bm             vtbl_regexp     Boyer\-Moore 
\&                                              (fast string search)
\& c  PERL_MAGIC_overload_table vtbl_ovrld      Holds overload table 
\&                                              (AMT) on stash
\& D  PERL_MAGIC_regdata        vtbl_regdata    Regex match position data 
\&                                              (@+ and @\- vars)
\& d  PERL_MAGIC_regdatum       vtbl_regdatum   Regex match position data
\&                                              element
\& E  PERL_MAGIC_env            vtbl_env        %ENV hash
\& e  PERL_MAGIC_envelem        vtbl_envelem    %ENV hash element
\& f  PERL_MAGIC_fm             vtbl_regdata    Formline 
\&                                              (\*(Aqcompiled\*(Aq format)
\& G  PERL_MAGIC_study          vtbl_regexp     study()ed string
\& g  PERL_MAGIC_regex_global   vtbl_mglob      m//g target
\& H  PERL_MAGIC_hints          vtbl_hints      %^H hash
\& h  PERL_MAGIC_hintselem      vtbl_hintselem  %^H hash element
\& I  PERL_MAGIC_isa            vtbl_isa        @ISA array
\& i  PERL_MAGIC_isaelem        vtbl_isaelem    @ISA array element
\& k  PERL_MAGIC_nkeys          vtbl_nkeys      scalar(keys()) lvalue
\& L  PERL_MAGIC_dbfile         (none)          Debugger %_<filename
\& l  PERL_MAGIC_dbline         vtbl_dbline     Debugger %_<filename
\&                                              element
\& N  PERL_MAGIC_shared         (none)          Shared between threads
\& n  PERL_MAGIC_shared_scalar  (none)          Shared between threads
\& o  PERL_MAGIC_collxfrm       vtbl_collxfrm   Locale transformation
\& P  PERL_MAGIC_tied           vtbl_pack       Tied array or hash
\& p  PERL_MAGIC_tiedelem       vtbl_packelem   Tied array or hash element
\& q  PERL_MAGIC_tiedscalar     vtbl_packelem   Tied scalar or handle
\& r  PERL_MAGIC_qr             vtbl_regexp     precompiled qr// regex
\& S  PERL_MAGIC_sig            (none)          %SIG hash
\& s  PERL_MAGIC_sigelem        vtbl_sigelem    %SIG hash element
\& t  PERL_MAGIC_taint          vtbl_taint      Taintedness
\& U  PERL_MAGIC_uvar           vtbl_uvar       Available for use by
\&                                              extensions
\& u  PERL_MAGIC_uvar_elem      (none)          Reserved for use by
\&                                              extensions
\& V  PERL_MAGIC_vstring        vtbl_vstring    SV was vstring literal
\& v  PERL_MAGIC_vec            vtbl_vec        vec() lvalue
\& w  PERL_MAGIC_utf8           vtbl_utf8       Cached UTF\-8 information
\& x  PERL_MAGIC_substr         vtbl_substr     substr() lvalue
\& y  PERL_MAGIC_defelem        vtbl_defelem    Shadow "foreach" iterator
\&                                              variable / smart parameter
\&                                              vivification
\& ]  PERL_MAGIC_checkcall      (none)          inlining/mutation of call
\&                                              to this CV
\& ~  PERL_MAGIC_ext            (none)          Available for use by
\&                                              extensions
.Ve
.PP
When an uppercase and lowercase letter both exist in the table, then the
uppercase letter is typically used to represent some kind of composite type
(a list or a hash), and the lowercase letter is used to represent an element
of that composite type. Some internals code makes use of this case
relationship.  However, 'v' and 'V' (vec and v\-string) are in no way related.
.PP
The \f(CW\*(C`PERL_MAGIC_ext\*(C'\fR and \f(CW\*(C`PERL_MAGIC_uvar\*(C'\fR magic types are defined
specifically for use by extensions and will not be used by perl itself.
Extensions can use \f(CW\*(C`PERL_MAGIC_ext\*(C'\fR magic to 'attach' private information
to variables (typically objects).  This is especially useful because
there is no way for normal perl code to corrupt this private information
(unlike using extra elements of a hash object).
.PP
Similarly, \f(CW\*(C`PERL_MAGIC_uvar\*(C'\fR magic can be used much like \fItie()\fR to call a
C function any time a scalar's value is used or changed.  The \f(CW\*(C`MAGIC\*(C'\fR's
\&\f(CW\*(C`mg_ptr\*(C'\fR field points to a \f(CW\*(C`ufuncs\*(C'\fR structure:
.PP
.Vb 5
\&    struct ufuncs {
\&        I32 (*uf_val)(pTHX_ IV, SV*);
\&        I32 (*uf_set)(pTHX_ IV, SV*);
\&        IV uf_index;
\&    };
.Ve
.PP
When the \s-1SV\s0 is read from or written to, the \f(CW\*(C`uf_val\*(C'\fR or \f(CW\*(C`uf_set\*(C'\fR
function will be called with \f(CW\*(C`uf_index\*(C'\fR as the first arg and a pointer to
the \s-1SV\s0 as the second.  A simple example of how to add \f(CW\*(C`PERL_MAGIC_uvar\*(C'\fR
magic is shown below.  Note that the ufuncs structure is copied by
sv_magic, so you can safely allocate it on the stack.
.PP
.Vb 10
\&    void
\&    Umagic(sv)
\&        SV *sv;
\&    PREINIT:
\&        struct ufuncs uf;
\&    CODE:
\&        uf.uf_val   = &my_get_fn;
\&        uf.uf_set   = &my_set_fn;
\&        uf.uf_index = 0;
\&        sv_magic(sv, 0, PERL_MAGIC_uvar, (char*)&uf, sizeof(uf));
.Ve
.PP
Attaching \f(CW\*(C`PERL_MAGIC_uvar\*(C'\fR to arrays is permissible but has no effect.
.PP
For hashes there is a specialized hook that gives control over hash
keys (but not values).  This hook calls \f(CW\*(C`PERL_MAGIC_uvar\*(C'\fR 'get' magic
if the \*(L"set\*(R" function in the \f(CW\*(C`ufuncs\*(C'\fR structure is \s-1NULL\s0.  The hook
is activated whenever the hash is accessed with a key specified as
an \f(CW\*(C`SV\*(C'\fR through the functions \f(CW\*(C`hv_store_ent\*(C'\fR, \f(CW\*(C`hv_fetch_ent\*(C'\fR,
\&\f(CW\*(C`hv_delete_ent\*(C'\fR, and \f(CW\*(C`hv_exists_ent\*(C'\fR.  Accessing the key as a string
through the functions without the \f(CW\*(C`..._ent\*(C'\fR suffix circumvents the
hook.  See \*(L"\s-1GUTS\s0\*(R" in Hash::Util::FieldHash for a detailed description.
.PP
Note that because multiple extensions may be using \f(CW\*(C`PERL_MAGIC_ext\*(C'\fR
or \f(CW\*(C`PERL_MAGIC_uvar\*(C'\fR magic, it is important for extensions to take
extra care to avoid conflict.  Typically only using the magic on
objects blessed into the same class as the extension is sufficient.
For \f(CW\*(C`PERL_MAGIC_ext\*(C'\fR magic, it is usually a good idea to define an
\&\f(CW\*(C`MGVTBL\*(C'\fR, even if all its fields will be \f(CW0\fR, so that individual
\&\f(CW\*(C`MAGIC\*(C'\fR pointers can be identified as a particular kind of magic
using their magic virtual table. \f(CW\*(C`mg_findext\*(C'\fR provides an easy way
to do that:
.PP
.Vb 1
\&    STATIC MGVTBL my_vtbl = { 0, 0, 0, 0, 0, 0, 0, 0 };
\&
\&    MAGIC *mg;
\&    if ((mg = mg_findext(sv, PERL_MAGIC_ext, &my_vtbl))) {
\&        /* this is really ours, not another module\*(Aqs PERL_MAGIC_ext */
\&        my_priv_data_t *priv = (my_priv_data_t *)mg\->mg_ptr;
\&        ...
\&    }
.Ve
.PP
Also note that the \f(CW\*(C`sv_set*()\*(C'\fR and \f(CW\*(C`sv_cat*()\*(C'\fR functions described
earlier do \fBnot\fR invoke 'set' magic on their targets.  This must
be done by the user either by calling the \f(CW\*(C`SvSETMAGIC()\*(C'\fR macro after
calling these functions, or by using one of the \f(CW\*(C`sv_set*_mg()\*(C'\fR or
\&\f(CW\*(C`sv_cat*_mg()\*(C'\fR functions.  Similarly, generic C code must call the
\&\f(CW\*(C`SvGETMAGIC()\*(C'\fR macro to invoke any 'get' magic if they use an \s-1SV\s0
obtained from external sources in functions that don't handle magic.
See perlapi for a description of these functions.
For example, calls to the \f(CW\*(C`sv_cat*()\*(C'\fR functions typically need to be
followed by \f(CW\*(C`SvSETMAGIC()\*(C'\fR, but they don't need a prior \f(CW\*(C`SvGETMAGIC()\*(C'\fR
since their implementation handles 'get' magic.
.SS "Finding Magic"
.IX Subsection "Finding Magic"
.Vb 2
\&    MAGIC *mg_find(SV *sv, int type); /* Finds the magic pointer of that
\&                                       * type */
.Ve
.PP
This routine returns a pointer to a \f(CW\*(C`MAGIC\*(C'\fR structure stored in the \s-1SV\s0.
If the \s-1SV\s0 does not have that magical feature, \f(CW\*(C`NULL\*(C'\fR is returned. If the
\&\s-1SV\s0 has multiple instances of that magical feature, the first one will be
returned. \f(CW\*(C`mg_findext\*(C'\fR can be used to find a \f(CW\*(C`MAGIC\*(C'\fR structure of an \s-1SV\s0
based on both its magic type and its magic virtual table:
.PP
.Vb 1
\&    MAGIC *mg_findext(SV *sv, int type, MGVTBL *vtbl);
.Ve
.PP
Also, if the \s-1SV\s0 passed to \f(CW\*(C`mg_find\*(C'\fR or \f(CW\*(C`mg_findext\*(C'\fR is not of type
SVt_PVMG, Perl may core dump.
.PP
.Vb 1
\&    int mg_copy(SV* sv, SV* nsv, const char* key, STRLEN klen);
.Ve
.PP
This routine checks to see what types of magic \f(CW\*(C`sv\*(C'\fR has.  If the mg_type
field is an uppercase letter, then the mg_obj is copied to \f(CW\*(C`nsv\*(C'\fR, but
the mg_type field is changed to be the lowercase letter.
.SS "Understanding the Magic of Tied Hashes and Arrays"
.IX Subsection "Understanding the Magic of Tied Hashes and Arrays"
Tied hashes and arrays are magical beasts of the \f(CW\*(C`PERL_MAGIC_tied\*(C'\fR
magic type.
.PP
\&\s-1WARNING:\s0 As of the 5.004 release, proper usage of the array and hash
access functions requires understanding a few caveats.  Some
of these caveats are actually considered bugs in the \s-1API\s0, to be fixed
in later releases, and are bracketed with [\s-1MAYCHANGE\s0] below. If
you find yourself actually applying such information in this section, be
aware that the behavior may change in the future, umm, without warning.
.PP
The perl tie function associates a variable with an object that implements
the various \s-1GET\s0, \s-1SET\s0, etc methods.  To perform the equivalent of the perl
tie function from an \s-1XSUB\s0, you must mimic this behaviour.  The code below
carries out the necessary steps \- firstly it creates a new hash, and then
creates a second hash which it blesses into the class which will implement
the tie methods. Lastly it ties the two hashes together, and returns a
reference to the new tied hash.  Note that the code below does \s-1NOT\s0 call the
\&\s-1TIEHASH\s0 method in the MyTie class \-
see \*(L"Calling Perl Routines from within C Programs\*(R" for details on how
to do this.
.PP
.Vb 10
\&    SV*
\&    mytie()
\&    PREINIT:
\&        HV *hash;
\&        HV *stash;
\&        SV *tie;
\&    CODE:
\&        hash = newHV();
\&        tie = newRV_noinc((SV*)newHV());
\&        stash = gv_stashpv("MyTie", GV_ADD);
\&        sv_bless(tie, stash);
\&        hv_magic(hash, (GV*)tie, PERL_MAGIC_tied);
\&        RETVAL = newRV_noinc(hash);
\&    OUTPUT:
\&        RETVAL
.Ve
.PP
The \f(CW\*(C`av_store\*(C'\fR function, when given a tied array argument, merely
copies the magic of the array onto the value to be \*(L"stored\*(R", using
\&\f(CW\*(C`mg_copy\*(C'\fR.  It may also return \s-1NULL\s0, indicating that the value did not
actually need to be stored in the array.  [\s-1MAYCHANGE\s0] After a call to
\&\f(CW\*(C`av_store\*(C'\fR on a tied array, the caller will usually need to call
\&\f(CW\*(C`mg_set(val)\*(C'\fR to actually invoke the perl level \*(L"\s-1STORE\s0\*(R" method on the
\&\s-1TIEARRAY\s0 object.  If \f(CW\*(C`av_store\*(C'\fR did return \s-1NULL\s0, a call to
\&\f(CW\*(C`SvREFCNT_dec(val)\*(C'\fR will also be usually necessary to avoid a memory
leak. [/MAYCHANGE]
.PP
The previous paragraph is applicable verbatim to tied hash access using the
\&\f(CW\*(C`hv_store\*(C'\fR and \f(CW\*(C`hv_store_ent\*(C'\fR functions as well.
.PP
\&\f(CW\*(C`av_fetch\*(C'\fR and the corresponding hash functions \f(CW\*(C`hv_fetch\*(C'\fR and
\&\f(CW\*(C`hv_fetch_ent\*(C'\fR actually return an undefined mortal value whose magic
has been initialized using \f(CW\*(C`mg_copy\*(C'\fR.  Note the value so returned does not
need to be deallocated, as it is already mortal.  [\s-1MAYCHANGE\s0] But you will
need to call \f(CW\*(C`mg_get()\*(C'\fR on the returned value in order to actually invoke
the perl level \*(L"\s-1FETCH\s0\*(R" method on the underlying \s-1TIE\s0 object.  Similarly,
you may also call \f(CW\*(C`mg_set()\*(C'\fR on the return value after possibly assigning
a suitable value to it using \f(CW\*(C`sv_setsv\*(C'\fR,  which will invoke the \*(L"\s-1STORE\s0\*(R"
method on the \s-1TIE\s0 object. [/MAYCHANGE]
.PP
[\s-1MAYCHANGE\s0]
In other words, the array or hash fetch/store functions don't really
fetch and store actual values in the case of tied arrays and hashes.  They
merely call \f(CW\*(C`mg_copy\*(C'\fR to attach magic to the values that were meant to be
\&\*(L"stored\*(R" or \*(L"fetched\*(R".  Later calls to \f(CW\*(C`mg_get\*(C'\fR and \f(CW\*(C`mg_set\*(C'\fR actually
do the job of invoking the \s-1TIE\s0 methods on the underlying objects.  Thus
the magic mechanism currently implements a kind of lazy access to arrays
and hashes.
.PP
Currently (as of perl version 5.004), use of the hash and array access
functions requires the user to be aware of whether they are operating on
\&\*(L"normal\*(R" hashes and arrays, or on their tied variants.  The \s-1API\s0 may be
changed to provide more transparent access to both tied and normal data
types in future versions.
[/MAYCHANGE]
.PP
You would do well to understand that the \s-1TIEARRAY\s0 and \s-1TIEHASH\s0 interfaces
are mere sugar to invoke some perl method calls while using the uniform hash
and array syntax.  The use of this sugar imposes some overhead (typically
about two to four extra opcodes per \s-1FETCH/STORE\s0 operation, in addition to
the creation of all the mortal variables required to invoke the methods).
This overhead will be comparatively small if the \s-1TIE\s0 methods are themselves
substantial, but if they are only a few statements long, the overhead
will not be insignificant.
.SS "Localizing changes"
.IX Subsection "Localizing changes"
Perl has a very handy construction
.PP
.Vb 4
\&  {
\&    local $var = 2;
\&    ...
\&  }
.Ve
.PP
This construction is \fIapproximately\fR equivalent to
.PP
.Vb 6
\&  {
\&    my $oldvar = $var;
\&    $var = 2;
\&    ...
\&    $var = $oldvar;
\&  }
.Ve
.PP
The biggest difference is that the first construction would
reinstate the initial value of \f(CW$var\fR, irrespective of how control exits
the block: \f(CW\*(C`goto\*(C'\fR, \f(CW\*(C`return\*(C'\fR, \f(CW\*(C`die\*(C'\fR/\f(CW\*(C`eval\*(C'\fR, etc. It is a little bit
more efficient as well.
.PP
There is a way to achieve a similar task from C via Perl \s-1API:\s0 create a
\&\fIpseudo-block\fR, and arrange for some changes to be automatically
undone at the end of it, either explicit, or via a non-local exit (via
\&\fIdie()\fR). A \fIblock\fR\-like construct is created by a pair of
\&\f(CW\*(C`ENTER\*(C'\fR/\f(CW\*(C`LEAVE\*(C'\fR macros (see \*(L"Returning a Scalar\*(R" in perlcall).
Such a construct may be created specially for some important localized
task, or an existing one (like boundaries of enclosing Perl
subroutine/block, or an existing pair for freeing TMPs) may be
used. (In the second case the overhead of additional localization must
be almost negligible.) Note that any \s-1XSUB\s0 is automatically enclosed in
an \f(CW\*(C`ENTER\*(C'\fR/\f(CW\*(C`LEAVE\*(C'\fR pair.
.PP
Inside such a \fIpseudo-block\fR the following service is available:
.ie n .IP """SAVEINT(int i)""" 4
.el .IP "\f(CWSAVEINT(int i)\fR" 4
.IX Item "SAVEINT(int i)"
.PD 0
.ie n .IP """SAVEIV(IV i)""" 4
.el .IP "\f(CWSAVEIV(IV i)\fR" 4
.IX Item "SAVEIV(IV i)"
.ie n .IP """SAVEI32(I32 i)""" 4
.el .IP "\f(CWSAVEI32(I32 i)\fR" 4
.IX Item "SAVEI32(I32 i)"
.ie n .IP """SAVELONG(long i)""" 4
.el .IP "\f(CWSAVELONG(long i)\fR" 4
.IX Item "SAVELONG(long i)"
.PD
These macros arrange things to restore the value of integer variable
\&\f(CW\*(C`i\*(C'\fR at the end of enclosing \fIpseudo-block\fR.
.ie n .IP "SAVESPTR(s)" 4
.el .IP "\f(CWSAVESPTR(s)\fR" 4
.IX Item "SAVESPTR(s)"
.PD 0
.ie n .IP "SAVEPPTR(p)" 4
.el .IP "\f(CWSAVEPPTR(p)\fR" 4
.IX Item "SAVEPPTR(p)"
.PD
These macros arrange things to restore the value of pointers \f(CW\*(C`s\*(C'\fR and
\&\f(CW\*(C`p\*(C'\fR. \f(CW\*(C`s\*(C'\fR must be a pointer of a type which survives conversion to
\&\f(CW\*(C`SV*\*(C'\fR and back, \f(CW\*(C`p\*(C'\fR should be able to survive conversion to \f(CW\*(C`char*\*(C'\fR
and back.
.ie n .IP """SAVEFREESV(SV *sv)""" 4
.el .IP "\f(CWSAVEFREESV(SV *sv)\fR" 4
.IX Item "SAVEFREESV(SV *sv)"
The refcount of \f(CW\*(C`sv\*(C'\fR would be decremented at the end of
\&\fIpseudo-block\fR.  This is similar to \f(CW\*(C`sv_2mortal\*(C'\fR in that it is also a
mechanism for doing a delayed \f(CW\*(C`SvREFCNT_dec\*(C'\fR.  However, while \f(CW\*(C`sv_2mortal\*(C'\fR
extends the lifetime of \f(CW\*(C`sv\*(C'\fR until the beginning of the next statement,
\&\f(CW\*(C`SAVEFREESV\*(C'\fR extends it until the end of the enclosing scope.  These
lifetimes can be wildly different.
.Sp
Also compare \f(CW\*(C`SAVEMORTALIZESV\*(C'\fR.
.ie n .IP """SAVEMORTALIZESV(SV *sv)""" 4
.el .IP "\f(CWSAVEMORTALIZESV(SV *sv)\fR" 4
.IX Item "SAVEMORTALIZESV(SV *sv)"
Just like \f(CW\*(C`SAVEFREESV\*(C'\fR, but mortalizes \f(CW\*(C`sv\*(C'\fR at the end of the current
scope instead of decrementing its reference count.  This usually has the
effect of keeping \f(CW\*(C`sv\*(C'\fR alive until the statement that called the currently
live scope has finished executing.
.ie n .IP """SAVEFREEOP(OP *op)""" 4
.el .IP "\f(CWSAVEFREEOP(OP *op)\fR" 4
.IX Item "SAVEFREEOP(OP *op)"
The \f(CW\*(C`OP *\*(C'\fR is \fIop_free()\fRed at the end of \fIpseudo-block\fR.
.ie n .IP "SAVEFREEPV(p)" 4
.el .IP "\f(CWSAVEFREEPV(p)\fR" 4
.IX Item "SAVEFREEPV(p)"
The chunk of memory which is pointed to by \f(CW\*(C`p\*(C'\fR is \fISafefree()\fRed at the
end of \fIpseudo-block\fR.
.ie n .IP """SAVECLEARSV(SV *sv)""" 4
.el .IP "\f(CWSAVECLEARSV(SV *sv)\fR" 4
.IX Item "SAVECLEARSV(SV *sv)"
Clears a slot in the current scratchpad which corresponds to \f(CW\*(C`sv\*(C'\fR at
the end of \fIpseudo-block\fR.
.ie n .IP """SAVEDELETE(HV *hv, char *key, I32 length)""" 4
.el .IP "\f(CWSAVEDELETE(HV *hv, char *key, I32 length)\fR" 4
.IX Item "SAVEDELETE(HV *hv, char *key, I32 length)"
The key \f(CW\*(C`key\*(C'\fR of \f(CW\*(C`hv\*(C'\fR is deleted at the end of \fIpseudo-block\fR. The
string pointed to by \f(CW\*(C`key\*(C'\fR is \fISafefree()\fRed.  If one has a \fIkey\fR in
short-lived storage, the corresponding string may be reallocated like
this:
.Sp
.Vb 1
\&  SAVEDELETE(PL_defstash, savepv(tmpbuf), strlen(tmpbuf));
.Ve
.ie n .IP """SAVEDESTRUCTOR(DESTRUCTORFUNC_NOCONTEXT_t f, void *p)""" 4
.el .IP "\f(CWSAVEDESTRUCTOR(DESTRUCTORFUNC_NOCONTEXT_t f, void *p)\fR" 4
.IX Item "SAVEDESTRUCTOR(DESTRUCTORFUNC_NOCONTEXT_t f, void *p)"
At the end of \fIpseudo-block\fR the function \f(CW\*(C`f\*(C'\fR is called with the
only argument \f(CW\*(C`p\*(C'\fR.
.ie n .IP """SAVEDESTRUCTOR_X(DESTRUCTORFUNC_t f, void *p)""" 4
.el .IP "\f(CWSAVEDESTRUCTOR_X(DESTRUCTORFUNC_t f, void *p)\fR" 4
.IX Item "SAVEDESTRUCTOR_X(DESTRUCTORFUNC_t f, void *p)"
At the end of \fIpseudo-block\fR the function \f(CW\*(C`f\*(C'\fR is called with the
implicit context argument (if any), and \f(CW\*(C`p\*(C'\fR.
.ie n .IP """SAVESTACK_POS()""" 4
.el .IP "\f(CWSAVESTACK_POS()\fR" 4
.IX Item "SAVESTACK_POS()"
The current offset on the Perl internal stack (cf. \f(CW\*(C`SP\*(C'\fR) is restored
at the end of \fIpseudo-block\fR.
.PP
The following \s-1API\s0 list contains functions, thus one needs to
provide pointers to the modifiable data explicitly (either C pointers,
or Perlish \f(CW\*(C`GV *\*(C'\fRs).  Where the above macros take \f(CW\*(C`int\*(C'\fR, a similar
function takes \f(CW\*(C`int *\*(C'\fR.
.ie n .IP """SV* save_scalar(GV *gv)""" 4
.el .IP "\f(CWSV* save_scalar(GV *gv)\fR" 4
.IX Item "SV* save_scalar(GV *gv)"
Equivalent to Perl code \f(CW\*(C`local $gv\*(C'\fR.
.ie n .IP """AV* save_ary(GV *gv)""" 4
.el .IP "\f(CWAV* save_ary(GV *gv)\fR" 4
.IX Item "AV* save_ary(GV *gv)"
.PD 0
.ie n .IP """HV* save_hash(GV *gv)""" 4
.el .IP "\f(CWHV* save_hash(GV *gv)\fR" 4
.IX Item "HV* save_hash(GV *gv)"
.PD
Similar to \f(CW\*(C`save_scalar\*(C'\fR, but localize \f(CW@gv\fR and \f(CW%gv\fR.
.ie n .IP """void save_item(SV *item)""" 4
.el .IP "\f(CWvoid save_item(SV *item)\fR" 4
.IX Item "void save_item(SV *item)"
Duplicates the current value of \f(CW\*(C`SV\*(C'\fR, on the exit from the current
\&\f(CW\*(C`ENTER\*(C'\fR/\f(CW\*(C`LEAVE\*(C'\fR \fIpseudo-block\fR will restore the value of \f(CW\*(C`SV\*(C'\fR
using the stored value. It doesn't handle magic. Use \f(CW\*(C`save_scalar\*(C'\fR if
magic is affected.
.ie n .IP """void save_list(SV **sarg, I32 maxsarg)""" 4
.el .IP "\f(CWvoid save_list(SV **sarg, I32 maxsarg)\fR" 4
.IX Item "void save_list(SV **sarg, I32 maxsarg)"
A variant of \f(CW\*(C`save_item\*(C'\fR which takes multiple arguments via an array
\&\f(CW\*(C`sarg\*(C'\fR of \f(CW\*(C`SV*\*(C'\fR of length \f(CW\*(C`maxsarg\*(C'\fR.
.ie n .IP """SV* save_svref(SV **sptr)""" 4
.el .IP "\f(CWSV* save_svref(SV **sptr)\fR" 4
.IX Item "SV* save_svref(SV **sptr)"
Similar to \f(CW\*(C`save_scalar\*(C'\fR, but will reinstate an \f(CW\*(C`SV *\*(C'\fR.
.ie n .IP """void save_aptr(AV **aptr)""" 4
.el .IP "\f(CWvoid save_aptr(AV **aptr)\fR" 4
.IX Item "void save_aptr(AV **aptr)"
.PD 0
.ie n .IP """void save_hptr(HV **hptr)""" 4
.el .IP "\f(CWvoid save_hptr(HV **hptr)\fR" 4
.IX Item "void save_hptr(HV **hptr)"
.PD
Similar to \f(CW\*(C`save_svref\*(C'\fR, but localize \f(CW\*(C`AV *\*(C'\fR and \f(CW\*(C`HV *\*(C'\fR.
.PP
The \f(CW\*(C`Alias\*(C'\fR module implements localization of the basic types within the
\&\fIcaller's scope\fR.  People who are interested in how to localize things in
the containing scope should take a look there too.
.SH "Subroutines"
.IX Header "Subroutines"
.SS "XSUBs and the Argument Stack"
.IX Subsection "XSUBs and the Argument Stack"
The \s-1XSUB\s0 mechanism is a simple way for Perl programs to access C subroutines.
An \s-1XSUB\s0 routine will have a stack that contains the arguments from the Perl
program, and a way to map from the Perl data structures to a C equivalent.
.PP
The stack arguments are accessible through the \f(CWST(n)\fR macro, which returns
the \f(CW\*(C`n\*(C'\fR'th stack argument.  Argument 0 is the first argument passed in the
Perl subroutine call.  These arguments are \f(CW\*(C`SV*\*(C'\fR, and can be used anywhere
an \f(CW\*(C`SV*\*(C'\fR is used.
.PP
Most of the time, output from the C routine can be handled through use of
the \s-1RETVAL\s0 and \s-1OUTPUT\s0 directives.  However, there are some cases where the
argument stack is not already long enough to handle all the return values.
An example is the \s-1POSIX\s0 \fItzname()\fR call, which takes no arguments, but returns
two, the local time zone's standard and summer time abbreviations.
.PP
To handle this situation, the \s-1PPCODE\s0 directive is used and the stack is
extended using the macro:
.PP
.Vb 1
\&    EXTEND(SP, num);
.Ve
.PP
where \f(CW\*(C`SP\*(C'\fR is the macro that represents the local copy of the stack pointer,
and \f(CW\*(C`num\*(C'\fR is the number of elements the stack should be extended by.
.PP
Now that there is room on the stack, values can be pushed on it using \f(CW\*(C`PUSHs\*(C'\fR
macro. The pushed values will often need to be \*(L"mortal\*(R" (See
\&\*(L"Reference Counts and Mortality\*(R"):
.PP
.Vb 7
\&    PUSHs(sv_2mortal(newSViv(an_integer)))
\&    PUSHs(sv_2mortal(newSVuv(an_unsigned_integer)))
\&    PUSHs(sv_2mortal(newSVnv(a_double)))
\&    PUSHs(sv_2mortal(newSVpv("Some String",0)))
\&    /* Although the last example is better written as the more
\&     * efficient: */
\&    PUSHs(newSVpvs_flags("Some String", SVs_TEMP))
.Ve
.PP
And now the Perl program calling \f(CW\*(C`tzname\*(C'\fR, the two values will be assigned
as in:
.PP
.Vb 1
\&    ($standard_abbrev, $summer_abbrev) = POSIX::tzname;
.Ve
.PP
An alternate (and possibly simpler) method to pushing values on the stack is
to use the macro:
.PP
.Vb 1
\&    XPUSHs(SV*)
.Ve
.PP
This macro automatically adjusts the stack for you, if needed.  Thus, you
do not need to call \f(CW\*(C`EXTEND\*(C'\fR to extend the stack.
.PP
Despite their suggestions in earlier versions of this document the macros
\&\f(CW\*(C`(X)PUSH[iunp]\*(C'\fR are \fInot\fR suited to XSUBs which return multiple results.
For that, either stick to the \f(CW\*(C`(X)PUSHs\*(C'\fR macros shown above, or use the new
\&\f(CW\*(C`m(X)PUSH[iunp]\*(C'\fR macros instead; see \*(L"Putting a C value on Perl stack\*(R".
.PP
For more information, consult perlxs and perlxstut.
.SS "Autoloading with XSUBs"
.IX Subsection "Autoloading with XSUBs"
If an \s-1AUTOLOAD\s0 routine is an \s-1XSUB\s0, as with Perl subroutines, Perl puts the
fully-qualified name of the autoloaded subroutine in the \f(CW$AUTOLOAD\fR variable
of the \s-1XSUB\s0's package.
.PP
But it also puts the same information in certain fields of the \s-1XSUB\s0 itself:
.PP
.Vb 4
\&    HV *stash           = CvSTASH(cv);
\&    const char *subname = SvPVX(cv);
\&    STRLEN name_length  = SvCUR(cv); /* in bytes */
\&    U32 is_utf8         = SvUTF8(cv);
.Ve
.PP
\&\f(CW\*(C`SvPVX(cv)\*(C'\fR contains just the sub name itself, not including the package.
For an \s-1AUTOLOAD\s0 routine in \s-1UNIVERSAL\s0 or one of its superclasses,
\&\f(CW\*(C`CvSTASH(cv)\*(C'\fR returns \s-1NULL\s0 during a method call on a nonexistent package.
.PP
\&\fBNote\fR: Setting \f(CW$AUTOLOAD\fR stopped working in 5.6.1, which did not support
\&\s-1XS\s0 \s-1AUTOLOAD\s0 subs at all.  Perl 5.8.0 introduced the use of fields in the
\&\s-1XSUB\s0 itself.  Perl 5.16.0 restored the setting of \f(CW$AUTOLOAD\fR.  If you need
to support 5.8\-5.14, use the \s-1XSUB\s0's fields.
.SS "Calling Perl Routines from within C Programs"
.IX Subsection "Calling Perl Routines from within C Programs"
There are four routines that can be used to call a Perl subroutine from
within a C program.  These four are:
.PP
.Vb 4
\&    I32  call_sv(SV*, I32);
\&    I32  call_pv(const char*, I32);
\&    I32  call_method(const char*, I32);
\&    I32  call_argv(const char*, I32, register char**);
.Ve
.PP
The routine most often used is \f(CW\*(C`call_sv\*(C'\fR.  The \f(CW\*(C`SV*\*(C'\fR argument
contains either the name of the Perl subroutine to be called, or a
reference to the subroutine.  The second argument consists of flags
that control the context in which the subroutine is called, whether
or not the subroutine is being passed arguments, how errors should be
trapped, and how to treat return values.
.PP
All four routines return the number of arguments that the subroutine returned
on the Perl stack.
.PP
These routines used to be called \f(CW\*(C`perl_call_sv\*(C'\fR, etc., before Perl v5.6.0,
but those names are now deprecated; macros of the same name are provided for
compatibility.
.PP
When using any of these routines (except \f(CW\*(C`call_argv\*(C'\fR), the programmer
must manipulate the Perl stack.  These include the following macros and
functions:
.PP
.Vb 11
\&    dSP
\&    SP
\&    PUSHMARK()
\&    PUTBACK
\&    SPAGAIN
\&    ENTER
\&    SAVETMPS
\&    FREETMPS
\&    LEAVE
\&    XPUSH*()
\&    POP*()
.Ve
.PP
For a detailed description of calling conventions from C to Perl,
consult perlcall.
.SS "Memory Allocation"
.IX Subsection "Memory Allocation"
\fIAllocation\fR
.IX Subsection "Allocation"
.PP
All memory meant to be used with the Perl \s-1API\s0 functions should be manipulated
using the macros described in this section.  The macros provide the necessary
transparency between differences in the actual malloc implementation that is
used within perl.
.PP
It is suggested that you enable the version of malloc that is distributed
with Perl.  It keeps pools of various sizes of unallocated memory in
order to satisfy allocation requests more quickly.  However, on some
platforms, it may cause spurious malloc or free errors.
.PP
The following three macros are used to initially allocate memory :
.PP
.Vb 3
\&    Newx(pointer, number, type);
\&    Newxc(pointer, number, type, cast);
\&    Newxz(pointer, number, type);
.Ve
.PP
The first argument \f(CW\*(C`pointer\*(C'\fR should be the name of a variable that will
point to the newly allocated memory.
.PP
The second and third arguments \f(CW\*(C`number\*(C'\fR and \f(CW\*(C`type\*(C'\fR specify how many of
the specified type of data structure should be allocated.  The argument
\&\f(CW\*(C`type\*(C'\fR is passed to \f(CW\*(C`sizeof\*(C'\fR.  The final argument to \f(CW\*(C`Newxc\*(C'\fR, \f(CW\*(C`cast\*(C'\fR,
should be used if the \f(CW\*(C`pointer\*(C'\fR argument is different from the \f(CW\*(C`type\*(C'\fR
argument.
.PP
Unlike the \f(CW\*(C`Newx\*(C'\fR and \f(CW\*(C`Newxc\*(C'\fR macros, the \f(CW\*(C`Newxz\*(C'\fR macro calls \f(CW\*(C`memzero\*(C'\fR
to zero out all the newly allocated memory.
.PP
\fIReallocation\fR
.IX Subsection "Reallocation"
.PP
.Vb 3
\&    Renew(pointer, number, type);
\&    Renewc(pointer, number, type, cast);
\&    Safefree(pointer)
.Ve
.PP
These three macros are used to change a memory buffer size or to free a
piece of memory no longer needed.  The arguments to \f(CW\*(C`Renew\*(C'\fR and \f(CW\*(C`Renewc\*(C'\fR
match those of \f(CW\*(C`New\*(C'\fR and \f(CW\*(C`Newc\*(C'\fR with the exception of not needing the
\&\*(L"magic cookie\*(R" argument.
.PP
\fIMoving\fR
.IX Subsection "Moving"
.PP
.Vb 3
\&    Move(source, dest, number, type);
\&    Copy(source, dest, number, type);
\&    Zero(dest, number, type);
.Ve
.PP
These three macros are used to move, copy, or zero out previously allocated
memory.  The \f(CW\*(C`source\*(C'\fR and \f(CW\*(C`dest\*(C'\fR arguments point to the source and
destination starting points.  Perl will move, copy, or zero out \f(CW\*(C`number\*(C'\fR
instances of the size of the \f(CW\*(C`type\*(C'\fR data structure (using the \f(CW\*(C`sizeof\*(C'\fR
function).
.SS "PerlIO"
.IX Subsection "PerlIO"
The most recent development releases of Perl have been experimenting with
removing Perl's dependency on the \*(L"normal\*(R" standard I/O suite and allowing
other stdio implementations to be used.  This involves creating a new
abstraction layer that then calls whichever implementation of stdio Perl
was compiled with.  All XSUBs should now use the functions in the PerlIO
abstraction layer and not make any assumptions about what kind of stdio
is being used.
.PP
For a complete description of the PerlIO abstraction, consult perlapio.
.SS "Putting a C value on Perl stack"
.IX Subsection "Putting a C value on Perl stack"
A lot of opcodes (this is an elementary operation in the internal perl
stack machine) put an SV* on the stack. However, as an optimization
the corresponding \s-1SV\s0 is (usually) not recreated each time. The opcodes
reuse specially assigned SVs (\fItarget\fRs) which are (as a corollary)
not constantly freed/created.
.PP
Each of the targets is created only once (but see
\&\*(L"Scratchpads and recursion\*(R" below), and when an opcode needs to put
an integer, a double, or a string on stack, it just sets the
corresponding parts of its \fItarget\fR and puts the \fItarget\fR on stack.
.PP
The macro to put this target on stack is \f(CW\*(C`PUSHTARG\*(C'\fR, and it is
directly used in some opcodes, as well as indirectly in zillions of
others, which use it via \f(CW\*(C`(X)PUSH[iunp]\*(C'\fR.
.PP
Because the target is reused, you must be careful when pushing multiple
values on the stack. The following code will not do what you think:
.PP
.Vb 2
\&    XPUSHi(10);
\&    XPUSHi(20);
.Ve
.PP
This translates as "set \f(CW\*(C`TARG\*(C'\fR to 10, push a pointer to \f(CW\*(C`TARG\*(C'\fR onto
the stack; set \f(CW\*(C`TARG\*(C'\fR to 20, push a pointer to \f(CW\*(C`TARG\*(C'\fR onto the stack".
At the end of the operation, the stack does not contain the values 10
and 20, but actually contains two pointers to \f(CW\*(C`TARG\*(C'\fR, which we have set
to 20.
.PP
If you need to push multiple different values then you should either use
the \f(CW\*(C`(X)PUSHs\*(C'\fR macros, or else use the new \f(CW\*(C`m(X)PUSH[iunp]\*(C'\fR macros,
none of which make use of \f(CW\*(C`TARG\*(C'\fR.  The \f(CW\*(C`(X)PUSHs\*(C'\fR macros simply push an
SV* on the stack, which, as noted under \*(L"XSUBs and the Argument Stack\*(R",
will often need to be \*(L"mortal\*(R".  The new \f(CW\*(C`m(X)PUSH[iunp]\*(C'\fR macros make
this a little easier to achieve by creating a new mortal for you (via
\&\f(CW\*(C`(X)PUSHmortal\*(C'\fR), pushing that onto the stack (extending it if necessary
in the case of the \f(CW\*(C`mXPUSH[iunp]\*(C'\fR macros), and then setting its value.
Thus, instead of writing this to \*(L"fix\*(R" the example above:
.PP
.Vb 2
\&    XPUSHs(sv_2mortal(newSViv(10)))
\&    XPUSHs(sv_2mortal(newSViv(20)))
.Ve
.PP
you can simply write:
.PP
.Vb 2
\&    mXPUSHi(10)
\&    mXPUSHi(20)
.Ve
.PP
On a related note, if you do use \f(CW\*(C`(X)PUSH[iunp]\*(C'\fR, then you're going to
need a \f(CW\*(C`dTARG\*(C'\fR in your variable declarations so that the \f(CW\*(C`*PUSH*\*(C'\fR
macros can make use of the local variable \f(CW\*(C`TARG\*(C'\fR.  See also \f(CW\*(C`dTARGET\*(C'\fR
and \f(CW\*(C`dXSTARG\*(C'\fR.
.SS "Scratchpads"
.IX Subsection "Scratchpads"
The question remains on when the SVs which are \fItarget\fRs for opcodes
are created. The answer is that they are created when the current
unit\*(--a subroutine or a file (for opcodes for statements outside of
subroutines)\-\-is compiled. During this time a special anonymous Perl
array is created, which is called a scratchpad for the current unit.
.PP
A scratchpad keeps SVs which are lexicals for the current unit and are
targets for opcodes. One can deduce that an \s-1SV\s0 lives on a scratchpad
by looking on its flags: lexicals have \f(CW\*(C`SVs_PADMY\*(C'\fR set, and
\&\fItarget\fRs have \f(CW\*(C`SVs_PADTMP\*(C'\fR set.
.PP
The correspondence between OPs and \fItarget\fRs is not 1\-to\-1. Different
OPs in the compile tree of the unit can use the same target, if this
would not conflict with the expected life of the temporary.
.SS "Scratchpads and recursion"
.IX Subsection "Scratchpads and recursion"
In fact it is not 100% true that a compiled unit contains a pointer to
the scratchpad \s-1AV\s0. In fact it contains a pointer to an \s-1AV\s0 of
(initially) one element, and this element is the scratchpad \s-1AV\s0. Why do
we need an extra level of indirection?
.PP
The answer is \fBrecursion\fR, and maybe \fBthreads\fR. Both
these can create several execution pointers going into the same
subroutine. For the subroutine-child not write over the temporaries
for the subroutine-parent (lifespan of which covers the call to the
child), the parent and the child should have different
scratchpads. (\fIAnd\fR the lexicals should be separate anyway!)
.PP
So each subroutine is born with an array of scratchpads (of length 1).
On each entry to the subroutine it is checked that the current
depth of the recursion is not more than the length of this array, and
if it is, new scratchpad is created and pushed into the array.
.PP
The \fItarget\fRs on this scratchpad are \f(CW\*(C`undef\*(C'\fRs, but they are already
marked with correct flags.
.SH "Compiled code"
.IX Header "Compiled code"
.SS "Code tree"
.IX Subsection "Code tree"
Here we describe the internal form your code is converted to by
Perl. Start with a simple example:
.PP
.Vb 1
\&  $a = $b + $c;
.Ve
.PP
This is converted to a tree similar to this one:
.PP
.Vb 5
\&             assign\-to
\&           /           \e
\&          +             $a
\&        /   \e
\&      $b     $c
.Ve
.PP
(but slightly more complicated).  This tree reflects the way Perl
parsed your code, but has nothing to do with the execution order.
There is an additional \*(L"thread\*(R" going through the nodes of the tree
which shows the order of execution of the nodes.  In our simplified
example above it looks like:
.PP
.Vb 1
\&     $b \-\-\-> $c \-\-\-> + \-\-\-> $a \-\-\-> assign\-to
.Ve
.PP
But with the actual compile tree for \f(CW\*(C`$a = $b + $c\*(C'\fR it is different:
some nodes \fIoptimized away\fR.  As a corollary, though the actual tree
contains more nodes than our simplified example, the execution order
is the same as in our example.
.SS "Examining the tree"
.IX Subsection "Examining the tree"
If you have your perl compiled for debugging (usually done with
\&\f(CW\*(C`\-DDEBUGGING\*(C'\fR on the \f(CW\*(C`Configure\*(C'\fR command line), you may examine the
compiled tree by specifying \f(CW\*(C`\-Dx\*(C'\fR on the Perl command line.  The
output takes several lines per node, and for \f(CW\*(C`$b+$c\*(C'\fR it looks like
this:
.PP
.Vb 10
\&    5           TYPE = add  ===> 6
\&                TARG = 1
\&                FLAGS = (SCALAR,KIDS)
\&                {
\&                    TYPE = null  ===> (4)
\&                      (was rv2sv)
\&                    FLAGS = (SCALAR,KIDS)
\&                    {
\&    3                   TYPE = gvsv  ===> 4
\&                        FLAGS = (SCALAR)
\&                        GV = main::b
\&                    }
\&                }
\&                {
\&                    TYPE = null  ===> (5)
\&                      (was rv2sv)
\&                    FLAGS = (SCALAR,KIDS)
\&                    {
\&    4                   TYPE = gvsv  ===> 5
\&                        FLAGS = (SCALAR)
\&                        GV = main::c
\&                    }
\&                }
.Ve
.PP
This tree has 5 nodes (one per \f(CW\*(C`TYPE\*(C'\fR specifier), only 3 of them are
not optimized away (one per number in the left column).  The immediate
children of the given node correspond to \f(CW\*(C`{}\*(C'\fR pairs on the same level
of indentation, thus this listing corresponds to the tree:
.PP
.Vb 5
\&                   add
\&                 /     \e
\&               null    null
\&                |       |
\&               gvsv    gvsv
.Ve
.PP
The execution order is indicated by \f(CW\*(C`===>\*(C'\fR marks, thus it is \f(CW\*(C`3
4 5 6\*(C'\fR (node \f(CW6\fR is not included into above listing), i.e.,
\&\f(CW\*(C`gvsv gvsv add whatever\*(C'\fR.
.PP
Each of these nodes represents an op, a fundamental operation inside the
Perl core. The code which implements each operation can be found in the
\&\fIpp*.c\fR files; the function which implements the op with type \f(CW\*(C`gvsv\*(C'\fR
is \f(CW\*(C`pp_gvsv\*(C'\fR, and so on. As the tree above shows, different ops have
different numbers of children: \f(CW\*(C`add\*(C'\fR is a binary operator, as one would
expect, and so has two children. To accommodate the various different
numbers of children, there are various types of op data structure, and
they link together in different ways.
.PP
The simplest type of op structure is \f(CW\*(C`OP\*(C'\fR: this has no children. Unary
operators, \f(CW\*(C`UNOP\*(C'\fRs, have one child, and this is pointed to by the
\&\f(CW\*(C`op_first\*(C'\fR field. Binary operators (\f(CW\*(C`BINOP\*(C'\fRs) have not only an
\&\f(CW\*(C`op_first\*(C'\fR field but also an \f(CW\*(C`op_last\*(C'\fR field. The most complex type of
op is a \f(CW\*(C`LISTOP\*(C'\fR, which has any number of children. In this case, the
first child is pointed to by \f(CW\*(C`op_first\*(C'\fR and the last child by
\&\f(CW\*(C`op_last\*(C'\fR. The children in between can be found by iteratively
following the \f(CW\*(C`op_sibling\*(C'\fR pointer from the first child to the last.
.PP
There are also two other op types: a \f(CW\*(C`PMOP\*(C'\fR holds a regular expression,
and has no children, and a \f(CW\*(C`LOOP\*(C'\fR may or may not have children. If the
\&\f(CW\*(C`op_children\*(C'\fR field is non-zero, it behaves like a \f(CW\*(C`LISTOP\*(C'\fR. To
complicate matters, if a \f(CW\*(C`UNOP\*(C'\fR is actually a \f(CW\*(C`null\*(C'\fR op after
optimization (see \*(L"Compile pass 2: context propagation\*(R") it will still
have children in accordance with its former type.
.PP
Another way to examine the tree is to use a compiler back-end module, such
as B::Concise.
.SS "Compile pass 1: check routines"
.IX Subsection "Compile pass 1: check routines"
The tree is created by the compiler while \fIyacc\fR code feeds it
the constructions it recognizes. Since \fIyacc\fR works bottom-up, so does
the first pass of perl compilation.
.PP
What makes this pass interesting for perl developers is that some
optimization may be performed on this pass.  This is optimization by
so-called \*(L"check routines\*(R".  The correspondence between node names
and corresponding check routines is described in \fIopcode.pl\fR (do not
forget to run \f(CW\*(C`make regen_headers\*(C'\fR if you modify this file).
.PP
A check routine is called when the node is fully constructed except
for the execution-order thread.  Since at this time there are no
back-links to the currently constructed node, one can do most any
operation to the top-level node, including freeing it and/or creating
new nodes above/below it.
.PP
The check routine returns the node which should be inserted into the
tree (if the top-level node was not modified, check routine returns
its argument).
.PP
By convention, check routines have names \f(CW\*(C`ck_*\*(C'\fR. They are usually
called from \f(CW\*(C`new*OP\*(C'\fR subroutines (or \f(CW\*(C`convert\*(C'\fR) (which in turn are
called from \fIperly.y\fR).
.SS "Compile pass 1a: constant folding"
.IX Subsection "Compile pass 1a: constant folding"
Immediately after the check routine is called the returned node is
checked for being compile-time executable.  If it is (the value is
judged to be constant) it is immediately executed, and a \fIconstant\fR
node with the \*(L"return value\*(R" of the corresponding subtree is
substituted instead.  The subtree is deleted.
.PP
If constant folding was not performed, the execution-order thread is
created.
.SS "Compile pass 2: context propagation"
.IX Subsection "Compile pass 2: context propagation"
When a context for a part of compile tree is known, it is propagated
down through the tree.  At this time the context can have 5 values
(instead of 2 for runtime context): void, boolean, scalar, list, and
lvalue.  In contrast with the pass 1 this pass is processed from top
to bottom: a node's context determines the context for its children.
.PP
Additional context-dependent optimizations are performed at this time.
Since at this moment the compile tree contains back-references (via
\&\*(L"thread\*(R" pointers), nodes cannot be \fIfree()\fRd now.  To allow
optimized-away nodes at this stage, such nodes are \fInull()\fRified instead
of \fIfree()\fRing (i.e. their type is changed to \s-1OP_NULL\s0).
.SS "Compile pass 3: peephole optimization"
.IX Subsection "Compile pass 3: peephole optimization"
After the compile tree for a subroutine (or for an \f(CW\*(C`eval\*(C'\fR or a file)
is created, an additional pass over the code is performed. This pass
is neither top-down or bottom-up, but in the execution order (with
additional complications for conditionals).  Optimizations performed
at this stage are subject to the same restrictions as in the pass 2.
.PP
Peephole optimizations are done by calling the function pointed to
by the global variable \f(CW\*(C`PL_peepp\*(C'\fR.  By default, \f(CW\*(C`PL_peepp\*(C'\fR just
calls the function pointed to by the global variable \f(CW\*(C`PL_rpeepp\*(C'\fR.
By default, that performs some basic op fixups and optimisations along
the execution-order op chain, and recursively calls \f(CW\*(C`PL_rpeepp\*(C'\fR for
each side chain of ops (resulting from conditionals).  Extensions may
provide additional optimisations or fixups, hooking into either the
per-subroutine or recursive stage, like this:
.PP
.Vb 10
\&    static peep_t prev_peepp;
\&    static void my_peep(pTHX_ OP *o)
\&    {
\&        /* custom per\-subroutine optimisation goes here */
\&        prev_peepp(o);
\&        /* custom per\-subroutine optimisation may also go here */
\&    }
\&    BOOT:
\&        prev_peepp = PL_peepp;
\&        PL_peepp = my_peep;
\&
\&    static peep_t prev_rpeepp;
\&    static void my_rpeep(pTHX_ OP *o)
\&    {
\&        OP *orig_o = o;
\&        for(; o; o = o\->op_next) {
\&            /* custom per\-op optimisation goes here */
\&        }
\&        prev_rpeepp(orig_o);
\&    }
\&    BOOT:
\&        prev_rpeepp = PL_rpeepp;
\&        PL_rpeepp = my_rpeep;
.Ve
.SS "Pluggable runops"
.IX Subsection "Pluggable runops"
The compile tree is executed in a runops function.  There are two runops
functions, in \fIrun.c\fR and in \fIdump.c\fR.  \f(CW\*(C`Perl_runops_debug\*(C'\fR is used
with \s-1DEBUGGING\s0 and \f(CW\*(C`Perl_runops_standard\*(C'\fR is used otherwise.  For fine
control over the execution of the compile tree it is possible to provide
your own runops function.
.PP
It's probably best to copy one of the existing runops functions and
change it to suit your needs.  Then, in the \s-1BOOT\s0 section of your \s-1XS\s0
file, add the line:
.PP
.Vb 1
\&  PL_runops = my_runops;
.Ve
.PP
This function should be as efficient as possible to keep your programs
running as fast as possible.
.SS "Compile-time scope hooks"
.IX Subsection "Compile-time scope hooks"
As of perl 5.14 it is possible to hook into the compile-time lexical
scope mechanism using \f(CW\*(C`Perl_blockhook_register\*(C'\fR. This is used like
this:
.PP
.Vb 2
\&    STATIC void my_start_hook(pTHX_ int full);
\&    STATIC BHK my_hooks;
\&
\&    BOOT:
\&        BhkENTRY_set(&my_hooks, bhk_start, my_start_hook);
\&        Perl_blockhook_register(aTHX_ &my_hooks);
.Ve
.PP
This will arrange to have \f(CW\*(C`my_start_hook\*(C'\fR called at the start of
compiling every lexical scope. The available hooks are:
.ie n .IP """void bhk_start(pTHX_ int full)""" 4
.el .IP "\f(CWvoid bhk_start(pTHX_ int full)\fR" 4
.IX Item "void bhk_start(pTHX_ int full)"
This is called just after starting a new lexical scope. Note that Perl
code like
.Sp
.Vb 1
\&    if ($x) { ... }
.Ve
.Sp
creates two scopes: the first starts at the \f(CW\*(C`(\*(C'\fR and has \f(CW\*(C`full == 1\*(C'\fR,
the second starts at the \f(CW\*(C`{\*(C'\fR and has \f(CW\*(C`full == 0\*(C'\fR. Both end at the
\&\f(CW\*(C`}\*(C'\fR, so calls to \f(CW\*(C`start\*(C'\fR and \f(CW\*(C`pre/post_end\*(C'\fR will match. Anything
pushed onto the save stack by this hook will be popped just before the
scope ends (between the \f(CW\*(C`pre_\*(C'\fR and \f(CW\*(C`post_end\*(C'\fR hooks, in fact).
.ie n .IP """void bhk_pre_end(pTHX_ OP **o)""" 4
.el .IP "\f(CWvoid bhk_pre_end(pTHX_ OP **o)\fR" 4
.IX Item "void bhk_pre_end(pTHX_ OP **o)"
This is called at the end of a lexical scope, just before unwinding the
stack. \fIo\fR is the root of the optree representing the scope; it is a
double pointer so you can replace the \s-1OP\s0 if you need to.
.ie n .IP """void bhk_post_end(pTHX_ OP **o)""" 4
.el .IP "\f(CWvoid bhk_post_end(pTHX_ OP **o)\fR" 4
.IX Item "void bhk_post_end(pTHX_ OP **o)"
This is called at the end of a lexical scope, just after unwinding the
stack. \fIo\fR is as above. Note that it is possible for calls to \f(CW\*(C`pre_\*(C'\fR
and \f(CW\*(C`post_end\*(C'\fR to nest, if there is something on the save stack that
calls string eval.
.ie n .IP """void bhk_eval(pTHX_ OP *const o)""" 4
.el .IP "\f(CWvoid bhk_eval(pTHX_ OP *const o)\fR" 4
.IX Item "void bhk_eval(pTHX_ OP *const o)"
This is called just before starting to compile an \f(CW\*(C`eval STRING\*(C'\fR, \f(CW\*(C`do
FILE\*(C'\fR, \f(CW\*(C`require\*(C'\fR or \f(CW\*(C`use\*(C'\fR, after the eval has been set up. \fIo\fR is the
\&\s-1OP\s0 that requested the eval, and will normally be an \f(CW\*(C`OP_ENTEREVAL\*(C'\fR,
\&\f(CW\*(C`OP_DOFILE\*(C'\fR or \f(CW\*(C`OP_REQUIRE\*(C'\fR.
.PP
Once you have your hook functions, you need a \f(CW\*(C`BHK\*(C'\fR structure to put
them in. It's best to allocate it statically, since there is no way to
free it once it's registered. The function pointers should be inserted
into this structure using the \f(CW\*(C`BhkENTRY_set\*(C'\fR macro, which will also set
flags indicating which entries are valid. If you do need to allocate
your \f(CW\*(C`BHK\*(C'\fR dynamically for some reason, be sure to zero it before you
start.
.PP
Once registered, there is no mechanism to switch these hooks off, so if
that is necessary you will need to do this yourself. An entry in \f(CW\*(C`%^H\*(C'\fR
is probably the best way, so the effect is lexically scoped; however it
is also possible to use the \f(CW\*(C`BhkDISABLE\*(C'\fR and \f(CW\*(C`BhkENABLE\*(C'\fR macros to
temporarily switch entries on and off. You should also be aware that
generally speaking at least one scope will have opened before your
extension is loaded, so you will see some \f(CW\*(C`pre/post_end\*(C'\fR pairs that
didn't have a matching \f(CW\*(C`start\*(C'\fR.
.ie n .SH "Examining internal data structures with the ""dump"" functions"
.el .SH "Examining internal data structures with the \f(CWdump\fP functions"
.IX Header "Examining internal data structures with the dump functions"
To aid debugging, the source file \fIdump.c\fR contains a number of
functions which produce formatted output of internal data structures.
.PP
The most commonly used of these functions is \f(CW\*(C`Perl_sv_dump\*(C'\fR; it's used
for dumping SVs, AVs, HVs, and CVs. The \f(CW\*(C`Devel::Peek\*(C'\fR module calls
\&\f(CW\*(C`sv_dump\*(C'\fR to produce debugging output from Perl-space, so users of that
module should already be familiar with its format.
.PP
\&\f(CW\*(C`Perl_op_dump\*(C'\fR can be used to dump an \f(CW\*(C`OP\*(C'\fR structure or any of its
derivatives, and produces output similar to \f(CW\*(C`perl \-Dx\*(C'\fR; in fact,
\&\f(CW\*(C`Perl_dump_eval\*(C'\fR will dump the main root of the code being evaluated,
exactly like \f(CW\*(C`\-Dx\*(C'\fR.
.PP
Other useful functions are \f(CW\*(C`Perl_dump_sub\*(C'\fR, which turns a \f(CW\*(C`GV\*(C'\fR into an
op tree, \f(CW\*(C`Perl_dump_packsubs\*(C'\fR which calls \f(CW\*(C`Perl_dump_sub\*(C'\fR on all the
subroutines in a package like so: (Thankfully, these are all xsubs, so
there is no op tree)
.PP
.Vb 1
\&    (gdb) print Perl_dump_packsubs(PL_defstash)
\&
\&    SUB attributes::bootstrap = (xsub 0x811fedc 0)
\&
\&    SUB UNIVERSAL::can = (xsub 0x811f50c 0)
\&
\&    SUB UNIVERSAL::isa = (xsub 0x811f304 0)
\&
\&    SUB UNIVERSAL::VERSION = (xsub 0x811f7ac 0)
\&
\&    SUB DynaLoader::boot_DynaLoader = (xsub 0x805b188 0)
.Ve
.PP
and \f(CW\*(C`Perl_dump_all\*(C'\fR, which dumps all the subroutines in the stash and
the op tree of the main root.
.SH "How multiple interpreters and concurrency are supported"
.IX Header "How multiple interpreters and concurrency are supported"
.SS "Background and \s-1PERL_IMPLICIT_CONTEXT\s0"
.IX Subsection "Background and PERL_IMPLICIT_CONTEXT"
The Perl interpreter can be regarded as a closed box: it has an \s-1API\s0
for feeding it code or otherwise making it do things, but it also has
functions for its own use.  This smells a lot like an object, and
there are ways for you to build Perl so that you can have multiple
interpreters, with one interpreter represented either as a C structure,
or inside a thread-specific structure.  These structures contain all
the context, the state of that interpreter.
.PP
One macro controls the major Perl build flavor: \s-1MULTIPLICITY\s0. The
\&\s-1MULTIPLICITY\s0 build has a C structure that packages all the interpreter
state. With multiplicity-enabled perls, \s-1PERL_IMPLICIT_CONTEXT\s0 is also
normally defined, and enables the support for passing in a \*(L"hidden\*(R" first
argument that represents all three data structures. \s-1MULTIPLICITY\s0 makes
multi-threaded perls possible (with the ithreads threading model, related
to the macro \s-1USE_ITHREADS\s0.)
.PP
Two other \*(L"encapsulation\*(R" macros are the \s-1PERL_GLOBAL_STRUCT\s0 and
\&\s-1PERL_GLOBAL_STRUCT_PRIVATE\s0 (the latter turns on the former, and the
former turns on \s-1MULTIPLICITY\s0.)  The \s-1PERL_GLOBAL_STRUCT\s0 causes all the
internal variables of Perl to be wrapped inside a single global struct,
struct perl_vars, accessible as (globals) &PL_Vars or PL_VarsPtr or
the function  \fIPerl_GetVars()\fR.  The \s-1PERL_GLOBAL_STRUCT_PRIVATE\s0 goes
one step further, there is still a single struct (allocated in \fImain()\fR
either from heap or from stack) but there are no global data symbols
pointing to it.  In either case the global struct should be initialised
as the very first thing in \fImain()\fR using \fIPerl_init_global_struct()\fR and
correspondingly tear it down after \fIperl_free()\fR using \fIPerl_free_global_struct()\fR,
please see \fIminiperlmain.c\fR for usage details.  You may also need
to use \f(CW\*(C`dVAR\*(C'\fR in your coding to \*(L"declare the global variables\*(R"
when you are using them.  dTHX does this for you automatically.
.PP
To see whether you have non-const data you can use a BSD-compatible \f(CW\*(C`nm\*(C'\fR:
.PP
.Vb 1
\&  nm libperl.a | grep \-v \*(Aq [TURtr] \*(Aq
.Ve
.PP
If this displays any \f(CW\*(C`D\*(C'\fR or \f(CW\*(C`d\*(C'\fR symbols, you have non-const data.
.PP
For backward compatibility reasons defining just \s-1PERL_GLOBAL_STRUCT\s0
doesn't actually hide all symbols inside a big global struct: some
PerlIO_xxx vtables are left visible.  The \s-1PERL_GLOBAL_STRUCT_PRIVATE\s0
then hides everything (see how the \s-1PERLIO_FUNCS_DECL\s0 is used).
.PP
All this obviously requires a way for the Perl internal functions to be
either subroutines taking some kind of structure as the first
argument, or subroutines taking nothing as the first argument.  To
enable these two very different ways of building the interpreter,
the Perl source (as it does in so many other situations) makes heavy
use of macros and subroutine naming conventions.
.PP
First problem: deciding which functions will be public \s-1API\s0 functions and
which will be private.  All functions whose names begin \f(CW\*(C`S_\*(C'\fR are private
(think \*(L"S\*(R" for \*(L"secret\*(R" or \*(L"static\*(R").  All other functions begin with
\&\*(L"Perl_\*(R", but just because a function begins with \*(L"Perl_\*(R" does not mean it is
part of the \s-1API\s0. (See \*(L"Internal Functions\*(R".) The easiest way to be \fBsure\fR a
function is part of the \s-1API\s0 is to find its entry in perlapi.
If it exists in perlapi, it's part of the \s-1API\s0.  If it doesn't, and you
think it should be (i.e., you need it for your extension), send mail via
perlbug explaining why you think it should be.
.PP
Second problem: there must be a syntax so that the same subroutine
declarations and calls can pass a structure as their first argument,
or pass nothing.  To solve this, the subroutines are named and
declared in a particular way.  Here's a typical start of a static
function used within the Perl guts:
.PP
.Vb 2
\&  STATIC void
\&  S_incline(pTHX_ char *s)
.Ve
.PP
\&\s-1STATIC\s0 becomes \*(L"static\*(R" in C, and may be #define'd to nothing in some
configurations in the future.
.PP
A public function (i.e. part of the internal \s-1API\s0, but not necessarily
sanctioned for use in extensions) begins like this:
.PP
.Vb 2
\&  void
\&  Perl_sv_setiv(pTHX_ SV* dsv, IV num)
.Ve
.PP
\&\f(CW\*(C`pTHX_\*(C'\fR is one of a number of macros (in \fIperl.h\fR) that hide the
details of the interpreter's context.  \s-1THX\s0 stands for \*(L"thread\*(R", \*(L"this\*(R",
or \*(L"thingy\*(R", as the case may be.  (And no, George Lucas is not involved. :\-)
The first character could be 'p' for a \fBp\fRrototype, 'a' for \fBa\fRrgument,
or 'd' for \fBd\fReclaration, so we have \f(CW\*(C`pTHX\*(C'\fR, \f(CW\*(C`aTHX\*(C'\fR and \f(CW\*(C`dTHX\*(C'\fR, and
their variants.
.PP
When Perl is built without options that set \s-1PERL_IMPLICIT_CONTEXT\s0, there is no
first argument containing the interpreter's context.  The trailing underscore
in the pTHX_ macro indicates that the macro expansion needs a comma
after the context argument because other arguments follow it.  If
\&\s-1PERL_IMPLICIT_CONTEXT\s0 is not defined, pTHX_ will be ignored, and the
subroutine is not prototyped to take the extra argument.  The form of the
macro without the trailing underscore is used when there are no additional
explicit arguments.
.PP
When a core function calls another, it must pass the context.  This
is normally hidden via macros.  Consider \f(CW\*(C`sv_setiv\*(C'\fR.  It expands into
something like this:
.PP
.Vb 6
\&    #ifdef PERL_IMPLICIT_CONTEXT
\&      #define sv_setiv(a,b)      Perl_sv_setiv(aTHX_ a, b)
\&      /* can\*(Aqt do this for vararg functions, see below */
\&    #else
\&      #define sv_setiv           Perl_sv_setiv
\&    #endif
.Ve
.PP
This works well, and means that \s-1XS\s0 authors can gleefully write:
.PP
.Vb 1
\&    sv_setiv(foo, bar);
.Ve
.PP
and still have it work under all the modes Perl could have been
compiled with.
.PP
This doesn't work so cleanly for varargs functions, though, as macros
imply that the number of arguments is known in advance.  Instead we
either need to spell them out fully, passing \f(CW\*(C`aTHX_\*(C'\fR as the first
argument (the Perl core tends to do this with functions like
Perl_warner), or use a context-free version.
.PP
The context-free version of Perl_warner is called
Perl_warner_nocontext, and does not take the extra argument.  Instead
it does dTHX; to get the context from thread-local storage.  We
\&\f(CW\*(C`#define warner Perl_warner_nocontext\*(C'\fR so that extensions get source
compatibility at the expense of performance.  (Passing an arg is
cheaper than grabbing it from thread-local storage.)
.PP
You can ignore [pad]THXx when browsing the Perl headers/sources.
Those are strictly for use within the core.  Extensions and embedders
need only be aware of [pad]THX.
.SS "So what happened to dTHR?"
.IX Subsection "So what happened to dTHR?"
\&\f(CW\*(C`dTHR\*(C'\fR was introduced in perl 5.005 to support the older thread model.
The older thread model now uses the \f(CW\*(C`THX\*(C'\fR mechanism to pass context
pointers around, so \f(CW\*(C`dTHR\*(C'\fR is not useful any more.  Perl 5.6.0 and
later still have it for backward source compatibility, but it is defined
to be a no-op.
.SS "How do I use all this in extensions?"
.IX Subsection "How do I use all this in extensions?"
When Perl is built with \s-1PERL_IMPLICIT_CONTEXT\s0, extensions that call
any functions in the Perl \s-1API\s0 will need to pass the initial context
argument somehow.  The kicker is that you will need to write it in
such a way that the extension still compiles when Perl hasn't been
built with \s-1PERL_IMPLICIT_CONTEXT\s0 enabled.
.PP
There are three ways to do this.  First, the easy but inefficient way,
which is also the default, in order to maintain source compatibility
with extensions: whenever \fI\s-1XSUB\s0.h\fR is #included, it redefines the aTHX
and aTHX_ macros to call a function that will return the context.
Thus, something like:
.PP
.Vb 1
\&        sv_setiv(sv, num);
.Ve
.PP
in your extension will translate to this when \s-1PERL_IMPLICIT_CONTEXT\s0 is
in effect:
.PP
.Vb 1
\&        Perl_sv_setiv(Perl_get_context(), sv, num);
.Ve
.PP
or to this otherwise:
.PP
.Vb 1
\&        Perl_sv_setiv(sv, num);
.Ve
.PP
You don't have to do anything new in your extension to get this; since
the Perl library provides \fIPerl_get_context()\fR, it will all just
work.
.PP
The second, more efficient way is to use the following template for
your Foo.xs:
.PP
.Vb 4
\&        #define PERL_NO_GET_CONTEXT     /* we want efficiency */
\&        #include "EXTERN.h"
\&        #include "perl.h"
\&        #include "XSUB.h"
\&
\&        STATIC void my_private_function(int arg1, int arg2);
\&
\&        STATIC void
\&        my_private_function(int arg1, int arg2)
\&        {
\&            dTHX;       /* fetch context */
\&            ... call many Perl API functions ...
\&        }
\&
\&        [... etc ...]
\&
\&        MODULE = Foo            PACKAGE = Foo
\&
\&        /* typical XSUB */
\&
\&        void
\&        my_xsub(arg)
\&                int arg
\&            CODE:
\&                my_private_function(arg, 10);
.Ve
.PP
Note that the only two changes from the normal way of writing an
extension is the addition of a \f(CW\*(C`#define PERL_NO_GET_CONTEXT\*(C'\fR before
including the Perl headers, followed by a \f(CW\*(C`dTHX;\*(C'\fR declaration at
the start of every function that will call the Perl \s-1API\s0.  (You'll
know which functions need this, because the C compiler will complain
that there's an undeclared identifier in those functions.)  No changes
are needed for the XSUBs themselves, because the \s-1\fIXS\s0()\fR macro is
correctly defined to pass in the implicit context if needed.
.PP
The third, even more efficient way is to ape how it is done within
the Perl guts:
.PP
.Vb 4
\&        #define PERL_NO_GET_CONTEXT     /* we want efficiency */
\&        #include "EXTERN.h"
\&        #include "perl.h"
\&        #include "XSUB.h"
\&
\&        /* pTHX_ only needed for functions that call Perl API */
\&        STATIC void my_private_function(pTHX_ int arg1, int arg2);
\&
\&        STATIC void
\&        my_private_function(pTHX_ int arg1, int arg2)
\&        {
\&            /* dTHX; not needed here, because THX is an argument */
\&            ... call Perl API functions ...
\&        }
\&
\&        [... etc ...]
\&
\&        MODULE = Foo            PACKAGE = Foo
\&
\&        /* typical XSUB */
\&
\&        void
\&        my_xsub(arg)
\&                int arg
\&            CODE:
\&                my_private_function(aTHX_ arg, 10);
.Ve
.PP
This implementation never has to fetch the context using a function
call, since it is always passed as an extra argument.  Depending on
your needs for simplicity or efficiency, you may mix the previous
two approaches freely.
.PP
Never add a comma after \f(CW\*(C`pTHX\*(C'\fR yourself\*(--always use the form of the
macro with the underscore for functions that take explicit arguments,
or the form without the argument for functions with no explicit arguments.
.PP
If one is compiling Perl with the \f(CW\*(C`\-DPERL_GLOBAL_STRUCT\*(C'\fR the \f(CW\*(C`dVAR\*(C'\fR
definition is needed if the Perl global variables (see \fIperlvars.h\fR
or \fIglobvar.sym\fR) are accessed in the function and \f(CW\*(C`dTHX\*(C'\fR is not
used (the \f(CW\*(C`dTHX\*(C'\fR includes the \f(CW\*(C`dVAR\*(C'\fR if necessary).  One notices
the need for \f(CW\*(C`dVAR\*(C'\fR only with the said compile-time define, because
otherwise the Perl global variables are visible as-is.
.SS "Should I do anything special if I call perl from multiple threads?"
.IX Subsection "Should I do anything special if I call perl from multiple threads?"
If you create interpreters in one thread and then proceed to call them in
another, you need to make sure perl's own Thread Local Storage (\s-1TLS\s0) slot is
initialized correctly in each of those threads.
.PP
The \f(CW\*(C`perl_alloc\*(C'\fR and \f(CW\*(C`perl_clone\*(C'\fR \s-1API\s0 functions will automatically set
the \s-1TLS\s0 slot to the interpreter they created, so that there is no need to do
anything special if the interpreter is always accessed in the same thread that
created it, and that thread did not create or call any other interpreters
afterwards.  If that is not the case, you have to set the \s-1TLS\s0 slot of the
thread before calling any functions in the Perl \s-1API\s0 on that particular
interpreter.  This is done by calling the \f(CW\*(C`PERL_SET_CONTEXT\*(C'\fR macro in that
thread as the first thing you do:
.PP
.Vb 2
\&        /* do this before doing anything else with some_perl */
\&        PERL_SET_CONTEXT(some_perl);
\&
\&        ... other Perl API calls on some_perl go here ...
.Ve
.SS "Future Plans and \s-1PERL_IMPLICIT_SYS\s0"
.IX Subsection "Future Plans and PERL_IMPLICIT_SYS"
Just as \s-1PERL_IMPLICIT_CONTEXT\s0 provides a way to bundle up everything
that the interpreter knows about itself and pass it around, so too are
there plans to allow the interpreter to bundle up everything it knows
about the environment it's running on.  This is enabled with the
\&\s-1PERL_IMPLICIT_SYS\s0 macro.  Currently it only works with \s-1USE_ITHREADS\s0 on
Windows.
.PP
This allows the ability to provide an extra pointer (called the \*(L"host\*(R"
environment) for all the system calls.  This makes it possible for
all the system stuff to maintain their own state, broken down into
seven C structures.  These are thin wrappers around the usual system
calls (see \fIwin32/perllib.c\fR) for the default perl executable, but for a
more ambitious host (like the one that would do \fIfork()\fR emulation) all
the extra work needed to pretend that different interpreters are
actually different \*(L"processes\*(R", would be done here.
.PP
The Perl engine/interpreter and the host are orthogonal entities.
There could be one or more interpreters in a process, and one or
more \*(L"hosts\*(R", with free association between them.
.SH "Internal Functions"
.IX Header "Internal Functions"
All of Perl's internal functions which will be exposed to the outside
world are prefixed by \f(CW\*(C`Perl_\*(C'\fR so that they will not conflict with \s-1XS\s0
functions or functions used in a program in which Perl is embedded.
Similarly, all global variables begin with \f(CW\*(C`PL_\*(C'\fR. (By convention,
static functions start with \f(CW\*(C`S_\*(C'\fR.)
.PP
Inside the Perl core (\f(CW\*(C`PERL_CORE\*(C'\fR defined), you can get at the functions
either with or without the \f(CW\*(C`Perl_\*(C'\fR prefix, thanks to a bunch of defines
that live in \fIembed.h\fR. Note that extension code should \fInot\fR set
\&\f(CW\*(C`PERL_CORE\*(C'\fR; this exposes the full perl internals, and is likely to cause
breakage of the \s-1XS\s0 in each new perl release.
.PP
The file \fIembed.h\fR is generated automatically from
\&\fIembed.pl\fR and \fIembed.fnc\fR. \fIembed.pl\fR also creates the prototyping
header files for the internal functions, generates the documentation
and a lot of other bits and pieces. It's important that when you add
a new function to the core or change an existing one, you change the
data in the table in \fIembed.fnc\fR as well. Here's a sample entry from
that table:
.PP
.Vb 1
\&    Apd |SV**   |av_fetch   |AV* ar|I32 key|I32 lval
.Ve
.PP
The second column is the return type, the third column the name. Columns
after that are the arguments. The first column is a set of flags:
.IP "A" 3
.IX Item "A"
This function is a part of the public \s-1API\s0. All such functions should also
have 'd', very few do not.
.IP "p" 3
.IX Item "p"
This function has a \f(CW\*(C`Perl_\*(C'\fR prefix; i.e. it is defined as
\&\f(CW\*(C`Perl_av_fetch\*(C'\fR.
.IP "d" 3
.IX Item "d"
This function has documentation using the \f(CW\*(C`apidoc\*(C'\fR feature which we'll
look at in a second.  Some functions have 'd' but not 'A'; docs are good.
.PP
Other available flags are:
.IP "s" 3
.IX Item "s"
This is a static function and is defined as \f(CW\*(C`STATIC S_whatever\*(C'\fR, and
usually called within the sources as \f(CW\*(C`whatever(...)\*(C'\fR.
.IP "n" 3
.IX Item "n"
This does not need an interpreter context, so the definition has no
\&\f(CW\*(C`pTHX\*(C'\fR, and it follows that callers don't use \f(CW\*(C`aTHX\*(C'\fR.  (See
\&\*(L"Background and \s-1PERL_IMPLICIT_CONTEXT\s0\*(R".)
.IP "r" 3
.IX Item "r"
This function never returns; \f(CW\*(C`croak\*(C'\fR, \f(CW\*(C`exit\*(C'\fR and friends.
.IP "f" 3
.IX Item "f"
This function takes a variable number of arguments, \f(CW\*(C`printf\*(C'\fR style.
The argument list should end with \f(CW\*(C`...\*(C'\fR, like this:
.Sp
.Vb 1
\&    Afprd   |void   |croak          |const char* pat|...
.Ve
.IP "M" 3
.IX Item "M"
This function is part of the experimental development \s-1API\s0, and may change
or disappear without notice.
.IP "o" 3
.IX Item "o"
This function should not have a compatibility macro to define, say,
\&\f(CW\*(C`Perl_parse\*(C'\fR to \f(CW\*(C`parse\*(C'\fR. It must be called as \f(CW\*(C`Perl_parse\*(C'\fR.
.IP "x" 3
.IX Item "x"
This function isn't exported out of the Perl core.
.IP "m" 3
.IX Item "m"
This is implemented as a macro.
.IP "X" 3
.IX Item "X"
This function is explicitly exported.
.IP "E" 3
.IX Item "E"
This function is visible to extensions included in the Perl core.
.IP "b" 3
.IX Item "b"
Binary backward compatibility; this function is a macro but also has
a \f(CW\*(C`Perl_\*(C'\fR implementation (which is exported).
.IP "others" 3
.IX Item "others"
See the comments at the top of \f(CW\*(C`embed.fnc\*(C'\fR for others.
.PP
If you edit \fIembed.pl\fR or \fIembed.fnc\fR, you will need to run
\&\f(CW\*(C`make regen_headers\*(C'\fR to force a rebuild of \fIembed.h\fR and other
auto-generated files.
.SS "Formatted Printing of IVs, UVs, and NVs"
.IX Subsection "Formatted Printing of IVs, UVs, and NVs"
If you are printing IVs, UVs, or \s-1NVS\s0 instead of the \fIstdio\fR\|(3) style
formatting codes like \f(CW%d\fR, \f(CW%ld\fR, \f(CW%f\fR, you should use the
following macros for portability
.PP
.Vb 7
\&        IVdf            IV in decimal
\&        UVuf            UV in decimal
\&        UVof            UV in octal
\&        UVxf            UV in hexadecimal
\&        NVef            NV %e\-like
\&        NVff            NV %f\-like
\&        NVgf            NV %g\-like
.Ve
.PP
These will take care of 64\-bit integers and long doubles.
For example:
.PP
.Vb 1
\&        printf("IV is %"IVdf"\en", iv);
.Ve
.PP
The IVdf will expand to whatever is the correct format for the IVs.
.PP
If you are printing addresses of pointers, use UVxf combined
with \s-1\fIPTR2UV\s0()\fR, do not use \f(CW%lx\fR or \f(CW%p\fR.
.SS "Pointer-To-Integer and Integer-To-Pointer"
.IX Subsection "Pointer-To-Integer and Integer-To-Pointer"
Because pointer size does not necessarily equal integer size,
use the follow macros to do it right.
.PP
.Vb 4
\&        PTR2UV(pointer)
\&        PTR2IV(pointer)
\&        PTR2NV(pointer)
\&        INT2PTR(pointertotype, integer)
.Ve
.PP
For example:
.PP
.Vb 2
\&        IV  iv = ...;
\&        SV *sv = INT2PTR(SV*, iv);
.Ve
.PP
and
.PP
.Vb 2
\&        AV *av = ...;
\&        UV  uv = PTR2UV(av);
.Ve
.SS "Exception Handling"
.IX Subsection "Exception Handling"
There are a couple of macros to do very basic exception handling in \s-1XS\s0
modules. You have to define \f(CW\*(C`NO_XSLOCKS\*(C'\fR before including \fI\s-1XSUB\s0.h\fR to
be able to use these macros:
.PP
.Vb 2
\&        #define NO_XSLOCKS
\&        #include "XSUB.h"
.Ve
.PP
You can use these macros if you call code that may croak, but you need
to do some cleanup before giving control back to Perl. For example:
.PP
.Vb 1
\&        dXCPT;    /* set up necessary variables */
\&
\&        XCPT_TRY_START {
\&          code_that_may_croak();
\&        } XCPT_TRY_END
\&
\&        XCPT_CATCH
\&        {
\&          /* do cleanup here */
\&          XCPT_RETHROW;
\&        }
.Ve
.PP
Note that you always have to rethrow an exception that has been
caught. Using these macros, it is not possible to just catch the
exception and ignore it. If you have to ignore the exception, you
have to use the \f(CW\*(C`call_*\*(C'\fR function.
.PP
The advantage of using the above macros is that you don't have
to setup an extra function for \f(CW\*(C`call_*\*(C'\fR, and that using these
macros is faster than using \f(CW\*(C`call_*\*(C'\fR.
.SS "Source Documentation"
.IX Subsection "Source Documentation"
There's an effort going on to document the internal functions and
automatically produce reference manuals from them \- perlapi is one
such manual which details all the functions which are available to \s-1XS\s0
writers. perlintern is the autogenerated manual for the functions
which are not part of the \s-1API\s0 and are supposedly for internal use only.
.PP
Source documentation is created by putting \s-1POD\s0 comments into the C
source, like this:
.PP
.Vb 2
\& /*
\& =for apidoc sv_setiv
\&
\& Copies an integer into the given SV.  Does not handle \*(Aqset\*(Aq magic.  See
\& C<sv_setiv_mg>.
\&
\& =cut
\& */
.Ve
.PP
Please try and supply some documentation if you add functions to the
Perl core.
.SS "Backwards compatibility"
.IX Subsection "Backwards compatibility"
The Perl \s-1API\s0 changes over time. New functions are added or the interfaces
of existing functions are changed. The \f(CW\*(C`Devel::PPPort\*(C'\fR module tries to
provide compatibility code for some of these changes, so \s-1XS\s0 writers don't
have to code it themselves when supporting multiple versions of Perl.
.PP
\&\f(CW\*(C`Devel::PPPort\*(C'\fR generates a C header file \fIppport.h\fR that can also
be run as a Perl script. To generate \fIppport.h\fR, run:
.PP
.Vb 1
\&    perl \-MDevel::PPPort \-eDevel::PPPort::WriteFile
.Ve
.PP
Besides checking existing \s-1XS\s0 code, the script can also be used to retrieve
compatibility information for various \s-1API\s0 calls using the \f(CW\*(C`\-\-api\-info\*(C'\fR
command line switch. For example:
.PP
.Vb 1
\&  % perl ppport.h \-\-api\-info=sv_magicext
.Ve
.PP
For details, see \f(CW\*(C`perldoc ppport.h\*(C'\fR.
.SH "Unicode Support"
.IX Header "Unicode Support"
Perl 5.6.0 introduced Unicode support. It's important for porters and \s-1XS\s0
writers to understand this support and make sure that the code they
write does not corrupt Unicode data.
.SS "What \fBis\fP Unicode, anyway?"
.IX Subsection "What is Unicode, anyway?"
In the olden, less enlightened times, we all used to use \s-1ASCII\s0. Most of
us did, anyway. The big problem with \s-1ASCII\s0 is that it's American. Well,
no, that's not actually the problem; the problem is that it's not
particularly useful for people who don't use the Roman alphabet. What
used to happen was that particular languages would stick their own
alphabet in the upper range of the sequence, between 128 and 255. Of
course, we then ended up with plenty of variants that weren't quite
\&\s-1ASCII\s0, and the whole point of it being a standard was lost.
.PP
Worse still, if you've got a language like Chinese or
Japanese that has hundreds or thousands of characters, then you really
can't fit them into a mere 256, so they had to forget about \s-1ASCII\s0
altogether, and build their own systems using pairs of numbers to refer
to one character.
.PP
To fix this, some people formed Unicode, Inc. and
produced a new character set containing all the characters you can
possibly think of and more. There are several ways of representing these
characters, and the one Perl uses is called \s-1UTF\-8\s0. \s-1UTF\-8\s0 uses
a variable number of bytes to represent a character. You can learn more
about Unicode and Perl's Unicode model in perlunicode.
.SS "How can I recognise a \s-1UTF\-8\s0 string?"
.IX Subsection "How can I recognise a UTF-8 string?"
You can't. This is because \s-1UTF\-8\s0 data is stored in bytes just like
non\-UTF\-8 data. The Unicode character 200, (\f(CW0xC8\fR for you hex types)
capital E with a grave accent, is represented by the two bytes
\&\f(CW\*(C`v196.172\*(C'\fR. Unfortunately, the non-Unicode string \f(CW\*(C`chr(196).chr(172)\*(C'\fR
has that byte sequence as well. So you can't tell just by looking \- this
is what makes Unicode input an interesting problem.
.PP
In general, you either have to know what you're dealing with, or you
have to guess.  The \s-1API\s0 function \f(CW\*(C`is_utf8_string\*(C'\fR can help; it'll tell
you if a string contains only valid \s-1UTF\-8\s0 characters. However, it can't
do the work for you. On a character-by-character basis, \f(CW\*(C`is_utf8_char\*(C'\fR
will tell you whether the current character in a string is valid \s-1UTF\-8\s0.
.SS "How does \s-1UTF\-8\s0 represent Unicode characters?"
.IX Subsection "How does UTF-8 represent Unicode characters?"
As mentioned above, \s-1UTF\-8\s0 uses a variable number of bytes to store a
character. Characters with values 0...127 are stored in one byte, just
like good ol' \s-1ASCII\s0. Character 128 is stored as \f(CW\*(C`v194.128\*(C'\fR; this
continues up to character 191, which is \f(CW\*(C`v194.191\*(C'\fR. Now we've run out of
bits (191 is binary \f(CW10111111\fR) so we move on; 192 is \f(CW\*(C`v195.128\*(C'\fR. And
so it goes on, moving to three bytes at character 2048.
.PP
Assuming you know you're dealing with a \s-1UTF\-8\s0 string, you can find out
how long the first character in it is with the \f(CW\*(C`UTF8SKIP\*(C'\fR macro:
.PP
.Vb 2
\&    char *utf = "\e305\e233\e340\e240\e201";
\&    I32 len;
\&
\&    len = UTF8SKIP(utf); /* len is 2 here */
\&    utf += len;
\&    len = UTF8SKIP(utf); /* len is 3 here */
.Ve
.PP
Another way to skip over characters in a \s-1UTF\-8\s0 string is to use
\&\f(CW\*(C`utf8_hop\*(C'\fR, which takes a string and a number of characters to skip
over. You're on your own about bounds checking, though, so don't use it
lightly.
.PP
All bytes in a multi-byte \s-1UTF\-8\s0 character will have the high bit set,
so you can test if you need to do something special with this
character like this (the \s-1\fIUTF8_IS_INVARIANT\s0()\fR is a macro that tests
whether the byte can be encoded as a single byte even in \s-1UTF\-8\s0):
.PP
.Vb 4
\&    U8 *utf;
\&    U8 *utf_end; /* 1 beyond buffer pointed to by utf */
\&    UV uv;      /* Note: a UV, not a U8, not a char */
\&    STRLEN len; /* length of character in bytes */
\&
\&    if (!UTF8_IS_INVARIANT(*utf))
\&        /* Must treat this as UTF\-8 */
\&        uv = utf8_to_uvchr_buf(utf, utf_end, &len);
\&    else
\&        /* OK to treat this character as a byte */
\&        uv = *utf;
.Ve
.PP
You can also see in that example that we use \f(CW\*(C`utf8_to_uvchr_buf\*(C'\fR to get the
value of the character; the inverse function \f(CW\*(C`uvchr_to_utf8\*(C'\fR is available
for putting a \s-1UV\s0 into \s-1UTF\-8:\s0
.PP
.Vb 6
\&    if (!UTF8_IS_INVARIANT(uv))
\&        /* Must treat this as UTF8 */
\&        utf8 = uvchr_to_utf8(utf8, uv);
\&    else
\&        /* OK to treat this character as a byte */
\&        *utf8++ = uv;
.Ve
.PP
You \fBmust\fR convert characters to UVs using the above functions if
you're ever in a situation where you have to match \s-1UTF\-8\s0 and non\-UTF\-8
characters. You may not skip over \s-1UTF\-8\s0 characters in this case. If you
do this, you'll lose the ability to match hi-bit non\-UTF\-8 characters;
for instance, if your \s-1UTF\-8\s0 string contains \f(CW\*(C`v196.172\*(C'\fR, and you skip
that character, you can never match a \f(CW\*(C`chr(200)\*(C'\fR in a non\-UTF\-8 string.
So don't do that!
.SS "How does Perl store \s-1UTF\-8\s0 strings?"
.IX Subsection "How does Perl store UTF-8 strings?"
Currently, Perl deals with Unicode strings and non-Unicode strings
slightly differently. A flag in the \s-1SV\s0, \f(CW\*(C`SVf_UTF8\*(C'\fR, indicates that the
string is internally encoded as \s-1UTF\-8\s0. Without it, the byte value is the
codepoint number and vice versa (in other words, the string is encoded
as iso\-8859\-1, but \f(CW\*(C`use feature \*(Aqunicode_strings\*(Aq\*(C'\fR is needed to get iso\-8859\-1
semantics). You can check and manipulate this flag with the
following macros:
.PP
.Vb 3
\&    SvUTF8(sv)
\&    SvUTF8_on(sv)
\&    SvUTF8_off(sv)
.Ve
.PP
This flag has an important effect on Perl's treatment of the string: if
Unicode data is not properly distinguished, regular expressions,
\&\f(CW\*(C`length\*(C'\fR, \f(CW\*(C`substr\*(C'\fR and other string handling operations will have
undesirable results.
.PP
The problem comes when you have, for instance, a string that isn't
flagged as \s-1UTF\-8\s0, and contains a byte sequence that could be \s-1UTF\-8\s0 \-
especially when combining non\-UTF\-8 and \s-1UTF\-8\s0 strings.
.PP
Never forget that the \f(CW\*(C`SVf_UTF8\*(C'\fR flag is separate to the \s-1PV\s0 value; you
need be sure you don't accidentally knock it off while you're
manipulating SVs. More specifically, you cannot expect to do this:
.PP
.Vb 4
\&    SV *sv;
\&    SV *nsv;
\&    STRLEN len;
\&    char *p;
\&
\&    p = SvPV(sv, len);
\&    frobnicate(p);
\&    nsv = newSVpvn(p, len);
.Ve
.PP
The \f(CW\*(C`char*\*(C'\fR string does not tell you the whole story, and you can't
copy or reconstruct an \s-1SV\s0 just by copying the string value. Check if the
old \s-1SV\s0 has the \s-1UTF8\s0 flag set, and act accordingly:
.PP
.Vb 5
\&    p = SvPV(sv, len);
\&    frobnicate(p);
\&    nsv = newSVpvn(p, len);
\&    if (SvUTF8(sv))
\&        SvUTF8_on(nsv);
.Ve
.PP
In fact, your \f(CW\*(C`frobnicate\*(C'\fR function should be made aware of whether or
not it's dealing with \s-1UTF\-8\s0 data, so that it can handle the string
appropriately.
.PP
Since just passing an \s-1SV\s0 to an \s-1XS\s0 function and copying the data of
the \s-1SV\s0 is not enough to copy the \s-1UTF8\s0 flags, even less right is just
passing a \f(CW\*(C`char *\*(C'\fR to an \s-1XS\s0 function.
.SS "How do I convert a string to \s-1UTF\-8\s0?"
.IX Subsection "How do I convert a string to UTF-8?"
If you're mixing \s-1UTF\-8\s0 and non\-UTF\-8 strings, it is necessary to upgrade
one of the strings to \s-1UTF\-8\s0. If you've got an \s-1SV\s0, the easiest way to do
this is:
.PP
.Vb 1
\&    sv_utf8_upgrade(sv);
.Ve
.PP
However, you must not do this, for example:
.PP
.Vb 2
\&    if (!SvUTF8(left))
\&        sv_utf8_upgrade(left);
.Ve
.PP
If you do this in a binary operator, you will actually change one of the
strings that came into the operator, and, while it shouldn't be noticeable
by the end user, it can cause problems in deficient code.
.PP
Instead, \f(CW\*(C`bytes_to_utf8\*(C'\fR will give you a UTF\-8\-encoded \fBcopy\fR of its
string argument. This is useful for having the data available for
comparisons and so on, without harming the original \s-1SV\s0. There's also
\&\f(CW\*(C`utf8_to_bytes\*(C'\fR to go the other way, but naturally, this will fail if
the string contains any characters above 255 that can't be represented
in a single byte.
.SS "Is there anything else I need to know?"
.IX Subsection "Is there anything else I need to know?"
Not really. Just remember these things:
.IP "\(bu" 3
There's no way to tell if a string is \s-1UTF\-8\s0 or not. You can tell if an \s-1SV\s0
is \s-1UTF\-8\s0 by looking at its \f(CW\*(C`SvUTF8\*(C'\fR flag. Don't forget to set the flag if
something should be \s-1UTF\-8\s0. Treat the flag as part of the \s-1PV\s0, even though
it's not \- if you pass on the \s-1PV\s0 to somewhere, pass on the flag too.
.IP "\(bu" 3
If a string is \s-1UTF\-8\s0, \fBalways\fR use \f(CW\*(C`utf8_to_uvchr_buf\*(C'\fR to get at the value,
unless \f(CW\*(C`UTF8_IS_INVARIANT(*s)\*(C'\fR in which case you can use \f(CW*s\fR.
.IP "\(bu" 3
When writing a character \f(CW\*(C`uv\*(C'\fR to a \s-1UTF\-8\s0 string, \fBalways\fR use
\&\f(CW\*(C`uvchr_to_utf8\*(C'\fR, unless \f(CW\*(C`UTF8_IS_INVARIANT(uv))\*(C'\fR in which case
you can use \f(CW\*(C`*s = uv\*(C'\fR.
.IP "\(bu" 3
Mixing \s-1UTF\-8\s0 and non\-UTF\-8 strings is tricky. Use \f(CW\*(C`bytes_to_utf8\*(C'\fR to get
a new string which is \s-1UTF\-8\s0 encoded, and then combine them.
.SH "Custom Operators"
.IX Header "Custom Operators"
Custom operator support is a new experimental feature that allows you to
define your own ops. This is primarily to allow the building of
interpreters for other languages in the Perl core, but it also allows
optimizations through the creation of \*(L"macro-ops\*(R" (ops which perform the
functions of multiple ops which are usually executed together, such as
\&\f(CW\*(C`gvsv, gvsv, add\*(C'\fR.)
.PP
This feature is implemented as a new op type, \f(CW\*(C`OP_CUSTOM\*(C'\fR. The Perl
core does not \*(L"know\*(R" anything special about this op type, and so it will
not be involved in any optimizations. This also means that you can
define your custom ops to be any op structure \- unary, binary, list and
so on \- you like.
.PP
It's important to know what custom operators won't do for you. They
won't let you add new syntax to Perl, directly. They won't even let you
add new keywords, directly. In fact, they won't change the way Perl
compiles a program at all. You have to do those changes yourself, after
Perl has compiled the program. You do this either by manipulating the op
tree using a \f(CW\*(C`CHECK\*(C'\fR block and the \f(CW\*(C`B::Generate\*(C'\fR module, or by adding
a custom peephole optimizer with the \f(CW\*(C`optimize\*(C'\fR module.
.PP
When you do this, you replace ordinary Perl ops with custom ops by
creating ops with the type \f(CW\*(C`OP_CUSTOM\*(C'\fR and the \f(CW\*(C`pp_addr\*(C'\fR of your own
\&\s-1PP\s0 function. This should be defined in \s-1XS\s0 code, and should look like
the \s-1PP\s0 ops in \f(CW\*(C`pp_*.c\*(C'\fR. You are responsible for ensuring that your op
takes the appropriate number of values from the stack, and you are
responsible for adding stack marks if necessary.
.PP
You should also \*(L"register\*(R" your op with the Perl interpreter so that it
can produce sensible error and warning messages. Since it is possible to
have multiple custom ops within the one \*(L"logical\*(R" op type \f(CW\*(C`OP_CUSTOM\*(C'\fR,
Perl uses the value of \f(CW\*(C`o\->op_ppaddr\*(C'\fR to determine which custom op
it is dealing with. You should create an \f(CW\*(C`XOP\*(C'\fR structure for each
ppaddr you use, set the properties of the custom op with
\&\f(CW\*(C`XopENTRY_set\*(C'\fR, and register the structure against the ppaddr using
\&\f(CW\*(C`Perl_custom_op_register\*(C'\fR. A trivial example might look like:
.PP
.Vb 2
\&    static XOP my_xop;
\&    static OP *my_pp(pTHX);
\&
\&    BOOT:
\&        XopENTRY_set(&my_xop, xop_name, "myxop");
\&        XopENTRY_set(&my_xop, xop_desc, "Useless custom op");
\&        Perl_custom_op_register(aTHX_ my_pp, &my_xop);
.Ve
.PP
The available fields in the structure are:
.IP "xop_name" 4
.IX Item "xop_name"
A short name for your op. This will be included in some error messages,
and will also be returned as \f(CW\*(C`$op\->name\*(C'\fR by the B module, so
it will appear in the output of module like B::Concise.
.IP "xop_desc" 4
.IX Item "xop_desc"
A short description of the function of the op.
.IP "xop_class" 4
.IX Item "xop_class"
Which of the various \f(CW*OP\fR structures this op uses. This should be one of
the \f(CW\*(C`OA_*\*(C'\fR constants from \fIop.h\fR, namely
.RS 4
.IP "\s-1OA_BASEOP\s0" 4
.IX Item "OA_BASEOP"
.PD 0
.IP "\s-1OA_UNOP\s0" 4
.IX Item "OA_UNOP"
.IP "\s-1OA_BINOP\s0" 4
.IX Item "OA_BINOP"
.IP "\s-1OA_LOGOP\s0" 4
.IX Item "OA_LOGOP"
.IP "\s-1OA_LISTOP\s0" 4
.IX Item "OA_LISTOP"
.IP "\s-1OA_PMOP\s0" 4
.IX Item "OA_PMOP"
.IP "\s-1OA_SVOP\s0" 4
.IX Item "OA_SVOP"
.IP "\s-1OA_PADOP\s0" 4
.IX Item "OA_PADOP"
.IP "\s-1OA_PVOP_OR_SVOP\s0" 4
.IX Item "OA_PVOP_OR_SVOP"
.PD
This should be interpreted as '\f(CW\*(C`PVOP\*(C'\fR' only. The \f(CW\*(C`_OR_SVOP\*(C'\fR is because
the only core \f(CW\*(C`PVOP\*(C'\fR, \f(CW\*(C`OP_TRANS\*(C'\fR, can sometimes be a \f(CW\*(C`SVOP\*(C'\fR instead.
.IP "\s-1OA_LOOP\s0" 4
.IX Item "OA_LOOP"
.PD 0
.IP "\s-1OA_COP\s0" 4
.IX Item "OA_COP"
.RE
.RS 4
.PD
.Sp
The other \f(CW\*(C`OA_*\*(C'\fR constants should not be used.
.RE
.IP "xop_peep" 4
.IX Item "xop_peep"
This member is of type \f(CW\*(C`Perl_cpeep_t\*(C'\fR, which expands to \f(CW\*(C`void
(*Perl_cpeep_t)(aTHX_ OP *o, OP *oldop)\*(C'\fR. If it is set, this function
will be called from \f(CW\*(C`Perl_rpeep\*(C'\fR when ops of this type are encountered
by the peephole optimizer. \fIo\fR is the \s-1OP\s0 that needs optimizing;
\&\fIoldop\fR is the previous \s-1OP\s0 optimized, whose \f(CW\*(C`op_next\*(C'\fR points to \fIo\fR.
.PP
\&\f(CW\*(C`B::Generate\*(C'\fR directly supports the creation of custom ops by name.
.SH "AUTHORS"
.IX Header "AUTHORS"
Until May 1997, this document was maintained by Jeff Okamoto
<okamoto@corp.hp.com>.  It is now maintained as part of Perl
itself by the Perl 5 Porters <perl5\-porters@perl.org>.
.PP
With lots of help and suggestions from Dean Roehrich, Malcolm Beattie,
Andreas Koenig, Paul Hudson, Ilya Zakharevich, Paul Marquess, Neil
Bowers, Matthew Green, Tim Bunce, Spider Boardman, Ulrich Pfeifer,
Stephen McCamant, and Gurusamy Sarathy.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
perlapi, perlintern, perlxs, perlembed
                                                                                                                                                                                                                                                                                                                              osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perlguts5.18.1                               0100644 0001750 0001750 00000424213 12566207441 023126  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLGUTS 1"
.TH PERLGUTS 1 "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlguts \- Introduction to the Perl API
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document attempts to describe how to use the Perl \s-1API,\s0 as well as
to provide some info on the basic workings of the Perl core. It is far
from complete and probably contains many errors. Please refer any
questions or comments to the author below.
.SH "Variables"
.IX Header "Variables"
.SS "Datatypes"
.IX Subsection "Datatypes"
Perl has three typedefs that handle Perl's three main data types:
.PP
.Vb 3
\&    SV  Scalar Value
\&    AV  Array Value
\&    HV  Hash Value
.Ve
.PP
Each typedef has specific routines that manipulate the various data types.
.ie n .SS "What is an ""\s-1IV""\s0?"
.el .SS "What is an ``\s-1IV''\s0?"
.IX Subsection "What is an IV?"
Perl uses a special typedef \s-1IV\s0 which is a simple signed integer type that is
guaranteed to be large enough to hold a pointer (as well as an integer).
Additionally, there is the \s-1UV,\s0 which is simply an unsigned \s-1IV.\s0
.PP
Perl also uses two special typedefs, I32 and I16, which will always be at
least 32\-bits and 16\-bits long, respectively. (Again, there are U32 and U16,
as well.)  They will usually be exactly 32 and 16 bits long, but on Crays
they will both be 64 bits.
.SS "Working with SVs"
.IX Subsection "Working with SVs"
An \s-1SV\s0 can be created and loaded with one command.  There are five types of
values that can be loaded: an integer value (\s-1IV\s0), an unsigned integer
value (\s-1UV\s0), a double (\s-1NV\s0), a string (\s-1PV\s0), and another scalar (\s-1SV\s0).
(\*(L"\s-1PV\*(R"\s0 stands for \*(L"Pointer Value\*(R".  You might think that it is misnamed
because it is described as pointing only to strings.  However, it is
possible to have it point to other things.  For example, inversion
lists, used in regular expression data structures, are scalars, each
consisting of an array of UVs which are accessed through PVs.  But,
using it for non-strings requires care, as the underlying assumption of
much of the internals is that PVs are just for strings.  Often, for
example, a trailing \s-1NUL\s0 is tacked on automatically.  The non-string use
is documented only in this paragraph.)
.PP
The seven routines are:
.PP
.Vb 7
\&    SV*  newSViv(IV);
\&    SV*  newSVuv(UV);
\&    SV*  newSVnv(double);
\&    SV*  newSVpv(const char*, STRLEN);
\&    SV*  newSVpvn(const char*, STRLEN);
\&    SV*  newSVpvf(const char*, ...);
\&    SV*  newSVsv(SV*);
.Ve
.PP
\&\f(CW\*(C`STRLEN\*(C'\fR is an integer type (Size_t, usually defined as size_t in
\&\fIconfig.h\fR) guaranteed to be large enough to represent the size of
any string that perl can handle.
.PP
In the unlikely case of a \s-1SV\s0 requiring more complex initialisation, you
can create an empty \s-1SV\s0 with newSV(len).  If \f(CW\*(C`len\*(C'\fR is 0 an empty \s-1SV\s0 of
type \s-1NULL\s0 is returned, else an \s-1SV\s0 of type \s-1PV\s0 is returned with len + 1 (for
the \s-1NUL\s0) bytes of storage allocated, accessible via SvPVX.  In both cases
the \s-1SV\s0 has the undef value.
.PP
.Vb 3
\&    SV *sv = newSV(0);   /* no storage allocated  */
\&    SV *sv = newSV(10);  /* 10 (+1) bytes of uninitialised storage
\&                          * allocated */
.Ve
.PP
To change the value of an \fIalready-existing\fR \s-1SV,\s0 there are eight routines:
.PP
.Vb 9
\&    void  sv_setiv(SV*, IV);
\&    void  sv_setuv(SV*, UV);
\&    void  sv_setnv(SV*, double);
\&    void  sv_setpv(SV*, const char*);
\&    void  sv_setpvn(SV*, const char*, STRLEN)
\&    void  sv_setpvf(SV*, const char*, ...);
\&    void  sv_vsetpvfn(SV*, const char*, STRLEN, va_list *,
\&                                                    SV **, I32, bool *);
\&    void  sv_setsv(SV*, SV*);
.Ve
.PP
Notice that you can choose to specify the length of the string to be
assigned by using \f(CW\*(C`sv_setpvn\*(C'\fR, \f(CW\*(C`newSVpvn\*(C'\fR, or \f(CW\*(C`newSVpv\*(C'\fR, or you may
allow Perl to calculate the length by using \f(CW\*(C`sv_setpv\*(C'\fR or by specifying
0 as the second argument to \f(CW\*(C`newSVpv\*(C'\fR.  Be warned, though, that Perl will
determine the string's length by using \f(CW\*(C`strlen\*(C'\fR, which depends on the
string terminating with a \s-1NUL\s0 character, and not otherwise containing
NULs.
.PP
The arguments of \f(CW\*(C`sv_setpvf\*(C'\fR are processed like \f(CW\*(C`sprintf\*(C'\fR, and the
formatted output becomes the value.
.PP
\&\f(CW\*(C`sv_vsetpvfn\*(C'\fR is an analogue of \f(CW\*(C`vsprintf\*(C'\fR, but it allows you to specify
either a pointer to a variable argument list or the address and length of
an array of SVs.  The last argument points to a boolean; on return, if that
boolean is true, then locale-specific information has been used to format
the string, and the string's contents are therefore untrustworthy (see
perlsec).  This pointer may be \s-1NULL\s0 if that information is not
important.  Note that this function requires you to specify the length of
the format.
.PP
The \f(CW\*(C`sv_set*()\*(C'\fR functions are not generic enough to operate on values
that have \*(L"magic\*(R".  See \*(L"Magic Virtual Tables\*(R" later in this document.
.PP
All SVs that contain strings should be terminated with a \s-1NUL\s0 character.
If it is not NUL-terminated there is a risk of
core dumps and corruptions from code which passes the string to C
functions or system calls which expect a NUL-terminated string.
Perl's own functions typically add a trailing \s-1NUL\s0 for this reason.
Nevertheless, you should be very careful when you pass a string stored
in an \s-1SV\s0 to a C function or system call.
.PP
To access the actual value that an \s-1SV\s0 points to, you can use the macros:
.PP
.Vb 5
\&    SvIV(SV*)
\&    SvUV(SV*)
\&    SvNV(SV*)
\&    SvPV(SV*, STRLEN len)
\&    SvPV_nolen(SV*)
.Ve
.PP
which will automatically coerce the actual scalar type into an \s-1IV, UV,\s0 double,
or string.
.PP
In the \f(CW\*(C`SvPV\*(C'\fR macro, the length of the string returned is placed into the
variable \f(CW\*(C`len\*(C'\fR (this is a macro, so you do \fInot\fR use \f(CW&len\fR).  If you do
not care what the length of the data is, use the \f(CW\*(C`SvPV_nolen\*(C'\fR macro.
Historically the \f(CW\*(C`SvPV\*(C'\fR macro with the global variable \f(CW\*(C`PL_na\*(C'\fR has been
used in this case.  But that can be quite inefficient because \f(CW\*(C`PL_na\*(C'\fR must
be accessed in thread-local storage in threaded Perl.  In any case, remember
that Perl allows arbitrary strings of data that may both contain NULs and
might not be terminated by a \s-1NUL.\s0
.PP
Also remember that C doesn't allow you to safely say \f(CW\*(C`foo(SvPV(s, len),
len);\*(C'\fR. It might work with your compiler, but it won't work for everyone.
Break this sort of statement up into separate assignments:
.PP
.Vb 5
\&    SV *s;
\&    STRLEN len;
\&    char *ptr;
\&    ptr = SvPV(s, len);
\&    foo(ptr, len);
.Ve
.PP
If you want to know if the scalar value is \s-1TRUE,\s0 you can use:
.PP
.Vb 1
\&    SvTRUE(SV*)
.Ve
.PP
Although Perl will automatically grow strings for you, if you need to force
Perl to allocate more memory for your \s-1SV,\s0 you can use the macro
.PP
.Vb 1
\&    SvGROW(SV*, STRLEN newlen)
.Ve
.PP
which will determine if more memory needs to be allocated.  If so, it will
call the function \f(CW\*(C`sv_grow\*(C'\fR.  Note that \f(CW\*(C`SvGROW\*(C'\fR can only increase, not
decrease, the allocated memory of an \s-1SV\s0 and that it does not automatically
add space for the trailing \s-1NUL\s0 byte (perl's own string functions typically do
\&\f(CW\*(C`SvGROW(sv, len + 1)\*(C'\fR).
.PP
If you have an \s-1SV\s0 and want to know what kind of data Perl thinks is stored
in it, you can use the following macros to check the type of \s-1SV\s0 you have.
.PP
.Vb 3
\&    SvIOK(SV*)
\&    SvNOK(SV*)
\&    SvPOK(SV*)
.Ve
.PP
You can get and set the current length of the string stored in an \s-1SV\s0 with
the following macros:
.PP
.Vb 2
\&    SvCUR(SV*)
\&    SvCUR_set(SV*, I32 val)
.Ve
.PP
You can also get a pointer to the end of the string stored in the \s-1SV\s0
with the macro:
.PP
.Vb 1
\&    SvEND(SV*)
.Ve
.PP
But note that these last three macros are valid only if \f(CW\*(C`SvPOK()\*(C'\fR is true.
.PP
If you want to append something to the end of string stored in an \f(CW\*(C`SV*\*(C'\fR,
you can use the following functions:
.PP
.Vb 6
\&    void  sv_catpv(SV*, const char*);
\&    void  sv_catpvn(SV*, const char*, STRLEN);
\&    void  sv_catpvf(SV*, const char*, ...);
\&    void  sv_vcatpvfn(SV*, const char*, STRLEN, va_list *, SV **,
\&                                                             I32, bool);
\&    void  sv_catsv(SV*, SV*);
.Ve
.PP
The first function calculates the length of the string to be appended by
using \f(CW\*(C`strlen\*(C'\fR.  In the second, you specify the length of the string
yourself.  The third function processes its arguments like \f(CW\*(C`sprintf\*(C'\fR and
appends the formatted output.  The fourth function works like \f(CW\*(C`vsprintf\*(C'\fR.
You can specify the address and length of an array of SVs instead of the
va_list argument. The fifth function extends the string stored in the first
\&\s-1SV\s0 with the string stored in the second \s-1SV. \s0 It also forces the second \s-1SV\s0
to be interpreted as a string.
.PP
The \f(CW\*(C`sv_cat*()\*(C'\fR functions are not generic enough to operate on values that
have \*(L"magic\*(R".  See \*(L"Magic Virtual Tables\*(R" later in this document.
.PP
If you know the name of a scalar variable, you can get a pointer to its \s-1SV\s0
by using the following:
.PP
.Vb 1
\&    SV*  get_sv("package::varname", 0);
.Ve
.PP
This returns \s-1NULL\s0 if the variable does not exist.
.PP
If you want to know if this variable (or any other \s-1SV\s0) is actually \f(CW\*(C`defined\*(C'\fR,
you can call:
.PP
.Vb 1
\&    SvOK(SV*)
.Ve
.PP
The scalar \f(CW\*(C`undef\*(C'\fR value is stored in an \s-1SV\s0 instance called \f(CW\*(C`PL_sv_undef\*(C'\fR.
.PP
Its address can be used whenever an \f(CW\*(C`SV*\*(C'\fR is needed. Make sure that
you don't try to compare a random sv with \f(CW&PL_sv_undef\fR. For example
when interfacing Perl code, it'll work correctly for:
.PP
.Vb 1
\&  foo(undef);
.Ve
.PP
But won't work when called as:
.PP
.Vb 2
\&  $x = undef;
\&  foo($x);
.Ve
.PP
So to repeat always use \fISvOK()\fR to check whether an sv is defined.
.PP
Also you have to be careful when using \f(CW&PL_sv_undef\fR as a value in
AVs or HVs (see \*(L"AVs, HVs and undefined values\*(R").
.PP
There are also the two values \f(CW\*(C`PL_sv_yes\*(C'\fR and \f(CW\*(C`PL_sv_no\*(C'\fR, which contain
boolean \s-1TRUE\s0 and \s-1FALSE\s0 values, respectively.  Like \f(CW\*(C`PL_sv_undef\*(C'\fR, their
addresses can be used whenever an \f(CW\*(C`SV*\*(C'\fR is needed.
.PP
Do not be fooled into thinking that \f(CW\*(C`(SV *) 0\*(C'\fR is the same as \f(CW&PL_sv_undef\fR.
Take this code:
.PP
.Vb 5
\&    SV* sv = (SV*) 0;
\&    if (I\-am\-to\-return\-a\-real\-value) {
\&            sv = sv_2mortal(newSViv(42));
\&    }
\&    sv_setsv(ST(0), sv);
.Ve
.PP
This code tries to return a new \s-1SV \s0(which contains the value 42) if it should
return a real value, or undef otherwise.  Instead it has returned a \s-1NULL\s0
pointer which, somewhere down the line, will cause a segmentation violation,
bus error, or just weird results.  Change the zero to \f(CW&PL_sv_undef\fR in the
first line and all will be well.
.PP
To free an \s-1SV\s0 that you've created, call \f(CW\*(C`SvREFCNT_dec(SV*)\*(C'\fR.  Normally this
call is not necessary (see \*(L"Reference Counts and Mortality\*(R").
.SS "Offsets"
.IX Subsection "Offsets"
Perl provides the function \f(CW\*(C`sv_chop\*(C'\fR to efficiently remove characters
from the beginning of a string; you give it an \s-1SV\s0 and a pointer to
somewhere inside the \s-1PV,\s0 and it discards everything before the
pointer. The efficiency comes by means of a little hack: instead of
actually removing the characters, \f(CW\*(C`sv_chop\*(C'\fR sets the flag \f(CW\*(C`OOK\*(C'\fR
(offset \s-1OK\s0) to signal to other functions that the offset hack is in
effect, and it puts the number of bytes chopped off into the \s-1IV\s0 field
of the \s-1SV.\s0 It then moves the \s-1PV\s0 pointer (called \f(CW\*(C`SvPVX\*(C'\fR) forward that
many bytes, and adjusts \f(CW\*(C`SvCUR\*(C'\fR and \f(CW\*(C`SvLEN\*(C'\fR.
.PP
Hence, at this point, the start of the buffer that we allocated lives
at \f(CW\*(C`SvPVX(sv) \- SvIV(sv)\*(C'\fR in memory and the \s-1PV\s0 pointer is pointing
into the middle of this allocated storage.
.PP
This is best demonstrated by example:
.PP
.Vb 8
\&  % ./perl \-Ilib \-MDevel::Peek \-le \*(Aq$a="12345"; $a=~s/.//; Dump($a)\*(Aq
\&  SV = PVIV(0x8128450) at 0x81340f0
\&    REFCNT = 1
\&    FLAGS = (POK,OOK,pPOK)
\&    IV = 1  (OFFSET)
\&    PV = 0x8135781 ( "1" . ) "2345"\e0
\&    CUR = 4
\&    LEN = 5
.Ve
.PP
Here the number of bytes chopped off (1) is put into \s-1IV,\s0 and
\&\f(CW\*(C`Devel::Peek::Dump\*(C'\fR helpfully reminds us that this is an offset. The
portion of the string between the \*(L"real\*(R" and the \*(L"fake\*(R" beginnings is
shown in parentheses, and the values of \f(CW\*(C`SvCUR\*(C'\fR and \f(CW\*(C`SvLEN\*(C'\fR reflect
the fake beginning, not the real one.
.PP
Something similar to the offset hack is performed on AVs to enable
efficient shifting and splicing off the beginning of the array; while
\&\f(CW\*(C`AvARRAY\*(C'\fR points to the first element in the array that is visible from
Perl, \f(CW\*(C`AvALLOC\*(C'\fR points to the real start of the C array. These are
usually the same, but a \f(CW\*(C`shift\*(C'\fR operation can be carried out by
increasing \f(CW\*(C`AvARRAY\*(C'\fR by one and decreasing \f(CW\*(C`AvFILL\*(C'\fR and \f(CW\*(C`AvMAX\*(C'\fR.
Again, the location of the real start of the C array only comes into
play when freeing the array. See \f(CW\*(C`av_shift\*(C'\fR in \fIav.c\fR.
.SS "What's Really Stored in an \s-1SV\s0?"
.IX Subsection "What's Really Stored in an SV?"
Recall that the usual method of determining the type of scalar you have is
to use \f(CW\*(C`Sv*OK\*(C'\fR macros.  Because a scalar can be both a number and a string,
usually these macros will always return \s-1TRUE\s0 and calling the \f(CW\*(C`Sv*V\*(C'\fR
macros will do the appropriate conversion of string to integer/double or
integer/double to string.
.PP
If you \fIreally\fR need to know if you have an integer, double, or string
pointer in an \s-1SV,\s0 you can use the following three macros instead:
.PP
.Vb 3
\&    SvIOKp(SV*)
\&    SvNOKp(SV*)
\&    SvPOKp(SV*)
.Ve
.PP
These will tell you if you truly have an integer, double, or string pointer
stored in your \s-1SV. \s0 The \*(L"p\*(R" stands for private.
.PP
There are various ways in which the private and public flags may differ.
For example, a tied \s-1SV\s0 may have a valid underlying value in the \s-1IV\s0 slot
(so SvIOKp is true), but the data should be accessed via the \s-1FETCH\s0
routine rather than directly, so SvIOK is false. Another is when
numeric conversion has occurred and precision has been lost: only the
private flag is set on 'lossy' values. So when an \s-1NV\s0 is converted to an
\&\s-1IV\s0 with loss, SvIOKp, SvNOKp and SvNOK will be set, while SvIOK wont be.
.PP
In general, though, it's best to use the \f(CW\*(C`Sv*V\*(C'\fR macros.
.SS "Working with AVs"
.IX Subsection "Working with AVs"
There are two ways to create and load an \s-1AV. \s0 The first method creates an
empty \s-1AV:\s0
.PP
.Vb 1
\&    AV*  newAV();
.Ve
.PP
The second method both creates the \s-1AV\s0 and initially populates it with SVs:
.PP
.Vb 1
\&    AV*  av_make(I32 num, SV **ptr);
.Ve
.PP
The second argument points to an array containing \f(CW\*(C`num\*(C'\fR \f(CW\*(C`SV*\*(C'\fR's.  Once the
\&\s-1AV\s0 has been created, the SVs can be destroyed, if so desired.
.PP
Once the \s-1AV\s0 has been created, the following operations are possible on it:
.PP
.Vb 4
\&    void  av_push(AV*, SV*);
\&    SV*   av_pop(AV*);
\&    SV*   av_shift(AV*);
\&    void  av_unshift(AV*, I32 num);
.Ve
.PP
These should be familiar operations, with the exception of \f(CW\*(C`av_unshift\*(C'\fR.
This routine adds \f(CW\*(C`num\*(C'\fR elements at the front of the array with the \f(CW\*(C`undef\*(C'\fR
value.  You must then use \f(CW\*(C`av_store\*(C'\fR (described below) to assign values
to these new elements.
.PP
Here are some other functions:
.PP
.Vb 3
\&    I32   av_top_index(AV*);
\&    SV**  av_fetch(AV*, I32 key, I32 lval);
\&    SV**  av_store(AV*, I32 key, SV* val);
.Ve
.PP
The \f(CW\*(C`av_top_index\*(C'\fR function returns the highest index value in an array (just
like $#array in Perl).  If the array is empty, \-1 is returned.  The
\&\f(CW\*(C`av_fetch\*(C'\fR function returns the value at index \f(CW\*(C`key\*(C'\fR, but if \f(CW\*(C`lval\*(C'\fR
is non-zero, then \f(CW\*(C`av_fetch\*(C'\fR will store an undef value at that index.
The \f(CW\*(C`av_store\*(C'\fR function stores the value \f(CW\*(C`val\*(C'\fR at index \f(CW\*(C`key\*(C'\fR, and does
not increment the reference count of \f(CW\*(C`val\*(C'\fR.  Thus the caller is responsible
for taking care of that, and if \f(CW\*(C`av_store\*(C'\fR returns \s-1NULL,\s0 the caller will
have to decrement the reference count to avoid a memory leak.  Note that
\&\f(CW\*(C`av_fetch\*(C'\fR and \f(CW\*(C`av_store\*(C'\fR both return \f(CW\*(C`SV**\*(C'\fR's, not \f(CW\*(C`SV*\*(C'\fR's as their
return value.
.PP
A few more:
.PP
.Vb 3
\&    void  av_clear(AV*);
\&    void  av_undef(AV*);
\&    void  av_extend(AV*, I32 key);
.Ve
.PP
The \f(CW\*(C`av_clear\*(C'\fR function deletes all the elements in the AV* array, but
does not actually delete the array itself.  The \f(CW\*(C`av_undef\*(C'\fR function will
delete all the elements in the array plus the array itself.  The
\&\f(CW\*(C`av_extend\*(C'\fR function extends the array so that it contains at least \f(CW\*(C`key+1\*(C'\fR
elements.  If \f(CW\*(C`key+1\*(C'\fR is less than the currently allocated length of the array,
then nothing is done.
.PP
If you know the name of an array variable, you can get a pointer to its \s-1AV\s0
by using the following:
.PP
.Vb 1
\&    AV*  get_av("package::varname", 0);
.Ve
.PP
This returns \s-1NULL\s0 if the variable does not exist.
.PP
See \*(L"Understanding the Magic of Tied Hashes and Arrays\*(R" for more
information on how to use the array access functions on tied arrays.
.SS "Working with HVs"
.IX Subsection "Working with HVs"
To create an \s-1HV,\s0 you use the following routine:
.PP
.Vb 1
\&    HV*  newHV();
.Ve
.PP
Once the \s-1HV\s0 has been created, the following operations are possible on it:
.PP
.Vb 2
\&    SV**  hv_store(HV*, const char* key, U32 klen, SV* val, U32 hash);
\&    SV**  hv_fetch(HV*, const char* key, U32 klen, I32 lval);
.Ve
.PP
The \f(CW\*(C`klen\*(C'\fR parameter is the length of the key being passed in (Note that
you cannot pass 0 in as a value of \f(CW\*(C`klen\*(C'\fR to tell Perl to measure the
length of the key).  The \f(CW\*(C`val\*(C'\fR argument contains the \s-1SV\s0 pointer to the
scalar being stored, and \f(CW\*(C`hash\*(C'\fR is the precomputed hash value (zero if
you want \f(CW\*(C`hv_store\*(C'\fR to calculate it for you).  The \f(CW\*(C`lval\*(C'\fR parameter
indicates whether this fetch is actually a part of a store operation, in
which case a new undefined value will be added to the \s-1HV\s0 with the supplied
key and \f(CW\*(C`hv_fetch\*(C'\fR will return as if the value had already existed.
.PP
Remember that \f(CW\*(C`hv_store\*(C'\fR and \f(CW\*(C`hv_fetch\*(C'\fR return \f(CW\*(C`SV**\*(C'\fR's and not just
\&\f(CW\*(C`SV*\*(C'\fR.  To access the scalar value, you must first dereference the return
value.  However, you should check to make sure that the return value is
not \s-1NULL\s0 before dereferencing it.
.PP
The first of these two functions checks if a hash table entry exists, and the 
second deletes it.
.PP
.Vb 2
\&    bool  hv_exists(HV*, const char* key, U32 klen);
\&    SV*   hv_delete(HV*, const char* key, U32 klen, I32 flags);
.Ve
.PP
If \f(CW\*(C`flags\*(C'\fR does not include the \f(CW\*(C`G_DISCARD\*(C'\fR flag then \f(CW\*(C`hv_delete\*(C'\fR will
create and return a mortal copy of the deleted value.
.PP
And more miscellaneous functions:
.PP
.Vb 2
\&    void   hv_clear(HV*);
\&    void   hv_undef(HV*);
.Ve
.PP
Like their \s-1AV\s0 counterparts, \f(CW\*(C`hv_clear\*(C'\fR deletes all the entries in the hash
table but does not actually delete the hash table.  The \f(CW\*(C`hv_undef\*(C'\fR deletes
both the entries and the hash table itself.
.PP
Perl keeps the actual data in a linked list of structures with a typedef of \s-1HE.\s0
These contain the actual key and value pointers (plus extra administrative
overhead).  The key is a string pointer; the value is an \f(CW\*(C`SV*\*(C'\fR.  However,
once you have an \f(CW\*(C`HE*\*(C'\fR, to get the actual key and value, use the routines
specified below.
.PP
.Vb 10
\&    I32    hv_iterinit(HV*);
\&            /* Prepares starting point to traverse hash table */
\&    HE*    hv_iternext(HV*);
\&            /* Get the next entry, and return a pointer to a
\&               structure that has both the key and value */
\&    char*  hv_iterkey(HE* entry, I32* retlen);
\&            /* Get the key from an HE structure and also return
\&               the length of the key string */
\&    SV*    hv_iterval(HV*, HE* entry);
\&            /* Return an SV pointer to the value of the HE
\&               structure */
\&    SV*    hv_iternextsv(HV*, char** key, I32* retlen);
\&            /* This convenience routine combines hv_iternext,
\&               hv_iterkey, and hv_iterval.  The key and retlen
\&               arguments are return values for the key and its
\&               length.  The value is returned in the SV* argument */
.Ve
.PP
If you know the name of a hash variable, you can get a pointer to its \s-1HV\s0
by using the following:
.PP
.Vb 1
\&    HV*  get_hv("package::varname", 0);
.Ve
.PP
This returns \s-1NULL\s0 if the variable does not exist.
.PP
The hash algorithm is defined in the \f(CW\*(C`PERL_HASH\*(C'\fR macro:
.PP
.Vb 1
\&    PERL_HASH(hash, key, klen)
.Ve
.PP
The exact implementation of this macro varies by architecture and version
of perl, and the return value may change per invocation, so the value
is only valid for the duration of a single perl process.
.PP
See \*(L"Understanding the Magic of Tied Hashes and Arrays\*(R" for more
information on how to use the hash access functions on tied hashes.
.SS "Hash \s-1API\s0 Extensions"
.IX Subsection "Hash API Extensions"
Beginning with version 5.004, the following functions are also supported:
.PP
.Vb 2
\&    HE*     hv_fetch_ent  (HV* tb, SV* key, I32 lval, U32 hash);
\&    HE*     hv_store_ent  (HV* tb, SV* key, SV* val, U32 hash);
\&
\&    bool    hv_exists_ent (HV* tb, SV* key, U32 hash);
\&    SV*     hv_delete_ent (HV* tb, SV* key, I32 flags, U32 hash);
\&
\&    SV*     hv_iterkeysv  (HE* entry);
.Ve
.PP
Note that these functions take \f(CW\*(C`SV*\*(C'\fR keys, which simplifies writing
of extension code that deals with hash structures.  These functions
also allow passing of \f(CW\*(C`SV*\*(C'\fR keys to \f(CW\*(C`tie\*(C'\fR functions without forcing
you to stringify the keys (unlike the previous set of functions).
.PP
They also return and accept whole hash entries (\f(CW\*(C`HE*\*(C'\fR), making their
use more efficient (since the hash number for a particular string
doesn't have to be recomputed every time).  See perlapi for detailed
descriptions.
.PP
The following macros must always be used to access the contents of hash
entries.  Note that the arguments to these macros must be simple
variables, since they may get evaluated more than once.  See
perlapi for detailed descriptions of these macros.
.PP
.Vb 6
\&    HePV(HE* he, STRLEN len)
\&    HeVAL(HE* he)
\&    HeHASH(HE* he)
\&    HeSVKEY(HE* he)
\&    HeSVKEY_force(HE* he)
\&    HeSVKEY_set(HE* he, SV* sv)
.Ve
.PP
These two lower level macros are defined, but must only be used when
dealing with keys that are not \f(CW\*(C`SV*\*(C'\fRs:
.PP
.Vb 2
\&    HeKEY(HE* he)
\&    HeKLEN(HE* he)
.Ve
.PP
Note that both \f(CW\*(C`hv_store\*(C'\fR and \f(CW\*(C`hv_store_ent\*(C'\fR do not increment the
reference count of the stored \f(CW\*(C`val\*(C'\fR, which is the caller's responsibility.
If these functions return a \s-1NULL\s0 value, the caller will usually have to
decrement the reference count of \f(CW\*(C`val\*(C'\fR to avoid a memory leak.
.SS "AVs, HVs and undefined values"
.IX Subsection "AVs, HVs and undefined values"
Sometimes you have to store undefined values in AVs or HVs. Although
this may be a rare case, it can be tricky. That's because you're
used to using \f(CW&PL_sv_undef\fR if you need an undefined \s-1SV.\s0
.PP
For example, intuition tells you that this \s-1XS\s0 code:
.PP
.Vb 2
\&    AV *av = newAV();
\&    av_store( av, 0, &PL_sv_undef );
.Ve
.PP
is equivalent to this Perl code:
.PP
.Vb 2
\&    my @av;
\&    $av[0] = undef;
.Ve
.PP
Unfortunately, this isn't true. AVs use \f(CW&PL_sv_undef\fR as a marker
for indicating that an array element has not yet been initialized.
Thus, \f(CW\*(C`exists $av[0]\*(C'\fR would be true for the above Perl code, but
false for the array generated by the \s-1XS\s0 code.
.PP
Other problems can occur when storing \f(CW&PL_sv_undef\fR in HVs:
.PP
.Vb 1
\&    hv_store( hv, "key", 3, &PL_sv_undef, 0 );
.Ve
.PP
This will indeed make the value \f(CW\*(C`undef\*(C'\fR, but if you try to modify
the value of \f(CW\*(C`key\*(C'\fR, you'll get the following error:
.PP
.Vb 1
\&    Modification of non\-creatable hash value attempted
.Ve
.PP
In perl 5.8.0, \f(CW&PL_sv_undef\fR was also used to mark placeholders
in restricted hashes. This caused such hash entries not to appear
when iterating over the hash or when checking for the keys
with the \f(CW\*(C`hv_exists\*(C'\fR function.
.PP
You can run into similar problems when you store \f(CW&PL_sv_yes\fR or
\&\f(CW&PL_sv_no\fR into AVs or HVs. Trying to modify such elements
will give you the following error:
.PP
.Vb 1
\&    Modification of a read\-only value attempted
.Ve
.PP
To make a long story short, you can use the special variables
\&\f(CW&PL_sv_undef\fR, \f(CW&PL_sv_yes\fR and \f(CW&PL_sv_no\fR with AVs and
HVs, but you have to make sure you know what you're doing.
.PP
Generally, if you want to store an undefined value in an \s-1AV\s0
or \s-1HV,\s0 you should not use \f(CW&PL_sv_undef\fR, but rather create a
new undefined value using the \f(CW\*(C`newSV\*(C'\fR function, for example:
.PP
.Vb 2
\&    av_store( av, 42, newSV(0) );
\&    hv_store( hv, "foo", 3, newSV(0), 0 );
.Ve
.SS "References"
.IX Subsection "References"
References are a special type of scalar that point to other data types
(including other references).
.PP
To create a reference, use either of the following functions:
.PP
.Vb 2
\&    SV* newRV_inc((SV*) thing);
\&    SV* newRV_noinc((SV*) thing);
.Ve
.PP
The \f(CW\*(C`thing\*(C'\fR argument can be any of an \f(CW\*(C`SV*\*(C'\fR, \f(CW\*(C`AV*\*(C'\fR, or \f(CW\*(C`HV*\*(C'\fR.  The
functions are identical except that \f(CW\*(C`newRV_inc\*(C'\fR increments the reference
count of the \f(CW\*(C`thing\*(C'\fR, while \f(CW\*(C`newRV_noinc\*(C'\fR does not.  For historical
reasons, \f(CW\*(C`newRV\*(C'\fR is a synonym for \f(CW\*(C`newRV_inc\*(C'\fR.
.PP
Once you have a reference, you can use the following macro to dereference
the reference:
.PP
.Vb 1
\&    SvRV(SV*)
.Ve
.PP
then call the appropriate routines, casting the returned \f(CW\*(C`SV*\*(C'\fR to either an
\&\f(CW\*(C`AV*\*(C'\fR or \f(CW\*(C`HV*\*(C'\fR, if required.
.PP
To determine if an \s-1SV\s0 is a reference, you can use the following macro:
.PP
.Vb 1
\&    SvROK(SV*)
.Ve
.PP
To discover what type of value the reference refers to, use the following
macro and then check the return value.
.PP
.Vb 1
\&    SvTYPE(SvRV(SV*))
.Ve
.PP
The most useful types that will be returned are:
.PP
.Vb 5
\&    < SVt_PVAV  Scalar
\&    SVt_PVAV    Array
\&    SVt_PVHV    Hash
\&    SVt_PVCV    Code
\&    SVt_PVGV    Glob (possibly a file handle)
.Ve
.PP
See \*(L"svtype\*(R" in perlapi for more details.
.SS "Blessed References and Class Objects"
.IX Subsection "Blessed References and Class Objects"
References are also used to support object-oriented programming.  In perl's
\&\s-1OO\s0 lexicon, an object is simply a reference that has been blessed into a
package (or class).  Once blessed, the programmer may now use the reference
to access the various methods in the class.
.PP
A reference can be blessed into a package with the following function:
.PP
.Vb 1
\&    SV* sv_bless(SV* sv, HV* stash);
.Ve
.PP
The \f(CW\*(C`sv\*(C'\fR argument must be a reference value.  The \f(CW\*(C`stash\*(C'\fR argument
specifies which class the reference will belong to.  See
\&\*(L"Stashes and Globs\*(R" for information on converting class names into stashes.
.PP
/* Still under construction */
.PP
The following function upgrades rv to reference if not already one.
Creates a new \s-1SV\s0 for rv to point to.  If \f(CW\*(C`classname\*(C'\fR is non-null, the \s-1SV\s0
is blessed into the specified class.  \s-1SV\s0 is returned.
.PP
.Vb 1
\&        SV* newSVrv(SV* rv, const char* classname);
.Ve
.PP
The following three functions copy integer, unsigned integer or double
into an \s-1SV\s0 whose reference is \f(CW\*(C`rv\*(C'\fR.  \s-1SV\s0 is blessed if \f(CW\*(C`classname\*(C'\fR is
non-null.
.PP
.Vb 3
\&        SV* sv_setref_iv(SV* rv, const char* classname, IV iv);
\&        SV* sv_setref_uv(SV* rv, const char* classname, UV uv);
\&        SV* sv_setref_nv(SV* rv, const char* classname, NV iv);
.Ve
.PP
The following function copies the pointer value (\fIthe address, not the
string!\fR) into an \s-1SV\s0 whose reference is rv.  \s-1SV\s0 is blessed if \f(CW\*(C`classname\*(C'\fR
is non-null.
.PP
.Vb 1
\&        SV* sv_setref_pv(SV* rv, const char* classname, void* pv);
.Ve
.PP
The following function copies a string into an \s-1SV\s0 whose reference is \f(CW\*(C`rv\*(C'\fR.
Set length to 0 to let Perl calculate the string length.  \s-1SV\s0 is blessed if
\&\f(CW\*(C`classname\*(C'\fR is non-null.
.PP
.Vb 2
\&    SV* sv_setref_pvn(SV* rv, const char* classname, char* pv,
\&                                                         STRLEN length);
.Ve
.PP
The following function tests whether the \s-1SV\s0 is blessed into the specified
class.  It does not check inheritance relationships.
.PP
.Vb 1
\&        int  sv_isa(SV* sv, const char* name);
.Ve
.PP
The following function tests whether the \s-1SV\s0 is a reference to a blessed object.
.PP
.Vb 1
\&        int  sv_isobject(SV* sv);
.Ve
.PP
The following function tests whether the \s-1SV\s0 is derived from the specified
class. \s-1SV\s0 can be either a reference to a blessed object or a string
containing a class name. This is the function implementing the
\&\f(CW\*(C`UNIVERSAL::isa\*(C'\fR functionality.
.PP
.Vb 1
\&        bool sv_derived_from(SV* sv, const char* name);
.Ve
.PP
To check if you've got an object derived from a specific class you have
to write:
.PP
.Vb 1
\&        if (sv_isobject(sv) && sv_derived_from(sv, class)) { ... }
.Ve
.SS "Creating New Variables"
.IX Subsection "Creating New Variables"
To create a new Perl variable with an undef value which can be accessed from
your Perl script, use the following routines, depending on the variable type.
.PP
.Vb 3
\&    SV*  get_sv("package::varname", GV_ADD);
\&    AV*  get_av("package::varname", GV_ADD);
\&    HV*  get_hv("package::varname", GV_ADD);
.Ve
.PP
Notice the use of \s-1GV_ADD\s0 as the second parameter.  The new variable can now
be set, using the routines appropriate to the data type.
.PP
There are additional macros whose values may be bitwise \s-1OR\s0'ed with the
\&\f(CW\*(C`GV_ADD\*(C'\fR argument to enable certain extra features.  Those bits are:
.IP "\s-1GV_ADDMULTI\s0" 4
.IX Item "GV_ADDMULTI"
Marks the variable as multiply defined, thus preventing the:
.Sp
.Vb 1
\&  Name <varname> used only once: possible typo
.Ve
.Sp
warning.
.IP "\s-1GV_ADDWARN\s0" 4
.IX Item "GV_ADDWARN"
Issues the warning:
.Sp
.Vb 1
\&  Had to create <varname> unexpectedly
.Ve
.Sp
if the variable did not exist before the function was called.
.PP
If you do not specify a package name, the variable is created in the current
package.
.SS "Reference Counts and Mortality"
.IX Subsection "Reference Counts and Mortality"
Perl uses a reference count-driven garbage collection mechanism. SVs,
AVs, or HVs (xV for short in the following) start their life with a
reference count of 1.  If the reference count of an xV ever drops to 0,
then it will be destroyed and its memory made available for reuse.
.PP
This normally doesn't happen at the Perl level unless a variable is
undef'ed or the last variable holding a reference to it is changed or
overwritten.  At the internal level, however, reference counts can be
manipulated with the following macros:
.PP
.Vb 3
\&    int SvREFCNT(SV* sv);
\&    SV* SvREFCNT_inc(SV* sv);
\&    void SvREFCNT_dec(SV* sv);
.Ve
.PP
However, there is one other function which manipulates the reference
count of its argument.  The \f(CW\*(C`newRV_inc\*(C'\fR function, you will recall,
creates a reference to the specified argument.  As a side effect,
it increments the argument's reference count.  If this is not what
you want, use \f(CW\*(C`newRV_noinc\*(C'\fR instead.
.PP
For example, imagine you want to return a reference from an \s-1XSUB\s0 function.
Inside the \s-1XSUB\s0 routine, you create an \s-1SV\s0 which initially has a reference
count of one.  Then you call \f(CW\*(C`newRV_inc\*(C'\fR, passing it the just-created \s-1SV.\s0
This returns the reference as a new \s-1SV,\s0 but the reference count of the
\&\s-1SV\s0 you passed to \f(CW\*(C`newRV_inc\*(C'\fR has been incremented to two.  Now you
return the reference from the \s-1XSUB\s0 routine and forget about the \s-1SV.\s0
But Perl hasn't!  Whenever the returned reference is destroyed, the
reference count of the original \s-1SV\s0 is decreased to one and nothing happens.
The \s-1SV\s0 will hang around without any way to access it until Perl itself
terminates.  This is a memory leak.
.PP
The correct procedure, then, is to use \f(CW\*(C`newRV_noinc\*(C'\fR instead of
\&\f(CW\*(C`newRV_inc\*(C'\fR.  Then, if and when the last reference is destroyed,
the reference count of the \s-1SV\s0 will go to zero and it will be destroyed,
stopping any memory leak.
.PP
There are some convenience functions available that can help with the
destruction of xVs.  These functions introduce the concept of \*(L"mortality\*(R".
An xV that is mortal has had its reference count marked to be decremented,
but not actually decremented, until \*(L"a short time later\*(R".  Generally the
term \*(L"short time later\*(R" means a single Perl statement, such as a call to
an \s-1XSUB\s0 function.  The actual determinant for when mortal xVs have their
reference count decremented depends on two macros, \s-1SAVETMPS\s0 and \s-1FREETMPS.\s0
See perlcall and perlxs for more details on these macros.
.PP
\&\*(L"Mortalization\*(R" then is at its simplest a deferred \f(CW\*(C`SvREFCNT_dec\*(C'\fR.
However, if you mortalize a variable twice, the reference count will
later be decremented twice.
.PP
\&\*(L"Mortal\*(R" SVs are mainly used for SVs that are placed on perl's stack.
For example an \s-1SV\s0 which is created just to pass a number to a called sub
is made mortal to have it cleaned up automatically when it's popped off
the stack. Similarly, results returned by XSUBs (which are pushed on the
stack) are often made mortal.
.PP
To create a mortal variable, use the functions:
.PP
.Vb 3
\&    SV*  sv_newmortal()
\&    SV*  sv_2mortal(SV*)
\&    SV*  sv_mortalcopy(SV*)
.Ve
.PP
The first call creates a mortal \s-1SV \s0(with no value), the second converts an existing
\&\s-1SV\s0 to a mortal \s-1SV \s0(and thus defers a call to \f(CW\*(C`SvREFCNT_dec\*(C'\fR), and the
third creates a mortal copy of an existing \s-1SV.\s0
Because \f(CW\*(C`sv_newmortal\*(C'\fR gives the new \s-1SV\s0 no value, it must normally be given one
via \f(CW\*(C`sv_setpv\*(C'\fR, \f(CW\*(C`sv_setiv\*(C'\fR, etc. :
.PP
.Vb 2
\&    SV *tmp = sv_newmortal();
\&    sv_setiv(tmp, an_integer);
.Ve
.PP
As that is multiple C statements it is quite common so see this idiom instead:
.PP
.Vb 1
\&    SV *tmp = sv_2mortal(newSViv(an_integer));
.Ve
.PP
You should be careful about creating mortal variables.  Strange things
can happen if you make the same value mortal within multiple contexts,
or if you make a variable mortal multiple times. Thinking of \*(L"Mortalization\*(R"
as deferred \f(CW\*(C`SvREFCNT_dec\*(C'\fR should help to minimize such problems.
For example if you are passing an \s-1SV\s0 which you \fIknow\fR has a high enough \s-1REFCNT\s0
to survive its use on the stack you need not do any mortalization.
If you are not sure then doing an \f(CW\*(C`SvREFCNT_inc\*(C'\fR and \f(CW\*(C`sv_2mortal\*(C'\fR, or
making a \f(CW\*(C`sv_mortalcopy\*(C'\fR is safer.
.PP
The mortal routines are not just for SVs; AVs and HVs can be
made mortal by passing their address (type-casted to \f(CW\*(C`SV*\*(C'\fR) to the
\&\f(CW\*(C`sv_2mortal\*(C'\fR or \f(CW\*(C`sv_mortalcopy\*(C'\fR routines.
.SS "Stashes and Globs"
.IX Subsection "Stashes and Globs"
A \fBstash\fR is a hash that contains all variables that are defined
within a package.  Each key of the stash is a symbol
name (shared by all the different types of objects that have the same
name), and each value in the hash table is a \s-1GV \s0(Glob Value).  This \s-1GV\s0
in turn contains references to the various objects of that name,
including (but not limited to) the following:
.PP
.Vb 6
\&    Scalar Value
\&    Array Value
\&    Hash Value
\&    I/O Handle
\&    Format
\&    Subroutine
.Ve
.PP
There is a single stash called \f(CW\*(C`PL_defstash\*(C'\fR that holds the items that exist
in the \f(CW\*(C`main\*(C'\fR package.  To get at the items in other packages, append the
string \*(L"::\*(R" to the package name.  The items in the \f(CW\*(C`Foo\*(C'\fR package are in
the stash \f(CW\*(C`Foo::\*(C'\fR in PL_defstash.  The items in the \f(CW\*(C`Bar::Baz\*(C'\fR package are
in the stash \f(CW\*(C`Baz::\*(C'\fR in \f(CW\*(C`Bar::\*(C'\fR's stash.
.PP
To get the stash pointer for a particular package, use the function:
.PP
.Vb 2
\&    HV*  gv_stashpv(const char* name, I32 flags)
\&    HV*  gv_stashsv(SV*, I32 flags)
.Ve
.PP
The first function takes a literal string, the second uses the string stored
in the \s-1SV. \s0 Remember that a stash is just a hash table, so you get back an
\&\f(CW\*(C`HV*\*(C'\fR.  The \f(CW\*(C`flags\*(C'\fR flag will create a new package if it is set to \s-1GV_ADD.\s0
.PP
The name that \f(CW\*(C`gv_stash*v\*(C'\fR wants is the name of the package whose symbol table
you want.  The default package is called \f(CW\*(C`main\*(C'\fR.  If you have multiply nested
packages, pass their names to \f(CW\*(C`gv_stash*v\*(C'\fR, separated by \f(CW\*(C`::\*(C'\fR as in the Perl
language itself.
.PP
Alternately, if you have an \s-1SV\s0 that is a blessed reference, you can find
out the stash pointer by using:
.PP
.Vb 1
\&    HV*  SvSTASH(SvRV(SV*));
.Ve
.PP
then use the following to get the package name itself:
.PP
.Vb 1
\&    char*  HvNAME(HV* stash);
.Ve
.PP
If you need to bless or re-bless an object you can use the following
function:
.PP
.Vb 1
\&    SV*  sv_bless(SV*, HV* stash)
.Ve
.PP
where the first argument, an \f(CW\*(C`SV*\*(C'\fR, must be a reference, and the second
argument is a stash.  The returned \f(CW\*(C`SV*\*(C'\fR can now be used in the same way
as any other \s-1SV.\s0
.PP
For more information on references and blessings, consult perlref.
.SS "Double-Typed SVs"
.IX Subsection "Double-Typed SVs"
Scalar variables normally contain only one type of value, an integer,
double, pointer, or reference.  Perl will automatically convert the
actual scalar data from the stored type into the requested type.
.PP
Some scalar variables contain more than one type of scalar data.  For
example, the variable \f(CW$!\fR contains either the numeric value of \f(CW\*(C`errno\*(C'\fR
or its string equivalent from either \f(CW\*(C`strerror\*(C'\fR or \f(CW\*(C`sys_errlist[]\*(C'\fR.
.PP
To force multiple data values into an \s-1SV,\s0 you must do two things: use the
\&\f(CW\*(C`sv_set*v\*(C'\fR routines to add the additional scalar type, then set a flag
so that Perl will believe it contains more than one type of data.  The
four macros to set the flags are:
.PP
.Vb 4
\&        SvIOK_on
\&        SvNOK_on
\&        SvPOK_on
\&        SvROK_on
.Ve
.PP
The particular macro you must use depends on which \f(CW\*(C`sv_set*v\*(C'\fR routine
you called first.  This is because every \f(CW\*(C`sv_set*v\*(C'\fR routine turns on
only the bit for the particular type of data being set, and turns off
all the rest.
.PP
For example, to create a new Perl variable called \*(L"dberror\*(R" that contains
both the numeric and descriptive string error values, you could use the
following code:
.PP
.Vb 2
\&    extern int  dberror;
\&    extern char *dberror_list;
\&
\&    SV* sv = get_sv("dberror", GV_ADD);
\&    sv_setiv(sv, (IV) dberror);
\&    sv_setpv(sv, dberror_list[dberror]);
\&    SvIOK_on(sv);
.Ve
.PP
If the order of \f(CW\*(C`sv_setiv\*(C'\fR and \f(CW\*(C`sv_setpv\*(C'\fR had been reversed, then the
macro \f(CW\*(C`SvPOK_on\*(C'\fR would need to be called instead of \f(CW\*(C`SvIOK_on\*(C'\fR.
.SS "Magic Variables"
.IX Subsection "Magic Variables"
[This section still under construction.  Ignore everything here.  Post no
bills.  Everything not permitted is forbidden.]
.PP
Any \s-1SV\s0 may be magical, that is, it has special features that a normal
\&\s-1SV\s0 does not have.  These features are stored in the \s-1SV\s0 structure in a
linked list of \f(CW\*(C`struct magic\*(C'\fR's, typedef'ed to \f(CW\*(C`MAGIC\*(C'\fR.
.PP
.Vb 10
\&    struct magic {
\&        MAGIC*      mg_moremagic;
\&        MGVTBL*     mg_virtual;
\&        U16         mg_private;
\&        char        mg_type;
\&        U8          mg_flags;
\&        I32         mg_len;
\&        SV*         mg_obj;
\&        char*       mg_ptr;
\&    };
.Ve
.PP
Note this is current as of patchlevel 0, and could change at any time.
.SS "Assigning Magic"
.IX Subsection "Assigning Magic"
Perl adds magic to an \s-1SV\s0 using the sv_magic function:
.PP
.Vb 1
\&  void sv_magic(SV* sv, SV* obj, int how, const char* name, I32 namlen);
.Ve
.PP
The \f(CW\*(C`sv\*(C'\fR argument is a pointer to the \s-1SV\s0 that is to acquire a new magical
feature.
.PP
If \f(CW\*(C`sv\*(C'\fR is not already magical, Perl uses the \f(CW\*(C`SvUPGRADE\*(C'\fR macro to
convert \f(CW\*(C`sv\*(C'\fR to type \f(CW\*(C`SVt_PVMG\*(C'\fR. Perl then continues by adding new magic
to the beginning of the linked list of magical features.  Any prior entry
of the same type of magic is deleted.  Note that this can be overridden,
and multiple instances of the same type of magic can be associated with an
\&\s-1SV.\s0
.PP
The \f(CW\*(C`name\*(C'\fR and \f(CW\*(C`namlen\*(C'\fR arguments are used to associate a string with
the magic, typically the name of a variable. \f(CW\*(C`namlen\*(C'\fR is stored in the
\&\f(CW\*(C`mg_len\*(C'\fR field and if \f(CW\*(C`name\*(C'\fR is non-null then either a \f(CW\*(C`savepvn\*(C'\fR copy of
\&\f(CW\*(C`name\*(C'\fR or \f(CW\*(C`name\*(C'\fR itself is stored in the \f(CW\*(C`mg_ptr\*(C'\fR field, depending on
whether \f(CW\*(C`namlen\*(C'\fR is greater than zero or equal to zero respectively.  As a
special case, if \f(CW\*(C`(name && namlen == HEf_SVKEY)\*(C'\fR then \f(CW\*(C`name\*(C'\fR is assumed
to contain an \f(CW\*(C`SV*\*(C'\fR and is stored as-is with its \s-1REFCNT\s0 incremented.
.PP
The sv_magic function uses \f(CW\*(C`how\*(C'\fR to determine which, if any, predefined
\&\*(L"Magic Virtual Table\*(R" should be assigned to the \f(CW\*(C`mg_virtual\*(C'\fR field.
See the \*(L"Magic Virtual Tables\*(R" section below.  The \f(CW\*(C`how\*(C'\fR argument is also
stored in the \f(CW\*(C`mg_type\*(C'\fR field. The value of \f(CW\*(C`how\*(C'\fR should be chosen
from the set of macros \f(CW\*(C`PERL_MAGIC_foo\*(C'\fR found in \fIperl.h\fR. Note that before
these macros were added, Perl internals used to directly use character
literals, so you may occasionally come across old code or documentation
referring to 'U' magic rather than \f(CW\*(C`PERL_MAGIC_uvar\*(C'\fR for example.
.PP
The \f(CW\*(C`obj\*(C'\fR argument is stored in the \f(CW\*(C`mg_obj\*(C'\fR field of the \f(CW\*(C`MAGIC\*(C'\fR
structure.  If it is not the same as the \f(CW\*(C`sv\*(C'\fR argument, the reference
count of the \f(CW\*(C`obj\*(C'\fR object is incremented.  If it is the same, or if
the \f(CW\*(C`how\*(C'\fR argument is \f(CW\*(C`PERL_MAGIC_arylen\*(C'\fR, or if it is a \s-1NULL\s0 pointer,
then \f(CW\*(C`obj\*(C'\fR is merely stored, without the reference count being incremented.
.PP
See also \f(CW\*(C`sv_magicext\*(C'\fR in perlapi for a more flexible way to add magic
to an \s-1SV.\s0
.PP
There is also a function to add magic to an \f(CW\*(C`HV\*(C'\fR:
.PP
.Vb 1
\&    void hv_magic(HV *hv, GV *gv, int how);
.Ve
.PP
This simply calls \f(CW\*(C`sv_magic\*(C'\fR and coerces the \f(CW\*(C`gv\*(C'\fR argument into an \f(CW\*(C`SV\*(C'\fR.
.PP
To remove the magic from an \s-1SV,\s0 call the function sv_unmagic:
.PP
.Vb 1
\&    int sv_unmagic(SV *sv, int type);
.Ve
.PP
The \f(CW\*(C`type\*(C'\fR argument should be equal to the \f(CW\*(C`how\*(C'\fR value when the \f(CW\*(C`SV\*(C'\fR
was initially made magical.
.PP
However, note that \f(CW\*(C`sv_unmagic\*(C'\fR removes all magic of a certain \f(CW\*(C`type\*(C'\fR from the
\&\f(CW\*(C`SV\*(C'\fR. If you want to remove only certain magic of a \f(CW\*(C`type\*(C'\fR based on the magic
virtual table, use \f(CW\*(C`sv_unmagicext\*(C'\fR instead:
.PP
.Vb 1
\&    int sv_unmagicext(SV *sv, int type, MGVTBL *vtbl);
.Ve
.SS "Magic Virtual Tables"
.IX Subsection "Magic Virtual Tables"
The \f(CW\*(C`mg_virtual\*(C'\fR field in the \f(CW\*(C`MAGIC\*(C'\fR structure is a pointer to an
\&\f(CW\*(C`MGVTBL\*(C'\fR, which is a structure of function pointers and stands for
\&\*(L"Magic Virtual Table\*(R" to handle the various operations that might be
applied to that variable.
.PP
The \f(CW\*(C`MGVTBL\*(C'\fR has five (or sometimes eight) pointers to the following
routine types:
.PP
.Vb 5
\&    int  (*svt_get)(SV* sv, MAGIC* mg);
\&    int  (*svt_set)(SV* sv, MAGIC* mg);
\&    U32  (*svt_len)(SV* sv, MAGIC* mg);
\&    int  (*svt_clear)(SV* sv, MAGIC* mg);
\&    int  (*svt_free)(SV* sv, MAGIC* mg);
\&
\&    int  (*svt_copy)(SV *sv, MAGIC* mg, SV *nsv,
\&                                          const char *name, I32 namlen);
\&    int  (*svt_dup)(MAGIC *mg, CLONE_PARAMS *param);
\&    int  (*svt_local)(SV *nsv, MAGIC *mg);
.Ve
.PP
This \s-1MGVTBL\s0 structure is set at compile-time in \fIperl.h\fR and there are
currently 32 types.  These different structures contain pointers to various
routines that perform additional actions depending on which function is
being called.
.PP
.Vb 8
\&   Function pointer    Action taken
\&   \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-    \-\-\-\-\-\-\-\-\-\-\-\-
\&   svt_get             Do something before the value of the SV is
\&                       retrieved.
\&   svt_set             Do something after the SV is assigned a value.
\&   svt_len             Report on the SV\*(Aqs length.
\&   svt_clear           Clear something the SV represents.
\&   svt_free            Free any extra storage associated with the SV.
\&
\&   svt_copy            copy tied variable magic to a tied element
\&   svt_dup             duplicate a magic structure during thread cloning
\&   svt_local           copy magic to local value during \*(Aqlocal\*(Aq
.Ve
.PP
For instance, the \s-1MGVTBL\s0 structure called \f(CW\*(C`vtbl_sv\*(C'\fR (which corresponds
to an \f(CW\*(C`mg_type\*(C'\fR of \f(CW\*(C`PERL_MAGIC_sv\*(C'\fR) contains:
.PP
.Vb 1
\&    { magic_get, magic_set, magic_len, 0, 0 }
.Ve
.PP
Thus, when an \s-1SV\s0 is determined to be magical and of type \f(CW\*(C`PERL_MAGIC_sv\*(C'\fR,
if a get operation is being performed, the routine \f(CW\*(C`magic_get\*(C'\fR is
called.  All the various routines for the various magical types begin
with \f(CW\*(C`magic_\*(C'\fR.  \s-1NOTE:\s0 the magic routines are not considered part of
the Perl \s-1API,\s0 and may not be exported by the Perl library.
.PP
The last three slots are a recent addition, and for source code
compatibility they are only checked for if one of the three flags
MGf_COPY, MGf_DUP or MGf_LOCAL is set in mg_flags. This means that most
code can continue declaring a vtable as a 5\-element value. These three are
currently used exclusively by the threading code, and are highly subject
to change.
.PP
The current kinds of Magic Virtual Tables are:
.PP
.Vb 10
\& mg_type
\& (old\-style char and macro)   MGVTBL         Type of magic
\& \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-   \-\-\-\-\-\-         \-\-\-\-\-\-\-\-\-\-\-\-\-
\& \e0 PERL_MAGIC_sv             vtbl_sv        Special scalar variable
\& #  PERL_MAGIC_arylen         vtbl_arylen    Array length ($#ary)
\& %  PERL_MAGIC_rhash          (none)         extra data for restricted
\&                                             hashes
\& &  PERL_MAGIC_proto          (none)         my sub prototype CV
\& .  PERL_MAGIC_pos            vtbl_pos       pos() lvalue
\& :  PERL_MAGIC_symtab         (none)         extra data for symbol
\&                                             tables
\& <  PERL_MAGIC_backref        vtbl_backref   for weak ref data
\& @  PERL_MAGIC_arylen_p       (none)         to move arylen out of XPVAV
\& B  PERL_MAGIC_bm             vtbl_regexp    Boyer\-Moore 
\&                                             (fast string search)
\& c  PERL_MAGIC_overload_table vtbl_ovrld     Holds overload table 
\&                                             (AMT) on stash
\& D  PERL_MAGIC_regdata        vtbl_regdata   Regex match position data 
\&                                             (@+ and @\- vars)
\& d  PERL_MAGIC_regdatum       vtbl_regdatum  Regex match position data
\&                                             element
\& E  PERL_MAGIC_env            vtbl_env       %ENV hash
\& e  PERL_MAGIC_envelem        vtbl_envelem   %ENV hash element
\& f  PERL_MAGIC_fm             vtbl_regexp    Formline 
\&                                             (\*(Aqcompiled\*(Aq format)
\& g  PERL_MAGIC_regex_global   vtbl_mglob     m//g target
\& H  PERL_MAGIC_hints          vtbl_hints     %^H hash
\& h  PERL_MAGIC_hintselem      vtbl_hintselem %^H hash element
\& I  PERL_MAGIC_isa            vtbl_isa       @ISA array
\& i  PERL_MAGIC_isaelem        vtbl_isaelem   @ISA array element
\& k  PERL_MAGIC_nkeys          vtbl_nkeys     scalar(keys()) lvalue
\& L  PERL_MAGIC_dbfile         (none)         Debugger %_<filename
\& l  PERL_MAGIC_dbline         vtbl_dbline    Debugger %_<filename
\&                                             element
\& N  PERL_MAGIC_shared         (none)         Shared between threads
\& n  PERL_MAGIC_shared_scalar  (none)         Shared between threads
\& o  PERL_MAGIC_collxfrm       vtbl_collxfrm  Locale transformation
\& P  PERL_MAGIC_tied           vtbl_pack      Tied array or hash
\& p  PERL_MAGIC_tiedelem       vtbl_packelem  Tied array or hash element
\& q  PERL_MAGIC_tiedscalar     vtbl_packelem  Tied scalar or handle
\& r  PERL_MAGIC_qr             vtbl_regexp    precompiled qr// regex
\& S  PERL_MAGIC_sig            (none)         %SIG hash
\& s  PERL_MAGIC_sigelem        vtbl_sigelem   %SIG hash element
\& t  PERL_MAGIC_taint          vtbl_taint     Taintedness
\& U  PERL_MAGIC_uvar           vtbl_uvar      Available for use by
\&                                             extensions
\& u  PERL_MAGIC_uvar_elem      (none)         Reserved for use by
\&                                             extensions
\& V  PERL_MAGIC_vstring        (none)         SV was vstring literal
\& v  PERL_MAGIC_vec            vtbl_vec       vec() lvalue
\& w  PERL_MAGIC_utf8           vtbl_utf8      Cached UTF\-8 information
\& x  PERL_MAGIC_substr         vtbl_substr    substr() lvalue
\& y  PERL_MAGIC_defelem        vtbl_defelem   Shadow "foreach" iterator
\&                                             variable / smart parameter
\&                                             vivification
\& ]  PERL_MAGIC_checkcall      vtbl_checkcall inlining/mutation of call
\&                                             to this CV
\& ~  PERL_MAGIC_ext            (none)         Available for use by
\&                                             extensions
.Ve
.PP
When an uppercase and lowercase letter both exist in the table, then the
uppercase letter is typically used to represent some kind of composite type
(a list or a hash), and the lowercase letter is used to represent an element
of that composite type. Some internals code makes use of this case
relationship.  However, 'v' and 'V' (vec and v\-string) are in no way related.
.PP
The \f(CW\*(C`PERL_MAGIC_ext\*(C'\fR and \f(CW\*(C`PERL_MAGIC_uvar\*(C'\fR magic types are defined
specifically for use by extensions and will not be used by perl itself.
Extensions can use \f(CW\*(C`PERL_MAGIC_ext\*(C'\fR magic to 'attach' private information
to variables (typically objects).  This is especially useful because
there is no way for normal perl code to corrupt this private information
(unlike using extra elements of a hash object).
.PP
Similarly, \f(CW\*(C`PERL_MAGIC_uvar\*(C'\fR magic can be used much like \fItie()\fR to call a
C function any time a scalar's value is used or changed.  The \f(CW\*(C`MAGIC\*(C'\fR's
\&\f(CW\*(C`mg_ptr\*(C'\fR field points to a \f(CW\*(C`ufuncs\*(C'\fR structure:
.PP
.Vb 5
\&    struct ufuncs {
\&        I32 (*uf_val)(pTHX_ IV, SV*);
\&        I32 (*uf_set)(pTHX_ IV, SV*);
\&        IV uf_index;
\&    };
.Ve
.PP
When the \s-1SV\s0 is read from or written to, the \f(CW\*(C`uf_val\*(C'\fR or \f(CW\*(C`uf_set\*(C'\fR
function will be called with \f(CW\*(C`uf_index\*(C'\fR as the first arg and a pointer to
the \s-1SV\s0 as the second.  A simple example of how to add \f(CW\*(C`PERL_MAGIC_uvar\*(C'\fR
magic is shown below.  Note that the ufuncs structure is copied by
sv_magic, so you can safely allocate it on the stack.
.PP
.Vb 10
\&    void
\&    Umagic(sv)
\&        SV *sv;
\&    PREINIT:
\&        struct ufuncs uf;
\&    CODE:
\&        uf.uf_val   = &my_get_fn;
\&        uf.uf_set   = &my_set_fn;
\&        uf.uf_index = 0;
\&        sv_magic(sv, 0, PERL_MAGIC_uvar, (char*)&uf, sizeof(uf));
.Ve
.PP
Attaching \f(CW\*(C`PERL_MAGIC_uvar\*(C'\fR to arrays is permissible but has no effect.
.PP
For hashes there is a specialized hook that gives control over hash
keys (but not values).  This hook calls \f(CW\*(C`PERL_MAGIC_uvar\*(C'\fR 'get' magic
if the \*(L"set\*(R" function in the \f(CW\*(C`ufuncs\*(C'\fR structure is \s-1NULL. \s0 The hook
is activated whenever the hash is accessed with a key specified as
an \f(CW\*(C`SV\*(C'\fR through the functions \f(CW\*(C`hv_store_ent\*(C'\fR, \f(CW\*(C`hv_fetch_ent\*(C'\fR,
\&\f(CW\*(C`hv_delete_ent\*(C'\fR, and \f(CW\*(C`hv_exists_ent\*(C'\fR.  Accessing the key as a string
through the functions without the \f(CW\*(C`..._ent\*(C'\fR suffix circumvents the
hook.  See \*(L"\s-1GUTS\*(R"\s0 in Hash::Util::FieldHash for a detailed description.
.PP
Note that because multiple extensions may be using \f(CW\*(C`PERL_MAGIC_ext\*(C'\fR
or \f(CW\*(C`PERL_MAGIC_uvar\*(C'\fR magic, it is important for extensions to take
extra care to avoid conflict.  Typically only using the magic on
objects blessed into the same class as the extension is sufficient.
For \f(CW\*(C`PERL_MAGIC_ext\*(C'\fR magic, it is usually a good idea to define an
\&\f(CW\*(C`MGVTBL\*(C'\fR, even if all its fields will be \f(CW0\fR, so that individual
\&\f(CW\*(C`MAGIC\*(C'\fR pointers can be identified as a particular kind of magic
using their magic virtual table. \f(CW\*(C`mg_findext\*(C'\fR provides an easy way
to do that:
.PP
.Vb 1
\&    STATIC MGVTBL my_vtbl = { 0, 0, 0, 0, 0, 0, 0, 0 };
\&
\&    MAGIC *mg;
\&    if ((mg = mg_findext(sv, PERL_MAGIC_ext, &my_vtbl))) {
\&        /* this is really ours, not another module\*(Aqs PERL_MAGIC_ext */
\&        my_priv_data_t *priv = (my_priv_data_t *)mg\->mg_ptr;
\&        ...
\&    }
.Ve
.PP
Also note that the \f(CW\*(C`sv_set*()\*(C'\fR and \f(CW\*(C`sv_cat*()\*(C'\fR functions described
earlier do \fBnot\fR invoke 'set' magic on their targets.  This must
be done by the user either by calling the \f(CW\*(C`SvSETMAGIC()\*(C'\fR macro after
calling these functions, or by using one of the \f(CW\*(C`sv_set*_mg()\*(C'\fR or
\&\f(CW\*(C`sv_cat*_mg()\*(C'\fR functions.  Similarly, generic C code must call the
\&\f(CW\*(C`SvGETMAGIC()\*(C'\fR macro to invoke any 'get' magic if they use an \s-1SV\s0
obtained from external sources in functions that don't handle magic.
See perlapi for a description of these functions.
For example, calls to the \f(CW\*(C`sv_cat*()\*(C'\fR functions typically need to be
followed by \f(CW\*(C`SvSETMAGIC()\*(C'\fR, but they don't need a prior \f(CW\*(C`SvGETMAGIC()\*(C'\fR
since their implementation handles 'get' magic.
.SS "Finding Magic"
.IX Subsection "Finding Magic"
.Vb 2
\&    MAGIC *mg_find(SV *sv, int type); /* Finds the magic pointer of that
\&                                       * type */
.Ve
.PP
This routine returns a pointer to a \f(CW\*(C`MAGIC\*(C'\fR structure stored in the \s-1SV.\s0
If the \s-1SV\s0 does not have that magical feature, \f(CW\*(C`NULL\*(C'\fR is returned. If the
\&\s-1SV\s0 has multiple instances of that magical feature, the first one will be
returned. \f(CW\*(C`mg_findext\*(C'\fR can be used to find a \f(CW\*(C`MAGIC\*(C'\fR structure of an \s-1SV\s0
based on both its magic type and its magic virtual table:
.PP
.Vb 1
\&    MAGIC *mg_findext(SV *sv, int type, MGVTBL *vtbl);
.Ve
.PP
Also, if the \s-1SV\s0 passed to \f(CW\*(C`mg_find\*(C'\fR or \f(CW\*(C`mg_findext\*(C'\fR is not of type
SVt_PVMG, Perl may core dump.
.PP
.Vb 1
\&    int mg_copy(SV* sv, SV* nsv, const char* key, STRLEN klen);
.Ve
.PP
This routine checks to see what types of magic \f(CW\*(C`sv\*(C'\fR has.  If the mg_type
field is an uppercase letter, then the mg_obj is copied to \f(CW\*(C`nsv\*(C'\fR, but
the mg_type field is changed to be the lowercase letter.
.SS "Understanding the Magic of Tied Hashes and Arrays"
.IX Subsection "Understanding the Magic of Tied Hashes and Arrays"
Tied hashes and arrays are magical beasts of the \f(CW\*(C`PERL_MAGIC_tied\*(C'\fR
magic type.
.PP
\&\s-1WARNING:\s0 As of the 5.004 release, proper usage of the array and hash
access functions requires understanding a few caveats.  Some
of these caveats are actually considered bugs in the \s-1API,\s0 to be fixed
in later releases, and are bracketed with [\s-1MAYCHANGE\s0] below. If
you find yourself actually applying such information in this section, be
aware that the behavior may change in the future, umm, without warning.
.PP
The perl tie function associates a variable with an object that implements
the various \s-1GET, SET,\s0 etc methods.  To perform the equivalent of the perl
tie function from an \s-1XSUB,\s0 you must mimic this behaviour.  The code below
carries out the necessary steps \- firstly it creates a new hash, and then
creates a second hash which it blesses into the class which will implement
the tie methods. Lastly it ties the two hashes together, and returns a
reference to the new tied hash.  Note that the code below does \s-1NOT\s0 call the
\&\s-1TIEHASH\s0 method in the MyTie class \-
see \*(L"Calling Perl Routines from within C Programs\*(R" for details on how
to do this.
.PP
.Vb 10
\&    SV*
\&    mytie()
\&    PREINIT:
\&        HV *hash;
\&        HV *stash;
\&        SV *tie;
\&    CODE:
\&        hash = newHV();
\&        tie = newRV_noinc((SV*)newHV());
\&        stash = gv_stashpv("MyTie", GV_ADD);
\&        sv_bless(tie, stash);
\&        hv_magic(hash, (GV*)tie, PERL_MAGIC_tied);
\&        RETVAL = newRV_noinc(hash);
\&    OUTPUT:
\&        RETVAL
.Ve
.PP
The \f(CW\*(C`av_store\*(C'\fR function, when given a tied array argument, merely
copies the magic of the array onto the value to be \*(L"stored\*(R", using
\&\f(CW\*(C`mg_copy\*(C'\fR.  It may also return \s-1NULL,\s0 indicating that the value did not
actually need to be stored in the array.  [\s-1MAYCHANGE\s0] After a call to
\&\f(CW\*(C`av_store\*(C'\fR on a tied array, the caller will usually need to call
\&\f(CW\*(C`mg_set(val)\*(C'\fR to actually invoke the perl level \*(L"\s-1STORE\*(R"\s0 method on the
\&\s-1TIEARRAY\s0 object.  If \f(CW\*(C`av_store\*(C'\fR did return \s-1NULL,\s0 a call to
\&\f(CW\*(C`SvREFCNT_dec(val)\*(C'\fR will also be usually necessary to avoid a memory
leak. [/MAYCHANGE]
.PP
The previous paragraph is applicable verbatim to tied hash access using the
\&\f(CW\*(C`hv_store\*(C'\fR and \f(CW\*(C`hv_store_ent\*(C'\fR functions as well.
.PP
\&\f(CW\*(C`av_fetch\*(C'\fR and the corresponding hash functions \f(CW\*(C`hv_fetch\*(C'\fR and
\&\f(CW\*(C`hv_fetch_ent\*(C'\fR actually return an undefined mortal value whose magic
has been initialized using \f(CW\*(C`mg_copy\*(C'\fR.  Note the value so returned does not
need to be deallocated, as it is already mortal.  [\s-1MAYCHANGE\s0] But you will
need to call \f(CW\*(C`mg_get()\*(C'\fR on the returned value in order to actually invoke
the perl level \*(L"\s-1FETCH\*(R"\s0 method on the underlying \s-1TIE\s0 object.  Similarly,
you may also call \f(CW\*(C`mg_set()\*(C'\fR on the return value after possibly assigning
a suitable value to it using \f(CW\*(C`sv_setsv\*(C'\fR,  which will invoke the \*(L"\s-1STORE\*(R"\s0
method on the \s-1TIE\s0 object. [/MAYCHANGE]
.PP
[\s-1MAYCHANGE\s0]
In other words, the array or hash fetch/store functions don't really
fetch and store actual values in the case of tied arrays and hashes.  They
merely call \f(CW\*(C`mg_copy\*(C'\fR to attach magic to the values that were meant to be
\&\*(L"stored\*(R" or \*(L"fetched\*(R".  Later calls to \f(CW\*(C`mg_get\*(C'\fR and \f(CW\*(C`mg_set\*(C'\fR actually
do the job of invoking the \s-1TIE\s0 methods on the underlying objects.  Thus
the magic mechanism currently implements a kind of lazy access to arrays
and hashes.
.PP
Currently (as of perl version 5.004), use of the hash and array access
functions requires the user to be aware of whether they are operating on
\&\*(L"normal\*(R" hashes and arrays, or on their tied variants.  The \s-1API\s0 may be
changed to provide more transparent access to both tied and normal data
types in future versions.
[/MAYCHANGE]
.PP
You would do well to understand that the \s-1TIEARRAY\s0 and \s-1TIEHASH\s0 interfaces
are mere sugar to invoke some perl method calls while using the uniform hash
and array syntax.  The use of this sugar imposes some overhead (typically
about two to four extra opcodes per \s-1FETCH/STORE\s0 operation, in addition to
the creation of all the mortal variables required to invoke the methods).
This overhead will be comparatively small if the \s-1TIE\s0 methods are themselves
substantial, but if they are only a few statements long, the overhead
will not be insignificant.
.SS "Localizing changes"
.IX Subsection "Localizing changes"
Perl has a very handy construction
.PP
.Vb 4
\&  {
\&    local $var = 2;
\&    ...
\&  }
.Ve
.PP
This construction is \fIapproximately\fR equivalent to
.PP
.Vb 6
\&  {
\&    my $oldvar = $var;
\&    $var = 2;
\&    ...
\&    $var = $oldvar;
\&  }
.Ve
.PP
The biggest difference is that the first construction would
reinstate the initial value of \f(CW$var\fR, irrespective of how control exits
the block: \f(CW\*(C`goto\*(C'\fR, \f(CW\*(C`return\*(C'\fR, \f(CW\*(C`die\*(C'\fR/\f(CW\*(C`eval\*(C'\fR, etc. It is a little bit
more efficient as well.
.PP
There is a way to achieve a similar task from C via Perl \s-1API:\s0 create a
\&\fIpseudo-block\fR, and arrange for some changes to be automatically
undone at the end of it, either explicit, or via a non-local exit (via
\&\fIdie()\fR). A \fIblock\fR\-like construct is created by a pair of
\&\f(CW\*(C`ENTER\*(C'\fR/\f(CW\*(C`LEAVE\*(C'\fR macros (see \*(L"Returning a Scalar\*(R" in perlcall).
Such a construct may be created specially for some important localized
task, or an existing one (like boundaries of enclosing Perl
subroutine/block, or an existing pair for freeing TMPs) may be
used. (In the second case the overhead of additional localization must
be almost negligible.) Note that any \s-1XSUB\s0 is automatically enclosed in
an \f(CW\*(C`ENTER\*(C'\fR/\f(CW\*(C`LEAVE\*(C'\fR pair.
.PP
Inside such a \fIpseudo-block\fR the following service is available:
.ie n .IP """SAVEINT(int i)""" 4
.el .IP "\f(CWSAVEINT(int i)\fR" 4
.IX Item "SAVEINT(int i)"
.PD 0
.ie n .IP """SAVEIV(IV i)""" 4
.el .IP "\f(CWSAVEIV(IV i)\fR" 4
.IX Item "SAVEIV(IV i)"
.ie n .IP """SAVEI32(I32 i)""" 4
.el .IP "\f(CWSAVEI32(I32 i)\fR" 4
.IX Item "SAVEI32(I32 i)"
.ie n .IP """SAVELONG(long i)""" 4
.el .IP "\f(CWSAVELONG(long i)\fR" 4
.IX Item "SAVELONG(long i)"
.PD
These macros arrange things to restore the value of integer variable
\&\f(CW\*(C`i\*(C'\fR at the end of enclosing \fIpseudo-block\fR.
.ie n .IP "SAVESPTR(s)" 4
.el .IP "\f(CWSAVESPTR(s)\fR" 4
.IX Item "SAVESPTR(s)"
.PD 0
.ie n .IP "SAVEPPTR(p)" 4
.el .IP "\f(CWSAVEPPTR(p)\fR" 4
.IX Item "SAVEPPTR(p)"
.PD
These macros arrange things to restore the value of pointers \f(CW\*(C`s\*(C'\fR and
\&\f(CW\*(C`p\*(C'\fR. \f(CW\*(C`s\*(C'\fR must be a pointer of a type which survives conversion to
\&\f(CW\*(C`SV*\*(C'\fR and back, \f(CW\*(C`p\*(C'\fR should be able to survive conversion to \f(CW\*(C`char*\*(C'\fR
and back.
.ie n .IP """SAVEFREESV(SV *sv)""" 4
.el .IP "\f(CWSAVEFREESV(SV *sv)\fR" 4
.IX Item "SAVEFREESV(SV *sv)"
The refcount of \f(CW\*(C`sv\*(C'\fR would be decremented at the end of
\&\fIpseudo-block\fR.  This is similar to \f(CW\*(C`sv_2mortal\*(C'\fR in that it is also a
mechanism for doing a delayed \f(CW\*(C`SvREFCNT_dec\*(C'\fR.  However, while \f(CW\*(C`sv_2mortal\*(C'\fR
extends the lifetime of \f(CW\*(C`sv\*(C'\fR until the beginning of the next statement,
\&\f(CW\*(C`SAVEFREESV\*(C'\fR extends it until the end of the enclosing scope.  These
lifetimes can be wildly different.
.Sp
Also compare \f(CW\*(C`SAVEMORTALIZESV\*(C'\fR.
.ie n .IP """SAVEMORTALIZESV(SV *sv)""" 4
.el .IP "\f(CWSAVEMORTALIZESV(SV *sv)\fR" 4
.IX Item "SAVEMORTALIZESV(SV *sv)"
Just like \f(CW\*(C`SAVEFREESV\*(C'\fR, but mortalizes \f(CW\*(C`sv\*(C'\fR at the end of the current
scope instead of decrementing its reference count.  This usually has the
effect of keeping \f(CW\*(C`sv\*(C'\fR alive until the statement that called the currently
live scope has finished executing.
.ie n .IP """SAVEFREEOP(OP *op)""" 4
.el .IP "\f(CWSAVEFREEOP(OP *op)\fR" 4
.IX Item "SAVEFREEOP(OP *op)"
The \f(CW\*(C`OP *\*(C'\fR is \fIop_free()\fRed at the end of \fIpseudo-block\fR.
.ie n .IP "SAVEFREEPV(p)" 4
.el .IP "\f(CWSAVEFREEPV(p)\fR" 4
.IX Item "SAVEFREEPV(p)"
The chunk of memory which is pointed to by \f(CW\*(C`p\*(C'\fR is \fISafefree()\fRed at the
end of \fIpseudo-block\fR.
.ie n .IP """SAVECLEARSV(SV *sv)""" 4
.el .IP "\f(CWSAVECLEARSV(SV *sv)\fR" 4
.IX Item "SAVECLEARSV(SV *sv)"
Clears a slot in the current scratchpad which corresponds to \f(CW\*(C`sv\*(C'\fR at
the end of \fIpseudo-block\fR.
.ie n .IP """SAVEDELETE(HV *hv, char *key, I32 length)""" 4
.el .IP "\f(CWSAVEDELETE(HV *hv, char *key, I32 length)\fR" 4
.IX Item "SAVEDELETE(HV *hv, char *key, I32 length)"
The key \f(CW\*(C`key\*(C'\fR of \f(CW\*(C`hv\*(C'\fR is deleted at the end of \fIpseudo-block\fR. The
string pointed to by \f(CW\*(C`key\*(C'\fR is \fISafefree()\fRed.  If one has a \fIkey\fR in
short-lived storage, the corresponding string may be reallocated like
this:
.Sp
.Vb 1
\&  SAVEDELETE(PL_defstash, savepv(tmpbuf), strlen(tmpbuf));
.Ve
.ie n .IP """SAVEDESTRUCTOR(DESTRUCTORFUNC_NOCONTEXT_t f, void *p)""" 4
.el .IP "\f(CWSAVEDESTRUCTOR(DESTRUCTORFUNC_NOCONTEXT_t f, void *p)\fR" 4
.IX Item "SAVEDESTRUCTOR(DESTRUCTORFUNC_NOCONTEXT_t f, void *p)"
At the end of \fIpseudo-block\fR the function \f(CW\*(C`f\*(C'\fR is called with the
only argument \f(CW\*(C`p\*(C'\fR.
.ie n .IP """SAVEDESTRUCTOR_X(DESTRUCTORFUNC_t f, void *p)""" 4
.el .IP "\f(CWSAVEDESTRUCTOR_X(DESTRUCTORFUNC_t f, void *p)\fR" 4
.IX Item "SAVEDESTRUCTOR_X(DESTRUCTORFUNC_t f, void *p)"
At the end of \fIpseudo-block\fR the function \f(CW\*(C`f\*(C'\fR is called with the
implicit context argument (if any), and \f(CW\*(C`p\*(C'\fR.
.ie n .IP """SAVESTACK_POS()""" 4
.el .IP "\f(CWSAVESTACK_POS()\fR" 4
.IX Item "SAVESTACK_POS()"
The current offset on the Perl internal stack (cf. \f(CW\*(C`SP\*(C'\fR) is restored
at the end of \fIpseudo-block\fR.
.PP
The following \s-1API\s0 list contains functions, thus one needs to
provide pointers to the modifiable data explicitly (either C pointers,
or Perlish \f(CW\*(C`GV *\*(C'\fRs).  Where the above macros take \f(CW\*(C`int\*(C'\fR, a similar
function takes \f(CW\*(C`int *\*(C'\fR.
.ie n .IP """SV* save_scalar(GV *gv)""" 4
.el .IP "\f(CWSV* save_scalar(GV *gv)\fR" 4
.IX Item "SV* save_scalar(GV *gv)"
Equivalent to Perl code \f(CW\*(C`local $gv\*(C'\fR.
.ie n .IP """AV* save_ary(GV *gv)""" 4
.el .IP "\f(CWAV* save_ary(GV *gv)\fR" 4
.IX Item "AV* save_ary(GV *gv)"
.PD 0
.ie n .IP """HV* save_hash(GV *gv)""" 4
.el .IP "\f(CWHV* save_hash(GV *gv)\fR" 4
.IX Item "HV* save_hash(GV *gv)"
.PD
Similar to \f(CW\*(C`save_scalar\*(C'\fR, but localize \f(CW@gv\fR and \f(CW%gv\fR.
.ie n .IP """void save_item(SV *item)""" 4
.el .IP "\f(CWvoid save_item(SV *item)\fR" 4
.IX Item "void save_item(SV *item)"
Duplicates the current value of \f(CW\*(C`SV\*(C'\fR, on the exit from the current
\&\f(CW\*(C`ENTER\*(C'\fR/\f(CW\*(C`LEAVE\*(C'\fR \fIpseudo-block\fR will restore the value of \f(CW\*(C`SV\*(C'\fR
using the stored value. It doesn't handle magic. Use \f(CW\*(C`save_scalar\*(C'\fR if
magic is affected.
.ie n .IP """void save_list(SV **sarg, I32 maxsarg)""" 4
.el .IP "\f(CWvoid save_list(SV **sarg, I32 maxsarg)\fR" 4
.IX Item "void save_list(SV **sarg, I32 maxsarg)"
A variant of \f(CW\*(C`save_item\*(C'\fR which takes multiple arguments via an array
\&\f(CW\*(C`sarg\*(C'\fR of \f(CW\*(C`SV*\*(C'\fR of length \f(CW\*(C`maxsarg\*(C'\fR.
.ie n .IP """SV* save_svref(SV **sptr)""" 4
.el .IP "\f(CWSV* save_svref(SV **sptr)\fR" 4
.IX Item "SV* save_svref(SV **sptr)"
Similar to \f(CW\*(C`save_scalar\*(C'\fR, but will reinstate an \f(CW\*(C`SV *\*(C'\fR.
.ie n .IP """void save_aptr(AV **aptr)""" 4
.el .IP "\f(CWvoid save_aptr(AV **aptr)\fR" 4
.IX Item "void save_aptr(AV **aptr)"
.PD 0
.ie n .IP """void save_hptr(HV **hptr)""" 4
.el .IP "\f(CWvoid save_hptr(HV **hptr)\fR" 4
.IX Item "void save_hptr(HV **hptr)"
.PD
Similar to \f(CW\*(C`save_svref\*(C'\fR, but localize \f(CW\*(C`AV *\*(C'\fR and \f(CW\*(C`HV *\*(C'\fR.
.PP
The \f(CW\*(C`Alias\*(C'\fR module implements localization of the basic types within the
\&\fIcaller's scope\fR.  People who are interested in how to localize things in
the containing scope should take a look there too.
.SH "Subroutines"
.IX Header "Subroutines"
.SS "XSUBs and the Argument Stack"
.IX Subsection "XSUBs and the Argument Stack"
The \s-1XSUB\s0 mechanism is a simple way for Perl programs to access C subroutines.
An \s-1XSUB\s0 routine will have a stack that contains the arguments from the Perl
program, and a way to map from the Perl data structures to a C equivalent.
.PP
The stack arguments are accessible through the \f(CWST(n)\fR macro, which returns
the \f(CW\*(C`n\*(C'\fR'th stack argument.  Argument 0 is the first argument passed in the
Perl subroutine call.  These arguments are \f(CW\*(C`SV*\*(C'\fR, and can be used anywhere
an \f(CW\*(C`SV*\*(C'\fR is used.
.PP
Most of the time, output from the C routine can be handled through use of
the \s-1RETVAL\s0 and \s-1OUTPUT\s0 directives.  However, there are some cases where the
argument stack is not already long enough to handle all the return values.
An example is the \s-1POSIX\s0 \fItzname()\fR call, which takes no arguments, but returns
two, the local time zone's standard and summer time abbreviations.
.PP
To handle this situation, the \s-1PPCODE\s0 directive is used and the stack is
extended using the macro:
.PP
.Vb 1
\&    EXTEND(SP, num);
.Ve
.PP
where \f(CW\*(C`SP\*(C'\fR is the macro that represents the local copy of the stack pointer,
and \f(CW\*(C`num\*(C'\fR is the number of elements the stack should be extended by.
.PP
Now that there is room on the stack, values can be pushed on it using \f(CW\*(C`PUSHs\*(C'\fR
macro. The pushed values will often need to be \*(L"mortal\*(R" (See
\&\*(L"Reference Counts and Mortality\*(R"):
.PP
.Vb 7
\&    PUSHs(sv_2mortal(newSViv(an_integer)))
\&    PUSHs(sv_2mortal(newSVuv(an_unsigned_integer)))
\&    PUSHs(sv_2mortal(newSVnv(a_double)))
\&    PUSHs(sv_2mortal(newSVpv("Some String",0)))
\&    /* Although the last example is better written as the more
\&     * efficient: */
\&    PUSHs(newSVpvs_flags("Some String", SVs_TEMP))
.Ve
.PP
And now the Perl program calling \f(CW\*(C`tzname\*(C'\fR, the two values will be assigned
as in:
.PP
.Vb 1
\&    ($standard_abbrev, $summer_abbrev) = POSIX::tzname;
.Ve
.PP
An alternate (and possibly simpler) method to pushing values on the stack is
to use the macro:
.PP
.Vb 1
\&    XPUSHs(SV*)
.Ve
.PP
This macro automatically adjusts the stack for you, if needed.  Thus, you
do not need to call \f(CW\*(C`EXTEND\*(C'\fR to extend the stack.
.PP
Despite their suggestions in earlier versions of this document the macros
\&\f(CW\*(C`(X)PUSH[iunp]\*(C'\fR are \fInot\fR suited to XSUBs which return multiple results.
For that, either stick to the \f(CW\*(C`(X)PUSHs\*(C'\fR macros shown above, or use the new
\&\f(CW\*(C`m(X)PUSH[iunp]\*(C'\fR macros instead; see \*(L"Putting a C value on Perl stack\*(R".
.PP
For more information, consult perlxs and perlxstut.
.SS "Autoloading with XSUBs"
.IX Subsection "Autoloading with XSUBs"
If an \s-1AUTOLOAD\s0 routine is an \s-1XSUB,\s0 as with Perl subroutines, Perl puts the
fully-qualified name of the autoloaded subroutine in the \f(CW$AUTOLOAD\fR variable
of the \s-1XSUB\s0's package.
.PP
But it also puts the same information in certain fields of the \s-1XSUB\s0 itself:
.PP
.Vb 4
\&    HV *stash           = CvSTASH(cv);
\&    const char *subname = SvPVX(cv);
\&    STRLEN name_length  = SvCUR(cv); /* in bytes */
\&    U32 is_utf8         = SvUTF8(cv);
.Ve
.PP
\&\f(CW\*(C`SvPVX(cv)\*(C'\fR contains just the sub name itself, not including the package.
For an \s-1AUTOLOAD\s0 routine in \s-1UNIVERSAL\s0 or one of its superclasses,
\&\f(CW\*(C`CvSTASH(cv)\*(C'\fR returns \s-1NULL\s0 during a method call on a nonexistent package.
.PP
\&\fBNote\fR: Setting \f(CW$AUTOLOAD\fR stopped working in 5.6.1, which did not support
\&\s-1XS AUTOLOAD\s0 subs at all.  Perl 5.8.0 introduced the use of fields in the
\&\s-1XSUB\s0 itself.  Perl 5.16.0 restored the setting of \f(CW$AUTOLOAD\fR.  If you need
to support 5.8\-5.14, use the \s-1XSUB\s0's fields.
.SS "Calling Perl Routines from within C Programs"
.IX Subsection "Calling Perl Routines from within C Programs"
There are four routines that can be used to call a Perl subroutine from
within a C program.  These four are:
.PP
.Vb 4
\&    I32  call_sv(SV*, I32);
\&    I32  call_pv(const char*, I32);
\&    I32  call_method(const char*, I32);
\&    I32  call_argv(const char*, I32, char**);
.Ve
.PP
The routine most often used is \f(CW\*(C`call_sv\*(C'\fR.  The \f(CW\*(C`SV*\*(C'\fR argument
contains either the name of the Perl subroutine to be called, or a
reference to the subroutine.  The second argument consists of flags
that control the context in which the subroutine is called, whether
or not the subroutine is being passed arguments, how errors should be
trapped, and how to treat return values.
.PP
All four routines return the number of arguments that the subroutine returned
on the Perl stack.
.PP
These routines used to be called \f(CW\*(C`perl_call_sv\*(C'\fR, etc., before Perl v5.6.0,
but those names are now deprecated; macros of the same name are provided for
compatibility.
.PP
When using any of these routines (except \f(CW\*(C`call_argv\*(C'\fR), the programmer
must manipulate the Perl stack.  These include the following macros and
functions:
.PP
.Vb 11
\&    dSP
\&    SP
\&    PUSHMARK()
\&    PUTBACK
\&    SPAGAIN
\&    ENTER
\&    SAVETMPS
\&    FREETMPS
\&    LEAVE
\&    XPUSH*()
\&    POP*()
.Ve
.PP
For a detailed description of calling conventions from C to Perl,
consult perlcall.
.SS "Memory Allocation"
.IX Subsection "Memory Allocation"
\fIAllocation\fR
.IX Subsection "Allocation"
.PP
All memory meant to be used with the Perl \s-1API\s0 functions should be manipulated
using the macros described in this section.  The macros provide the necessary
transparency between differences in the actual malloc implementation that is
used within perl.
.PP
It is suggested that you enable the version of malloc that is distributed
with Perl.  It keeps pools of various sizes of unallocated memory in
order to satisfy allocation requests more quickly.  However, on some
platforms, it may cause spurious malloc or free errors.
.PP
The following three macros are used to initially allocate memory :
.PP
.Vb 3
\&    Newx(pointer, number, type);
\&    Newxc(pointer, number, type, cast);
\&    Newxz(pointer, number, type);
.Ve
.PP
The first argument \f(CW\*(C`pointer\*(C'\fR should be the name of a variable that will
point to the newly allocated memory.
.PP
The second and third arguments \f(CW\*(C`number\*(C'\fR and \f(CW\*(C`type\*(C'\fR specify how many of
the specified type of data structure should be allocated.  The argument
\&\f(CW\*(C`type\*(C'\fR is passed to \f(CW\*(C`sizeof\*(C'\fR.  The final argument to \f(CW\*(C`Newxc\*(C'\fR, \f(CW\*(C`cast\*(C'\fR,
should be used if the \f(CW\*(C`pointer\*(C'\fR argument is different from the \f(CW\*(C`type\*(C'\fR
argument.
.PP
Unlike the \f(CW\*(C`Newx\*(C'\fR and \f(CW\*(C`Newxc\*(C'\fR macros, the \f(CW\*(C`Newxz\*(C'\fR macro calls \f(CW\*(C`memzero\*(C'\fR
to zero out all the newly allocated memory.
.PP
\fIReallocation\fR
.IX Subsection "Reallocation"
.PP
.Vb 3
\&    Renew(pointer, number, type);
\&    Renewc(pointer, number, type, cast);
\&    Safefree(pointer)
.Ve
.PP
These three macros are used to change a memory buffer size or to free a
piece of memory no longer needed.  The arguments to \f(CW\*(C`Renew\*(C'\fR and \f(CW\*(C`Renewc\*(C'\fR
match those of \f(CW\*(C`New\*(C'\fR and \f(CW\*(C`Newc\*(C'\fR with the exception of not needing the
\&\*(L"magic cookie\*(R" argument.
.PP
\fIMoving\fR
.IX Subsection "Moving"
.PP
.Vb 3
\&    Move(source, dest, number, type);
\&    Copy(source, dest, number, type);
\&    Zero(dest, number, type);
.Ve
.PP
These three macros are used to move, copy, or zero out previously allocated
memory.  The \f(CW\*(C`source\*(C'\fR and \f(CW\*(C`dest\*(C'\fR arguments point to the source and
destination starting points.  Perl will move, copy, or zero out \f(CW\*(C`number\*(C'\fR
instances of the size of the \f(CW\*(C`type\*(C'\fR data structure (using the \f(CW\*(C`sizeof\*(C'\fR
function).
.SS "PerlIO"
.IX Subsection "PerlIO"
The most recent development releases of Perl have been experimenting with
removing Perl's dependency on the \*(L"normal\*(R" standard I/O suite and allowing
other stdio implementations to be used.  This involves creating a new
abstraction layer that then calls whichever implementation of stdio Perl
was compiled with.  All XSUBs should now use the functions in the PerlIO
abstraction layer and not make any assumptions about what kind of stdio
is being used.
.PP
For a complete description of the PerlIO abstraction, consult perlapio.
.SS "Putting a C value on Perl stack"
.IX Subsection "Putting a C value on Perl stack"
A lot of opcodes (this is an elementary operation in the internal perl
stack machine) put an SV* on the stack. However, as an optimization
the corresponding \s-1SV\s0 is (usually) not recreated each time. The opcodes
reuse specially assigned SVs (\fItarget\fRs) which are (as a corollary)
not constantly freed/created.
.PP
Each of the targets is created only once (but see
\&\*(L"Scratchpads and recursion\*(R" below), and when an opcode needs to put
an integer, a double, or a string on stack, it just sets the
corresponding parts of its \fItarget\fR and puts the \fItarget\fR on stack.
.PP
The macro to put this target on stack is \f(CW\*(C`PUSHTARG\*(C'\fR, and it is
directly used in some opcodes, as well as indirectly in zillions of
others, which use it via \f(CW\*(C`(X)PUSH[iunp]\*(C'\fR.
.PP
Because the target is reused, you must be careful when pushing multiple
values on the stack. The following code will not do what you think:
.PP
.Vb 2
\&    XPUSHi(10);
\&    XPUSHi(20);
.Ve
.PP
This translates as "set \f(CW\*(C`TARG\*(C'\fR to 10, push a pointer to \f(CW\*(C`TARG\*(C'\fR onto
the stack; set \f(CW\*(C`TARG\*(C'\fR to 20, push a pointer to \f(CW\*(C`TARG\*(C'\fR onto the stack".
At the end of the operation, the stack does not contain the values 10
and 20, but actually contains two pointers to \f(CW\*(C`TARG\*(C'\fR, which we have set
to 20.
.PP
If you need to push multiple different values then you should either use
the \f(CW\*(C`(X)PUSHs\*(C'\fR macros, or else use the new \f(CW\*(C`m(X)PUSH[iunp]\*(C'\fR macros,
none of which make use of \f(CW\*(C`TARG\*(C'\fR.  The \f(CW\*(C`(X)PUSHs\*(C'\fR macros simply push an
SV* on the stack, which, as noted under \*(L"XSUBs and the Argument Stack\*(R",
will often need to be \*(L"mortal\*(R".  The new \f(CW\*(C`m(X)PUSH[iunp]\*(C'\fR macros make
this a little easier to achieve by creating a new mortal for you (via
\&\f(CW\*(C`(X)PUSHmortal\*(C'\fR), pushing that onto the stack (extending it if necessary
in the case of the \f(CW\*(C`mXPUSH[iunp]\*(C'\fR macros), and then setting its value.
Thus, instead of writing this to \*(L"fix\*(R" the example above:
.PP
.Vb 2
\&    XPUSHs(sv_2mortal(newSViv(10)))
\&    XPUSHs(sv_2mortal(newSViv(20)))
.Ve
.PP
you can simply write:
.PP
.Vb 2
\&    mXPUSHi(10)
\&    mXPUSHi(20)
.Ve
.PP
On a related note, if you do use \f(CW\*(C`(X)PUSH[iunp]\*(C'\fR, then you're going to
need a \f(CW\*(C`dTARG\*(C'\fR in your variable declarations so that the \f(CW\*(C`*PUSH*\*(C'\fR
macros can make use of the local variable \f(CW\*(C`TARG\*(C'\fR.  See also \f(CW\*(C`dTARGET\*(C'\fR
and \f(CW\*(C`dXSTARG\*(C'\fR.
.SS "Scratchpads"
.IX Subsection "Scratchpads"
The question remains on when the SVs which are \fItarget\fRs for opcodes
are created. The answer is that they are created when the current
unit\*(--a subroutine or a file (for opcodes for statements outside of
subroutines)\-\-is compiled. During this time a special anonymous Perl
array is created, which is called a scratchpad for the current unit.
.PP
A scratchpad keeps SVs which are lexicals for the current unit and are
targets for opcodes. One can deduce that an \s-1SV\s0 lives on a scratchpad
by looking on its flags: lexicals have \f(CW\*(C`SVs_PADMY\*(C'\fR set, and
\&\fItarget\fRs have \f(CW\*(C`SVs_PADTMP\*(C'\fR set.
.PP
The correspondence between OPs and \fItarget\fRs is not 1\-to\-1. Different
OPs in the compile tree of the unit can use the same target, if this
would not conflict with the expected life of the temporary.
.SS "Scratchpads and recursion"
.IX Subsection "Scratchpads and recursion"
In fact it is not 100% true that a compiled unit contains a pointer to
the scratchpad \s-1AV.\s0 In fact it contains a pointer to an \s-1AV\s0 of
(initially) one element, and this element is the scratchpad \s-1AV.\s0 Why do
we need an extra level of indirection?
.PP
The answer is \fBrecursion\fR, and maybe \fBthreads\fR. Both
these can create several execution pointers going into the same
subroutine. For the subroutine-child not write over the temporaries
for the subroutine-parent (lifespan of which covers the call to the
child), the parent and the child should have different
scratchpads. (\fIAnd\fR the lexicals should be separate anyway!)
.PP
So each subroutine is born with an array of scratchpads (of length 1).
On each entry to the subroutine it is checked that the current
depth of the recursion is not more than the length of this array, and
if it is, new scratchpad is created and pushed into the array.
.PP
The \fItarget\fRs on this scratchpad are \f(CW\*(C`undef\*(C'\fRs, but they are already
marked with correct flags.
.SH "Compiled code"
.IX Header "Compiled code"
.SS "Code tree"
.IX Subsection "Code tree"
Here we describe the internal form your code is converted to by
Perl. Start with a simple example:
.PP
.Vb 1
\&  $a = $b + $c;
.Ve
.PP
This is converted to a tree similar to this one:
.PP
.Vb 5
\&             assign\-to
\&           /           \e
\&          +             $a
\&        /   \e
\&      $b     $c
.Ve
.PP
(but slightly more complicated).  This tree reflects the way Perl
parsed your code, but has nothing to do with the execution order.
There is an additional \*(L"thread\*(R" going through the nodes of the tree
which shows the order of execution of the nodes.  In our simplified
example above it looks like:
.PP
.Vb 1
\&     $b \-\-\-> $c \-\-\-> + \-\-\-> $a \-\-\-> assign\-to
.Ve
.PP
But with the actual compile tree for \f(CW\*(C`$a = $b + $c\*(C'\fR it is different:
some nodes \fIoptimized away\fR.  As a corollary, though the actual tree
contains more nodes than our simplified example, the execution order
is the same as in our example.
.SS "Examining the tree"
.IX Subsection "Examining the tree"
If you have your perl compiled for debugging (usually done with
\&\f(CW\*(C`\-DDEBUGGING\*(C'\fR on the \f(CW\*(C`Configure\*(C'\fR command line), you may examine the
compiled tree by specifying \f(CW\*(C`\-Dx\*(C'\fR on the Perl command line.  The
output takes several lines per node, and for \f(CW\*(C`$b+$c\*(C'\fR it looks like
this:
.PP
.Vb 10
\&    5           TYPE = add  ===> 6
\&                TARG = 1
\&                FLAGS = (SCALAR,KIDS)
\&                {
\&                    TYPE = null  ===> (4)
\&                      (was rv2sv)
\&                    FLAGS = (SCALAR,KIDS)
\&                    {
\&    3                   TYPE = gvsv  ===> 4
\&                        FLAGS = (SCALAR)
\&                        GV = main::b
\&                    }
\&                }
\&                {
\&                    TYPE = null  ===> (5)
\&                      (was rv2sv)
\&                    FLAGS = (SCALAR,KIDS)
\&                    {
\&    4                   TYPE = gvsv  ===> 5
\&                        FLAGS = (SCALAR)
\&                        GV = main::c
\&                    }
\&                }
.Ve
.PP
This tree has 5 nodes (one per \f(CW\*(C`TYPE\*(C'\fR specifier), only 3 of them are
not optimized away (one per number in the left column).  The immediate
children of the given node correspond to \f(CW\*(C`{}\*(C'\fR pairs on the same level
of indentation, thus this listing corresponds to the tree:
.PP
.Vb 5
\&                   add
\&                 /     \e
\&               null    null
\&                |       |
\&               gvsv    gvsv
.Ve
.PP
The execution order is indicated by \f(CW\*(C`===>\*(C'\fR marks, thus it is \f(CW\*(C`3
4 5 6\*(C'\fR (node \f(CW6\fR is not included into above listing), i.e.,
\&\f(CW\*(C`gvsv gvsv add whatever\*(C'\fR.
.PP
Each of these nodes represents an op, a fundamental operation inside the
Perl core. The code which implements each operation can be found in the
\&\fIpp*.c\fR files; the function which implements the op with type \f(CW\*(C`gvsv\*(C'\fR
is \f(CW\*(C`pp_gvsv\*(C'\fR, and so on. As the tree above shows, different ops have
different numbers of children: \f(CW\*(C`add\*(C'\fR is a binary operator, as one would
expect, and so has two children. To accommodate the various different
numbers of children, there are various types of op data structure, and
they link together in different ways.
.PP
The simplest type of op structure is \f(CW\*(C`OP\*(C'\fR: this has no children. Unary
operators, \f(CW\*(C`UNOP\*(C'\fRs, have one child, and this is pointed to by the
\&\f(CW\*(C`op_first\*(C'\fR field. Binary operators (\f(CW\*(C`BINOP\*(C'\fRs) have not only an
\&\f(CW\*(C`op_first\*(C'\fR field but also an \f(CW\*(C`op_last\*(C'\fR field. The most complex type of
op is a \f(CW\*(C`LISTOP\*(C'\fR, which has any number of children. In this case, the
first child is pointed to by \f(CW\*(C`op_first\*(C'\fR and the last child by
\&\f(CW\*(C`op_last\*(C'\fR. The children in between can be found by iteratively
following the \f(CW\*(C`op_sibling\*(C'\fR pointer from the first child to the last.
.PP
There are also two other op types: a \f(CW\*(C`PMOP\*(C'\fR holds a regular expression,
and has no children, and a \f(CW\*(C`LOOP\*(C'\fR may or may not have children. If the
\&\f(CW\*(C`op_children\*(C'\fR field is non-zero, it behaves like a \f(CW\*(C`LISTOP\*(C'\fR. To
complicate matters, if a \f(CW\*(C`UNOP\*(C'\fR is actually a \f(CW\*(C`null\*(C'\fR op after
optimization (see \*(L"Compile pass 2: context propagation\*(R") it will still
have children in accordance with its former type.
.PP
Another way to examine the tree is to use a compiler back-end module, such
as B::Concise.
.SS "Compile pass 1: check routines"
.IX Subsection "Compile pass 1: check routines"
The tree is created by the compiler while \fIyacc\fR code feeds it
the constructions it recognizes. Since \fIyacc\fR works bottom-up, so does
the first pass of perl compilation.
.PP
What makes this pass interesting for perl developers is that some
optimization may be performed on this pass.  This is optimization by
so-called \*(L"check routines\*(R".  The correspondence between node names
and corresponding check routines is described in \fIopcode.pl\fR (do not
forget to run \f(CW\*(C`make regen_headers\*(C'\fR if you modify this file).
.PP
A check routine is called when the node is fully constructed except
for the execution-order thread.  Since at this time there are no
back-links to the currently constructed node, one can do most any
operation to the top-level node, including freeing it and/or creating
new nodes above/below it.
.PP
The check routine returns the node which should be inserted into the
tree (if the top-level node was not modified, check routine returns
its argument).
.PP
By convention, check routines have names \f(CW\*(C`ck_*\*(C'\fR. They are usually
called from \f(CW\*(C`new*OP\*(C'\fR subroutines (or \f(CW\*(C`convert\*(C'\fR) (which in turn are
called from \fIperly.y\fR).
.SS "Compile pass 1a: constant folding"
.IX Subsection "Compile pass 1a: constant folding"
Immediately after the check routine is called the returned node is
checked for being compile-time executable.  If it is (the value is
judged to be constant) it is immediately executed, and a \fIconstant\fR
node with the \*(L"return value\*(R" of the corresponding subtree is
substituted instead.  The subtree is deleted.
.PP
If constant folding was not performed, the execution-order thread is
created.
.SS "Compile pass 2: context propagation"
.IX Subsection "Compile pass 2: context propagation"
When a context for a part of compile tree is known, it is propagated
down through the tree.  At this time the context can have 5 values
(instead of 2 for runtime context): void, boolean, scalar, list, and
lvalue.  In contrast with the pass 1 this pass is processed from top
to bottom: a node's context determines the context for its children.
.PP
Additional context-dependent optimizations are performed at this time.
Since at this moment the compile tree contains back-references (via
\&\*(L"thread\*(R" pointers), nodes cannot be \fIfree()\fRd now.  To allow
optimized-away nodes at this stage, such nodes are \fInull()\fRified instead
of \fIfree()\fRing (i.e. their type is changed to \s-1OP_NULL\s0).
.SS "Compile pass 3: peephole optimization"
.IX Subsection "Compile pass 3: peephole optimization"
After the compile tree for a subroutine (or for an \f(CW\*(C`eval\*(C'\fR or a file)
is created, an additional pass over the code is performed. This pass
is neither top-down or bottom-up, but in the execution order (with
additional complications for conditionals).  Optimizations performed
at this stage are subject to the same restrictions as in the pass 2.
.PP
Peephole optimizations are done by calling the function pointed to
by the global variable \f(CW\*(C`PL_peepp\*(C'\fR.  By default, \f(CW\*(C`PL_peepp\*(C'\fR just
calls the function pointed to by the global variable \f(CW\*(C`PL_rpeepp\*(C'\fR.
By default, that performs some basic op fixups and optimisations along
the execution-order op chain, and recursively calls \f(CW\*(C`PL_rpeepp\*(C'\fR for
each side chain of ops (resulting from conditionals).  Extensions may
provide additional optimisations or fixups, hooking into either the
per-subroutine or recursive stage, like this:
.PP
.Vb 10
\&    static peep_t prev_peepp;
\&    static void my_peep(pTHX_ OP *o)
\&    {
\&        /* custom per\-subroutine optimisation goes here */
\&        prev_peepp(aTHX_ o);
\&        /* custom per\-subroutine optimisation may also go here */
\&    }
\&    BOOT:
\&        prev_peepp = PL_peepp;
\&        PL_peepp = my_peep;
\&
\&    static peep_t prev_rpeepp;
\&    static void my_rpeep(pTHX_ OP *o)
\&    {
\&        OP *orig_o = o;
\&        for(; o; o = o\->op_next) {
\&            /* custom per\-op optimisation goes here */
\&        }
\&        prev_rpeepp(aTHX_ orig_o);
\&    }
\&    BOOT:
\&        prev_rpeepp = PL_rpeepp;
\&        PL_rpeepp = my_rpeep;
.Ve
.SS "Pluggable runops"
.IX Subsection "Pluggable runops"
The compile tree is executed in a runops function.  There are two runops
functions, in \fIrun.c\fR and in \fIdump.c\fR.  \f(CW\*(C`Perl_runops_debug\*(C'\fR is used
with \s-1DEBUGGING\s0 and \f(CW\*(C`Perl_runops_standard\*(C'\fR is used otherwise.  For fine
control over the execution of the compile tree it is possible to provide
your own runops function.
.PP
It's probably best to copy one of the existing runops functions and
change it to suit your needs.  Then, in the \s-1BOOT\s0 section of your \s-1XS\s0
file, add the line:
.PP
.Vb 1
\&  PL_runops = my_runops;
.Ve
.PP
This function should be as efficient as possible to keep your programs
running as fast as possible.
.SS "Compile-time scope hooks"
.IX Subsection "Compile-time scope hooks"
As of perl 5.14 it is possible to hook into the compile-time lexical
scope mechanism using \f(CW\*(C`Perl_blockhook_register\*(C'\fR. This is used like
this:
.PP
.Vb 2
\&    STATIC void my_start_hook(pTHX_ int full);
\&    STATIC BHK my_hooks;
\&
\&    BOOT:
\&        BhkENTRY_set(&my_hooks, bhk_start, my_start_hook);
\&        Perl_blockhook_register(aTHX_ &my_hooks);
.Ve
.PP
This will arrange to have \f(CW\*(C`my_start_hook\*(C'\fR called at the start of
compiling every lexical scope. The available hooks are:
.ie n .IP """void bhk_start(pTHX_ int full)""" 4
.el .IP "\f(CWvoid bhk_start(pTHX_ int full)\fR" 4
.IX Item "void bhk_start(pTHX_ int full)"
This is called just after starting a new lexical scope. Note that Perl
code like
.Sp
.Vb 1
\&    if ($x) { ... }
.Ve
.Sp
creates two scopes: the first starts at the \f(CW\*(C`(\*(C'\fR and has \f(CW\*(C`full == 1\*(C'\fR,
the second starts at the \f(CW\*(C`{\*(C'\fR and has \f(CW\*(C`full == 0\*(C'\fR. Both end at the
\&\f(CW\*(C`}\*(C'\fR, so calls to \f(CW\*(C`start\*(C'\fR and \f(CW\*(C`pre/post_end\*(C'\fR will match. Anything
pushed onto the save stack by this hook will be popped just before the
scope ends (between the \f(CW\*(C`pre_\*(C'\fR and \f(CW\*(C`post_end\*(C'\fR hooks, in fact).
.ie n .IP """void bhk_pre_end(pTHX_ OP **o)""" 4
.el .IP "\f(CWvoid bhk_pre_end(pTHX_ OP **o)\fR" 4
.IX Item "void bhk_pre_end(pTHX_ OP **o)"
This is called at the end of a lexical scope, just before unwinding the
stack. \fIo\fR is the root of the optree representing the scope; it is a
double pointer so you can replace the \s-1OP\s0 if you need to.
.ie n .IP """void bhk_post_end(pTHX_ OP **o)""" 4
.el .IP "\f(CWvoid bhk_post_end(pTHX_ OP **o)\fR" 4
.IX Item "void bhk_post_end(pTHX_ OP **o)"
This is called at the end of a lexical scope, just after unwinding the
stack. \fIo\fR is as above. Note that it is possible for calls to \f(CW\*(C`pre_\*(C'\fR
and \f(CW\*(C`post_end\*(C'\fR to nest, if there is something on the save stack that
calls string eval.
.ie n .IP """void bhk_eval(pTHX_ OP *const o)""" 4
.el .IP "\f(CWvoid bhk_eval(pTHX_ OP *const o)\fR" 4
.IX Item "void bhk_eval(pTHX_ OP *const o)"
This is called just before starting to compile an \f(CW\*(C`eval STRING\*(C'\fR, \f(CW\*(C`do
FILE\*(C'\fR, \f(CW\*(C`require\*(C'\fR or \f(CW\*(C`use\*(C'\fR, after the eval has been set up. \fIo\fR is the
\&\s-1OP\s0 that requested the eval, and will normally be an \f(CW\*(C`OP_ENTEREVAL\*(C'\fR,
\&\f(CW\*(C`OP_DOFILE\*(C'\fR or \f(CW\*(C`OP_REQUIRE\*(C'\fR.
.PP
Once you have your hook functions, you need a \f(CW\*(C`BHK\*(C'\fR structure to put
them in. It's best to allocate it statically, since there is no way to
free it once it's registered. The function pointers should be inserted
into this structure using the \f(CW\*(C`BhkENTRY_set\*(C'\fR macro, which will also set
flags indicating which entries are valid. If you do need to allocate
your \f(CW\*(C`BHK\*(C'\fR dynamically for some reason, be sure to zero it before you
start.
.PP
Once registered, there is no mechanism to switch these hooks off, so if
that is necessary you will need to do this yourself. An entry in \f(CW\*(C`%^H\*(C'\fR
is probably the best way, so the effect is lexically scoped; however it
is also possible to use the \f(CW\*(C`BhkDISABLE\*(C'\fR and \f(CW\*(C`BhkENABLE\*(C'\fR macros to
temporarily switch entries on and off. You should also be aware that
generally speaking at least one scope will have opened before your
extension is loaded, so you will see some \f(CW\*(C`pre/post_end\*(C'\fR pairs that
didn't have a matching \f(CW\*(C`start\*(C'\fR.
.ie n .SH "Examining internal data structures with the ""dump"" functions"
.el .SH "Examining internal data structures with the \f(CWdump\fP functions"
.IX Header "Examining internal data structures with the dump functions"
To aid debugging, the source file \fIdump.c\fR contains a number of
functions which produce formatted output of internal data structures.
.PP
The most commonly used of these functions is \f(CW\*(C`Perl_sv_dump\*(C'\fR; it's used
for dumping SVs, AVs, HVs, and CVs. The \f(CW\*(C`Devel::Peek\*(C'\fR module calls
\&\f(CW\*(C`sv_dump\*(C'\fR to produce debugging output from Perl-space, so users of that
module should already be familiar with its format.
.PP
\&\f(CW\*(C`Perl_op_dump\*(C'\fR can be used to dump an \f(CW\*(C`OP\*(C'\fR structure or any of its
derivatives, and produces output similar to \f(CW\*(C`perl \-Dx\*(C'\fR; in fact,
\&\f(CW\*(C`Perl_dump_eval\*(C'\fR will dump the main root of the code being evaluated,
exactly like \f(CW\*(C`\-Dx\*(C'\fR.
.PP
Other useful functions are \f(CW\*(C`Perl_dump_sub\*(C'\fR, which turns a \f(CW\*(C`GV\*(C'\fR into an
op tree, \f(CW\*(C`Perl_dump_packsubs\*(C'\fR which calls \f(CW\*(C`Perl_dump_sub\*(C'\fR on all the
subroutines in a package like so: (Thankfully, these are all xsubs, so
there is no op tree)
.PP
.Vb 1
\&    (gdb) print Perl_dump_packsubs(PL_defstash)
\&
\&    SUB attributes::bootstrap = (xsub 0x811fedc 0)
\&
\&    SUB UNIVERSAL::can = (xsub 0x811f50c 0)
\&
\&    SUB UNIVERSAL::isa = (xsub 0x811f304 0)
\&
\&    SUB UNIVERSAL::VERSION = (xsub 0x811f7ac 0)
\&
\&    SUB DynaLoader::boot_DynaLoader = (xsub 0x805b188 0)
.Ve
.PP
and \f(CW\*(C`Perl_dump_all\*(C'\fR, which dumps all the subroutines in the stash and
the op tree of the main root.
.SH "How multiple interpreters and concurrency are supported"
.IX Header "How multiple interpreters and concurrency are supported"
.SS "Background and \s-1PERL_IMPLICIT_CONTEXT\s0"
.IX Subsection "Background and PERL_IMPLICIT_CONTEXT"
The Perl interpreter can be regarded as a closed box: it has an \s-1API\s0
for feeding it code or otherwise making it do things, but it also has
functions for its own use.  This smells a lot like an object, and
there are ways for you to build Perl so that you can have multiple
interpreters, with one interpreter represented either as a C structure,
or inside a thread-specific structure.  These structures contain all
the context, the state of that interpreter.
.PP
One macro controls the major Perl build flavor: \s-1MULTIPLICITY.\s0 The
\&\s-1MULTIPLICITY\s0 build has a C structure that packages all the interpreter
state. With multiplicity-enabled perls, \s-1PERL_IMPLICIT_CONTEXT\s0 is also
normally defined, and enables the support for passing in a \*(L"hidden\*(R" first
argument that represents all three data structures. \s-1MULTIPLICITY\s0 makes
multi-threaded perls possible (with the ithreads threading model, related
to the macro \s-1USE_ITHREADS.\s0)
.PP
Two other \*(L"encapsulation\*(R" macros are the \s-1PERL_GLOBAL_STRUCT\s0 and
\&\s-1PERL_GLOBAL_STRUCT_PRIVATE \s0(the latter turns on the former, and the
former turns on \s-1MULTIPLICITY.\s0)  The \s-1PERL_GLOBAL_STRUCT\s0 causes all the
internal variables of Perl to be wrapped inside a single global struct,
struct perl_vars, accessible as (globals) &PL_Vars or PL_VarsPtr or
the function  \fIPerl_GetVars()\fR.  The \s-1PERL_GLOBAL_STRUCT_PRIVATE\s0 goes
one step further, there is still a single struct (allocated in \fImain()\fR
either from heap or from stack) but there are no global data symbols
pointing to it.  In either case the global struct should be initialised
as the very first thing in \fImain()\fR using \fIPerl_init_global_struct()\fR and
correspondingly tear it down after \fIperl_free()\fR using \fIPerl_free_global_struct()\fR,
please see \fIminiperlmain.c\fR for usage details.  You may also need
to use \f(CW\*(C`dVAR\*(C'\fR in your coding to \*(L"declare the global variables\*(R"
when you are using them.  dTHX does this for you automatically.
.PP
To see whether you have non-const data you can use a BSD-compatible \f(CW\*(C`nm\*(C'\fR:
.PP
.Vb 1
\&  nm libperl.a | grep \-v \*(Aq [TURtr] \*(Aq
.Ve
.PP
If this displays any \f(CW\*(C`D\*(C'\fR or \f(CW\*(C`d\*(C'\fR symbols, you have non-const data.
.PP
For backward compatibility reasons defining just \s-1PERL_GLOBAL_STRUCT\s0
doesn't actually hide all symbols inside a big global struct: some
PerlIO_xxx vtables are left visible.  The \s-1PERL_GLOBAL_STRUCT_PRIVATE\s0
then hides everything (see how the \s-1PERLIO_FUNCS_DECL\s0 is used).
.PP
All this obviously requires a way for the Perl internal functions to be
either subroutines taking some kind of structure as the first
argument, or subroutines taking nothing as the first argument.  To
enable these two very different ways of building the interpreter,
the Perl source (as it does in so many other situations) makes heavy
use of macros and subroutine naming conventions.
.PP
First problem: deciding which functions will be public \s-1API\s0 functions and
which will be private.  All functions whose names begin \f(CW\*(C`S_\*(C'\fR are private
(think \*(L"S\*(R" for \*(L"secret\*(R" or \*(L"static\*(R").  All other functions begin with
\&\*(L"Perl_\*(R", but just because a function begins with \*(L"Perl_\*(R" does not mean it is
part of the \s-1API. \s0(See \*(L"Internal Functions\*(R".) The easiest way to be \fBsure\fR a
function is part of the \s-1API\s0 is to find its entry in perlapi.
If it exists in perlapi, it's part of the \s-1API. \s0 If it doesn't, and you
think it should be (i.e., you need it for your extension), send mail via
perlbug explaining why you think it should be.
.PP
Second problem: there must be a syntax so that the same subroutine
declarations and calls can pass a structure as their first argument,
or pass nothing.  To solve this, the subroutines are named and
declared in a particular way.  Here's a typical start of a static
function used within the Perl guts:
.PP
.Vb 2
\&  STATIC void
\&  S_incline(pTHX_ char *s)
.Ve
.PP
\&\s-1STATIC\s0 becomes \*(L"static\*(R" in C, and may be #define'd to nothing in some
configurations in the future.
.PP
A public function (i.e. part of the internal \s-1API,\s0 but not necessarily
sanctioned for use in extensions) begins like this:
.PP
.Vb 2
\&  void
\&  Perl_sv_setiv(pTHX_ SV* dsv, IV num)
.Ve
.PP
\&\f(CW\*(C`pTHX_\*(C'\fR is one of a number of macros (in \fIperl.h\fR) that hide the
details of the interpreter's context.  \s-1THX\s0 stands for \*(L"thread\*(R", \*(L"this\*(R",
or \*(L"thingy\*(R", as the case may be.  (And no, George Lucas is not involved. :\-)
The first character could be 'p' for a \fBp\fRrototype, 'a' for \fBa\fRrgument,
or 'd' for \fBd\fReclaration, so we have \f(CW\*(C`pTHX\*(C'\fR, \f(CW\*(C`aTHX\*(C'\fR and \f(CW\*(C`dTHX\*(C'\fR, and
their variants.
.PP
When Perl is built without options that set \s-1PERL_IMPLICIT_CONTEXT,\s0 there is no
first argument containing the interpreter's context.  The trailing underscore
in the pTHX_ macro indicates that the macro expansion needs a comma
after the context argument because other arguments follow it.  If
\&\s-1PERL_IMPLICIT_CONTEXT\s0 is not defined, pTHX_ will be ignored, and the
subroutine is not prototyped to take the extra argument.  The form of the
macro without the trailing underscore is used when there are no additional
explicit arguments.
.PP
When a core function calls another, it must pass the context.  This
is normally hidden via macros.  Consider \f(CW\*(C`sv_setiv\*(C'\fR.  It expands into
something like this:
.PP
.Vb 6
\&    #ifdef PERL_IMPLICIT_CONTEXT
\&      #define sv_setiv(a,b)      Perl_sv_setiv(aTHX_ a, b)
\&      /* can\*(Aqt do this for vararg functions, see below */
\&    #else
\&      #define sv_setiv           Perl_sv_setiv
\&    #endif
.Ve
.PP
This works well, and means that \s-1XS\s0 authors can gleefully write:
.PP
.Vb 1
\&    sv_setiv(foo, bar);
.Ve
.PP
and still have it work under all the modes Perl could have been
compiled with.
.PP
This doesn't work so cleanly for varargs functions, though, as macros
imply that the number of arguments is known in advance.  Instead we
either need to spell them out fully, passing \f(CW\*(C`aTHX_\*(C'\fR as the first
argument (the Perl core tends to do this with functions like
Perl_warner), or use a context-free version.
.PP
The context-free version of Perl_warner is called
Perl_warner_nocontext, and does not take the extra argument.  Instead
it does dTHX; to get the context from thread-local storage.  We
\&\f(CW\*(C`#define warner Perl_warner_nocontext\*(C'\fR so that extensions get source
compatibility at the expense of performance.  (Passing an arg is
cheaper than grabbing it from thread-local storage.)
.PP
You can ignore [pad]THXx when browsing the Perl headers/sources.
Those are strictly for use within the core.  Extensions and embedders
need only be aware of [pad]THX.
.SS "So what happened to dTHR?"
.IX Subsection "So what happened to dTHR?"
\&\f(CW\*(C`dTHR\*(C'\fR was introduced in perl 5.005 to support the older thread model.
The older thread model now uses the \f(CW\*(C`THX\*(C'\fR mechanism to pass context
pointers around, so \f(CW\*(C`dTHR\*(C'\fR is not useful any more.  Perl 5.6.0 and
later still have it for backward source compatibility, but it is defined
to be a no-op.
.SS "How do I use all this in extensions?"
.IX Subsection "How do I use all this in extensions?"
When Perl is built with \s-1PERL_IMPLICIT_CONTEXT,\s0 extensions that call
any functions in the Perl \s-1API\s0 will need to pass the initial context
argument somehow.  The kicker is that you will need to write it in
such a way that the extension still compiles when Perl hasn't been
built with \s-1PERL_IMPLICIT_CONTEXT\s0 enabled.
.PP
There are three ways to do this.  First, the easy but inefficient way,
which is also the default, in order to maintain source compatibility
with extensions: whenever \fI\s-1XSUB\s0.h\fR is #included, it redefines the aTHX
and aTHX_ macros to call a function that will return the context.
Thus, something like:
.PP
.Vb 1
\&        sv_setiv(sv, num);
.Ve
.PP
in your extension will translate to this when \s-1PERL_IMPLICIT_CONTEXT\s0 is
in effect:
.PP
.Vb 1
\&        Perl_sv_setiv(Perl_get_context(), sv, num);
.Ve
.PP
or to this otherwise:
.PP
.Vb 1
\&        Perl_sv_setiv(sv, num);
.Ve
.PP
You don't have to do anything new in your extension to get this; since
the Perl library provides \fIPerl_get_context()\fR, it will all just
work.
.PP
The second, more efficient way is to use the following template for
your Foo.xs:
.PP
.Vb 4
\&        #define PERL_NO_GET_CONTEXT     /* we want efficiency */
\&        #include "EXTERN.h"
\&        #include "perl.h"
\&        #include "XSUB.h"
\&
\&        STATIC void my_private_function(int arg1, int arg2);
\&
\&        STATIC void
\&        my_private_function(int arg1, int arg2)
\&        {
\&            dTHX;       /* fetch context */
\&            ... call many Perl API functions ...
\&        }
\&
\&        [... etc ...]
\&
\&        MODULE = Foo            PACKAGE = Foo
\&
\&        /* typical XSUB */
\&
\&        void
\&        my_xsub(arg)
\&                int arg
\&            CODE:
\&                my_private_function(arg, 10);
.Ve
.PP
Note that the only two changes from the normal way of writing an
extension is the addition of a \f(CW\*(C`#define PERL_NO_GET_CONTEXT\*(C'\fR before
including the Perl headers, followed by a \f(CW\*(C`dTHX;\*(C'\fR declaration at
the start of every function that will call the Perl \s-1API.  \s0(You'll
know which functions need this, because the C compiler will complain
that there's an undeclared identifier in those functions.)  No changes
are needed for the XSUBs themselves, because the \s-1\fIXS\s0()\fR macro is
correctly defined to pass in the implicit context if needed.
.PP
The third, even more efficient way is to ape how it is done within
the Perl guts:
.PP
.Vb 4
\&        #define PERL_NO_GET_CONTEXT     /* we want efficiency */
\&        #include "EXTERN.h"
\&        #include "perl.h"
\&        #include "XSUB.h"
\&
\&        /* pTHX_ only needed for functions that call Perl API */
\&        STATIC void my_private_function(pTHX_ int arg1, int arg2);
\&
\&        STATIC void
\&        my_private_function(pTHX_ int arg1, int arg2)
\&        {
\&            /* dTHX; not needed here, because THX is an argument */
\&            ... call Perl API functions ...
\&        }
\&
\&        [... etc ...]
\&
\&        MODULE = Foo            PACKAGE = Foo
\&
\&        /* typical XSUB */
\&
\&        void
\&        my_xsub(arg)
\&                int arg
\&            CODE:
\&                my_private_function(aTHX_ arg, 10);
.Ve
.PP
This implementation never has to fetch the context using a function
call, since it is always passed as an extra argument.  Depending on
your needs for simplicity or efficiency, you may mix the previous
two approaches freely.
.PP
Never add a comma after \f(CW\*(C`pTHX\*(C'\fR yourself\*(--always use the form of the
macro with the underscore for functions that take explicit arguments,
or the form without the argument for functions with no explicit arguments.
.PP
If one is compiling Perl with the \f(CW\*(C`\-DPERL_GLOBAL_STRUCT\*(C'\fR the \f(CW\*(C`dVAR\*(C'\fR
definition is needed if the Perl global variables (see \fIperlvars.h\fR
or \fIglobvar.sym\fR) are accessed in the function and \f(CW\*(C`dTHX\*(C'\fR is not
used (the \f(CW\*(C`dTHX\*(C'\fR includes the \f(CW\*(C`dVAR\*(C'\fR if necessary).  One notices
the need for \f(CW\*(C`dVAR\*(C'\fR only with the said compile-time define, because
otherwise the Perl global variables are visible as-is.
.SS "Should I do anything special if I call perl from multiple threads?"
.IX Subsection "Should I do anything special if I call perl from multiple threads?"
If you create interpreters in one thread and then proceed to call them in
another, you need to make sure perl's own Thread Local Storage (\s-1TLS\s0) slot is
initialized correctly in each of those threads.
.PP
The \f(CW\*(C`perl_alloc\*(C'\fR and \f(CW\*(C`perl_clone\*(C'\fR \s-1API\s0 functions will automatically set
the \s-1TLS\s0 slot to the interpreter they created, so that there is no need to do
anything special if the interpreter is always accessed in the same thread that
created it, and that thread did not create or call any other interpreters
afterwards.  If that is not the case, you have to set the \s-1TLS\s0 slot of the
thread before calling any functions in the Perl \s-1API\s0 on that particular
interpreter.  This is done by calling the \f(CW\*(C`PERL_SET_CONTEXT\*(C'\fR macro in that
thread as the first thing you do:
.PP
.Vb 2
\&        /* do this before doing anything else with some_perl */
\&        PERL_SET_CONTEXT(some_perl);
\&
\&        ... other Perl API calls on some_perl go here ...
.Ve
.SS "Future Plans and \s-1PERL_IMPLICIT_SYS\s0"
.IX Subsection "Future Plans and PERL_IMPLICIT_SYS"
Just as \s-1PERL_IMPLICIT_CONTEXT\s0 provides a way to bundle up everything
that the interpreter knows about itself and pass it around, so too are
there plans to allow the interpreter to bundle up everything it knows
about the environment it's running on.  This is enabled with the
\&\s-1PERL_IMPLICIT_SYS\s0 macro.  Currently it only works with \s-1USE_ITHREADS\s0 on
Windows.
.PP
This allows the ability to provide an extra pointer (called the \*(L"host\*(R"
environment) for all the system calls.  This makes it possible for
all the system stuff to maintain their own state, broken down into
seven C structures.  These are thin wrappers around the usual system
calls (see \fIwin32/perllib.c\fR) for the default perl executable, but for a
more ambitious host (like the one that would do \fIfork()\fR emulation) all
the extra work needed to pretend that different interpreters are
actually different \*(L"processes\*(R", would be done here.
.PP
The Perl engine/interpreter and the host are orthogonal entities.
There could be one or more interpreters in a process, and one or
more \*(L"hosts\*(R", with free association between them.
.SH "Internal Functions"
.IX Header "Internal Functions"
All of Perl's internal functions which will be exposed to the outside
world are prefixed by \f(CW\*(C`Perl_\*(C'\fR so that they will not conflict with \s-1XS\s0
functions or functions used in a program in which Perl is embedded.
Similarly, all global variables begin with \f(CW\*(C`PL_\*(C'\fR. (By convention,
static functions start with \f(CW\*(C`S_\*(C'\fR.)
.PP
Inside the Perl core (\f(CW\*(C`PERL_CORE\*(C'\fR defined), you can get at the functions
either with or without the \f(CW\*(C`Perl_\*(C'\fR prefix, thanks to a bunch of defines
that live in \fIembed.h\fR. Note that extension code should \fInot\fR set
\&\f(CW\*(C`PERL_CORE\*(C'\fR; this exposes the full perl internals, and is likely to cause
breakage of the \s-1XS\s0 in each new perl release.
.PP
The file \fIembed.h\fR is generated automatically from
\&\fIembed.pl\fR and \fIembed.fnc\fR. \fIembed.pl\fR also creates the prototyping
header files for the internal functions, generates the documentation
and a lot of other bits and pieces. It's important that when you add
a new function to the core or change an existing one, you change the
data in the table in \fIembed.fnc\fR as well. Here's a sample entry from
that table:
.PP
.Vb 1
\&    Apd |SV**   |av_fetch   |AV* ar|I32 key|I32 lval
.Ve
.PP
The second column is the return type, the third column the name. Columns
after that are the arguments. The first column is a set of flags:
.IP "A" 3
.IX Item "A"
This function is a part of the public \s-1API.\s0 All such functions should also
have 'd', very few do not.
.IP "p" 3
.IX Item "p"
This function has a \f(CW\*(C`Perl_\*(C'\fR prefix; i.e. it is defined as
\&\f(CW\*(C`Perl_av_fetch\*(C'\fR.
.IP "d" 3
.IX Item "d"
This function has documentation using the \f(CW\*(C`apidoc\*(C'\fR feature which we'll
look at in a second.  Some functions have 'd' but not 'A'; docs are good.
.PP
Other available flags are:
.IP "s" 3
.IX Item "s"
This is a static function and is defined as \f(CW\*(C`STATIC S_whatever\*(C'\fR, and
usually called within the sources as \f(CW\*(C`whatever(...)\*(C'\fR.
.IP "n" 3
.IX Item "n"
This does not need an interpreter context, so the definition has no
\&\f(CW\*(C`pTHX\*(C'\fR, and it follows that callers don't use \f(CW\*(C`aTHX\*(C'\fR.  (See
\&\*(L"Background and \s-1PERL_IMPLICIT_CONTEXT\*(R"\s0.)
.IP "r" 3
.IX Item "r"
This function never returns; \f(CW\*(C`croak\*(C'\fR, \f(CW\*(C`exit\*(C'\fR and friends.
.IP "f" 3
.IX Item "f"
This function takes a variable number of arguments, \f(CW\*(C`printf\*(C'\fR style.
The argument list should end with \f(CW\*(C`...\*(C'\fR, like this:
.Sp
.Vb 1
\&    Afprd   |void   |croak          |const char* pat|...
.Ve
.IP "M" 3
.IX Item "M"
This function is part of the experimental development \s-1API,\s0 and may change
or disappear without notice.
.IP "o" 3
.IX Item "o"
This function should not have a compatibility macro to define, say,
\&\f(CW\*(C`Perl_parse\*(C'\fR to \f(CW\*(C`parse\*(C'\fR. It must be called as \f(CW\*(C`Perl_parse\*(C'\fR.
.IP "x" 3
.IX Item "x"
This function isn't exported out of the Perl core.
.IP "m" 3
.IX Item "m"
This is implemented as a macro.
.IP "X" 3
.IX Item "X"
This function is explicitly exported.
.IP "E" 3
.IX Item "E"
This function is visible to extensions included in the Perl core.
.IP "b" 3
.IX Item "b"
Binary backward compatibility; this function is a macro but also has
a \f(CW\*(C`Perl_\*(C'\fR implementation (which is exported).
.IP "others" 3
.IX Item "others"
See the comments at the top of \f(CW\*(C`embed.fnc\*(C'\fR for others.
.PP
If you edit \fIembed.pl\fR or \fIembed.fnc\fR, you will need to run
\&\f(CW\*(C`make regen_headers\*(C'\fR to force a rebuild of \fIembed.h\fR and other
auto-generated files.
.SS "Formatted Printing of IVs, UVs, and NVs"
.IX Subsection "Formatted Printing of IVs, UVs, and NVs"
If you are printing IVs, UVs, or \s-1NVS\s0 instead of the \fIstdio\fR\|(3) style
formatting codes like \f(CW%d\fR, \f(CW%ld\fR, \f(CW%f\fR, you should use the
following macros for portability
.PP
.Vb 7
\&        IVdf            IV in decimal
\&        UVuf            UV in decimal
\&        UVof            UV in octal
\&        UVxf            UV in hexadecimal
\&        NVef            NV %e\-like
\&        NVff            NV %f\-like
\&        NVgf            NV %g\-like
.Ve
.PP
These will take care of 64\-bit integers and long doubles.
For example:
.PP
.Vb 1
\&        printf("IV is %"IVdf"\en", iv);
.Ve
.PP
The IVdf will expand to whatever is the correct format for the IVs.
.PP
If you are printing addresses of pointers, use UVxf combined
with \s-1\fIPTR2UV\s0()\fR, do not use \f(CW%lx\fR or \f(CW%p\fR.
.SS "Pointer-To-Integer and Integer-To-Pointer"
.IX Subsection "Pointer-To-Integer and Integer-To-Pointer"
Because pointer size does not necessarily equal integer size,
use the follow macros to do it right.
.PP
.Vb 4
\&        PTR2UV(pointer)
\&        PTR2IV(pointer)
\&        PTR2NV(pointer)
\&        INT2PTR(pointertotype, integer)
.Ve
.PP
For example:
.PP
.Vb 2
\&        IV  iv = ...;
\&        SV *sv = INT2PTR(SV*, iv);
.Ve
.PP
and
.PP
.Vb 2
\&        AV *av = ...;
\&        UV  uv = PTR2UV(av);
.Ve
.SS "Exception Handling"
.IX Subsection "Exception Handling"
There are a couple of macros to do very basic exception handling in \s-1XS\s0
modules. You have to define \f(CW\*(C`NO_XSLOCKS\*(C'\fR before including \fI\s-1XSUB\s0.h\fR to
be able to use these macros:
.PP
.Vb 2
\&        #define NO_XSLOCKS
\&        #include "XSUB.h"
.Ve
.PP
You can use these macros if you call code that may croak, but you need
to do some cleanup before giving control back to Perl. For example:
.PP
.Vb 1
\&        dXCPT;    /* set up necessary variables */
\&
\&        XCPT_TRY_START {
\&          code_that_may_croak();
\&        } XCPT_TRY_END
\&
\&        XCPT_CATCH
\&        {
\&          /* do cleanup here */
\&          XCPT_RETHROW;
\&        }
.Ve
.PP
Note that you always have to rethrow an exception that has been
caught. Using these macros, it is not possible to just catch the
exception and ignore it. If you have to ignore the exception, you
have to use the \f(CW\*(C`call_*\*(C'\fR function.
.PP
The advantage of using the above macros is that you don't have
to setup an extra function for \f(CW\*(C`call_*\*(C'\fR, and that using these
macros is faster than using \f(CW\*(C`call_*\*(C'\fR.
.SS "Source Documentation"
.IX Subsection "Source Documentation"
There's an effort going on to document the internal functions and
automatically produce reference manuals from them \- perlapi is one
such manual which details all the functions which are available to \s-1XS\s0
writers. perlintern is the autogenerated manual for the functions
which are not part of the \s-1API\s0 and are supposedly for internal use only.
.PP
Source documentation is created by putting \s-1POD\s0 comments into the C
source, like this:
.PP
.Vb 2
\& /*
\& =for apidoc sv_setiv
\&
\& Copies an integer into the given SV.  Does not handle \*(Aqset\*(Aq magic.  See
\& C<sv_setiv_mg>.
\&
\& =cut
\& */
.Ve
.PP
Please try and supply some documentation if you add functions to the
Perl core.
.SS "Backwards compatibility"
.IX Subsection "Backwards compatibility"
The Perl \s-1API\s0 changes over time. New functions are added or the interfaces
of existing functions are changed. The \f(CW\*(C`Devel::PPPort\*(C'\fR module tries to
provide compatibility code for some of these changes, so \s-1XS\s0 writers don't
have to code it themselves when supporting multiple versions of Perl.
.PP
\&\f(CW\*(C`Devel::PPPort\*(C'\fR generates a C header file \fIppport.h\fR that can also
be run as a Perl script. To generate \fIppport.h\fR, run:
.PP
.Vb 1
\&    perl \-MDevel::PPPort \-eDevel::PPPort::WriteFile
.Ve
.PP
Besides checking existing \s-1XS\s0 code, the script can also be used to retrieve
compatibility information for various \s-1API\s0 calls using the \f(CW\*(C`\-\-api\-info\*(C'\fR
command line switch. For example:
.PP
.Vb 1
\&  % perl ppport.h \-\-api\-info=sv_magicext
.Ve
.PP
For details, see \f(CW\*(C`perldoc ppport.h\*(C'\fR.
.SH "Unicode Support"
.IX Header "Unicode Support"
Perl 5.6.0 introduced Unicode support. It's important for porters and \s-1XS\s0
writers to understand this support and make sure that the code they
write does not corrupt Unicode data.
.SS "What \fBis\fP Unicode, anyway?"
.IX Subsection "What is Unicode, anyway?"
In the olden, less enlightened times, we all used to use \s-1ASCII.\s0 Most of
us did, anyway. The big problem with \s-1ASCII\s0 is that it's American. Well,
no, that's not actually the problem; the problem is that it's not
particularly useful for people who don't use the Roman alphabet. What
used to happen was that particular languages would stick their own
alphabet in the upper range of the sequence, between 128 and 255. Of
course, we then ended up with plenty of variants that weren't quite
\&\s-1ASCII,\s0 and the whole point of it being a standard was lost.
.PP
Worse still, if you've got a language like Chinese or
Japanese that has hundreds or thousands of characters, then you really
can't fit them into a mere 256, so they had to forget about \s-1ASCII\s0
altogether, and build their own systems using pairs of numbers to refer
to one character.
.PP
To fix this, some people formed Unicode, Inc. and
produced a new character set containing all the characters you can
possibly think of and more. There are several ways of representing these
characters, and the one Perl uses is called \s-1UTF\-8. UTF\-8\s0 uses
a variable number of bytes to represent a character. You can learn more
about Unicode and Perl's Unicode model in perlunicode.
.SS "How can I recognise a \s-1UTF\-8\s0 string?"
.IX Subsection "How can I recognise a UTF-8 string?"
You can't. This is because \s-1UTF\-8\s0 data is stored in bytes just like
non\-UTF\-8 data. The Unicode character 200, (\f(CW0xC8\fR for you hex types)
capital E with a grave accent, is represented by the two bytes
\&\f(CW\*(C`v196.172\*(C'\fR. Unfortunately, the non-Unicode string \f(CW\*(C`chr(196).chr(172)\*(C'\fR
has that byte sequence as well. So you can't tell just by looking \- this
is what makes Unicode input an interesting problem.
.PP
In general, you either have to know what you're dealing with, or you
have to guess.  The \s-1API\s0 function \f(CW\*(C`is_utf8_string\*(C'\fR can help; it'll tell
you if a string contains only valid \s-1UTF\-8\s0 characters. However, it can't
do the work for you. On a character-by-character basis,
\&\f(CW\*(C`is_utf8_char_buf\*(C'\fR
will tell you whether the current character in a string is valid \s-1UTF\-8. \s0
.SS "How does \s-1UTF\-8\s0 represent Unicode characters?"
.IX Subsection "How does UTF-8 represent Unicode characters?"
As mentioned above, \s-1UTF\-8\s0 uses a variable number of bytes to store a
character. Characters with values 0...127 are stored in one byte, just
like good ol' \s-1ASCII.\s0 Character 128 is stored as \f(CW\*(C`v194.128\*(C'\fR; this
continues up to character 191, which is \f(CW\*(C`v194.191\*(C'\fR. Now we've run out of
bits (191 is binary \f(CW10111111\fR) so we move on; 192 is \f(CW\*(C`v195.128\*(C'\fR. And
so it goes on, moving to three bytes at character 2048.
.PP
Assuming you know you're dealing with a \s-1UTF\-8\s0 string, you can find out
how long the first character in it is with the \f(CW\*(C`UTF8SKIP\*(C'\fR macro:
.PP
.Vb 2
\&    char *utf = "\e305\e233\e340\e240\e201";
\&    I32 len;
\&
\&    len = UTF8SKIP(utf); /* len is 2 here */
\&    utf += len;
\&    len = UTF8SKIP(utf); /* len is 3 here */
.Ve
.PP
Another way to skip over characters in a \s-1UTF\-8\s0 string is to use
\&\f(CW\*(C`utf8_hop\*(C'\fR, which takes a string and a number of characters to skip
over. You're on your own about bounds checking, though, so don't use it
lightly.
.PP
All bytes in a multi-byte \s-1UTF\-8\s0 character will have the high bit set,
so you can test if you need to do something special with this
character like this (the \s-1\fIUTF8_IS_INVARIANT\s0()\fR is a macro that tests
whether the byte can be encoded as a single byte even in \s-1UTF\-8\s0):
.PP
.Vb 4
\&    U8 *utf;
\&    U8 *utf_end; /* 1 beyond buffer pointed to by utf */
\&    UV uv;      /* Note: a UV, not a U8, not a char */
\&    STRLEN len; /* length of character in bytes */
\&
\&    if (!UTF8_IS_INVARIANT(*utf))
\&        /* Must treat this as UTF\-8 */
\&        uv = utf8_to_uvchr_buf(utf, utf_end, &len);
\&    else
\&        /* OK to treat this character as a byte */
\&        uv = *utf;
.Ve
.PP
You can also see in that example that we use \f(CW\*(C`utf8_to_uvchr_buf\*(C'\fR to get the
value of the character; the inverse function \f(CW\*(C`uvchr_to_utf8\*(C'\fR is available
for putting a \s-1UV\s0 into \s-1UTF\-8:\s0
.PP
.Vb 6
\&    if (!UTF8_IS_INVARIANT(uv))
\&        /* Must treat this as UTF8 */
\&        utf8 = uvchr_to_utf8(utf8, uv);
\&    else
\&        /* OK to treat this character as a byte */
\&        *utf8++ = uv;
.Ve
.PP
You \fBmust\fR convert characters to UVs using the above functions if
you're ever in a situation where you have to match \s-1UTF\-8\s0 and non\-UTF\-8
characters. You may not skip over \s-1UTF\-8\s0 characters in this case. If you
do this, you'll lose the ability to match hi-bit non\-UTF\-8 characters;
for instance, if your \s-1UTF\-8\s0 string contains \f(CW\*(C`v196.172\*(C'\fR, and you skip
that character, you can never match a \f(CW\*(C`chr(200)\*(C'\fR in a non\-UTF\-8 string.
So don't do that!
.SS "How does Perl store \s-1UTF\-8\s0 strings?"
.IX Subsection "How does Perl store UTF-8 strings?"
Currently, Perl deals with Unicode strings and non-Unicode strings
slightly differently. A flag in the \s-1SV, \s0\f(CW\*(C`SVf_UTF8\*(C'\fR, indicates that the
string is internally encoded as \s-1UTF\-8.\s0 Without it, the byte value is the
codepoint number and vice versa (in other words, the string is encoded
as iso\-8859\-1, but \f(CW\*(C`use feature \*(Aqunicode_strings\*(Aq\*(C'\fR is needed to get iso\-8859\-1
semantics). You can check and manipulate this flag with the
following macros:
.PP
.Vb 3
\&    SvUTF8(sv)
\&    SvUTF8_on(sv)
\&    SvUTF8_off(sv)
.Ve
.PP
This flag has an important effect on Perl's treatment of the string: if
Unicode data is not properly distinguished, regular expressions,
\&\f(CW\*(C`length\*(C'\fR, \f(CW\*(C`substr\*(C'\fR and other string handling operations will have
undesirable results.
.PP
The problem comes when you have, for instance, a string that isn't
flagged as \s-1UTF\-8,\s0 and contains a byte sequence that could be \s-1UTF\-8 \-\s0
especially when combining non\-UTF\-8 and \s-1UTF\-8\s0 strings.
.PP
Never forget that the \f(CW\*(C`SVf_UTF8\*(C'\fR flag is separate to the \s-1PV\s0 value; you
need be sure you don't accidentally knock it off while you're
manipulating SVs. More specifically, you cannot expect to do this:
.PP
.Vb 4
\&    SV *sv;
\&    SV *nsv;
\&    STRLEN len;
\&    char *p;
\&
\&    p = SvPV(sv, len);
\&    frobnicate(p);
\&    nsv = newSVpvn(p, len);
.Ve
.PP
The \f(CW\*(C`char*\*(C'\fR string does not tell you the whole story, and you can't
copy or reconstruct an \s-1SV\s0 just by copying the string value. Check if the
old \s-1SV\s0 has the \s-1UTF8\s0 flag set, and act accordingly:
.PP
.Vb 5
\&    p = SvPV(sv, len);
\&    frobnicate(p);
\&    nsv = newSVpvn(p, len);
\&    if (SvUTF8(sv))
\&        SvUTF8_on(nsv);
.Ve
.PP
In fact, your \f(CW\*(C`frobnicate\*(C'\fR function should be made aware of whether or
not it's dealing with \s-1UTF\-8\s0 data, so that it can handle the string
appropriately.
.PP
Since just passing an \s-1SV\s0 to an \s-1XS\s0 function and copying the data of
the \s-1SV\s0 is not enough to copy the \s-1UTF8\s0 flags, even less right is just
passing a \f(CW\*(C`char *\*(C'\fR to an \s-1XS\s0 function.
.SS "How do I convert a string to \s-1UTF\-8\s0?"
.IX Subsection "How do I convert a string to UTF-8?"
If you're mixing \s-1UTF\-8\s0 and non\-UTF\-8 strings, it is necessary to upgrade
one of the strings to \s-1UTF\-8.\s0 If you've got an \s-1SV,\s0 the easiest way to do
this is:
.PP
.Vb 1
\&    sv_utf8_upgrade(sv);
.Ve
.PP
However, you must not do this, for example:
.PP
.Vb 2
\&    if (!SvUTF8(left))
\&        sv_utf8_upgrade(left);
.Ve
.PP
If you do this in a binary operator, you will actually change one of the
strings that came into the operator, and, while it shouldn't be noticeable
by the end user, it can cause problems in deficient code.
.PP
Instead, \f(CW\*(C`bytes_to_utf8\*(C'\fR will give you a UTF\-8\-encoded \fBcopy\fR of its
string argument. This is useful for having the data available for
comparisons and so on, without harming the original \s-1SV.\s0 There's also
\&\f(CW\*(C`utf8_to_bytes\*(C'\fR to go the other way, but naturally, this will fail if
the string contains any characters above 255 that can't be represented
in a single byte.
.SS "Is there anything else I need to know?"
.IX Subsection "Is there anything else I need to know?"
Not really. Just remember these things:
.IP "\(bu" 3
There's no way to tell if a string is \s-1UTF\-8\s0 or not. You can tell if an \s-1SV\s0
is \s-1UTF\-8\s0 by looking at its \f(CW\*(C`SvUTF8\*(C'\fR flag. Don't forget to set the flag if
something should be \s-1UTF\-8.\s0 Treat the flag as part of the \s-1PV,\s0 even though
it's not \- if you pass on the \s-1PV\s0 to somewhere, pass on the flag too.
.IP "\(bu" 3
If a string is \s-1UTF\-8, \s0\fBalways\fR use \f(CW\*(C`utf8_to_uvchr_buf\*(C'\fR to get at the value,
unless \f(CW\*(C`UTF8_IS_INVARIANT(*s)\*(C'\fR in which case you can use \f(CW*s\fR.
.IP "\(bu" 3
When writing a character \f(CW\*(C`uv\*(C'\fR to a \s-1UTF\-8\s0 string, \fBalways\fR use
\&\f(CW\*(C`uvchr_to_utf8\*(C'\fR, unless \f(CW\*(C`UTF8_IS_INVARIANT(uv))\*(C'\fR in which case
you can use \f(CW\*(C`*s = uv\*(C'\fR.
.IP "\(bu" 3
Mixing \s-1UTF\-8\s0 and non\-UTF\-8 strings is tricky. Use \f(CW\*(C`bytes_to_utf8\*(C'\fR to get
a new string which is \s-1UTF\-8\s0 encoded, and then combine them.
.SH "Custom Operators"
.IX Header "Custom Operators"
Custom operator support is an experimental feature that allows you to
define your own ops. This is primarily to allow the building of
interpreters for other languages in the Perl core, but it also allows
optimizations through the creation of \*(L"macro-ops\*(R" (ops which perform the
functions of multiple ops which are usually executed together, such as
\&\f(CW\*(C`gvsv, gvsv, add\*(C'\fR.)
.PP
This feature is implemented as a new op type, \f(CW\*(C`OP_CUSTOM\*(C'\fR. The Perl
core does not \*(L"know\*(R" anything special about this op type, and so it will
not be involved in any optimizations. This also means that you can
define your custom ops to be any op structure \- unary, binary, list and
so on \- you like.
.PP
It's important to know what custom operators won't do for you. They
won't let you add new syntax to Perl, directly. They won't even let you
add new keywords, directly. In fact, they won't change the way Perl
compiles a program at all. You have to do those changes yourself, after
Perl has compiled the program. You do this either by manipulating the op
tree using a \f(CW\*(C`CHECK\*(C'\fR block and the \f(CW\*(C`B::Generate\*(C'\fR module, or by adding
a custom peephole optimizer with the \f(CW\*(C`optimize\*(C'\fR module.
.PP
When you do this, you replace ordinary Perl ops with custom ops by
creating ops with the type \f(CW\*(C`OP_CUSTOM\*(C'\fR and the \f(CW\*(C`op_ppaddr\*(C'\fR of your own
\&\s-1PP\s0 function. This should be defined in \s-1XS\s0 code, and should look like
the \s-1PP\s0 ops in \f(CW\*(C`pp_*.c\*(C'\fR. You are responsible for ensuring that your op
takes the appropriate number of values from the stack, and you are
responsible for adding stack marks if necessary.
.PP
You should also \*(L"register\*(R" your op with the Perl interpreter so that it
can produce sensible error and warning messages. Since it is possible to
have multiple custom ops within the one \*(L"logical\*(R" op type \f(CW\*(C`OP_CUSTOM\*(C'\fR,
Perl uses the value of \f(CW\*(C`o\->op_ppaddr\*(C'\fR to determine which custom op
it is dealing with. You should create an \f(CW\*(C`XOP\*(C'\fR structure for each
ppaddr you use, set the properties of the custom op with
\&\f(CW\*(C`XopENTRY_set\*(C'\fR, and register the structure against the ppaddr using
\&\f(CW\*(C`Perl_custom_op_register\*(C'\fR. A trivial example might look like:
.PP
.Vb 2
\&    static XOP my_xop;
\&    static OP *my_pp(pTHX);
\&
\&    BOOT:
\&        XopENTRY_set(&my_xop, xop_name, "myxop");
\&        XopENTRY_set(&my_xop, xop_desc, "Useless custom op");
\&        Perl_custom_op_register(aTHX_ my_pp, &my_xop);
.Ve
.PP
The available fields in the structure are:
.IP "xop_name" 4
.IX Item "xop_name"
A short name for your op. This will be included in some error messages,
and will also be returned as \f(CW\*(C`$op\->name\*(C'\fR by the B module, so
it will appear in the output of module like B::Concise.
.IP "xop_desc" 4
.IX Item "xop_desc"
A short description of the function of the op.
.IP "xop_class" 4
.IX Item "xop_class"
Which of the various \f(CW*OP\fR structures this op uses. This should be one of
the \f(CW\*(C`OA_*\*(C'\fR constants from \fIop.h\fR, namely
.RS 4
.IP "\s-1OA_BASEOP\s0" 4
.IX Item "OA_BASEOP"
.PD 0
.IP "\s-1OA_UNOP\s0" 4
.IX Item "OA_UNOP"
.IP "\s-1OA_BINOP\s0" 4
.IX Item "OA_BINOP"
.IP "\s-1OA_LOGOP\s0" 4
.IX Item "OA_LOGOP"
.IP "\s-1OA_LISTOP\s0" 4
.IX Item "OA_LISTOP"
.IP "\s-1OA_PMOP\s0" 4
.IX Item "OA_PMOP"
.IP "\s-1OA_SVOP\s0" 4
.IX Item "OA_SVOP"
.IP "\s-1OA_PADOP\s0" 4
.IX Item "OA_PADOP"
.IP "\s-1OA_PVOP_OR_SVOP\s0" 4
.IX Item "OA_PVOP_OR_SVOP"
.PD
This should be interpreted as '\f(CW\*(C`PVOP\*(C'\fR' only. The \f(CW\*(C`_OR_SVOP\*(C'\fR is because
the only core \f(CW\*(C`PVOP\*(C'\fR, \f(CW\*(C`OP_TRANS\*(C'\fR, can sometimes be a \f(CW\*(C`SVOP\*(C'\fR instead.
.IP "\s-1OA_LOOP\s0" 4
.IX Item "OA_LOOP"
.PD 0
.IP "\s-1OA_COP\s0" 4
.IX Item "OA_COP"
.RE
.RS 4
.PD
.Sp
The other \f(CW\*(C`OA_*\*(C'\fR constants should not be used.
.RE
.IP "xop_peep" 4
.IX Item "xop_peep"
This member is of type \f(CW\*(C`Perl_cpeep_t\*(C'\fR, which expands to \f(CW\*(C`void
(*Perl_cpeep_t)(aTHX_ OP *o, OP *oldop)\*(C'\fR. If it is set, this function
will be called from \f(CW\*(C`Perl_rpeep\*(C'\fR when ops of this type are encountered
by the peephole optimizer. \fIo\fR is the \s-1OP\s0 that needs optimizing;
\&\fIoldop\fR is the previous \s-1OP\s0 optimized, whose \f(CW\*(C`op_next\*(C'\fR points to \fIo\fR.
.PP
\&\f(CW\*(C`B::Generate\*(C'\fR directly supports the creation of custom ops by name.
.SH "AUTHORS"
.IX Header "AUTHORS"
Until May 1997, this document was maintained by Jeff Okamoto
<okamoto@corp.hp.com>.  It is now maintained as part of Perl
itself by the Perl 5 Porters <perl5\-porters@perl.org>.
.PP
With lots of help and suggestions from Dean Roehrich, Malcolm Beattie,
Andreas Koenig, Paul Hudson, Ilya Zakharevich, Paul Marquess, Neil
Bowers, Matthew Green, Tim Bunce, Spider Boardman, Ulrich Pfeifer,
Stephen McCamant, and Gurusamy Sarathy.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
perlapi, perlintern, perlxs, perlembed
                                                                                                                                                                                                                                                                                                                                                                                     osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perlhack.1                                   0100644 0001750 0001750 00000127031 12566207441 022534  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLHACK 1"
.TH PERLHACK 1 "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlhack \- How to hack on Perl
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document explains how Perl development works.  It includes details
about the Perl 5 Porters email list, the Perl repository, the Perlbug
bug tracker, patch guidelines, and commentary on Perl development
philosophy.
.SH "SUPER QUICK PATCH GUIDE"
.IX Header "SUPER QUICK PATCH GUIDE"
If you just want to submit a single small patch like a pod fix, a test
for a bug, comment fixes, etc., it's easy! Here's how:
.IP "\(bu" 4
Check out the source repository
.Sp
The perl source is in a git repository.  You can clone the repository
with the following command:
.Sp
.Vb 1
\&  % git clone git://perl5.git.perl.org/perl.git perl
.Ve
.IP "\(bu" 4
Ensure you're following the latest advice
.Sp
In case the advice in this guide has been updated recently, read the
latest version directly from the perl source:
.Sp
.Vb 1
\&  % perldoc pod/perlhack.pod
.Ve
.IP "\(bu" 4
Make your change
.Sp
Hack, hack, hack.
.IP "\(bu" 4
Test your change
.Sp
You can run all the tests with the following commands:
.Sp
.Vb 2
\&  % ./Configure \-des \-Dusedevel
\&  % make test
.Ve
.Sp
Keep hacking until the tests pass.
.IP "\(bu" 4
Commit your change
.Sp
Committing your work will save the change \fIon your local system\fR:
.Sp
.Vb 1
\&  % git commit \-a \-m \*(AqCommit message goes here\*(Aq
.Ve
.Sp
Make sure the commit message describes your change in a single
sentence.  For example, \*(L"Fixed spelling errors in perlhack.pod\*(R".
.IP "\(bu" 4
Send your change to perlbug
.Sp
The next step is to submit your patch to the Perl core ticket system
via email.
.Sp
If your changes are in a single git commit, run the following commands
to write the file as a \s-1MIME\s0 attachment and send it with a meaningful
subject:
.Sp
.Vb 3
\&  % git format\-patch \-1 \-\-attach
\&  % ./perl \-Ilib utils/perlbug \-s "[PATCH] $(
\&        git log \-1 \-\-oneline HEAD)" \-f 0001\-*.patch
.Ve
.Sp
The perlbug program will ask you a few questions about your email
address and the patch you're submitting.  Once you've answered them it
will submit your patch via email.
.Sp
If your changes are in multiple commits, generate a patch file
containing them all, and attach that:
.Sp
.Vb 2
\&  % git format\-patch origin/blead \-\-attach \-\-stdout > patches
\&  % ./perl \-Ilib utils/perlbug \-f patches
.Ve
.Sp
When prompted, pick a subject that summarizes your changes overall and
has \*(L"[\s-1PATCH\s0]\*(R" at the beginning.
.IP "\(bu" 4
Thank you
.Sp
The porters appreciate the time you spent helping to make Perl better.
Thank you!
.IP "\(bu" 4
Next time
.Sp
The next time you wish to make a patch, you need to start from the
latest perl in a pristine state.  Check you don't have any local changes
or added files in your perl check-out which you wish to keep, then run
these commands:
.Sp
.Vb 3
\&  % git pull
\&  % git reset \-\-hard origin/blead
\&  % git clean \-dxf
.Ve
.SH "BUG REPORTING"
.IX Header "BUG REPORTING"
If you want to report a bug in Perl, you must use the \fIperlbug\fR
command line tool.  This tool will ensure that your bug report includes
all the relevant system and configuration information.
.PP
To browse existing Perl bugs and patches, you can use the web interface
at <http://rt.perl.org/>.
.PP
Please check the archive of the perl5\-porters list (see below) and/or
the bug tracking system before submitting a bug report.  Often, you'll
find that the bug has been reported already.
.PP
You can log in to the bug tracking system and comment on existing bug
reports.  If you have additional information regarding an existing bug,
please add it.  This will help the porters fix the bug.
.SH "PERL 5 PORTERS"
.IX Header "PERL 5 PORTERS"
The perl5\-porters (p5p) mailing list is where the Perl standard
distribution is maintained and developed.  The people who maintain Perl
are also referred to as the \*(L"Perl 5 Porters\*(R", \*(L"p5p\*(R" or just the
\&\*(L"porters\*(R".
.PP
A searchable archive of the list is available at
<http://www.xray.mpe.mpg.de/mailing\-lists/perl5\-porters/>.  There is
also another archive at
<http://archive.develooper.com/perl5\-porters@perl.org/>.
.SS "perl-changes mailing list"
.IX Subsection "perl-changes mailing list"
The perl5\-changes mailing list receives a copy of each patch that gets
submitted to the maintenance and development branches of the perl
repository.  See <http://lists.perl.org/list/perl5\-changes.html> for
subscription and archive information.
.SS "#p5p on \s-1IRC\s0"
.IX Subsection "#p5p on IRC"
Many porters are also active on the <irc://irc.perl.org/#p5p> channel.
Feel free to join the channel and ask questions about hacking on the
Perl core.
.SH "GETTING THE PERL SOURCE"
.IX Header "GETTING THE PERL SOURCE"
All of Perl's source code is kept centrally in a Git repository at
\&\fIperl5.git.perl.org\fR.  The repository contains many Perl revisions
from Perl 1 onwards and all the revisions from Perforce, the previous
version control system.
.PP
For much more detail on using git with the Perl repository, please see
perlgit.
.SS "Read access via Git"
.IX Subsection "Read access via Git"
You will need a copy of Git for your computer.  You can fetch a copy of
the repository using the git protocol:
.PP
.Vb 1
\&  % git clone git://perl5.git.perl.org/perl.git perl
.Ve
.PP
This clones the repository and makes a local copy in the \fIperl\fR
directory.
.PP
If you cannot use the git protocol for firewall reasons, you can also
clone via http, though this is much slower:
.PP
.Vb 1
\&  % git clone http://perl5.git.perl.org/perl.git perl
.Ve
.SS "Read access via the web"
.IX Subsection "Read access via the web"
You may access the repository over the web.  This allows you to browse
the tree, see recent commits, subscribe to \s-1RSS\s0 feeds for the changes,
search for particular commits and more.  You may access it at
<http://perl5.git.perl.org/perl.git>.  A mirror of the repository is
found at <http://github.com/mirrors/perl>.
.SS "Read access via rsync"
.IX Subsection "Read access via rsync"
You can also choose to use rsync to get a copy of the current source
tree for the bleadperl branch and all maintenance branches:
.PP
.Vb 6
\&  % rsync \-avz rsync://perl5.git.perl.org/perl\-current .
\&  % rsync \-avz rsync://perl5.git.perl.org/perl\-5.12.x .
\&  % rsync \-avz rsync://perl5.git.perl.org/perl\-5.10.x .
\&  % rsync \-avz rsync://perl5.git.perl.org/perl\-5.8.x .
\&  % rsync \-avz rsync://perl5.git.perl.org/perl\-5.6.x .
\&  % rsync \-avz rsync://perl5.git.perl.org/perl\-5.005xx .
.Ve
.PP
(Add the \f(CW\*(C`\-\-delete\*(C'\fR option to remove leftover files.)
.PP
To get a full list of the available sync points:
.PP
.Vb 1
\&  % rsync perl5.git.perl.org::
.Ve
.SS "Write access via git"
.IX Subsection "Write access via git"
If you have a commit bit, please see perlgit for more details on
using git.
.SH "PATCHING PERL"
.IX Header "PATCHING PERL"
If you're planning to do more extensive work than a single small fix,
we encourage you to read the documentation below.  This will help you
focus your work and make your patches easier to incorporate into the
Perl source.
.SS "Submitting patches"
.IX Subsection "Submitting patches"
If you have a small patch to submit, please submit it via perlbug.  You
can also send email directly to perlbug@perl.org.  Please note that
messages sent to perlbug may be held in a moderation queue, so you
won't receive a response immediately.
.PP
You'll know your submission has been processed when you receive an
email from our ticket tracking system.  This email will give you a
ticket number.  Once your patch has made it to the ticket tracking
system, it will also be sent to the perl5\-porters@perl.org list.
.PP
Patches are reviewed and discussed on the p5p list.  Simple,
uncontroversial patches will usually be applied without any discussion.
When the patch is applied, the ticket will be updated and you will
receive email.  In addition, an email will be sent to the p5p list.
.PP
In other cases, the patch will need more work or discussion.  That will
happen on the p5p list.
.PP
You are encouraged to participate in the discussion and advocate for
your patch.  Sometimes your patch may get lost in the shuffle.  It's
appropriate to send a reminder email to p5p if no action has been taken
in a month.  Please remember that the Perl 5 developers are all
volunteers, and be polite.
.PP
Changes are always applied directly to the main development branch,
called \*(L"blead\*(R".  Some patches may be backported to a maintenance
branch.  If you think your patch is appropriate for the maintenance
branch (see \*(L"\s-1MAINTENANCE BRANCHES\*(R"\s0 in perlpolicy), please explain why
when you submit it.
.SS "Getting your patch accepted"
.IX Subsection "Getting your patch accepted"
If you are submitting a code patch there are several things that you
can do to help the Perl 5 Porters accept your patch.
.PP
\fIPatch style\fR
.IX Subsection "Patch style"
.PP
If you used git to check out the Perl source, then using \f(CW\*(C`git
format\-patch\*(C'\fR will produce a patch in a style suitable for Perl.  The
\&\f(CW\*(C`format\-patch\*(C'\fR command produces one patch file for each commit you
made.  If you prefer to send a single patch for all commits, you can
use \f(CW\*(C`git diff\*(C'\fR.
.PP
.Vb 3
\&  % git checkout blead
\&  % git pull
\&  % git diff blead my\-branch\-name
.Ve
.PP
This produces a patch based on the difference between blead and your
current branch.  It's important to make sure that blead is up to date
before producing the diff, that's why we call \f(CW\*(C`git pull\*(C'\fR first.
.PP
We strongly recommend that you use git if possible.  It will make your
life easier, and ours as well.
.PP
However, if you're not using git, you can still produce a suitable
patch.  You'll need a pristine copy of the Perl source to diff against.
The porters prefer unified diffs.  Using \s-1GNU \s0\f(CW\*(C`diff\*(C'\fR, you can produce a
diff like this:
.PP
.Vb 1
\&  % diff \-Npurd perl.pristine perl.mine
.Ve
.PP
Make sure that you \f(CW\*(C`make realclean\*(C'\fR in your copy of Perl to remove any
build artifacts, or you may get a confusing result.
.PP
\fICommit message\fR
.IX Subsection "Commit message"
.PP
As you craft each patch you intend to submit to the Perl core, it's
important to write a good commit message.  This is especially important
if your submission will consist of a series of commits.
.PP
The first line of the commit message should be a short description
without a period.  It should be no longer than the subject line of an
email, 50 characters being a good rule of thumb.
.PP
A lot of Git tools (Gitweb, GitHub, git log \-\-pretty=oneline, ...) will
only display the first line (cut off at 50 characters) when presenting
commit summaries.
.PP
The commit message should include a description of the problem that the
patch corrects or new functionality that the patch adds.
.PP
As a general rule of thumb, your commit message should help a
programmer who knows the Perl core quickly understand what you were
trying to do, how you were trying to do it, and why the change matters
to Perl.
.IP "\(bu" 4
Why
.Sp
Your commit message should describe why the change you are making is
important.  When someone looks at your change in six months or six
years, your intent should be clear.
.Sp
If you're deprecating a feature with the intent of later simplifying
another bit of code, say so.  If you're fixing a performance problem or
adding a new feature to support some other bit of the core, mention
that.
.IP "\(bu" 4
What
.Sp
Your commit message should describe what part of the Perl core you're
changing and what you expect your patch to do.
.IP "\(bu" 4
How
.Sp
While it's not necessary for documentation changes, new tests or
trivial patches, it's often worth explaining how your change works.
Even if it's clear to you today, it may not be clear to a porter next
month or next year.
.PP
A commit message isn't intended to take the place of comments in your
code.  Commit messages should describe the change you made, while code
comments should describe the current state of the code.
.PP
If you've just implemented a new feature, complete with doc, tests and
well-commented code, a brief commit message will often suffice.  If,
however, you've just changed a single character deep in the parser or
lexer, you might need to write a small novel to ensure that future
readers understand what you did and why you did it.
.PP
\fIComments, Comments, Comments\fR
.IX Subsection "Comments, Comments, Comments"
.PP
Be sure to adequately comment your code.  While commenting every line
is unnecessary, anything that takes advantage of side effects of
operators, that creates changes that will be felt outside of the
function being patched, or that others may find confusing should be
documented.  If you are going to err, it is better to err on the side
of adding too many comments than too few.
.PP
The best comments explain \fIwhy\fR the code does what it does, not \fIwhat
it does\fR.
.PP
\fIStyle\fR
.IX Subsection "Style"
.PP
In general, please follow the particular style of the code you are
patching.
.PP
In particular, follow these general guidelines for patching Perl
sources:
.IP "\(bu" 4
8\-wide tabs (no exceptions!)
.IP "\(bu" 4
4\-wide indents for code, 2\-wide indents for nested \s-1CPP\s0 #defines
.IP "\(bu" 4
Try hard not to exceed 79\-columns
.IP "\(bu" 4
\&\s-1ANSI C\s0 prototypes
.IP "\(bu" 4
Uncuddled elses and \*(L"K&R\*(R" style for indenting control constructs
.IP "\(bu" 4
No \*(C+ style (//) comments
.IP "\(bu" 4
Mark places that need to be revisited with \s-1XXX \s0(and revisit often!)
.IP "\(bu" 4
Opening brace lines up with \*(L"if\*(R" when conditional spans multiple lines;
should be at end-of-line otherwise
.IP "\(bu" 4
In function definitions, name starts in column 0 (return value is on
previous line)
.IP "\(bu" 4
Single space after keywords that are followed by parens, no space
between function name and following paren
.IP "\(bu" 4
Avoid assignments in conditionals, but if they're unavoidable, use
extra paren, e.g. \*(L"if (a && (b = c)) ...\*(R"
.IP "\(bu" 4
\&\*(L"return foo;\*(R" rather than \*(L"return(foo);\*(R"
.IP "\(bu" 4
\&\*(L"if (!foo) ...\*(R" rather than \*(L"if (foo == \s-1FALSE\s0) ...\*(R" etc.
.IP "\(bu" 4
Do not declare variables using \*(L"register\*(R".  It may be counterproductive
with modern compilers, and is deprecated in \*(C+, under which the Perl
source is regularly compiled.
.IP "\(bu" 4
In-line functions that are in headers that are accessible to \s-1XS\s0 code
need to be able to compile without warnings with commonly used extra
compilation flags, such as gcc's \f(CW\*(C`\-Wswitch\-default\*(C'\fR which warns
whenever a switch statement does not have a \*(L"default\*(R" case.  The use of
these extra flags is to catch potential problems in legal C code, and
is often used by Perl aggregators, such as Linux distributors.
.PP
\fITest suite\fR
.IX Subsection "Test suite"
.PP
If your patch changes code (rather than just changing documentation),
you should also include one or more test cases which illustrate the bug
you're fixing or validate the new functionality you're adding.  In
general, you should update an existing test file rather than create a
new one.
.PP
Your test suite additions should generally follow these guidelines
(courtesy of Gurusamy Sarathy <gsar@activestate.com>):
.IP "\(bu" 4
Know what you're testing.  Read the docs, and the source.
.IP "\(bu" 4
Tend to fail, not succeed.
.IP "\(bu" 4
Interpret results strictly.
.IP "\(bu" 4
Use unrelated features (this will flush out bizarre interactions).
.IP "\(bu" 4
Use non-standard idioms (otherwise you are not testing \s-1TIMTOWTDI\s0).
.IP "\(bu" 4
Avoid using hardcoded test numbers whenever possible (the \s-1EXPECTED/GOT\s0
found in t/op/tie.t is much more maintainable, and gives better failure
reports).
.IP "\(bu" 4
Give meaningful error messages when a test fails.
.IP "\(bu" 4
Avoid using qx// and \fIsystem()\fR unless you are testing for them.  If you
do use them, make sure that you cover _all_ perl platforms.
.IP "\(bu" 4
Unlink any temporary files you create.
.IP "\(bu" 4
Promote unforeseen warnings to errors with \f(CW$SIG\fR{_\|_WARN_\|_}.
.IP "\(bu" 4
Be sure to use the libraries and modules shipped with the version being
tested, not those that were already installed.
.IP "\(bu" 4
Add comments to the code explaining what you are testing for.
.IP "\(bu" 4
Make updating the '1..42' string unnecessary.  Or make sure that you
update it.
.IP "\(bu" 4
Test _all_ behaviors of a given operator, library, or function.
.Sp
Test all optional arguments.
.Sp
Test return values in various contexts (boolean, scalar, list, lvalue).
.Sp
Use both global and lexical variables.
.Sp
Don't forget the exceptional, pathological cases.
.SS "Patching a core module"
.IX Subsection "Patching a core module"
This works just like patching anything else, with one extra
consideration.
.PP
Modules in the \fIcpan/\fR directory of the source tree are maintained
outside of the Perl core.  When the author updates the module, the
updates are simply copied into the core.  See that module's
documentation or its listing on <http://search.cpan.org/> for more
information on reporting bugs and submitting patches.
.PP
In most cases, patches to modules in \fIcpan/\fR should be sent upstream
and should not be applied to the Perl core individually.  If a patch to
a file in \fIcpan/\fR absolutely cannot wait for the fix to be made
upstream, released to \s-1CPAN\s0 and copied to blead, you must add (or
update) a \f(CW\*(C`CUSTOMIZED\*(C'\fR entry in the \fI\*(L"Porting/Maintainers.pl\*(R"\fR file
to flag that a local modification has been made.  See
\&\fI\*(L"Porting/Maintainers.pl\*(R"\fR for more details.
.PP
In contrast, modules in the \fIdist/\fR directory are maintained in the
core.
.SS "Updating perldelta"
.IX Subsection "Updating perldelta"
For changes significant enough to warrant a \fIpod/perldelta.pod\fR entry,
the porters will greatly appreciate it if you submit a delta entry
along with your actual change.  Significant changes include, but are
not limited to:
.IP "\(bu" 4
Adding, deprecating, or removing core features
.IP "\(bu" 4
Adding, deprecating, removing, or upgrading core or dual-life modules
.IP "\(bu" 4
Adding new core tests
.IP "\(bu" 4
Fixing security issues and user-visible bugs in the core
.IP "\(bu" 4
Changes that might break existing code, either on the perl or C level
.IP "\(bu" 4
Significant performance improvements
.IP "\(bu" 4
Adding, removing, or significantly changing documentation in the
\&\fIpod/\fR directory
.IP "\(bu" 4
Important platform-specific changes
.PP
Please make sure you add the perldelta entry to the right section
within \fIpod/perldelta.pod\fR.  More information on how to write good
perldelta entries is available in the \f(CW\*(C`Style\*(C'\fR section of
\&\fIPorting/how_to_write_a_perldelta.pod\fR.
.SS "What makes for a good patch?"
.IX Subsection "What makes for a good patch?"
New features and extensions to the language can be contentious.  There
is no specific set of criteria which determine what features get added,
but here are some questions to consider when developing a patch:
.PP
\fIDoes the concept match the general goals of Perl?\fR
.IX Subsection "Does the concept match the general goals of Perl?"
.PP
Our goals include, but are not limited to:
.IP "1." 4
Keep it fast, simple, and useful.
.IP "2." 4
Keep features/concepts as orthogonal as possible.
.IP "3." 4
No arbitrary limits (platforms, data sizes, cultures).
.IP "4." 4
Keep it open and exciting to use/patch/advocate Perl everywhere.
.IP "5." 4
Either assimilate new technologies, or build bridges to them.
.PP
\fIWhere is the implementation?\fR
.IX Subsection "Where is the implementation?"
.PP
All the talk in the world is useless without an implementation.  In
almost every case, the person or people who argue for a new feature
will be expected to be the ones who implement it.  Porters capable of
coding new features have their own agendas, and are not available to
implement your (possibly good) idea.
.PP
\fIBackwards compatibility\fR
.IX Subsection "Backwards compatibility"
.PP
It's a cardinal sin to break existing Perl programs.  New warnings can
be contentious\*(--some say that a program that emits warnings is not
broken, while others say it is.  Adding keywords has the potential to
break programs, changing the meaning of existing token sequences or
functions might break programs.
.PP
The Perl 5 core includes mechanisms to help porters make backwards
incompatible changes more compatible such as the feature and
deprecate modules.  Please use them when appropriate.
.PP
\fICould it be a module instead?\fR
.IX Subsection "Could it be a module instead?"
.PP
Perl 5 has extension mechanisms, modules and \s-1XS,\s0 specifically to avoid
the need to keep changing the Perl interpreter.  You can write modules
that export functions, you can give those functions prototypes so they
can be called like built-in functions, you can even write \s-1XS\s0 code to
mess with the runtime data structures of the Perl interpreter if you
want to implement really complicated things.
.PP
Whenever possible, new features should be prototyped in a \s-1CPAN\s0 module
before they will be considered for the core.
.PP
\fIIs the feature generic enough?\fR
.IX Subsection "Is the feature generic enough?"
.PP
Is this something that only the submitter wants added to the language,
or is it broadly useful?  Sometimes, instead of adding a feature with a
tight focus, the porters might decide to wait until someone implements
the more generalized feature.
.PP
\fIDoes it potentially introduce new bugs?\fR
.IX Subsection "Does it potentially introduce new bugs?"
.PP
Radical rewrites of large chunks of the Perl interpreter have the
potential to introduce new bugs.
.PP
\fIHow big is it?\fR
.IX Subsection "How big is it?"
.PP
The smaller and more localized the change, the better.  Similarly, a
series of small patches is greatly preferred over a single large patch.
.PP
\fIDoes it preclude other desirable features?\fR
.IX Subsection "Does it preclude other desirable features?"
.PP
A patch is likely to be rejected if it closes off future avenues of
development.  For instance, a patch that placed a true and final
interpretation on prototypes is likely to be rejected because there are
still options for the future of prototypes that haven't been addressed.
.PP
\fIIs the implementation robust?\fR
.IX Subsection "Is the implementation robust?"
.PP
Good patches (tight code, complete, correct) stand more chance of going
in.  Sloppy or incorrect patches might be placed on the back burner
until the pumpking has time to fix, or might be discarded altogether
without further notice.
.PP
\fIIs the implementation generic enough to be portable?\fR
.IX Subsection "Is the implementation generic enough to be portable?"
.PP
The worst patches make use of system-specific features.  It's highly
unlikely that non-portable additions to the Perl language will be
accepted.
.PP
\fIIs the implementation tested?\fR
.IX Subsection "Is the implementation tested?"
.PP
Patches which change behaviour (fixing bugs or introducing new
features) must include regression tests to verify that everything works
as expected.
.PP
Without tests provided by the original author, how can anyone else
changing perl in the future be sure that they haven't unwittingly
broken the behaviour the patch implements? And without tests, how can
the patch's author be confident that his/her hard work put into the
patch won't be accidentally thrown away by someone in the future?
.PP
\fIIs there enough documentation?\fR
.IX Subsection "Is there enough documentation?"
.PP
Patches without documentation are probably ill-thought out or
incomplete.  No features can be added or changed without documentation,
so submitting a patch for the appropriate pod docs as well as the
source code is important.
.PP
\fIIs there another way to do it?\fR
.IX Subsection "Is there another way to do it?"
.PP
Larry said "Although the Perl Slogan is \fIThere's More Than One Way to
Do It\fR, I hesitate to make 10 ways to do something".  This is a tricky
heuristic to navigate, though\*(--one man's essential addition is another
man's pointless cruft.
.PP
\fIDoes it create too much work?\fR
.IX Subsection "Does it create too much work?"
.PP
Work for the pumpking, work for Perl programmers, work for module
authors, ... Perl is supposed to be easy.
.PP
\fIPatches speak louder than words\fR
.IX Subsection "Patches speak louder than words"
.PP
Working code is always preferred to pie-in-the-sky ideas.  A patch to
add a feature stands a much higher chance of making it to the language
than does a random feature request, no matter how fervently argued the
request might be.  This ties into \*(L"Will it be useful?\*(R", as the fact
that someone took the time to make the patch demonstrates a strong
desire for the feature.
.SH "TESTING"
.IX Header "TESTING"
The core uses the same testing style as the rest of Perl, a simple
\&\*(L"ok/not ok\*(R" run through Test::Harness, but there are a few special
considerations.
.PP
There are three ways to write a test in the core: Test::More,
\&\fIt/test.pl\fR and ad hoc \f(CW\*(C`print $test ? "ok 42\en" : "not ok 42\en"\*(C'\fR.
The decision of which to use depends on what part of the test suite
you're working on.  This is a measure to prevent a high-level failure
(such as Config.pm breaking) from causing basic functionality tests to
fail.
.PP
The \fIt/test.pl\fR library provides some of the features of
Test::More, but avoids loading most modules and uses as few core
features as possible.
.PP
If you write your own test, use the Test Anything
Protocol <http://testanything.org>.
.IP "\(bu" 4
\&\fIt/base\fR, \fIt/comp\fR and \fIt/opbasic\fR
.Sp
Since we don't know if require works, or even subroutines, use ad hoc
tests for these three.  Step carefully to avoid using the feature being
tested.  Tests in \fIt/opbasic\fR, for instance, have been placed there
rather than in \fIt/op\fR because they test functionality which
\&\fIt/test.pl\fR presumes has already been demonstrated to work.
.IP "\(bu" 4
\&\fIt/cmd\fR, \fIt/run\fR, \fIt/io\fR and \fIt/op\fR
.Sp
Now that basic \fIrequire()\fR and subroutines are tested, you can use the
\&\fIt/test.pl\fR library.
.Sp
You can also use certain libraries like Config conditionally, but be
sure to skip the test gracefully if it's not there.
.IP "\(bu" 4
Everything else
.Sp
Now that the core of Perl is tested, Test::More can and should be
used.  You can also use the full suite of core modules in the tests.
.PP
When you say \*(L"make test\*(R", Perl uses the \fIt/TEST\fR program to run the
test suite (except under Win32 where it uses \fIt/harness\fR instead).
All tests are run from the \fIt/\fR directory, \fBnot\fR the directory which
contains the test.  This causes some problems with the tests in
\&\fIlib/\fR, so here's some opportunity for some patching.
.PP
You must be triply conscious of cross-platform concerns.  This usually
boils down to using File::Spec and avoiding things like \f(CW\*(C`fork()\*(C'\fR
and \f(CW\*(C`system()\*(C'\fR unless absolutely necessary.
.ie n .SS "Special ""make test"" targets"
.el .SS "Special \f(CWmake test\fP targets"
.IX Subsection "Special make test targets"
There are various special make targets that can be used to test Perl
slightly differently than the standard \*(L"test\*(R" target.  Not all them are
expected to give a 100% success rate.  Many of them have several
aliases, and many of them are not available on certain operating
systems.
.IP "\(bu" 4
test_porting
.Sp
This runs some basic sanity tests on the source tree and helps catch
basic errors before you submit a patch.
.IP "\(bu" 4
minitest
.Sp
Run \fIminiperl\fR on \fIt/base\fR, \fIt/comp\fR, \fIt/cmd\fR, \fIt/run\fR, \fIt/io\fR,
\&\fIt/op\fR, \fIt/uni\fR and \fIt/mro\fR tests.
.IP "\(bu" 4
test.valgrind check.valgrind
.Sp
(Only in Linux) Run all the tests using the memory leak + naughty
memory access tool \*(L"valgrind\*(R".  The log files will be named
\&\fItestname.valgrind\fR.
.IP "\(bu" 4
test_harness
.Sp
Run the test suite with the \fIt/harness\fR controlling program, instead
of \fIt/TEST\fR.  \fIt/harness\fR is more sophisticated, and uses the
Test::Harness module, thus using this test target supposes that perl
mostly works.  The main advantage for our purposes is that it prints a
detailed summary of failed tests at the end.  Also, unlike \fIt/TEST\fR,
it doesn't redirect stderr to stdout.
.Sp
Note that under Win32 \fIt/harness\fR is always used instead of \fIt/TEST\fR,
so there is no special \*(L"test_harness\*(R" target.
.Sp
Under Win32's \*(L"test\*(R" target you may use the \s-1TEST_SWITCHES\s0 and
\&\s-1TEST_FILES\s0 environment variables to control the behaviour of
\&\fIt/harness\fR.  This means you can say
.Sp
.Vb 2
\&    nmake test TEST_FILES="op/*.t"
\&    nmake test TEST_SWITCHES="\-torture" TEST_FILES="op/*.t"
.Ve
.IP "\(bu" 4
test-notty test_notty
.Sp
Sets \s-1PERL_SKIP_TTY_TEST\s0 to true before running normal test.
.SS "Parallel tests"
.IX Subsection "Parallel tests"
The core distribution can now run its regression tests in parallel on
Unix-like platforms.  Instead of running \f(CW\*(C`make test\*(C'\fR, set \f(CW\*(C`TEST_JOBS\*(C'\fR
in your environment to the number of tests to run in parallel, and run
\&\f(CW\*(C`make test_harness\*(C'\fR.  On a Bourne-like shell, this can be done as
.PP
.Vb 1
\&    TEST_JOBS=3 make test_harness  # Run 3 tests in parallel
.Ve
.PP
An environment variable is used, rather than parallel make itself,
because TAP::Harness needs to be able to schedule individual
non-conflicting test scripts itself, and there is no standard interface
to \f(CW\*(C`make\*(C'\fR utilities to interact with their job schedulers.
.PP
Note that currently some test scripts may fail when run in parallel
(most notably \fIext/IO/t/io_dir.t\fR).  If necessary, run just the
failing scripts again sequentially and see if the failures go away.
.SS "Running tests by hand"
.IX Subsection "Running tests by hand"
You can run part of the test suite by hand by using one of the
following commands from the \fIt/\fR directory:
.PP
.Vb 1
\&    ./perl \-I../lib TEST list\-of\-.t\-files
.Ve
.PP
or
.PP
.Vb 1
\&    ./perl \-I../lib harness list\-of\-.t\-files
.Ve
.PP
(If you don't specify test scripts, the whole test suite will be run.)
.SS "Using \fIt/harness\fP for testing"
.IX Subsection "Using t/harness for testing"
If you use \f(CW\*(C`harness\*(C'\fR for testing, you have several command line
options available to you.  The arguments are as follows, and are in the
order that they must appear if used together.
.PP
.Vb 2
\&    harness \-v \-torture \-re=pattern LIST OF FILES TO TEST
\&    harness \-v \-torture \-re LIST OF PATTERNS TO MATCH
.Ve
.PP
If \f(CW\*(C`LIST OF FILES TO TEST\*(C'\fR is omitted, the file list is obtained from
the manifest.  The file list may include shell wildcards which will be
expanded out.
.IP "\(bu" 4
\&\-v
.Sp
Run the tests under verbose mode so you can see what tests were run,
and debug output.
.IP "\(bu" 4
\&\-torture
.Sp
Run the torture tests as well as the normal set.
.IP "\(bu" 4
\&\-re=PATTERN
.Sp
Filter the file list so that all the test files run match \s-1PATTERN.\s0
Note that this form is distinct from the \fB\-re \s-1LIST OF PATTERNS\s0\fR form
below in that it allows the file list to be provided as well.
.IP "\(bu" 4
\&\-re \s-1LIST OF PATTERNS\s0
.Sp
Filter the file list so that all the test files run match
/(LIST|OF|PATTERNS)/.  Note that with this form the patterns are joined
by '|' and you cannot supply a list of files, instead the test files
are obtained from the \s-1MANIFEST.\s0
.PP
You can run an individual test by a command similar to
.PP
.Vb 1
\&    ./perl \-I../lib path/to/foo.t
.Ve
.PP
except that the harnesses set up some environment variables that may
affect the execution of the test:
.IP "\(bu" 4
PERL_CORE=1
.Sp
indicates that we're running this test as part of the perl core test
suite.  This is useful for modules that have a dual life on \s-1CPAN.\s0
.IP "\(bu" 4
PERL_DESTRUCT_LEVEL=2
.Sp
is set to 2 if it isn't set already (see
\&\*(L"\s-1PERL_DESTRUCT_LEVEL\*(R"\s0 in perlhacktips).
.IP "\(bu" 4
\&\s-1PERL\s0
.Sp
(used only by \fIt/TEST\fR) if set, overrides the path to the perl
executable that should be used to run the tests (the default being
\&\fI./perl\fR).
.IP "\(bu" 4
\&\s-1PERL_SKIP_TTY_TEST\s0
.Sp
if set, tells to skip the tests that need a terminal.  It's actually
set automatically by the Makefile, but can also be forced artificially
by running 'make test_notty'.
.PP
\fIOther environment variables that may influence tests\fR
.IX Subsection "Other environment variables that may influence tests"
.IP "\(bu" 4
PERL_TEST_Net_Ping
.Sp
Setting this variable runs all the Net::Ping modules tests, otherwise
some tests that interact with the outside world are skipped.  See
perl58delta.
.IP "\(bu" 4
\&\s-1PERL_TEST_NOVREXX\s0
.Sp
Setting this variable skips the vrexx.t tests for \s-1OS2::REXX.\s0
.IP "\(bu" 4
\&\s-1PERL_TEST_NUMCONVERTS\s0
.Sp
This sets a variable in op/numconvert.t.
.IP "\(bu" 4
\&\s-1PERL_TEST_MEMORY\s0
.Sp
Setting this variable includes the tests in \fIt/bigmem/\fR.  This should
be set to the number of gigabytes of memory available for testing, eg.
\&\f(CW\*(C`PERL_TEST_MEMORY=4\*(C'\fR indicates that tests that require 4GiB of
available memory can be run safely.
.PP
See also the documentation for the Test and Test::Harness modules, for
more environment variables that affect testing.
.SH "MORE READING FOR GUTS HACKERS"
.IX Header "MORE READING FOR GUTS HACKERS"
To hack on the Perl guts, you'll need to read the following things:
.IP "\(bu" 4
perlsource
.Sp
An overview of the Perl source tree.  This will help you find the files
you're looking for.
.IP "\(bu" 4
perlinterp
.Sp
An overview of the Perl interpreter source code and some details on how
Perl does what it does.
.IP "\(bu" 4
perlhacktut
.Sp
This document walks through the creation of a small patch to Perl's C
code.  If you're just getting started with Perl core hacking, this will
help you understand how it works.
.IP "\(bu" 4
perlhacktips
.Sp
More details on hacking the Perl core.  This document focuses on lower
level details such as how to write tests, compilation issues,
portability, debugging, etc.
.Sp
If you plan on doing serious C hacking, make sure to read this.
.IP "\(bu" 4
perlguts
.Sp
This is of paramount importance, since it's the documentation of what
goes where in the Perl source.  Read it over a couple of times and it
might start to make sense \- don't worry if it doesn't yet, because the
best way to study it is to read it in conjunction with poking at Perl
source, and we'll do that later on.
.Sp
Gisle Aas's \*(L"illustrated perlguts\*(R", also known as \fIillguts\fR, has very
helpful pictures:
.Sp
<http://search.cpan.org/dist/illguts/>
.IP "\(bu" 4
perlxstut and perlxs
.Sp
A working knowledge of \s-1XSUB\s0 programming is incredibly useful for core
hacking; XSUBs use techniques drawn from the \s-1PP\s0 code, the portion of
the guts that actually executes a Perl program.  It's a lot gentler to
learn those techniques from simple examples and explanation than from
the core itself.
.IP "\(bu" 4
perlapi
.Sp
The documentation for the Perl \s-1API\s0 explains what some of the internal
functions do, as well as the many macros used in the source.
.IP "\(bu" 4
\&\fIPorting/pumpkin.pod\fR
.Sp
This is a collection of words of wisdom for a Perl porter; some of it
is only useful to the pumpkin holder, but most of it applies to anyone
wanting to go about Perl development.
.SH "CPAN TESTERS AND PERL SMOKERS"
.IX Header "CPAN TESTERS AND PERL SMOKERS"
The \s-1CPAN\s0 testers ( http://testers.cpan.org/ ) are a group of volunteers
who test \s-1CPAN\s0 modules on a variety of platforms.
.PP
Perl Smokers ( http://www.nntp.perl.org/group/perl.daily\-build/ and
http://www.nntp.perl.org/group/perl.daily\-build.reports/ )
automatically test Perl source releases on platforms with various
configurations.
.PP
Both efforts welcome volunteers.  In order to get involved in smoke
testing of the perl itself visit
<http://search.cpan.org/dist/Test\-Smoke/>.  In order to start smoke
testing \s-1CPAN\s0 modules visit
<http://search.cpan.org/dist/CPANPLUS\-YACSmoke/> or
<http://search.cpan.org/dist/minismokebox/> or
<http://search.cpan.org/dist/CPAN\-Reporter/>.
.SH "WHAT NEXT?"
.IX Header "WHAT NEXT?"
If you've read all the documentation in the document and the ones
listed above, you're more than ready to hack on Perl.
.PP
Here's some more recommendations
.IP "\(bu" 4
Subscribe to perl5\-porters, follow the patches and try and understand
them; don't be afraid to ask if there's a portion you're not clear on \-
who knows, you may unearth a bug in the patch...
.IP "\(bu" 4
Do read the \s-1README\s0 associated with your operating system, e.g.
\&\s-1README\s0.aix on the \s-1IBM AIX OS. \s0 Don't hesitate to supply patches to that
\&\s-1README\s0 if you find anything missing or changed over a new \s-1OS\s0 release.
.IP "\(bu" 4
Find an area of Perl that seems interesting to you, and see if you can
work out how it works.  Scan through the source, and step over it in
the debugger.  Play, poke, investigate, fiddle! You'll probably get to
understand not just your chosen area but a much wider range of
\&\fIperl\fR's activity as well, and probably sooner than you'd think.
.ie n .SS """The Road goes ever on and on, down from the door where it began."""
.el .SS "``The Road goes ever on and on, down from the door where it began.''"
.IX Subsection "The Road goes ever on and on, down from the door where it began."
If you can do these things, you've started on the long road to Perl
porting.  Thanks for wanting to help make Perl better \- and happy
hacking!
.SS "Metaphoric Quotations"
.IX Subsection "Metaphoric Quotations"
If you recognized the quote about the Road above, you're in luck.
.PP
Most software projects begin each file with a literal description of
each file's purpose.  Perl instead begins each with a literary allusion
to that file's purpose.
.PP
Like chapters in many books, all top-level Perl source files (along
with a few others here and there) begin with an epigrammatic
inscription that alludes, indirectly and metaphorically, to the
material you're about to read.
.PP
Quotations are taken from writings of J.R.R. Tolkien pertaining to his
Legendarium, almost always from \fIThe Lord of the Rings\fR.  Chapters and
page numbers are given using the following editions:
.IP "\(bu" 4
\&\fIThe Hobbit\fR, by J.R.R. Tolkien.  The hardcover, 70th\-anniversary
edition of 2007 was used, published in the \s-1UK\s0 by Harper Collins
Publishers and in the \s-1US\s0 by the Houghton Mifflin Company.
.IP "\(bu" 4
\&\fIThe Lord of the Rings\fR, by J.R.R. Tolkien.  The hardcover,
50th\-anniversary edition of 2004 was used, published in the \s-1UK\s0 by
Harper Collins Publishers and in the \s-1US\s0 by the Houghton Mifflin
Company.
.IP "\(bu" 4
\&\fIThe Lays of Beleriand\fR, by J.R.R. Tolkien and published posthumously
by his son and literary executor, C.J.R. Tolkien, being the 3rd of the
12 volumes in Christopher's mammoth \fIHistory of Middle Earth\fR.  Page
numbers derive from the hardcover edition, first published in 1983 by
George Allen & Unwin; no page numbers changed for the special 3\-volume
omnibus edition of 2002 or the various trade-paper editions, all again
now by Harper Collins or Houghton Mifflin.
.PP
Other \s-1JRRT\s0 books fair game for quotes would thus include \fIThe
Adventures of Tom Bombadil\fR, \fIThe Silmarillion\fR, \fIUnfinished Tales\fR,
and \fIThe Tale of the Children of Hurin\fR, all but the first
posthumously assembled by \s-1CJRT. \s0 But \fIThe Lord of the Rings\fR itself is
perfectly fine and probably best to quote from, provided you can find a
suitable quote there.
.PP
So if you were to supply a new, complete, top-level source file to add
to Perl, you should conform to this peculiar practice by yourself
selecting an appropriate quotation from Tolkien, retaining the original
spelling and punctuation and using the same format the rest of the
quotes are in.  Indirect and oblique is just fine; remember, it's a
metaphor, so being meta is, after all, what it's for.
.SH "AUTHOR"
.IX Header "AUTHOR"
This document was originally written by Nathan Torkington, and is
maintained by the perl5\-porters mailing list.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perlhack5.16.1                               0100644 0001750 0001750 00000125650 12566207420 023050  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLHACK 1"
.TH PERLHACK 1 "2013-03-04" "perl v5.16.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlhack \- How to hack on Perl
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document explains how Perl development works. It includes details
about the Perl 5 Porters email list, the Perl repository, the Perlbug
bug tracker, patch guidelines, and commentary on Perl development
philosophy.
.SH "SUPER QUICK PATCH GUIDE"
.IX Header "SUPER QUICK PATCH GUIDE"
If you just want to submit a single small patch like a pod fix, a test
for a bug, comment fixes, etc., it's easy! Here's how:
.IP "\(bu" 4
Check out the source repository
.Sp
The perl source is in a git repository. You can clone the repository
with the following command:
.Sp
.Vb 1
\&  % git clone git://perl5.git.perl.org/perl.git perl
.Ve
.IP "\(bu" 4
Make your change
.Sp
Hack, hack, hack.
.IP "\(bu" 4
Test your change
.Sp
You can run all the tests with the following commands:
.Sp
.Vb 2
\&  % ./Configure \-des \-Dusedevel
\&  % make test
.Ve
.Sp
Keep hacking until the tests pass.
.IP "\(bu" 4
Commit your change
.Sp
Committing your work will save the change \fIon your local system\fR:
.Sp
.Vb 1
\&  % git commit \-a \-m \*(AqCommit message goes here\*(Aq
.Ve
.Sp
Make sure the commit message describes your change in a single
sentence. For example, \*(L"Fixed spelling errors in perlhack.pod\*(R".
.IP "\(bu" 4
Send your change to perlbug
.Sp
The next step is to submit your patch to the Perl core ticket system
via email.
.Sp
Assuming your patch consists of a single git commit, the following
writes the file as a \s-1MIME\s0 attachment, and sends it with a meaningful
subject:
.Sp
.Vb 2
\&  % git format\-patch \-1 \-\-attach
\&  % perlbug \-s "[PATCH] $(git log \-1 \-\-oneline HEAD)" \-f 0001\-*.patch
.Ve
.Sp
The perlbug program will ask you a few questions about your email
address and the patch you're submitting. Once you've answered them it
will submit your patch via email.
.IP "\(bu" 4
Thank you
.Sp
The porters appreciate the time you spent helping to make Perl better.
Thank you!
.SH "BUG REPORTING"
.IX Header "BUG REPORTING"
If you want to report a bug in Perl, you must use the \fIperlbug\fR
command line tool. This tool will ensure that your bug report includes
all the relevant system and configuration information.
.PP
To browse existing Perl bugs and patches, you can use the web interface
at <http://rt.perl.org/>.
.PP
Please check the archive of the perl5\-porters list (see below) and/or
the bug tracking system before submitting a bug report. Often, you'll
find that the bug has been reported already.
.PP
You can log in to the bug tracking system and comment on existing bug
reports. If you have additional information regarding an existing bug,
please add it. This will help the porters fix the bug.
.SH "PERL 5 PORTERS"
.IX Header "PERL 5 PORTERS"
The perl5\-porters (p5p) mailing list is where the Perl standard
distribution is maintained and developed. The people who maintain Perl
are also referred to as the \*(L"Perl 5 Porters\*(R", \*(L"p5p\*(R" or just the
\&\*(L"porters\*(R".
.PP
A searchable archive of the list is available at
http://www.xray.mpe.mpg.de/mailing\-lists/perl5\-porters/ <http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/>. There is
also another archive at
http://archive.develooper.com/perl5\-porters@perl.org/ <http://archive.develooper.com/perl5-porters@perl.org/>.
.SS "perl-changes mailing list"
.IX Subsection "perl-changes mailing list"
The perl5\-changes mailing list receives a copy of each patch that gets
submitted to the maintenance and development branches of the perl
repository. See http://lists.perl.org/list/perl5\-changes.html <http://lists.perl.org/list/perl5-changes.html> for
subscription and archive information.
.SS "#p5p on \s-1IRC\s0"
.IX Subsection "#p5p on IRC"
Many porters are also active on the <irc://irc.perl.org/#p5p> channel.
Feel free to join the channel and ask questions about hacking on the
Perl core.
.SH "GETTING THE PERL SOURCE"
.IX Header "GETTING THE PERL SOURCE"
All of Perl's source code is kept centrally in a Git repository at
\&\fIperl5.git.perl.org\fR. The repository contains many Perl revisions from
Perl 1 onwards and all the revisions from Perforce, the previous
version control system.
.PP
For much more detail on using git with the Perl repository, please see
perlgit.
.SS "Read access via Git"
.IX Subsection "Read access via Git"
You will need a copy of Git for your computer. You can fetch a copy of
the repository using the git protocol:
.PP
.Vb 1
\&  % git clone git://perl5.git.perl.org/perl.git perl
.Ve
.PP
This clones the repository and makes a local copy in the \fIperl\fR
directory.
.PP
If you cannot use the git protocol for firewall reasons, you can also
clone via http, though this is much slower:
.PP
.Vb 1
\&  % git clone http://perl5.git.perl.org/perl.git perl
.Ve
.SS "Read access via the web"
.IX Subsection "Read access via the web"
You may access the repository over the web. This allows you to browse
the tree, see recent commits, subscribe to \s-1RSS\s0 feeds for the changes,
search for particular commits and more. You may access it at
<http://perl5.git.perl.org/perl.git>. A mirror of the repository is
found at <http://github.com/mirrors/perl>.
.SS "Read access via rsync"
.IX Subsection "Read access via rsync"
You can also choose to use rsync to get a copy of the current source
tree for the bleadperl branch and all maintenance branches:
.PP
.Vb 6
\&    % rsync \-avz rsync://perl5.git.perl.org/perl\-current .
\&    % rsync \-avz rsync://perl5.git.perl.org/perl\-5.12.x .
\&    % rsync \-avz rsync://perl5.git.perl.org/perl\-5.10.x .
\&    % rsync \-avz rsync://perl5.git.perl.org/perl\-5.8.x .
\&    % rsync \-avz rsync://perl5.git.perl.org/perl\-5.6.x .
\&    % rsync \-avz rsync://perl5.git.perl.org/perl\-5.005xx .
.Ve
.PP
(Add the \f(CW\*(C`\-\-delete\*(C'\fR option to remove leftover files.)
.PP
To get a full list of the available sync points:
.PP
.Vb 1
\&    % rsync perl5.git.perl.org::
.Ve
.SS "Write access via git"
.IX Subsection "Write access via git"
If you have a commit bit, please see perlgit for more details on
using git.
.SH "PATCHING PERL"
.IX Header "PATCHING PERL"
If you're planning to do more extensive work than a single small fix,
we encourage you to read the documentation below. This will help you
focus your work and make your patches easier to incorporate into the
Perl source.
.SS "Submitting patches"
.IX Subsection "Submitting patches"
If you have a small patch to submit, please submit it via perlbug. You
can also send email directly to perlbug@perl.org. Please note that
messages sent to perlbug may be held in a moderation queue, so you
won't receive a response immediately.
.PP
You'll know your submission has been processed when you receive an
email from our ticket tracking system. This email will give you a
ticket number. Once your patch has made it to the ticket tracking
system, it will also be sent to the perl5\-porters@perl.org list.
.PP
Patches are reviewed and discussed on the p5p list. Simple,
uncontroversial patches will usually be applied without any discussion.
When the patch is applied, the ticket will be updated and you will
receive email. In addition, an email will be sent to the p5p list.
.PP
In other cases, the patch will need more work or discussion. That will
happen on the p5p list.
.PP
You are encouraged to participate in the discussion and advocate for
your patch. Sometimes your patch may get lost in the shuffle. It's
appropriate to send a reminder email to p5p if no action has been taken
in a month. Please remember that the Perl 5 developers are all
volunteers, and be polite.
.PP
Changes are always applied directly to the main development branch,
called \*(L"blead\*(R". Some patches may be backported to a maintenance branch.
If you think your patch is appropriate for the maintenance branch,
please explain why when you submit it.
.SS "Getting your patch accepted"
.IX Subsection "Getting your patch accepted"
If you are submitting a code patch there are several things that you
can do to help the Perl 5 Porters accept your patch.
.PP
\fIPatch style\fR
.IX Subsection "Patch style"
.PP
If you used git to check out the Perl source, then using \f(CW\*(C`git
format\-patch\*(C'\fR will produce a patch in a style suitable for Perl. The
\&\f(CW\*(C`format\-patch\*(C'\fR command produces one patch file for each commit you
made. If you prefer to send a single patch for all commits, you can use
\&\f(CW\*(C`git diff\*(C'\fR.
.PP
.Vb 3
\&  % git checkout blead
\&  % git pull
\&  % git diff blead my\-branch\-name
.Ve
.PP
This produces a patch based on the difference between blead and your
current branch. It's important to make sure that blead is up to date
before producing the diff, that's why we call \f(CW\*(C`git pull\*(C'\fR first.
.PP
We strongly recommend that you use git if possible. It will make your
life easier, and ours as well.
.PP
However, if you're not using git, you can still produce a suitable
patch. You'll need a pristine copy of the Perl source to diff against.
The porters prefer unified diffs. Using \s-1GNU\s0 \f(CW\*(C`diff\*(C'\fR, you can produce a
diff like this:
.PP
.Vb 1
\&  % diff \-Npurd perl.pristine perl.mine
.Ve
.PP
Make sure that you \f(CW\*(C`make realclean\*(C'\fR in your copy of Perl to remove any
build artifacts, or you may get a confusing result.
.PP
\fICommit message\fR
.IX Subsection "Commit message"
.PP
As you craft each patch you intend to submit to the Perl core, it's
important to write a good commit message. This is especially important
if your submission will consist of a series of commits.
.PP
The first line of the commit message should be a short description
without a period. It should be no longer than the subject line of an
email, 50 characters being a good rule of thumb.
.PP
A lot of Git tools (Gitweb, GitHub, git log \-\-pretty=oneline, ...) will
only display the first line (cut off at 50 characters) when presenting
commit summaries.
.PP
The commit message should include a description of the problem that the
patch corrects or new functionality that the patch adds.
.PP
As a general rule of thumb, your commit message should help a
programmer who knows the Perl core quickly understand what you were
trying to do, how you were trying to do it, and why the change matters
to Perl.
.IP "\(bu" 4
Why
.Sp
Your commit message should describe why the change you are making is
important. When someone looks at your change in six months or six
years, your intent should be clear.
.Sp
If you're deprecating a feature with the intent of later simplifying
another bit of code, say so. If you're fixing a performance problem or
adding a new feature to support some other bit of the core, mention
that.
.IP "\(bu" 4
What
.Sp
Your commit message should describe what part of the Perl core you're
changing and what you expect your patch to do.
.IP "\(bu" 4
How
.Sp
While it's not necessary for documentation changes, new tests or
trivial patches, it's often worth explaining how your change works.
Even if it's clear to you today, it may not be clear to a porter next
month or next year.
.PP
A commit message isn't intended to take the place of comments in your
code. Commit messages should describe the change you made, while code
comments should describe the current state of the code.
.PP
If you've just implemented a new feature, complete with doc, tests and
well-commented code, a brief commit message will often suffice. If,
however, you've just changed a single character deep in the parser or
lexer, you might need to write a small novel to ensure that future
readers understand what you did and why you did it.
.PP
\fIComments, Comments, Comments\fR
.IX Subsection "Comments, Comments, Comments"
.PP
Be sure to adequately comment your code. While commenting every line is
unnecessary, anything that takes advantage of side effects of
operators, that creates changes that will be felt outside of the
function being patched, or that others may find confusing should be
documented. If you are going to err, it is better to err on the side of
adding too many comments than too few.
.PP
The best comments explain \fIwhy\fR the code does what it does, not \fIwhat
it does\fR.
.PP
\fIStyle\fR
.IX Subsection "Style"
.PP
In general, please follow the particular style of the code you are
patching.
.PP
In particular, follow these general guidelines for patching Perl
sources:
.IP "\(bu" 4
8\-wide tabs (no exceptions!)
.IP "\(bu" 4
4\-wide indents for code, 2\-wide indents for nested \s-1CPP\s0 #defines
.IP "\(bu" 4
Try hard not to exceed 79\-columns
.IP "\(bu" 4
\&\s-1ANSI\s0 C prototypes
.IP "\(bu" 4
Uncuddled elses and \*(L"K&R\*(R" style for indenting control constructs
.IP "\(bu" 4
No \*(C+ style (//) comments
.IP "\(bu" 4
Mark places that need to be revisited with \s-1XXX\s0 (and revisit often!)
.IP "\(bu" 4
Opening brace lines up with \*(L"if\*(R" when conditional spans multiple lines;
should be at end-of-line otherwise
.IP "\(bu" 4
In function definitions, name starts in column 0 (return value is on
previous line)
.IP "\(bu" 4
Single space after keywords that are followed by parens, no space
between function name and following paren
.IP "\(bu" 4
Avoid assignments in conditionals, but if they're unavoidable, use
extra paren, e.g. \*(L"if (a && (b = c)) ...\*(R"
.IP "\(bu" 4
\&\*(L"return foo;\*(R" rather than \*(L"return(foo);\*(R"
.IP "\(bu" 4
\&\*(L"if (!foo) ...\*(R" rather than \*(L"if (foo == \s-1FALSE\s0) ...\*(R" etc.
.PP
\fITest suite\fR
.IX Subsection "Test suite"
.PP
If your patch changes code (rather than just changing documentation),
you should also include one or more test cases which illustrate the bug
you're fixing or validate the new functionality you're adding. In
general, you should update an existing test file rather than create a
new one.
.PP
Your test suite additions should generally follow these guidelines
(courtesy of Gurusamy Sarathy <gsar@activestate.com>):
.IP "\(bu" 4
Know what you're testing. Read the docs, and the source.
.IP "\(bu" 4
Tend to fail, not succeed.
.IP "\(bu" 4
Interpret results strictly.
.IP "\(bu" 4
Use unrelated features (this will flush out bizarre interactions).
.IP "\(bu" 4
Use non-standard idioms (otherwise you are not testing \s-1TIMTOWTDI\s0).
.IP "\(bu" 4
Avoid using hardcoded test numbers whenever possible (the \s-1EXPECTED/GOT\s0
found in t/op/tie.t is much more maintainable, and gives better failure
reports).
.IP "\(bu" 4
Give meaningful error messages when a test fails.
.IP "\(bu" 4
Avoid using qx// and \fIsystem()\fR unless you are testing for them. If you
do use them, make sure that you cover _all_ perl platforms.
.IP "\(bu" 4
Unlink any temporary files you create.
.IP "\(bu" 4
Promote unforeseen warnings to errors with \f(CW$SIG\fR{_\|_WARN_\|_}.
.IP "\(bu" 4
Be sure to use the libraries and modules shipped with the version being
tested, not those that were already installed.
.IP "\(bu" 4
Add comments to the code explaining what you are testing for.
.IP "\(bu" 4
Make updating the '1..42' string unnecessary. Or make sure that you
update it.
.IP "\(bu" 4
Test _all_ behaviors of a given operator, library, or function.
.Sp
Test all optional arguments.
.Sp
Test return values in various contexts (boolean, scalar, list, lvalue).
.Sp
Use both global and lexical variables.
.Sp
Don't forget the exceptional, pathological cases.
.SS "Patching a core module"
.IX Subsection "Patching a core module"
This works just like patching anything else, with one extra
consideration.
.PP
Modules in the \fIcpan/\fR directory of the source tree are maintained
outside of the Perl core. When the author updates the module, the
updates are simply copied into the core.  See that module's
documentation or its listing on <http://search.cpan.org/> for more
information on reporting bugs and submitting patches.
.PP
In most cases, patches to modules in \fIcpan/\fR should be sent upstream
and should not be applied to the Perl core individually.  If a patch to
a file in \fIcpan/\fR absolutely cannot wait for the fix to be made
upstream, released to \s-1CPAN\s0 and copied to blead, you must add (or
update) a \f(CW\*(C`CUSTOMIZED\*(C'\fR entry in the \fI\*(L"Porting/Maintainers.pl\*(R"\fR file
to flag that a local modification has been made.  See
\&\fI\*(L"Porting/Maintainers.pl\*(R"\fR for more details.
.PP
In contrast, modules in the \fIdist/\fR directory are maintained in the
core.
.SS "Updating perldelta"
.IX Subsection "Updating perldelta"
For changes significant enough to warrant a \fIpod/perldelta.pod\fR entry,
the porters will greatly appreciate it if you submit a delta entry
along with your actual change. Significant changes include, but are not
limited to:
.IP "\(bu" 4
Adding, deprecating, or removing core features
.IP "\(bu" 4
Adding, deprecating, removing, or upgrading core or dual-life modules
.IP "\(bu" 4
Adding new core tests
.IP "\(bu" 4
Fixing security issues and user-visible bugs in the core
.IP "\(bu" 4
Changes that might break existing code, either on the perl or C level
.IP "\(bu" 4
Significant performance improvements
.IP "\(bu" 4
Adding, removing, or significantly changing documentation in the
\&\fIpod/\fR directory
.IP "\(bu" 4
Important platform-specific changes
.PP
Please make sure you add the perldelta entry to the right section
within \fIpod/perldelta.pod\fR. More information on how to write good
perldelta entries is available in the \f(CW\*(C`Style\*(C'\fR section of
\&\fIPorting/how_to_write_a_perldelta.pod\fR.
.SS "What makes for a good patch?"
.IX Subsection "What makes for a good patch?"
New features and extensions to the language can be contentious. There
is no specific set of criteria which determine what features get added,
but here are some questions to consider when developing a patch:
.PP
\fIDoes the concept match the general goals of Perl?\fR
.IX Subsection "Does the concept match the general goals of Perl?"
.PP
Our goals include, but are not limited to:
.IP "1." 4
Keep it fast, simple, and useful.
.IP "2." 4
Keep features/concepts as orthogonal as possible.
.IP "3." 4
No arbitrary limits (platforms, data sizes, cultures).
.IP "4." 4
Keep it open and exciting to use/patch/advocate Perl everywhere.
.IP "5." 4
Either assimilate new technologies, or build bridges to them.
.PP
\fIWhere is the implementation?\fR
.IX Subsection "Where is the implementation?"
.PP
All the talk in the world is useless without an implementation. In
almost every case, the person or people who argue for a new feature
will be expected to be the ones who implement it. Porters capable of
coding new features have their own agendas, and are not available to
implement your (possibly good) idea.
.PP
\fIBackwards compatibility\fR
.IX Subsection "Backwards compatibility"
.PP
It's a cardinal sin to break existing Perl programs. New warnings can
be contentious\*(--some say that a program that emits warnings is not
broken, while others say it is. Adding keywords has the potential to
break programs, changing the meaning of existing token sequences or
functions might break programs.
.PP
The Perl 5 core includes mechanisms to help porters make backwards
incompatible changes more compatible such as the feature and
deprecate modules. Please use them when appropriate.
.PP
\fICould it be a module instead?\fR
.IX Subsection "Could it be a module instead?"
.PP
Perl 5 has extension mechanisms, modules and \s-1XS\s0, specifically to avoid
the need to keep changing the Perl interpreter. You can write modules
that export functions, you can give those functions prototypes so they
can be called like built-in functions, you can even write \s-1XS\s0 code to
mess with the runtime data structures of the Perl interpreter if you
want to implement really complicated things.
.PP
Whenever possible, new features should be prototyped in a \s-1CPAN\s0 module
before they will be considered for the core.
.PP
\fIIs the feature generic enough?\fR
.IX Subsection "Is the feature generic enough?"
.PP
Is this something that only the submitter wants added to the language,
or is it broadly useful?  Sometimes, instead of adding a feature with a
tight focus, the porters might decide to wait until someone implements
the more generalized feature.
.PP
\fIDoes it potentially introduce new bugs?\fR
.IX Subsection "Does it potentially introduce new bugs?"
.PP
Radical rewrites of large chunks of the Perl interpreter have the
potential to introduce new bugs.
.PP
\fIHow big is it?\fR
.IX Subsection "How big is it?"
.PP
The smaller and more localized the change, the better. Similarly, a
series of small patches is greatly preferred over a single large patch.
.PP
\fIDoes it preclude other desirable features?\fR
.IX Subsection "Does it preclude other desirable features?"
.PP
A patch is likely to be rejected if it closes off future avenues of
development. For instance, a patch that placed a true and final
interpretation on prototypes is likely to be rejected because there are
still options for the future of prototypes that haven't been addressed.
.PP
\fIIs the implementation robust?\fR
.IX Subsection "Is the implementation robust?"
.PP
Good patches (tight code, complete, correct) stand more chance of going
in. Sloppy or incorrect patches might be placed on the back burner
until the pumpking has time to fix, or might be discarded altogether
without further notice.
.PP
\fIIs the implementation generic enough to be portable?\fR
.IX Subsection "Is the implementation generic enough to be portable?"
.PP
The worst patches make use of system-specific features. It's highly
unlikely that non-portable additions to the Perl language will be
accepted.
.PP
\fIIs the implementation tested?\fR
.IX Subsection "Is the implementation tested?"
.PP
Patches which change behaviour (fixing bugs or introducing new
features) must include regression tests to verify that everything works
as expected.
.PP
Without tests provided by the original author, how can anyone else
changing perl in the future be sure that they haven't unwittingly
broken the behaviour the patch implements? And without tests, how can
the patch's author be confident that his/her hard work put into the
patch won't be accidentally thrown away by someone in the future?
.PP
\fIIs there enough documentation?\fR
.IX Subsection "Is there enough documentation?"
.PP
Patches without documentation are probably ill-thought out or
incomplete. No features can be added or changed without documentation,
so submitting a patch for the appropriate pod docs as well as the
source code is important.
.PP
\fIIs there another way to do it?\fR
.IX Subsection "Is there another way to do it?"
.PP
Larry said "Although the Perl Slogan is \fIThere's More Than One Way to
Do It\fR, I hesitate to make 10 ways to do something". This is a tricky
heuristic to navigate, though\*(--one man's essential addition is another
man's pointless cruft.
.PP
\fIDoes it create too much work?\fR
.IX Subsection "Does it create too much work?"
.PP
Work for the pumpking, work for Perl programmers, work for module
authors, ... Perl is supposed to be easy.
.PP
\fIPatches speak louder than words\fR
.IX Subsection "Patches speak louder than words"
.PP
Working code is always preferred to pie-in-the-sky ideas. A patch to
add a feature stands a much higher chance of making it to the language
than does a random feature request, no matter how fervently argued the
request might be. This ties into \*(L"Will it be useful?\*(R", as the fact that
someone took the time to make the patch demonstrates a strong desire
for the feature.
.SH "TESTING"
.IX Header "TESTING"
The core uses the same testing style as the rest of Perl, a simple
\&\*(L"ok/not ok\*(R" run through Test::Harness, but there are a few special
considerations.
.PP
There are three ways to write a test in the core. Test::More,
\&\fIt/test.pl\fR and ad hoc \f(CW\*(C`print $test ? "ok 42\en" : "not ok 42\en"\*(C'\fR. The
decision of which to use depends on what part of the test suite you're
working on. This is a measure to prevent a high-level failure (such as
Config.pm breaking) from causing basic functionality tests to fail.
.PP
The \fIt/test.pl\fR library provides some of the features of
Test::More, but avoids loading most modules and uses as few core
features as possible.
.PP
If you write your own test, use the Test Anything
Protocol <http://testanything.org>.
.IP "\(bu" 4
\&\fIt/base\fR and \fIt/comp\fR
.Sp
Since we don't know if require works, or even subroutines, use ad hoc
tests for these two. Step carefully to avoid using the feature being
tested.
.IP "\(bu" 4
\&\fIt/cmd\fR, \fIt/run\fR, \fIt/io\fR and \fIt/op\fR
.Sp
Now that basic \fIrequire()\fR and subroutines are tested, you can use the
\&\fIt/test.pl\fR library.
.Sp
You can also use certain libraries like Config conditionally, but be
sure to skip the test gracefully if it's not there.
.IP "\(bu" 4
Everything else
.Sp
Now that the core of Perl is tested, Test::More can and should be
used. You can also use the full suite of core modules in the tests.
.PP
When you say \*(L"make test\*(R", Perl uses the \fIt/TEST\fR program to run the
test suite (except under Win32 where it uses \fIt/harness\fR instead). All
tests are run from the \fIt/\fR directory, \fBnot\fR the directory which
contains the test. This causes some problems with the tests in \fIlib/\fR,
so here's some opportunity for some patching.
.PP
You must be triply conscious of cross-platform concerns. This usually
boils down to using File::Spec and avoiding things like \f(CW\*(C`fork()\*(C'\fR
and \f(CW\*(C`system()\*(C'\fR unless absolutely necessary.
.ie n .SS "Special ""make test"" targets"
.el .SS "Special \f(CWmake test\fP targets"
.IX Subsection "Special make test targets"
There are various special make targets that can be used to test Perl
slightly differently than the standard \*(L"test\*(R" target. Not all them are
expected to give a 100% success rate. Many of them have several
aliases, and many of them are not available on certain operating
systems.
.IP "\(bu" 4
test_porting
.Sp
This runs some basic sanity tests on the source tree and helps catch
basic errors before you submit a patch.
.IP "\(bu" 4
coretest
.Sp
Run \fIperl\fR on all core tests (\fIt/*\fR and \fIlib/[a\-z]*\fR pragma tests).
.Sp
(Not available on Win32)
.IP "\(bu" 4
test.deparse
.Sp
Run all the tests through B::Deparse. Not all tests will succeed.
.Sp
(Not available on Win32)
.IP "\(bu" 4
test.taintwarn
.Sp
Run all tests with the \fB\-t\fR command-line switch. Not all tests are
expected to succeed (until they're specifically fixed, of course).
.Sp
(Not available on Win32)
.IP "\(bu" 4
minitest
.Sp
Run \fIminiperl\fR on \fIt/base\fR, \fIt/comp\fR, \fIt/cmd\fR, \fIt/run\fR, \fIt/io\fR,
\&\fIt/op\fR, \fIt/uni\fR and \fIt/mro\fR tests.
.IP "\(bu" 4
test.valgrind check.valgrind utest.valgrind ucheck.valgrind
.Sp
(Only in Linux) Run all the tests using the memory leak + naughty
memory access tool \*(L"valgrind\*(R". The log files will be named
\&\fItestname.valgrind\fR.
.IP "\(bu" 4
test.torture torturetest
.Sp
Run all the usual tests and some extra tests. As of Perl 5.8.0, the
only extra tests are Abigail's JAPHs, \fIt/japh/abigail.t\fR.
.Sp
You can also run the torture test with \fIt/harness\fR by giving
\&\f(CW\*(C`\-torture\*(C'\fR argument to \fIt/harness\fR.
.IP "\(bu" 4
utest ucheck test.utf8 check.utf8
.Sp
Run all the tests with \-Mutf8. Not all tests will succeed.
.Sp
(Not available on Win32)
.IP "\(bu" 4
minitest.utf16 test.utf16
.Sp
Runs the tests with \s-1UTF\-16\s0 encoded scripts, encoded with different
versions of this encoding.
.Sp
\&\f(CW\*(C`make utest.utf16\*(C'\fR runs the test suite with a combination of \f(CW\*(C`\-utf8\*(C'\fR
and \f(CW\*(C`\-utf16\*(C'\fR arguments to \fIt/TEST\fR.
.Sp
(Not available on Win32)
.IP "\(bu" 4
test_harness
.Sp
Run the test suite with the \fIt/harness\fR controlling program, instead
of \fIt/TEST\fR. \fIt/harness\fR is more sophisticated, and uses the
Test::Harness module, thus using this test target supposes that perl
mostly works. The main advantage for our purposes is that it prints a
detailed summary of failed tests at the end. Also, unlike \fIt/TEST\fR, it
doesn't redirect stderr to stdout.
.Sp
Note that under Win32 \fIt/harness\fR is always used instead of \fIt/TEST\fR,
so there is no special \*(L"test_harness\*(R" target.
.Sp
Under Win32's \*(L"test\*(R" target you may use the \s-1TEST_SWITCHES\s0 and
\&\s-1TEST_FILES\s0 environment variables to control the behaviour of
\&\fIt/harness\fR. This means you can say
.Sp
.Vb 2
\&    nmake test TEST_FILES="op/*.t"
\&    nmake test TEST_SWITCHES="\-torture" TEST_FILES="op/*.t"
.Ve
.IP "\(bu" 4
test-notty test_notty
.Sp
Sets \s-1PERL_SKIP_TTY_TEST\s0 to true before running normal test.
.SS "Parallel tests"
.IX Subsection "Parallel tests"
The core distribution can now run its regression tests in parallel on
Unix-like platforms. Instead of running \f(CW\*(C`make test\*(C'\fR, set \f(CW\*(C`TEST_JOBS\*(C'\fR
in your environment to the number of tests to run in parallel, and run
\&\f(CW\*(C`make test_harness\*(C'\fR. On a Bourne-like shell, this can be done as
.PP
.Vb 1
\&    TEST_JOBS=3 make test_harness  # Run 3 tests in parallel
.Ve
.PP
An environment variable is used, rather than parallel make itself,
because TAP::Harness needs to be able to schedule individual
non-conflicting test scripts itself, and there is no standard interface
to \f(CW\*(C`make\*(C'\fR utilities to interact with their job schedulers.
.PP
Note that currently some test scripts may fail when run in parallel
(most notably \fIext/IO/t/io_dir.t\fR). If necessary, run just the failing
scripts again sequentially and see if the failures go away.
.SS "Running tests by hand"
.IX Subsection "Running tests by hand"
You can run part of the test suite by hand by using one of the
following commands from the \fIt/\fR directory:
.PP
.Vb 1
\&    ./perl \-I../lib TEST list\-of\-.t\-files
.Ve
.PP
or
.PP
.Vb 1
\&    ./perl \-I../lib harness list\-of\-.t\-files
.Ve
.PP
(If you don't specify test scripts, the whole test suite will be run.)
.SS "Using \fIt/harness\fP for testing"
.IX Subsection "Using t/harness for testing"
If you use \f(CW\*(C`harness\*(C'\fR for testing, you have several command line
options available to you. The arguments are as follows, and are in the
order that they must appear if used together.
.PP
.Vb 2
\&    harness \-v \-torture \-re=pattern LIST OF FILES TO TEST
\&    harness \-v \-torture \-re LIST OF PATTERNS TO MATCH
.Ve
.PP
If \f(CW\*(C`LIST OF FILES TO TEST\*(C'\fR is omitted, the file list is obtained from
the manifest. The file list may include shell wildcards which will be
expanded out.
.IP "\(bu" 4
\&\-v
.Sp
Run the tests under verbose mode so you can see what tests were run,
and debug output.
.IP "\(bu" 4
\&\-torture
.Sp
Run the torture tests as well as the normal set.
.IP "\(bu" 4
\&\-re=PATTERN
.Sp
Filter the file list so that all the test files run match \s-1PATTERN\s0. Note
that this form is distinct from the \fB\-re \s-1LIST\s0 \s-1OF\s0 \s-1PATTERNS\s0\fR form below
in that it allows the file list to be provided as well.
.IP "\(bu" 4
\&\-re \s-1LIST\s0 \s-1OF\s0 \s-1PATTERNS\s0
.Sp
Filter the file list so that all the test files run match
/(LIST|OF|PATTERNS)/. Note that with this form the patterns are joined
by '|' and you cannot supply a list of files, instead the test files
are obtained from the \s-1MANIFEST\s0.
.PP
You can run an individual test by a command similar to
.PP
.Vb 1
\&    ./perl \-I../lib path/to/foo.t
.Ve
.PP
except that the harnesses set up some environment variables that may
affect the execution of the test:
.IP "\(bu" 4
PERL_CORE=1
.Sp
indicates that we're running this test as part of the perl core test
suite. This is useful for modules that have a dual life on \s-1CPAN\s0.
.IP "\(bu" 4
PERL_DESTRUCT_LEVEL=2
.Sp
is set to 2 if it isn't set already (see
\&\*(L"\s-1PERL_DESTRUCT_LEVEL\s0\*(R" in perlhacktips).
.IP "\(bu" 4
\&\s-1PERL\s0
.Sp
(used only by \fIt/TEST\fR) if set, overrides the path to the perl
executable that should be used to run the tests (the default being
\&\fI./perl\fR).
.IP "\(bu" 4
\&\s-1PERL_SKIP_TTY_TEST\s0
.Sp
if set, tells to skip the tests that need a terminal. It's actually set
automatically by the Makefile, but can also be forced artificially by
running 'make test_notty'.
.PP
\fIOther environment variables that may influence tests\fR
.IX Subsection "Other environment variables that may influence tests"
.IP "\(bu" 4
PERL_TEST_Net_Ping
.Sp
Setting this variable runs all the Net::Ping modules tests, otherwise
some tests that interact with the outside world are skipped. See
perl58delta.
.IP "\(bu" 4
\&\s-1PERL_TEST_NOVREXX\s0
.Sp
Setting this variable skips the vrexx.t tests for \s-1OS2::REXX\s0.
.IP "\(bu" 4
\&\s-1PERL_TEST_NUMCONVERTS\s0
.Sp
This sets a variable in op/numconvert.t.
.PP
See also the documentation for the Test and Test::Harness modules, for
more environment variables that affect testing.
.SH "MORE READING FOR GUTS HACKERS"
.IX Header "MORE READING FOR GUTS HACKERS"
To hack on the Perl guts, you'll need to read the following things:
.IP "\(bu" 4
perlsource
.Sp
An overview of the Perl source tree. This will help you find the files
you're looking for.
.IP "\(bu" 4
perlinterp
.Sp
An overview of the Perl interpreter source code and some details on how
Perl does what it does.
.IP "\(bu" 4
perlhacktut
.Sp
This document walks through the creation of a small patch to Perl's C
code. If you're just getting started with Perl core hacking, this will
help you understand how it works.
.IP "\(bu" 4
perlhacktips
.Sp
More details on hacking the Perl core. This document focuses on lower
level details such as how to write tests, compilation issues,
portability, debugging, etc.
.Sp
If you plan on doing serious C hacking, make sure to read this.
.IP "\(bu" 4
perlguts
.Sp
This is of paramount importance, since it's the documentation of what
goes where in the Perl source. Read it over a couple of times and it
might start to make sense \- don't worry if it doesn't yet, because the
best way to study it is to read it in conjunction with poking at Perl
source, and we'll do that later on.
.Sp
Gisle Aas's \*(L"illustrated perlguts\*(R", also known as \fIillguts\fR, has very
helpful pictures:
.Sp
<http://search.cpan.org/dist/illguts/>
.IP "\(bu" 4
perlxstut and perlxs
.Sp
A working knowledge of \s-1XSUB\s0 programming is incredibly useful for core
hacking; XSUBs use techniques drawn from the \s-1PP\s0 code, the portion of
the guts that actually executes a Perl program. It's a lot gentler to
learn those techniques from simple examples and explanation than from
the core itself.
.IP "\(bu" 4
perlapi
.Sp
The documentation for the Perl \s-1API\s0 explains what some of the internal
functions do, as well as the many macros used in the source.
.IP "\(bu" 4
\&\fIPorting/pumpkin.pod\fR
.Sp
This is a collection of words of wisdom for a Perl porter; some of it
is only useful to the pumpkin holder, but most of it applies to anyone
wanting to go about Perl development.
.IP "\(bu" 4
The perl5\-porters \s-1FAQ\s0
.Sp
This should be available from
http://dev.perl.org/perl5/docs/p5p\-faq.html . It contains hints on
reading perl5\-porters, information on how perl5\-porters works and how
Perl development in general works.
.SH "CPAN TESTERS AND PERL SMOKERS"
.IX Header "CPAN TESTERS AND PERL SMOKERS"
The \s-1CPAN\s0 testers ( http://testers.cpan.org/ ) are a group of volunteers
who test \s-1CPAN\s0 modules on a variety of platforms.
.PP
Perl Smokers ( http://www.nntp.perl.org/group/perl.daily\-build/ and
http://www.nntp.perl.org/group/perl.daily\-build.reports/ )
automatically test Perl source releases on platforms with various
configurations.
.PP
Both efforts welcome volunteers. In order to get involved in smoke
testing of the perl itself visit
http://search.cpan.org/dist/Test\-Smoke/ <http://search.cpan.org/dist/Test-Smoke/>. In order to start smoke
testing \s-1CPAN\s0 modules visit
http://search.cpan.org/dist/CPANPLUS\-YACSmoke/ <http://search.cpan.org/dist/CPANPLUS-YACSmoke/> or
<http://search.cpan.org/dist/minismokebox/> or
http://search.cpan.org/dist/CPAN\-Reporter/ <http://search.cpan.org/dist/CPAN-Reporter/>.
.SH "WHAT NEXT?"
.IX Header "WHAT NEXT?"
If you've read all the documentation in the document and the ones
listed above, you're more than ready to hack on Perl.
.PP
Here's some more recommendations
.IP "\(bu" 4
Subscribe to perl5\-porters, follow the patches and try and understand
them; don't be afraid to ask if there's a portion you're not clear on \-
who knows, you may unearth a bug in the patch...
.IP "\(bu" 4
Do read the \s-1README\s0 associated with your operating system, e.g.
\&\s-1README\s0.aix on the \s-1IBM\s0 \s-1AIX\s0 \s-1OS\s0. Don't hesitate to supply patches to that
\&\s-1README\s0 if you find anything missing or changed over a new \s-1OS\s0 release.
.IP "\(bu" 4
Find an area of Perl that seems interesting to you, and see if you can
work out how it works. Scan through the source, and step over it in the
debugger. Play, poke, investigate, fiddle! You'll probably get to
understand not just your chosen area but a much wider range of
\&\fIperl\fR's activity as well, and probably sooner than you'd think.
.ie n .SS """The Road goes ever on and on, down from the door where it began."""
.el .SS "``The Road goes ever on and on, down from the door where it began.''"
.IX Subsection "The Road goes ever on and on, down from the door where it began."
If you can do these things, you've started on the long road to Perl
porting. Thanks for wanting to help make Perl better \- and happy
hacking!
.SS "Metaphoric Quotations"
.IX Subsection "Metaphoric Quotations"
If you recognized the quote about the Road above, you're in luck.
.PP
Most software projects begin each file with a literal description of
each file's purpose. Perl instead begins each with a literary allusion
to that file's purpose.
.PP
Like chapters in many books, all top-level Perl source files (along
with a few others here and there) begin with an epigrammatic
inscription that alludes, indirectly and metaphorically, to the
material you're about to read.
.PP
Quotations are taken from writings of J.R.R. Tolkien pertaining to his
Legendarium, almost always from \fIThe Lord of the Rings\fR. Chapters and
page numbers are given using the following editions:
.IP "\(bu" 4
\&\fIThe Hobbit\fR, by J.R.R. Tolkien. The hardcover, 70th\-anniversary
edition of 2007 was used, published in the \s-1UK\s0 by Harper Collins
Publishers and in the \s-1US\s0 by the Houghton Mifflin Company.
.IP "\(bu" 4
\&\fIThe Lord of the Rings\fR, by J.R.R. Tolkien. The hardcover,
50th\-anniversary edition of 2004 was used, published in the \s-1UK\s0 by
Harper Collins Publishers and in the \s-1US\s0 by the Houghton Mifflin
Company.
.IP "\(bu" 4
\&\fIThe Lays of Beleriand\fR, by J.R.R. Tolkien and published posthumously
by his son and literary executor, C.J.R. Tolkien, being the 3rd of the
12 volumes in Christopher's mammoth \fIHistory of Middle Earth\fR. Page
numbers derive from the hardcover edition, first published in 1983 by
George Allen & Unwin; no page numbers changed for the special 3\-volume
omnibus edition of 2002 or the various trade-paper editions, all again
now by Harper Collins or Houghton Mifflin.
.PP
Other \s-1JRRT\s0 books fair game for quotes would thus include \fIThe
Adventures of Tom Bombadil\fR, \fIThe Silmarillion\fR, \fIUnfinished Tales\fR,
and \fIThe Tale of the Children of Hurin\fR, all but the first
posthumously assembled by \s-1CJRT\s0. But \fIThe Lord of the Rings\fR itself is
perfectly fine and probably best to quote from, provided you can find a
suitable quote there.
.PP
So if you were to supply a new, complete, top-level source file to add
to Perl, you should conform to this peculiar practice by yourself
selecting an appropriate quotation from Tolkien, retaining the original
spelling and punctuation and using the same format the rest of the
quotes are in. Indirect and oblique is just fine; remember, it's a
metaphor, so being meta is, after all, what it's for.
.SH "AUTHOR"
.IX Header "AUTHOR"
This document was originally written by Nathan Torkington, and is
maintained by the perl5\-porters mailing list.
                                                                                        osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perlhack5.18.1                               0100644 0001750 0001750 00000127031 12566207441 023050  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLHACK 1"
.TH PERLHACK 1 "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlhack \- How to hack on Perl
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document explains how Perl development works.  It includes details
about the Perl 5 Porters email list, the Perl repository, the Perlbug
bug tracker, patch guidelines, and commentary on Perl development
philosophy.
.SH "SUPER QUICK PATCH GUIDE"
.IX Header "SUPER QUICK PATCH GUIDE"
If you just want to submit a single small patch like a pod fix, a test
for a bug, comment fixes, etc., it's easy! Here's how:
.IP "\(bu" 4
Check out the source repository
.Sp
The perl source is in a git repository.  You can clone the repository
with the following command:
.Sp
.Vb 1
\&  % git clone git://perl5.git.perl.org/perl.git perl
.Ve
.IP "\(bu" 4
Ensure you're following the latest advice
.Sp
In case the advice in this guide has been updated recently, read the
latest version directly from the perl source:
.Sp
.Vb 1
\&  % perldoc pod/perlhack.pod
.Ve
.IP "\(bu" 4
Make your change
.Sp
Hack, hack, hack.
.IP "\(bu" 4
Test your change
.Sp
You can run all the tests with the following commands:
.Sp
.Vb 2
\&  % ./Configure \-des \-Dusedevel
\&  % make test
.Ve
.Sp
Keep hacking until the tests pass.
.IP "\(bu" 4
Commit your change
.Sp
Committing your work will save the change \fIon your local system\fR:
.Sp
.Vb 1
\&  % git commit \-a \-m \*(AqCommit message goes here\*(Aq
.Ve
.Sp
Make sure the commit message describes your change in a single
sentence.  For example, \*(L"Fixed spelling errors in perlhack.pod\*(R".
.IP "\(bu" 4
Send your change to perlbug
.Sp
The next step is to submit your patch to the Perl core ticket system
via email.
.Sp
If your changes are in a single git commit, run the following commands
to write the file as a \s-1MIME\s0 attachment and send it with a meaningful
subject:
.Sp
.Vb 3
\&  % git format\-patch \-1 \-\-attach
\&  % ./perl \-Ilib utils/perlbug \-s "[PATCH] $(
\&        git log \-1 \-\-oneline HEAD)" \-f 0001\-*.patch
.Ve
.Sp
The perlbug program will ask you a few questions about your email
address and the patch you're submitting.  Once you've answered them it
will submit your patch via email.
.Sp
If your changes are in multiple commits, generate a patch file
containing them all, and attach that:
.Sp
.Vb 2
\&  % git format\-patch origin/blead \-\-attach \-\-stdout > patches
\&  % ./perl \-Ilib utils/perlbug \-f patches
.Ve
.Sp
When prompted, pick a subject that summarizes your changes overall and
has \*(L"[\s-1PATCH\s0]\*(R" at the beginning.
.IP "\(bu" 4
Thank you
.Sp
The porters appreciate the time you spent helping to make Perl better.
Thank you!
.IP "\(bu" 4
Next time
.Sp
The next time you wish to make a patch, you need to start from the
latest perl in a pristine state.  Check you don't have any local changes
or added files in your perl check-out which you wish to keep, then run
these commands:
.Sp
.Vb 3
\&  % git pull
\&  % git reset \-\-hard origin/blead
\&  % git clean \-dxf
.Ve
.SH "BUG REPORTING"
.IX Header "BUG REPORTING"
If you want to report a bug in Perl, you must use the \fIperlbug\fR
command line tool.  This tool will ensure that your bug report includes
all the relevant system and configuration information.
.PP
To browse existing Perl bugs and patches, you can use the web interface
at <http://rt.perl.org/>.
.PP
Please check the archive of the perl5\-porters list (see below) and/or
the bug tracking system before submitting a bug report.  Often, you'll
find that the bug has been reported already.
.PP
You can log in to the bug tracking system and comment on existing bug
reports.  If you have additional information regarding an existing bug,
please add it.  This will help the porters fix the bug.
.SH "PERL 5 PORTERS"
.IX Header "PERL 5 PORTERS"
The perl5\-porters (p5p) mailing list is where the Perl standard
distribution is maintained and developed.  The people who maintain Perl
are also referred to as the \*(L"Perl 5 Porters\*(R", \*(L"p5p\*(R" or just the
\&\*(L"porters\*(R".
.PP
A searchable archive of the list is available at
<http://www.xray.mpe.mpg.de/mailing\-lists/perl5\-porters/>.  There is
also another archive at
<http://archive.develooper.com/perl5\-porters@perl.org/>.
.SS "perl-changes mailing list"
.IX Subsection "perl-changes mailing list"
The perl5\-changes mailing list receives a copy of each patch that gets
submitted to the maintenance and development branches of the perl
repository.  See <http://lists.perl.org/list/perl5\-changes.html> for
subscription and archive information.
.SS "#p5p on \s-1IRC\s0"
.IX Subsection "#p5p on IRC"
Many porters are also active on the <irc://irc.perl.org/#p5p> channel.
Feel free to join the channel and ask questions about hacking on the
Perl core.
.SH "GETTING THE PERL SOURCE"
.IX Header "GETTING THE PERL SOURCE"
All of Perl's source code is kept centrally in a Git repository at
\&\fIperl5.git.perl.org\fR.  The repository contains many Perl revisions
from Perl 1 onwards and all the revisions from Perforce, the previous
version control system.
.PP
For much more detail on using git with the Perl repository, please see
perlgit.
.SS "Read access via Git"
.IX Subsection "Read access via Git"
You will need a copy of Git for your computer.  You can fetch a copy of
the repository using the git protocol:
.PP
.Vb 1
\&  % git clone git://perl5.git.perl.org/perl.git perl
.Ve
.PP
This clones the repository and makes a local copy in the \fIperl\fR
directory.
.PP
If you cannot use the git protocol for firewall reasons, you can also
clone via http, though this is much slower:
.PP
.Vb 1
\&  % git clone http://perl5.git.perl.org/perl.git perl
.Ve
.SS "Read access via the web"
.IX Subsection "Read access via the web"
You may access the repository over the web.  This allows you to browse
the tree, see recent commits, subscribe to \s-1RSS\s0 feeds for the changes,
search for particular commits and more.  You may access it at
<http://perl5.git.perl.org/perl.git>.  A mirror of the repository is
found at <http://github.com/mirrors/perl>.
.SS "Read access via rsync"
.IX Subsection "Read access via rsync"
You can also choose to use rsync to get a copy of the current source
tree for the bleadperl branch and all maintenance branches:
.PP
.Vb 6
\&  % rsync \-avz rsync://perl5.git.perl.org/perl\-current .
\&  % rsync \-avz rsync://perl5.git.perl.org/perl\-5.12.x .
\&  % rsync \-avz rsync://perl5.git.perl.org/perl\-5.10.x .
\&  % rsync \-avz rsync://perl5.git.perl.org/perl\-5.8.x .
\&  % rsync \-avz rsync://perl5.git.perl.org/perl\-5.6.x .
\&  % rsync \-avz rsync://perl5.git.perl.org/perl\-5.005xx .
.Ve
.PP
(Add the \f(CW\*(C`\-\-delete\*(C'\fR option to remove leftover files.)
.PP
To get a full list of the available sync points:
.PP
.Vb 1
\&  % rsync perl5.git.perl.org::
.Ve
.SS "Write access via git"
.IX Subsection "Write access via git"
If you have a commit bit, please see perlgit for more details on
using git.
.SH "PATCHING PERL"
.IX Header "PATCHING PERL"
If you're planning to do more extensive work than a single small fix,
we encourage you to read the documentation below.  This will help you
focus your work and make your patches easier to incorporate into the
Perl source.
.SS "Submitting patches"
.IX Subsection "Submitting patches"
If you have a small patch to submit, please submit it via perlbug.  You
can also send email directly to perlbug@perl.org.  Please note that
messages sent to perlbug may be held in a moderation queue, so you
won't receive a response immediately.
.PP
You'll know your submission has been processed when you receive an
email from our ticket tracking system.  This email will give you a
ticket number.  Once your patch has made it to the ticket tracking
system, it will also be sent to the perl5\-porters@perl.org list.
.PP
Patches are reviewed and discussed on the p5p list.  Simple,
uncontroversial patches will usually be applied without any discussion.
When the patch is applied, the ticket will be updated and you will
receive email.  In addition, an email will be sent to the p5p list.
.PP
In other cases, the patch will need more work or discussion.  That will
happen on the p5p list.
.PP
You are encouraged to participate in the discussion and advocate for
your patch.  Sometimes your patch may get lost in the shuffle.  It's
appropriate to send a reminder email to p5p if no action has been taken
in a month.  Please remember that the Perl 5 developers are all
volunteers, and be polite.
.PP
Changes are always applied directly to the main development branch,
called \*(L"blead\*(R".  Some patches may be backported to a maintenance
branch.  If you think your patch is appropriate for the maintenance
branch (see \*(L"\s-1MAINTENANCE BRANCHES\*(R"\s0 in perlpolicy), please explain why
when you submit it.
.SS "Getting your patch accepted"
.IX Subsection "Getting your patch accepted"
If you are submitting a code patch there are several things that you
can do to help the Perl 5 Porters accept your patch.
.PP
\fIPatch style\fR
.IX Subsection "Patch style"
.PP
If you used git to check out the Perl source, then using \f(CW\*(C`git
format\-patch\*(C'\fR will produce a patch in a style suitable for Perl.  The
\&\f(CW\*(C`format\-patch\*(C'\fR command produces one patch file for each commit you
made.  If you prefer to send a single patch for all commits, you can
use \f(CW\*(C`git diff\*(C'\fR.
.PP
.Vb 3
\&  % git checkout blead
\&  % git pull
\&  % git diff blead my\-branch\-name
.Ve
.PP
This produces a patch based on the difference between blead and your
current branch.  It's important to make sure that blead is up to date
before producing the diff, that's why we call \f(CW\*(C`git pull\*(C'\fR first.
.PP
We strongly recommend that you use git if possible.  It will make your
life easier, and ours as well.
.PP
However, if you're not using git, you can still produce a suitable
patch.  You'll need a pristine copy of the Perl source to diff against.
The porters prefer unified diffs.  Using \s-1GNU \s0\f(CW\*(C`diff\*(C'\fR, you can produce a
diff like this:
.PP
.Vb 1
\&  % diff \-Npurd perl.pristine perl.mine
.Ve
.PP
Make sure that you \f(CW\*(C`make realclean\*(C'\fR in your copy of Perl to remove any
build artifacts, or you may get a confusing result.
.PP
\fICommit message\fR
.IX Subsection "Commit message"
.PP
As you craft each patch you intend to submit to the Perl core, it's
important to write a good commit message.  This is especially important
if your submission will consist of a series of commits.
.PP
The first line of the commit message should be a short description
without a period.  It should be no longer than the subject line of an
email, 50 characters being a good rule of thumb.
.PP
A lot of Git tools (Gitweb, GitHub, git log \-\-pretty=oneline, ...) will
only display the first line (cut off at 50 characters) when presenting
commit summaries.
.PP
The commit message should include a description of the problem that the
patch corrects or new functionality that the patch adds.
.PP
As a general rule of thumb, your commit message should help a
programmer who knows the Perl core quickly understand what you were
trying to do, how you were trying to do it, and why the change matters
to Perl.
.IP "\(bu" 4
Why
.Sp
Your commit message should describe why the change you are making is
important.  When someone looks at your change in six months or six
years, your intent should be clear.
.Sp
If you're deprecating a feature with the intent of later simplifying
another bit of code, say so.  If you're fixing a performance problem or
adding a new feature to support some other bit of the core, mention
that.
.IP "\(bu" 4
What
.Sp
Your commit message should describe what part of the Perl core you're
changing and what you expect your patch to do.
.IP "\(bu" 4
How
.Sp
While it's not necessary for documentation changes, new tests or
trivial patches, it's often worth explaining how your change works.
Even if it's clear to you today, it may not be clear to a porter next
month or next year.
.PP
A commit message isn't intended to take the place of comments in your
code.  Commit messages should describe the change you made, while code
comments should describe the current state of the code.
.PP
If you've just implemented a new feature, complete with doc, tests and
well-commented code, a brief commit message will often suffice.  If,
however, you've just changed a single character deep in the parser or
lexer, you might need to write a small novel to ensure that future
readers understand what you did and why you did it.
.PP
\fIComments, Comments, Comments\fR
.IX Subsection "Comments, Comments, Comments"
.PP
Be sure to adequately comment your code.  While commenting every line
is unnecessary, anything that takes advantage of side effects of
operators, that creates changes that will be felt outside of the
function being patched, or that others may find confusing should be
documented.  If you are going to err, it is better to err on the side
of adding too many comments than too few.
.PP
The best comments explain \fIwhy\fR the code does what it does, not \fIwhat
it does\fR.
.PP
\fIStyle\fR
.IX Subsection "Style"
.PP
In general, please follow the particular style of the code you are
patching.
.PP
In particular, follow these general guidelines for patching Perl
sources:
.IP "\(bu" 4
8\-wide tabs (no exceptions!)
.IP "\(bu" 4
4\-wide indents for code, 2\-wide indents for nested \s-1CPP\s0 #defines
.IP "\(bu" 4
Try hard not to exceed 79\-columns
.IP "\(bu" 4
\&\s-1ANSI C\s0 prototypes
.IP "\(bu" 4
Uncuddled elses and \*(L"K&R\*(R" style for indenting control constructs
.IP "\(bu" 4
No \*(C+ style (//) comments
.IP "\(bu" 4
Mark places that need to be revisited with \s-1XXX \s0(and revisit often!)
.IP "\(bu" 4
Opening brace lines up with \*(L"if\*(R" when conditional spans multiple lines;
should be at end-of-line otherwise
.IP "\(bu" 4
In function definitions, name starts in column 0 (return value is on
previous line)
.IP "\(bu" 4
Single space after keywords that are followed by parens, no space
between function name and following paren
.IP "\(bu" 4
Avoid assignments in conditionals, but if they're unavoidable, use
extra paren, e.g. \*(L"if (a && (b = c)) ...\*(R"
.IP "\(bu" 4
\&\*(L"return foo;\*(R" rather than \*(L"return(foo);\*(R"
.IP "\(bu" 4
\&\*(L"if (!foo) ...\*(R" rather than \*(L"if (foo == \s-1FALSE\s0) ...\*(R" etc.
.IP "\(bu" 4
Do not declare variables using \*(L"register\*(R".  It may be counterproductive
with modern compilers, and is deprecated in \*(C+, under which the Perl
source is regularly compiled.
.IP "\(bu" 4
In-line functions that are in headers that are accessible to \s-1XS\s0 code
need to be able to compile without warnings with commonly used extra
compilation flags, such as gcc's \f(CW\*(C`\-Wswitch\-default\*(C'\fR which warns
whenever a switch statement does not have a \*(L"default\*(R" case.  The use of
these extra flags is to catch potential problems in legal C code, and
is often used by Perl aggregators, such as Linux distributors.
.PP
\fITest suite\fR
.IX Subsection "Test suite"
.PP
If your patch changes code (rather than just changing documentation),
you should also include one or more test cases which illustrate the bug
you're fixing or validate the new functionality you're adding.  In
general, you should update an existing test file rather than create a
new one.
.PP
Your test suite additions should generally follow these guidelines
(courtesy of Gurusamy Sarathy <gsar@activestate.com>):
.IP "\(bu" 4
Know what you're testing.  Read the docs, and the source.
.IP "\(bu" 4
Tend to fail, not succeed.
.IP "\(bu" 4
Interpret results strictly.
.IP "\(bu" 4
Use unrelated features (this will flush out bizarre interactions).
.IP "\(bu" 4
Use non-standard idioms (otherwise you are not testing \s-1TIMTOWTDI\s0).
.IP "\(bu" 4
Avoid using hardcoded test numbers whenever possible (the \s-1EXPECTED/GOT\s0
found in t/op/tie.t is much more maintainable, and gives better failure
reports).
.IP "\(bu" 4
Give meaningful error messages when a test fails.
.IP "\(bu" 4
Avoid using qx// and \fIsystem()\fR unless you are testing for them.  If you
do use them, make sure that you cover _all_ perl platforms.
.IP "\(bu" 4
Unlink any temporary files you create.
.IP "\(bu" 4
Promote unforeseen warnings to errors with \f(CW$SIG\fR{_\|_WARN_\|_}.
.IP "\(bu" 4
Be sure to use the libraries and modules shipped with the version being
tested, not those that were already installed.
.IP "\(bu" 4
Add comments to the code explaining what you are testing for.
.IP "\(bu" 4
Make updating the '1..42' string unnecessary.  Or make sure that you
update it.
.IP "\(bu" 4
Test _all_ behaviors of a given operator, library, or function.
.Sp
Test all optional arguments.
.Sp
Test return values in various contexts (boolean, scalar, list, lvalue).
.Sp
Use both global and lexical variables.
.Sp
Don't forget the exceptional, pathological cases.
.SS "Patching a core module"
.IX Subsection "Patching a core module"
This works just like patching anything else, with one extra
consideration.
.PP
Modules in the \fIcpan/\fR directory of the source tree are maintained
outside of the Perl core.  When the author updates the module, the
updates are simply copied into the core.  See that module's
documentation or its listing on <http://search.cpan.org/> for more
information on reporting bugs and submitting patches.
.PP
In most cases, patches to modules in \fIcpan/\fR should be sent upstream
and should not be applied to the Perl core individually.  If a patch to
a file in \fIcpan/\fR absolutely cannot wait for the fix to be made
upstream, released to \s-1CPAN\s0 and copied to blead, you must add (or
update) a \f(CW\*(C`CUSTOMIZED\*(C'\fR entry in the \fI\*(L"Porting/Maintainers.pl\*(R"\fR file
to flag that a local modification has been made.  See
\&\fI\*(L"Porting/Maintainers.pl\*(R"\fR for more details.
.PP
In contrast, modules in the \fIdist/\fR directory are maintained in the
core.
.SS "Updating perldelta"
.IX Subsection "Updating perldelta"
For changes significant enough to warrant a \fIpod/perldelta.pod\fR entry,
the porters will greatly appreciate it if you submit a delta entry
along with your actual change.  Significant changes include, but are
not limited to:
.IP "\(bu" 4
Adding, deprecating, or removing core features
.IP "\(bu" 4
Adding, deprecating, removing, or upgrading core or dual-life modules
.IP "\(bu" 4
Adding new core tests
.IP "\(bu" 4
Fixing security issues and user-visible bugs in the core
.IP "\(bu" 4
Changes that might break existing code, either on the perl or C level
.IP "\(bu" 4
Significant performance improvements
.IP "\(bu" 4
Adding, removing, or significantly changing documentation in the
\&\fIpod/\fR directory
.IP "\(bu" 4
Important platform-specific changes
.PP
Please make sure you add the perldelta entry to the right section
within \fIpod/perldelta.pod\fR.  More information on how to write good
perldelta entries is available in the \f(CW\*(C`Style\*(C'\fR section of
\&\fIPorting/how_to_write_a_perldelta.pod\fR.
.SS "What makes for a good patch?"
.IX Subsection "What makes for a good patch?"
New features and extensions to the language can be contentious.  There
is no specific set of criteria which determine what features get added,
but here are some questions to consider when developing a patch:
.PP
\fIDoes the concept match the general goals of Perl?\fR
.IX Subsection "Does the concept match the general goals of Perl?"
.PP
Our goals include, but are not limited to:
.IP "1." 4
Keep it fast, simple, and useful.
.IP "2." 4
Keep features/concepts as orthogonal as possible.
.IP "3." 4
No arbitrary limits (platforms, data sizes, cultures).
.IP "4." 4
Keep it open and exciting to use/patch/advocate Perl everywhere.
.IP "5." 4
Either assimilate new technologies, or build bridges to them.
.PP
\fIWhere is the implementation?\fR
.IX Subsection "Where is the implementation?"
.PP
All the talk in the world is useless without an implementation.  In
almost every case, the person or people who argue for a new feature
will be expected to be the ones who implement it.  Porters capable of
coding new features have their own agendas, and are not available to
implement your (possibly good) idea.
.PP
\fIBackwards compatibility\fR
.IX Subsection "Backwards compatibility"
.PP
It's a cardinal sin to break existing Perl programs.  New warnings can
be contentious\*(--some say that a program that emits warnings is not
broken, while others say it is.  Adding keywords has the potential to
break programs, changing the meaning of existing token sequences or
functions might break programs.
.PP
The Perl 5 core includes mechanisms to help porters make backwards
incompatible changes more compatible such as the feature and
deprecate modules.  Please use them when appropriate.
.PP
\fICould it be a module instead?\fR
.IX Subsection "Could it be a module instead?"
.PP
Perl 5 has extension mechanisms, modules and \s-1XS,\s0 specifically to avoid
the need to keep changing the Perl interpreter.  You can write modules
that export functions, you can give those functions prototypes so they
can be called like built-in functions, you can even write \s-1XS\s0 code to
mess with the runtime data structures of the Perl interpreter if you
want to implement really complicated things.
.PP
Whenever possible, new features should be prototyped in a \s-1CPAN\s0 module
before they will be considered for the core.
.PP
\fIIs the feature generic enough?\fR
.IX Subsection "Is the feature generic enough?"
.PP
Is this something that only the submitter wants added to the language,
or is it broadly useful?  Sometimes, instead of adding a feature with a
tight focus, the porters might decide to wait until someone implements
the more generalized feature.
.PP
\fIDoes it potentially introduce new bugs?\fR
.IX Subsection "Does it potentially introduce new bugs?"
.PP
Radical rewrites of large chunks of the Perl interpreter have the
potential to introduce new bugs.
.PP
\fIHow big is it?\fR
.IX Subsection "How big is it?"
.PP
The smaller and more localized the change, the better.  Similarly, a
series of small patches is greatly preferred over a single large patch.
.PP
\fIDoes it preclude other desirable features?\fR
.IX Subsection "Does it preclude other desirable features?"
.PP
A patch is likely to be rejected if it closes off future avenues of
development.  For instance, a patch that placed a true and final
interpretation on prototypes is likely to be rejected because there are
still options for the future of prototypes that haven't been addressed.
.PP
\fIIs the implementation robust?\fR
.IX Subsection "Is the implementation robust?"
.PP
Good patches (tight code, complete, correct) stand more chance of going
in.  Sloppy or incorrect patches might be placed on the back burner
until the pumpking has time to fix, or might be discarded altogether
without further notice.
.PP
\fIIs the implementation generic enough to be portable?\fR
.IX Subsection "Is the implementation generic enough to be portable?"
.PP
The worst patches make use of system-specific features.  It's highly
unlikely that non-portable additions to the Perl language will be
accepted.
.PP
\fIIs the implementation tested?\fR
.IX Subsection "Is the implementation tested?"
.PP
Patches which change behaviour (fixing bugs or introducing new
features) must include regression tests to verify that everything works
as expected.
.PP
Without tests provided by the original author, how can anyone else
changing perl in the future be sure that they haven't unwittingly
broken the behaviour the patch implements? And without tests, how can
the patch's author be confident that his/her hard work put into the
patch won't be accidentally thrown away by someone in the future?
.PP
\fIIs there enough documentation?\fR
.IX Subsection "Is there enough documentation?"
.PP
Patches without documentation are probably ill-thought out or
incomplete.  No features can be added or changed without documentation,
so submitting a patch for the appropriate pod docs as well as the
source code is important.
.PP
\fIIs there another way to do it?\fR
.IX Subsection "Is there another way to do it?"
.PP
Larry said "Although the Perl Slogan is \fIThere's More Than One Way to
Do It\fR, I hesitate to make 10 ways to do something".  This is a tricky
heuristic to navigate, though\*(--one man's essential addition is another
man's pointless cruft.
.PP
\fIDoes it create too much work?\fR
.IX Subsection "Does it create too much work?"
.PP
Work for the pumpking, work for Perl programmers, work for module
authors, ... Perl is supposed to be easy.
.PP
\fIPatches speak louder than words\fR
.IX Subsection "Patches speak louder than words"
.PP
Working code is always preferred to pie-in-the-sky ideas.  A patch to
add a feature stands a much higher chance of making it to the language
than does a random feature request, no matter how fervently argued the
request might be.  This ties into \*(L"Will it be useful?\*(R", as the fact
that someone took the time to make the patch demonstrates a strong
desire for the feature.
.SH "TESTING"
.IX Header "TESTING"
The core uses the same testing style as the rest of Perl, a simple
\&\*(L"ok/not ok\*(R" run through Test::Harness, but there are a few special
considerations.
.PP
There are three ways to write a test in the core: Test::More,
\&\fIt/test.pl\fR and ad hoc \f(CW\*(C`print $test ? "ok 42\en" : "not ok 42\en"\*(C'\fR.
The decision of which to use depends on what part of the test suite
you're working on.  This is a measure to prevent a high-level failure
(such as Config.pm breaking) from causing basic functionality tests to
fail.
.PP
The \fIt/test.pl\fR library provides some of the features of
Test::More, but avoids loading most modules and uses as few core
features as possible.
.PP
If you write your own test, use the Test Anything
Protocol <http://testanything.org>.
.IP "\(bu" 4
\&\fIt/base\fR, \fIt/comp\fR and \fIt/opbasic\fR
.Sp
Since we don't know if require works, or even subroutines, use ad hoc
tests for these three.  Step carefully to avoid using the feature being
tested.  Tests in \fIt/opbasic\fR, for instance, have been placed there
rather than in \fIt/op\fR because they test functionality which
\&\fIt/test.pl\fR presumes has already been demonstrated to work.
.IP "\(bu" 4
\&\fIt/cmd\fR, \fIt/run\fR, \fIt/io\fR and \fIt/op\fR
.Sp
Now that basic \fIrequire()\fR and subroutines are tested, you can use the
\&\fIt/test.pl\fR library.
.Sp
You can also use certain libraries like Config conditionally, but be
sure to skip the test gracefully if it's not there.
.IP "\(bu" 4
Everything else
.Sp
Now that the core of Perl is tested, Test::More can and should be
used.  You can also use the full suite of core modules in the tests.
.PP
When you say \*(L"make test\*(R", Perl uses the \fIt/TEST\fR program to run the
test suite (except under Win32 where it uses \fIt/harness\fR instead).
All tests are run from the \fIt/\fR directory, \fBnot\fR the directory which
contains the test.  This causes some problems with the tests in
\&\fIlib/\fR, so here's some opportunity for some patching.
.PP
You must be triply conscious of cross-platform concerns.  This usually
boils down to using File::Spec and avoiding things like \f(CW\*(C`fork()\*(C'\fR
and \f(CW\*(C`system()\*(C'\fR unless absolutely necessary.
.ie n .SS "Special ""make test"" targets"
.el .SS "Special \f(CWmake test\fP targets"
.IX Subsection "Special make test targets"
There are various special make targets that can be used to test Perl
slightly differently than the standard \*(L"test\*(R" target.  Not all them are
expected to give a 100% success rate.  Many of them have several
aliases, and many of them are not available on certain operating
systems.
.IP "\(bu" 4
test_porting
.Sp
This runs some basic sanity tests on the source tree and helps catch
basic errors before you submit a patch.
.IP "\(bu" 4
minitest
.Sp
Run \fIminiperl\fR on \fIt/base\fR, \fIt/comp\fR, \fIt/cmd\fR, \fIt/run\fR, \fIt/io\fR,
\&\fIt/op\fR, \fIt/uni\fR and \fIt/mro\fR tests.
.IP "\(bu" 4
test.valgrind check.valgrind
.Sp
(Only in Linux) Run all the tests using the memory leak + naughty
memory access tool \*(L"valgrind\*(R".  The log files will be named
\&\fItestname.valgrind\fR.
.IP "\(bu" 4
test_harness
.Sp
Run the test suite with the \fIt/harness\fR controlling program, instead
of \fIt/TEST\fR.  \fIt/harness\fR is more sophisticated, and uses the
Test::Harness module, thus using this test target supposes that perl
mostly works.  The main advantage for our purposes is that it prints a
detailed summary of failed tests at the end.  Also, unlike \fIt/TEST\fR,
it doesn't redirect stderr to stdout.
.Sp
Note that under Win32 \fIt/harness\fR is always used instead of \fIt/TEST\fR,
so there is no special \*(L"test_harness\*(R" target.
.Sp
Under Win32's \*(L"test\*(R" target you may use the \s-1TEST_SWITCHES\s0 and
\&\s-1TEST_FILES\s0 environment variables to control the behaviour of
\&\fIt/harness\fR.  This means you can say
.Sp
.Vb 2
\&    nmake test TEST_FILES="op/*.t"
\&    nmake test TEST_SWITCHES="\-torture" TEST_FILES="op/*.t"
.Ve
.IP "\(bu" 4
test-notty test_notty
.Sp
Sets \s-1PERL_SKIP_TTY_TEST\s0 to true before running normal test.
.SS "Parallel tests"
.IX Subsection "Parallel tests"
The core distribution can now run its regression tests in parallel on
Unix-like platforms.  Instead of running \f(CW\*(C`make test\*(C'\fR, set \f(CW\*(C`TEST_JOBS\*(C'\fR
in your environment to the number of tests to run in parallel, and run
\&\f(CW\*(C`make test_harness\*(C'\fR.  On a Bourne-like shell, this can be done as
.PP
.Vb 1
\&    TEST_JOBS=3 make test_harness  # Run 3 tests in parallel
.Ve
.PP
An environment variable is used, rather than parallel make itself,
because TAP::Harness needs to be able to schedule individual
non-conflicting test scripts itself, and there is no standard interface
to \f(CW\*(C`make\*(C'\fR utilities to interact with their job schedulers.
.PP
Note that currently some test scripts may fail when run in parallel
(most notably \fIext/IO/t/io_dir.t\fR).  If necessary, run just the
failing scripts again sequentially and see if the failures go away.
.SS "Running tests by hand"
.IX Subsection "Running tests by hand"
You can run part of the test suite by hand by using one of the
following commands from the \fIt/\fR directory:
.PP
.Vb 1
\&    ./perl \-I../lib TEST list\-of\-.t\-files
.Ve
.PP
or
.PP
.Vb 1
\&    ./perl \-I../lib harness list\-of\-.t\-files
.Ve
.PP
(If you don't specify test scripts, the whole test suite will be run.)
.SS "Using \fIt/harness\fP for testing"
.IX Subsection "Using t/harness for testing"
If you use \f(CW\*(C`harness\*(C'\fR for testing, you have several command line
options available to you.  The arguments are as follows, and are in the
order that they must appear if used together.
.PP
.Vb 2
\&    harness \-v \-torture \-re=pattern LIST OF FILES TO TEST
\&    harness \-v \-torture \-re LIST OF PATTERNS TO MATCH
.Ve
.PP
If \f(CW\*(C`LIST OF FILES TO TEST\*(C'\fR is omitted, the file list is obtained from
the manifest.  The file list may include shell wildcards which will be
expanded out.
.IP "\(bu" 4
\&\-v
.Sp
Run the tests under verbose mode so you can see what tests were run,
and debug output.
.IP "\(bu" 4
\&\-torture
.Sp
Run the torture tests as well as the normal set.
.IP "\(bu" 4
\&\-re=PATTERN
.Sp
Filter the file list so that all the test files run match \s-1PATTERN.\s0
Note that this form is distinct from the \fB\-re \s-1LIST OF PATTERNS\s0\fR form
below in that it allows the file list to be provided as well.
.IP "\(bu" 4
\&\-re \s-1LIST OF PATTERNS\s0
.Sp
Filter the file list so that all the test files run match
/(LIST|OF|PATTERNS)/.  Note that with this form the patterns are joined
by '|' and you cannot supply a list of files, instead the test files
are obtained from the \s-1MANIFEST.\s0
.PP
You can run an individual test by a command similar to
.PP
.Vb 1
\&    ./perl \-I../lib path/to/foo.t
.Ve
.PP
except that the harnesses set up some environment variables that may
affect the execution of the test:
.IP "\(bu" 4
PERL_CORE=1
.Sp
indicates that we're running this test as part of the perl core test
suite.  This is useful for modules that have a dual life on \s-1CPAN.\s0
.IP "\(bu" 4
PERL_DESTRUCT_LEVEL=2
.Sp
is set to 2 if it isn't set already (see
\&\*(L"\s-1PERL_DESTRUCT_LEVEL\*(R"\s0 in perlhacktips).
.IP "\(bu" 4
\&\s-1PERL\s0
.Sp
(used only by \fIt/TEST\fR) if set, overrides the path to the perl
executable that should be used to run the tests (the default being
\&\fI./perl\fR).
.IP "\(bu" 4
\&\s-1PERL_SKIP_TTY_TEST\s0
.Sp
if set, tells to skip the tests that need a terminal.  It's actually
set automatically by the Makefile, but can also be forced artificially
by running 'make test_notty'.
.PP
\fIOther environment variables that may influence tests\fR
.IX Subsection "Other environment variables that may influence tests"
.IP "\(bu" 4
PERL_TEST_Net_Ping
.Sp
Setting this variable runs all the Net::Ping modules tests, otherwise
some tests that interact with the outside world are skipped.  See
perl58delta.
.IP "\(bu" 4
\&\s-1PERL_TEST_NOVREXX\s0
.Sp
Setting this variable skips the vrexx.t tests for \s-1OS2::REXX.\s0
.IP "\(bu" 4
\&\s-1PERL_TEST_NUMCONVERTS\s0
.Sp
This sets a variable in op/numconvert.t.
.IP "\(bu" 4
\&\s-1PERL_TEST_MEMORY\s0
.Sp
Setting this variable includes the tests in \fIt/bigmem/\fR.  This should
be set to the number of gigabytes of memory available for testing, eg.
\&\f(CW\*(C`PERL_TEST_MEMORY=4\*(C'\fR indicates that tests that require 4GiB of
available memory can be run safely.
.PP
See also the documentation for the Test and Test::Harness modules, for
more environment variables that affect testing.
.SH "MORE READING FOR GUTS HACKERS"
.IX Header "MORE READING FOR GUTS HACKERS"
To hack on the Perl guts, you'll need to read the following things:
.IP "\(bu" 4
perlsource
.Sp
An overview of the Perl source tree.  This will help you find the files
you're looking for.
.IP "\(bu" 4
perlinterp
.Sp
An overview of the Perl interpreter source code and some details on how
Perl does what it does.
.IP "\(bu" 4
perlhacktut
.Sp
This document walks through the creation of a small patch to Perl's C
code.  If you're just getting started with Perl core hacking, this will
help you understand how it works.
.IP "\(bu" 4
perlhacktips
.Sp
More details on hacking the Perl core.  This document focuses on lower
level details such as how to write tests, compilation issues,
portability, debugging, etc.
.Sp
If you plan on doing serious C hacking, make sure to read this.
.IP "\(bu" 4
perlguts
.Sp
This is of paramount importance, since it's the documentation of what
goes where in the Perl source.  Read it over a couple of times and it
might start to make sense \- don't worry if it doesn't yet, because the
best way to study it is to read it in conjunction with poking at Perl
source, and we'll do that later on.
.Sp
Gisle Aas's \*(L"illustrated perlguts\*(R", also known as \fIillguts\fR, has very
helpful pictures:
.Sp
<http://search.cpan.org/dist/illguts/>
.IP "\(bu" 4
perlxstut and perlxs
.Sp
A working knowledge of \s-1XSUB\s0 programming is incredibly useful for core
hacking; XSUBs use techniques drawn from the \s-1PP\s0 code, the portion of
the guts that actually executes a Perl program.  It's a lot gentler to
learn those techniques from simple examples and explanation than from
the core itself.
.IP "\(bu" 4
perlapi
.Sp
The documentation for the Perl \s-1API\s0 explains what some of the internal
functions do, as well as the many macros used in the source.
.IP "\(bu" 4
\&\fIPorting/pumpkin.pod\fR
.Sp
This is a collection of words of wisdom for a Perl porter; some of it
is only useful to the pumpkin holder, but most of it applies to anyone
wanting to go about Perl development.
.SH "CPAN TESTERS AND PERL SMOKERS"
.IX Header "CPAN TESTERS AND PERL SMOKERS"
The \s-1CPAN\s0 testers ( http://testers.cpan.org/ ) are a group of volunteers
who test \s-1CPAN\s0 modules on a variety of platforms.
.PP
Perl Smokers ( http://www.nntp.perl.org/group/perl.daily\-build/ and
http://www.nntp.perl.org/group/perl.daily\-build.reports/ )
automatically test Perl source releases on platforms with various
configurations.
.PP
Both efforts welcome volunteers.  In order to get involved in smoke
testing of the perl itself visit
<http://search.cpan.org/dist/Test\-Smoke/>.  In order to start smoke
testing \s-1CPAN\s0 modules visit
<http://search.cpan.org/dist/CPANPLUS\-YACSmoke/> or
<http://search.cpan.org/dist/minismokebox/> or
<http://search.cpan.org/dist/CPAN\-Reporter/>.
.SH "WHAT NEXT?"
.IX Header "WHAT NEXT?"
If you've read all the documentation in the document and the ones
listed above, you're more than ready to hack on Perl.
.PP
Here's some more recommendations
.IP "\(bu" 4
Subscribe to perl5\-porters, follow the patches and try and understand
them; don't be afraid to ask if there's a portion you're not clear on \-
who knows, you may unearth a bug in the patch...
.IP "\(bu" 4
Do read the \s-1README\s0 associated with your operating system, e.g.
\&\s-1README\s0.aix on the \s-1IBM AIX OS. \s0 Don't hesitate to supply patches to that
\&\s-1README\s0 if you find anything missing or changed over a new \s-1OS\s0 release.
.IP "\(bu" 4
Find an area of Perl that seems interesting to you, and see if you can
work out how it works.  Scan through the source, and step over it in
the debugger.  Play, poke, investigate, fiddle! You'll probably get to
understand not just your chosen area but a much wider range of
\&\fIperl\fR's activity as well, and probably sooner than you'd think.
.ie n .SS """The Road goes ever on and on, down from the door where it began."""
.el .SS "``The Road goes ever on and on, down from the door where it began.''"
.IX Subsection "The Road goes ever on and on, down from the door where it began."
If you can do these things, you've started on the long road to Perl
porting.  Thanks for wanting to help make Perl better \- and happy
hacking!
.SS "Metaphoric Quotations"
.IX Subsection "Metaphoric Quotations"
If you recognized the quote about the Road above, you're in luck.
.PP
Most software projects begin each file with a literal description of
each file's purpose.  Perl instead begins each with a literary allusion
to that file's purpose.
.PP
Like chapters in many books, all top-level Perl source files (along
with a few others here and there) begin with an epigrammatic
inscription that alludes, indirectly and metaphorically, to the
material you're about to read.
.PP
Quotations are taken from writings of J.R.R. Tolkien pertaining to his
Legendarium, almost always from \fIThe Lord of the Rings\fR.  Chapters and
page numbers are given using the following editions:
.IP "\(bu" 4
\&\fIThe Hobbit\fR, by J.R.R. Tolkien.  The hardcover, 70th\-anniversary
edition of 2007 was used, published in the \s-1UK\s0 by Harper Collins
Publishers and in the \s-1US\s0 by the Houghton Mifflin Company.
.IP "\(bu" 4
\&\fIThe Lord of the Rings\fR, by J.R.R. Tolkien.  The hardcover,
50th\-anniversary edition of 2004 was used, published in the \s-1UK\s0 by
Harper Collins Publishers and in the \s-1US\s0 by the Houghton Mifflin
Company.
.IP "\(bu" 4
\&\fIThe Lays of Beleriand\fR, by J.R.R. Tolkien and published posthumously
by his son and literary executor, C.J.R. Tolkien, being the 3rd of the
12 volumes in Christopher's mammoth \fIHistory of Middle Earth\fR.  Page
numbers derive from the hardcover edition, first published in 1983 by
George Allen & Unwin; no page numbers changed for the special 3\-volume
omnibus edition of 2002 or the various trade-paper editions, all again
now by Harper Collins or Houghton Mifflin.
.PP
Other \s-1JRRT\s0 books fair game for quotes would thus include \fIThe
Adventures of Tom Bombadil\fR, \fIThe Silmarillion\fR, \fIUnfinished Tales\fR,
and \fIThe Tale of the Children of Hurin\fR, all but the first
posthumously assembled by \s-1CJRT. \s0 But \fIThe Lord of the Rings\fR itself is
perfectly fine and probably best to quote from, provided you can find a
suitable quote there.
.PP
So if you were to supply a new, complete, top-level source file to add
to Perl, you should conform to this peculiar practice by yourself
selecting an appropriate quotation from Tolkien, retaining the original
spelling and punctuation and using the same format the rest of the
quotes are in.  Indirect and oblique is just fine; remember, it's a
metaphor, so being meta is, after all, what it's for.
.SH "AUTHOR"
.IX Header "AUTHOR"
This document was originally written by Nathan Torkington, and is
maintained by the perl5\-porters mailing list.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perlhacktips.1                               0100644 0001750 0001750 00000160606 12566207441 023441  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLHACKTIPS 1"
.TH PERLHACKTIPS 1 "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlhacktips \- Tips for Perl core C code hacking
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document will help you learn the best way to go about hacking on
the Perl core C code. It covers common problems, debugging, profiling,
and more.
.PP
If you haven't read perlhack and perlhacktut yet, you might want
to do that first.
.SH "COMMON PROBLEMS"
.IX Header "COMMON PROBLEMS"
Perl source plays by \s-1ANSI C89\s0 rules: no C99 (or \*(C+) extensions. In
some cases we have to take pre-ANSI requirements into consideration.
You don't care about some particular platform having broken Perl? I
hear there is still a strong demand for J2EE programmers.
.SS "Perl environment problems"
.IX Subsection "Perl environment problems"
.IP "\(bu" 4
Not compiling with threading
.Sp
Compiling with threading (\-Duseithreads) completely rewrites the
function prototypes of Perl. You better try your changes with that.
Related to this is the difference between \*(L"Perl_\-less\*(R" and \*(L"Perl_\-ly\*(R"
APIs, for example:
.Sp
.Vb 2
\&  Perl_sv_setiv(aTHX_ ...);
\&  sv_setiv(...);
.Ve
.Sp
The first one explicitly passes in the context, which is needed for
e.g. threaded builds. The second one does that implicitly; do not get
them mixed. If you are not passing in a aTHX_, you will need to do a
dTHX (or a dVAR) as the first thing in the function.
.Sp
See \*(L"How multiple interpreters and concurrency are
supported\*(R" in perlguts for further discussion about context.
.IP "\(bu" 4
Not compiling with \-DDEBUGGING
.Sp
The \s-1DEBUGGING\s0 define exposes more code to the compiler, therefore more
ways for things to go wrong. You should try it.
.IP "\(bu" 4
Introducing (non-read-only) globals
.Sp
Do not introduce any modifiable globals, truly global or file static.
They are bad form and complicate multithreading and other forms of
concurrency. The right way is to introduce them as new interpreter
variables, see \fIintrpvar.h\fR (at the very end for binary
compatibility).
.Sp
Introducing read-only (const) globals is okay, as long as you verify
with e.g. \f(CW\*(C`nm libperl.a|egrep \-v \*(Aq [TURtr] \*(Aq\*(C'\fR (if your \f(CW\*(C`nm\*(C'\fR has
BSD-style output) that the data you added really is read-only. (If it
is, it shouldn't show up in the output of that command.)
.Sp
If you want to have static strings, make them constant:
.Sp
.Vb 1
\&  static const char etc[] = "...";
.Ve
.Sp
If you want to have arrays of constant strings, note carefully the
right combination of \f(CW\*(C`const\*(C'\fRs:
.Sp
.Vb 2
\&    static const char * const yippee[] =
\&        {"hi", "ho", "silver"};
.Ve
.Sp
There is a way to completely hide any modifiable globals (they are all
moved to heap), the compilation setting
\&\f(CW\*(C`\-DPERL_GLOBAL_STRUCT_PRIVATE\*(C'\fR. It is not normally used, but can be
used for testing, read more about it in \*(L"Background and
\&\s-1PERL_IMPLICIT_CONTEXT\*(R"\s0 in perlguts.
.IP "\(bu" 4
Not exporting your new function
.Sp
Some platforms (Win32, \s-1AIX, VMS, OS/2,\s0 to name a few) require any
function that is part of the public \s-1API \s0(the shared Perl library) to be
explicitly marked as exported. See the discussion about \fIembed.pl\fR in
perlguts.
.IP "\(bu" 4
Exporting your new function
.Sp
The new shiny result of either genuine new functionality or your
arduous refactoring is now ready and correctly exported. So what could
possibly go wrong?
.Sp
Maybe simply that your function did not need to be exported in the
first place. Perl has a long and not so glorious history of exporting
functions that it should not have.
.Sp
If the function is used only inside one source code file, make it
static. See the discussion about \fIembed.pl\fR in perlguts.
.Sp
If the function is used across several files, but intended only for
Perl's internal use (and this should be the common case), do not export
it to the public \s-1API.\s0 See the discussion about \fIembed.pl\fR in
perlguts.
.SS "Portability problems"
.IX Subsection "Portability problems"
The following are common causes of compilation and/or execution
failures, not common to Perl as such. The C \s-1FAQ\s0 is good bedtime
reading. Please test your changes with as many C compilers and
platforms as possible; we will, anyway, and it's nice to save oneself
from public embarrassment.
.PP
If using gcc, you can add the \f(CW\*(C`\-std=c89\*(C'\fR option which will hopefully
catch most of these unportabilities. (However it might also catch
incompatibilities in your system's header files.)
.PP
Use the Configure \f(CW\*(C`\-Dgccansipedantic\*(C'\fR flag to enable the gcc \f(CW\*(C`\-ansi
\&\-pedantic\*(C'\fR flags which enforce stricter \s-1ANSI\s0 rules.
.PP
If using the \f(CW\*(C`gcc \-Wall\*(C'\fR note that not all the possible warnings (like
\&\f(CW\*(C`\-Wunitialized\*(C'\fR) are given unless you also compile with \f(CW\*(C`\-O\*(C'\fR.
.PP
Note that if using gcc, starting from Perl 5.9.5 the Perl core source
code files (the ones at the top level of the source code distribution,
but not e.g. the extensions under ext/) are automatically compiled with
as many as possible of the \f(CW\*(C`\-std=c89\*(C'\fR, \f(CW\*(C`\-ansi\*(C'\fR, \f(CW\*(C`\-pedantic\*(C'\fR, and a
selection of \f(CW\*(C`\-W\*(C'\fR flags (see cflags.SH).
.PP
Also study perlport carefully to avoid any bad assumptions about the
operating system, filesystems, and so forth.
.PP
You may once in a while try a \*(L"make microperl\*(R" to see whether we can
still compile Perl with just the bare minimum of interfaces. (See
\&\s-1README\s0.micro.)
.PP
Do not assume an operating system indicates a certain compiler.
.IP "\(bu" 4
Casting pointers to integers or casting integers to pointers
.Sp
.Vb 3
\&    void castaway(U8* p)
\&    {
\&      IV i = p;
.Ve
.Sp
or
.Sp
.Vb 3
\&    void castaway(U8* p)
\&    {
\&      IV i = (IV)p;
.Ve
.Sp
Both are bad, and broken, and unportable. Use the \s-1\fIPTR2IV\s0()\fR macro that
does it right. (Likewise, there are \s-1\fIPTR2UV\s0()\fR, \s-1\fIPTR2NV\s0()\fR, \s-1\fIINT2PTR\s0()\fR, and
\&\s-1\fINUM2PTR\s0()\fR.)
.IP "\(bu" 4
Casting between data function pointers and data pointers
.Sp
Technically speaking casting between function pointers and data
pointers is unportable and undefined, but practically speaking it seems
to work, but you should use the \s-1\fIFPTR2DPTR\s0()\fR and \s-1\fIDPTR2FPTR\s0()\fR macros.
Sometimes you can also play games with unions.
.IP "\(bu" 4
Assuming sizeof(int) == sizeof(long)
.Sp
There are platforms where longs are 64 bits, and platforms where ints
are 64 bits, and while we are out to shock you, even platforms where
shorts are 64 bits. This is all legal according to the C standard. (In
other words, \*(L"long long\*(R" is not a portable way to specify 64 bits, and
\&\*(L"long long\*(R" is not even guaranteed to be any wider than \*(L"long\*(R".)
.Sp
Instead, use the definitions \s-1IV, UV, IVSIZE, I32SIZE,\s0 and so forth.
Avoid things like I32 because they are \fBnot\fR guaranteed to be
\&\fIexactly\fR 32 bits, they are \fIat least\fR 32 bits, nor are they
guaranteed to be \fBint\fR or \fBlong\fR. If you really explicitly need
64\-bit variables, use I64 and U64, but only if guarded by \s-1HAS_QUAD.\s0
.IP "\(bu" 4
Assuming one can dereference any type of pointer for any type of data
.Sp
.Vb 2
\&  char *p = ...;
\&  long pony = *p;    /* BAD */
.Ve
.Sp
Many platforms, quite rightly so, will give you a core dump instead of
a pony if the p happens not to be correctly aligned.
.IP "\(bu" 4
Lvalue casts
.Sp
.Vb 1
\&  (int)*p = ...;    /* BAD */
.Ve
.Sp
Simply not portable. Get your lvalue to be of the right type, or maybe
use temporary variables, or dirty tricks with unions.
.IP "\(bu" 4
Assume \fBanything\fR about structs (especially the ones you don't
control, like the ones coming from the system headers)
.RS 4
.IP "\(bu" 8
That a certain field exists in a struct
.IP "\(bu" 8
That no other fields exist besides the ones you know of
.IP "\(bu" 8
That a field is of certain signedness, sizeof, or type
.IP "\(bu" 8
That the fields are in a certain order
.RS 8
.IP "\(bu" 8
While C guarantees the ordering specified in the struct definition,
between different platforms the definitions might differ
.RE
.RS 8
.RE
.IP "\(bu" 8
That the sizeof(struct) or the alignments are the same everywhere
.RS 8
.IP "\(bu" 8
There might be padding bytes between the fields to align the fields \-
the bytes can be anything
.IP "\(bu" 8
Structs are required to be aligned to the maximum alignment required by
the fields \- which for native types is for usually equivalent to
\&\fIsizeof()\fR of the field
.RE
.RS 8
.RE
.RE
.RS 4
.RE
.IP "\(bu" 4
Assuming the character set is ASCIIish
.Sp
Perl can compile and run under \s-1EBCDIC\s0 platforms. See perlebcdic.
This is transparent for the most part, but because the character sets
differ, you shouldn't use numeric (decimal, octal, nor hex) constants
to refer to characters. You can safely say 'A', but not 0x41. You can
safely say '\en', but not \e012. If a character doesn't have a trivial
input form, you should add it to the list in
\&\fIregen/unicode_constants.pl\fR, and have Perl create #defines for you,
based on the current platform.
.Sp
Also, the range 'A' \- 'Z' in \s-1ASCII\s0 is an unbroken sequence of 26 upper
case alphabetic characters. That is not true in \s-1EBCDIC.\s0 Nor for 'a' to
\&'z'. But '0' \- '9' is an unbroken range in both systems. Don't assume
anything about other ranges.
.Sp
Many of the comments in the existing code ignore the possibility of
\&\s-1EBCDIC,\s0 and may be wrong therefore, even if the code works. This is
actually a tribute to the successful transparent insertion of being
able to handle \s-1EBCDIC\s0 without having to change pre-existing code.
.Sp
\&\s-1UTF\-8\s0 and UTF-EBCDIC are two different encodings used to represent
Unicode code points as sequences of bytes. Macros  with the same names
(but different definitions) in \f(CW\*(C`utf8.h\*(C'\fR and \f(CW\*(C`utfebcdic.h\*(C'\fR are used to
allow the calling code to think that there is only one such encoding.
This is almost always referred to as \f(CW\*(C`utf8\*(C'\fR, but it means the \s-1EBCDIC\s0
version as well. Again, comments in the code may well be wrong even if
the code itself is right. For example, the concept of \f(CW\*(C`invariant
characters\*(C'\fR differs between \s-1ASCII\s0 and \s-1EBCDIC.\s0 On \s-1ASCII\s0 platforms, only
characters that do not have the high-order bit set (i.e. whose ordinals
are strict \s-1ASCII, 0 \- 127\s0) are invariant, and the documentation and
comments in the code may assume that, often referring to something
like, say, \f(CW\*(C`hibit\*(C'\fR. The situation differs and is not so simple on
\&\s-1EBCDIC\s0 machines, but as long as the code itself uses the
\&\f(CW\*(C`NATIVE_IS_INVARIANT()\*(C'\fR macro appropriately, it works, even if the
comments are wrong.
.IP "\(bu" 4
Assuming the character set is just \s-1ASCII\s0
.Sp
\&\s-1ASCII\s0 is a 7 bit encoding, but bytes have 8 bits in them. The 128 extra
characters have different meanings depending on the locale.  Absent a
locale, currently these extra characters are generally considered to be
unassigned, and this has presented some problems. This is being changed
starting in 5.12 so that these characters will be considered to be
Latin\-1 (\s-1ISO\-8859\-1\s0).
.IP "\(bu" 4
Mixing #define and #ifdef
.Sp
.Vb 6
\&  #define BURGLE(x) ... \e
\&  #ifdef BURGLE_OLD_STYLE        /* BAD */
\&  ... do it the old way ... \e
\&  #else
\&  ... do it the new way ... \e
\&  #endif
.Ve
.Sp
You cannot portably \*(L"stack\*(R" cpp directives. For example in the above
you need two separate \s-1\fIBURGLE\s0()\fR #defines, one for each #ifdef branch.
.IP "\(bu" 4
Adding non-comment stuff after #endif or #else
.Sp
.Vb 5
\&  #ifdef SNOSH
\&  ...
\&  #else !SNOSH    /* BAD */
\&  ...
\&  #endif SNOSH    /* BAD */
.Ve
.Sp
The #endif and #else cannot portably have anything non-comment after
them. If you want to document what is going (which is a good idea
especially if the branches are long), use (C) comments:
.Sp
.Vb 5
\&  #ifdef SNOSH
\&  ...
\&  #else /* !SNOSH */
\&  ...
\&  #endif /* SNOSH */
.Ve
.Sp
The gcc option \f(CW\*(C`\-Wendif\-labels\*(C'\fR warns about the bad variant (by
default on starting from Perl 5.9.4).
.IP "\(bu" 4
Having a comma after the last element of an enum list
.Sp
.Vb 5
\&  enum color {
\&    CERULEAN,
\&    CHARTREUSE,
\&    CINNABAR,     /* BAD */
\&  };
.Ve
.Sp
is not portable. Leave out the last comma.
.Sp
Also note that whether enums are implicitly morphable to ints varies
between compilers, you might need to (int).
.IP "\(bu" 4
Using //\-comments
.Sp
.Vb 1
\&  // This function bamfoodles the zorklator.   /* BAD */
.Ve
.Sp
That is C99 or \*(C+. Perl is C89. Using the //\-comments is silently
allowed by many C compilers but cranking up the \s-1ANSI C89\s0 strictness
(which we like to do) causes the compilation to fail.
.IP "\(bu" 4
Mixing declarations and code
.Sp
.Vb 5
\&  void zorklator()
\&  {
\&    int n = 3;
\&    set_zorkmids(n);    /* BAD */
\&    int q = 4;
.Ve
.Sp
That is C99 or \*(C+. Some C compilers allow that, but you shouldn't.
.Sp
The gcc option \f(CW\*(C`\-Wdeclaration\-after\-statements\*(C'\fR scans for such
problems (by default on starting from Perl 5.9.4).
.IP "\(bu" 4
Introducing variables inside \fIfor()\fR
.Sp
.Vb 1
\&  for(int i = ...; ...; ...) {    /* BAD */
.Ve
.Sp
That is C99 or \*(C+. While it would indeed be awfully nice to have that
also in C89, to limit the scope of the loop variable, alas, we cannot.
.IP "\(bu" 4
Mixing signed char pointers with unsigned char pointers
.Sp
.Vb 4
\&  int foo(char *s) { ... }
\&  ...
\&  unsigned char *t = ...; /* Or U8* t = ... */
\&  foo(t);   /* BAD */
.Ve
.Sp
While this is legal practice, it is certainly dubious, and downright
fatal in at least one platform: for example \s-1VMS\s0 cc considers this a
fatal error. One cause for people often making this mistake is that a
\&\*(L"naked char\*(R" and therefore dereferencing a \*(L"naked char pointer\*(R" have an
undefined signedness: it depends on the compiler and the flags of the
compiler and the underlying platform whether the result is signed or
unsigned. For this very same reason using a 'char' as an array index is
bad.
.IP "\(bu" 4
Macros that have string constants and their arguments as substrings of
the string constants
.Sp
.Vb 2
\&  #define FOO(n) printf("number = %d\en", n)    /* BAD */
\&  FOO(10);
.Ve
.Sp
Pre-ANSI semantics for that was equivalent to
.Sp
.Vb 1
\&  printf("10umber = %d\e10");
.Ve
.Sp
which is probably not what you were expecting. Unfortunately at least
one reasonably common and modern C compiler does \*(L"real backward
compatibility\*(R" here, in \s-1AIX\s0 that is what still happens even though the
rest of the \s-1AIX\s0 compiler is very happily C89.
.IP "\(bu" 4
Using printf formats for non-basic C types
.Sp
.Vb 2
\&   IV i = ...;
\&   printf("i = %d\en", i);    /* BAD */
.Ve
.Sp
While this might by accident work in some platform (where \s-1IV\s0 happens to
be an \f(CW\*(C`int\*(C'\fR), in general it cannot. \s-1IV\s0 might be something larger. Even
worse the situation is with more specific types (defined by Perl's
configuration step in \fIconfig.h\fR):
.Sp
.Vb 2
\&   Uid_t who = ...;
\&   printf("who = %d\en", who);    /* BAD */
.Ve
.Sp
The problem here is that Uid_t might be not only not \f(CW\*(C`int\*(C'\fR\-wide but it
might also be unsigned, in which case large uids would be printed as
negative values.
.Sp
There is no simple solution to this because of \fIprintf()\fR's limited
intelligence, but for many types the right format is available as with
either 'f' or '_f' suffix, for example:
.Sp
.Vb 2
\&   IVdf /* IV in decimal */
\&   UVxf /* UV is hexadecimal */
\&
\&   printf("i = %"IVdf"\en", i); /* The IVdf is a string constant. */
\&
\&   Uid_t_f /* Uid_t in decimal */
\&
\&   printf("who = %"Uid_t_f"\en", who);
.Ve
.Sp
Or you can try casting to a \*(L"wide enough\*(R" type:
.Sp
.Vb 1
\&   printf("i = %"IVdf"\en", (IV)something_very_small_and_signed);
.Ve
.Sp
Also remember that the \f(CW%p\fR format really does require a void pointer:
.Sp
.Vb 2
\&   U8* p = ...;
\&   printf("p = %p\en", (void*)p);
.Ve
.Sp
The gcc option \f(CW\*(C`\-Wformat\*(C'\fR scans for such problems.
.IP "\(bu" 4
Blindly using variadic macros
.Sp
gcc has had them for a while with its own syntax, and C99 brought them
with a standardized syntax. Don't use the former, and use the latter
only if the \s-1HAS_C99_VARIADIC_MACROS\s0 is defined.
.IP "\(bu" 4
Blindly passing va_list
.Sp
Not all platforms support passing va_list to further varargs (stdarg)
functions. The right thing to do is to copy the va_list using the
\&\fIPerl_va_copy()\fR if the \s-1NEED_VA_COPY\s0 is defined.
.IP "\(bu" 4
Using gcc statement expressions
.Sp
.Vb 1
\&   val = ({...;...;...});    /* BAD */
.Ve
.Sp
While a nice extension, it's not portable. The Perl code does
admittedly use them if available to gain some extra speed (essentially
as a funky form of inlining), but you shouldn't.
.IP "\(bu" 4
Binding together several statements in a macro
.Sp
Use the macros \s-1STMT_START\s0 and \s-1STMT_END.\s0
.Sp
.Vb 3
\&   STMT_START {
\&      ...
\&   } STMT_END
.Ve
.IP "\(bu" 4
Testing for operating systems or versions when should be testing for
features
.Sp
.Vb 3
\&  #ifdef _\|_FOONIX_\|_    /* BAD */
\&  foo = quux();
\&  #endif
.Ve
.Sp
Unless you know with 100% certainty that \fIquux()\fR is only ever available
for the \*(L"Foonix\*(R" operating system \fBand\fR that is available \fBand\fR
correctly working for \fBall\fR past, present, \fBand\fR future versions of
\&\*(L"Foonix\*(R", the above is very wrong. This is more correct (though still
not perfect, because the below is a compile-time check):
.Sp
.Vb 3
\&  #ifdef HAS_QUUX
\&  foo = quux();
\&  #endif
.Ve
.Sp
How does the \s-1HAS_QUUX\s0 become defined where it needs to be?  Well, if
Foonix happens to be Unixy enough to be able to run the Configure
script, and Configure has been taught about detecting and testing
\&\fIquux()\fR, the \s-1HAS_QUUX\s0 will be correctly defined. In other platforms, the
corresponding configuration step will hopefully do the same.
.Sp
In a pinch, if you cannot wait for Configure to be educated, or if you
have a good hunch of where \fIquux()\fR might be available, you can
temporarily try the following:
.Sp
.Vb 3
\&  #if (defined(_\|_FOONIX_\|_) || defined(_\|_BARNIX_\|_))
\&  # define HAS_QUUX
\&  #endif
\&
\&  ...
\&
\&  #ifdef HAS_QUUX
\&  foo = quux();
\&  #endif
.Ve
.Sp
But in any case, try to keep the features and operating systems
separate.
.SS "Problematic System Interfaces"
.IX Subsection "Problematic System Interfaces"
.IP "\(bu" 4
\&\fImalloc\fR\|(0), \fIrealloc\fR\|(0), calloc(0, 0) are non-portable. To be portable
allocate at least one byte. (In general you should rarely need to work
at this low level, but instead use the various malloc wrappers.)
.IP "\(bu" 4
\&\fIsnprintf()\fR \- the return type is unportable. Use \fImy_snprintf()\fR instead.
.SS "Security problems"
.IX Subsection "Security problems"
Last but not least, here are various tips for safer coding.
.IP "\(bu" 4
Do not use \fIgets()\fR
.Sp
Or we will publicly ridicule you. Seriously.
.IP "\(bu" 4
Do not use \fIstrcpy()\fR or \fIstrcat()\fR or \fIstrncpy()\fR or \fIstrncat()\fR
.Sp
Use \fImy_strlcpy()\fR and \fImy_strlcat()\fR instead: they either use the native
implementation, or Perl's own implementation (borrowed from the public
domain implementation of \s-1INN\s0).
.IP "\(bu" 4
Do not use \fIsprintf()\fR or \fIvsprintf()\fR
.Sp
If you really want just plain byte strings, use \fImy_snprintf()\fR and
\&\fImy_vsnprintf()\fR instead, which will try to use \fIsnprintf()\fR and
\&\fIvsnprintf()\fR if those safer APIs are available. If you want something
fancier than a plain byte string, use SVs and \fIPerl_sv_catpvf()\fR.
.SH "DEBUGGING"
.IX Header "DEBUGGING"
You can compile a special debugging version of Perl, which allows you
to use the \f(CW\*(C`\-D\*(C'\fR option of Perl to tell more about what Perl is doing.
But sometimes there is no alternative than to dive in with a debugger,
either to see the stack trace of a core dump (very useful in a bug
report), or trying to figure out what went wrong before the core dump
happened, or how did we end up having wrong or unexpected results.
.SS "Poking at Perl"
.IX Subsection "Poking at Perl"
To really poke around with Perl, you'll probably want to build Perl for
debugging, like this:
.PP
.Vb 2
\&    ./Configure \-d \-D optimize=\-g
\&    make
.Ve
.PP
\&\f(CW\*(C`\-g\*(C'\fR is a flag to the C compiler to have it produce debugging
information which will allow us to step through a running program, and
to see in which C function we are at (without the debugging information
we might see only the numerical addresses of the functions, which is
not very helpful).
.PP
\&\fIConfigure\fR will also turn on the \f(CW\*(C`DEBUGGING\*(C'\fR compilation symbol
which enables all the internal debugging code in Perl. There are a
whole bunch of things you can debug with this: perlrun lists them
all, and the best way to find out about them is to play about with
them. The most useful options are probably
.PP
.Vb 4
\&    l  Context (loop) stack processing
\&    t  Trace execution
\&    o  Method and overloading resolution
\&    c  String/numeric conversions
.Ve
.PP
Some of the functionality of the debugging code can be achieved using
\&\s-1XS\s0 modules.
.PP
.Vb 2
\&    \-Dr => use re \*(Aqdebug\*(Aq
\&    \-Dx => use O \*(AqDebug\*(Aq
.Ve
.SS "Using a source-level debugger"
.IX Subsection "Using a source-level debugger"
If the debugging output of \f(CW\*(C`\-D\*(C'\fR doesn't help you, it's time to step
through perl's execution with a source-level debugger.
.IP "\(bu" 3
We'll use \f(CW\*(C`gdb\*(C'\fR for our examples here; the principles will apply to
any debugger (many vendors call their debugger \f(CW\*(C`dbx\*(C'\fR), but check the
manual of the one you're using.
.PP
To fire up the debugger, type
.PP
.Vb 1
\&    gdb ./perl
.Ve
.PP
Or if you have a core dump:
.PP
.Vb 1
\&    gdb ./perl core
.Ve
.PP
You'll want to do that in your Perl source tree so the debugger can
read the source code. You should see the copyright message, followed by
the prompt.
.PP
.Vb 1
\&    (gdb)
.Ve
.PP
\&\f(CW\*(C`help\*(C'\fR will get you into the documentation, but here are the most
useful commands:
.IP "\(bu" 3
run [args]
.Sp
Run the program with the given arguments.
.IP "\(bu" 3
break function_name
.IP "\(bu" 3
break source.c:xxx
.Sp
Tells the debugger that we'll want to pause execution when we reach
either the named function (but see \*(L"Internal Functions\*(R" in perlguts!) or
the given line in the named source file.
.IP "\(bu" 3
step
.Sp
Steps through the program a line at a time.
.IP "\(bu" 3
next
.Sp
Steps through the program a line at a time, without descending into
functions.
.IP "\(bu" 3
continue
.Sp
Run until the next breakpoint.
.IP "\(bu" 3
finish
.Sp
Run until the end of the current function, then stop again.
.IP "\(bu" 3
\&'enter'
.Sp
Just pressing Enter will do the most recent operation again \- it's a
blessing when stepping through miles of source code.
.IP "\(bu" 3
print
.Sp
Execute the given C code and print its results. \fB\s-1WARNING\s0\fR: Perl makes
heavy use of macros, and \fIgdb\fR does not necessarily support macros
(see later \*(L"gdb macro support\*(R"). You'll have to substitute them
yourself, or to invoke cpp on the source code files (see \*(L"The .i
Targets\*(R") So, for instance, you can't say
.Sp
.Vb 1
\&    print SvPV_nolen(sv)
.Ve
.Sp
but you have to say
.Sp
.Vb 1
\&    print Perl_sv_2pv_nolen(sv)
.Ve
.PP
You may find it helpful to have a \*(L"macro dictionary\*(R", which you can
produce by saying \f(CW\*(C`cpp \-dM perl.c | sort\*(C'\fR. Even then, \fIcpp\fR won't
recursively apply those macros for you.
.SS "gdb macro support"
.IX Subsection "gdb macro support"
Recent versions of \fIgdb\fR have fairly good macro support, but in order
to use it you'll need to compile perl with macro definitions included
in the debugging information. Using \fIgcc\fR version 3.1, this means
configuring with \f(CW\*(C`\-Doptimize=\-g3\*(C'\fR. Other compilers might use a
different switch (if they support debugging macros at all).
.SS "Dumping Perl Data Structures"
.IX Subsection "Dumping Perl Data Structures"
One way to get around this macro hell is to use the dumping functions
in \fIdump.c\fR; these work a little like an internal
Devel::Peek, but they also cover OPs and other
structures that you can't get at from Perl. Let's take an example.
We'll use the \f(CW\*(C`$a = $b + $c\*(C'\fR we used before, but give it a bit of
context: \f(CW\*(C`$b = "6XXXX"; $c = 2.3;\*(C'\fR. Where's a good place to stop and
poke around?
.PP
What about \f(CW\*(C`pp_add\*(C'\fR, the function we examined earlier to implement the
\&\f(CW\*(C`+\*(C'\fR operator:
.PP
.Vb 2
\&    (gdb) break Perl_pp_add
\&    Breakpoint 1 at 0x46249f: file pp_hot.c, line 309.
.Ve
.PP
Notice we use \f(CW\*(C`Perl_pp_add\*(C'\fR and not \f(CW\*(C`pp_add\*(C'\fR \- see
\&\*(L"Internal Functions\*(R" in perlguts. With the breakpoint in place, we can
run our program:
.PP
.Vb 1
\&    (gdb) run \-e \*(Aq$b = "6XXXX"; $c = 2.3; $a = $b + $c\*(Aq
.Ve
.PP
Lots of junk will go past as gdb reads in the relevant source files and
libraries, and then:
.PP
.Vb 5
\&    Breakpoint 1, Perl_pp_add () at pp_hot.c:309
\&    309         dSP; dATARGET; tryAMAGICbin(add,opASSIGN);
\&    (gdb) step
\&    311           dPOPTOPnnrl_ul;
\&    (gdb)
.Ve
.PP
We looked at this bit of code before, and we said that
\&\f(CW\*(C`dPOPTOPnnrl_ul\*(C'\fR arranges for two \f(CW\*(C`NV\*(C'\fRs to be placed into \f(CW\*(C`left\*(C'\fR and
\&\f(CW\*(C`right\*(C'\fR \- let's slightly expand it:
.PP
.Vb 3
\& #define dPOPTOPnnrl_ul  NV right = POPn; \e
\&                         SV *leftsv = TOPs; \e
\&                         NV left = USE_LEFT(leftsv) ? SvNV(leftsv) : 0.0
.Ve
.PP
\&\f(CW\*(C`POPn\*(C'\fR takes the \s-1SV\s0 from the top of the stack and obtains its \s-1NV\s0
either directly (if \f(CW\*(C`SvNOK\*(C'\fR is set) or by calling the \f(CW\*(C`sv_2nv\*(C'\fR
function. \f(CW\*(C`TOPs\*(C'\fR takes the next \s-1SV\s0 from the top of the stack \- yes,
\&\f(CW\*(C`POPn\*(C'\fR uses \f(CW\*(C`TOPs\*(C'\fR \- but doesn't remove it. We then use \f(CW\*(C`SvNV\*(C'\fR to
get the \s-1NV\s0 from \f(CW\*(C`leftsv\*(C'\fR in the same way as before \- yes, \f(CW\*(C`POPn\*(C'\fR uses
\&\f(CW\*(C`SvNV\*(C'\fR.
.PP
Since we don't have an \s-1NV\s0 for \f(CW$b\fR, we'll have to use \f(CW\*(C`sv_2nv\*(C'\fR to
convert it. If we step again, we'll find ourselves there:
.PP
.Vb 3
\&    Perl_sv_2nv (sv=0xa0675d0) at sv.c:1669
\&    1669        if (!sv)
\&    (gdb)
.Ve
.PP
We can now use \f(CW\*(C`Perl_sv_dump\*(C'\fR to investigate the \s-1SV:\s0
.PP
.Vb 7
\&    SV = PV(0xa057cc0) at 0xa0675d0
\&    REFCNT = 1
\&    FLAGS = (POK,pPOK)
\&    PV = 0xa06a510 "6XXXX"\e0
\&    CUR = 5
\&    LEN = 6
\&    $1 = void
.Ve
.PP
We know we're going to get \f(CW6\fR from this, so let's finish the
subroutine:
.PP
.Vb 4
\&    (gdb) finish
\&    Run till exit from #0  Perl_sv_2nv (sv=0xa0675d0) at sv.c:1671
\&    0x462669 in Perl_pp_add () at pp_hot.c:311
\&    311           dPOPTOPnnrl_ul;
.Ve
.PP
We can also dump out this op: the current op is always stored in
\&\f(CW\*(C`PL_op\*(C'\fR, and we can dump it with \f(CW\*(C`Perl_op_dump\*(C'\fR. This'll give us
similar output to B::Debug.
.PP
.Vb 10
\&    {
\&    13  TYPE = add  ===> 14
\&        TARG = 1
\&        FLAGS = (SCALAR,KIDS)
\&        {
\&            TYPE = null  ===> (12)
\&              (was rv2sv)
\&            FLAGS = (SCALAR,KIDS)
\&            {
\&    11          TYPE = gvsv  ===> 12
\&                FLAGS = (SCALAR)
\&                GV = main::b
\&            }
\&        }
.Ve
.PP
# finish this later #
.SH "SOURCE CODE STATIC ANALYSIS"
.IX Header "SOURCE CODE STATIC ANALYSIS"
Various tools exist for analysing C source code \fBstatically\fR, as
opposed to \fBdynamically\fR, that is, without executing the code. It is
possible to detect resource leaks, undefined behaviour, type
mismatches, portability problems, code paths that would cause illegal
memory accesses, and other similar problems by just parsing the C code
and looking at the resulting graph, what does it tell about the
execution and data flows. As a matter of fact, this is exactly how C
compilers know to give warnings about dubious code.
.SS "lint, splint"
.IX Subsection "lint, splint"
The good old C code quality inspector, \f(CW\*(C`lint\*(C'\fR, is available in several
platforms, but please be aware that there are several different
implementations of it by different vendors, which means that the flags
are not identical across different platforms.
.PP
There is a lint variant called \f(CW\*(C`splint\*(C'\fR (Secure Programming Lint)
available from http://www.splint.org/ that should compile on any
Unix-like platform.
.PP
There are \f(CW\*(C`lint\*(C'\fR and <splint> targets in Makefile, but you may have to
diddle with the flags (see above).
.SS "Coverity"
.IX Subsection "Coverity"
Coverity (http://www.coverity.com/) is a product similar to lint and as
a testbed for their product they periodically check several open source
projects, and they give out accounts to open source developers to the
defect databases.
.SS "cpd (cut-and-paste detector)"
.IX Subsection "cpd (cut-and-paste detector)"
The cpd tool detects cut-and-paste coding. If one instance of the
cut-and-pasted code changes, all the other spots should probably be
changed, too. Therefore such code should probably be turned into a
subroutine or a macro.
.PP
cpd (http://pmd.sourceforge.net/cpd.html) is part of the pmd project
(http://pmd.sourceforge.net/). pmd was originally written for static
analysis of Java code, but later the cpd part of it was extended to
parse also C and \*(C+.
.PP
Download the pmd\-bin\-X.Y.zip () from the SourceForge site, extract the
pmd\-X.Y.jar from it, and then run that on source code thusly:
.PP
.Vb 2
\&  java \-cp pmd\-X.Y.jar net.sourceforge.pmd.cpd.CPD \e
\&   \-\-minimum\-tokens 100 \-\-files /some/where/src \-\-language c > cpd.txt
.Ve
.PP
You may run into memory limits, in which case you should use the \-Xmx
option:
.PP
.Vb 1
\&  java \-Xmx512M ...
.Ve
.SS "gcc warnings"
.IX Subsection "gcc warnings"
Though much can be written about the inconsistency and coverage
problems of gcc warnings (like \f(CW\*(C`\-Wall\*(C'\fR not meaning \*(L"all the warnings\*(R",
or some common portability problems not being covered by \f(CW\*(C`\-Wall\*(C'\fR, or
\&\f(CW\*(C`\-ansi\*(C'\fR and \f(CW\*(C`\-pedantic\*(C'\fR both being a poorly defined collection of
warnings, and so forth), gcc is still a useful tool in keeping our
coding nose clean.
.PP
The \f(CW\*(C`\-Wall\*(C'\fR is by default on.
.PP
The \f(CW\*(C`\-ansi\*(C'\fR (and its sidekick, \f(CW\*(C`\-pedantic\*(C'\fR) would be nice to be on
always, but unfortunately they are not safe on all platforms, they can
for example cause fatal conflicts with the system headers (Solaris
being a prime example). If Configure \f(CW\*(C`\-Dgccansipedantic\*(C'\fR is used, the
\&\f(CW\*(C`cflags\*(C'\fR frontend selects \f(CW\*(C`\-ansi \-pedantic\*(C'\fR for the platforms where
they are known to be safe.
.PP
Starting from Perl 5.9.4 the following extra flags are added:
.IP "\(bu" 4
\&\f(CW\*(C`\-Wendif\-labels\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`\-Wextra\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`\-Wdeclaration\-after\-statement\*(C'\fR
.PP
The following flags would be nice to have but they would first need
their own Augean stablemaster:
.IP "\(bu" 4
\&\f(CW\*(C`\-Wpointer\-arith\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`\-Wshadow\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`\-Wstrict\-prototypes\*(C'\fR
.PP
The \f(CW\*(C`\-Wtraditional\*(C'\fR is another example of the annoying tendency of gcc
to bundle a lot of warnings under one switch (it would be impossible to
deploy in practice because it would complain a lot) but it does contain
some warnings that would be beneficial to have available on their own,
such as the warning about string constants inside macros containing the
macro arguments: this behaved differently pre-ANSI than it does in
\&\s-1ANSI,\s0 and some C compilers are still in transition, \s-1AIX\s0 being an
example.
.SS "Warnings of other C compilers"
.IX Subsection "Warnings of other C compilers"
Other C compilers (yes, there \fBare\fR other C compilers than gcc) often
have their \*(L"strict \s-1ANSI\*(R"\s0 or \*(L"strict \s-1ANSI\s0 with some portability
extensions\*(R" modes on, like for example the Sun Workshop has its \f(CW\*(C`\-Xa\*(C'\fR
mode on (though implicitly), or the \s-1DEC \s0(these days, \s-1HP...\s0) has its
\&\f(CW\*(C`\-std1\*(C'\fR mode on.
.SH "MEMORY DEBUGGERS"
.IX Header "MEMORY DEBUGGERS"
\&\fB\s-1NOTE 1\s0\fR: Running under older memory debuggers such as Purify,
valgrind or Third Degree greatly slows down the execution: seconds
become minutes, minutes become hours. For example as of Perl 5.8.1, the
ext/Encode/t/Unicode.t takes extraordinarily long to complete under
e.g. Purify, Third Degree, and valgrind. Under valgrind it takes more
than six hours, even on a snappy computer. The said test must be doing
something that is quite unfriendly for memory debuggers. If you don't
feel like waiting, that you can simply kill away the perl process.
Roughly valgrind slows down execution by factor 10, AddressSanitizer by
factor 2.
.PP
\&\fB\s-1NOTE 2\s0\fR: To minimize the number of memory leak false alarms (see
\&\*(L"\s-1PERL_DESTRUCT_LEVEL\*(R"\s0 for more information), you have to set the
environment variable \s-1PERL_DESTRUCT_LEVEL\s0 to 2.
.PP
For csh-like shells:
.PP
.Vb 1
\&    setenv PERL_DESTRUCT_LEVEL 2
.Ve
.PP
For Bourne-type shells:
.PP
.Vb 2
\&    PERL_DESTRUCT_LEVEL=2
\&    export PERL_DESTRUCT_LEVEL
.Ve
.PP
In Unixy environments you can also use the \f(CW\*(C`env\*(C'\fR command:
.PP
.Vb 1
\&    env PERL_DESTRUCT_LEVEL=2 valgrind ./perl \-Ilib ...
.Ve
.PP
\&\fB\s-1NOTE 3\s0\fR: There are known memory leaks when there are compile-time
errors within eval or require, seeing \f(CW\*(C`S_doeval\*(C'\fR in the call stack is
a good sign of these. Fixing these leaks is non-trivial, unfortunately,
but they must be fixed eventually.
.PP
\&\fB\s-1NOTE 4\s0\fR: DynaLoader will not clean up after itself completely
unless Perl is built with the Configure option
\&\f(CW\*(C`\-Accflags=\-DDL_UNLOAD_ALL_AT_EXIT\*(C'\fR.
.SS "Rational Software's Purify"
.IX Subsection "Rational Software's Purify"
Purify is a commercial tool that is helpful in identifying memory
overruns, wild pointers, memory leaks and other such badness. Perl must
be compiled in a specific way for optimal testing with Purify.  Purify
is available under Windows \s-1NT,\s0 Solaris, HP-UX, \s-1SGI,\s0 and Siemens Unix.
.PP
\fIPurify on Unix\fR
.IX Subsection "Purify on Unix"
.PP
On Unix, Purify creates a new Perl binary. To get the most benefit out
of Purify, you should create the perl to Purify using:
.PP
.Vb 2
\&    sh Configure \-Accflags=\-DPURIFY \-Doptimize=\*(Aq\-g\*(Aq \e
\&     \-Uusemymalloc \-Dusemultiplicity
.Ve
.PP
where these arguments mean:
.IP "\(bu" 4
\&\-Accflags=\-DPURIFY
.Sp
Disables Perl's arena memory allocation functions, as well as forcing
use of memory allocation functions derived from the system malloc.
.IP "\(bu" 4
\&\-Doptimize='\-g'
.Sp
Adds debugging information so that you see the exact source statements
where the problem occurs. Without this flag, all you will see is the
source filename of where the error occurred.
.IP "\(bu" 4
\&\-Uusemymalloc
.Sp
Disable Perl's malloc so that Purify can more closely monitor
allocations and leaks. Using Perl's malloc will make Purify report most
leaks in the \*(L"potential\*(R" leaks category.
.IP "\(bu" 4
\&\-Dusemultiplicity
.Sp
Enabling the multiplicity option allows perl to clean up thoroughly
when the interpreter shuts down, which reduces the number of bogus leak
reports from Purify.
.PP
Once you've compiled a perl suitable for Purify'ing, then you can just:
.PP
.Vb 1
\&    make pureperl
.Ve
.PP
which creates a binary named 'pureperl' that has been Purify'ed. This
binary is used in place of the standard 'perl' binary when you want to
debug Perl memory problems.
.PP
As an example, to show any memory leaks produced during the standard
Perl testset you would create and run the Purify'ed perl as:
.PP
.Vb 3
\&    make pureperl
\&    cd t
\&    ../pureperl \-I../lib harness
.Ve
.PP
which would run Perl on test.pl and report any memory problems.
.PP
Purify outputs messages in \*(L"Viewer\*(R" windows by default. If you don't
have a windowing environment or if you simply want the Purify output to
unobtrusively go to a log file instead of to the interactive window,
use these following options to output to the log file \*(L"perl.log\*(R":
.PP
.Vb 2
\&    setenv PURIFYOPTIONS "\-chain\-length=25 \-windows=no \e
\&     \-log\-file=perl.log \-append\-logfile=yes"
.Ve
.PP
If you plan to use the \*(L"Viewer\*(R" windows, then you only need this
option:
.PP
.Vb 1
\&    setenv PURIFYOPTIONS "\-chain\-length=25"
.Ve
.PP
In Bourne-type shells:
.PP
.Vb 2
\&    PURIFYOPTIONS="..."
\&    export PURIFYOPTIONS
.Ve
.PP
or if you have the \*(L"env\*(R" utility:
.PP
.Vb 1
\&    env PURIFYOPTIONS="..." ../pureperl ...
.Ve
.PP
\fIPurify on \s-1NT\s0\fR
.IX Subsection "Purify on NT"
.PP
Purify on Windows \s-1NT\s0 instruments the Perl binary 'perl.exe' on the fly.
 There are several options in the makefile you should change to get the
most use out of Purify:
.IP "\(bu" 4
\&\s-1DEFINES\s0
.Sp
You should add \-DPURIFY to the \s-1DEFINES\s0 line so the \s-1DEFINES\s0 line looks
something like:
.Sp
.Vb 1
\&   DEFINES = \-DWIN32 \-D_CONSOLE \-DNO_STRICT $(CRYPT_FLAG) \-DPURIFY=1
.Ve
.Sp
to disable Perl's arena memory allocation functions, as well as to
force use of memory allocation functions derived from the system
malloc.
.IP "\(bu" 4
\&\s-1USE_MULTI\s0 = define
.Sp
Enabling the multiplicity option allows perl to clean up thoroughly
when the interpreter shuts down, which reduces the number of bogus leak
reports from Purify.
.IP "\(bu" 4
#PERL_MALLOC = define
.Sp
Disable Perl's malloc so that Purify can more closely monitor
allocations and leaks. Using Perl's malloc will make Purify report most
leaks in the \*(L"potential\*(R" leaks category.
.IP "\(bu" 4
\&\s-1CFG\s0 = Debug
.Sp
Adds debugging information so that you see the exact source statements
where the problem occurs. Without this flag, all you will see is the
source filename of where the error occurred.
.PP
As an example, to show any memory leaks produced during the standard
Perl testset you would create and run Purify as:
.PP
.Vb 4
\&    cd win32
\&    make
\&    cd ../t
\&    purify ../perl \-I../lib harness
.Ve
.PP
which would instrument Perl in memory, run Perl on test.pl, then
finally report any memory problems.
.SS "valgrind"
.IX Subsection "valgrind"
The valgrind tool can be used to find out both memory leaks and illegal
heap memory accesses. As of version 3.3.0, Valgrind only supports Linux
on x86, x86\-64 and PowerPC and Darwin (\s-1OS X\s0) on x86 and x86\-64). The
special \*(L"test.valgrind\*(R" target can be used to run the tests under
valgrind. Found errors and memory leaks are logged in files named
\&\fItestfile.valgrind\fR.
.PP
Valgrind also provides a cachegrind tool, invoked on perl as:
.PP
.Vb 1
\&    VG_OPTS=\-\-tool=cachegrind make test.valgrind
.Ve
.PP
As system libraries (most notably glibc) are also triggering errors,
valgrind allows to suppress such errors using suppression files. The
default suppression file that comes with valgrind already catches a lot
of them. Some additional suppressions are defined in \fIt/perl.supp\fR.
.PP
To get valgrind and for more information see
.PP
.Vb 1
\&    http://valgrind.org/
.Ve
.SS "AddressSanitizer"
.IX Subsection "AddressSanitizer"
AddressSanitizer is a clang extension, included in clang since v3.1. It
checks illegal heap pointers, global pointers, stack pointers and use
after free errors, and is fast enough that you can easily compile your
debugging or optimized perl with it. It does not check memory leaks
though. AddressSanitizer is available for linux, Mac \s-1OS X\s0 and soon on
Windows.
.PP
To build perl with AddressSanitizer, your Configure invocation should
look like:
.PP
.Vb 3
\&    sh Configure \-des \-Dcc=clang \e
\&       \-Accflags=\-faddress\-sanitizer \-Aldflags=\-faddress\-sanitizer \e
\&       \-Alddlflags=\-shared\e \-faddress\-sanitizer
.Ve
.PP
where these arguments mean:
.IP "\(bu" 4
\&\-Dcc=clang
.Sp
This should be replaced by the full path to your clang executable if it
is not in your path.
.IP "\(bu" 4
\&\-Accflags=\-faddress\-sanitizer
.Sp
Compile perl and extensions sources with AddressSanitizer.
.IP "\(bu" 4
\&\-Aldflags=\-faddress\-sanitizer
.Sp
Link the perl executable with AddressSanitizer.
.IP "\(bu" 4
\&\-Alddlflags=\-shared\e \-faddress\-sanitizer
.Sp
Link dynamic extensions with AddressSanitizer. You must manually
specify \f(CW\*(C`\-shared\*(C'\fR because using \f(CW\*(C`\-Alddlflags=\-shared\*(C'\fR will prevent
Configure from setting a default value for \f(CW\*(C`lddlflags\*(C'\fR, which usually
contains \f(CW\*(C`\-shared\*(C'\fR (at least on linux).
.PP
See also
<http://code.google.com/p/address\-sanitizer/wiki/AddressSanitizer>.
.SH "PROFILING"
.IX Header "PROFILING"
Depending on your platform there are various ways of profiling Perl.
.PP
There are two commonly used techniques of profiling executables:
\&\fIstatistical time-sampling\fR and \fIbasic-block counting\fR.
.PP
The first method takes periodically samples of the \s-1CPU\s0 program counter,
and since the program counter can be correlated with the code generated
for functions, we get a statistical view of in which functions the
program is spending its time. The caveats are that very small/fast
functions have lower probability of showing up in the profile, and that
periodically interrupting the program (this is usually done rather
frequently, in the scale of milliseconds) imposes an additional
overhead that may skew the results. The first problem can be alleviated
by running the code for longer (in general this is a good idea for
profiling), the second problem is usually kept in guard by the
profiling tools themselves.
.PP
The second method divides up the generated code into \fIbasic blocks\fR.
Basic blocks are sections of code that are entered only in the
beginning and exited only at the end. For example, a conditional jump
starts a basic block. Basic block profiling usually works by
\&\fIinstrumenting\fR the code by adding \fIenter basic block #nnnn\fR
book-keeping code to the generated code. During the execution of the
code the basic block counters are then updated appropriately. The
caveat is that the added extra code can skew the results: again, the
profiling tools usually try to factor their own effects out of the
results.
.SS "Gprof Profiling"
.IX Subsection "Gprof Profiling"
gprof is a profiling tool available in many Unix platforms, it uses
\&\fIstatistical time-sampling\fR.
.PP
You can build a profiled version of perl called \*(L"perl.gprof\*(R" by
invoking the make target \*(L"perl.gprof\*(R"  (What is required is that Perl
must be compiled using the \f(CW\*(C`\-pg\*(C'\fR flag, you may need to re-Configure).
Running the profiled version of Perl will create an output file called
\&\fIgmon.out\fR is created which contains the profiling data collected
during the execution.
.PP
The gprof tool can then display the collected data in various ways.
Usually gprof understands the following options:
.IP "\(bu" 4
\&\-a
.Sp
Suppress statically defined functions from the profile.
.IP "\(bu" 4
\&\-b
.Sp
Suppress the verbose descriptions in the profile.
.IP "\(bu" 4
\&\-e routine
.Sp
Exclude the given routine and its descendants from the profile.
.IP "\(bu" 4
\&\-f routine
.Sp
Display only the given routine and its descendants in the profile.
.IP "\(bu" 4
\&\-s
.Sp
Generate a summary file called \fIgmon.sum\fR which then may be given to
subsequent gprof runs to accumulate data over several runs.
.IP "\(bu" 4
\&\-z
.Sp
Display routines that have zero usage.
.PP
For more detailed explanation of the available commands and output
formats, see your own local documentation of gprof.
.PP
quick hint:
.PP
.Vb 4
\&    $ sh Configure \-des \-Dusedevel \-Doptimize=\*(Aq\-pg\*(Aq && make perl.gprof
\&    $ ./perl.gprof someprog # creates gmon.out in current directory
\&    $ gprof ./perl.gprof > out
\&    $ view out
.Ve
.SS "\s-1GCC\s0 gcov Profiling"
.IX Subsection "GCC gcov Profiling"
Starting from \s-1GCC 3.0 \s0\fIbasic block profiling\fR is officially available
for the \s-1GNU CC.\s0
.PP
You can build a profiled version of perl called \fIperl.gcov\fR by
invoking the make target \*(L"perl.gcov\*(R" (what is required that Perl must
be compiled using gcc with the flags \f(CW\*(C`\-fprofile\-arcs \-ftest\-coverage\*(C'\fR,
you may need to re-Configure).
.PP
Running the profiled version of Perl will cause profile output to be
generated. For each source file an accompanying \*(L".da\*(R" file will be
created.
.PP
To display the results you use the \*(L"gcov\*(R" utility (which should be
installed if you have gcc 3.0 or newer installed). \fIgcov\fR is run on
source code files, like this
.PP
.Vb 1
\&    gcov sv.c
.Ve
.PP
which will cause \fIsv.c.gcov\fR to be created. The \fI.gcov\fR files contain
the source code annotated with relative frequencies of execution
indicated by \*(L"#\*(R" markers.
.PP
Useful options of \fIgcov\fR include \f(CW\*(C`\-b\*(C'\fR which will summarise the basic
block, branch, and function call coverage, and \f(CW\*(C`\-c\*(C'\fR which instead of
relative frequencies will use the actual counts. For more information
on the use of \fIgcov\fR and basic block profiling with gcc, see the
latest \s-1GNU CC\s0 manual, as of \s-1GCC 3.0\s0 see
.PP
.Vb 1
\&    http://gcc.gnu.org/onlinedocs/gcc\-3.0/gcc.html
.Ve
.PP
and its section titled \*(L"8. gcov: a Test Coverage Program\*(R"
.PP
.Vb 1
\&    http://gcc.gnu.org/onlinedocs/gcc\-3.0/gcc_8.html#SEC132
.Ve
.PP
quick hint:
.PP
.Vb 7
\&    $ sh Configure \-des \-Dusedevel \-Doptimize=\*(Aq\-g\*(Aq \e
\&        \-Accflags=\*(Aq\-fprofile\-arcs \-ftest\-coverage\*(Aq \e
\&        \-Aldflags=\*(Aq\-fprofile\-arcs \-ftest\-coverage\*(Aq && make perl.gcov
\&    $ rm \-f regexec.c.gcov regexec.gcda
\&    $ ./perl.gcov
\&    $ gcov regexec.c
\&    $ view regexec.c.gcov
.Ve
.SH "MISCELLANEOUS TRICKS"
.IX Header "MISCELLANEOUS TRICKS"
.SS "\s-1PERL_DESTRUCT_LEVEL\s0"
.IX Subsection "PERL_DESTRUCT_LEVEL"
If you want to run any of the tests yourself manually using e.g.
valgrind, or the pureperl or perl.third executables, please note that
by default perl \fBdoes not\fR explicitly cleanup all the memory it has
allocated (such as global memory arenas) but instead lets the \fIexit()\fR of
the whole program \*(L"take care\*(R" of such allocations, also known as
\&\*(L"global destruction of objects\*(R".
.PP
There is a way to tell perl to do complete cleanup: set the environment
variable \s-1PERL_DESTRUCT_LEVEL\s0 to a non-zero value. The t/TEST wrapper
does set this to 2, and this is what you need to do too, if you don't
want to see the \*(L"global leaks\*(R": For example, for \*(L"third-degreed\*(R" Perl:
.PP
.Vb 1
\&        env PERL_DESTRUCT_LEVEL=2 ./perl.third \-Ilib t/foo/bar.t
.Ve
.PP
(Note: the mod_perl apache module uses also this environment variable
for its own purposes and extended its semantics. Refer to the mod_perl
documentation for more information. Also, spawned threads do the
equivalent of setting this variable to the value 1.)
.PP
If, at the end of a run you get the message \fIN scalars leaked\fR, you
can recompile with \f(CW\*(C`\-DDEBUG_LEAKING_SCALARS\*(C'\fR, which will cause the
addresses of all those leaked SVs to be dumped along with details as to
where each \s-1SV\s0 was originally allocated. This information is also
displayed by Devel::Peek. Note that the extra details recorded with
each \s-1SV\s0 increases memory usage, so it shouldn't be used in production
environments. It also converts \f(CW\*(C`new_SV()\*(C'\fR from a macro into a real
function, so you can use your favourite debugger to discover where
those pesky SVs were allocated.
.PP
If you see that you're leaking memory at runtime, but neither valgrind
nor \f(CW\*(C`\-DDEBUG_LEAKING_SCALARS\*(C'\fR will find anything, you're probably
leaking SVs that are still reachable and will be properly cleaned up
during destruction of the interpreter. In such cases, using the \f(CW\*(C`\-Dm\*(C'\fR
switch can point you to the source of the leak. If the executable was
built with \f(CW\*(C`\-DDEBUG_LEAKING_SCALARS\*(C'\fR, \f(CW\*(C`\-Dm\*(C'\fR will output \s-1SV\s0
allocations in addition to memory allocations. Each \s-1SV\s0 allocation has a
distinct serial number that will be written on creation and destruction
of the \s-1SV.\s0 So if you're executing the leaking code in a loop, you need
to look for SVs that are created, but never destroyed between each
cycle. If such an \s-1SV\s0 is found, set a conditional breakpoint within
\&\f(CW\*(C`new_SV()\*(C'\fR and make it break only when \f(CW\*(C`PL_sv_serial\*(C'\fR is equal to the
serial number of the leaking \s-1SV.\s0 Then you will catch the interpreter in
exactly the state where the leaking \s-1SV\s0 is allocated, which is
sufficient in many cases to find the source of the leak.
.PP
As \f(CW\*(C`\-Dm\*(C'\fR is using the PerlIO layer for output, it will by itself
allocate quite a bunch of SVs, which are hidden to avoid recursion. You
can bypass the PerlIO layer if you use the \s-1SV\s0 logging provided by
\&\f(CW\*(C`\-DPERL_MEM_LOG\*(C'\fR instead.
.SS "\s-1PERL_MEM_LOG\s0"
.IX Subsection "PERL_MEM_LOG"
If compiled with \f(CW\*(C`\-DPERL_MEM_LOG\*(C'\fR, both memory and \s-1SV\s0 allocations go
through logging functions, which is handy for breakpoint setting.
.PP
Unless \f(CW\*(C`\-DPERL_MEM_LOG_NOIMPL\*(C'\fR is also compiled, the logging functions
read \f(CW$ENV\fR{\s-1PERL_MEM_LOG\s0} to determine whether to log the event, and if
so how:
.PP
.Vb 4
\&    $ENV{PERL_MEM_LOG} =~ /m/           Log all memory ops
\&    $ENV{PERL_MEM_LOG} =~ /s/           Log all SV ops
\&    $ENV{PERL_MEM_LOG} =~ /t/           include timestamp in Log
\&    $ENV{PERL_MEM_LOG} =~ /^(\ed+)/      write to FD given (default is 2)
.Ve
.PP
Memory logging is somewhat similar to \f(CW\*(C`\-Dm\*(C'\fR but is independent of
\&\f(CW\*(C`\-DDEBUGGING\*(C'\fR, and at a higher level; all uses of \fINewx()\fR, \fIRenew()\fR, and
\&\fISafefree()\fR are logged with the caller's source code file and line
number (and C function name, if supported by the C compiler). In
contrast, \f(CW\*(C`\-Dm\*(C'\fR is directly at the point of \f(CW\*(C`malloc()\*(C'\fR. \s-1SV\s0 logging is
similar.
.PP
Since the logging doesn't use PerlIO, all \s-1SV\s0 allocations are logged and
no extra \s-1SV\s0 allocations are introduced by enabling the logging. If
compiled with \f(CW\*(C`\-DDEBUG_LEAKING_SCALARS\*(C'\fR, the serial number for each \s-1SV\s0
allocation is also logged.
.SS "\s-1DDD\s0 over gdb"
.IX Subsection "DDD over gdb"
Those debugging perl with the \s-1DDD\s0 frontend over gdb may find the
following useful:
.PP
You can extend the data conversion shortcuts menu, so for example you
can display an \s-1SV\s0's \s-1IV\s0 value with one click, without doing any typing.
To do that simply edit ~/.ddd/init file and add after:
.PP
.Vb 6
\&  ! Display shortcuts.
\&  Ddd*gdbDisplayShortcuts: \e
\&  /t ()   // Convert to Bin\en\e
\&  /d ()   // Convert to Dec\en\e
\&  /x ()   // Convert to Hex\en\e
\&  /o ()   // Convert to Oct(\en\e
.Ve
.PP
the following two lines:
.PP
.Vb 2
\&  ((XPV*) (())\->sv_any )\->xpv_pv  // 2pvx\en\e
\&  ((XPVIV*) (())\->sv_any )\->xiv_iv // 2ivx
.Ve
.PP
so now you can do ivx and pvx lookups or you can plug there the sv_peek
\&\*(L"conversion\*(R":
.PP
.Vb 1
\&  Perl_sv_peek(my_perl, (SV*)()) // sv_peek
.Ve
.PP
(The my_perl is for threaded builds.) Just remember that every line,
but the last one, should end with \en\e
.PP
Alternatively edit the init file interactively via: 3rd mouse button \->
New Display \-> Edit Menu
.PP
Note: you can define up to 20 conversion shortcuts in the gdb section.
.SS "Poison"
.IX Subsection "Poison"
If you see in a debugger a memory area mysteriously full of 0xABABABAB
or 0xEFEFEFEF, you may be seeing the effect of the \fIPoison()\fR macros, see
perlclib.
.SS "Read-only optrees"
.IX Subsection "Read-only optrees"
Under ithreads the optree is read only. If you want to enforce this, to
check for write accesses from buggy code, compile with
\&\f(CW\*(C`\-DPERL_DEBUG_READONLY_OPS\*(C'\fR to enable code that allocates op memory
via \f(CW\*(C`mmap\*(C'\fR, and sets it read-only when it is attached to a subroutine. Any
write access to an op results in a \f(CW\*(C`SIGBUS\*(C'\fR and abort.
.PP
This code is intended for development only, and may not be portable
even to all Unix variants. Also, it is an 80% solution, in that it
isn't able to make all ops read only. Specifically it does not apply to op
slabs belonging to \f(CW\*(C`BEGIN\*(C'\fR blocks.
.PP
However, as an 80% solution it is still effective, as it has caught bugs in
the past.
.SS "The .i Targets"
.IX Subsection "The .i Targets"
You can expand the macros in a \fIfoo.c\fR file by saying
.PP
.Vb 1
\&    make foo.i
.Ve
.PP
which will expand the macros using cpp.  Don't be scared by the
results.
.SH "AUTHOR"
.IX Header "AUTHOR"
This document was originally written by Nathan Torkington, and is
maintained by the perl5\-porters mailing list.
                                                                                                                          osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perlhacktips5.16.1                           0100644 0001750 0001750 00000157041 12566207420 023747  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLHACKTIPS 1"
.TH PERLHACKTIPS 1 "2013-03-04" "perl v5.16.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlhacktips \- Tips for Perl core C code hacking
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document will help you learn the best way to go about hacking on
the Perl core C code. It covers common problems, debugging, profiling,
and more.
.PP
If you haven't read perlhack and perlhacktut yet, you might want
to do that first.
.SH "COMMON PROBLEMS"
.IX Header "COMMON PROBLEMS"
Perl source plays by \s-1ANSI\s0 C89 rules: no C99 (or \*(C+) extensions. In
some cases we have to take pre-ANSI requirements into consideration.
You don't care about some particular platform having broken Perl? I
hear there is still a strong demand for J2EE programmers.
.SS "Perl environment problems"
.IX Subsection "Perl environment problems"
.IP "\(bu" 4
Not compiling with threading
.Sp
Compiling with threading (\-Duseithreads) completely rewrites the
function prototypes of Perl. You better try your changes with that.
Related to this is the difference between \*(L"Perl_\-less\*(R" and \*(L"Perl_\-ly\*(R"
APIs, for example:
.Sp
.Vb 2
\&  Perl_sv_setiv(aTHX_ ...);
\&  sv_setiv(...);
.Ve
.Sp
The first one explicitly passes in the context, which is needed for
e.g. threaded builds. The second one does that implicitly; do not get
them mixed. If you are not passing in a aTHX_, you will need to do a
dTHX (or a dVAR) as the first thing in the function.
.Sp
See \*(L"How multiple interpreters and concurrency are
supported\*(R" in perlguts for further discussion about context.
.IP "\(bu" 4
Not compiling with \-DDEBUGGING
.Sp
The \s-1DEBUGGING\s0 define exposes more code to the compiler, therefore more
ways for things to go wrong. You should try it.
.IP "\(bu" 4
Introducing (non-read-only) globals
.Sp
Do not introduce any modifiable globals, truly global or file static.
They are bad form and complicate multithreading and other forms of
concurrency. The right way is to introduce them as new interpreter
variables, see \fIintrpvar.h\fR (at the very end for binary
compatibility).
.Sp
Introducing read-only (const) globals is okay, as long as you verify
with e.g. \f(CW\*(C`nm libperl.a|egrep \-v \*(Aq [TURtr] \*(Aq\*(C'\fR (if your \f(CW\*(C`nm\*(C'\fR has
BSD-style output) that the data you added really is read-only. (If it
is, it shouldn't show up in the output of that command.)
.Sp
If you want to have static strings, make them constant:
.Sp
.Vb 1
\&  static const char etc[] = "...";
.Ve
.Sp
If you want to have arrays of constant strings, note carefully the
right combination of \f(CW\*(C`const\*(C'\fRs:
.Sp
.Vb 2
\&    static const char * const yippee[] =
\&        {"hi", "ho", "silver"};
.Ve
.Sp
There is a way to completely hide any modifiable globals (they are all
moved to heap), the compilation setting
\&\f(CW\*(C`\-DPERL_GLOBAL_STRUCT_PRIVATE\*(C'\fR. It is not normally used, but can be
used for testing, read more about it in \*(L"Background and
\&\s-1PERL_IMPLICIT_CONTEXT\s0\*(R" in perlguts.
.IP "\(bu" 4
Not exporting your new function
.Sp
Some platforms (Win32, \s-1AIX\s0, \s-1VMS\s0, \s-1OS/2\s0, to name a few) require any
function that is part of the public \s-1API\s0 (the shared Perl library) to be
explicitly marked as exported. See the discussion about \fIembed.pl\fR in
perlguts.
.IP "\(bu" 4
Exporting your new function
.Sp
The new shiny result of either genuine new functionality or your
arduous refactoring is now ready and correctly exported. So what could
possibly go wrong?
.Sp
Maybe simply that your function did not need to be exported in the
first place. Perl has a long and not so glorious history of exporting
functions that it should not have.
.Sp
If the function is used only inside one source code file, make it
static. See the discussion about \fIembed.pl\fR in perlguts.
.Sp
If the function is used across several files, but intended only for
Perl's internal use (and this should be the common case), do not export
it to the public \s-1API\s0. See the discussion about \fIembed.pl\fR in
perlguts.
.SS "Portability problems"
.IX Subsection "Portability problems"
The following are common causes of compilation and/or execution
failures, not common to Perl as such. The C \s-1FAQ\s0 is good bedtime
reading. Please test your changes with as many C compilers and
platforms as possible; we will, anyway, and it's nice to save oneself
from public embarrassment.
.PP
If using gcc, you can add the \f(CW\*(C`\-std=c89\*(C'\fR option which will hopefully
catch most of these unportabilities. (However it might also catch
incompatibilities in your system's header files.)
.PP
Use the Configure \f(CW\*(C`\-Dgccansipedantic\*(C'\fR flag to enable the gcc \f(CW\*(C`\-ansi
\&\-pedantic\*(C'\fR flags which enforce stricter \s-1ANSI\s0 rules.
.PP
If using the \f(CW\*(C`gcc \-Wall\*(C'\fR note that not all the possible warnings (like
\&\f(CW\*(C`\-Wunitialized\*(C'\fR) are given unless you also compile with \f(CW\*(C`\-O\*(C'\fR.
.PP
Note that if using gcc, starting from Perl 5.9.5 the Perl core source
code files (the ones at the top level of the source code distribution,
but not e.g. the extensions under ext/) are automatically compiled with
as many as possible of the \f(CW\*(C`\-std=c89\*(C'\fR, \f(CW\*(C`\-ansi\*(C'\fR, \f(CW\*(C`\-pedantic\*(C'\fR, and a
selection of \f(CW\*(C`\-W\*(C'\fR flags (see cflags.SH).
.PP
Also study perlport carefully to avoid any bad assumptions about the
operating system, filesystems, and so forth.
.PP
You may once in a while try a \*(L"make microperl\*(R" to see whether we can
still compile Perl with just the bare minimum of interfaces. (See
\&\s-1README\s0.micro.)
.PP
Do not assume an operating system indicates a certain compiler.
.IP "\(bu" 4
Casting pointers to integers or casting integers to pointers
.Sp
.Vb 3
\&    void castaway(U8* p)
\&    {
\&      IV i = p;
.Ve
.Sp
or
.Sp
.Vb 3
\&    void castaway(U8* p)
\&    {
\&      IV i = (IV)p;
.Ve
.Sp
Both are bad, and broken, and unportable. Use the \s-1\fIPTR2IV\s0()\fR macro that
does it right. (Likewise, there are \s-1\fIPTR2UV\s0()\fR, \s-1\fIPTR2NV\s0()\fR, \s-1\fIINT2PTR\s0()\fR, and
\&\s-1\fINUM2PTR\s0()\fR.)
.IP "\(bu" 4
Casting between data function pointers and data pointers
.Sp
Technically speaking casting between function pointers and data
pointers is unportable and undefined, but practically speaking it seems
to work, but you should use the \s-1\fIFPTR2DPTR\s0()\fR and \s-1\fIDPTR2FPTR\s0()\fR macros.
Sometimes you can also play games with unions.
.IP "\(bu" 4
Assuming sizeof(int) == sizeof(long)
.Sp
There are platforms where longs are 64 bits, and platforms where ints
are 64 bits, and while we are out to shock you, even platforms where
shorts are 64 bits. This is all legal according to the C standard. (In
other words, \*(L"long long\*(R" is not a portable way to specify 64 bits, and
\&\*(L"long long\*(R" is not even guaranteed to be any wider than \*(L"long\*(R".)
.Sp
Instead, use the definitions \s-1IV\s0, \s-1UV\s0, \s-1IVSIZE\s0, I32SIZE, and so forth.
Avoid things like I32 because they are \fBnot\fR guaranteed to be
\&\fIexactly\fR 32 bits, they are \fIat least\fR 32 bits, nor are they
guaranteed to be \fBint\fR or \fBlong\fR. If you really explicitly need
64\-bit variables, use I64 and U64, but only if guarded by \s-1HAS_QUAD\s0.
.IP "\(bu" 4
Assuming one can dereference any type of pointer for any type of data
.Sp
.Vb 2
\&  char *p = ...;
\&  long pony = *p;    /* BAD */
.Ve
.Sp
Many platforms, quite rightly so, will give you a core dump instead of
a pony if the p happens not to be correctly aligned.
.IP "\(bu" 4
Lvalue casts
.Sp
.Vb 1
\&  (int)*p = ...;    /* BAD */
.Ve
.Sp
Simply not portable. Get your lvalue to be of the right type, or maybe
use temporary variables, or dirty tricks with unions.
.IP "\(bu" 4
Assume \fBanything\fR about structs (especially the ones you don't
control, like the ones coming from the system headers)
.RS 4
.IP "\(bu" 8
That a certain field exists in a struct
.IP "\(bu" 8
That no other fields exist besides the ones you know of
.IP "\(bu" 8
That a field is of certain signedness, sizeof, or type
.IP "\(bu" 8
That the fields are in a certain order
.RS 8
.IP "\(bu" 8
While C guarantees the ordering specified in the struct definition,
between different platforms the definitions might differ
.RE
.RS 8
.RE
.IP "\(bu" 8
That the sizeof(struct) or the alignments are the same everywhere
.RS 8
.IP "\(bu" 8
There might be padding bytes between the fields to align the fields \-
the bytes can be anything
.IP "\(bu" 8
Structs are required to be aligned to the maximum alignment required by
the fields \- which for native types is for usually equivalent to
\&\fIsizeof()\fR of the field
.RE
.RS 8
.RE
.RE
.RS 4
.RE
.IP "\(bu" 4
Assuming the character set is ASCIIish
.Sp
Perl can compile and run under \s-1EBCDIC\s0 platforms. See perlebcdic.
This is transparent for the most part, but because the character sets
differ, you shouldn't use numeric (decimal, octal, nor hex) constants
to refer to characters. You can safely say 'A', but not 0x41. You can
safely say '\en', but not \e012. If a character doesn't have a trivial
input form, you can create a #define for it in both \f(CW\*(C`utfebcdic.h\*(C'\fR and
\&\f(CW\*(C`utf8.h\*(C'\fR, so that it resolves to different values depending on the
character set being used. (There are three different \s-1EBCDIC\s0 character
sets defined in \f(CW\*(C`utfebcdic.h\*(C'\fR, so it might be best to insert the
#define three times in that file.)
.Sp
Also, the range 'A' \- 'Z' in \s-1ASCII\s0 is an unbroken sequence of 26 upper
case alphabetic characters. That is not true in \s-1EBCDIC\s0. Nor for 'a' to
\&'z'. But '0' \- '9' is an unbroken range in both systems. Don't assume
anything about other ranges.
.Sp
Many of the comments in the existing code ignore the possibility of
\&\s-1EBCDIC\s0, and may be wrong therefore, even if the code works. This is
actually a tribute to the successful transparent insertion of being
able to handle \s-1EBCDIC\s0 without having to change pre-existing code.
.Sp
\&\s-1UTF\-8\s0 and UTF-EBCDIC are two different encodings used to represent
Unicode code points as sequences of bytes. Macros  with the same names
(but different definitions) in \f(CW\*(C`utf8.h\*(C'\fR and \f(CW\*(C`utfebcdic.h\*(C'\fR are used to
allow the calling code to think that there is only one such encoding.
This is almost always referred to as \f(CW\*(C`utf8\*(C'\fR, but it means the \s-1EBCDIC\s0
version as well. Again, comments in the code may well be wrong even if
the code itself is right. For example, the concept of \f(CW\*(C`invariant
characters\*(C'\fR differs between \s-1ASCII\s0 and \s-1EBCDIC\s0. On \s-1ASCII\s0 platforms, only
characters that do not have the high-order bit set (i.e. whose ordinals
are strict \s-1ASCII\s0, 0 \- 127) are invariant, and the documentation and
comments in the code may assume that, often referring to something
like, say, \f(CW\*(C`hibit\*(C'\fR. The situation differs and is not so simple on
\&\s-1EBCDIC\s0 machines, but as long as the code itself uses the
\&\f(CW\*(C`NATIVE_IS_INVARIANT()\*(C'\fR macro appropriately, it works, even if the
comments are wrong.
.IP "\(bu" 4
Assuming the character set is just \s-1ASCII\s0
.Sp
\&\s-1ASCII\s0 is a 7 bit encoding, but bytes have 8 bits in them. The 128 extra
characters have different meanings depending on the locale.  Absent a
locale, currently these extra characters are generally considered to be
unassigned, and this has presented some problems. This is being changed
starting in 5.12 so that these characters will be considered to be
Latin\-1 (\s-1ISO\-8859\-1\s0).
.IP "\(bu" 4
Mixing #define and #ifdef
.Sp
.Vb 6
\&  #define BURGLE(x) ... \e
\&  #ifdef BURGLE_OLD_STYLE        /* BAD */
\&  ... do it the old way ... \e
\&  #else
\&  ... do it the new way ... \e
\&  #endif
.Ve
.Sp
You cannot portably \*(L"stack\*(R" cpp directives. For example in the above
you need two separate \s-1\fIBURGLE\s0()\fR #defines, one for each #ifdef branch.
.IP "\(bu" 4
Adding non-comment stuff after #endif or #else
.Sp
.Vb 5
\&  #ifdef SNOSH
\&  ...
\&  #else !SNOSH    /* BAD */
\&  ...
\&  #endif SNOSH    /* BAD */
.Ve
.Sp
The #endif and #else cannot portably have anything non-comment after
them. If you want to document what is going (which is a good idea
especially if the branches are long), use (C) comments:
.Sp
.Vb 5
\&  #ifdef SNOSH
\&  ...
\&  #else /* !SNOSH */
\&  ...
\&  #endif /* SNOSH */
.Ve
.Sp
The gcc option \f(CW\*(C`\-Wendif\-labels\*(C'\fR warns about the bad variant (by
default on starting from Perl 5.9.4).
.IP "\(bu" 4
Having a comma after the last element of an enum list
.Sp
.Vb 5
\&  enum color {
\&    CERULEAN,
\&    CHARTREUSE,
\&    CINNABAR,     /* BAD */
\&  };
.Ve
.Sp
is not portable. Leave out the last comma.
.Sp
Also note that whether enums are implicitly morphable to ints varies
between compilers, you might need to (int).
.IP "\(bu" 4
Using //\-comments
.Sp
.Vb 1
\&  // This function bamfoodles the zorklator.   /* BAD */
.Ve
.Sp
That is C99 or \*(C+. Perl is C89. Using the //\-comments is silently
allowed by many C compilers but cranking up the \s-1ANSI\s0 C89 strictness
(which we like to do) causes the compilation to fail.
.IP "\(bu" 4
Mixing declarations and code
.Sp
.Vb 5
\&  void zorklator()
\&  {
\&    int n = 3;
\&    set_zorkmids(n);    /* BAD */
\&    int q = 4;
.Ve
.Sp
That is C99 or \*(C+. Some C compilers allow that, but you shouldn't.
.Sp
The gcc option \f(CW\*(C`\-Wdeclaration\-after\-statements\*(C'\fR scans for such
problems (by default on starting from Perl 5.9.4).
.IP "\(bu" 4
Introducing variables inside \fIfor()\fR
.Sp
.Vb 1
\&  for(int i = ...; ...; ...) {    /* BAD */
.Ve
.Sp
That is C99 or \*(C+. While it would indeed be awfully nice to have that
also in C89, to limit the scope of the loop variable, alas, we cannot.
.IP "\(bu" 4
Mixing signed char pointers with unsigned char pointers
.Sp
.Vb 4
\&  int foo(char *s) { ... }
\&  ...
\&  unsigned char *t = ...; /* Or U8* t = ... */
\&  foo(t);   /* BAD */
.Ve
.Sp
While this is legal practice, it is certainly dubious, and downright
fatal in at least one platform: for example \s-1VMS\s0 cc considers this a
fatal error. One cause for people often making this mistake is that a
\&\*(L"naked char\*(R" and therefore dereferencing a \*(L"naked char pointer\*(R" have an
undefined signedness: it depends on the compiler and the flags of the
compiler and the underlying platform whether the result is signed or
unsigned. For this very same reason using a 'char' as an array index is
bad.
.IP "\(bu" 4
Macros that have string constants and their arguments as substrings of
the string constants
.Sp
.Vb 2
\&  #define FOO(n) printf("number = %d\en", n)    /* BAD */
\&  FOO(10);
.Ve
.Sp
Pre-ANSI semantics for that was equivalent to
.Sp
.Vb 1
\&  printf("10umber = %d\e10");
.Ve
.Sp
which is probably not what you were expecting. Unfortunately at least
one reasonably common and modern C compiler does \*(L"real backward
compatibility\*(R" here, in \s-1AIX\s0 that is what still happens even though the
rest of the \s-1AIX\s0 compiler is very happily C89.
.IP "\(bu" 4
Using printf formats for non-basic C types
.Sp
.Vb 2
\&   IV i = ...;
\&   printf("i = %d\en", i);    /* BAD */
.Ve
.Sp
While this might by accident work in some platform (where \s-1IV\s0 happens to
be an \f(CW\*(C`int\*(C'\fR), in general it cannot. \s-1IV\s0 might be something larger. Even
worse the situation is with more specific types (defined by Perl's
configuration step in \fIconfig.h\fR):
.Sp
.Vb 2
\&   Uid_t who = ...;
\&   printf("who = %d\en", who);    /* BAD */
.Ve
.Sp
The problem here is that Uid_t might be not only not \f(CW\*(C`int\*(C'\fR\-wide but it
might also be unsigned, in which case large uids would be printed as
negative values.
.Sp
There is no simple solution to this because of \fIprintf()\fR's limited
intelligence, but for many types the right format is available as with
either 'f' or '_f' suffix, for example:
.Sp
.Vb 2
\&   IVdf /* IV in decimal */
\&   UVxf /* UV is hexadecimal */
\&
\&   printf("i = %"IVdf"\en", i); /* The IVdf is a string constant. */
\&
\&   Uid_t_f /* Uid_t in decimal */
\&
\&   printf("who = %"Uid_t_f"\en", who);
.Ve
.Sp
Or you can try casting to a \*(L"wide enough\*(R" type:
.Sp
.Vb 1
\&   printf("i = %"IVdf"\en", (IV)something_very_small_and_signed);
.Ve
.Sp
Also remember that the \f(CW%p\fR format really does require a void pointer:
.Sp
.Vb 2
\&   U8* p = ...;
\&   printf("p = %p\en", (void*)p);
.Ve
.Sp
The gcc option \f(CW\*(C`\-Wformat\*(C'\fR scans for such problems.
.IP "\(bu" 4
Blindly using variadic macros
.Sp
gcc has had them for a while with its own syntax, and C99 brought them
with a standardized syntax. Don't use the former, and use the latter
only if the \s-1HAS_C99_VARIADIC_MACROS\s0 is defined.
.IP "\(bu" 4
Blindly passing va_list
.Sp
Not all platforms support passing va_list to further varargs (stdarg)
functions. The right thing to do is to copy the va_list using the
\&\fIPerl_va_copy()\fR if the \s-1NEED_VA_COPY\s0 is defined.
.IP "\(bu" 4
Using gcc statement expressions
.Sp
.Vb 1
\&   val = ({...;...;...});    /* BAD */
.Ve
.Sp
While a nice extension, it's not portable. The Perl code does
admittedly use them if available to gain some extra speed (essentially
as a funky form of inlining), but you shouldn't.
.IP "\(bu" 4
Binding together several statements in a macro
.Sp
Use the macros \s-1STMT_START\s0 and \s-1STMT_END\s0.
.Sp
.Vb 3
\&   STMT_START {
\&      ...
\&   } STMT_END
.Ve
.IP "\(bu" 4
Testing for operating systems or versions when should be testing for
features
.Sp
.Vb 3
\&  #ifdef _\|_FOONIX_\|_    /* BAD */
\&  foo = quux();
\&  #endif
.Ve
.Sp
Unless you know with 100% certainty that \fIquux()\fR is only ever available
for the \*(L"Foonix\*(R" operating system \fBand\fR that is available \fBand\fR
correctly working for \fBall\fR past, present, \fBand\fR future versions of
\&\*(L"Foonix\*(R", the above is very wrong. This is more correct (though still
not perfect, because the below is a compile-time check):
.Sp
.Vb 3
\&  #ifdef HAS_QUUX
\&  foo = quux();
\&  #endif
.Ve
.Sp
How does the \s-1HAS_QUUX\s0 become defined where it needs to be?  Well, if
Foonix happens to be Unixy enough to be able to run the Configure
script, and Configure has been taught about detecting and testing
\&\fIquux()\fR, the \s-1HAS_QUUX\s0 will be correctly defined. In other platforms, the
corresponding configuration step will hopefully do the same.
.Sp
In a pinch, if you cannot wait for Configure to be educated, or if you
have a good hunch of where \fIquux()\fR might be available, you can
temporarily try the following:
.Sp
.Vb 3
\&  #if (defined(_\|_FOONIX_\|_) || defined(_\|_BARNIX_\|_))
\&  # define HAS_QUUX
\&  #endif
\&
\&  ...
\&
\&  #ifdef HAS_QUUX
\&  foo = quux();
\&  #endif
.Ve
.Sp
But in any case, try to keep the features and operating systems
separate.
.SS "Problematic System Interfaces"
.IX Subsection "Problematic System Interfaces"
.IP "\(bu" 4
\&\fImalloc\fR\|(0), \fIrealloc\fR\|(0), calloc(0, 0) are non-portable. To be portable
allocate at least one byte. (In general you should rarely need to work
at this low level, but instead use the various malloc wrappers.)
.IP "\(bu" 4
\&\fIsnprintf()\fR \- the return type is unportable. Use \fImy_snprintf()\fR instead.
.SS "Security problems"
.IX Subsection "Security problems"
Last but not least, here are various tips for safer coding.
.IP "\(bu" 4
Do not use \fIgets()\fR
.Sp
Or we will publicly ridicule you. Seriously.
.IP "\(bu" 4
Do not use \fIstrcpy()\fR or \fIstrcat()\fR or \fIstrncpy()\fR or \fIstrncat()\fR
.Sp
Use \fImy_strlcpy()\fR and \fImy_strlcat()\fR instead: they either use the native
implementation, or Perl's own implementation (borrowed from the public
domain implementation of \s-1INN\s0).
.IP "\(bu" 4
Do not use \fIsprintf()\fR or \fIvsprintf()\fR
.Sp
If you really want just plain byte strings, use \fImy_snprintf()\fR and
\&\fImy_vsnprintf()\fR instead, which will try to use \fIsnprintf()\fR and
\&\fIvsnprintf()\fR if those safer APIs are available. If you want something
fancier than a plain byte string, use SVs and \fIPerl_sv_catpvf()\fR.
.SH "DEBUGGING"
.IX Header "DEBUGGING"
You can compile a special debugging version of Perl, which allows you
to use the \f(CW\*(C`\-D\*(C'\fR option of Perl to tell more about what Perl is doing.
But sometimes there is no alternative than to dive in with a debugger,
either to see the stack trace of a core dump (very useful in a bug
report), or trying to figure out what went wrong before the core dump
happened, or how did we end up having wrong or unexpected results.
.SS "Poking at Perl"
.IX Subsection "Poking at Perl"
To really poke around with Perl, you'll probably want to build Perl for
debugging, like this:
.PP
.Vb 2
\&    ./Configure \-d \-D optimize=\-g
\&    make
.Ve
.PP
\&\f(CW\*(C`\-g\*(C'\fR is a flag to the C compiler to have it produce debugging
information which will allow us to step through a running program, and
to see in which C function we are at (without the debugging information
we might see only the numerical addresses of the functions, which is
not very helpful).
.PP
\&\fIConfigure\fR will also turn on the \f(CW\*(C`DEBUGGING\*(C'\fR compilation symbol
which enables all the internal debugging code in Perl. There are a
whole bunch of things you can debug with this: perlrun lists them
all, and the best way to find out about them is to play about with
them. The most useful options are probably
.PP
.Vb 4
\&    l  Context (loop) stack processing
\&    t  Trace execution
\&    o  Method and overloading resolution
\&    c  String/numeric conversions
.Ve
.PP
Some of the functionality of the debugging code can be achieved using
\&\s-1XS\s0 modules.
.PP
.Vb 2
\&    \-Dr => use re \*(Aqdebug\*(Aq
\&    \-Dx => use O \*(AqDebug\*(Aq
.Ve
.SS "Using a source-level debugger"
.IX Subsection "Using a source-level debugger"
If the debugging output of \f(CW\*(C`\-D\*(C'\fR doesn't help you, it's time to step
through perl's execution with a source-level debugger.
.IP "\(bu" 3
We'll use \f(CW\*(C`gdb\*(C'\fR for our examples here; the principles will apply to
any debugger (many vendors call their debugger \f(CW\*(C`dbx\*(C'\fR), but check the
manual of the one you're using.
.PP
To fire up the debugger, type
.PP
.Vb 1
\&    gdb ./perl
.Ve
.PP
Or if you have a core dump:
.PP
.Vb 1
\&    gdb ./perl core
.Ve
.PP
You'll want to do that in your Perl source tree so the debugger can
read the source code. You should see the copyright message, followed by
the prompt.
.PP
.Vb 1
\&    (gdb)
.Ve
.PP
\&\f(CW\*(C`help\*(C'\fR will get you into the documentation, but here are the most
useful commands:
.IP "\(bu" 3
run [args]
.Sp
Run the program with the given arguments.
.IP "\(bu" 3
break function_name
.IP "\(bu" 3
break source.c:xxx
.Sp
Tells the debugger that we'll want to pause execution when we reach
either the named function (but see \*(L"Internal Functions\*(R" in perlguts!) or
the given line in the named source file.
.IP "\(bu" 3
step
.Sp
Steps through the program a line at a time.
.IP "\(bu" 3
next
.Sp
Steps through the program a line at a time, without descending into
functions.
.IP "\(bu" 3
continue
.Sp
Run until the next breakpoint.
.IP "\(bu" 3
finish
.Sp
Run until the end of the current function, then stop again.
.IP "\(bu" 3
\&'enter'
.Sp
Just pressing Enter will do the most recent operation again \- it's a
blessing when stepping through miles of source code.
.IP "\(bu" 3
print
.Sp
Execute the given C code and print its results. \fB\s-1WARNING\s0\fR: Perl makes
heavy use of macros, and \fIgdb\fR does not necessarily support macros
(see later \*(L"gdb macro support\*(R"). You'll have to substitute them
yourself, or to invoke cpp on the source code files (see \*(L"The .i
Targets\*(R") So, for instance, you can't say
.Sp
.Vb 1
\&    print SvPV_nolen(sv)
.Ve
.Sp
but you have to say
.Sp
.Vb 1
\&    print Perl_sv_2pv_nolen(sv)
.Ve
.PP
You may find it helpful to have a \*(L"macro dictionary\*(R", which you can
produce by saying \f(CW\*(C`cpp \-dM perl.c | sort\*(C'\fR. Even then, \fIcpp\fR won't
recursively apply those macros for you.
.SS "gdb macro support"
.IX Subsection "gdb macro support"
Recent versions of \fIgdb\fR have fairly good macro support, but in order
to use it you'll need to compile perl with macro definitions included
in the debugging information. Using \fIgcc\fR version 3.1, this means
configuring with \f(CW\*(C`\-Doptimize=\-g3\*(C'\fR. Other compilers might use a
different switch (if they support debugging macros at all).
.SS "Dumping Perl Data Structures"
.IX Subsection "Dumping Perl Data Structures"
One way to get around this macro hell is to use the dumping functions
in \fIdump.c\fR; these work a little like an internal
Devel::Peek, but they also cover OPs and other
structures that you can't get at from Perl. Let's take an example.
We'll use the \f(CW\*(C`$a = $b + $c\*(C'\fR we used before, but give it a bit of
context: \f(CW\*(C`$b = "6XXXX"; $c = 2.3;\*(C'\fR. Where's a good place to stop and
poke around?
.PP
What about \f(CW\*(C`pp_add\*(C'\fR, the function we examined earlier to implement the
\&\f(CW\*(C`+\*(C'\fR operator:
.PP
.Vb 2
\&    (gdb) break Perl_pp_add
\&    Breakpoint 1 at 0x46249f: file pp_hot.c, line 309.
.Ve
.PP
Notice we use \f(CW\*(C`Perl_pp_add\*(C'\fR and not \f(CW\*(C`pp_add\*(C'\fR \- see
\&\*(L"Internal Functions\*(R" in perlguts. With the breakpoint in place, we can
run our program:
.PP
.Vb 1
\&    (gdb) run \-e \*(Aq$b = "6XXXX"; $c = 2.3; $a = $b + $c\*(Aq
.Ve
.PP
Lots of junk will go past as gdb reads in the relevant source files and
libraries, and then:
.PP
.Vb 5
\&    Breakpoint 1, Perl_pp_add () at pp_hot.c:309
\&    309         dSP; dATARGET; tryAMAGICbin(add,opASSIGN);
\&    (gdb) step
\&    311           dPOPTOPnnrl_ul;
\&    (gdb)
.Ve
.PP
We looked at this bit of code before, and we said that
\&\f(CW\*(C`dPOPTOPnnrl_ul\*(C'\fR arranges for two \f(CW\*(C`NV\*(C'\fRs to be placed into \f(CW\*(C`left\*(C'\fR and
\&\f(CW\*(C`right\*(C'\fR \- let's slightly expand it:
.PP
.Vb 3
\& #define dPOPTOPnnrl_ul  NV right = POPn; \e
\&                         SV *leftsv = TOPs; \e
\&                         NV left = USE_LEFT(leftsv) ? SvNV(leftsv) : 0.0
.Ve
.PP
\&\f(CW\*(C`POPn\*(C'\fR takes the \s-1SV\s0 from the top of the stack and obtains its \s-1NV\s0
either directly (if \f(CW\*(C`SvNOK\*(C'\fR is set) or by calling the \f(CW\*(C`sv_2nv\*(C'\fR
function. \f(CW\*(C`TOPs\*(C'\fR takes the next \s-1SV\s0 from the top of the stack \- yes,
\&\f(CW\*(C`POPn\*(C'\fR uses \f(CW\*(C`TOPs\*(C'\fR \- but doesn't remove it. We then use \f(CW\*(C`SvNV\*(C'\fR to
get the \s-1NV\s0 from \f(CW\*(C`leftsv\*(C'\fR in the same way as before \- yes, \f(CW\*(C`POPn\*(C'\fR uses
\&\f(CW\*(C`SvNV\*(C'\fR.
.PP
Since we don't have an \s-1NV\s0 for \f(CW$b\fR, we'll have to use \f(CW\*(C`sv_2nv\*(C'\fR to
convert it. If we step again, we'll find ourselves there:
.PP
.Vb 3
\&    Perl_sv_2nv (sv=0xa0675d0) at sv.c:1669
\&    1669        if (!sv)
\&    (gdb)
.Ve
.PP
We can now use \f(CW\*(C`Perl_sv_dump\*(C'\fR to investigate the \s-1SV:\s0
.PP
.Vb 7
\&    SV = PV(0xa057cc0) at 0xa0675d0
\&    REFCNT = 1
\&    FLAGS = (POK,pPOK)
\&    PV = 0xa06a510 "6XXXX"\e0
\&    CUR = 5
\&    LEN = 6
\&    $1 = void
.Ve
.PP
We know we're going to get \f(CW6\fR from this, so let's finish the
subroutine:
.PP
.Vb 4
\&    (gdb) finish
\&    Run till exit from #0  Perl_sv_2nv (sv=0xa0675d0) at sv.c:1671
\&    0x462669 in Perl_pp_add () at pp_hot.c:311
\&    311           dPOPTOPnnrl_ul;
.Ve
.PP
We can also dump out this op: the current op is always stored in
\&\f(CW\*(C`PL_op\*(C'\fR, and we can dump it with \f(CW\*(C`Perl_op_dump\*(C'\fR. This'll give us
similar output to B::Debug.
.PP
.Vb 10
\&    {
\&    13  TYPE = add  ===> 14
\&        TARG = 1
\&        FLAGS = (SCALAR,KIDS)
\&        {
\&            TYPE = null  ===> (12)
\&              (was rv2sv)
\&            FLAGS = (SCALAR,KIDS)
\&            {
\&    11          TYPE = gvsv  ===> 12
\&                FLAGS = (SCALAR)
\&                GV = main::b
\&            }
\&        }
.Ve
.PP
# finish this later #
.SH "SOURCE CODE STATIC ANALYSIS"
.IX Header "SOURCE CODE STATIC ANALYSIS"
Various tools exist for analysing C source code \fBstatically\fR, as
opposed to \fBdynamically\fR, that is, without executing the code. It is
possible to detect resource leaks, undefined behaviour, type
mismatches, portability problems, code paths that would cause illegal
memory accesses, and other similar problems by just parsing the C code
and looking at the resulting graph, what does it tell about the
execution and data flows. As a matter of fact, this is exactly how C
compilers know to give warnings about dubious code.
.SS "lint, splint"
.IX Subsection "lint, splint"
The good old C code quality inspector, \f(CW\*(C`lint\*(C'\fR, is available in several
platforms, but please be aware that there are several different
implementations of it by different vendors, which means that the flags
are not identical across different platforms.
.PP
There is a lint variant called \f(CW\*(C`splint\*(C'\fR (Secure Programming Lint)
available from http://www.splint.org/ that should compile on any
Unix-like platform.
.PP
There are \f(CW\*(C`lint\*(C'\fR and <splint> targets in Makefile, but you may have to
diddle with the flags (see above).
.SS "Coverity"
.IX Subsection "Coverity"
Coverity (http://www.coverity.com/) is a product similar to lint and as
a testbed for their product they periodically check several open source
projects, and they give out accounts to open source developers to the
defect databases.
.SS "cpd (cut-and-paste detector)"
.IX Subsection "cpd (cut-and-paste detector)"
The cpd tool detects cut-and-paste coding. If one instance of the
cut-and-pasted code changes, all the other spots should probably be
changed, too. Therefore such code should probably be turned into a
subroutine or a macro.
.PP
cpd (http://pmd.sourceforge.net/cpd.html) is part of the pmd project
(http://pmd.sourceforge.net/). pmd was originally written for static
analysis of Java code, but later the cpd part of it was extended to
parse also C and \*(C+.
.PP
Download the pmd\-bin\-X.Y.zip () from the SourceForge site, extract the
pmd\-X.Y.jar from it, and then run that on source code thusly:
.PP
.Vb 1
\&  java \-cp pmd\-X.Y.jar net.sourceforge.pmd.cpd.CPD \-\-minimum\-tokens 100 \-\-files /some/where/src \-\-language c > cpd.txt
.Ve
.PP
You may run into memory limits, in which case you should use the \-Xmx
option:
.PP
.Vb 1
\&  java \-Xmx512M ...
.Ve
.SS "gcc warnings"
.IX Subsection "gcc warnings"
Though much can be written about the inconsistency and coverage
problems of gcc warnings (like \f(CW\*(C`\-Wall\*(C'\fR not meaning \*(L"all the warnings\*(R",
or some common portability problems not being covered by \f(CW\*(C`\-Wall\*(C'\fR, or
\&\f(CW\*(C`\-ansi\*(C'\fR and \f(CW\*(C`\-pedantic\*(C'\fR both being a poorly defined collection of
warnings, and so forth), gcc is still a useful tool in keeping our
coding nose clean.
.PP
The \f(CW\*(C`\-Wall\*(C'\fR is by default on.
.PP
The \f(CW\*(C`\-ansi\*(C'\fR (and its sidekick, \f(CW\*(C`\-pedantic\*(C'\fR) would be nice to be on
always, but unfortunately they are not safe on all platforms, they can
for example cause fatal conflicts with the system headers (Solaris
being a prime example). If Configure \f(CW\*(C`\-Dgccansipedantic\*(C'\fR is used, the
\&\f(CW\*(C`cflags\*(C'\fR frontend selects \f(CW\*(C`\-ansi \-pedantic\*(C'\fR for the platforms where
they are known to be safe.
.PP
Starting from Perl 5.9.4 the following extra flags are added:
.IP "\(bu" 4
\&\f(CW\*(C`\-Wendif\-labels\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`\-Wextra\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`\-Wdeclaration\-after\-statement\*(C'\fR
.PP
The following flags would be nice to have but they would first need
their own Augean stablemaster:
.IP "\(bu" 4
\&\f(CW\*(C`\-Wpointer\-arith\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`\-Wshadow\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`\-Wstrict\-prototypes\*(C'\fR
.PP
The \f(CW\*(C`\-Wtraditional\*(C'\fR is another example of the annoying tendency of gcc
to bundle a lot of warnings under one switch (it would be impossible to
deploy in practice because it would complain a lot) but it does contain
some warnings that would be beneficial to have available on their own,
such as the warning about string constants inside macros containing the
macro arguments: this behaved differently pre-ANSI than it does in
\&\s-1ANSI\s0, and some C compilers are still in transition, \s-1AIX\s0 being an
example.
.SS "Warnings of other C compilers"
.IX Subsection "Warnings of other C compilers"
Other C compilers (yes, there \fBare\fR other C compilers than gcc) often
have their \*(L"strict \s-1ANSI\s0\*(R" or \*(L"strict \s-1ANSI\s0 with some portability
extensions\*(R" modes on, like for example the Sun Workshop has its \f(CW\*(C`\-Xa\*(C'\fR
mode on (though implicitly), or the \s-1DEC\s0 (these days, \s-1HP\s0...) has its
\&\f(CW\*(C`\-std1\*(C'\fR mode on.
.SH "MEMORY DEBUGGERS"
.IX Header "MEMORY DEBUGGERS"
\&\fB\s-1NOTE\s0 1\fR: Running under memory debuggers such as Purify, valgrind, or
Third Degree greatly slows down the execution: seconds become minutes,
minutes become hours. For example as of Perl 5.8.1, the
ext/Encode/t/Unicode.t takes extraordinarily long to complete under
e.g. Purify, Third Degree, and valgrind. Under valgrind it takes more
than six hours, even on a snappy computer. The said test must be doing
something that is quite unfriendly for memory debuggers. If you don't
feel like waiting, that you can simply kill away the perl process.
.PP
\&\fB\s-1NOTE\s0 2\fR: To minimize the number of memory leak false alarms (see
\&\*(L"\s-1PERL_DESTRUCT_LEVEL\s0\*(R" for more information), you have to set the
environment variable \s-1PERL_DESTRUCT_LEVEL\s0 to 2.
.PP
For csh-like shells:
.PP
.Vb 1
\&    setenv PERL_DESTRUCT_LEVEL 2
.Ve
.PP
For Bourne-type shells:
.PP
.Vb 2
\&    PERL_DESTRUCT_LEVEL=2
\&    export PERL_DESTRUCT_LEVEL
.Ve
.PP
In Unixy environments you can also use the \f(CW\*(C`env\*(C'\fR command:
.PP
.Vb 1
\&    env PERL_DESTRUCT_LEVEL=2 valgrind ./perl \-Ilib ...
.Ve
.PP
\&\fB\s-1NOTE\s0 3\fR: There are known memory leaks when there are compile-time
errors within eval or require, seeing \f(CW\*(C`S_doeval\*(C'\fR in the call stack is
a good sign of these. Fixing these leaks is non-trivial, unfortunately,
but they must be fixed eventually.
.PP
\&\fB\s-1NOTE\s0 4\fR: DynaLoader will not clean up after itself completely
unless Perl is built with the Configure option
\&\f(CW\*(C`\-Accflags=\-DDL_UNLOAD_ALL_AT_EXIT\*(C'\fR.
.SS "Rational Software's Purify"
.IX Subsection "Rational Software's Purify"
Purify is a commercial tool that is helpful in identifying memory
overruns, wild pointers, memory leaks and other such badness. Perl must
be compiled in a specific way for optimal testing with Purify.  Purify
is available under Windows \s-1NT\s0, Solaris, HP-UX, \s-1SGI\s0, and Siemens Unix.
.PP
\fIPurify on Unix\fR
.IX Subsection "Purify on Unix"
.PP
On Unix, Purify creates a new Perl binary. To get the most benefit out
of Purify, you should create the perl to Purify using:
.PP
.Vb 2
\&    sh Configure \-Accflags=\-DPURIFY \-Doptimize=\*(Aq\-g\*(Aq \e
\&     \-Uusemymalloc \-Dusemultiplicity
.Ve
.PP
where these arguments mean:
.IP "\(bu" 4
\&\-Accflags=\-DPURIFY
.Sp
Disables Perl's arena memory allocation functions, as well as forcing
use of memory allocation functions derived from the system malloc.
.IP "\(bu" 4
\&\-Doptimize='\-g'
.Sp
Adds debugging information so that you see the exact source statements
where the problem occurs. Without this flag, all you will see is the
source filename of where the error occurred.
.IP "\(bu" 4
\&\-Uusemymalloc
.Sp
Disable Perl's malloc so that Purify can more closely monitor
allocations and leaks. Using Perl's malloc will make Purify report most
leaks in the \*(L"potential\*(R" leaks category.
.IP "\(bu" 4
\&\-Dusemultiplicity
.Sp
Enabling the multiplicity option allows perl to clean up thoroughly
when the interpreter shuts down, which reduces the number of bogus leak
reports from Purify.
.PP
Once you've compiled a perl suitable for Purify'ing, then you can just:
.PP
.Vb 1
\&    make pureperl
.Ve
.PP
which creates a binary named 'pureperl' that has been Purify'ed. This
binary is used in place of the standard 'perl' binary when you want to
debug Perl memory problems.
.PP
As an example, to show any memory leaks produced during the standard
Perl testset you would create and run the Purify'ed perl as:
.PP
.Vb 3
\&    make pureperl
\&    cd t
\&    ../pureperl \-I../lib harness
.Ve
.PP
which would run Perl on test.pl and report any memory problems.
.PP
Purify outputs messages in \*(L"Viewer\*(R" windows by default. If you don't
have a windowing environment or if you simply want the Purify output to
unobtrusively go to a log file instead of to the interactive window,
use these following options to output to the log file \*(L"perl.log\*(R":
.PP
.Vb 2
\&    setenv PURIFYOPTIONS "\-chain\-length=25 \-windows=no \e
\&     \-log\-file=perl.log \-append\-logfile=yes"
.Ve
.PP
If you plan to use the \*(L"Viewer\*(R" windows, then you only need this
option:
.PP
.Vb 1
\&    setenv PURIFYOPTIONS "\-chain\-length=25"
.Ve
.PP
In Bourne-type shells:
.PP
.Vb 2
\&    PURIFYOPTIONS="..."
\&    export PURIFYOPTIONS
.Ve
.PP
or if you have the \*(L"env\*(R" utility:
.PP
.Vb 1
\&    env PURIFYOPTIONS="..." ../pureperl ...
.Ve
.PP
\fIPurify on \s-1NT\s0\fR
.IX Subsection "Purify on NT"
.PP
Purify on Windows \s-1NT\s0 instruments the Perl binary 'perl.exe' on the fly.
 There are several options in the makefile you should change to get the
most use out of Purify:
.IP "\(bu" 4
\&\s-1DEFINES\s0
.Sp
You should add \-DPURIFY to the \s-1DEFINES\s0 line so the \s-1DEFINES\s0 line looks
something like:
.Sp
.Vb 1
\&   DEFINES = \-DWIN32 \-D_CONSOLE \-DNO_STRICT $(CRYPT_FLAG) \-DPURIFY=1
.Ve
.Sp
to disable Perl's arena memory allocation functions, as well as to
force use of memory allocation functions derived from the system
malloc.
.IP "\(bu" 4
\&\s-1USE_MULTI\s0 = define
.Sp
Enabling the multiplicity option allows perl to clean up thoroughly
when the interpreter shuts down, which reduces the number of bogus leak
reports from Purify.
.IP "\(bu" 4
#PERL_MALLOC = define
.Sp
Disable Perl's malloc so that Purify can more closely monitor
allocations and leaks. Using Perl's malloc will make Purify report most
leaks in the \*(L"potential\*(R" leaks category.
.IP "\(bu" 4
\&\s-1CFG\s0 = Debug
.Sp
Adds debugging information so that you see the exact source statements
where the problem occurs. Without this flag, all you will see is the
source filename of where the error occurred.
.PP
As an example, to show any memory leaks produced during the standard
Perl testset you would create and run Purify as:
.PP
.Vb 4
\&    cd win32
\&    make
\&    cd ../t
\&    purify ../perl \-I../lib harness
.Ve
.PP
which would instrument Perl in memory, run Perl on test.pl, then
finally report any memory problems.
.SS "valgrind"
.IX Subsection "valgrind"
The excellent valgrind tool can be used to find out both memory leaks
and illegal memory accesses. As of version 3.3.0, Valgrind only
supports Linux on x86, x86\-64 and PowerPC and Darwin (\s-1OS\s0 X) on x86 and
x86\-64). The special \*(L"test.valgrind\*(R" target can be used to run the
tests under valgrind. Found errors and memory leaks are logged in
files named \fItestfile.valgrind\fR.
.PP
Valgrind also provides a cachegrind tool, invoked on perl as:
.PP
.Vb 1
\&    VG_OPTS=\-\-tool=cachegrind make test.valgrind
.Ve
.PP
As system libraries (most notably glibc) are also triggering errors,
valgrind allows to suppress such errors using suppression files. The
default suppression file that comes with valgrind already catches a lot
of them. Some additional suppressions are defined in \fIt/perl.supp\fR.
.PP
To get valgrind and for more information see
.PP
.Vb 1
\&    http://valgrind.org/
.Ve
.SH "PROFILING"
.IX Header "PROFILING"
Depending on your platform there are various ways of profiling Perl.
.PP
There are two commonly used techniques of profiling executables:
\&\fIstatistical time-sampling\fR and \fIbasic-block counting\fR.
.PP
The first method takes periodically samples of the \s-1CPU\s0 program counter,
and since the program counter can be correlated with the code generated
for functions, we get a statistical view of in which functions the
program is spending its time. The caveats are that very small/fast
functions have lower probability of showing up in the profile, and that
periodically interrupting the program (this is usually done rather
frequently, in the scale of milliseconds) imposes an additional
overhead that may skew the results. The first problem can be alleviated
by running the code for longer (in general this is a good idea for
profiling), the second problem is usually kept in guard by the
profiling tools themselves.
.PP
The second method divides up the generated code into \fIbasic blocks\fR.
Basic blocks are sections of code that are entered only in the
beginning and exited only at the end. For example, a conditional jump
starts a basic block. Basic block profiling usually works by
\&\fIinstrumenting\fR the code by adding \fIenter basic block #nnnn\fR
book-keeping code to the generated code. During the execution of the
code the basic block counters are then updated appropriately. The
caveat is that the added extra code can skew the results: again, the
profiling tools usually try to factor their own effects out of the
results.
.SS "Gprof Profiling"
.IX Subsection "Gprof Profiling"
gprof is a profiling tool available in many Unix platforms, it uses
\&\fIstatistical time-sampling\fR.
.PP
You can build a profiled version of perl called \*(L"perl.gprof\*(R" by
invoking the make target \*(L"perl.gprof\*(R"  (What is required is that Perl
must be compiled using the \f(CW\*(C`\-pg\*(C'\fR flag, you may need to re-Configure).
Running the profiled version of Perl will create an output file called
\&\fIgmon.out\fR is created which contains the profiling data collected
during the execution.
.PP
The gprof tool can then display the collected data in various ways.
Usually gprof understands the following options:
.IP "\(bu" 4
\&\-a
.Sp
Suppress statically defined functions from the profile.
.IP "\(bu" 4
\&\-b
.Sp
Suppress the verbose descriptions in the profile.
.IP "\(bu" 4
\&\-e routine
.Sp
Exclude the given routine and its descendants from the profile.
.IP "\(bu" 4
\&\-f routine
.Sp
Display only the given routine and its descendants in the profile.
.IP "\(bu" 4
\&\-s
.Sp
Generate a summary file called \fIgmon.sum\fR which then may be given to
subsequent gprof runs to accumulate data over several runs.
.IP "\(bu" 4
\&\-z
.Sp
Display routines that have zero usage.
.PP
For more detailed explanation of the available commands and output
formats, see your own local documentation of gprof.
.PP
quick hint:
.PP
.Vb 4
\&    $ sh Configure \-des \-Dusedevel \-Doptimize=\*(Aq\-pg\*(Aq && make perl.gprof
\&    $ ./perl.gprof someprog # creates gmon.out in current directory
\&    $ gprof ./perl.gprof > out
\&    $ view out
.Ve
.SS "\s-1GCC\s0 gcov Profiling"
.IX Subsection "GCC gcov Profiling"
Starting from \s-1GCC\s0 3.0 \fIbasic block profiling\fR is officially available
for the \s-1GNU\s0 \s-1CC\s0.
.PP
You can build a profiled version of perl called \fIperl.gcov\fR by
invoking the make target \*(L"perl.gcov\*(R" (what is required that Perl must
be compiled using gcc with the flags \f(CW\*(C`\-fprofile\-arcs \-ftest\-coverage\*(C'\fR,
you may need to re-Configure).
.PP
Running the profiled version of Perl will cause profile output to be
generated. For each source file an accompanying \*(L".da\*(R" file will be
created.
.PP
To display the results you use the \*(L"gcov\*(R" utility (which should be
installed if you have gcc 3.0 or newer installed). \fIgcov\fR is run on
source code files, like this
.PP
.Vb 1
\&    gcov sv.c
.Ve
.PP
which will cause \fIsv.c.gcov\fR to be created. The \fI.gcov\fR files contain
the source code annotated with relative frequencies of execution
indicated by \*(L"#\*(R" markers.
.PP
Useful options of \fIgcov\fR include \f(CW\*(C`\-b\*(C'\fR which will summarise the basic
block, branch, and function call coverage, and \f(CW\*(C`\-c\*(C'\fR which instead of
relative frequencies will use the actual counts. For more information
on the use of \fIgcov\fR and basic block profiling with gcc, see the
latest \s-1GNU\s0 \s-1CC\s0 manual, as of \s-1GCC\s0 3.0 see
.PP
.Vb 1
\&    http://gcc.gnu.org/onlinedocs/gcc\-3.0/gcc.html
.Ve
.PP
and its section titled \*(L"8. gcov: a Test Coverage Program\*(R"
.PP
.Vb 1
\&    http://gcc.gnu.org/onlinedocs/gcc\-3.0/gcc_8.html#SEC132
.Ve
.PP
quick hint:
.PP
.Vb 7
\&    $ sh Configure \-des \-Dusedevel \-Doptimize=\*(Aq\-g\*(Aq \e
\&        \-Accflags=\*(Aq\-fprofile\-arcs \-ftest\-coverage\*(Aq \e
\&        \-Aldflags=\*(Aq\-fprofile\-arcs \-ftest\-coverage\*(Aq && make perl.gcov
\&    $ rm \-f regexec.c.gcov regexec.gcda
\&    $ ./perl.gcov
\&    $ gcov regexec.c
\&    $ view regexec.c.gcov
.Ve
.SH "MISCELLANEOUS TRICKS"
.IX Header "MISCELLANEOUS TRICKS"
.SS "\s-1PERL_DESTRUCT_LEVEL\s0"
.IX Subsection "PERL_DESTRUCT_LEVEL"
If you want to run any of the tests yourself manually using e.g.
valgrind, or the pureperl or perl.third executables, please note that
by default perl \fBdoes not\fR explicitly cleanup all the memory it has
allocated (such as global memory arenas) but instead lets the \fIexit()\fR of
the whole program \*(L"take care\*(R" of such allocations, also known as
\&\*(L"global destruction of objects\*(R".
.PP
There is a way to tell perl to do complete cleanup: set the environment
variable \s-1PERL_DESTRUCT_LEVEL\s0 to a non-zero value. The t/TEST wrapper
does set this to 2, and this is what you need to do too, if you don't
want to see the \*(L"global leaks\*(R": For example, for \*(L"third-degreed\*(R" Perl:
.PP
.Vb 1
\&        env PERL_DESTRUCT_LEVEL=2 ./perl.third \-Ilib t/foo/bar.t
.Ve
.PP
(Note: the mod_perl apache module uses also this environment variable
for its own purposes and extended its semantics. Refer to the mod_perl
documentation for more information. Also, spawned threads do the
equivalent of setting this variable to the value 1.)
.PP
If, at the end of a run you get the message \fIN scalars leaked\fR, you
can recompile with \f(CW\*(C`\-DDEBUG_LEAKING_SCALARS\*(C'\fR, which will cause the
addresses of all those leaked SVs to be dumped along with details as to
where each \s-1SV\s0 was originally allocated. This information is also
displayed by Devel::Peek. Note that the extra details recorded with
each \s-1SV\s0 increases memory usage, so it shouldn't be used in production
environments. It also converts \f(CW\*(C`new_SV()\*(C'\fR from a macro into a real
function, so you can use your favourite debugger to discover where
those pesky SVs were allocated.
.PP
If you see that you're leaking memory at runtime, but neither valgrind
nor \f(CW\*(C`\-DDEBUG_LEAKING_SCALARS\*(C'\fR will find anything, you're probably
leaking SVs that are still reachable and will be properly cleaned up
during destruction of the interpreter. In such cases, using the \f(CW\*(C`\-Dm\*(C'\fR
switch can point you to the source of the leak. If the executable was
built with \f(CW\*(C`\-DDEBUG_LEAKING_SCALARS\*(C'\fR, \f(CW\*(C`\-Dm\*(C'\fR will output \s-1SV\s0
allocations in addition to memory allocations. Each \s-1SV\s0 allocation has a
distinct serial number that will be written on creation and destruction
of the \s-1SV\s0. So if you're executing the leaking code in a loop, you need
to look for SVs that are created, but never destroyed between each
cycle. If such an \s-1SV\s0 is found, set a conditional breakpoint within
\&\f(CW\*(C`new_SV()\*(C'\fR and make it break only when \f(CW\*(C`PL_sv_serial\*(C'\fR is equal to the
serial number of the leaking \s-1SV\s0. Then you will catch the interpreter in
exactly the state where the leaking \s-1SV\s0 is allocated, which is
sufficient in many cases to find the source of the leak.
.PP
As \f(CW\*(C`\-Dm\*(C'\fR is using the PerlIO layer for output, it will by itself
allocate quite a bunch of SVs, which are hidden to avoid recursion. You
can bypass the PerlIO layer if you use the \s-1SV\s0 logging provided by
\&\f(CW\*(C`\-DPERL_MEM_LOG\*(C'\fR instead.
.SS "\s-1PERL_MEM_LOG\s0"
.IX Subsection "PERL_MEM_LOG"
If compiled with \f(CW\*(C`\-DPERL_MEM_LOG\*(C'\fR, both memory and \s-1SV\s0 allocations go
through logging functions, which is handy for breakpoint setting.
.PP
Unless \f(CW\*(C`\-DPERL_MEM_LOG_NOIMPL\*(C'\fR is also compiled, the logging functions
read \f(CW$ENV\fR{\s-1PERL_MEM_LOG\s0} to determine whether to log the event, and if
so how:
.PP
.Vb 4
\&    $ENV{PERL_MEM_LOG} =~ /m/           Log all memory ops
\&    $ENV{PERL_MEM_LOG} =~ /s/           Log all SV ops
\&    $ENV{PERL_MEM_LOG} =~ /t/           include timestamp in Log
\&    $ENV{PERL_MEM_LOG} =~ /^(\ed+)/      write to FD given (default is 2)
.Ve
.PP
Memory logging is somewhat similar to \f(CW\*(C`\-Dm\*(C'\fR but is independent of
\&\f(CW\*(C`\-DDEBUGGING\*(C'\fR, and at a higher level; all uses of \fINewx()\fR, \fIRenew()\fR, and
\&\fISafefree()\fR are logged with the caller's source code file and line
number (and C function name, if supported by the C compiler). In
contrast, \f(CW\*(C`\-Dm\*(C'\fR is directly at the point of \f(CW\*(C`malloc()\*(C'\fR. \s-1SV\s0 logging is
similar.
.PP
Since the logging doesn't use PerlIO, all \s-1SV\s0 allocations are logged and
no extra \s-1SV\s0 allocations are introduced by enabling the logging. If
compiled with \f(CW\*(C`\-DDEBUG_LEAKING_SCALARS\*(C'\fR, the serial number for each \s-1SV\s0
allocation is also logged.
.SS "\s-1DDD\s0 over gdb"
.IX Subsection "DDD over gdb"
Those debugging perl with the \s-1DDD\s0 frontend over gdb may find the
following useful:
.PP
You can extend the data conversion shortcuts menu, so for example you
can display an \s-1SV\s0's \s-1IV\s0 value with one click, without doing any typing.
To do that simply edit ~/.ddd/init file and add after:
.PP
.Vb 6
\&  ! Display shortcuts.
\&  Ddd*gdbDisplayShortcuts: \e
\&  /t ()   // Convert to Bin\en\e
\&  /d ()   // Convert to Dec\en\e
\&  /x ()   // Convert to Hex\en\e
\&  /o ()   // Convert to Oct(\en\e
.Ve
.PP
the following two lines:
.PP
.Vb 2
\&  ((XPV*) (())\->sv_any )\->xpv_pv  // 2pvx\en\e
\&  ((XPVIV*) (())\->sv_any )\->xiv_iv // 2ivx
.Ve
.PP
so now you can do ivx and pvx lookups or you can plug there the sv_peek
\&\*(L"conversion\*(R":
.PP
.Vb 1
\&  Perl_sv_peek(my_perl, (SV*)()) // sv_peek
.Ve
.PP
(The my_perl is for threaded builds.) Just remember that every line,
but the last one, should end with \en\e
.PP
Alternatively edit the init file interactively via: 3rd mouse button \->
New Display \-> Edit Menu
.PP
Note: you can define up to 20 conversion shortcuts in the gdb section.
.SS "Poison"
.IX Subsection "Poison"
If you see in a debugger a memory area mysteriously full of 0xABABABAB
or 0xEFEFEFEF, you may be seeing the effect of the \fIPoison()\fR macros, see
perlclib.
.SS "Read-only optrees"
.IX Subsection "Read-only optrees"
Under ithreads the optree is read only. If you want to enforce this, to
check for write accesses from buggy code, compile with
\&\f(CW\*(C`\-DPL_OP_SLAB_ALLOC\*(C'\fR to enable the \s-1OP\s0 slab allocator and
\&\f(CW\*(C`\-DPERL_DEBUG_READONLY_OPS\*(C'\fR to enable code that allocates op memory
via \f(CW\*(C`mmap\*(C'\fR, and sets it read-only at run time. Any write access to an
op results in a \f(CW\*(C`SIGBUS\*(C'\fR and abort.
.PP
This code is intended for development only, and may not be portable
even to all Unix variants. Also, it is an 80% solution, in that it
isn't able to make all ops read only. Specifically it
.IP "\(bu" 4
1
.Sp
Only sets read-only on all slabs of ops at \f(CW\*(C`CHECK\*(C'\fR time, hence ops
allocated later via \f(CW\*(C`require\*(C'\fR or \f(CW\*(C`eval\*(C'\fR will be re-write
.IP "\(bu" 4
2
.Sp
Turns an entire slab of ops read-write if the refcount of any op in the
slab needs to be decreased.
.IP "\(bu" 4
3
.Sp
Turns an entire slab of ops read-write if any op from the slab is
freed.
.PP
It's not possible to turn the slabs to read-only after an action
requiring read-write access, as either can happen during op tree
building time, so there may still be legitimate write access.
.PP
However, as an 80% solution it is still effective, as currently it
catches a write access during the generation of \fIConfig.pm\fR, which
means that we can't yet build \fIperl\fR with this enabled.
.SS "The .i Targets"
.IX Subsection "The .i Targets"
You can expand the macros in a \fIfoo.c\fR file by saying
.PP
.Vb 1
\&    make foo.i
.Ve
.PP
which will expand the macros using cpp.  Don't be scared by the results.
.SH "AUTHOR"
.IX Header "AUTHOR"
This document was originally written by Nathan Torkington, and is
maintained by the perl5\-porters mailing list.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perlhacktips5.18.1                           0100644 0001750 0001750 00000160606 12566207441 023755  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLHACKTIPS 1"
.TH PERLHACKTIPS 1 "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlhacktips \- Tips for Perl core C code hacking
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document will help you learn the best way to go about hacking on
the Perl core C code. It covers common problems, debugging, profiling,
and more.
.PP
If you haven't read perlhack and perlhacktut yet, you might want
to do that first.
.SH "COMMON PROBLEMS"
.IX Header "COMMON PROBLEMS"
Perl source plays by \s-1ANSI C89\s0 rules: no C99 (or \*(C+) extensions. In
some cases we have to take pre-ANSI requirements into consideration.
You don't care about some particular platform having broken Perl? I
hear there is still a strong demand for J2EE programmers.
.SS "Perl environment problems"
.IX Subsection "Perl environment problems"
.IP "\(bu" 4
Not compiling with threading
.Sp
Compiling with threading (\-Duseithreads) completely rewrites the
function prototypes of Perl. You better try your changes with that.
Related to this is the difference between \*(L"Perl_\-less\*(R" and \*(L"Perl_\-ly\*(R"
APIs, for example:
.Sp
.Vb 2
\&  Perl_sv_setiv(aTHX_ ...);
\&  sv_setiv(...);
.Ve
.Sp
The first one explicitly passes in the context, which is needed for
e.g. threaded builds. The second one does that implicitly; do not get
them mixed. If you are not passing in a aTHX_, you will need to do a
dTHX (or a dVAR) as the first thing in the function.
.Sp
See \*(L"How multiple interpreters and concurrency are
supported\*(R" in perlguts for further discussion about context.
.IP "\(bu" 4
Not compiling with \-DDEBUGGING
.Sp
The \s-1DEBUGGING\s0 define exposes more code to the compiler, therefore more
ways for things to go wrong. You should try it.
.IP "\(bu" 4
Introducing (non-read-only) globals
.Sp
Do not introduce any modifiable globals, truly global or file static.
They are bad form and complicate multithreading and other forms of
concurrency. The right way is to introduce them as new interpreter
variables, see \fIintrpvar.h\fR (at the very end for binary
compatibility).
.Sp
Introducing read-only (const) globals is okay, as long as you verify
with e.g. \f(CW\*(C`nm libperl.a|egrep \-v \*(Aq [TURtr] \*(Aq\*(C'\fR (if your \f(CW\*(C`nm\*(C'\fR has
BSD-style output) that the data you added really is read-only. (If it
is, it shouldn't show up in the output of that command.)
.Sp
If you want to have static strings, make them constant:
.Sp
.Vb 1
\&  static const char etc[] = "...";
.Ve
.Sp
If you want to have arrays of constant strings, note carefully the
right combination of \f(CW\*(C`const\*(C'\fRs:
.Sp
.Vb 2
\&    static const char * const yippee[] =
\&        {"hi", "ho", "silver"};
.Ve
.Sp
There is a way to completely hide any modifiable globals (they are all
moved to heap), the compilation setting
\&\f(CW\*(C`\-DPERL_GLOBAL_STRUCT_PRIVATE\*(C'\fR. It is not normally used, but can be
used for testing, read more about it in \*(L"Background and
\&\s-1PERL_IMPLICIT_CONTEXT\*(R"\s0 in perlguts.
.IP "\(bu" 4
Not exporting your new function
.Sp
Some platforms (Win32, \s-1AIX, VMS, OS/2,\s0 to name a few) require any
function that is part of the public \s-1API \s0(the shared Perl library) to be
explicitly marked as exported. See the discussion about \fIembed.pl\fR in
perlguts.
.IP "\(bu" 4
Exporting your new function
.Sp
The new shiny result of either genuine new functionality or your
arduous refactoring is now ready and correctly exported. So what could
possibly go wrong?
.Sp
Maybe simply that your function did not need to be exported in the
first place. Perl has a long and not so glorious history of exporting
functions that it should not have.
.Sp
If the function is used only inside one source code file, make it
static. See the discussion about \fIembed.pl\fR in perlguts.
.Sp
If the function is used across several files, but intended only for
Perl's internal use (and this should be the common case), do not export
it to the public \s-1API.\s0 See the discussion about \fIembed.pl\fR in
perlguts.
.SS "Portability problems"
.IX Subsection "Portability problems"
The following are common causes of compilation and/or execution
failures, not common to Perl as such. The C \s-1FAQ\s0 is good bedtime
reading. Please test your changes with as many C compilers and
platforms as possible; we will, anyway, and it's nice to save oneself
from public embarrassment.
.PP
If using gcc, you can add the \f(CW\*(C`\-std=c89\*(C'\fR option which will hopefully
catch most of these unportabilities. (However it might also catch
incompatibilities in your system's header files.)
.PP
Use the Configure \f(CW\*(C`\-Dgccansipedantic\*(C'\fR flag to enable the gcc \f(CW\*(C`\-ansi
\&\-pedantic\*(C'\fR flags which enforce stricter \s-1ANSI\s0 rules.
.PP
If using the \f(CW\*(C`gcc \-Wall\*(C'\fR note that not all the possible warnings (like
\&\f(CW\*(C`\-Wunitialized\*(C'\fR) are given unless you also compile with \f(CW\*(C`\-O\*(C'\fR.
.PP
Note that if using gcc, starting from Perl 5.9.5 the Perl core source
code files (the ones at the top level of the source code distribution,
but not e.g. the extensions under ext/) are automatically compiled with
as many as possible of the \f(CW\*(C`\-std=c89\*(C'\fR, \f(CW\*(C`\-ansi\*(C'\fR, \f(CW\*(C`\-pedantic\*(C'\fR, and a
selection of \f(CW\*(C`\-W\*(C'\fR flags (see cflags.SH).
.PP
Also study perlport carefully to avoid any bad assumptions about the
operating system, filesystems, and so forth.
.PP
You may once in a while try a \*(L"make microperl\*(R" to see whether we can
still compile Perl with just the bare minimum of interfaces. (See
\&\s-1README\s0.micro.)
.PP
Do not assume an operating system indicates a certain compiler.
.IP "\(bu" 4
Casting pointers to integers or casting integers to pointers
.Sp
.Vb 3
\&    void castaway(U8* p)
\&    {
\&      IV i = p;
.Ve
.Sp
or
.Sp
.Vb 3
\&    void castaway(U8* p)
\&    {
\&      IV i = (IV)p;
.Ve
.Sp
Both are bad, and broken, and unportable. Use the \s-1\fIPTR2IV\s0()\fR macro that
does it right. (Likewise, there are \s-1\fIPTR2UV\s0()\fR, \s-1\fIPTR2NV\s0()\fR, \s-1\fIINT2PTR\s0()\fR, and
\&\s-1\fINUM2PTR\s0()\fR.)
.IP "\(bu" 4
Casting between data function pointers and data pointers
.Sp
Technically speaking casting between function pointers and data
pointers is unportable and undefined, but practically speaking it seems
to work, but you should use the \s-1\fIFPTR2DPTR\s0()\fR and \s-1\fIDPTR2FPTR\s0()\fR macros.
Sometimes you can also play games with unions.
.IP "\(bu" 4
Assuming sizeof(int) == sizeof(long)
.Sp
There are platforms where longs are 64 bits, and platforms where ints
are 64 bits, and while we are out to shock you, even platforms where
shorts are 64 bits. This is all legal according to the C standard. (In
other words, \*(L"long long\*(R" is not a portable way to specify 64 bits, and
\&\*(L"long long\*(R" is not even guaranteed to be any wider than \*(L"long\*(R".)
.Sp
Instead, use the definitions \s-1IV, UV, IVSIZE, I32SIZE,\s0 and so forth.
Avoid things like I32 because they are \fBnot\fR guaranteed to be
\&\fIexactly\fR 32 bits, they are \fIat least\fR 32 bits, nor are they
guaranteed to be \fBint\fR or \fBlong\fR. If you really explicitly need
64\-bit variables, use I64 and U64, but only if guarded by \s-1HAS_QUAD.\s0
.IP "\(bu" 4
Assuming one can dereference any type of pointer for any type of data
.Sp
.Vb 2
\&  char *p = ...;
\&  long pony = *p;    /* BAD */
.Ve
.Sp
Many platforms, quite rightly so, will give you a core dump instead of
a pony if the p happens not to be correctly aligned.
.IP "\(bu" 4
Lvalue casts
.Sp
.Vb 1
\&  (int)*p = ...;    /* BAD */
.Ve
.Sp
Simply not portable. Get your lvalue to be of the right type, or maybe
use temporary variables, or dirty tricks with unions.
.IP "\(bu" 4
Assume \fBanything\fR about structs (especially the ones you don't
control, like the ones coming from the system headers)
.RS 4
.IP "\(bu" 8
That a certain field exists in a struct
.IP "\(bu" 8
That no other fields exist besides the ones you know of
.IP "\(bu" 8
That a field is of certain signedness, sizeof, or type
.IP "\(bu" 8
That the fields are in a certain order
.RS 8
.IP "\(bu" 8
While C guarantees the ordering specified in the struct definition,
between different platforms the definitions might differ
.RE
.RS 8
.RE
.IP "\(bu" 8
That the sizeof(struct) or the alignments are the same everywhere
.RS 8
.IP "\(bu" 8
There might be padding bytes between the fields to align the fields \-
the bytes can be anything
.IP "\(bu" 8
Structs are required to be aligned to the maximum alignment required by
the fields \- which for native types is for usually equivalent to
\&\fIsizeof()\fR of the field
.RE
.RS 8
.RE
.RE
.RS 4
.RE
.IP "\(bu" 4
Assuming the character set is ASCIIish
.Sp
Perl can compile and run under \s-1EBCDIC\s0 platforms. See perlebcdic.
This is transparent for the most part, but because the character sets
differ, you shouldn't use numeric (decimal, octal, nor hex) constants
to refer to characters. You can safely say 'A', but not 0x41. You can
safely say '\en', but not \e012. If a character doesn't have a trivial
input form, you should add it to the list in
\&\fIregen/unicode_constants.pl\fR, and have Perl create #defines for you,
based on the current platform.
.Sp
Also, the range 'A' \- 'Z' in \s-1ASCII\s0 is an unbroken sequence of 26 upper
case alphabetic characters. That is not true in \s-1EBCDIC.\s0 Nor for 'a' to
\&'z'. But '0' \- '9' is an unbroken range in both systems. Don't assume
anything about other ranges.
.Sp
Many of the comments in the existing code ignore the possibility of
\&\s-1EBCDIC,\s0 and may be wrong therefore, even if the code works. This is
actually a tribute to the successful transparent insertion of being
able to handle \s-1EBCDIC\s0 without having to change pre-existing code.
.Sp
\&\s-1UTF\-8\s0 and UTF-EBCDIC are two different encodings used to represent
Unicode code points as sequences of bytes. Macros  with the same names
(but different definitions) in \f(CW\*(C`utf8.h\*(C'\fR and \f(CW\*(C`utfebcdic.h\*(C'\fR are used to
allow the calling code to think that there is only one such encoding.
This is almost always referred to as \f(CW\*(C`utf8\*(C'\fR, but it means the \s-1EBCDIC\s0
version as well. Again, comments in the code may well be wrong even if
the code itself is right. For example, the concept of \f(CW\*(C`invariant
characters\*(C'\fR differs between \s-1ASCII\s0 and \s-1EBCDIC.\s0 On \s-1ASCII\s0 platforms, only
characters that do not have the high-order bit set (i.e. whose ordinals
are strict \s-1ASCII, 0 \- 127\s0) are invariant, and the documentation and
comments in the code may assume that, often referring to something
like, say, \f(CW\*(C`hibit\*(C'\fR. The situation differs and is not so simple on
\&\s-1EBCDIC\s0 machines, but as long as the code itself uses the
\&\f(CW\*(C`NATIVE_IS_INVARIANT()\*(C'\fR macro appropriately, it works, even if the
comments are wrong.
.IP "\(bu" 4
Assuming the character set is just \s-1ASCII\s0
.Sp
\&\s-1ASCII\s0 is a 7 bit encoding, but bytes have 8 bits in them. The 128 extra
characters have different meanings depending on the locale.  Absent a
locale, currently these extra characters are generally considered to be
unassigned, and this has presented some problems. This is being changed
starting in 5.12 so that these characters will be considered to be
Latin\-1 (\s-1ISO\-8859\-1\s0).
.IP "\(bu" 4
Mixing #define and #ifdef
.Sp
.Vb 6
\&  #define BURGLE(x) ... \e
\&  #ifdef BURGLE_OLD_STYLE        /* BAD */
\&  ... do it the old way ... \e
\&  #else
\&  ... do it the new way ... \e
\&  #endif
.Ve
.Sp
You cannot portably \*(L"stack\*(R" cpp directives. For example in the above
you need two separate \s-1\fIBURGLE\s0()\fR #defines, one for each #ifdef branch.
.IP "\(bu" 4
Adding non-comment stuff after #endif or #else
.Sp
.Vb 5
\&  #ifdef SNOSH
\&  ...
\&  #else !SNOSH    /* BAD */
\&  ...
\&  #endif SNOSH    /* BAD */
.Ve
.Sp
The #endif and #else cannot portably have anything non-comment after
them. If you want to document what is going (which is a good idea
especially if the branches are long), use (C) comments:
.Sp
.Vb 5
\&  #ifdef SNOSH
\&  ...
\&  #else /* !SNOSH */
\&  ...
\&  #endif /* SNOSH */
.Ve
.Sp
The gcc option \f(CW\*(C`\-Wendif\-labels\*(C'\fR warns about the bad variant (by
default on starting from Perl 5.9.4).
.IP "\(bu" 4
Having a comma after the last element of an enum list
.Sp
.Vb 5
\&  enum color {
\&    CERULEAN,
\&    CHARTREUSE,
\&    CINNABAR,     /* BAD */
\&  };
.Ve
.Sp
is not portable. Leave out the last comma.
.Sp
Also note that whether enums are implicitly morphable to ints varies
between compilers, you might need to (int).
.IP "\(bu" 4
Using //\-comments
.Sp
.Vb 1
\&  // This function bamfoodles the zorklator.   /* BAD */
.Ve
.Sp
That is C99 or \*(C+. Perl is C89. Using the //\-comments is silently
allowed by many C compilers but cranking up the \s-1ANSI C89\s0 strictness
(which we like to do) causes the compilation to fail.
.IP "\(bu" 4
Mixing declarations and code
.Sp
.Vb 5
\&  void zorklator()
\&  {
\&    int n = 3;
\&    set_zorkmids(n);    /* BAD */
\&    int q = 4;
.Ve
.Sp
That is C99 or \*(C+. Some C compilers allow that, but you shouldn't.
.Sp
The gcc option \f(CW\*(C`\-Wdeclaration\-after\-statements\*(C'\fR scans for such
problems (by default on starting from Perl 5.9.4).
.IP "\(bu" 4
Introducing variables inside \fIfor()\fR
.Sp
.Vb 1
\&  for(int i = ...; ...; ...) {    /* BAD */
.Ve
.Sp
That is C99 or \*(C+. While it would indeed be awfully nice to have that
also in C89, to limit the scope of the loop variable, alas, we cannot.
.IP "\(bu" 4
Mixing signed char pointers with unsigned char pointers
.Sp
.Vb 4
\&  int foo(char *s) { ... }
\&  ...
\&  unsigned char *t = ...; /* Or U8* t = ... */
\&  foo(t);   /* BAD */
.Ve
.Sp
While this is legal practice, it is certainly dubious, and downright
fatal in at least one platform: for example \s-1VMS\s0 cc considers this a
fatal error. One cause for people often making this mistake is that a
\&\*(L"naked char\*(R" and therefore dereferencing a \*(L"naked char pointer\*(R" have an
undefined signedness: it depends on the compiler and the flags of the
compiler and the underlying platform whether the result is signed or
unsigned. For this very same reason using a 'char' as an array index is
bad.
.IP "\(bu" 4
Macros that have string constants and their arguments as substrings of
the string constants
.Sp
.Vb 2
\&  #define FOO(n) printf("number = %d\en", n)    /* BAD */
\&  FOO(10);
.Ve
.Sp
Pre-ANSI semantics for that was equivalent to
.Sp
.Vb 1
\&  printf("10umber = %d\e10");
.Ve
.Sp
which is probably not what you were expecting. Unfortunately at least
one reasonably common and modern C compiler does \*(L"real backward
compatibility\*(R" here, in \s-1AIX\s0 that is what still happens even though the
rest of the \s-1AIX\s0 compiler is very happily C89.
.IP "\(bu" 4
Using printf formats for non-basic C types
.Sp
.Vb 2
\&   IV i = ...;
\&   printf("i = %d\en", i);    /* BAD */
.Ve
.Sp
While this might by accident work in some platform (where \s-1IV\s0 happens to
be an \f(CW\*(C`int\*(C'\fR), in general it cannot. \s-1IV\s0 might be something larger. Even
worse the situation is with more specific types (defined by Perl's
configuration step in \fIconfig.h\fR):
.Sp
.Vb 2
\&   Uid_t who = ...;
\&   printf("who = %d\en", who);    /* BAD */
.Ve
.Sp
The problem here is that Uid_t might be not only not \f(CW\*(C`int\*(C'\fR\-wide but it
might also be unsigned, in which case large uids would be printed as
negative values.
.Sp
There is no simple solution to this because of \fIprintf()\fR's limited
intelligence, but for many types the right format is available as with
either 'f' or '_f' suffix, for example:
.Sp
.Vb 2
\&   IVdf /* IV in decimal */
\&   UVxf /* UV is hexadecimal */
\&
\&   printf("i = %"IVdf"\en", i); /* The IVdf is a string constant. */
\&
\&   Uid_t_f /* Uid_t in decimal */
\&
\&   printf("who = %"Uid_t_f"\en", who);
.Ve
.Sp
Or you can try casting to a \*(L"wide enough\*(R" type:
.Sp
.Vb 1
\&   printf("i = %"IVdf"\en", (IV)something_very_small_and_signed);
.Ve
.Sp
Also remember that the \f(CW%p\fR format really does require a void pointer:
.Sp
.Vb 2
\&   U8* p = ...;
\&   printf("p = %p\en", (void*)p);
.Ve
.Sp
The gcc option \f(CW\*(C`\-Wformat\*(C'\fR scans for such problems.
.IP "\(bu" 4
Blindly using variadic macros
.Sp
gcc has had them for a while with its own syntax, and C99 brought them
with a standardized syntax. Don't use the former, and use the latter
only if the \s-1HAS_C99_VARIADIC_MACROS\s0 is defined.
.IP "\(bu" 4
Blindly passing va_list
.Sp
Not all platforms support passing va_list to further varargs (stdarg)
functions. The right thing to do is to copy the va_list using the
\&\fIPerl_va_copy()\fR if the \s-1NEED_VA_COPY\s0 is defined.
.IP "\(bu" 4
Using gcc statement expressions
.Sp
.Vb 1
\&   val = ({...;...;...});    /* BAD */
.Ve
.Sp
While a nice extension, it's not portable. The Perl code does
admittedly use them if available to gain some extra speed (essentially
as a funky form of inlining), but you shouldn't.
.IP "\(bu" 4
Binding together several statements in a macro
.Sp
Use the macros \s-1STMT_START\s0 and \s-1STMT_END.\s0
.Sp
.Vb 3
\&   STMT_START {
\&      ...
\&   } STMT_END
.Ve
.IP "\(bu" 4
Testing for operating systems or versions when should be testing for
features
.Sp
.Vb 3
\&  #ifdef _\|_FOONIX_\|_    /* BAD */
\&  foo = quux();
\&  #endif
.Ve
.Sp
Unless you know with 100% certainty that \fIquux()\fR is only ever available
for the \*(L"Foonix\*(R" operating system \fBand\fR that is available \fBand\fR
correctly working for \fBall\fR past, present, \fBand\fR future versions of
\&\*(L"Foonix\*(R", the above is very wrong. This is more correct (though still
not perfect, because the below is a compile-time check):
.Sp
.Vb 3
\&  #ifdef HAS_QUUX
\&  foo = quux();
\&  #endif
.Ve
.Sp
How does the \s-1HAS_QUUX\s0 become defined where it needs to be?  Well, if
Foonix happens to be Unixy enough to be able to run the Configure
script, and Configure has been taught about detecting and testing
\&\fIquux()\fR, the \s-1HAS_QUUX\s0 will be correctly defined. In other platforms, the
corresponding configuration step will hopefully do the same.
.Sp
In a pinch, if you cannot wait for Configure to be educated, or if you
have a good hunch of where \fIquux()\fR might be available, you can
temporarily try the following:
.Sp
.Vb 3
\&  #if (defined(_\|_FOONIX_\|_) || defined(_\|_BARNIX_\|_))
\&  # define HAS_QUUX
\&  #endif
\&
\&  ...
\&
\&  #ifdef HAS_QUUX
\&  foo = quux();
\&  #endif
.Ve
.Sp
But in any case, try to keep the features and operating systems
separate.
.SS "Problematic System Interfaces"
.IX Subsection "Problematic System Interfaces"
.IP "\(bu" 4
\&\fImalloc\fR\|(0), \fIrealloc\fR\|(0), calloc(0, 0) are non-portable. To be portable
allocate at least one byte. (In general you should rarely need to work
at this low level, but instead use the various malloc wrappers.)
.IP "\(bu" 4
\&\fIsnprintf()\fR \- the return type is unportable. Use \fImy_snprintf()\fR instead.
.SS "Security problems"
.IX Subsection "Security problems"
Last but not least, here are various tips for safer coding.
.IP "\(bu" 4
Do not use \fIgets()\fR
.Sp
Or we will publicly ridicule you. Seriously.
.IP "\(bu" 4
Do not use \fIstrcpy()\fR or \fIstrcat()\fR or \fIstrncpy()\fR or \fIstrncat()\fR
.Sp
Use \fImy_strlcpy()\fR and \fImy_strlcat()\fR instead: they either use the native
implementation, or Perl's own implementation (borrowed from the public
domain implementation of \s-1INN\s0).
.IP "\(bu" 4
Do not use \fIsprintf()\fR or \fIvsprintf()\fR
.Sp
If you really want just plain byte strings, use \fImy_snprintf()\fR and
\&\fImy_vsnprintf()\fR instead, which will try to use \fIsnprintf()\fR and
\&\fIvsnprintf()\fR if those safer APIs are available. If you want something
fancier than a plain byte string, use SVs and \fIPerl_sv_catpvf()\fR.
.SH "DEBUGGING"
.IX Header "DEBUGGING"
You can compile a special debugging version of Perl, which allows you
to use the \f(CW\*(C`\-D\*(C'\fR option of Perl to tell more about what Perl is doing.
But sometimes there is no alternative than to dive in with a debugger,
either to see the stack trace of a core dump (very useful in a bug
report), or trying to figure out what went wrong before the core dump
happened, or how did we end up having wrong or unexpected results.
.SS "Poking at Perl"
.IX Subsection "Poking at Perl"
To really poke around with Perl, you'll probably want to build Perl for
debugging, like this:
.PP
.Vb 2
\&    ./Configure \-d \-D optimize=\-g
\&    make
.Ve
.PP
\&\f(CW\*(C`\-g\*(C'\fR is a flag to the C compiler to have it produce debugging
information which will allow us to step through a running program, and
to see in which C function we are at (without the debugging information
we might see only the numerical addresses of the functions, which is
not very helpful).
.PP
\&\fIConfigure\fR will also turn on the \f(CW\*(C`DEBUGGING\*(C'\fR compilation symbol
which enables all the internal debugging code in Perl. There are a
whole bunch of things you can debug with this: perlrun lists them
all, and the best way to find out about them is to play about with
them. The most useful options are probably
.PP
.Vb 4
\&    l  Context (loop) stack processing
\&    t  Trace execution
\&    o  Method and overloading resolution
\&    c  String/numeric conversions
.Ve
.PP
Some of the functionality of the debugging code can be achieved using
\&\s-1XS\s0 modules.
.PP
.Vb 2
\&    \-Dr => use re \*(Aqdebug\*(Aq
\&    \-Dx => use O \*(AqDebug\*(Aq
.Ve
.SS "Using a source-level debugger"
.IX Subsection "Using a source-level debugger"
If the debugging output of \f(CW\*(C`\-D\*(C'\fR doesn't help you, it's time to step
through perl's execution with a source-level debugger.
.IP "\(bu" 3
We'll use \f(CW\*(C`gdb\*(C'\fR for our examples here; the principles will apply to
any debugger (many vendors call their debugger \f(CW\*(C`dbx\*(C'\fR), but check the
manual of the one you're using.
.PP
To fire up the debugger, type
.PP
.Vb 1
\&    gdb ./perl
.Ve
.PP
Or if you have a core dump:
.PP
.Vb 1
\&    gdb ./perl core
.Ve
.PP
You'll want to do that in your Perl source tree so the debugger can
read the source code. You should see the copyright message, followed by
the prompt.
.PP
.Vb 1
\&    (gdb)
.Ve
.PP
\&\f(CW\*(C`help\*(C'\fR will get you into the documentation, but here are the most
useful commands:
.IP "\(bu" 3
run [args]
.Sp
Run the program with the given arguments.
.IP "\(bu" 3
break function_name
.IP "\(bu" 3
break source.c:xxx
.Sp
Tells the debugger that we'll want to pause execution when we reach
either the named function (but see \*(L"Internal Functions\*(R" in perlguts!) or
the given line in the named source file.
.IP "\(bu" 3
step
.Sp
Steps through the program a line at a time.
.IP "\(bu" 3
next
.Sp
Steps through the program a line at a time, without descending into
functions.
.IP "\(bu" 3
continue
.Sp
Run until the next breakpoint.
.IP "\(bu" 3
finish
.Sp
Run until the end of the current function, then stop again.
.IP "\(bu" 3
\&'enter'
.Sp
Just pressing Enter will do the most recent operation again \- it's a
blessing when stepping through miles of source code.
.IP "\(bu" 3
print
.Sp
Execute the given C code and print its results. \fB\s-1WARNING\s0\fR: Perl makes
heavy use of macros, and \fIgdb\fR does not necessarily support macros
(see later \*(L"gdb macro support\*(R"). You'll have to substitute them
yourself, or to invoke cpp on the source code files (see \*(L"The .i
Targets\*(R") So, for instance, you can't say
.Sp
.Vb 1
\&    print SvPV_nolen(sv)
.Ve
.Sp
but you have to say
.Sp
.Vb 1
\&    print Perl_sv_2pv_nolen(sv)
.Ve
.PP
You may find it helpful to have a \*(L"macro dictionary\*(R", which you can
produce by saying \f(CW\*(C`cpp \-dM perl.c | sort\*(C'\fR. Even then, \fIcpp\fR won't
recursively apply those macros for you.
.SS "gdb macro support"
.IX Subsection "gdb macro support"
Recent versions of \fIgdb\fR have fairly good macro support, but in order
to use it you'll need to compile perl with macro definitions included
in the debugging information. Using \fIgcc\fR version 3.1, this means
configuring with \f(CW\*(C`\-Doptimize=\-g3\*(C'\fR. Other compilers might use a
different switch (if they support debugging macros at all).
.SS "Dumping Perl Data Structures"
.IX Subsection "Dumping Perl Data Structures"
One way to get around this macro hell is to use the dumping functions
in \fIdump.c\fR; these work a little like an internal
Devel::Peek, but they also cover OPs and other
structures that you can't get at from Perl. Let's take an example.
We'll use the \f(CW\*(C`$a = $b + $c\*(C'\fR we used before, but give it a bit of
context: \f(CW\*(C`$b = "6XXXX"; $c = 2.3;\*(C'\fR. Where's a good place to stop and
poke around?
.PP
What about \f(CW\*(C`pp_add\*(C'\fR, the function we examined earlier to implement the
\&\f(CW\*(C`+\*(C'\fR operator:
.PP
.Vb 2
\&    (gdb) break Perl_pp_add
\&    Breakpoint 1 at 0x46249f: file pp_hot.c, line 309.
.Ve
.PP
Notice we use \f(CW\*(C`Perl_pp_add\*(C'\fR and not \f(CW\*(C`pp_add\*(C'\fR \- see
\&\*(L"Internal Functions\*(R" in perlguts. With the breakpoint in place, we can
run our program:
.PP
.Vb 1
\&    (gdb) run \-e \*(Aq$b = "6XXXX"; $c = 2.3; $a = $b + $c\*(Aq
.Ve
.PP
Lots of junk will go past as gdb reads in the relevant source files and
libraries, and then:
.PP
.Vb 5
\&    Breakpoint 1, Perl_pp_add () at pp_hot.c:309
\&    309         dSP; dATARGET; tryAMAGICbin(add,opASSIGN);
\&    (gdb) step
\&    311           dPOPTOPnnrl_ul;
\&    (gdb)
.Ve
.PP
We looked at this bit of code before, and we said that
\&\f(CW\*(C`dPOPTOPnnrl_ul\*(C'\fR arranges for two \f(CW\*(C`NV\*(C'\fRs to be placed into \f(CW\*(C`left\*(C'\fR and
\&\f(CW\*(C`right\*(C'\fR \- let's slightly expand it:
.PP
.Vb 3
\& #define dPOPTOPnnrl_ul  NV right = POPn; \e
\&                         SV *leftsv = TOPs; \e
\&                         NV left = USE_LEFT(leftsv) ? SvNV(leftsv) : 0.0
.Ve
.PP
\&\f(CW\*(C`POPn\*(C'\fR takes the \s-1SV\s0 from the top of the stack and obtains its \s-1NV\s0
either directly (if \f(CW\*(C`SvNOK\*(C'\fR is set) or by calling the \f(CW\*(C`sv_2nv\*(C'\fR
function. \f(CW\*(C`TOPs\*(C'\fR takes the next \s-1SV\s0 from the top of the stack \- yes,
\&\f(CW\*(C`POPn\*(C'\fR uses \f(CW\*(C`TOPs\*(C'\fR \- but doesn't remove it. We then use \f(CW\*(C`SvNV\*(C'\fR to
get the \s-1NV\s0 from \f(CW\*(C`leftsv\*(C'\fR in the same way as before \- yes, \f(CW\*(C`POPn\*(C'\fR uses
\&\f(CW\*(C`SvNV\*(C'\fR.
.PP
Since we don't have an \s-1NV\s0 for \f(CW$b\fR, we'll have to use \f(CW\*(C`sv_2nv\*(C'\fR to
convert it. If we step again, we'll find ourselves there:
.PP
.Vb 3
\&    Perl_sv_2nv (sv=0xa0675d0) at sv.c:1669
\&    1669        if (!sv)
\&    (gdb)
.Ve
.PP
We can now use \f(CW\*(C`Perl_sv_dump\*(C'\fR to investigate the \s-1SV:\s0
.PP
.Vb 7
\&    SV = PV(0xa057cc0) at 0xa0675d0
\&    REFCNT = 1
\&    FLAGS = (POK,pPOK)
\&    PV = 0xa06a510 "6XXXX"\e0
\&    CUR = 5
\&    LEN = 6
\&    $1 = void
.Ve
.PP
We know we're going to get \f(CW6\fR from this, so let's finish the
subroutine:
.PP
.Vb 4
\&    (gdb) finish
\&    Run till exit from #0  Perl_sv_2nv (sv=0xa0675d0) at sv.c:1671
\&    0x462669 in Perl_pp_add () at pp_hot.c:311
\&    311           dPOPTOPnnrl_ul;
.Ve
.PP
We can also dump out this op: the current op is always stored in
\&\f(CW\*(C`PL_op\*(C'\fR, and we can dump it with \f(CW\*(C`Perl_op_dump\*(C'\fR. This'll give us
similar output to B::Debug.
.PP
.Vb 10
\&    {
\&    13  TYPE = add  ===> 14
\&        TARG = 1
\&        FLAGS = (SCALAR,KIDS)
\&        {
\&            TYPE = null  ===> (12)
\&              (was rv2sv)
\&            FLAGS = (SCALAR,KIDS)
\&            {
\&    11          TYPE = gvsv  ===> 12
\&                FLAGS = (SCALAR)
\&                GV = main::b
\&            }
\&        }
.Ve
.PP
# finish this later #
.SH "SOURCE CODE STATIC ANALYSIS"
.IX Header "SOURCE CODE STATIC ANALYSIS"
Various tools exist for analysing C source code \fBstatically\fR, as
opposed to \fBdynamically\fR, that is, without executing the code. It is
possible to detect resource leaks, undefined behaviour, type
mismatches, portability problems, code paths that would cause illegal
memory accesses, and other similar problems by just parsing the C code
and looking at the resulting graph, what does it tell about the
execution and data flows. As a matter of fact, this is exactly how C
compilers know to give warnings about dubious code.
.SS "lint, splint"
.IX Subsection "lint, splint"
The good old C code quality inspector, \f(CW\*(C`lint\*(C'\fR, is available in several
platforms, but please be aware that there are several different
implementations of it by different vendors, which means that the flags
are not identical across different platforms.
.PP
There is a lint variant called \f(CW\*(C`splint\*(C'\fR (Secure Programming Lint)
available from http://www.splint.org/ that should compile on any
Unix-like platform.
.PP
There are \f(CW\*(C`lint\*(C'\fR and <splint> targets in Makefile, but you may have to
diddle with the flags (see above).
.SS "Coverity"
.IX Subsection "Coverity"
Coverity (http://www.coverity.com/) is a product similar to lint and as
a testbed for their product they periodically check several open source
projects, and they give out accounts to open source developers to the
defect databases.
.SS "cpd (cut-and-paste detector)"
.IX Subsection "cpd (cut-and-paste detector)"
The cpd tool detects cut-and-paste coding. If one instance of the
cut-and-pasted code changes, all the other spots should probably be
changed, too. Therefore such code should probably be turned into a
subroutine or a macro.
.PP
cpd (http://pmd.sourceforge.net/cpd.html) is part of the pmd project
(http://pmd.sourceforge.net/). pmd was originally written for static
analysis of Java code, but later the cpd part of it was extended to
parse also C and \*(C+.
.PP
Download the pmd\-bin\-X.Y.zip () from the SourceForge site, extract the
pmd\-X.Y.jar from it, and then run that on source code thusly:
.PP
.Vb 2
\&  java \-cp pmd\-X.Y.jar net.sourceforge.pmd.cpd.CPD \e
\&   \-\-minimum\-tokens 100 \-\-files /some/where/src \-\-language c > cpd.txt
.Ve
.PP
You may run into memory limits, in which case you should use the \-Xmx
option:
.PP
.Vb 1
\&  java \-Xmx512M ...
.Ve
.SS "gcc warnings"
.IX Subsection "gcc warnings"
Though much can be written about the inconsistency and coverage
problems of gcc warnings (like \f(CW\*(C`\-Wall\*(C'\fR not meaning \*(L"all the warnings\*(R",
or some common portability problems not being covered by \f(CW\*(C`\-Wall\*(C'\fR, or
\&\f(CW\*(C`\-ansi\*(C'\fR and \f(CW\*(C`\-pedantic\*(C'\fR both being a poorly defined collection of
warnings, and so forth), gcc is still a useful tool in keeping our
coding nose clean.
.PP
The \f(CW\*(C`\-Wall\*(C'\fR is by default on.
.PP
The \f(CW\*(C`\-ansi\*(C'\fR (and its sidekick, \f(CW\*(C`\-pedantic\*(C'\fR) would be nice to be on
always, but unfortunately they are not safe on all platforms, they can
for example cause fatal conflicts with the system headers (Solaris
being a prime example). If Configure \f(CW\*(C`\-Dgccansipedantic\*(C'\fR is used, the
\&\f(CW\*(C`cflags\*(C'\fR frontend selects \f(CW\*(C`\-ansi \-pedantic\*(C'\fR for the platforms where
they are known to be safe.
.PP
Starting from Perl 5.9.4 the following extra flags are added:
.IP "\(bu" 4
\&\f(CW\*(C`\-Wendif\-labels\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`\-Wextra\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`\-Wdeclaration\-after\-statement\*(C'\fR
.PP
The following flags would be nice to have but they would first need
their own Augean stablemaster:
.IP "\(bu" 4
\&\f(CW\*(C`\-Wpointer\-arith\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`\-Wshadow\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`\-Wstrict\-prototypes\*(C'\fR
.PP
The \f(CW\*(C`\-Wtraditional\*(C'\fR is another example of the annoying tendency of gcc
to bundle a lot of warnings under one switch (it would be impossible to
deploy in practice because it would complain a lot) but it does contain
some warnings that would be beneficial to have available on their own,
such as the warning about string constants inside macros containing the
macro arguments: this behaved differently pre-ANSI than it does in
\&\s-1ANSI,\s0 and some C compilers are still in transition, \s-1AIX\s0 being an
example.
.SS "Warnings of other C compilers"
.IX Subsection "Warnings of other C compilers"
Other C compilers (yes, there \fBare\fR other C compilers than gcc) often
have their \*(L"strict \s-1ANSI\*(R"\s0 or \*(L"strict \s-1ANSI\s0 with some portability
extensions\*(R" modes on, like for example the Sun Workshop has its \f(CW\*(C`\-Xa\*(C'\fR
mode on (though implicitly), or the \s-1DEC \s0(these days, \s-1HP...\s0) has its
\&\f(CW\*(C`\-std1\*(C'\fR mode on.
.SH "MEMORY DEBUGGERS"
.IX Header "MEMORY DEBUGGERS"
\&\fB\s-1NOTE 1\s0\fR: Running under older memory debuggers such as Purify,
valgrind or Third Degree greatly slows down the execution: seconds
become minutes, minutes become hours. For example as of Perl 5.8.1, the
ext/Encode/t/Unicode.t takes extraordinarily long to complete under
e.g. Purify, Third Degree, and valgrind. Under valgrind it takes more
than six hours, even on a snappy computer. The said test must be doing
something that is quite unfriendly for memory debuggers. If you don't
feel like waiting, that you can simply kill away the perl process.
Roughly valgrind slows down execution by factor 10, AddressSanitizer by
factor 2.
.PP
\&\fB\s-1NOTE 2\s0\fR: To minimize the number of memory leak false alarms (see
\&\*(L"\s-1PERL_DESTRUCT_LEVEL\*(R"\s0 for more information), you have to set the
environment variable \s-1PERL_DESTRUCT_LEVEL\s0 to 2.
.PP
For csh-like shells:
.PP
.Vb 1
\&    setenv PERL_DESTRUCT_LEVEL 2
.Ve
.PP
For Bourne-type shells:
.PP
.Vb 2
\&    PERL_DESTRUCT_LEVEL=2
\&    export PERL_DESTRUCT_LEVEL
.Ve
.PP
In Unixy environments you can also use the \f(CW\*(C`env\*(C'\fR command:
.PP
.Vb 1
\&    env PERL_DESTRUCT_LEVEL=2 valgrind ./perl \-Ilib ...
.Ve
.PP
\&\fB\s-1NOTE 3\s0\fR: There are known memory leaks when there are compile-time
errors within eval or require, seeing \f(CW\*(C`S_doeval\*(C'\fR in the call stack is
a good sign of these. Fixing these leaks is non-trivial, unfortunately,
but they must be fixed eventually.
.PP
\&\fB\s-1NOTE 4\s0\fR: DynaLoader will not clean up after itself completely
unless Perl is built with the Configure option
\&\f(CW\*(C`\-Accflags=\-DDL_UNLOAD_ALL_AT_EXIT\*(C'\fR.
.SS "Rational Software's Purify"
.IX Subsection "Rational Software's Purify"
Purify is a commercial tool that is helpful in identifying memory
overruns, wild pointers, memory leaks and other such badness. Perl must
be compiled in a specific way for optimal testing with Purify.  Purify
is available under Windows \s-1NT,\s0 Solaris, HP-UX, \s-1SGI,\s0 and Siemens Unix.
.PP
\fIPurify on Unix\fR
.IX Subsection "Purify on Unix"
.PP
On Unix, Purify creates a new Perl binary. To get the most benefit out
of Purify, you should create the perl to Purify using:
.PP
.Vb 2
\&    sh Configure \-Accflags=\-DPURIFY \-Doptimize=\*(Aq\-g\*(Aq \e
\&     \-Uusemymalloc \-Dusemultiplicity
.Ve
.PP
where these arguments mean:
.IP "\(bu" 4
\&\-Accflags=\-DPURIFY
.Sp
Disables Perl's arena memory allocation functions, as well as forcing
use of memory allocation functions derived from the system malloc.
.IP "\(bu" 4
\&\-Doptimize='\-g'
.Sp
Adds debugging information so that you see the exact source statements
where the problem occurs. Without this flag, all you will see is the
source filename of where the error occurred.
.IP "\(bu" 4
\&\-Uusemymalloc
.Sp
Disable Perl's malloc so that Purify can more closely monitor
allocations and leaks. Using Perl's malloc will make Purify report most
leaks in the \*(L"potential\*(R" leaks category.
.IP "\(bu" 4
\&\-Dusemultiplicity
.Sp
Enabling the multiplicity option allows perl to clean up thoroughly
when the interpreter shuts down, which reduces the number of bogus leak
reports from Purify.
.PP
Once you've compiled a perl suitable for Purify'ing, then you can just:
.PP
.Vb 1
\&    make pureperl
.Ve
.PP
which creates a binary named 'pureperl' that has been Purify'ed. This
binary is used in place of the standard 'perl' binary when you want to
debug Perl memory problems.
.PP
As an example, to show any memory leaks produced during the standard
Perl testset you would create and run the Purify'ed perl as:
.PP
.Vb 3
\&    make pureperl
\&    cd t
\&    ../pureperl \-I../lib harness
.Ve
.PP
which would run Perl on test.pl and report any memory problems.
.PP
Purify outputs messages in \*(L"Viewer\*(R" windows by default. If you don't
have a windowing environment or if you simply want the Purify output to
unobtrusively go to a log file instead of to the interactive window,
use these following options to output to the log file \*(L"perl.log\*(R":
.PP
.Vb 2
\&    setenv PURIFYOPTIONS "\-chain\-length=25 \-windows=no \e
\&     \-log\-file=perl.log \-append\-logfile=yes"
.Ve
.PP
If you plan to use the \*(L"Viewer\*(R" windows, then you only need this
option:
.PP
.Vb 1
\&    setenv PURIFYOPTIONS "\-chain\-length=25"
.Ve
.PP
In Bourne-type shells:
.PP
.Vb 2
\&    PURIFYOPTIONS="..."
\&    export PURIFYOPTIONS
.Ve
.PP
or if you have the \*(L"env\*(R" utility:
.PP
.Vb 1
\&    env PURIFYOPTIONS="..." ../pureperl ...
.Ve
.PP
\fIPurify on \s-1NT\s0\fR
.IX Subsection "Purify on NT"
.PP
Purify on Windows \s-1NT\s0 instruments the Perl binary 'perl.exe' on the fly.
 There are several options in the makefile you should change to get the
most use out of Purify:
.IP "\(bu" 4
\&\s-1DEFINES\s0
.Sp
You should add \-DPURIFY to the \s-1DEFINES\s0 line so the \s-1DEFINES\s0 line looks
something like:
.Sp
.Vb 1
\&   DEFINES = \-DWIN32 \-D_CONSOLE \-DNO_STRICT $(CRYPT_FLAG) \-DPURIFY=1
.Ve
.Sp
to disable Perl's arena memory allocation functions, as well as to
force use of memory allocation functions derived from the system
malloc.
.IP "\(bu" 4
\&\s-1USE_MULTI\s0 = define
.Sp
Enabling the multiplicity option allows perl to clean up thoroughly
when the interpreter shuts down, which reduces the number of bogus leak
reports from Purify.
.IP "\(bu" 4
#PERL_MALLOC = define
.Sp
Disable Perl's malloc so that Purify can more closely monitor
allocations and leaks. Using Perl's malloc will make Purify report most
leaks in the \*(L"potential\*(R" leaks category.
.IP "\(bu" 4
\&\s-1CFG\s0 = Debug
.Sp
Adds debugging information so that you see the exact source statements
where the problem occurs. Without this flag, all you will see is the
source filename of where the error occurred.
.PP
As an example, to show any memory leaks produced during the standard
Perl testset you would create and run Purify as:
.PP
.Vb 4
\&    cd win32
\&    make
\&    cd ../t
\&    purify ../perl \-I../lib harness
.Ve
.PP
which would instrument Perl in memory, run Perl on test.pl, then
finally report any memory problems.
.SS "valgrind"
.IX Subsection "valgrind"
The valgrind tool can be used to find out both memory leaks and illegal
heap memory accesses. As of version 3.3.0, Valgrind only supports Linux
on x86, x86\-64 and PowerPC and Darwin (\s-1OS X\s0) on x86 and x86\-64). The
special \*(L"test.valgrind\*(R" target can be used to run the tests under
valgrind. Found errors and memory leaks are logged in files named
\&\fItestfile.valgrind\fR.
.PP
Valgrind also provides a cachegrind tool, invoked on perl as:
.PP
.Vb 1
\&    VG_OPTS=\-\-tool=cachegrind make test.valgrind
.Ve
.PP
As system libraries (most notably glibc) are also triggering errors,
valgrind allows to suppress such errors using suppression files. The
default suppression file that comes with valgrind already catches a lot
of them. Some additional suppressions are defined in \fIt/perl.supp\fR.
.PP
To get valgrind and for more information see
.PP
.Vb 1
\&    http://valgrind.org/
.Ve
.SS "AddressSanitizer"
.IX Subsection "AddressSanitizer"
AddressSanitizer is a clang extension, included in clang since v3.1. It
checks illegal heap pointers, global pointers, stack pointers and use
after free errors, and is fast enough that you can easily compile your
debugging or optimized perl with it. It does not check memory leaks
though. AddressSanitizer is available for linux, Mac \s-1OS X\s0 and soon on
Windows.
.PP
To build perl with AddressSanitizer, your Configure invocation should
look like:
.PP
.Vb 3
\&    sh Configure \-des \-Dcc=clang \e
\&       \-Accflags=\-faddress\-sanitizer \-Aldflags=\-faddress\-sanitizer \e
\&       \-Alddlflags=\-shared\e \-faddress\-sanitizer
.Ve
.PP
where these arguments mean:
.IP "\(bu" 4
\&\-Dcc=clang
.Sp
This should be replaced by the full path to your clang executable if it
is not in your path.
.IP "\(bu" 4
\&\-Accflags=\-faddress\-sanitizer
.Sp
Compile perl and extensions sources with AddressSanitizer.
.IP "\(bu" 4
\&\-Aldflags=\-faddress\-sanitizer
.Sp
Link the perl executable with AddressSanitizer.
.IP "\(bu" 4
\&\-Alddlflags=\-shared\e \-faddress\-sanitizer
.Sp
Link dynamic extensions with AddressSanitizer. You must manually
specify \f(CW\*(C`\-shared\*(C'\fR because using \f(CW\*(C`\-Alddlflags=\-shared\*(C'\fR will prevent
Configure from setting a default value for \f(CW\*(C`lddlflags\*(C'\fR, which usually
contains \f(CW\*(C`\-shared\*(C'\fR (at least on linux).
.PP
See also
<http://code.google.com/p/address\-sanitizer/wiki/AddressSanitizer>.
.SH "PROFILING"
.IX Header "PROFILING"
Depending on your platform there are various ways of profiling Perl.
.PP
There are two commonly used techniques of profiling executables:
\&\fIstatistical time-sampling\fR and \fIbasic-block counting\fR.
.PP
The first method takes periodically samples of the \s-1CPU\s0 program counter,
and since the program counter can be correlated with the code generated
for functions, we get a statistical view of in which functions the
program is spending its time. The caveats are that very small/fast
functions have lower probability of showing up in the profile, and that
periodically interrupting the program (this is usually done rather
frequently, in the scale of milliseconds) imposes an additional
overhead that may skew the results. The first problem can be alleviated
by running the code for longer (in general this is a good idea for
profiling), the second problem is usually kept in guard by the
profiling tools themselves.
.PP
The second method divides up the generated code into \fIbasic blocks\fR.
Basic blocks are sections of code that are entered only in the
beginning and exited only at the end. For example, a conditional jump
starts a basic block. Basic block profiling usually works by
\&\fIinstrumenting\fR the code by adding \fIenter basic block #nnnn\fR
book-keeping code to the generated code. During the execution of the
code the basic block counters are then updated appropriately. The
caveat is that the added extra code can skew the results: again, the
profiling tools usually try to factor their own effects out of the
results.
.SS "Gprof Profiling"
.IX Subsection "Gprof Profiling"
gprof is a profiling tool available in many Unix platforms, it uses
\&\fIstatistical time-sampling\fR.
.PP
You can build a profiled version of perl called \*(L"perl.gprof\*(R" by
invoking the make target \*(L"perl.gprof\*(R"  (What is required is that Perl
must be compiled using the \f(CW\*(C`\-pg\*(C'\fR flag, you may need to re-Configure).
Running the profiled version of Perl will create an output file called
\&\fIgmon.out\fR is created which contains the profiling data collected
during the execution.
.PP
The gprof tool can then display the collected data in various ways.
Usually gprof understands the following options:
.IP "\(bu" 4
\&\-a
.Sp
Suppress statically defined functions from the profile.
.IP "\(bu" 4
\&\-b
.Sp
Suppress the verbose descriptions in the profile.
.IP "\(bu" 4
\&\-e routine
.Sp
Exclude the given routine and its descendants from the profile.
.IP "\(bu" 4
\&\-f routine
.Sp
Display only the given routine and its descendants in the profile.
.IP "\(bu" 4
\&\-s
.Sp
Generate a summary file called \fIgmon.sum\fR which then may be given to
subsequent gprof runs to accumulate data over several runs.
.IP "\(bu" 4
\&\-z
.Sp
Display routines that have zero usage.
.PP
For more detailed explanation of the available commands and output
formats, see your own local documentation of gprof.
.PP
quick hint:
.PP
.Vb 4
\&    $ sh Configure \-des \-Dusedevel \-Doptimize=\*(Aq\-pg\*(Aq && make perl.gprof
\&    $ ./perl.gprof someprog # creates gmon.out in current directory
\&    $ gprof ./perl.gprof > out
\&    $ view out
.Ve
.SS "\s-1GCC\s0 gcov Profiling"
.IX Subsection "GCC gcov Profiling"
Starting from \s-1GCC 3.0 \s0\fIbasic block profiling\fR is officially available
for the \s-1GNU CC.\s0
.PP
You can build a profiled version of perl called \fIperl.gcov\fR by
invoking the make target \*(L"perl.gcov\*(R" (what is required that Perl must
be compiled using gcc with the flags \f(CW\*(C`\-fprofile\-arcs \-ftest\-coverage\*(C'\fR,
you may need to re-Configure).
.PP
Running the profiled version of Perl will cause profile output to be
generated. For each source file an accompanying \*(L".da\*(R" file will be
created.
.PP
To display the results you use the \*(L"gcov\*(R" utility (which should be
installed if you have gcc 3.0 or newer installed). \fIgcov\fR is run on
source code files, like this
.PP
.Vb 1
\&    gcov sv.c
.Ve
.PP
which will cause \fIsv.c.gcov\fR to be created. The \fI.gcov\fR files contain
the source code annotated with relative frequencies of execution
indicated by \*(L"#\*(R" markers.
.PP
Useful options of \fIgcov\fR include \f(CW\*(C`\-b\*(C'\fR which will summarise the basic
block, branch, and function call coverage, and \f(CW\*(C`\-c\*(C'\fR which instead of
relative frequencies will use the actual counts. For more information
on the use of \fIgcov\fR and basic block profiling with gcc, see the
latest \s-1GNU CC\s0 manual, as of \s-1GCC 3.0\s0 see
.PP
.Vb 1
\&    http://gcc.gnu.org/onlinedocs/gcc\-3.0/gcc.html
.Ve
.PP
and its section titled \*(L"8. gcov: a Test Coverage Program\*(R"
.PP
.Vb 1
\&    http://gcc.gnu.org/onlinedocs/gcc\-3.0/gcc_8.html#SEC132
.Ve
.PP
quick hint:
.PP
.Vb 7
\&    $ sh Configure \-des \-Dusedevel \-Doptimize=\*(Aq\-g\*(Aq \e
\&        \-Accflags=\*(Aq\-fprofile\-arcs \-ftest\-coverage\*(Aq \e
\&        \-Aldflags=\*(Aq\-fprofile\-arcs \-ftest\-coverage\*(Aq && make perl.gcov
\&    $ rm \-f regexec.c.gcov regexec.gcda
\&    $ ./perl.gcov
\&    $ gcov regexec.c
\&    $ view regexec.c.gcov
.Ve
.SH "MISCELLANEOUS TRICKS"
.IX Header "MISCELLANEOUS TRICKS"
.SS "\s-1PERL_DESTRUCT_LEVEL\s0"
.IX Subsection "PERL_DESTRUCT_LEVEL"
If you want to run any of the tests yourself manually using e.g.
valgrind, or the pureperl or perl.third executables, please note that
by default perl \fBdoes not\fR explicitly cleanup all the memory it has
allocated (such as global memory arenas) but instead lets the \fIexit()\fR of
the whole program \*(L"take care\*(R" of such allocations, also known as
\&\*(L"global destruction of objects\*(R".
.PP
There is a way to tell perl to do complete cleanup: set the environment
variable \s-1PERL_DESTRUCT_LEVEL\s0 to a non-zero value. The t/TEST wrapper
does set this to 2, and this is what you need to do too, if you don't
want to see the \*(L"global leaks\*(R": For example, for \*(L"third-degreed\*(R" Perl:
.PP
.Vb 1
\&        env PERL_DESTRUCT_LEVEL=2 ./perl.third \-Ilib t/foo/bar.t
.Ve
.PP
(Note: the mod_perl apache module uses also this environment variable
for its own purposes and extended its semantics. Refer to the mod_perl
documentation for more information. Also, spawned threads do the
equivalent of setting this variable to the value 1.)
.PP
If, at the end of a run you get the message \fIN scalars leaked\fR, you
can recompile with \f(CW\*(C`\-DDEBUG_LEAKING_SCALARS\*(C'\fR, which will cause the
addresses of all those leaked SVs to be dumped along with details as to
where each \s-1SV\s0 was originally allocated. This information is also
displayed by Devel::Peek. Note that the extra details recorded with
each \s-1SV\s0 increases memory usage, so it shouldn't be used in production
environments. It also converts \f(CW\*(C`new_SV()\*(C'\fR from a macro into a real
function, so you can use your favourite debugger to discover where
those pesky SVs were allocated.
.PP
If you see that you're leaking memory at runtime, but neither valgrind
nor \f(CW\*(C`\-DDEBUG_LEAKING_SCALARS\*(C'\fR will find anything, you're probably
leaking SVs that are still reachable and will be properly cleaned up
during destruction of the interpreter. In such cases, using the \f(CW\*(C`\-Dm\*(C'\fR
switch can point you to the source of the leak. If the executable was
built with \f(CW\*(C`\-DDEBUG_LEAKING_SCALARS\*(C'\fR, \f(CW\*(C`\-Dm\*(C'\fR will output \s-1SV\s0
allocations in addition to memory allocations. Each \s-1SV\s0 allocation has a
distinct serial number that will be written on creation and destruction
of the \s-1SV.\s0 So if you're executing the leaking code in a loop, you need
to look for SVs that are created, but never destroyed between each
cycle. If such an \s-1SV\s0 is found, set a conditional breakpoint within
\&\f(CW\*(C`new_SV()\*(C'\fR and make it break only when \f(CW\*(C`PL_sv_serial\*(C'\fR is equal to the
serial number of the leaking \s-1SV.\s0 Then you will catch the interpreter in
exactly the state where the leaking \s-1SV\s0 is allocated, which is
sufficient in many cases to find the source of the leak.
.PP
As \f(CW\*(C`\-Dm\*(C'\fR is using the PerlIO layer for output, it will by itself
allocate quite a bunch of SVs, which are hidden to avoid recursion. You
can bypass the PerlIO layer if you use the \s-1SV\s0 logging provided by
\&\f(CW\*(C`\-DPERL_MEM_LOG\*(C'\fR instead.
.SS "\s-1PERL_MEM_LOG\s0"
.IX Subsection "PERL_MEM_LOG"
If compiled with \f(CW\*(C`\-DPERL_MEM_LOG\*(C'\fR, both memory and \s-1SV\s0 allocations go
through logging functions, which is handy for breakpoint setting.
.PP
Unless \f(CW\*(C`\-DPERL_MEM_LOG_NOIMPL\*(C'\fR is also compiled, the logging functions
read \f(CW$ENV\fR{\s-1PERL_MEM_LOG\s0} to determine whether to log the event, and if
so how:
.PP
.Vb 4
\&    $ENV{PERL_MEM_LOG} =~ /m/           Log all memory ops
\&    $ENV{PERL_MEM_LOG} =~ /s/           Log all SV ops
\&    $ENV{PERL_MEM_LOG} =~ /t/           include timestamp in Log
\&    $ENV{PERL_MEM_LOG} =~ /^(\ed+)/      write to FD given (default is 2)
.Ve
.PP
Memory logging is somewhat similar to \f(CW\*(C`\-Dm\*(C'\fR but is independent of
\&\f(CW\*(C`\-DDEBUGGING\*(C'\fR, and at a higher level; all uses of \fINewx()\fR, \fIRenew()\fR, and
\&\fISafefree()\fR are logged with the caller's source code file and line
number (and C function name, if supported by the C compiler). In
contrast, \f(CW\*(C`\-Dm\*(C'\fR is directly at the point of \f(CW\*(C`malloc()\*(C'\fR. \s-1SV\s0 logging is
similar.
.PP
Since the logging doesn't use PerlIO, all \s-1SV\s0 allocations are logged and
no extra \s-1SV\s0 allocations are introduced by enabling the logging. If
compiled with \f(CW\*(C`\-DDEBUG_LEAKING_SCALARS\*(C'\fR, the serial number for each \s-1SV\s0
allocation is also logged.
.SS "\s-1DDD\s0 over gdb"
.IX Subsection "DDD over gdb"
Those debugging perl with the \s-1DDD\s0 frontend over gdb may find the
following useful:
.PP
You can extend the data conversion shortcuts menu, so for example you
can display an \s-1SV\s0's \s-1IV\s0 value with one click, without doing any typing.
To do that simply edit ~/.ddd/init file and add after:
.PP
.Vb 6
\&  ! Display shortcuts.
\&  Ddd*gdbDisplayShortcuts: \e
\&  /t ()   // Convert to Bin\en\e
\&  /d ()   // Convert to Dec\en\e
\&  /x ()   // Convert to Hex\en\e
\&  /o ()   // Convert to Oct(\en\e
.Ve
.PP
the following two lines:
.PP
.Vb 2
\&  ((XPV*) (())\->sv_any )\->xpv_pv  // 2pvx\en\e
\&  ((XPVIV*) (())\->sv_any )\->xiv_iv // 2ivx
.Ve
.PP
so now you can do ivx and pvx lookups or you can plug there the sv_peek
\&\*(L"conversion\*(R":
.PP
.Vb 1
\&  Perl_sv_peek(my_perl, (SV*)()) // sv_peek
.Ve
.PP
(The my_perl is for threaded builds.) Just remember that every line,
but the last one, should end with \en\e
.PP
Alternatively edit the init file interactively via: 3rd mouse button \->
New Display \-> Edit Menu
.PP
Note: you can define up to 20 conversion shortcuts in the gdb section.
.SS "Poison"
.IX Subsection "Poison"
If you see in a debugger a memory area mysteriously full of 0xABABABAB
or 0xEFEFEFEF, you may be seeing the effect of the \fIPoison()\fR macros, see
perlclib.
.SS "Read-only optrees"
.IX Subsection "Read-only optrees"
Under ithreads the optree is read only. If you want to enforce this, to
check for write accesses from buggy code, compile with
\&\f(CW\*(C`\-DPERL_DEBUG_READONLY_OPS\*(C'\fR to enable code that allocates op memory
via \f(CW\*(C`mmap\*(C'\fR, and sets it read-only when it is attached to a subroutine. Any
write access to an op results in a \f(CW\*(C`SIGBUS\*(C'\fR and abort.
.PP
This code is intended for development only, and may not be portable
even to all Unix variants. Also, it is an 80% solution, in that it
isn't able to make all ops read only. Specifically it does not apply to op
slabs belonging to \f(CW\*(C`BEGIN\*(C'\fR blocks.
.PP
However, as an 80% solution it is still effective, as it has caught bugs in
the past.
.SS "The .i Targets"
.IX Subsection "The .i Targets"
You can expand the macros in a \fIfoo.c\fR file by saying
.PP
.Vb 1
\&    make foo.i
.Ve
.PP
which will expand the macros using cpp.  Don't be scared by the
results.
.SH "AUTHOR"
.IX Header "AUTHOR"
This document was originally written by Nathan Torkington, and is
maintained by the perl5\-porters mailing list.
                                                                                                                          osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perlhacktut.1                                0100644 0001750 0001750 00000025624 12566207441 023276  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLHACKTUT 1"
.TH PERLHACKTUT 1 "2013-11-04" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlhacktut \- Walk through the creation of a simple C code patch
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document takes you through a simple patch example.
.PP
If you haven't read perlhack yet, go do that first! You might also
want to read through perlsource too.
.PP
Once you're done here, check out perlhacktips next.
.SH "EXAMPLE OF A SIMPLE PATCH"
.IX Header "EXAMPLE OF A SIMPLE PATCH"
Let's take a simple patch from start to finish.
.PP
Here's something Larry suggested: if a \f(CW\*(C`U\*(C'\fR is the first active format
during a \f(CW\*(C`pack\*(C'\fR, (for example, \f(CW\*(C`pack "U3C8", @stuff\*(C'\fR) then the
resulting string should be treated as \s-1UTF\-8\s0 encoded.
.PP
If you are working with a git clone of the Perl repository, you will
want to create a branch for your changes. This will make creating a
proper patch much simpler. See the perlgit for details on how to do
this.
.SS "Writing the patch"
.IX Subsection "Writing the patch"
How do we prepare to fix this up? First we locate the code in question
\&\- the \f(CW\*(C`pack\*(C'\fR happens at runtime, so it's going to be in one of the
\&\fIpp\fR files. Sure enough, \f(CW\*(C`pp_pack\*(C'\fR is in \fIpp.c\fR. Since we're going
to be altering this file, let's copy it to \fIpp.c~\fR.
.PP
[Well, it was in \fIpp.c\fR when this tutorial was written. It has now
been split off with \f(CW\*(C`pp_unpack\*(C'\fR to its own file, \fIpp_pack.c\fR]
.PP
Now let's look over \f(CW\*(C`pp_pack\*(C'\fR: we take a pattern into \f(CW\*(C`pat\*(C'\fR, and then
loop over the pattern, taking each format character in turn into
\&\f(CW\*(C`datum_type\*(C'\fR. Then for each possible format character, we swallow up
the other arguments in the pattern (a field width, an asterisk, and so
on) and convert the next chunk input into the specified format, adding
it onto the output \s-1SV \s0\f(CW\*(C`cat\*(C'\fR.
.PP
How do we know if the \f(CW\*(C`U\*(C'\fR is the first format in the \f(CW\*(C`pat\*(C'\fR? Well, if
we have a pointer to the start of \f(CW\*(C`pat\*(C'\fR then, if we see a \f(CW\*(C`U\*(C'\fR we can
test whether we're still at the start of the string. So, here's where
\&\f(CW\*(C`pat\*(C'\fR is set up:
.PP
.Vb 6
\&    STRLEN fromlen;
\&    char *pat = SvPVx(*++MARK, fromlen);
\&    char *patend = pat + fromlen;
\&    I32 len;
\&    I32 datumtype;
\&    SV *fromstr;
.Ve
.PP
We'll have another string pointer in there:
.PP
.Vb 7
\&    STRLEN fromlen;
\&    char *pat = SvPVx(*++MARK, fromlen);
\&    char *patend = pat + fromlen;
\& +  char *patcopy;
\&    I32 len;
\&    I32 datumtype;
\&    SV *fromstr;
.Ve
.PP
And just before we start the loop, we'll set \f(CW\*(C`patcopy\*(C'\fR to be the start
of \f(CW\*(C`pat\*(C'\fR:
.PP
.Vb 5
\&    items = SP \- MARK;
\&    MARK++;
\&    sv_setpvn(cat, "", 0);
\& +  patcopy = pat;
\&    while (pat < patend) {
.Ve
.PP
Now if we see a \f(CW\*(C`U\*(C'\fR which was at the start of the string, we turn on
the \f(CW\*(C`UTF8\*(C'\fR flag for the output \s-1SV, \s0\f(CW\*(C`cat\*(C'\fR:
.PP
.Vb 5
\& +  if (datumtype == \*(AqU\*(Aq && pat==patcopy+1)
\& +      SvUTF8_on(cat);
\&    if (datumtype == \*(Aq#\*(Aq) {
\&        while (pat < patend && *pat != \*(Aq\en\*(Aq)
\&            pat++;
.Ve
.PP
Remember that it has to be \f(CW\*(C`patcopy+1\*(C'\fR because the first character of
the string is the \f(CW\*(C`U\*(C'\fR which has been swallowed into \f(CW\*(C`datumtype!\*(C'\fR
.PP
Oops, we forgot one thing: what if there are spaces at the start of the
pattern? \f(CW\*(C`pack("  U*", @stuff)\*(C'\fR will have \f(CW\*(C`U\*(C'\fR as the first active
character, even though it's not the first thing in the pattern. In this
case, we have to advance \f(CW\*(C`patcopy\*(C'\fR along with \f(CW\*(C`pat\*(C'\fR when we see
spaces:
.PP
.Vb 2
\&    if (isSPACE(datumtype))
\&        continue;
.Ve
.PP
needs to become
.PP
.Vb 4
\&    if (isSPACE(datumtype)) {
\&        patcopy++;
\&        continue;
\&    }
.Ve
.PP
\&\s-1OK.\s0 That's the C part done. Now we must do two additional things before
this patch is ready to go: we've changed the behaviour of Perl, and so
we must document that change. We must also provide some more regression
tests to make sure our patch works and doesn't create a bug somewhere
else along the line.
.SS "Testing the patch"
.IX Subsection "Testing the patch"
The regression tests for each operator live in \fIt/op/\fR, and so we make
a copy of \fIt/op/pack.t\fR to \fIt/op/pack.t~\fR. Now we can add our tests
to the end. First, we'll test that the \f(CW\*(C`U\*(C'\fR does indeed create Unicode
strings.
.PP
t/op/pack.t has a sensible \fIok()\fR function, but if it didn't we could use
the one from t/test.pl.
.PP
.Vb 2
\& require \*(Aq./test.pl\*(Aq;
\& plan( tests => 159 );
.Ve
.PP
so instead of this:
.PP
.Vb 3
\& print \*(Aqnot \*(Aq unless "1.20.300.4000" eq sprintf "%vd",
\&                                               pack("U*",1,20,300,4000);
\& print "ok $test\en"; $test++;
.Ve
.PP
we can write the more sensible (see Test::More for a full
explanation of \fIis()\fR and other testing functions).
.PP
.Vb 2
\& is( "1.20.300.4000", sprintf "%vd", pack("U*",1,20,300,4000),
\&                                       "U* produces Unicode" );
.Ve
.PP
Now we'll test that we got that space-at-the-beginning business right:
.PP
.Vb 2
\& is( "1.20.300.4000", sprintf "%vd", pack("  U*",1,20,300,4000),
\&                                     "  with spaces at the beginning" );
.Ve
.PP
And finally we'll test that we don't make Unicode strings if \f(CW\*(C`U\*(C'\fR is
\&\fBnot\fR the first active format:
.PP
.Vb 2
\& isnt( v1.20.300.4000, sprintf "%vd", pack("C0U*",1,20,300,4000),
\&                                       "U* not first isn\*(Aqt Unicode" );
.Ve
.PP
Mustn't forget to change the number of tests which appears at the top,
or else the automated tester will get confused. This will either look
like this:
.PP
.Vb 1
\& print "1..156\en";
.Ve
.PP
or this:
.PP
.Vb 1
\& plan( tests => 156 );
.Ve
.PP
We now compile up Perl, and run it through the test suite. Our new
tests pass, hooray!
.SS "Documenting the patch"
.IX Subsection "Documenting the patch"
Finally, the documentation. The job is never done until the paperwork
is over, so let's describe the change we've just made. The relevant
place is \fIpod/perlfunc.pod\fR; again, we make a copy, and then we'll
insert this text in the description of \f(CW\*(C`pack\*(C'\fR:
.PP
.Vb 1
\& =item *
\&
\& If the pattern begins with a C<U>, the resulting string will be treated
\& as UTF\-8\-encoded Unicode. You can force UTF\-8 encoding on in a string
\& with an initial C<U0>, and the bytes that follow will be interpreted as
\& Unicode characters. If you don\*(Aqt want this to happen, you can begin
\& your pattern with C<C0> (or anything else) to force Perl not to UTF\-8
\& encode your string, and then follow this with a C<U*> somewhere in your
\& pattern.
.Ve
.SS "Submit"
.IX Subsection "Submit"
See perlhack for details on how to submit this patch.
.SH "AUTHOR"
.IX Header "AUTHOR"
This document was originally written by Nathan Torkington, and is
maintained by the perl5\-porters mailing list.
                                                                                                            osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perlhacktut5.16.1                            0100644 0001750 0001750 00000025371 12566207420 023604  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLHACKTUT 1"
.TH PERLHACKTUT 1 "2013-03-04" "perl v5.16.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlhacktut \- Walk through the creation of a simple C code patch
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document takes you through a simple patch example.
.PP
If you haven't read perlhack yet, go do that first! You might also
want to read through perlsource too.
.PP
Once you're done here, check out perlhacktips next.
.SH "EXAMPLE OF A SIMPLE PATCH"
.IX Header "EXAMPLE OF A SIMPLE PATCH"
Let's take a simple patch from start to finish.
.PP
Here's something Larry suggested: if a \f(CW\*(C`U\*(C'\fR is the first active format
during a \f(CW\*(C`pack\*(C'\fR, (for example, \f(CW\*(C`pack "U3C8", @stuff\*(C'\fR) then the
resulting string should be treated as \s-1UTF\-8\s0 encoded.
.PP
If you are working with a git clone of the Perl repository, you will
want to create a branch for your changes. This will make creating a
proper patch much simpler. See the perlgit for details on how to do
this.
.SS "Writing the patch"
.IX Subsection "Writing the patch"
How do we prepare to fix this up? First we locate the code in question
\&\- the \f(CW\*(C`pack\*(C'\fR happens at runtime, so it's going to be in one of the
\&\fIpp\fR files. Sure enough, \f(CW\*(C`pp_pack\*(C'\fR is in \fIpp.c\fR. Since we're going
to be altering this file, let's copy it to \fIpp.c~\fR.
.PP
[Well, it was in \fIpp.c\fR when this tutorial was written. It has now
been split off with \f(CW\*(C`pp_unpack\*(C'\fR to its own file, \fIpp_pack.c\fR]
.PP
Now let's look over \f(CW\*(C`pp_pack\*(C'\fR: we take a pattern into \f(CW\*(C`pat\*(C'\fR, and then
loop over the pattern, taking each format character in turn into
\&\f(CW\*(C`datum_type\*(C'\fR. Then for each possible format character, we swallow up
the other arguments in the pattern (a field width, an asterisk, and so
on) and convert the next chunk input into the specified format, adding
it onto the output \s-1SV\s0 \f(CW\*(C`cat\*(C'\fR.
.PP
How do we know if the \f(CW\*(C`U\*(C'\fR is the first format in the \f(CW\*(C`pat\*(C'\fR? Well, if
we have a pointer to the start of \f(CW\*(C`pat\*(C'\fR then, if we see a \f(CW\*(C`U\*(C'\fR we can
test whether we're still at the start of the string. So, here's where
\&\f(CW\*(C`pat\*(C'\fR is set up:
.PP
.Vb 6
\&    STRLEN fromlen;
\&    register char *pat = SvPVx(*++MARK, fromlen);
\&    register char *patend = pat + fromlen;
\&    register I32 len;
\&    I32 datumtype;
\&    SV *fromstr;
.Ve
.PP
We'll have another string pointer in there:
.PP
.Vb 7
\&    STRLEN fromlen;
\&    register char *pat = SvPVx(*++MARK, fromlen);
\&    register char *patend = pat + fromlen;
\& +  char *patcopy;
\&    register I32 len;
\&    I32 datumtype;
\&    SV *fromstr;
.Ve
.PP
And just before we start the loop, we'll set \f(CW\*(C`patcopy\*(C'\fR to be the start
of \f(CW\*(C`pat\*(C'\fR:
.PP
.Vb 5
\&    items = SP \- MARK;
\&    MARK++;
\&    sv_setpvn(cat, "", 0);
\& +  patcopy = pat;
\&    while (pat < patend) {
.Ve
.PP
Now if we see a \f(CW\*(C`U\*(C'\fR which was at the start of the string, we turn on
the \f(CW\*(C`UTF8\*(C'\fR flag for the output \s-1SV\s0, \f(CW\*(C`cat\*(C'\fR:
.PP
.Vb 5
\& +  if (datumtype == \*(AqU\*(Aq && pat==patcopy+1)
\& +      SvUTF8_on(cat);
\&    if (datumtype == \*(Aq#\*(Aq) {
\&        while (pat < patend && *pat != \*(Aq\en\*(Aq)
\&            pat++;
.Ve
.PP
Remember that it has to be \f(CW\*(C`patcopy+1\*(C'\fR because the first character of
the string is the \f(CW\*(C`U\*(C'\fR which has been swallowed into \f(CW\*(C`datumtype!\*(C'\fR
.PP
Oops, we forgot one thing: what if there are spaces at the start of the
pattern? \f(CW\*(C`pack("  U*", @stuff)\*(C'\fR will have \f(CW\*(C`U\*(C'\fR as the first active
character, even though it's not the first thing in the pattern. In this
case, we have to advance \f(CW\*(C`patcopy\*(C'\fR along with \f(CW\*(C`pat\*(C'\fR when we see
spaces:
.PP
.Vb 2
\&    if (isSPACE(datumtype))
\&        continue;
.Ve
.PP
needs to become
.PP
.Vb 4
\&    if (isSPACE(datumtype)) {
\&        patcopy++;
\&        continue;
\&    }
.Ve
.PP
\&\s-1OK\s0. That's the C part done. Now we must do two additional things before
this patch is ready to go: we've changed the behaviour of Perl, and so
we must document that change. We must also provide some more regression
tests to make sure our patch works and doesn't create a bug somewhere
else along the line.
.SS "Testing the patch"
.IX Subsection "Testing the patch"
The regression tests for each operator live in \fIt/op/\fR, and so we make
a copy of \fIt/op/pack.t\fR to \fIt/op/pack.t~\fR. Now we can add our tests
to the end. First, we'll test that the \f(CW\*(C`U\*(C'\fR does indeed create Unicode
strings.
.PP
t/op/pack.t has a sensible \fIok()\fR function, but if it didn't we could use
the one from t/test.pl.
.PP
.Vb 2
\& require \*(Aq./test.pl\*(Aq;
\& plan( tests => 159 );
.Ve
.PP
so instead of this:
.PP
.Vb 3
\& print \*(Aqnot \*(Aq unless "1.20.300.4000" eq sprintf "%vd",
\&                                               pack("U*",1,20,300,4000);
\& print "ok $test\en"; $test++;
.Ve
.PP
we can write the more sensible (see Test::More for a full
explanation of \fIis()\fR and other testing functions).
.PP
.Vb 2
\& is( "1.20.300.4000", sprintf "%vd", pack("U*",1,20,300,4000),
\&                                       "U* produces Unicode" );
.Ve
.PP
Now we'll test that we got that space-at-the-beginning business right:
.PP
.Vb 2
\& is( "1.20.300.4000", sprintf "%vd", pack("  U*",1,20,300,4000),
\&                                     "  with spaces at the beginning" );
.Ve
.PP
And finally we'll test that we don't make Unicode strings if \f(CW\*(C`U\*(C'\fR is
\&\fBnot\fR the first active format:
.PP
.Vb 2
\& isnt( v1.20.300.4000, sprintf "%vd", pack("C0U*",1,20,300,4000),
\&                                       "U* not first isn\*(Aqt Unicode" );
.Ve
.PP
Mustn't forget to change the number of tests which appears at the top,
or else the automated tester will get confused. This will either look
like this:
.PP
.Vb 1
\& print "1..156\en";
.Ve
.PP
or this:
.PP
.Vb 1
\& plan( tests => 156 );
.Ve
.PP
We now compile up Perl, and run it through the test suite. Our new
tests pass, hooray!
.SS "Documenting the patch"
.IX Subsection "Documenting the patch"
Finally, the documentation. The job is never done until the paperwork
is over, so let's describe the change we've just made. The relevant
place is \fIpod/perlfunc.pod\fR; again, we make a copy, and then we'll
insert this text in the description of \f(CW\*(C`pack\*(C'\fR:
.PP
.Vb 1
\& =item *
\&
\& If the pattern begins with a C<U>, the resulting string will be treated
\& as UTF\-8\-encoded Unicode. You can force UTF\-8 encoding on in a string
\& with an initial C<U0>, and the bytes that follow will be interpreted as
\& Unicode characters. If you don\*(Aqt want this to happen, you can begin
\& your pattern with C<C0> (or anything else) to force Perl not to UTF\-8
\& encode your string, and then follow this with a C<U*> somewhere in your
\& pattern.
.Ve
.SS "Submit"
.IX Subsection "Submit"
See perlhack for details on how to submit this patch.
.SH "AUTHOR"
.IX Header "AUTHOR"
This document was originally written by Nathan Torkington, and is
maintained by the perl5\-porters mailing list.
                                                                                                                                                                                                                                                                       osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perlhacktut5.18.1                            0100644 0001750 0001750 00000025624 12566207441 023612  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLHACKTUT 1"
.TH PERLHACKTUT 1 "2013-11-04" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlhacktut \- Walk through the creation of a simple C code patch
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document takes you through a simple patch example.
.PP
If you haven't read perlhack yet, go do that first! You might also
want to read through perlsource too.
.PP
Once you're done here, check out perlhacktips next.
.SH "EXAMPLE OF A SIMPLE PATCH"
.IX Header "EXAMPLE OF A SIMPLE PATCH"
Let's take a simple patch from start to finish.
.PP
Here's something Larry suggested: if a \f(CW\*(C`U\*(C'\fR is the first active format
during a \f(CW\*(C`pack\*(C'\fR, (for example, \f(CW\*(C`pack "U3C8", @stuff\*(C'\fR) then the
resulting string should be treated as \s-1UTF\-8\s0 encoded.
.PP
If you are working with a git clone of the Perl repository, you will
want to create a branch for your changes. This will make creating a
proper patch much simpler. See the perlgit for details on how to do
this.
.SS "Writing the patch"
.IX Subsection "Writing the patch"
How do we prepare to fix this up? First we locate the code in question
\&\- the \f(CW\*(C`pack\*(C'\fR happens at runtime, so it's going to be in one of the
\&\fIpp\fR files. Sure enough, \f(CW\*(C`pp_pack\*(C'\fR is in \fIpp.c\fR. Since we're going
to be altering this file, let's copy it to \fIpp.c~\fR.
.PP
[Well, it was in \fIpp.c\fR when this tutorial was written. It has now
been split off with \f(CW\*(C`pp_unpack\*(C'\fR to its own file, \fIpp_pack.c\fR]
.PP
Now let's look over \f(CW\*(C`pp_pack\*(C'\fR: we take a pattern into \f(CW\*(C`pat\*(C'\fR, and then
loop over the pattern, taking each format character in turn into
\&\f(CW\*(C`datum_type\*(C'\fR. Then for each possible format character, we swallow up
the other arguments in the pattern (a field width, an asterisk, and so
on) and convert the next chunk input into the specified format, adding
it onto the output \s-1SV \s0\f(CW\*(C`cat\*(C'\fR.
.PP
How do we know if the \f(CW\*(C`U\*(C'\fR is the first format in the \f(CW\*(C`pat\*(C'\fR? Well, if
we have a pointer to the start of \f(CW\*(C`pat\*(C'\fR then, if we see a \f(CW\*(C`U\*(C'\fR we can
test whether we're still at the start of the string. So, here's where
\&\f(CW\*(C`pat\*(C'\fR is set up:
.PP
.Vb 6
\&    STRLEN fromlen;
\&    char *pat = SvPVx(*++MARK, fromlen);
\&    char *patend = pat + fromlen;
\&    I32 len;
\&    I32 datumtype;
\&    SV *fromstr;
.Ve
.PP
We'll have another string pointer in there:
.PP
.Vb 7
\&    STRLEN fromlen;
\&    char *pat = SvPVx(*++MARK, fromlen);
\&    char *patend = pat + fromlen;
\& +  char *patcopy;
\&    I32 len;
\&    I32 datumtype;
\&    SV *fromstr;
.Ve
.PP
And just before we start the loop, we'll set \f(CW\*(C`patcopy\*(C'\fR to be the start
of \f(CW\*(C`pat\*(C'\fR:
.PP
.Vb 5
\&    items = SP \- MARK;
\&    MARK++;
\&    sv_setpvn(cat, "", 0);
\& +  patcopy = pat;
\&    while (pat < patend) {
.Ve
.PP
Now if we see a \f(CW\*(C`U\*(C'\fR which was at the start of the string, we turn on
the \f(CW\*(C`UTF8\*(C'\fR flag for the output \s-1SV, \s0\f(CW\*(C`cat\*(C'\fR:
.PP
.Vb 5
\& +  if (datumtype == \*(AqU\*(Aq && pat==patcopy+1)
\& +      SvUTF8_on(cat);
\&    if (datumtype == \*(Aq#\*(Aq) {
\&        while (pat < patend && *pat != \*(Aq\en\*(Aq)
\&            pat++;
.Ve
.PP
Remember that it has to be \f(CW\*(C`patcopy+1\*(C'\fR because the first character of
the string is the \f(CW\*(C`U\*(C'\fR which has been swallowed into \f(CW\*(C`datumtype!\*(C'\fR
.PP
Oops, we forgot one thing: what if there are spaces at the start of the
pattern? \f(CW\*(C`pack("  U*", @stuff)\*(C'\fR will have \f(CW\*(C`U\*(C'\fR as the first active
character, even though it's not the first thing in the pattern. In this
case, we have to advance \f(CW\*(C`patcopy\*(C'\fR along with \f(CW\*(C`pat\*(C'\fR when we see
spaces:
.PP
.Vb 2
\&    if (isSPACE(datumtype))
\&        continue;
.Ve
.PP
needs to become
.PP
.Vb 4
\&    if (isSPACE(datumtype)) {
\&        patcopy++;
\&        continue;
\&    }
.Ve
.PP
\&\s-1OK.\s0 That's the C part done. Now we must do two additional things before
this patch is ready to go: we've changed the behaviour of Perl, and so
we must document that change. We must also provide some more regression
tests to make sure our patch works and doesn't create a bug somewhere
else along the line.
.SS "Testing the patch"
.IX Subsection "Testing the patch"
The regression tests for each operator live in \fIt/op/\fR, and so we make
a copy of \fIt/op/pack.t\fR to \fIt/op/pack.t~\fR. Now we can add our tests
to the end. First, we'll test that the \f(CW\*(C`U\*(C'\fR does indeed create Unicode
strings.
.PP
t/op/pack.t has a sensible \fIok()\fR function, but if it didn't we could use
the one from t/test.pl.
.PP
.Vb 2
\& require \*(Aq./test.pl\*(Aq;
\& plan( tests => 159 );
.Ve
.PP
so instead of this:
.PP
.Vb 3
\& print \*(Aqnot \*(Aq unless "1.20.300.4000" eq sprintf "%vd",
\&                                               pack("U*",1,20,300,4000);
\& print "ok $test\en"; $test++;
.Ve
.PP
we can write the more sensible (see Test::More for a full
explanation of \fIis()\fR and other testing functions).
.PP
.Vb 2
\& is( "1.20.300.4000", sprintf "%vd", pack("U*",1,20,300,4000),
\&                                       "U* produces Unicode" );
.Ve
.PP
Now we'll test that we got that space-at-the-beginning business right:
.PP
.Vb 2
\& is( "1.20.300.4000", sprintf "%vd", pack("  U*",1,20,300,4000),
\&                                     "  with spaces at the beginning" );
.Ve
.PP
And finally we'll test that we don't make Unicode strings if \f(CW\*(C`U\*(C'\fR is
\&\fBnot\fR the first active format:
.PP
.Vb 2
\& isnt( v1.20.300.4000, sprintf "%vd", pack("C0U*",1,20,300,4000),
\&                                       "U* not first isn\*(Aqt Unicode" );
.Ve
.PP
Mustn't forget to change the number of tests which appears at the top,
or else the automated tester will get confused. This will either look
like this:
.PP
.Vb 1
\& print "1..156\en";
.Ve
.PP
or this:
.PP
.Vb 1
\& plan( tests => 156 );
.Ve
.PP
We now compile up Perl, and run it through the test suite. Our new
tests pass, hooray!
.SS "Documenting the patch"
.IX Subsection "Documenting the patch"
Finally, the documentation. The job is never done until the paperwork
is over, so let's describe the change we've just made. The relevant
place is \fIpod/perlfunc.pod\fR; again, we make a copy, and then we'll
insert this text in the description of \f(CW\*(C`pack\*(C'\fR:
.PP
.Vb 1
\& =item *
\&
\& If the pattern begins with a C<U>, the resulting string will be treated
\& as UTF\-8\-encoded Unicode. You can force UTF\-8 encoding on in a string
\& with an initial C<U0>, and the bytes that follow will be interpreted as
\& Unicode characters. If you don\*(Aqt want this to happen, you can begin
\& your pattern with C<C0> (or anything else) to force Perl not to UTF\-8
\& encode your string, and then follow this with a C<U*> somewhere in your
\& pattern.
.Ve
.SS "Submit"
.IX Subsection "Submit"
See perlhack for details on how to submit this patch.
.SH "AUTHOR"
.IX Header "AUTHOR"
This document was originally written by Nathan Torkington, and is
maintained by the perl5\-porters mailing list.
                                                                                                            osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perlhaiku.1                                  0100644 0001750 0001750 00000012570 12566207441 022730  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLHAIKU 1"
.TH PERLHAIKU 1 "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlhaiku \- Perl version 5.10+ on Haiku
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This file contains instructions how to build Perl for Haiku and lists
known problems.
.SH "BUILD AND INSTALL"
.IX Header "BUILD AND INSTALL"
The build procedure is completely standard:
.PP
.Vb 3
\&  ./Configure \-de
\&  make
\&  make install
.Ve
.PP
Make perl executable and create a symlink for libperl:
.PP
.Vb 2
\&  chmod a+x /boot/common/bin/perl
\&  cd /boot/common/lib; ln \-s perl5/5.18.2/BePC\-haiku/CORE/libperl.so .
.Ve
.PP
Replace \f(CW5.18.2\fR with your respective version of Perl.
.SH "KNOWN PROBLEMS"
.IX Header "KNOWN PROBLEMS"
The following problems are encountered with Haiku revision 28311:
.IP "\(bu" 4
Perl cannot be compiled with threading support \s-1ATM.\s0
.IP "\(bu" 4
The \fIext/Socket/t/socketpair.t\fR test fails. More precisely: the subtests
using datagram sockets fail. Unix datagram sockets aren't implemented in
Haiku yet.
.IP "\(bu" 4
A subtest of the \fIext/Sys/Syslog/t/syslog.t\fR test fails. This is due to Haiku
not implementing \fI/dev/log\fR support yet.
.IP "\(bu" 4
The tests \fIlib/Net/Ping/t/450_service.t\fR and \fIlib/Net/Ping/t/510_ping_udp.t\fR
fail. This is due to bugs in Haiku's network stack implementation.
.SH "CONTACT"
.IX Header "CONTACT"
For Haiku specific problems contact the HaikuPorts developers:
<http://ports.haiku\-files.org/>
.PP
The initial Haiku port was done by Ingo Weinhold <ingo_weinhold@gmx.de>.
.PP
Last update: 2008\-10\-29
                                                                                                                                        osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perlhaiku5.16.1                              0100644 0001750 0001750 00000012321 12566207420 023231  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLHAIKU 1"
.TH PERLHAIKU 1 "2013-03-06" "perl v5.16.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlhaiku \- Perl version 5.10+ on Haiku
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This file contains instructions how to build Perl for Haiku and lists
known problems.
.SH "BUILD AND INSTALL"
.IX Header "BUILD AND INSTALL"
The build procedure is completely standard:
.PP
.Vb 3
\&  ./Configure \-de
\&  make
\&  make install
.Ve
.PP
Make perl executable and create a symlink for libperl:
.PP
.Vb 2
\&  chmod a+x /boot/common/bin/perl
\&  cd /boot/common/lib; ln \-s perl5/5.16.3/BePC\-haiku/CORE/libperl.so .
.Ve
.PP
Replace \f(CW5.16.3\fR with your respective version of Perl.
.SH "KNOWN PROBLEMS"
.IX Header "KNOWN PROBLEMS"
The following problems are encountered with Haiku revision 28311:
.IP "\(bu" 4
Perl cannot be compiled with threading support \s-1ATM\s0.
.IP "\(bu" 4
The \fIext/Socket/t/socketpair.t\fR test fails. More precisely: the subtests
using datagram sockets fail. Unix datagram sockets aren't implemented in
Haiku yet.
.IP "\(bu" 4
A subtest of the \fIext/Sys/Syslog/t/syslog.t\fR test fails. This is due to Haiku
not implementing \f(CW\*(C`/dev/log\*(C'\fR support yet.
.IP "\(bu" 4
The tests \fIlib/Net/Ping/t/450_service.t\fR and \fIlib/Net/Ping/t/510_ping_udp.t\fR
fail. This is due to bugs in Haiku's network stack implementation.
.SH "CONTACT"
.IX Header "CONTACT"
For Haiku specific problems contact the HaikuPorts developers:
http://ports.haiku\-files.org/ <http://ports.haiku-files.org/>
.PP
The initial Haiku port was done by Ingo Weinhold <ingo_weinhold@gmx.de>.
.PP
Last update: 2008\-10\-29
                                                                                                                                                                                                                                                                                                               osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perlhaiku5.18.1                              0100644 0001750 0001750 00000012570 12566207441 023244  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLHAIKU 1"
.TH PERLHAIKU 1 "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlhaiku \- Perl version 5.10+ on Haiku
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This file contains instructions how to build Perl for Haiku and lists
known problems.
.SH "BUILD AND INSTALL"
.IX Header "BUILD AND INSTALL"
The build procedure is completely standard:
.PP
.Vb 3
\&  ./Configure \-de
\&  make
\&  make install
.Ve
.PP
Make perl executable and create a symlink for libperl:
.PP
.Vb 2
\&  chmod a+x /boot/common/bin/perl
\&  cd /boot/common/lib; ln \-s perl5/5.18.2/BePC\-haiku/CORE/libperl.so .
.Ve
.PP
Replace \f(CW5.18.2\fR with your respective version of Perl.
.SH "KNOWN PROBLEMS"
.IX Header "KNOWN PROBLEMS"
The following problems are encountered with Haiku revision 28311:
.IP "\(bu" 4
Perl cannot be compiled with threading support \s-1ATM.\s0
.IP "\(bu" 4
The \fIext/Socket/t/socketpair.t\fR test fails. More precisely: the subtests
using datagram sockets fail. Unix datagram sockets aren't implemented in
Haiku yet.
.IP "\(bu" 4
A subtest of the \fIext/Sys/Syslog/t/syslog.t\fR test fails. This is due to Haiku
not implementing \fI/dev/log\fR support yet.
.IP "\(bu" 4
The tests \fIlib/Net/Ping/t/450_service.t\fR and \fIlib/Net/Ping/t/510_ping_udp.t\fR
fail. This is due to bugs in Haiku's network stack implementation.
.SH "CONTACT"
.IX Header "CONTACT"
For Haiku specific problems contact the HaikuPorts developers:
<http://ports.haiku\-files.org/>
.PP
The initial Haiku port was done by Ingo Weinhold <ingo_weinhold@gmx.de>.
.PP
Last update: 2008\-10\-29
                                                                                                                                        osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perlhist.1                                   0100644 0001750 0001750 00000150773 12566207441 022606  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLHIST 1"
.TH PERLHIST 1 "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlhist \- the Perl history records
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document aims to record the Perl source code releases.
.SH "INTRODUCTION"
.IX Header "INTRODUCTION"
Perl history in brief, by Larry Wall:
.PP
.Vb 9
\&   Perl 0 introduced Perl to my officemates.
\&   Perl 1 introduced Perl to the world, and changed /\e(...\e|...\e)/ to
\&       /(...|...)/.  \e(Dan Faigin still hasn\*(Aqt forgiven me. :\-\e)
\&   Perl 2 introduced Henry Spencer\*(Aqs regular expression package.
\&   Perl 3 introduced the ability to handle binary data (embedded nulls).
\&   Perl 4 introduced the first Camel book.  Really.  We mostly just
\&       switched version numbers so the book could refer to 4.000.
\&   Perl 5 introduced everything else, including the ability to
\&       introduce everything else.
.Ve
.SH "THE KEEPERS OF THE PUMPKIN"
.IX Header "THE KEEPERS OF THE PUMPKIN"
Larry Wall, Andy Dougherty, Tom Christiansen, Charles Bailey, Nick
Ing-Simmons, Chip Salzenberg, Tim Bunce, Malcolm Beattie, Gurusamy
Sarathy, Graham Barr, Jarkko Hietaniemi, Hugo van der Sanden,
Michael Schwern, Rafael Garcia-Suarez, Nicholas Clark, Richard Clamp,
Leon Brocard, Dave Mitchell, Jesse Vincent, Ricardo Signes, Steve Hay,
Matt S Trout, David Golden, Florian Ragwitz, Tatsuhiko Miyagawa,
Chris \f(CW\*(C`BinGOs\*(C'\fR Williams, Zefram, \*(Aevar Arnfjo\*:r\*(d- Bjarmason, Stevan
Little, Dave Rolsky, Max Maischein, Abigail, Jesse Luehrs, Tony Cook,
Dominic Hargreaves, Aaron Crane and Aristotle Pagaltzis.
.SS "\s-1PUMPKIN\s0?"
.IX Subsection "PUMPKIN?"
[from Porting/pumpkin.pod in the Perl source code distribution]
.PP
Chip Salzenberg gets credit for that, with a nod to his cow orker,
David Croy.  We had passed around various names (baton, token, hot
potato) but none caught on.  Then, Chip asked:
.PP
[begin quote]
.PP
.Vb 1
\&   Who has the patch pumpkin?
.Ve
.PP
To explain:  David Croy once told me that at a previous job,
there was one tape drive and multiple systems that used it for backups.
But instead of some high-tech exclusion software, they used a low-tech
method to prevent multiple simultaneous backups: a stuffed pumpkin.
No one was allowed to make backups unless they had the \*(L"backup pumpkin\*(R".
.PP
[end quote]
.PP
The name has stuck.  The holder of the pumpkin is sometimes called
the pumpking (keeping the source afloat?) or the pumpkineer (pulling
the strings?).
.SH "THE RECORDS"
.IX Header "THE RECORDS"
.Vb 6
\& Pump\-  Release         Date            Notes
\& king                                   (by no means
\&                                         comprehensive,
\&                                         see Changes*
\&                                         for details)
\& ======================================================================
\&
\& Larry   0              Classified.     Don\*(Aqt ask.
\&
\& Larry   1.000          1987\-Dec\-18
\&
\&          1.001..10     1988\-Jan\-30
\&          1.011..14     1988\-Feb\-02
\& Schwern  1.0.15        2002\-Dec\-18     Modernization
\& Richard  1.0_16        2003\-Dec\-18
\&
\& Larry   2.000          1988\-Jun\-05
\&
\&          2.001         1988\-Jun\-28
\&
\& Larry   3.000          1989\-Oct\-18
\&
\&          3.001         1989\-Oct\-26
\&          3.002..4      1989\-Nov\-11
\&          3.005         1989\-Nov\-18
\&          3.006..8      1989\-Dec\-22
\&          3.009..13     1990\-Mar\-02
\&          3.014         1990\-Mar\-13
\&          3.015         1990\-Mar\-14
\&          3.016..18     1990\-Mar\-28
\&          3.019..27     1990\-Aug\-10     User subs.
\&          3.028         1990\-Aug\-14
\&          3.029..36     1990\-Oct\-17
\&          3.037         1990\-Oct\-20
\&          3.040         1990\-Nov\-10
\&          3.041         1990\-Nov\-13
\&          3.042..43     1991\-Jan\-??
\&          3.044         1991\-Jan\-12
\&
\& Larry   4.000          1991\-Mar\-21
\&
\&          4.001..3      1991\-Apr\-12
\&          4.004..9      1991\-Jun\-07
\&          4.010         1991\-Jun\-10
\&          4.011..18     1991\-Nov\-05
\&          4.019         1991\-Nov\-11     Stable.
\&          4.020..33     1992\-Jun\-08
\&          4.034         1992\-Jun\-11
\&          4.035         1992\-Jun\-23
\& Larry    4.036         1993\-Feb\-05     Very stable.
\&
\&          5.000alpha1   1993\-Jul\-31
\&          5.000alpha2   1993\-Aug\-16
\&          5.000alpha3   1993\-Oct\-10
\&          5.000alpha4   1993\-???\-??
\&          5.000alpha5   1993\-???\-??
\&          5.000alpha6   1994\-Mar\-18
\&          5.000alpha7   1994\-Mar\-25
\& Andy     5.000alpha8   1994\-Apr\-04
\& Larry    5.000alpha9   1994\-May\-05     ext appears.
\&          5.000alpha10  1994\-Jun\-11
\&          5.000alpha11  1994\-Jul\-01
\& Andy     5.000a11a     1994\-Jul\-07     To fit 14.
\&          5.000a11b     1994\-Jul\-14
\&          5.000a11c     1994\-Jul\-19
\&          5.000a11d     1994\-Jul\-22
\& Larry    5.000alpha12  1994\-Aug\-04
\& Andy     5.000a12a     1994\-Aug\-08
\&          5.000a12b     1994\-Aug\-15
\&          5.000a12c     1994\-Aug\-22
\&          5.000a12d     1994\-Aug\-22
\&          5.000a12e     1994\-Aug\-22
\&          5.000a12f     1994\-Aug\-24
\&          5.000a12g     1994\-Aug\-24
\&          5.000a12h     1994\-Aug\-24
\& Larry    5.000beta1    1994\-Aug\-30
\& Andy     5.000b1a      1994\-Sep\-06
\& Larry    5.000beta2    1994\-Sep\-14     Core slushified.
\& Andy     5.000b2a      1994\-Sep\-14
\&          5.000b2b      1994\-Sep\-17
\&          5.000b2c      1994\-Sep\-17
\& Larry    5.000beta3    1994\-Sep\-??
\& Andy     5.000b3a      1994\-Sep\-18
\&          5.000b3b      1994\-Sep\-22
\&          5.000b3c      1994\-Sep\-23
\&          5.000b3d      1994\-Sep\-27
\&          5.000b3e      1994\-Sep\-28
\&          5.000b3f      1994\-Sep\-30
\&          5.000b3g      1994\-Oct\-04
\& Andy     5.000b3h      1994\-Oct\-07
\& Larry?   5.000gamma    1994\-Oct\-13?
\&
\& Larry   5.000          1994\-Oct\-17
\&
\& Andy     5.000a        1994\-Dec\-19
\&          5.000b        1995\-Jan\-18
\&          5.000c        1995\-Jan\-18
\&          5.000d        1995\-Jan\-18
\&          5.000e        1995\-Jan\-18
\&          5.000f        1995\-Jan\-18
\&          5.000g        1995\-Jan\-18
\&          5.000h        1995\-Jan\-18
\&          5.000i        1995\-Jan\-26
\&          5.000j        1995\-Feb\-07
\&          5.000k        1995\-Feb\-11
\&          5.000l        1995\-Feb\-21
\&          5.000m        1995\-Feb\-28
\&          5.000n        1995\-Mar\-07
\&          5.000o        1995\-Mar\-13?
\&
\& Larry   5.001          1995\-Mar\-13
\&
\& Andy     5.001a        1995\-Mar\-15
\&          5.001b        1995\-Mar\-31
\&          5.001c        1995\-Apr\-07
\&          5.001d        1995\-Apr\-14
\&          5.001e        1995\-Apr\-18     Stable.
\&          5.001f        1995\-May\-31
\&          5.001g        1995\-May\-25
\&          5.001h        1995\-May\-25
\&          5.001i        1995\-May\-30
\&          5.001j        1995\-Jun\-05
\&          5.001k        1995\-Jun\-06
\&          5.001l        1995\-Jun\-06     Stable.
\&          5.001m        1995\-Jul\-02     Very stable.
\&          5.001n        1995\-Oct\-31     Very unstable.
\&          5.002beta1    1995\-Nov\-21
\&          5.002b1a      1995\-Dec\-04
\&          5.002b1b      1995\-Dec\-04
\&          5.002b1c      1995\-Dec\-04
\&          5.002b1d      1995\-Dec\-04
\&          5.002b1e      1995\-Dec\-08
\&          5.002b1f      1995\-Dec\-08
\& Tom      5.002b1g      1995\-Dec\-21     Doc release.
\& Andy     5.002b1h      1996\-Jan\-05
\&          5.002b2       1996\-Jan\-14
\& Larry    5.002b3       1996\-Feb\-02
\& Andy     5.002gamma    1996\-Feb\-11
\& Larry    5.002delta    1996\-Feb\-27
\&
\& Larry   5.002          1996\-Feb\-29     Prototypes.
\&
\& Charles  5.002_01      1996\-Mar\-25
\&
\&         5.003          1996\-Jun\-25     Security release.
\&
\&          5.003_01      1996\-Jul\-31
\& Nick     5.003_02      1996\-Aug\-10
\& Andy     5.003_03      1996\-Aug\-28
\&          5.003_04      1996\-Sep\-02
\&          5.003_05      1996\-Sep\-12
\&          5.003_06      1996\-Oct\-07
\&          5.003_07      1996\-Oct\-10
\& Chip     5.003_08      1996\-Nov\-19
\&          5.003_09      1996\-Nov\-26
\&          5.003_10      1996\-Nov\-29
\&          5.003_11      1996\-Dec\-06
\&          5.003_12      1996\-Dec\-19
\&          5.003_13      1996\-Dec\-20
\&          5.003_14      1996\-Dec\-23
\&          5.003_15      1996\-Dec\-23
\&          5.003_16      1996\-Dec\-24
\&          5.003_17      1996\-Dec\-27
\&          5.003_18      1996\-Dec\-31
\&          5.003_19      1997\-Jan\-04
\&          5.003_20      1997\-Jan\-07
\&          5.003_21      1997\-Jan\-15
\&          5.003_22      1997\-Jan\-16
\&          5.003_23      1997\-Jan\-25
\&          5.003_24      1997\-Jan\-29
\&          5.003_25      1997\-Feb\-04
\&          5.003_26      1997\-Feb\-10
\&          5.003_27      1997\-Feb\-18
\&          5.003_28      1997\-Feb\-21
\&          5.003_90      1997\-Feb\-25     Ramping up to the 5.004 release.
\&          5.003_91      1997\-Mar\-01
\&          5.003_92      1997\-Mar\-06
\&          5.003_93      1997\-Mar\-10
\&          5.003_94      1997\-Mar\-22
\&          5.003_95      1997\-Mar\-25
\&          5.003_96      1997\-Apr\-01
\&          5.003_97      1997\-Apr\-03     Fairly widely used.
\&          5.003_97a     1997\-Apr\-05
\&          5.003_97b     1997\-Apr\-08
\&          5.003_97c     1997\-Apr\-10
\&          5.003_97d     1997\-Apr\-13
\&          5.003_97e     1997\-Apr\-15
\&          5.003_97f     1997\-Apr\-17
\&          5.003_97g     1997\-Apr\-18
\&          5.003_97h     1997\-Apr\-24
\&          5.003_97i     1997\-Apr\-25
\&          5.003_97j     1997\-Apr\-28
\&          5.003_98      1997\-Apr\-30
\&          5.003_99      1997\-May\-01
\&          5.003_99a     1997\-May\-09
\&          p54rc1        1997\-May\-12     Release Candidates.
\&          p54rc2        1997\-May\-14
\&
\& Chip    5.004          1997\-May\-15     A major maintenance release.
\&
\& Tim      5.004_01\-t1   1997\-???\-??     The 5.004 maintenance track.
\&          5.004_01\-t2   1997\-Jun\-11     aka perl5.004m1t2
\&          5.004_01      1997\-Jun\-13
\&          5.004_01_01   1997\-Jul\-29     aka perl5.004m2t1
\&          5.004_01_02   1997\-Aug\-01     aka perl5.004m2t2
\&          5.004_01_03   1997\-Aug\-05     aka perl5.004m2t3
\&          5.004_02      1997\-Aug\-07
\&          5.004_02_01   1997\-Aug\-12     aka perl5.004m3t1
\&          5.004_03\-t2   1997\-Aug\-13     aka perl5.004m3t2
\&          5.004_03      1997\-Sep\-05
\&          5.004_04\-t1   1997\-Sep\-19     aka perl5.004m4t1
\&          5.004_04\-t2   1997\-Sep\-23     aka perl5.004m4t2
\&          5.004_04\-t3   1997\-Oct\-10     aka perl5.004m4t3
\&          5.004_04\-t4   1997\-Oct\-14     aka perl5.004m4t4
\&          5.004_04      1997\-Oct\-15
\&          5.004_04\-m1   1998\-Mar\-04     (5.004m5t1) Maint. trials for 5.004_05.
\&          5.004_04\-m2   1998\-May\-01
\&          5.004_04\-m3   1998\-May\-15
\&          5.004_04\-m4   1998\-May\-19
\&          5.004_05\-MT5  1998\-Jul\-21
\&          5.004_05\-MT6  1998\-Oct\-09
\&          5.004_05\-MT7  1998\-Nov\-22
\&          5.004_05\-MT8  1998\-Dec\-03
\& Chip     5.004_05\-MT9  1999\-Apr\-26
\&          5.004_05      1999\-Apr\-29
\&
\& Malcolm  5.004_50      1997\-Sep\-09     The 5.005 development track.
\&          5.004_51      1997\-Oct\-02
\&          5.004_52      1997\-Oct\-15
\&          5.004_53      1997\-Oct\-16
\&          5.004_54      1997\-Nov\-14
\&          5.004_55      1997\-Nov\-25
\&          5.004_56      1997\-Dec\-18
\&          5.004_57      1998\-Feb\-03
\&          5.004_58      1998\-Feb\-06
\&          5.004_59      1998\-Feb\-13
\&          5.004_60      1998\-Feb\-20
\&          5.004_61      1998\-Feb\-27
\&          5.004_62      1998\-Mar\-06
\&          5.004_63      1998\-Mar\-17
\&          5.004_64      1998\-Apr\-03
\&          5.004_65      1998\-May\-15
\&          5.004_66      1998\-May\-29
\& Sarathy  5.004_67      1998\-Jun\-15
\&          5.004_68      1998\-Jun\-23
\&          5.004_69      1998\-Jun\-29
\&          5.004_70      1998\-Jul\-06
\&          5.004_71      1998\-Jul\-09
\&          5.004_72      1998\-Jul\-12
\&          5.004_73      1998\-Jul\-13
\&          5.004_74      1998\-Jul\-14     5.005 beta candidate.
\&          5.004_75      1998\-Jul\-15     5.005 beta1.
\&          5.004_76      1998\-Jul\-21     5.005 beta2.
\&
\& Sarathy  5.005         1998\-Jul\-22     Oneperl.
\&
\& Sarathy  5.005_01      1998\-Jul\-27     The 5.005 maintenance track.
\&          5.005_02\-T1   1998\-Aug\-02
\&          5.005_02\-T2   1998\-Aug\-05
\&          5.005_02      1998\-Aug\-08
\& Graham   5.005_03\-MT1  1998\-Nov\-30
\&          5.005_03\-MT2  1999\-Jan\-04
\&          5.005_03\-MT3  1999\-Jan\-17
\&          5.005_03\-MT4  1999\-Jan\-26
\&          5.005_03\-MT5  1999\-Jan\-28
\&          5.005_03\-MT6  1999\-Mar\-05
\&          5.005_03      1999\-Mar\-28
\& Leon     5.005_04\-RC1  2004\-Feb\-05
\&          5.005_04\-RC2  2004\-Feb\-18
\&          5.005_04      2004\-Feb\-23
\&          5.005_05\-RC1  2009\-Feb\-16
\&
\& Sarathy  5.005_50      1998\-Jul\-26     The 5.6 development track.
\&          5.005_51      1998\-Aug\-10
\&          5.005_52      1998\-Sep\-25
\&          5.005_53      1998\-Oct\-31
\&          5.005_54      1998\-Nov\-30
\&          5.005_55      1999\-Feb\-16
\&          5.005_56      1999\-Mar\-01
\&          5.005_57      1999\-May\-25
\&          5.005_58      1999\-Jul\-27
\&          5.005_59      1999\-Aug\-02
\&          5.005_60      1999\-Aug\-02
\&          5.005_61      1999\-Aug\-20
\&          5.005_62      1999\-Oct\-15
\&          5.005_63      1999\-Dec\-09
\&          5.5.640       2000\-Feb\-02
\&          5.5.650       2000\-Feb\-08     beta1
\&          5.5.660       2000\-Feb\-22     beta2
\&          5.5.670       2000\-Feb\-29     beta3
\&          5.6.0\-RC1     2000\-Mar\-09     Release candidate 1.
\&          5.6.0\-RC2     2000\-Mar\-14     Release candidate 2.
\&          5.6.0\-RC3     2000\-Mar\-21     Release candidate 3.
\&
\& Sarathy  5.6.0         2000\-Mar\-22
\&
\& Sarathy  5.6.1\-TRIAL1  2000\-Dec\-18     The 5.6 maintenance track.
\&          5.6.1\-TRIAL2  2001\-Jan\-31
\&          5.6.1\-TRIAL3  2001\-Mar\-19
\&          5.6.1\-foolish 2001\-Apr\-01     The "fools\-gold" release.
\&          5.6.1         2001\-Apr\-08
\& Rafael   5.6.2\-RC1     2003\-Nov\-08
\&          5.6.2         2003\-Nov\-15     Fix new build issues
\&
\& Jarkko   5.7.0         2000\-Sep\-02     The 5.7 track: Development.
\&          5.7.1         2001\-Apr\-09
\&          5.7.2         2001\-Jul\-13     Virtual release candidate 0.
\&          5.7.3         2002\-Mar\-05
\&          5.8.0\-RC1     2002\-Jun\-01
\&          5.8.0\-RC2     2002\-Jun\-21
\&          5.8.0\-RC3     2002\-Jul\-13
\&
\& Jarkko   5.8.0         2002\-Jul\-18
\&
\& Jarkko   5.8.1\-RC1     2003\-Jul\-10     The 5.8 maintenance track
\&          5.8.1\-RC2     2003\-Jul\-11
\&          5.8.1\-RC3     2003\-Jul\-30
\&          5.8.1\-RC4     2003\-Aug\-01
\&          5.8.1\-RC5     2003\-Sep\-22
\&          5.8.1         2003\-Sep\-25
\& Nicholas 5.8.2\-RC1     2003\-Oct\-27
\&          5.8.2\-RC2     2003\-Nov\-03
\&          5.8.2         2003\-Nov\-05
\&          5.8.3\-RC1     2004\-Jan\-07
\&          5.8.3         2004\-Jan\-14
\&          5.8.4\-RC1     2004\-Apr\-05
\&          5.8.4\-RC2     2004\-Apr\-15
\&          5.8.4         2004\-Apr\-21
\&          5.8.5\-RC1     2004\-Jul\-06
\&          5.8.5\-RC2     2004\-Jul\-08
\&          5.8.5         2004\-Jul\-19
\&          5.8.6\-RC1     2004\-Nov\-11
\&          5.8.6         2004\-Nov\-27
\&          5.8.7\-RC1     2005\-May\-18
\&          5.8.7         2005\-May\-30
\&          5.8.8\-RC1     2006\-Jan\-20
\&          5.8.8         2006\-Jan\-31
\&          5.8.9\-RC1     2008\-Nov\-10
\&          5.8.9\-RC2     2008\-Dec\-06
\&          5.8.9         2008\-Dec\-14
\&
\& Hugo     5.9.0         2003\-Oct\-27     The 5.9 development track
\& Rafael   5.9.1         2004\-Mar\-16
\&          5.9.2         2005\-Apr\-01
\&          5.9.3         2006\-Jan\-28
\&          5.9.4         2006\-Aug\-15
\&          5.9.5         2007\-Jul\-07
\&          5.10.0\-RC1    2007\-Nov\-17
\&          5.10.0\-RC2    2007\-Nov\-25
\&
\& Rafael   5.10.0        2007\-Dec\-18
\&
\& David M  5.10.1\-RC1    2009\-Aug\-06     The 5.10 maintenance track
\&          5.10.1\-RC2    2009\-Aug\-18
\&          5.10.1        2009\-Aug\-22
\&
\& Jesse    5.11.0        2009\-Oct\-02     The 5.11 development track
\&          5.11.1        2009\-Oct\-20
\& Leon     5.11.2        2009\-Nov\-20
\& Jesse    5.11.3        2009\-Dec\-20
\& Ricardo  5.11.4        2010\-Jan\-20
\& Steve    5.11.5        2010\-Feb\-20
\& Jesse    5.12.0\-RC0    2010\-Mar\-21
\&          5.12.0\-RC1    2010\-Mar\-29
\&          5.12.0\-RC2    2010\-Apr\-01
\&          5.12.0\-RC3    2010\-Apr\-02
\&          5.12.0\-RC4    2010\-Apr\-06
\&          5.12.0\-RC5    2010\-Apr\-09
\&
\& Jesse    5.12.0        2010\-Apr\-12
\&
\& Jesse    5.12.1\-RC2    2010\-May\-13     The 5.12 maintenance track
\&          5.12.1\-RC1    2010\-May\-09
\&          5.12.1        2010\-May\-16
\&          5.12.2\-RC2    2010\-Aug\-31
\&          5.12.2        2010\-Sep\-06
\& Ricardo  5.12.3\-RC1    2011\-Jan\-09
\& Ricardo  5.12.3\-RC2    2011\-Jan\-14
\& Ricardo  5.12.3\-RC3    2011\-Jan\-17
\& Ricardo  5.12.3        2011\-Jan\-21
\& Leon     5.12.4\-RC1    2011\-Jun\-08
\& Leon     5.12.4        2011\-Jun\-20
\& Dominic  5.12.5        2012\-Nov\-10
\&
\& Leon     5.13.0        2010\-Apr\-20     The 5.13 development track
\& Ricardo  5.13.1        2010\-May\-20
\& Matt     5.13.2        2010\-Jun\-22
\& David G  5.13.3        2010\-Jul\-20
\& Florian  5.13.4        2010\-Aug\-20
\& Steve    5.13.5        2010\-Sep\-19
\& Miyagawa 5.13.6        2010\-Oct\-20
\& BinGOs   5.13.7        2010\-Nov\-20
\& Zefram   5.13.8        2010\-Dec\-20
\& Jesse    5.13.9        2011\-Jan\-20
\& \*(Aevar     5.13.10       2011\-Feb\-20
\& Florian  5.13.11       2011\-Mar\-20
\& Jesse    5.14.0RC1     2011\-Apr\-20
\& Jesse    5.14.0RC2     2011\-May\-04
\& Jesse    5.14.0RC3     2011\-May\-11
\&
\& Jesse    5.14.0        2011\-May\-14     The 5.14 maintenance track
\& Jesse    5.14.1        2011\-Jun\-16
\& Florian  5.14.2\-RC1    2011\-Sep\-19
\&          5.14.2        2011\-Sep\-26
\& Dominic  5.14.3        2012\-Oct\-12
\& David M  5.14.4\-RC1    2013\-Mar\-05
\& David M  5.14.4\-RC2    2013\-Mar\-07
\& David M  5.14.4        2013\-Mar\-10
\&
\& David G  5.15.0        2011\-Jun\-20     The 5.15 development track
\& Zefram   5.15.1        2011\-Jul\-20
\& Ricardo  5.15.2        2011\-Aug\-20
\& Stevan   5.15.3        2011\-Sep\-20
\& Florian  5.15.4        2011\-Oct\-20
\& Steve    5.15.5        2011\-Nov\-20
\& Dave R   5.15.6        2011\-Dec\-20
\& BinGOs   5.15.7        2012\-Jan\-20
\& Max M    5.15.8        2012\-Feb\-20
\& Abigail  5.15.9        2012\-Mar\-20
\& Ricardo  5.16.0\-RC0    2012\-May\-10
\& Ricardo  5.16.0\-RC1    2012\-May\-14
\& Ricardo  5.16.0\-RC2    2012\-May\-15
\&
\& Ricardo  5.16.0        2012\-May\-20     The 5.16 maintenance track
\& Ricardo  5.16.1        2012\-Aug\-08
\& Ricardo  5.16.2        2012\-Nov\-01
\& Ricardo  5.16.3\-RC1    2013\-Mar\-06
\& Ricardo  5.16.3        2013\-Mar\-11
\&
\& Zefram   5.17.0        2012\-May\-26     The 5.17 development track
\& Jesse L  5.17.1        2012\-Jun\-20
\& TonyC    5.17.2        2012\-Jul\-20
\& Steve    5.17.3        2012\-Aug\-20
\& Florian  5.17.4        2012\-Sep\-20
\& Florian  5.17.5        2012\-Oct\-20
\& Ricardo  5.17.6        2012\-Nov\-20
\& Dave R   5.17.7        2012\-Dec\-18
\& Aaron    5.17.8        2013\-Jan\-20
\& BinGOs   5.17.9        2013\-Feb\-20
\& Max M    5.17.10       2013\-Mar\-21
\&
\& Ricardo  5.18.0\-RC1    2013\-May\-11     The 5.18 maintenance track
\& Ricardo  5.18.0\-RC2    2013\-May\-12
\& Ricardo  5.18.0\-RC3    2013\-May\-13
\& Ricardo  5.18.0\-RC4    2013\-May\-15
\& Ricardo  5.18.0        2013\-May\-18
\& Ricardo  5.18.1\-RC1    2013\-Aug\-01
\& Ricardo  5.18.1\-RC2    2013\-Aug\-03
\& Ricardo  5.18.1\-RC3    2013\-Aug\-08
\& Ricardo  5.18.1        2013\-Aug\-12
\& Ricardo  5.18.2        2014\-Jan\-06
\&
\& Ricardo   5.19.0       2013\-May\-20     The 5.19 development track
\& David G   5.19.1       2013\-Jun\-21
\& Aristotle 5.19.2       2013\-Jul\-22
.Ve
.SS "\s-1SELECTED RELEASE SIZES\s0"
.IX Subsection "SELECTED RELEASE SIZES"
For example the notation \*(L"core: 212  29\*(R" in the release 1.000 means that
it had in the core 212 kilobytes, in 29 files.  The \*(L"core\*(R"..\*(L"doc\*(R" are
explained below.
.PP
.Vb 2
\& release        core       lib         ext        t         doc
\& ======================================================================
\&
\& 1.000           212  29      \-   \-      \-    \-     38   51     62   3
\& 1.014           219  29      \-   \-      \-    \-     39   52     68   4
\& 2.000           309  31      2   3      \-    \-     55   57     92   4
\& 2.001           312  31      2   3      \-    \-     55   57     94   4
\& 3.000           508  36     24  11      \-    \-     79   73    156   5
\& 3.044           645  37     61  20      \-    \-     90   74    190   6
\& 4.000           635  37     59  20      \-    \-     91   75    198   4
\& 4.019           680  37     85  29      \-    \-     98   76    199   4
\& 4.036           709  37     89  30      \-    \-     98   76    208   5
\& 5.000alpha2     785  50    114  32      \-    \-    112   86    209   5
\& 5.000alpha3     801  50    117  33      \-    \-    121   87    209   5
\& 5.000alpha9    1022  56    149  43    116   29    125   90    217   6
\& 5.000a12h       978  49    140  49    205   46    152   97    228   9
\& 5.000b3h       1035  53    232  70    216   38    162   94    218  21
\& 5.000          1038  53    250  76    216   38    154   92    536  62
\& 5.001m         1071  54    388  82    240   38    159   95    544  29
\& 5.002          1121  54    661 101    287   43    155   94    847  35
\& 5.003          1129  54    680 102    291   43    166  100    853  35
\& 5.003_07       1231  60    748 106    396   53    213  137    976  39
\& 5.004          1351  60   1230 136    408   51    355  161   1587  55
\& 5.004_01       1356  60   1258 138    410   51    358  161   1587  55
\& 5.004_04       1375  60   1294 139    413   51    394  162   1629  55
\& 5.004_05       1463  60   1435 150    394   50    445  175   1855  59
\& 5.004_51       1401  61   1260 140    413   53    358  162   1594  56
\& 5.004_53       1422  62   1295 141    438   70    394  162   1637  56
\& 5.004_56       1501  66   1301 140    447   74    408  165   1648  57
\& 5.004_59       1555  72   1317 142    448   74    424  171   1678  58
\& 5.004_62       1602  77   1327 144    629   92    428  173   1674  58
\& 5.004_65       1626  77   1358 146    615   92    446  179   1698  60
\& 5.004_68       1856  74   1382 152    619   92    463  187   1784  60
\& 5.004_70       1863  75   1456 154    675   92    494  194   1809  60
\& 5.004_73       1874  76   1467 152    762  102    506  196   1883  61
\& 5.004_75       1877  76   1467 152    770  103    508  196   1896  62
\& 5.005          1896  76   1469 152    795  103    509  197   1945  63
\& 5.005_03       1936  77   1541 153    813  104    551  201   2176  72
\& 5.005_50       1969  78   1842 301    795  103    514  198   1948  63
\& 5.005_53       1999  79   1885 303    806  104    602  224   2002  67
\& 5.005_56       2086  79   1970 307    866  113    672  238   2221  75
\& 5.6.0          2820  79   2626 364   1096  129    863  280   2840  93
\& 5.6.1          2946  78   2921 430   1171  132   1024  304   3330 102
\& 5.6.2          2947  78   3143 451   1247  127   1303  387   3406 102
\& 5.7.0          2977  80   2801 425   1250  132    975  307   3206 100
\& 5.7.1          3351  84   3442 455   1944  167   1334  357   3698 124
\& 5.7.2          3491  87   4858 618   3290  298   1598  449   3910 139
\& 5.7.3          3299  85   4295 537   2196  300   2176  626   4171 120
\& 5.8.0          3489  87   4533 585   2437  331   2588  726   4368 125
\& 5.8.1          3674  90   5104 623   2604  353   2983  836   4625 134
\& 5.8.2          3633  90   5111 623   2623  357   3019  848   4634 135
\& 5.8.3          3625  90   5141 624   2660  363   3083  869   4669 136
\& 5.8.4          3653  90   5170 634   2684  368   3148  885   4689 137
\& 5.8.5          3664  90   4260 303   2707  369   3208  898   4689 138
\& 5.8.6          3690  90   4271 303   3141  396   3411  925   4709 139
\& 5.8.7          3788  90   4322 307   3297  401   3485  964   4744 141
\& 5.8.8          3895  90   4357 314   3409  431   3622 1017   4979 144
\& 5.8.9          4132  93   5508 330   3826  529   4364 1234   5348 152
\& 5.9.0          3657  90   4951 626   2603  354   3011  841   4609 135
\& 5.9.1          3580  90   5196 634   2665  367   3186  889   4725 138
\& 5.9.2          3863  90   4654 312   3283  403   3551  973   4800 142
\& 5.9.3          4096  91   5318 381   4806  597   4272 1214   5139 147
\& 5.9.4          4393  94   5718 415   4578  642   4646 1310   5335 153
\& 5.9.5          4681  96   6849 479   4827  671   5155 1490   5572 159
\& 5.10.0         4710  97   7050 486   4899  673   5275 1503   5673 160
\& 5.10.1         4858  98   7440 519   6195  921   6147 1751   5151 163
\& 5.12.0         4999 100   1146 121  15227 2176   6400 1843   5342 168
\& 5.12.1         5000 100   1146 121  15283 2178   6407 1846   5354 169
\& 5.12.2         5003 100   1146 121  15404 2178   6413 1846   5376 170
\& 5.12.3         5004 100   1146 121  15529 2180   6417 1848   5391 171
\& 5.14.0         5328 104   1100 114  17779 2479   7697 2130   5871 188
\& 5.16.0         5562 109   1077  80  20504 2702   8750 2375   4815 152
\& 5.18.0         5892 113   1088  79  20077 2760   9365 2439   4943 154
.Ve
.PP
The \*(L"core\*(R"...\*(L"doc\*(R" mean the following files from the Perl source code
distribution.  The glob notation ** means recursively, (.) means
regular files.
.PP
.Vb 6
\& core   *.[hcy]
\& lib    lib/**/*.p[ml]
\& ext    ext/**/*.{[hcyt],xs,pm} (for \-5.10.1) or
\&        {dist,ext,cpan}/**/*.{[hcyt],xs,pm} (for 5.12.0\-)
\& t      t/**/*(.) (for 1\-5.005_56) or **/*.t (for 5.6.0\-5.7.3)
\& doc    {README*,INSTALL,*[_.]man{,.?},pod/**/*.pod}
.Ve
.PP
Here are some statistics for the other subdirectories and one file in
the Perl source distribution for somewhat more selected releases.
.PP
.Vb 2
\& ======================================================================
\&   Legend:  kB   #
\&
\&                  1.014      2.001      3.044
\&
\& Configure      31    1    37    1    62    1
\& eg              \-    \-    34   28    47   39
\& h2pl            \-    \-     \-    \-    12   12
\& msdos           \-    \-     \-    \-    41   13
\& os2             \-    \-     \-    \-    63   22
\& usub            \-    \-     \-    \-    21   16
\& x2p           103   17   104   17   137   17
\&
\& ======================================================================
\&
\&                  4.000      4.019      4.036
\&
\& atarist         \-    \-     \-    \-   113   31
\& Configure      73    1    83    1    86    1
\& eg             47   39    47   39    47   39
\& emacs          67    4    67    4    67    4
\& h2pl           12   12    12   12    12   12
\& hints           \-    \-     5   42    11   56
\& msdos          57   15    58   15    60   15
\& os2            81   29    81   29   113   31
\& usub           25    7    43    8    43    8
\& x2p           147   18   152   19   154   19
\&
\& ======================================================================
\&
\&                5.000a2  5.000a12h   5.000b3h      5.000     5.001m
\&
\& apollo          8    3     8    3     8    3     8    3     8    3
\& atarist       113   31   113   31     \-    \-     \-    \-     \-    \-
\& bench           \-    \-     0    1     \-    \-     \-    \-     \-    \-
\& Bugs            2    5    26    1     \-    \-     \-    \-     \-    \-
\& dlperl         40    5     \-    \-     \-    \-     \-    \-     \-    \-
\& do            127   71     \-    \-     \-    \-     \-    \-     \-    \-
\& Configure       \-    \-   153    1   159    1   160    1   180    1
\& Doc             \-    \-    26    1    75    7    11    1    11    1
\& eg             79   58    53   44    51   43    54   44    54   44
\& emacs          67    4   104    6   104    6   104    1   104    6
\& h2pl           12   12    12   12    12   12    12   12    12   12
\& hints          11   56    12   46    18   48    18   48    44   56
\& msdos          60   15    60   15     \-    \-     \-    \-     \-    \-
\& os2           113   31   113   31     \-    \-     \-    \-     \-    \-
\& U               \-    \-    62    8   112   42     \-    \-     \-    \-
\& usub           43    8     \-    \-     \-    \-     \-    \-     \-    \-
\& vms             \-    \-    80    7   123    9   184   15   304   20
\& x2p           171   22   171   21   162   20   162   20   279   20
\&
\& ======================================================================
\&
\&                  5.002      5.003   5.003_07
\&
\& Configure     201    1   201    1   217    1
\& eg             54   44    54   44    54   44
\& emacs         108    1   108    1   143    1
\& h2pl           12   12    12   12    12   12
\& hints          73   59    77   60    90   62
\& os2            84   17    56   10   117   42
\& plan9           \-    \-     \-    \-    79   15
\& Porting         \-    \-     \-    \-    51    1
\& utils          87    7    88    7    97    7
\& vms           500   24   475   26   505   27
\& x2p           280   20   280   20   280   19
\&
\& ======================================================================
\&
\&                  5.004   5.004_04   5.004_62   5.004_65   5.004_68
\&
\& beos            \-    \-     \-    \-     \-    \-      1   1      1   1
\& Configure     225    1   225    1   240    1    248   1    256   1
\& cygwin32       23    5    23    5    23    5     24   5     24   5
\& djgpp           \-    \-     \-    \-    14    5     14   5     14   5
\& eg             81   62    81   62    81   62     81  62     81  62
\& emacs         194    1   204    1   212    2    212   2    212   2
\& h2pl           12   12    12   12    12   12     12  12     12  12
\& hints         129   69   132   71   144   72    151  74    155  74
\& os2           121   42   127   42   127   44    129  44    129  44
\& plan9          82   15    82   15    82   15     82  15     82  15
\& Porting        94    2   109    4   203    6    234   8    241   9
\& qnx             1    2     1    2     1    2      1   2      1   2
\& utils         112    8   118    8   124    8    156   9    159   9
\& vms           518   34   524   34   538   34    569  34    569  34
\& win32         285   33   378   36   470   39    493  39    575  41
\& x2p           281   19   281   19   281   19    282  19    281  19
\&
\& ======================================================================
\&
\&               5.004_70   5.004_73   5.004_75      5.005   5.005_03
\&
\& apollo          \-    \-     \-    \-     \-    \-     \-    \-      0   1
\& beos            1    1     1    1     1    1     1    1      1   1
\& Configure     256    1   256    1   264    1   264    1    270   1
\& cygwin32       24    5    24    5    24    5    24    5     24   5
\& djgpp          14    5    14    5    14    5    14    5     15   5
\& eg             86   65    86   65    86   65    86   65     86  65
\& emacs         262    2   262    2   262    2   262    2    274   2
\& h2pl           12   12    12   12    12   12    12   12     12  12
\& hints         157   74   157   74   159   74   160   74    179  77
\& mint            \-    \-     \-    \-     \-    \-     \-    \-      4   7
\& mpeix           \-    \-     \-    \-     5    3     5    3      5   3
\& os2           129   44   139   44   142   44   143   44    148  44
\& plan9          82   15    82   15    82   15    82   15     82  15
\& Porting       241    9   253    9   259   10   264   12    272  13
\& qnx             1    2     1    2     1    2     1    2      1   2
\& utils         160    9   160    9   160    9   160    9    164   9
\& vms           570   34   572   34   573   34   575   34    583  34
\& vos             \-    \-     \-    \-     \-    \-     \-   \-     156  10
\& win32         577   41   585   41   585   41   587   41    600  42
\& x2p           281   19   281   19   281   19   281   19    281  19
\&
\& ======================================================================
\&
\&                  5.6.0      5.6.1      5.6.2      5.7.3
\&
\& apollo          8    3     8    3     8    3     8    3
\& beos            5    2     5    2     5    2     6    4
\& Configure     346    1   361    1   363    1   394    1
\& Cross           \-    \-     \-    \-     \-    \-     4    2
\& djgpp          19    6    19    6    19    6    21    7
\& eg            112   71   112   71   112   71     \-    \-
\& emacs         303    4   319    4   319    4   319    4
\& epoc           29    8    35    8    35    8    36    8
\& h2pl           24   15    24   15    24   15    24   15
\& hints         242   83   250   84   321   89   272   87
\& mint           11    9    11    9    11    9    11    9
\& mpeix           9    4     9    4     9    4     9    4
\& NetWare         \-    \-     \-    \-     \-    \-   423   57
\& os2           214   59   224   60   224   60   357   66
\& plan9          92   17    92   17    92   17    85   15
\& Porting       361   15   390   16   390   16   425   21
\& qnx             5    3     5    3     5    3     5    3
\& utils         228   12   221   11   222   11   267   13
\& uts             \-    \-     \-    \-     \-    \-    12    3
\& vmesa          25    4    25    4    25    4    25    4
\& vms           686   38   627   38   627   38   649   36
\& vos           227   12   249   15   248   15   281   17
\& win32         755   41   782   42   801   42  1006   50
\& x2p           307   20   307   20   307   20   345   20
\&
\& ======================================================================
\&
\&                  5.8.0      5.8.1      5.8.2      5.8.3      5.8.4
\&
\& apollo          8    3     8    3     8    3     8    3     8    3
\& beos            6    4     6    4     6    4     6    4     6    4
\& Configure     472    1   493    1   493    1   493    1   494    1
\& Cross           4    2    45   10    45   10    45   10    45   10
\& djgpp          21    7    21    7    21    7    21    7    21    7
\& emacs         319    4   329    4   329    4   329    4   329    4
\& epoc           33    8    33    8    33    8    33    8    33    8
\& h2pl           24   15    24   15    24   15    24   15    24   15
\& hints         294   88   321   89   321   89   321   89   348   91
\& mint           11    9    11    9    11    9    11    9    11    9
\& mpeix          24    5    25    5    25    5    25    5    25    5
\& NetWare       488   61   490   61   490   61   490   61   488   61
\& os2           361   66   445   67   450   67   488   67   488   67
\& plan9          85   15   325   17   325   17   325   17   321   17
\& Porting       479   22   537   32   538   32   539   32   538   33
\& qnx             5    3     5    3     5    3     5    3     5    3
\& utils         275   15   258   16   258   16   263   19   263   19
\& uts            12    3    12    3    12    3    12    3    12    3
\& vmesa          25    4    25    4    25    4    25    4    25    4
\& vms           648   36   654   36   654   36   656   36   656   36
\& vos           330   20   335   20   335   20   335   20   335   20
\& win32        1062   49  1125   49  1127   49  1126   49  1181   56
\& x2p           347   20   348   20   348   20   348   20   348   20
\&
\& ======================================================================
\&
\&                  5.8.5      5.8.6      5.8.7      5.8.8      5.8.9
\&
\& apollo          8    3     8    3     8    3     8    3     8    3
\& beos            6    4     6    4     8    4     8    4     8    4
\& Configure     494    1   494    1   495    1   506    1   520    1
\& Cross          45   10    45   10    45   10    45   10    46   10
\& djgpp          21    7    21    7    21    7    21    7    21    7
\& emacs         329    4   329    4   329    4   329    4   406    4
\& epoc           33    8    33    8    33    8    34    8    35    8
\& h2pl           24   15    24   15    24   15    24   15    24   15
\& hints         350   91   352   91   355   94   360   94   387   99
\& mint           11    9    11    9    11    9    11    9    11    9
\& mpeix          25    5    25    5    25    5    49    6    49    6
\& NetWare       488   61   488   61   488   61   490   61   491   61
\& os2           488   67   488   67   488   67   488   67   552   70
\& plan9         321   17   321   17   321   17   322   17   324   17
\& Porting       538   34   548   35   549   35   564   37   625   41
\& qnx             5    3     5    3     5    3     5    3     5    3
\& utils         265   19   265   19   266   19   267   19   281   21
\& uts            12    3    12    3    12    3    12    3    12    3
\& vmesa          25    4    25    4    25    4    25    4    25    4
\& vms           657   36   658   36   662   36   664   36   716   35
\& vos           335   20   335   20   335   20   336   21   345   22
\& win32        1183   56  1190   56  1199   56  1219   56  1484   68
\& x2p           349   20   349   20   349   20   349   19   350   19
\&
\& ======================================================================
\&
\&                  5.9.0      5.9.1      5.9.2      5.9.3      5.9.4
\&
\& apollo          8    3     8    3     8    3     8    3     8    3
\& beos            6    4     6    4     8    4     8    4     8    4
\& Configure     493    1   493    1   495    1   508    1   512    1
\& Cross          45   10    45   10    45   10    45   10    46   10
\& djgpp          21    7    21    7    21    7    21    7    21    7
\& emacs         329    4   329    4   329    4   329    4   329    4
\& epoc           33    8    33    8    33    8    34    8    34    8
\& h2pl           24   15    24   15    24   15    24   15    24   15
\& hints         321   89   346   91   355   94   359   94   366   96
\& mad             \-    \-     \-    \-     \-    \-     \-    \-   174    6
\& mint           11    9    11    9    11    9    11    9    11    9
\& mpeix          25    5    25    5    25    5    49    6    49    6
\& NetWare       489   61   487   61   487   61   489   61   489   61
\& os2           444   67   488   67   488   67   488   67   488   67
\& plan9         325   17   321   17   321   17   322   17   323   17
\& Porting       537   32   536   33   549   36   564   38   576   38
\& qnx             5    3     5    3     5    3     5    3     5    3
\& symbian         \-    \-     \-    \-     \-    \-   293   53   293   53
\& utils         258   16   263   19   268   20   273   23   275   24
\& uts            12    3    12    3    12    3    12    3    12    3
\& vmesa          25    4    25    4    25    4    25    4    25    4
\& vms           660   36   547   33   553   33   661   33   696   33
\& vos            11    7    11    7    11    7    11    7    11    7
\& win32        1120   49  1124   51  1191   56  1209   56  1719   90
\& x2p           348   20   348   20   349   20   349   19   349   19
\&
\& ======================================================================
\&
\&                  5.9.5     5.10.0     5.10.1     5.12.0     5.12.1
\&
\& apollo          8    3     8    3     0    3     0    3     0    3
\& beos            8    4     8    4     4    4     4    4     4    4
\& Configure     518    1   518    1   533    1   536    1   536    1
\& Cross         122   15   122   15   119   15   118   15   118   15
\& djgpp          21    7    21    7    17    7    17    7    17    7
\& emacs         329    4   406    4   402    4   402    4   402    4
\& epoc           34    8    35    8    31    8    31    8    31    8
\& h2pl           24   15    24   15    12   15    12   15    12   15
\& hints         377   98   381   98   385  100   368   97   368   97
\& mad           182    8   182    8   174    8   174    8   174    8
\& mint           11    9    11    9     3    9     \-    \-     \-    \-
\& mpeix          49    6    49    6    45    6    45    6    45    6
\& NetWare       489   61   489   61   465   61   466   61   466   61
\& os2           552   70   552   70   507   70   507   70   507   70
\& plan9         324   17   324   17   316   17   316   17   316   17
\& Porting       627   40   632   40   933   53   749   54   749   54
\& qnx             5    3     5    4     1    4     1    4     1    4
\& symbian       300   54   300   54   290   54   288   54   288   54
\& utils         260   26   264   27   268   27   269   27   269   27
\& uts            12    3    12    3     8    3     8    3     8    3
\& vmesa          25    4    25    4    21    4    21    4    21    4
\& vms           690   32   722   32   693   30   645   18   645   18
\& vos            19    8    19    8    16    8    16    8    16    8
\& win32        1482   68  1485   68  1497   70  1841   73  1841   73
\& x2p           349   19   349   19   345   19   345   19   345   19
\&
\& ======================================================================
\&
\&                 5.12.2     5.12.3      5.14.0     5.16.0       5.18.0
\&
\& apollo          0    3     0    3      \-    \-     \-    \-      \-     \-
\& beos            4    4     4    4      5    4     5    4      \-     \-
\& Configure     536    1   536    1    539    1   547    1    550     1
\& Cross         118   15   118   15    118   15   118   15    118    15
\& djgpp          17    7    17    7     18    7    18    7     18     7
\& emacs         402    4   402    4      \-    \-     \-    \-      \-     \-
\& epoc           31    8    31    8     32    8    30    8      \-     \-
\& h2pl           12   15    12   15     15   15    15   15     13    15
\& hints         368   97   368   97    370   96   371   96    354    91
\& mad           174    8   174    8    176    8   176    8    174     8
\& mpeix          45    6    45    6     46    6    46    6      \-     \-
\& NetWare       466   61   466   61    473   61   472   61    469    61
\& os2           507   70   507   70    518   70   519   70    510    70
\& plan9         316   17   316   17    319   17   319   17    318    17
\& Porting       750   54   750   54    855   60  1093   69   1149    70
\& qnx             1    4     1    4      2    4     2    4      1     4
\& symbian       288   54   288   54    292   54   292   54    290    54
\& utils         269   27   269   27    249   29   245   30    246    31
\& uts             8    3     8    3      9    3     9    3      \-     \-
\& vmesa          21    4    21    4     22    4    22    4      \-     \-
\& vms           646   18   644   18    639   17   571   15    564    15
\& vos            16    8    16    8     17    8     9    7      8     7
\& win32        1841   73  1841   73   1833   72  1655   67   1157    62
\& x2p           345   19   345   19    346   19   345   19    344    20
.Ve
.SS "\s-1SELECTED PATCH SIZES\s0"
.IX Subsection "SELECTED PATCH SIZES"
The \*(L"diff lines kB\*(R" means that for example the patch 5.003_08, to be
applied on top of the 5.003_07 (or whatever was before the 5.003_08)
added lines for 110 kilobytes, it removed lines for 19 kilobytes, and
changed lines for 424 kilobytes.  Just the lines themselves are
counted, not their context.  The \*(L"+ \- !\*(R" become from the \fIdiff\fR\|(1)
context diff output format.
.PP
.Vb 4
\& Pump\-  Release         Date              diff lines kB
\& king                                     \-\-\-\-\-\-\-\-\-\-\-\-\-
\&                                          +     \-     !
\& ======================================================================
\&
\& Chip     5.003_08      1996\-Nov\-19     110    19   424
\&          5.003_09      1996\-Nov\-26      38     9   248
\&          5.003_10      1996\-Nov\-29      29     2    27
\&          5.003_11      1996\-Dec\-06      73    12   165
\&          5.003_12      1996\-Dec\-19     275     6   436
\&          5.003_13      1996\-Dec\-20      95     1    56
\&          5.003_14      1996\-Dec\-23      23     7   333
\&          5.003_15      1996\-Dec\-23       0     0     1
\&          5.003_16      1996\-Dec\-24      12     3    50
\&          5.003_17      1996\-Dec\-27      19     1    14
\&          5.003_18      1996\-Dec\-31      21     1    32
\&          5.003_19      1997\-Jan\-04      80     3    85
\&          5.003_20      1997\-Jan\-07      18     1   146
\&          5.003_21      1997\-Jan\-15      38    10   221
\&          5.003_22      1997\-Jan\-16       4     0    18
\&          5.003_23      1997\-Jan\-25      71    15   119
\&          5.003_24      1997\-Jan\-29     426     1    20
\&          5.003_25      1997\-Feb\-04      21     8   169
\&          5.003_26      1997\-Feb\-10      16     1    15
\&          5.003_27      1997\-Feb\-18      32    10    38
\&          5.003_28      1997\-Feb\-21      58     4    66
\&          5.003_90      1997\-Feb\-25      22     2    34
\&          5.003_91      1997\-Mar\-01      37     1    39
\&          5.003_92      1997\-Mar\-06      16     3    69
\&          5.003_93      1997\-Mar\-10      12     3    15
\&          5.003_94      1997\-Mar\-22     407     7   200
\&          5.003_95      1997\-Mar\-25      41     1    37
\&          5.003_96      1997\-Apr\-01     283     5   261
\&          5.003_97      1997\-Apr\-03      13     2    34
\&          5.003_97a     1997\-Apr\-05      57     1    27
\&          5.003_97b     1997\-Apr\-08      14     1    20
\&          5.003_97c     1997\-Apr\-10      20     1    16
\&          5.003_97d     1997\-Apr\-13       8     0    16
\&          5.003_97e     1997\-Apr\-15      15     4    46
\&          5.003_97f     1997\-Apr\-17       7     1    33
\&          5.003_97g     1997\-Apr\-18       6     1    42
\&          5.003_97h     1997\-Apr\-24      23     3    68
\&          5.003_97i     1997\-Apr\-25      23     1    31
\&          5.003_97j     1997\-Apr\-28      36     1    49
\&          5.003_98      1997\-Apr\-30     171    12   539
\&          5.003_99      1997\-May\-01       6     0     7
\&          5.003_99a     1997\-May\-09      36     2    61
\&          p54rc1        1997\-May\-12       8     1    11
\&          p54rc2        1997\-May\-14       6     0    40
\&
\&        5.004           1997\-May\-15       4     0     4
\&
\& Tim      5.004_01      1997\-Jun\-13     222    14    57
\&          5.004_02      1997\-Aug\-07     112    16   119
\&          5.004_03      1997\-Sep\-05     109     0    17
\&          5.004_04      1997\-Oct\-15      66     8   173
.Ve
.PP
\fIThe patch-free era\fR
.IX Subsection "The patch-free era"
.PP
In more modern times, named releases don't come as often, and as progress
can be followed (nearly) instantly (with rsync, and since late 2008, git)
patches between versions are no longer provided. However, that doesn't
keep us from calculating how large a patch could have been. Which is
shown in the table below. Unless noted otherwise, the size mentioned is
the patch to bring version x.y.z to x.y.z+1.
.PP
.Vb 2
\& Sarathy  5.6.1         2001\-Apr\-08     531    44   651
\& Rafael   5.6.2         2003\-Nov\-15      20    11  1819
\&
\& Jarkko   5.8.0         2002\-Jul\-18    1205    31   471   From 5.7.3
\&
\&          5.8.1         2003\-Sep\-25     243   102  6162
\& Nicholas 5.8.2         2003\-Nov\-05      10    50   788
\&          5.8.3         2004\-Jan\-14      31    13   360
\&          5.8.4         2004\-Apr\-21      33     8   299
\&          5.8.5         2004\-Jul\-19      11    19   255
\&          5.8.6         2004\-Nov\-27      35     3   192
\&          5.8.7         2005\-May\-30      75    34   778
\&          5.8.8         2006\-Jan\-31     131    42  1251
\&          5.8.9         2008\-Dec\-14     340   132 12988
\&
\& Hugo     5.9.0         2003\-Oct\-27     281   168  7132   From 5.8.0
\& Rafael   5.9.1         2004\-Mar\-16      57   250  2107
\&          5.9.2         2005\-Apr\-01     720    57   858
\&          5.9.3         2006\-Jan\-28    1124   102  1906
\&          5.9.4         2006\-Aug\-15     896    60   862
\&          5.9.5         2007\-Jul\-07    1149   128  1062
\&
\&          5.10.0        2007\-Dec\-18      50    31 13111   From 5.9.5
.Ve
.SH "THE KEEPERS OF THE RECORDS"
.IX Header "THE KEEPERS OF THE RECORDS"
Jarkko Hietaniemi <\fIjhi@iki.fi\fR>.
.PP
Thanks to the collective memory of the Perlfolk.  In addition to the
Keepers of the Pumpkin also Alan Champion, Mark Dominus,
Andreas Ko\*:nig, John Macdonald, Matthias Neeracher, Jeff Okamoto,
Michael Peppler, Randal Schwartz, and Paul D. Smith sent corrections
and additions. Abigail added file and patch size data for the 5.6.0 \- 5.10
era.
     osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perlhist5.16.1                               0100644 0001750 0001750 00000144611 12566207420 023107  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLHIST 1"
.TH PERLHIST 1 "2013-03-11" "perl v5.16.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlhist \- the Perl history records
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document aims to record the Perl source code releases.
.SH "INTRODUCTION"
.IX Header "INTRODUCTION"
Perl history in brief, by Larry Wall:
.PP
.Vb 9
\&    Perl 0 introduced Perl to my officemates.
\&    Perl 1 introduced Perl to the world, and changed /\e(...\e|...\e)/ to
\&        /(...|...)/.  \e(Dan Faigin still hasn\*(Aqt forgiven me. :\-\e)
\&    Perl 2 introduced Henry Spencer\*(Aqs regular expression package.
\&    Perl 3 introduced the ability to handle binary data (embedded nulls).
\&    Perl 4 introduced the first Camel book.  Really.  We mostly just
\&        switched version numbers so the book could refer to 4.000.
\&    Perl 5 introduced everything else, including the ability to
\&        introduce everything else.
.Ve
.SH "THE KEEPERS OF THE PUMPKIN"
.IX Header "THE KEEPERS OF THE PUMPKIN"
Larry Wall, Andy Dougherty, Tom Christiansen, Charles Bailey, Nick
Ing-Simmons, Chip Salzenberg, Tim Bunce, Malcolm Beattie, Gurusamy
Sarathy, Graham Barr, Jarkko Hietaniemi, Hugo van der Sanden,
Michael Schwern, Rafael Garcia-Suarez, Nicholas Clark, Richard Clamp,
Leon Brocard, Dave Mitchell, Jesse Vincent, Ricardo Signes, Steve Hay,
Matt S Trout, David Golden, Florian Ragwitz, Tatsuhiko Miyagawa,
Chris \f(CW\*(C`BinGOs\*(C'\fR Williams, Zefram, \*(AEvar Arnfjo\*:r\*(d- Bjarmason, Stevan
Little, Dave Rolsky, Max Maischein, Abigail, Jesse Luehrs and Tony
Cook.
.SS "\s-1PUMPKIN\s0?"
.IX Subsection "PUMPKIN?"
[from Porting/pumpkin.pod in the Perl source code distribution]
.PP
Chip Salzenberg gets credit for that, with a nod to his cow orker,
David Croy.  We had passed around various names (baton, token, hot
potato) but none caught on.  Then, Chip asked:
.PP
[begin quote]
.PP
.Vb 1
\&   Who has the patch pumpkin?
.Ve
.PP
To explain:  David Croy once told me that at a previous job,
there was one tape drive and multiple systems that used it for backups.
But instead of some high-tech exclusion software, they used a low-tech
method to prevent multiple simultaneous backups: a stuffed pumpkin.
No one was allowed to make backups unless they had the \*(L"backup pumpkin\*(R".
.PP
[end quote]
.PP
The name has stuck.  The holder of the pumpkin is sometimes called
the pumpking (keeping the source afloat?) or the pumpkineer (pulling
the strings?).
.SH "THE RECORDS"
.IX Header "THE RECORDS"
.Vb 6
\& Pump\-  Release         Date            Notes
\& king                                   (by no means
\&                                         comprehensive,
\&                                         see Changes*
\&                                         for details)
\& ======================================================================
\&
\& Larry   0              Classified.     Don\*(Aqt ask.
\&
\& Larry   1.000          1987\-Dec\-18
\&
\&          1.001..10     1988\-Jan\-30
\&          1.011..14     1988\-Feb\-02
\& Schwern  1.0.15        2002\-Dec\-18     Modernization
\& Richard  1.0_16        2003\-Dec\-18
\&
\& Larry   2.000          1988\-Jun\-05
\&
\&          2.001         1988\-Jun\-28
\&
\& Larry   3.000          1989\-Oct\-18
\&
\&          3.001         1989\-Oct\-26
\&          3.002..4      1989\-Nov\-11
\&          3.005         1989\-Nov\-18
\&          3.006..8      1989\-Dec\-22
\&          3.009..13     1990\-Mar\-02
\&          3.014         1990\-Mar\-13
\&          3.015         1990\-Mar\-14
\&          3.016..18     1990\-Mar\-28
\&          3.019..27     1990\-Aug\-10     User subs.
\&          3.028         1990\-Aug\-14
\&          3.029..36     1990\-Oct\-17
\&          3.037         1990\-Oct\-20
\&          3.040         1990\-Nov\-10
\&          3.041         1990\-Nov\-13
\&          3.042..43     1991\-Jan\-??
\&          3.044         1991\-Jan\-12
\&
\& Larry   4.000          1991\-Mar\-21
\&
\&          4.001..3      1991\-Apr\-12
\&          4.004..9      1991\-Jun\-07
\&          4.010         1991\-Jun\-10
\&          4.011..18     1991\-Nov\-05
\&          4.019         1991\-Nov\-11     Stable.
\&          4.020..33     1992\-Jun\-08
\&          4.034         1992\-Jun\-11
\&          4.035         1992\-Jun\-23
\& Larry    4.036         1993\-Feb\-05     Very stable.
\&
\&          5.000alpha1   1993\-Jul\-31
\&          5.000alpha2   1993\-Aug\-16
\&          5.000alpha3   1993\-Oct\-10
\&          5.000alpha4   1993\-???\-??
\&          5.000alpha5   1993\-???\-??
\&          5.000alpha6   1994\-Mar\-18
\&          5.000alpha7   1994\-Mar\-25
\& Andy     5.000alpha8   1994\-Apr\-04
\& Larry    5.000alpha9   1994\-May\-05     ext appears.
\&          5.000alpha10  1994\-Jun\-11
\&          5.000alpha11  1994\-Jul\-01
\& Andy     5.000a11a     1994\-Jul\-07     To fit 14.
\&          5.000a11b     1994\-Jul\-14
\&          5.000a11c     1994\-Jul\-19
\&          5.000a11d     1994\-Jul\-22
\& Larry    5.000alpha12  1994\-Aug\-04
\& Andy     5.000a12a     1994\-Aug\-08
\&          5.000a12b     1994\-Aug\-15
\&          5.000a12c     1994\-Aug\-22
\&          5.000a12d     1994\-Aug\-22
\&          5.000a12e     1994\-Aug\-22
\&          5.000a12f     1994\-Aug\-24
\&          5.000a12g     1994\-Aug\-24
\&          5.000a12h     1994\-Aug\-24
\& Larry    5.000beta1    1994\-Aug\-30
\& Andy     5.000b1a      1994\-Sep\-06
\& Larry    5.000beta2    1994\-Sep\-14     Core slushified.
\& Andy     5.000b2a      1994\-Sep\-14
\&          5.000b2b      1994\-Sep\-17
\&          5.000b2c      1994\-Sep\-17
\& Larry    5.000beta3    1994\-Sep\-??
\& Andy     5.000b3a      1994\-Sep\-18
\&          5.000b3b      1994\-Sep\-22
\&          5.000b3c      1994\-Sep\-23
\&          5.000b3d      1994\-Sep\-27
\&          5.000b3e      1994\-Sep\-28
\&          5.000b3f      1994\-Sep\-30
\&          5.000b3g      1994\-Oct\-04
\& Andy     5.000b3h      1994\-Oct\-07
\& Larry?   5.000gamma    1994\-Oct\-13?
\&
\& Larry   5.000          1994\-Oct\-17
\&
\& Andy     5.000a        1994\-Dec\-19
\&          5.000b        1995\-Jan\-18
\&          5.000c        1995\-Jan\-18
\&          5.000d        1995\-Jan\-18
\&          5.000e        1995\-Jan\-18
\&          5.000f        1995\-Jan\-18
\&          5.000g        1995\-Jan\-18
\&          5.000h        1995\-Jan\-18
\&          5.000i        1995\-Jan\-26
\&          5.000j        1995\-Feb\-07
\&          5.000k        1995\-Feb\-11
\&          5.000l        1995\-Feb\-21
\&          5.000m        1995\-Feb\-28
\&          5.000n        1995\-Mar\-07
\&          5.000o        1995\-Mar\-13?
\&
\& Larry   5.001          1995\-Mar\-13
\&
\& Andy     5.001a        1995\-Mar\-15
\&          5.001b        1995\-Mar\-31
\&          5.001c        1995\-Apr\-07
\&          5.001d        1995\-Apr\-14
\&          5.001e        1995\-Apr\-18     Stable.
\&          5.001f        1995\-May\-31
\&          5.001g        1995\-May\-25
\&          5.001h        1995\-May\-25
\&          5.001i        1995\-May\-30
\&          5.001j        1995\-Jun\-05
\&          5.001k        1995\-Jun\-06
\&          5.001l        1995\-Jun\-06     Stable.
\&          5.001m        1995\-Jul\-02     Very stable.
\&          5.001n        1995\-Oct\-31     Very unstable.
\&          5.002beta1    1995\-Nov\-21
\&          5.002b1a      1995\-Dec\-04
\&          5.002b1b      1995\-Dec\-04
\&          5.002b1c      1995\-Dec\-04
\&          5.002b1d      1995\-Dec\-04
\&          5.002b1e      1995\-Dec\-08
\&          5.002b1f      1995\-Dec\-08
\& Tom      5.002b1g      1995\-Dec\-21     Doc release.
\& Andy     5.002b1h      1996\-Jan\-05
\&          5.002b2       1996\-Jan\-14
\& Larry    5.002b3       1996\-Feb\-02
\& Andy     5.002gamma    1996\-Feb\-11
\& Larry    5.002delta    1996\-Feb\-27
\&
\& Larry   5.002          1996\-Feb\-29     Prototypes.
\&
\& Charles  5.002_01      1996\-Mar\-25
\&
\&         5.003          1996\-Jun\-25     Security release.
\&
\&          5.003_01      1996\-Jul\-31
\& Nick     5.003_02      1996\-Aug\-10
\& Andy     5.003_03      1996\-Aug\-28
\&          5.003_04      1996\-Sep\-02
\&          5.003_05      1996\-Sep\-12
\&          5.003_06      1996\-Oct\-07
\&          5.003_07      1996\-Oct\-10
\& Chip     5.003_08      1996\-Nov\-19
\&          5.003_09      1996\-Nov\-26
\&          5.003_10      1996\-Nov\-29
\&          5.003_11      1996\-Dec\-06
\&          5.003_12      1996\-Dec\-19
\&          5.003_13      1996\-Dec\-20
\&          5.003_14      1996\-Dec\-23
\&          5.003_15      1996\-Dec\-23
\&          5.003_16      1996\-Dec\-24
\&          5.003_17      1996\-Dec\-27
\&          5.003_18      1996\-Dec\-31
\&          5.003_19      1997\-Jan\-04
\&          5.003_20      1997\-Jan\-07
\&          5.003_21      1997\-Jan\-15
\&          5.003_22      1997\-Jan\-16
\&          5.003_23      1997\-Jan\-25
\&          5.003_24      1997\-Jan\-29
\&          5.003_25      1997\-Feb\-04
\&          5.003_26      1997\-Feb\-10
\&          5.003_27      1997\-Feb\-18
\&          5.003_28      1997\-Feb\-21
\&          5.003_90      1997\-Feb\-25     Ramping up to the 5.004 release.
\&          5.003_91      1997\-Mar\-01
\&          5.003_92      1997\-Mar\-06
\&          5.003_93      1997\-Mar\-10
\&          5.003_94      1997\-Mar\-22
\&          5.003_95      1997\-Mar\-25
\&          5.003_96      1997\-Apr\-01
\&          5.003_97      1997\-Apr\-03     Fairly widely used.
\&          5.003_97a     1997\-Apr\-05
\&          5.003_97b     1997\-Apr\-08
\&          5.003_97c     1997\-Apr\-10
\&          5.003_97d     1997\-Apr\-13
\&          5.003_97e     1997\-Apr\-15
\&          5.003_97f     1997\-Apr\-17
\&          5.003_97g     1997\-Apr\-18
\&          5.003_97h     1997\-Apr\-24
\&          5.003_97i     1997\-Apr\-25
\&          5.003_97j     1997\-Apr\-28
\&          5.003_98      1997\-Apr\-30
\&          5.003_99      1997\-May\-01
\&          5.003_99a     1997\-May\-09
\&          p54rc1        1997\-May\-12     Release Candidates.
\&          p54rc2        1997\-May\-14
\&
\& Chip    5.004          1997\-May\-15     A major maintenance release.
\&
\& Tim      5.004_01\-t1   1997\-???\-??     The 5.004 maintenance track.
\&          5.004_01\-t2   1997\-Jun\-11     aka perl5.004m1t2
\&          5.004_01      1997\-Jun\-13
\&          5.004_01_01   1997\-Jul\-29     aka perl5.004m2t1
\&          5.004_01_02   1997\-Aug\-01     aka perl5.004m2t2
\&          5.004_01_03   1997\-Aug\-05     aka perl5.004m2t3
\&          5.004_02      1997\-Aug\-07
\&          5.004_02_01   1997\-Aug\-12     aka perl5.004m3t1
\&          5.004_03\-t2   1997\-Aug\-13     aka perl5.004m3t2
\&          5.004_03      1997\-Sep\-05
\&          5.004_04\-t1   1997\-Sep\-19     aka perl5.004m4t1
\&          5.004_04\-t2   1997\-Sep\-23     aka perl5.004m4t2
\&          5.004_04\-t3   1997\-Oct\-10     aka perl5.004m4t3
\&          5.004_04\-t4   1997\-Oct\-14     aka perl5.004m4t4
\&          5.004_04      1997\-Oct\-15
\&          5.004_04\-m1   1998\-Mar\-04     (5.004m5t1) Maint. trials for 5.004_05.
\&          5.004_04\-m2   1998\-May\-01
\&          5.004_04\-m3   1998\-May\-15
\&          5.004_04\-m4   1998\-May\-19
\&          5.004_05\-MT5  1998\-Jul\-21
\&          5.004_05\-MT6  1998\-Oct\-09
\&          5.004_05\-MT7  1998\-Nov\-22
\&          5.004_05\-MT8  1998\-Dec\-03
\& Chip     5.004_05\-MT9  1999\-Apr\-26
\&          5.004_05      1999\-Apr\-29
\&
\& Malcolm  5.004_50      1997\-Sep\-09     The 5.005 development track.
\&          5.004_51      1997\-Oct\-02
\&          5.004_52      1997\-Oct\-15
\&          5.004_53      1997\-Oct\-16
\&          5.004_54      1997\-Nov\-14
\&          5.004_55      1997\-Nov\-25
\&          5.004_56      1997\-Dec\-18
\&          5.004_57      1998\-Feb\-03
\&          5.004_58      1998\-Feb\-06
\&          5.004_59      1998\-Feb\-13
\&          5.004_60      1998\-Feb\-20
\&          5.004_61      1998\-Feb\-27
\&          5.004_62      1998\-Mar\-06
\&          5.004_63      1998\-Mar\-17
\&          5.004_64      1998\-Apr\-03
\&          5.004_65      1998\-May\-15
\&          5.004_66      1998\-May\-29
\& Sarathy  5.004_67      1998\-Jun\-15
\&          5.004_68      1998\-Jun\-23
\&          5.004_69      1998\-Jun\-29
\&          5.004_70      1998\-Jul\-06
\&          5.004_71      1998\-Jul\-09
\&          5.004_72      1998\-Jul\-12
\&          5.004_73      1998\-Jul\-13
\&          5.004_74      1998\-Jul\-14     5.005 beta candidate.
\&          5.004_75      1998\-Jul\-15     5.005 beta1.
\&          5.004_76      1998\-Jul\-21     5.005 beta2.
\&
\& Sarathy  5.005         1998\-Jul\-22     Oneperl.
\&
\& Sarathy  5.005_01      1998\-Jul\-27     The 5.005 maintenance track.
\&          5.005_02\-T1   1998\-Aug\-02
\&          5.005_02\-T2   1998\-Aug\-05
\&          5.005_02      1998\-Aug\-08
\& Graham   5.005_03\-MT1  1998\-Nov\-30
\&          5.005_03\-MT2  1999\-Jan\-04
\&          5.005_03\-MT3  1999\-Jan\-17
\&          5.005_03\-MT4  1999\-Jan\-26
\&          5.005_03\-MT5  1999\-Jan\-28
\&          5.005_03\-MT6  1999\-Mar\-05
\&          5.005_03      1999\-Mar\-28
\& Leon     5.005_04\-RC1  2004\-Feb\-05
\&          5.005_04\-RC2  2004\-Feb\-18
\&          5.005_04      2004\-Feb\-23
\&          5.005_05\-RC1  2009\-Feb\-16
\&
\& Sarathy  5.005_50      1998\-Jul\-26     The 5.6 development track.
\&          5.005_51      1998\-Aug\-10
\&          5.005_52      1998\-Sep\-25
\&          5.005_53      1998\-Oct\-31
\&          5.005_54      1998\-Nov\-30
\&          5.005_55      1999\-Feb\-16
\&          5.005_56      1999\-Mar\-01
\&          5.005_57      1999\-May\-25
\&          5.005_58      1999\-Jul\-27
\&          5.005_59      1999\-Aug\-02
\&          5.005_60      1999\-Aug\-02
\&          5.005_61      1999\-Aug\-20
\&          5.005_62      1999\-Oct\-15
\&          5.005_63      1999\-Dec\-09
\&          5.5.640       2000\-Feb\-02
\&          5.5.650       2000\-Feb\-08     beta1
\&          5.5.660       2000\-Feb\-22     beta2
\&          5.5.670       2000\-Feb\-29     beta3
\&          5.6.0\-RC1     2000\-Mar\-09     Release candidate 1.
\&          5.6.0\-RC2     2000\-Mar\-14     Release candidate 2.
\&          5.6.0\-RC3     2000\-Mar\-21     Release candidate 3.
\&
\& Sarathy  5.6.0         2000\-Mar\-22
\&
\& Sarathy  5.6.1\-TRIAL1  2000\-Dec\-18     The 5.6 maintenance track.
\&          5.6.1\-TRIAL2  2001\-Jan\-31
\&          5.6.1\-TRIAL3  2001\-Mar\-19
\&          5.6.1\-foolish 2001\-Apr\-01     The "fools\-gold" release.
\&          5.6.1         2001\-Apr\-08
\& Rafael   5.6.2\-RC1     2003\-Nov\-08
\&          5.6.2         2003\-Nov\-15     Fix new build issues
\&
\& Jarkko   5.7.0         2000\-Sep\-02     The 5.7 track: Development.
\&          5.7.1         2001\-Apr\-09
\&          5.7.2         2001\-Jul\-13     Virtual release candidate 0.
\&          5.7.3         2002\-Mar\-05
\&          5.8.0\-RC1     2002\-Jun\-01
\&          5.8.0\-RC2     2002\-Jun\-21
\&          5.8.0\-RC3     2002\-Jul\-13
\&
\& Jarkko   5.8.0         2002\-Jul\-18
\&
\& Jarkko   5.8.1\-RC1     2003\-Jul\-10     The 5.8 maintenance track
\&          5.8.1\-RC2     2003\-Jul\-11
\&          5.8.1\-RC3     2003\-Jul\-30
\&          5.8.1\-RC4     2003\-Aug\-01
\&          5.8.1\-RC5     2003\-Sep\-22
\&          5.8.1         2003\-Sep\-25
\& Nicholas 5.8.2\-RC1     2003\-Oct\-27
\&          5.8.2\-RC2     2003\-Nov\-03
\&          5.8.2         2003\-Nov\-05
\&          5.8.3\-RC1     2004\-Jan\-07
\&          5.8.3         2004\-Jan\-14
\&          5.8.4\-RC1     2004\-Apr\-05
\&          5.8.4\-RC2     2004\-Apr\-15
\&          5.8.4         2004\-Apr\-21
\&          5.8.5\-RC1     2004\-Jul\-06
\&          5.8.5\-RC2     2004\-Jul\-08
\&          5.8.5         2004\-Jul\-19
\&          5.8.6\-RC1     2004\-Nov\-11
\&          5.8.6         2004\-Nov\-27
\&          5.8.7\-RC1     2005\-May\-18
\&          5.8.7         2005\-May\-30
\&          5.8.8\-RC1     2006\-Jan\-20
\&          5.8.8         2006\-Jan\-31
\&          5.8.9\-RC1     2008\-Nov\-10
\&          5.8.9\-RC2     2008\-Dec\-06
\&          5.8.9         2008\-Dec\-14
\&
\& Hugo     5.9.0         2003\-Oct\-27     The 5.9 development track
\& Rafael   5.9.1         2004\-Mar\-16
\&          5.9.2         2005\-Apr\-01
\&          5.9.3         2006\-Jan\-28
\&          5.9.4         2006\-Aug\-15
\&          5.9.5         2007\-Jul\-07
\&          5.10.0\-RC1    2007\-Nov\-17
\&          5.10.0\-RC2    2007\-Nov\-25
\&
\& Rafael   5.10.0        2007\-Dec\-18
\&
\& David M  5.10.1\-RC1    2009\-Aug\-06     The 5.10 maintenance track
\&          5.10.1\-RC2    2009\-Aug\-18
\&          5.10.1        2009\-Aug\-22
\&
\& Jesse    5.11.0        2009\-Oct\-02     The 5.11 development track
\&          5.11.1        2009\-Oct\-20
\& Leon     5.11.2        2009\-Nov\-20
\& Jesse    5.11.3        2009\-Dec\-20
\& Ricardo  5.11.4        2010\-Jan\-20
\& Steve    5.11.5        2010\-Feb\-20
\& Jesse    5.12.0\-RC0    2010\-Mar\-21
\&          5.12.0\-RC1    2010\-Mar\-29
\&          5.12.0\-RC2    2010\-Apr\-01
\&          5.12.0\-RC3    2010\-Apr\-02
\&          5.12.0\-RC4    2010\-Apr\-06
\&          5.12.0\-RC5    2010\-Apr\-09
\&
\& Jesse    5.12.0        2010\-Apr\-12
\&
\& Jesse    5.12.1\-RC2    2010\-May\-13     The 5.12 maintenance track
\&          5.12.1\-RC1    2010\-May\-09
\&          5.12.1        2010\-May\-16
\&          5.12.2\-RC2    2010\-Aug\-31
\&          5.12.2        2010\-Sep\-06
\& Ricardo  5.12.3\-RC1    2011\-Jan\-09
\& Ricardo  5.12.3\-RC2    2011\-Jan\-14
\& Ricardo  5.12.3\-RC3    2011\-Jan\-17
\& Ricardo  5.12.3        2011\-Jan\-21
\& Leon     5.12.4\-RC1    2011\-Jun\-08
\& Leon     5.12.4        2011\-Jun\-20
\&
\& Leon     5.13.0        2010\-Apr\-20     The 5.13 development track
\& Ricardo  5.13.1        2010\-May\-20
\& Matt     5.13.2        2010\-Jun\-22
\& David G  5.13.3        2010\-Jul\-20
\& Florian  5.13.4        2010\-Aug\-20
\& Steve    5.13.5        2010\-Sep\-19
\& Miyagawa 5.13.6        2010\-Oct\-20
\& BinGOs   5.13.7        2010\-Nov\-20
\& Zefram   5.13.8        2010\-Dec\-20
\& Jesse    5.13.9        2011\-Jan\-20
\& \*(AEvar     5.13.10       2011\-Feb\-20
\& Florian  5.13.11       2011\-Mar\-20
\& Jesse    5.14.0RC1     2011\-Apr\-20
\& Jesse    5.14.0RC2     2011\-May\-04
\& Jesse    5.14.0RC3     2011\-May\-11
\&
\& Jesse    5.14.0        2011\-May\-14     The 5.14 maintenance track
\& Jesse    5.14.1        2011\-Jun\-16
\& Florian  5.14.2\-RC1    2011\-Sep\-19
\&          5.14.2        2011\-Sep\-26
\&
\& David G  5.15.0        2011\-Jun\-20     The 5.15 development track
\& Zefram   5.15.1        2011\-Jul\-20
\& Ricardo  5.15.2        2011\-Aug\-20
\& Stevan   5.15.3        2011\-Sep\-20
\& Florian  5.15.4        2011\-Oct\-20
\& Steve    5.15.5        2011\-Nov\-20
\& Dave R   5.15.6        2011\-Dec\-20
\& BinGOs   5.15.7        2012\-Jan\-20
\& Max M    5.15.8        2012\-Feb\-20
\& Abigail  5.15.9        2012\-Mar\-20
\& Ricardo  5.16.0\-RC0    2012\-May\-10
\& Ricardo  5.16.0\-RC1    2012\-May\-14
\& Ricardo  5.16.0\-RC2    2012\-May\-15
\&
\& Ricardo  5.16.0        2012\-May\-20     The 5.16 maintenance track
\& Ricardo  5.16.1\-RC1    2012\-Aug\-03
\& Ricardo  5.16.1        2012\-Aug\-08
\& Ricardo  5.16.2        2012\-Nov\-01
\& Ricardo  5.16.3\-RC1    2013\-Mar\-06
\& Ricardo  5.16.3        2013\-Mar\-11
\&
\& Zefram   5.17.0        2012\-May\-26     The 5.17 development track
\& Jesse L  5.17.1        2012\-Jun\-20
\& TonyC    5.17.2        2012\-Jul\-20
\& Steve    5.17.3        2012\-Aug\-20
\& Florian  5.17.4        2012\-Sep\-20
\& Florian  5.17.5        2012\-Oct\-20
\& Ricardo  5.17.6        2012\-Nov\-20
\& Dave R   5.17.7        2012\-Dec\-18
\& Aaron    5.17.8        2013\-Jan\-20
\& BinGOs   5.17.9        2013\-Feb\-20
.Ve
.SS "\s-1SELECTED\s0 \s-1RELEASE\s0 \s-1SIZES\s0"
.IX Subsection "SELECTED RELEASE SIZES"
For example the notation \*(L"core: 212  29\*(R" in the release 1.000 means that
it had in the core 212 kilobytes, in 29 files.  The \*(L"core\*(R"..\*(L"doc\*(R" are
explained below.
.PP
.Vb 2
\& release        core       lib         ext        t         doc
\& ======================================================================
\&
\& 1.000           212  29      \-   \-      \-    \-     38   51     62   3
\& 1.014           219  29      \-   \-      \-    \-     39   52     68   4
\& 2.000           309  31      2   3      \-    \-     55   57     92   4
\& 2.001           312  31      2   3      \-    \-     55   57     94   4
\& 3.000           508  36     24  11      \-    \-     79   73    156   5
\& 3.044           645  37     61  20      \-    \-     90   74    190   6
\& 4.000           635  37     59  20      \-    \-     91   75    198   4
\& 4.019           680  37     85  29      \-    \-     98   76    199   4
\& 4.036           709  37     89  30      \-    \-     98   76    208   5
\& 5.000alpha2     785  50    114  32      \-    \-    112   86    209   5
\& 5.000alpha3     801  50    117  33      \-    \-    121   87    209   5
\& 5.000alpha9    1022  56    149  43    116   29    125   90    217   6
\& 5.000a12h       978  49    140  49    205   46    152   97    228   9
\& 5.000b3h       1035  53    232  70    216   38    162   94    218  21
\& 5.000          1038  53    250  76    216   38    154   92    536  62
\& 5.001m         1071  54    388  82    240   38    159   95    544  29
\& 5.002          1121  54    661 101    287   43    155   94    847  35
\& 5.003          1129  54    680 102    291   43    166  100    853  35
\& 5.003_07       1231  60    748 106    396   53    213  137    976  39
\& 5.004          1351  60   1230 136    408   51    355  161   1587  55
\& 5.004_01       1356  60   1258 138    410   51    358  161   1587  55
\& 5.004_04       1375  60   1294 139    413   51    394  162   1629  55
\& 5.004_05       1463  60   1435 150    394   50    445  175   1855  59
\& 5.004_51       1401  61   1260 140    413   53    358  162   1594  56
\& 5.004_53       1422  62   1295 141    438   70    394  162   1637  56
\& 5.004_56       1501  66   1301 140    447   74    408  165   1648  57
\& 5.004_59       1555  72   1317 142    448   74    424  171   1678  58
\& 5.004_62       1602  77   1327 144    629   92    428  173   1674  58
\& 5.004_65       1626  77   1358 146    615   92    446  179   1698  60
\& 5.004_68       1856  74   1382 152    619   92    463  187   1784  60
\& 5.004_70       1863  75   1456 154    675   92    494  194   1809  60
\& 5.004_73       1874  76   1467 152    762  102    506  196   1883  61
\& 5.004_75       1877  76   1467 152    770  103    508  196   1896  62
\& 5.005          1896  76   1469 152    795  103    509  197   1945  63
\& 5.005_03       1936  77   1541 153    813  104    551  201   2176  72
\& 5.005_50       1969  78   1842 301    795  103    514  198   1948  63
\& 5.005_53       1999  79   1885 303    806  104    602  224   2002  67
\& 5.005_56       2086  79   1970 307    866  113    672  238   2221  75
\& 5.6.0          2820  79   2626 364   1096  129    863  280   2840  93
\& 5.6.1          2946  78   2921 430   1171  132   1024  304   3330 102
\& 5.6.2          2947  78   3143 451   1247  127   1303  387   3406 102
\& 5.7.0          2977  80   2801 425   1250  132    975  307   3206 100
\& 5.7.1          3351  84   3442 455   1944  167   1334  357   3698 124
\& 5.7.2          3491  87   4858 618   3290  298   1598  449   3910 139
\& 5.7.3          3299  85   4295 537   2196  300   2176  626   4171 120
\& 5.8.0          3489  87   4533 585   2437  331   2588  726   4368 125
\& 5.8.1          3674  90   5104 623   2604  353   2983  836   4625 134
\& 5.8.2          3633  90   5111 623   2623  357   3019  848   4634 135
\& 5.8.3          3625  90   5141 624   2660  363   3083  869   4669 136
\& 5.8.4          3653  90   5170 634   2684  368   3148  885   4689 137
\& 5.8.5          3664  90   4260 303   2707  369   3208  898   4689 138
\& 5.8.6          3690  90   4271 303   3141  396   3411  925   4709 139
\& 5.8.7          3788  90   4322 307   3297  401   3485  964   4744 141
\& 5.8.8          3895  90   4357 314   3409  431   3622 1017   4979 144
\& 5.8.9          4132  93   5508 330   3826  529   4364 1234   5348 152
\& 5.9.0          3657  90   4951 626   2603  354   3011  841   4609 135
\& 5.9.1          3580  90   5196 634   2665  367   3186  889   4725 138
\& 5.9.2          3863  90   4654 312   3283  403   3551  973   4800 142
\& 5.9.3          4096  91   5318 381   4806  597   4272 1214   5139 147
\& 5.9.4          4393  94   5718 415   4578  642   4646 1310   5335 153
\& 5.9.5          4681  96   6849 479   4827  671   5155 1490   5572 159
\& 5.10.0         4710  97   7050 486   4899  673   5275 1503   5673 160
\& 5.10.1         4858  98   7440 519   6195  921   6147 1751   5151 163
\& 5.12.0         4999 100   1146 121  15227 2176   6400 1843   5342 168
\& 5.12.1         5000 100   1146 121  15283 2178   6407 1846   5354 169
\& 5.12.2         5003 100   1146 121  15404 2178   6413 1846   5376 170
\& 5.12.3         5004 100   1146 121  15529 2180   6417 1848   5391 171
.Ve
.PP
The \*(L"core\*(R"...\*(L"doc\*(R" mean the following files from the Perl source code
distribution.  The glob notation ** means recursively, (.) means
regular files.
.PP
.Vb 6
\& core   *.[hcy]
\& lib    lib/**/*.p[ml]
\& ext    ext/**/*.{[hcyt],xs,pm} (for \-5.10.1) or
\&        {dist,ext,cpan}/**/*.{[hcyt],xs,pm} (for 5.12.0\-)
\& t      t/**/*(.) (for 1\-5.005_56) or **/*.t (for 5.6.0\-5.7.3)
\& doc    {README*,INSTALL,*[_.]man{,.?},pod/**/*.pod}
.Ve
.PP
Here are some statistics for the other subdirectories and one file in
the Perl source distribution for somewhat more selected releases.
.PP
.Vb 2
\& ======================================================================
\&   Legend:  kB   #
\&
\&                  1.014      2.001      3.044
\&
\& Configure      31    1    37    1    62    1
\& eg              \-    \-    34   28    47   39
\& h2pl            \-    \-     \-    \-    12   12
\& msdos           \-    \-     \-    \-    41   13
\& os2             \-    \-     \-    \-    63   22
\& usub            \-    \-     \-    \-    21   16
\& x2p           103   17   104   17   137   17
\&
\& ======================================================================
\&
\&                  4.000      4.019      4.036
\&
\& atarist         \-    \-     \-    \-   113   31
\& Configure      73    1    83    1    86    1
\& eg             47   39    47   39    47   39
\& emacs          67    4    67    4    67    4
\& h2pl           12   12    12   12    12   12
\& hints           \-    \-     5   42    11   56
\& msdos          57   15    58   15    60   15
\& os2            81   29    81   29   113   31
\& usub           25    7    43    8    43    8
\& x2p           147   18   152   19   154   19
\&
\& ======================================================================
\&
\&                5.000a2  5.000a12h   5.000b3h      5.000     5.001m
\&
\& apollo          8    3     8    3     8    3     8    3     8    3
\& atarist       113   31   113   31     \-    \-     \-    \-     \-    \-
\& bench           \-    \-     0    1     \-    \-     \-    \-     \-    \-
\& Bugs            2    5    26    1     \-    \-     \-    \-     \-    \-
\& dlperl         40    5     \-    \-     \-    \-     \-    \-     \-    \-
\& do            127   71     \-    \-     \-    \-     \-    \-     \-    \-
\& Configure       \-    \-   153    1   159    1   160    1   180    1
\& Doc             \-    \-    26    1    75    7    11    1    11    1
\& eg             79   58    53   44    51   43    54   44    54   44
\& emacs          67    4   104    6   104    6   104    1   104    6
\& h2pl           12   12    12   12    12   12    12   12    12   12
\& hints          11   56    12   46    18   48    18   48    44   56
\& msdos          60   15    60   15     \-    \-     \-    \-     \-    \-
\& os2           113   31   113   31     \-    \-     \-    \-     \-    \-
\& U               \-    \-    62    8   112   42     \-    \-     \-    \-
\& usub           43    8     \-    \-     \-    \-     \-    \-     \-    \-
\& vms             \-    \-    80    7   123    9   184   15   304   20
\& x2p           171   22   171   21   162   20   162   20   279   20
\&
\& ======================================================================
\&
\&                  5.002      5.003   5.003_07
\&
\& Configure     201    1   201    1   217    1
\& eg             54   44    54   44    54   44
\& emacs         108    1   108    1   143    1
\& h2pl           12   12    12   12    12   12
\& hints          73   59    77   60    90   62
\& os2            84   17    56   10   117   42
\& plan9           \-    \-     \-    \-    79   15
\& Porting         \-    \-     \-    \-    51    1
\& utils          87    7    88    7    97    7
\& vms           500   24   475   26   505   27
\& x2p           280   20   280   20   280   19
\&
\& ======================================================================
\&
\&                  5.004   5.004_04   5.004_62   5.004_65   5.004_68
\&
\& beos            \-    \-     \-    \-     \-    \-      1   1      1   1
\& Configure     225    1   225    1   240    1    248   1    256   1
\& cygwin32       23    5    23    5    23    5     24   5     24   5
\& djgpp           \-    \-     \-    \-    14    5     14   5     14   5
\& eg             81   62    81   62    81   62     81  62     81  62
\& emacs         194    1   204    1   212    2    212   2    212   2
\& h2pl           12   12    12   12    12   12     12  12     12  12
\& hints         129   69   132   71   144   72    151  74    155  74
\& os2           121   42   127   42   127   44    129  44    129  44
\& plan9          82   15    82   15    82   15     82  15     82  15
\& Porting        94    2   109    4   203    6    234   8    241   9
\& qnx             1    2     1    2     1    2      1   2      1   2
\& utils         112    8   118    8   124    8    156   9    159   9
\& vms           518   34   524   34   538   34    569  34    569  34
\& win32         285   33   378   36   470   39    493  39    575  41
\& x2p           281   19   281   19   281   19    282  19    281  19
\&
\& ======================================================================
\&
\&               5.004_70   5.004_73   5.004_75      5.005   5.005_03
\&
\& apollo          \-    \-     \-    \-     \-    \-     \-    \-      0   1
\& beos            1    1     1    1     1    1     1    1      1   1
\& Configure     256    1   256    1   264    1   264    1    270   1
\& cygwin32       24    5    24    5    24    5    24    5     24   5
\& djgpp          14    5    14    5    14    5    14    5     15   5
\& eg             86   65    86   65    86   65    86   65     86  65
\& emacs         262    2   262    2   262    2   262    2    274   2
\& h2pl           12   12    12   12    12   12    12   12     12  12
\& hints         157   74   157   74   159   74   160   74    179  77
\& mint            \-    \-     \-    \-     \-    \-     \-    \-      4   7
\& mpeix           \-    \-     \-    \-     5    3     5    3      5   3
\& os2           129   44   139   44   142   44   143   44    148  44
\& plan9          82   15    82   15    82   15    82   15     82  15
\& Porting       241    9   253    9   259   10   264   12    272  13
\& qnx             1    2     1    2     1    2     1    2      1   2
\& utils         160    9   160    9   160    9   160    9    164   9
\& vms           570   34   572   34   573   34   575   34    583  34
\& vos             \-    \-     \-    \-     \-    \-     \-   \-     156  10
\& win32         577   41   585   41   585   41   587   41    600  42
\& x2p           281   19   281   19   281   19   281   19    281  19
\&
\& ======================================================================
\&
\&                  5.6.0      5.6.1      5.6.2      5.7.3
\&
\& apollo          8    3     8    3     8    3     8    3
\& beos            5    2     5    2     5    2     6    4
\& Configure     346    1   361    1   363    1   394    1
\& Cross           \-    \-     \-    \-     \-    \-     4    2
\& djgpp          19    6    19    6    19    6    21    7
\& eg            112   71   112   71   112   71     \-    \-
\& emacs         303    4   319    4   319    4   319    4
\& epoc           29    8    35    8    35    8    36    8
\& h2pl           24   15    24   15    24   15    24   15
\& hints         242   83   250   84   321   89   272   87
\& mint           11    9    11    9    11    9    11    9
\& mpeix           9    4     9    4     9    4     9    4
\& NetWare         \-    \-     \-    \-     \-    \-   423   57
\& os2           214   59   224   60   224   60   357   66
\& plan9          92   17    92   17    92   17    85   15
\& Porting       361   15   390   16   390   16   425   21
\& qnx             5    3     5    3     5    3     5    3
\& utils         228   12   221   11   222   11   267   13
\& uts             \-    \-     \-    \-     \-    \-    12    3
\& vmesa          25    4    25    4    25    4    25    4
\& vms           686   38   627   38   627   38   649   36
\& vos           227   12   249   15   248   15   281   17
\& win32         755   41   782   42   801   42  1006   50
\& x2p           307   20   307   20   307   20   345   20
\&
\& ======================================================================
\&
\&                  5.8.0      5.8.1      5.8.2      5.8.3      5.8.4
\&
\& apollo          8    3     8    3     8    3     8    3     8    3
\& beos            6    4     6    4     6    4     6    4     6    4
\& Configure     472    1   493    1   493    1   493    1   494    1
\& Cross           4    2    45   10    45   10    45   10    45   10
\& djgpp          21    7    21    7    21    7    21    7    21    7
\& emacs         319    4   329    4   329    4   329    4   329    4
\& epoc           33    8    33    8    33    8    33    8    33    8
\& h2pl           24   15    24   15    24   15    24   15    24   15
\& hints         294   88   321   89   321   89   321   89   348   91
\& mint           11    9    11    9    11    9    11    9    11    9
\& mpeix          24    5    25    5    25    5    25    5    25    5
\& NetWare       488   61   490   61   490   61   490   61   488   61
\& os2           361   66   445   67   450   67   488   67   488   67
\& plan9          85   15   325   17   325   17   325   17   321   17
\& Porting       479   22   537   32   538   32   539   32   538   33
\& qnx             5    3     5    3     5    3     5    3     5    3
\& utils         275   15   258   16   258   16   263   19   263   19
\& uts            12    3    12    3    12    3    12    3    12    3
\& vmesa          25    4    25    4    25    4    25    4    25    4
\& vms           648   36   654   36   654   36   656   36   656   36
\& vos           330   20   335   20   335   20   335   20   335   20
\& win32        1062   49  1125   49  1127   49  1126   49  1181   56
\& x2p           347   20   348   20   348   20   348   20   348   20
\&
\& ======================================================================
\&
\&                  5.8.5      5.8.6      5.8.7      5.8.8      5.8.9
\&
\& apollo          8    3     8    3     8    3     8    3     8    3
\& beos            6    4     6    4     8    4     8    4     8    4
\& Configure     494    1   494    1   495    1   506    1   520    1
\& Cross          45   10    45   10    45   10    45   10    46   10
\& djgpp          21    7    21    7    21    7    21    7    21    7
\& emacs         329    4   329    4   329    4   329    4   406    4
\& epoc           33    8    33    8    33    8    34    8    35    8
\& h2pl           24   15    24   15    24   15    24   15    24   15
\& hints         350   91   352   91   355   94   360   94   387   99
\& mint           11    9    11    9    11    9    11    9    11    9
\& mpeix          25    5    25    5    25    5    49    6    49    6
\& NetWare       488   61   488   61   488   61   490   61   491   61
\& os2           488   67   488   67   488   67   488   67   552   70
\& plan9         321   17   321   17   321   17   322   17   324   17
\& Porting       538   34   548   35   549   35   564   37   625   41
\& qnx             5    3     5    3     5    3     5    3     5    3
\& utils         265   19   265   19   266   19   267   19   281   21
\& uts            12    3    12    3    12    3    12    3    12    3
\& vmesa          25    4    25    4    25    4    25    4    25    4
\& vms           657   36   658   36   662   36   664   36   716   35
\& vos           335   20   335   20   335   20   336   21   345   22
\& win32        1183   56  1190   56  1199   56  1219   56  1484   68
\& x2p           349   20   349   20   349   20   349   19   350   19
\&
\& ======================================================================
\&
\&                  5.9.0      5.9.1      5.9.2      5.9.3      5.9.4
\&
\& apollo          8    3     8    3     8    3     8    3     8    3
\& beos            6    4     6    4     8    4     8    4     8    4
\& Configure     493    1   493    1   495    1   508    1   512    1
\& Cross          45   10    45   10    45   10    45   10    46   10
\& djgpp          21    7    21    7    21    7    21    7    21    7
\& emacs         329    4   329    4   329    4   329    4   329    4
\& epoc           33    8    33    8    33    8    34    8    34    8
\& h2pl           24   15    24   15    24   15    24   15    24   15
\& hints         321   89   346   91   355   94   359   94   366   96
\& mad             \-    \-     \-    \-     \-    \-     \-    \-   174    6
\& mint           11    9    11    9    11    9    11    9    11    9
\& mpeix          25    5    25    5    25    5    49    6    49    6
\& NetWare       489   61   487   61   487   61   489   61   489   61
\& os2           444   67   488   67   488   67   488   67   488   67
\& plan9         325   17   321   17   321   17   322   17   323   17
\& Porting       537   32   536   33   549   36   564   38   576   38
\& qnx             5    3     5    3     5    3     5    3     5    3
\& symbian         \-    \-     \-    \-     \-    \-   293   53   293   53
\& utils         258   16   263   19   268   20   273   23   275   24
\& uts            12    3    12    3    12    3    12    3    12    3
\& vmesa          25    4    25    4    25    4    25    4    25    4
\& vms           660   36   547   33   553   33   661   33   696   33
\& vos            11    7    11    7    11    7    11    7    11    7
\& win32        1120   49  1124   51  1191   56  1209   56  1719   90
\& x2p           348   20   348   20   349   20   349   19   349   19
\&
\& ======================================================================
\&
\&                  5.9.5     5.10.0     5.10.1     5.12.0     5.12.1
\&
\& apollo          8    3     8    3     0    3     0    3     0    3
\& beos            8    4     8    4     4    4     4    4     4    4
\& Configure     518    1   518    1   533    1   536    1   536    1
\& Cross         122   15   122   15   119   15   118   15   118   15
\& djgpp          21    7    21    7    17    7    17    7    17    7
\& emacs         329    4   406    4   402    4   402    4   402    4
\& epoc           34    8    35    8    31    8    31    8    31    8
\& h2pl           24   15    24   15    12   15    12   15    12   15
\& hints         377   98   381   98   385  100   368   97   368   97
\& mad           182    8   182    8   174    8   174    8   174    8
\& mint           11    9    11    9     3    9     \-    \-     \-    \-
\& mpeix          49    6    49    6    45    6    45    6    45    6
\& NetWare       489   61   489   61   465   61   466   61   466   61
\& os2           552   70   552   70   507   70   507   70   507   70
\& plan9         324   17   324   17   316   17   316   17   316   17
\& Porting       627   40   632   40   933   53   749   54   749   54
\& qnx             5    3     5    4     1    4     1    4     1    4
\& symbian       300   54   300   54   290   54   288   54   288   54
\& utils         260   26   264   27   268   27   269   27   269   27
\& uts            12    3    12    3     8    3     8    3     8    3
\& vmesa          25    4    25    4    21    4    21    4    21    4
\& vms           690   32   722   32   693   30   645   18   645   18
\& vos            19    8    19    8    16    8    16    8    16    8
\& win32        1482   68  1485   68  1497   70  1841   73  1841   73
\& x2p           349   19   349   19   345   19   345   19   345   19
\&
\& ======================================================================
\&
\&                  5.12.2     5.12.3
\&
\& apollo          0    3     0    3
\& beos            4    4     4    4
\& Configure     536    1   536    1
\& Cross         118   15   118   15
\& djgpp          17    7    17    7
\& emacs         402    4   402    4
\& epoc           31    8    31    8
\& h2pl           12   15    12   15
\& hints         368   97   368   97
\& mad           174    8   174    8
\& mpeix          45    6    45    6
\& NetWare       466   61   466   61
\& os2           507   70   507   70
\& plan9         316   17   316   17
\& Porting       750   54   750   54
\& qnx             1    4     1    4
\& symbian       288   54   288   54
\& utils         269   27   269   27
\& uts             8    3     8    3
\& vmesa          21    4    21    4
\& vms           646   18   644   18
\& vos            16    8    16    8
\& win32        1841   73  1841   73
\& x2p           345   19   345   19
.Ve
.SS "\s-1SELECTED\s0 \s-1PATCH\s0 \s-1SIZES\s0"
.IX Subsection "SELECTED PATCH SIZES"
The \*(L"diff lines kB\*(R" means that for example the patch 5.003_08, to be
applied on top of the 5.003_07 (or whatever was before the 5.003_08)
added lines for 110 kilobytes, it removed lines for 19 kilobytes, and
changed lines for 424 kilobytes.  Just the lines themselves are
counted, not their context.  The \*(L"+ \- !\*(R" become from the \fIdiff\fR\|(1)
context diff output format.
.PP
.Vb 4
\& Pump\-  Release         Date              diff lines kB
\& king                                     \-\-\-\-\-\-\-\-\-\-\-\-\-
\&                                          +     \-     !
\& ======================================================================
\&
\& Chip     5.003_08      1996\-Nov\-19     110    19   424
\&          5.003_09      1996\-Nov\-26      38     9   248
\&          5.003_10      1996\-Nov\-29      29     2    27
\&          5.003_11      1996\-Dec\-06      73    12   165
\&          5.003_12      1996\-Dec\-19     275     6   436
\&          5.003_13      1996\-Dec\-20      95     1    56
\&          5.003_14      1996\-Dec\-23      23     7   333
\&          5.003_15      1996\-Dec\-23       0     0     1
\&          5.003_16      1996\-Dec\-24      12     3    50
\&          5.003_17      1996\-Dec\-27      19     1    14
\&          5.003_18      1996\-Dec\-31      21     1    32
\&          5.003_19      1997\-Jan\-04      80     3    85
\&          5.003_20      1997\-Jan\-07      18     1   146
\&          5.003_21      1997\-Jan\-15      38    10   221
\&          5.003_22      1997\-Jan\-16       4     0    18
\&          5.003_23      1997\-Jan\-25      71    15   119
\&          5.003_24      1997\-Jan\-29     426     1    20
\&          5.003_25      1997\-Feb\-04      21     8   169
\&          5.003_26      1997\-Feb\-10      16     1    15
\&          5.003_27      1997\-Feb\-18      32    10    38
\&          5.003_28      1997\-Feb\-21      58     4    66
\&          5.003_90      1997\-Feb\-25      22     2    34
\&          5.003_91      1997\-Mar\-01      37     1    39
\&          5.003_92      1997\-Mar\-06      16     3    69
\&          5.003_93      1997\-Mar\-10      12     3    15
\&          5.003_94      1997\-Mar\-22     407     7   200
\&          5.003_95      1997\-Mar\-25      41     1    37
\&          5.003_96      1997\-Apr\-01     283     5   261
\&          5.003_97      1997\-Apr\-03      13     2    34
\&          5.003_97a     1997\-Apr\-05      57     1    27
\&          5.003_97b     1997\-Apr\-08      14     1    20
\&          5.003_97c     1997\-Apr\-10      20     1    16
\&          5.003_97d     1997\-Apr\-13       8     0    16
\&          5.003_97e     1997\-Apr\-15      15     4    46
\&          5.003_97f     1997\-Apr\-17       7     1    33
\&          5.003_97g     1997\-Apr\-18       6     1    42
\&          5.003_97h     1997\-Apr\-24      23     3    68
\&          5.003_97i     1997\-Apr\-25      23     1    31
\&          5.003_97j     1997\-Apr\-28      36     1    49
\&          5.003_98      1997\-Apr\-30     171    12   539
\&          5.003_99      1997\-May\-01       6     0     7
\&          5.003_99a     1997\-May\-09      36     2    61
\&          p54rc1        1997\-May\-12       8     1    11
\&          p54rc2        1997\-May\-14       6     0    40
\&
\&        5.004           1997\-May\-15       4     0     4
\&
\& Tim      5.004_01      1997\-Jun\-13     222    14    57
\&          5.004_02      1997\-Aug\-07     112    16   119
\&          5.004_03      1997\-Sep\-05     109     0    17
\&          5.004_04      1997\-Oct\-15      66     8   173
.Ve
.PP
\fIThe patch-free era\fR
.IX Subsection "The patch-free era"
.PP
In more modern times, named releases don't come as often, and as progress
can be followed (nearly) instantly (with rsync, and since late 2008, git)
patches between versions are no longer provided. However, that doesn't
keep us from calculating how large a patch could have been. Which is
shown in the table below. Unless noted otherwise, the size mentioned is
the patch to bring version x.y.z to x.y.z+1.
.PP
.Vb 2
\& Sarathy  5.6.1         2001\-Apr\-08     531    44   651
\& Rafael   5.6.2         2003\-Nov\-15      20    11  1819
\&
\& Jarkko   5.8.0         2002\-Jul\-18    1205    31   471   From 5.7.3
\&
\&          5.8.1         2003\-Sep\-25     243   102  6162
\& Nicholas 5.8.2         2003\-Nov\-05      10    50   788
\&          5.8.3         2004\-Jan\-14      31    13   360
\&          5.8.4         2004\-Apr\-21      33     8   299
\&          5.8.5         2004\-Jul\-19      11    19   255
\&          5.8.6         2004\-Nov\-27      35     3   192
\&          5.8.7         2005\-May\-30      75    34   778
\&          5.8.8         2006\-Jan\-31     131    42  1251
\&          5.8.9         2008\-Dec\-14     340   132 12988
\&
\& Hugo     5.9.0         2003\-Oct\-27     281   168  7132   From 5.8.0
\& Rafael   5.9.1         2004\-Mar\-16      57   250  2107
\&          5.9.2         2005\-Apr\-01     720    57   858
\&          5.9.3         2006\-Jan\-28    1124   102  1906
\&          5.9.4         2006\-Aug\-15     896    60   862
\&          5.9.5         2007\-Jul\-07    1149   128  1062
\&
\&          5.10.0        2007\-Dec\-18      50    31 13111   From 5.9.5
.Ve
.SH "THE KEEPERS OF THE RECORDS"
.IX Header "THE KEEPERS OF THE RECORDS"
Jarkko Hietaniemi <\fIjhi@iki.fi\fR>.
.PP
Thanks to the collective memory of the Perlfolk.  In addition to the
Keepers of the Pumpkin also Alan Champion, Mark Dominus,
Andreas Ko\*:nig, John Macdonald, Matthias Neeracher, Jeff Okamoto,
Michael Peppler, Randal Schwartz, and Paul D. Smith sent corrections
and additions. Abigail added file and patch size data for the 5.6.0 \- 5.10
era.
                                                                                                                       osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perlhist5.18.1                               0100644 0001750 0001750 00000150773 12566207441 023122  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLHIST 1"
.TH PERLHIST 1 "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlhist \- the Perl history records
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document aims to record the Perl source code releases.
.SH "INTRODUCTION"
.IX Header "INTRODUCTION"
Perl history in brief, by Larry Wall:
.PP
.Vb 9
\&   Perl 0 introduced Perl to my officemates.
\&   Perl 1 introduced Perl to the world, and changed /\e(...\e|...\e)/ to
\&       /(...|...)/.  \e(Dan Faigin still hasn\*(Aqt forgiven me. :\-\e)
\&   Perl 2 introduced Henry Spencer\*(Aqs regular expression package.
\&   Perl 3 introduced the ability to handle binary data (embedded nulls).
\&   Perl 4 introduced the first Camel book.  Really.  We mostly just
\&       switched version numbers so the book could refer to 4.000.
\&   Perl 5 introduced everything else, including the ability to
\&       introduce everything else.
.Ve
.SH "THE KEEPERS OF THE PUMPKIN"
.IX Header "THE KEEPERS OF THE PUMPKIN"
Larry Wall, Andy Dougherty, Tom Christiansen, Charles Bailey, Nick
Ing-Simmons, Chip Salzenberg, Tim Bunce, Malcolm Beattie, Gurusamy
Sarathy, Graham Barr, Jarkko Hietaniemi, Hugo van der Sanden,
Michael Schwern, Rafael Garcia-Suarez, Nicholas Clark, Richard Clamp,
Leon Brocard, Dave Mitchell, Jesse Vincent, Ricardo Signes, Steve Hay,
Matt S Trout, David Golden, Florian Ragwitz, Tatsuhiko Miyagawa,
Chris \f(CW\*(C`BinGOs\*(C'\fR Williams, Zefram, \*(Aevar Arnfjo\*:r\*(d- Bjarmason, Stevan
Little, Dave Rolsky, Max Maischein, Abigail, Jesse Luehrs, Tony Cook,
Dominic Hargreaves, Aaron Crane and Aristotle Pagaltzis.
.SS "\s-1PUMPKIN\s0?"
.IX Subsection "PUMPKIN?"
[from Porting/pumpkin.pod in the Perl source code distribution]
.PP
Chip Salzenberg gets credit for that, with a nod to his cow orker,
David Croy.  We had passed around various names (baton, token, hot
potato) but none caught on.  Then, Chip asked:
.PP
[begin quote]
.PP
.Vb 1
\&   Who has the patch pumpkin?
.Ve
.PP
To explain:  David Croy once told me that at a previous job,
there was one tape drive and multiple systems that used it for backups.
But instead of some high-tech exclusion software, they used a low-tech
method to prevent multiple simultaneous backups: a stuffed pumpkin.
No one was allowed to make backups unless they had the \*(L"backup pumpkin\*(R".
.PP
[end quote]
.PP
The name has stuck.  The holder of the pumpkin is sometimes called
the pumpking (keeping the source afloat?) or the pumpkineer (pulling
the strings?).
.SH "THE RECORDS"
.IX Header "THE RECORDS"
.Vb 6
\& Pump\-  Release         Date            Notes
\& king                                   (by no means
\&                                         comprehensive,
\&                                         see Changes*
\&                                         for details)
\& ======================================================================
\&
\& Larry   0              Classified.     Don\*(Aqt ask.
\&
\& Larry   1.000          1987\-Dec\-18
\&
\&          1.001..10     1988\-Jan\-30
\&          1.011..14     1988\-Feb\-02
\& Schwern  1.0.15        2002\-Dec\-18     Modernization
\& Richard  1.0_16        2003\-Dec\-18
\&
\& Larry   2.000          1988\-Jun\-05
\&
\&          2.001         1988\-Jun\-28
\&
\& Larry   3.000          1989\-Oct\-18
\&
\&          3.001         1989\-Oct\-26
\&          3.002..4      1989\-Nov\-11
\&          3.005         1989\-Nov\-18
\&          3.006..8      1989\-Dec\-22
\&          3.009..13     1990\-Mar\-02
\&          3.014         1990\-Mar\-13
\&          3.015         1990\-Mar\-14
\&          3.016..18     1990\-Mar\-28
\&          3.019..27     1990\-Aug\-10     User subs.
\&          3.028         1990\-Aug\-14
\&          3.029..36     1990\-Oct\-17
\&          3.037         1990\-Oct\-20
\&          3.040         1990\-Nov\-10
\&          3.041         1990\-Nov\-13
\&          3.042..43     1991\-Jan\-??
\&          3.044         1991\-Jan\-12
\&
\& Larry   4.000          1991\-Mar\-21
\&
\&          4.001..3      1991\-Apr\-12
\&          4.004..9      1991\-Jun\-07
\&          4.010         1991\-Jun\-10
\&          4.011..18     1991\-Nov\-05
\&          4.019         1991\-Nov\-11     Stable.
\&          4.020..33     1992\-Jun\-08
\&          4.034         1992\-Jun\-11
\&          4.035         1992\-Jun\-23
\& Larry    4.036         1993\-Feb\-05     Very stable.
\&
\&          5.000alpha1   1993\-Jul\-31
\&          5.000alpha2   1993\-Aug\-16
\&          5.000alpha3   1993\-Oct\-10
\&          5.000alpha4   1993\-???\-??
\&          5.000alpha5   1993\-???\-??
\&          5.000alpha6   1994\-Mar\-18
\&          5.000alpha7   1994\-Mar\-25
\& Andy     5.000alpha8   1994\-Apr\-04
\& Larry    5.000alpha9   1994\-May\-05     ext appears.
\&          5.000alpha10  1994\-Jun\-11
\&          5.000alpha11  1994\-Jul\-01
\& Andy     5.000a11a     1994\-Jul\-07     To fit 14.
\&          5.000a11b     1994\-Jul\-14
\&          5.000a11c     1994\-Jul\-19
\&          5.000a11d     1994\-Jul\-22
\& Larry    5.000alpha12  1994\-Aug\-04
\& Andy     5.000a12a     1994\-Aug\-08
\&          5.000a12b     1994\-Aug\-15
\&          5.000a12c     1994\-Aug\-22
\&          5.000a12d     1994\-Aug\-22
\&          5.000a12e     1994\-Aug\-22
\&          5.000a12f     1994\-Aug\-24
\&          5.000a12g     1994\-Aug\-24
\&          5.000a12h     1994\-Aug\-24
\& Larry    5.000beta1    1994\-Aug\-30
\& Andy     5.000b1a      1994\-Sep\-06
\& Larry    5.000beta2    1994\-Sep\-14     Core slushified.
\& Andy     5.000b2a      1994\-Sep\-14
\&          5.000b2b      1994\-Sep\-17
\&          5.000b2c      1994\-Sep\-17
\& Larry    5.000beta3    1994\-Sep\-??
\& Andy     5.000b3a      1994\-Sep\-18
\&          5.000b3b      1994\-Sep\-22
\&          5.000b3c      1994\-Sep\-23
\&          5.000b3d      1994\-Sep\-27
\&          5.000b3e      1994\-Sep\-28
\&          5.000b3f      1994\-Sep\-30
\&          5.000b3g      1994\-Oct\-04
\& Andy     5.000b3h      1994\-Oct\-07
\& Larry?   5.000gamma    1994\-Oct\-13?
\&
\& Larry   5.000          1994\-Oct\-17
\&
\& Andy     5.000a        1994\-Dec\-19
\&          5.000b        1995\-Jan\-18
\&          5.000c        1995\-Jan\-18
\&          5.000d        1995\-Jan\-18
\&          5.000e        1995\-Jan\-18
\&          5.000f        1995\-Jan\-18
\&          5.000g        1995\-Jan\-18
\&          5.000h        1995\-Jan\-18
\&          5.000i        1995\-Jan\-26
\&          5.000j        1995\-Feb\-07
\&          5.000k        1995\-Feb\-11
\&          5.000l        1995\-Feb\-21
\&          5.000m        1995\-Feb\-28
\&          5.000n        1995\-Mar\-07
\&          5.000o        1995\-Mar\-13?
\&
\& Larry   5.001          1995\-Mar\-13
\&
\& Andy     5.001a        1995\-Mar\-15
\&          5.001b        1995\-Mar\-31
\&          5.001c        1995\-Apr\-07
\&          5.001d        1995\-Apr\-14
\&          5.001e        1995\-Apr\-18     Stable.
\&          5.001f        1995\-May\-31
\&          5.001g        1995\-May\-25
\&          5.001h        1995\-May\-25
\&          5.001i        1995\-May\-30
\&          5.001j        1995\-Jun\-05
\&          5.001k        1995\-Jun\-06
\&          5.001l        1995\-Jun\-06     Stable.
\&          5.001m        1995\-Jul\-02     Very stable.
\&          5.001n        1995\-Oct\-31     Very unstable.
\&          5.002beta1    1995\-Nov\-21
\&          5.002b1a      1995\-Dec\-04
\&          5.002b1b      1995\-Dec\-04
\&          5.002b1c      1995\-Dec\-04
\&          5.002b1d      1995\-Dec\-04
\&          5.002b1e      1995\-Dec\-08
\&          5.002b1f      1995\-Dec\-08
\& Tom      5.002b1g      1995\-Dec\-21     Doc release.
\& Andy     5.002b1h      1996\-Jan\-05
\&          5.002b2       1996\-Jan\-14
\& Larry    5.002b3       1996\-Feb\-02
\& Andy     5.002gamma    1996\-Feb\-11
\& Larry    5.002delta    1996\-Feb\-27
\&
\& Larry   5.002          1996\-Feb\-29     Prototypes.
\&
\& Charles  5.002_01      1996\-Mar\-25
\&
\&         5.003          1996\-Jun\-25     Security release.
\&
\&          5.003_01      1996\-Jul\-31
\& Nick     5.003_02      1996\-Aug\-10
\& Andy     5.003_03      1996\-Aug\-28
\&          5.003_04      1996\-Sep\-02
\&          5.003_05      1996\-Sep\-12
\&          5.003_06      1996\-Oct\-07
\&          5.003_07      1996\-Oct\-10
\& Chip     5.003_08      1996\-Nov\-19
\&          5.003_09      1996\-Nov\-26
\&          5.003_10      1996\-Nov\-29
\&          5.003_11      1996\-Dec\-06
\&          5.003_12      1996\-Dec\-19
\&          5.003_13      1996\-Dec\-20
\&          5.003_14      1996\-Dec\-23
\&          5.003_15      1996\-Dec\-23
\&          5.003_16      1996\-Dec\-24
\&          5.003_17      1996\-Dec\-27
\&          5.003_18      1996\-Dec\-31
\&          5.003_19      1997\-Jan\-04
\&          5.003_20      1997\-Jan\-07
\&          5.003_21      1997\-Jan\-15
\&          5.003_22      1997\-Jan\-16
\&          5.003_23      1997\-Jan\-25
\&          5.003_24      1997\-Jan\-29
\&          5.003_25      1997\-Feb\-04
\&          5.003_26      1997\-Feb\-10
\&          5.003_27      1997\-Feb\-18
\&          5.003_28      1997\-Feb\-21
\&          5.003_90      1997\-Feb\-25     Ramping up to the 5.004 release.
\&          5.003_91      1997\-Mar\-01
\&          5.003_92      1997\-Mar\-06
\&          5.003_93      1997\-Mar\-10
\&          5.003_94      1997\-Mar\-22
\&          5.003_95      1997\-Mar\-25
\&          5.003_96      1997\-Apr\-01
\&          5.003_97      1997\-Apr\-03     Fairly widely used.
\&          5.003_97a     1997\-Apr\-05
\&          5.003_97b     1997\-Apr\-08
\&          5.003_97c     1997\-Apr\-10
\&          5.003_97d     1997\-Apr\-13
\&          5.003_97e     1997\-Apr\-15
\&          5.003_97f     1997\-Apr\-17
\&          5.003_97g     1997\-Apr\-18
\&          5.003_97h     1997\-Apr\-24
\&          5.003_97i     1997\-Apr\-25
\&          5.003_97j     1997\-Apr\-28
\&          5.003_98      1997\-Apr\-30
\&          5.003_99      1997\-May\-01
\&          5.003_99a     1997\-May\-09
\&          p54rc1        1997\-May\-12     Release Candidates.
\&          p54rc2        1997\-May\-14
\&
\& Chip    5.004          1997\-May\-15     A major maintenance release.
\&
\& Tim      5.004_01\-t1   1997\-???\-??     The 5.004 maintenance track.
\&          5.004_01\-t2   1997\-Jun\-11     aka perl5.004m1t2
\&          5.004_01      1997\-Jun\-13
\&          5.004_01_01   1997\-Jul\-29     aka perl5.004m2t1
\&          5.004_01_02   1997\-Aug\-01     aka perl5.004m2t2
\&          5.004_01_03   1997\-Aug\-05     aka perl5.004m2t3
\&          5.004_02      1997\-Aug\-07
\&          5.004_02_01   1997\-Aug\-12     aka perl5.004m3t1
\&          5.004_03\-t2   1997\-Aug\-13     aka perl5.004m3t2
\&          5.004_03      1997\-Sep\-05
\&          5.004_04\-t1   1997\-Sep\-19     aka perl5.004m4t1
\&          5.004_04\-t2   1997\-Sep\-23     aka perl5.004m4t2
\&          5.004_04\-t3   1997\-Oct\-10     aka perl5.004m4t3
\&          5.004_04\-t4   1997\-Oct\-14     aka perl5.004m4t4
\&          5.004_04      1997\-Oct\-15
\&          5.004_04\-m1   1998\-Mar\-04     (5.004m5t1) Maint. trials for 5.004_05.
\&          5.004_04\-m2   1998\-May\-01
\&          5.004_04\-m3   1998\-May\-15
\&          5.004_04\-m4   1998\-May\-19
\&          5.004_05\-MT5  1998\-Jul\-21
\&          5.004_05\-MT6  1998\-Oct\-09
\&          5.004_05\-MT7  1998\-Nov\-22
\&          5.004_05\-MT8  1998\-Dec\-03
\& Chip     5.004_05\-MT9  1999\-Apr\-26
\&          5.004_05      1999\-Apr\-29
\&
\& Malcolm  5.004_50      1997\-Sep\-09     The 5.005 development track.
\&          5.004_51      1997\-Oct\-02
\&          5.004_52      1997\-Oct\-15
\&          5.004_53      1997\-Oct\-16
\&          5.004_54      1997\-Nov\-14
\&          5.004_55      1997\-Nov\-25
\&          5.004_56      1997\-Dec\-18
\&          5.004_57      1998\-Feb\-03
\&          5.004_58      1998\-Feb\-06
\&          5.004_59      1998\-Feb\-13
\&          5.004_60      1998\-Feb\-20
\&          5.004_61      1998\-Feb\-27
\&          5.004_62      1998\-Mar\-06
\&          5.004_63      1998\-Mar\-17
\&          5.004_64      1998\-Apr\-03
\&          5.004_65      1998\-May\-15
\&          5.004_66      1998\-May\-29
\& Sarathy  5.004_67      1998\-Jun\-15
\&          5.004_68      1998\-Jun\-23
\&          5.004_69      1998\-Jun\-29
\&          5.004_70      1998\-Jul\-06
\&          5.004_71      1998\-Jul\-09
\&          5.004_72      1998\-Jul\-12
\&          5.004_73      1998\-Jul\-13
\&          5.004_74      1998\-Jul\-14     5.005 beta candidate.
\&          5.004_75      1998\-Jul\-15     5.005 beta1.
\&          5.004_76      1998\-Jul\-21     5.005 beta2.
\&
\& Sarathy  5.005         1998\-Jul\-22     Oneperl.
\&
\& Sarathy  5.005_01      1998\-Jul\-27     The 5.005 maintenance track.
\&          5.005_02\-T1   1998\-Aug\-02
\&          5.005_02\-T2   1998\-Aug\-05
\&          5.005_02      1998\-Aug\-08
\& Graham   5.005_03\-MT1  1998\-Nov\-30
\&          5.005_03\-MT2  1999\-Jan\-04
\&          5.005_03\-MT3  1999\-Jan\-17
\&          5.005_03\-MT4  1999\-Jan\-26
\&          5.005_03\-MT5  1999\-Jan\-28
\&          5.005_03\-MT6  1999\-Mar\-05
\&          5.005_03      1999\-Mar\-28
\& Leon     5.005_04\-RC1  2004\-Feb\-05
\&          5.005_04\-RC2  2004\-Feb\-18
\&          5.005_04      2004\-Feb\-23
\&          5.005_05\-RC1  2009\-Feb\-16
\&
\& Sarathy  5.005_50      1998\-Jul\-26     The 5.6 development track.
\&          5.005_51      1998\-Aug\-10
\&          5.005_52      1998\-Sep\-25
\&          5.005_53      1998\-Oct\-31
\&          5.005_54      1998\-Nov\-30
\&          5.005_55      1999\-Feb\-16
\&          5.005_56      1999\-Mar\-01
\&          5.005_57      1999\-May\-25
\&          5.005_58      1999\-Jul\-27
\&          5.005_59      1999\-Aug\-02
\&          5.005_60      1999\-Aug\-02
\&          5.005_61      1999\-Aug\-20
\&          5.005_62      1999\-Oct\-15
\&          5.005_63      1999\-Dec\-09
\&          5.5.640       2000\-Feb\-02
\&          5.5.650       2000\-Feb\-08     beta1
\&          5.5.660       2000\-Feb\-22     beta2
\&          5.5.670       2000\-Feb\-29     beta3
\&          5.6.0\-RC1     2000\-Mar\-09     Release candidate 1.
\&          5.6.0\-RC2     2000\-Mar\-14     Release candidate 2.
\&          5.6.0\-RC3     2000\-Mar\-21     Release candidate 3.
\&
\& Sarathy  5.6.0         2000\-Mar\-22
\&
\& Sarathy  5.6.1\-TRIAL1  2000\-Dec\-18     The 5.6 maintenance track.
\&          5.6.1\-TRIAL2  2001\-Jan\-31
\&          5.6.1\-TRIAL3  2001\-Mar\-19
\&          5.6.1\-foolish 2001\-Apr\-01     The "fools\-gold" release.
\&          5.6.1         2001\-Apr\-08
\& Rafael   5.6.2\-RC1     2003\-Nov\-08
\&          5.6.2         2003\-Nov\-15     Fix new build issues
\&
\& Jarkko   5.7.0         2000\-Sep\-02     The 5.7 track: Development.
\&          5.7.1         2001\-Apr\-09
\&          5.7.2         2001\-Jul\-13     Virtual release candidate 0.
\&          5.7.3         2002\-Mar\-05
\&          5.8.0\-RC1     2002\-Jun\-01
\&          5.8.0\-RC2     2002\-Jun\-21
\&          5.8.0\-RC3     2002\-Jul\-13
\&
\& Jarkko   5.8.0         2002\-Jul\-18
\&
\& Jarkko   5.8.1\-RC1     2003\-Jul\-10     The 5.8 maintenance track
\&          5.8.1\-RC2     2003\-Jul\-11
\&          5.8.1\-RC3     2003\-Jul\-30
\&          5.8.1\-RC4     2003\-Aug\-01
\&          5.8.1\-RC5     2003\-Sep\-22
\&          5.8.1         2003\-Sep\-25
\& Nicholas 5.8.2\-RC1     2003\-Oct\-27
\&          5.8.2\-RC2     2003\-Nov\-03
\&          5.8.2         2003\-Nov\-05
\&          5.8.3\-RC1     2004\-Jan\-07
\&          5.8.3         2004\-Jan\-14
\&          5.8.4\-RC1     2004\-Apr\-05
\&          5.8.4\-RC2     2004\-Apr\-15
\&          5.8.4         2004\-Apr\-21
\&          5.8.5\-RC1     2004\-Jul\-06
\&          5.8.5\-RC2     2004\-Jul\-08
\&          5.8.5         2004\-Jul\-19
\&          5.8.6\-RC1     2004\-Nov\-11
\&          5.8.6         2004\-Nov\-27
\&          5.8.7\-RC1     2005\-May\-18
\&          5.8.7         2005\-May\-30
\&          5.8.8\-RC1     2006\-Jan\-20
\&          5.8.8         2006\-Jan\-31
\&          5.8.9\-RC1     2008\-Nov\-10
\&          5.8.9\-RC2     2008\-Dec\-06
\&          5.8.9         2008\-Dec\-14
\&
\& Hugo     5.9.0         2003\-Oct\-27     The 5.9 development track
\& Rafael   5.9.1         2004\-Mar\-16
\&          5.9.2         2005\-Apr\-01
\&          5.9.3         2006\-Jan\-28
\&          5.9.4         2006\-Aug\-15
\&          5.9.5         2007\-Jul\-07
\&          5.10.0\-RC1    2007\-Nov\-17
\&          5.10.0\-RC2    2007\-Nov\-25
\&
\& Rafael   5.10.0        2007\-Dec\-18
\&
\& David M  5.10.1\-RC1    2009\-Aug\-06     The 5.10 maintenance track
\&          5.10.1\-RC2    2009\-Aug\-18
\&          5.10.1        2009\-Aug\-22
\&
\& Jesse    5.11.0        2009\-Oct\-02     The 5.11 development track
\&          5.11.1        2009\-Oct\-20
\& Leon     5.11.2        2009\-Nov\-20
\& Jesse    5.11.3        2009\-Dec\-20
\& Ricardo  5.11.4        2010\-Jan\-20
\& Steve    5.11.5        2010\-Feb\-20
\& Jesse    5.12.0\-RC0    2010\-Mar\-21
\&          5.12.0\-RC1    2010\-Mar\-29
\&          5.12.0\-RC2    2010\-Apr\-01
\&          5.12.0\-RC3    2010\-Apr\-02
\&          5.12.0\-RC4    2010\-Apr\-06
\&          5.12.0\-RC5    2010\-Apr\-09
\&
\& Jesse    5.12.0        2010\-Apr\-12
\&
\& Jesse    5.12.1\-RC2    2010\-May\-13     The 5.12 maintenance track
\&          5.12.1\-RC1    2010\-May\-09
\&          5.12.1        2010\-May\-16
\&          5.12.2\-RC2    2010\-Aug\-31
\&          5.12.2        2010\-Sep\-06
\& Ricardo  5.12.3\-RC1    2011\-Jan\-09
\& Ricardo  5.12.3\-RC2    2011\-Jan\-14
\& Ricardo  5.12.3\-RC3    2011\-Jan\-17
\& Ricardo  5.12.3        2011\-Jan\-21
\& Leon     5.12.4\-RC1    2011\-Jun\-08
\& Leon     5.12.4        2011\-Jun\-20
\& Dominic  5.12.5        2012\-Nov\-10
\&
\& Leon     5.13.0        2010\-Apr\-20     The 5.13 development track
\& Ricardo  5.13.1        2010\-May\-20
\& Matt     5.13.2        2010\-Jun\-22
\& David G  5.13.3        2010\-Jul\-20
\& Florian  5.13.4        2010\-Aug\-20
\& Steve    5.13.5        2010\-Sep\-19
\& Miyagawa 5.13.6        2010\-Oct\-20
\& BinGOs   5.13.7        2010\-Nov\-20
\& Zefram   5.13.8        2010\-Dec\-20
\& Jesse    5.13.9        2011\-Jan\-20
\& \*(Aevar     5.13.10       2011\-Feb\-20
\& Florian  5.13.11       2011\-Mar\-20
\& Jesse    5.14.0RC1     2011\-Apr\-20
\& Jesse    5.14.0RC2     2011\-May\-04
\& Jesse    5.14.0RC3     2011\-May\-11
\&
\& Jesse    5.14.0        2011\-May\-14     The 5.14 maintenance track
\& Jesse    5.14.1        2011\-Jun\-16
\& Florian  5.14.2\-RC1    2011\-Sep\-19
\&          5.14.2        2011\-Sep\-26
\& Dominic  5.14.3        2012\-Oct\-12
\& David M  5.14.4\-RC1    2013\-Mar\-05
\& David M  5.14.4\-RC2    2013\-Mar\-07
\& David M  5.14.4        2013\-Mar\-10
\&
\& David G  5.15.0        2011\-Jun\-20     The 5.15 development track
\& Zefram   5.15.1        2011\-Jul\-20
\& Ricardo  5.15.2        2011\-Aug\-20
\& Stevan   5.15.3        2011\-Sep\-20
\& Florian  5.15.4        2011\-Oct\-20
\& Steve    5.15.5        2011\-Nov\-20
\& Dave R   5.15.6        2011\-Dec\-20
\& BinGOs   5.15.7        2012\-Jan\-20
\& Max M    5.15.8        2012\-Feb\-20
\& Abigail  5.15.9        2012\-Mar\-20
\& Ricardo  5.16.0\-RC0    2012\-May\-10
\& Ricardo  5.16.0\-RC1    2012\-May\-14
\& Ricardo  5.16.0\-RC2    2012\-May\-15
\&
\& Ricardo  5.16.0        2012\-May\-20     The 5.16 maintenance track
\& Ricardo  5.16.1        2012\-Aug\-08
\& Ricardo  5.16.2        2012\-Nov\-01
\& Ricardo  5.16.3\-RC1    2013\-Mar\-06
\& Ricardo  5.16.3        2013\-Mar\-11
\&
\& Zefram   5.17.0        2012\-May\-26     The 5.17 development track
\& Jesse L  5.17.1        2012\-Jun\-20
\& TonyC    5.17.2        2012\-Jul\-20
\& Steve    5.17.3        2012\-Aug\-20
\& Florian  5.17.4        2012\-Sep\-20
\& Florian  5.17.5        2012\-Oct\-20
\& Ricardo  5.17.6        2012\-Nov\-20
\& Dave R   5.17.7        2012\-Dec\-18
\& Aaron    5.17.8        2013\-Jan\-20
\& BinGOs   5.17.9        2013\-Feb\-20
\& Max M    5.17.10       2013\-Mar\-21
\&
\& Ricardo  5.18.0\-RC1    2013\-May\-11     The 5.18 maintenance track
\& Ricardo  5.18.0\-RC2    2013\-May\-12
\& Ricardo  5.18.0\-RC3    2013\-May\-13
\& Ricardo  5.18.0\-RC4    2013\-May\-15
\& Ricardo  5.18.0        2013\-May\-18
\& Ricardo  5.18.1\-RC1    2013\-Aug\-01
\& Ricardo  5.18.1\-RC2    2013\-Aug\-03
\& Ricardo  5.18.1\-RC3    2013\-Aug\-08
\& Ricardo  5.18.1        2013\-Aug\-12
\& Ricardo  5.18.2        2014\-Jan\-06
\&
\& Ricardo   5.19.0       2013\-May\-20     The 5.19 development track
\& David G   5.19.1       2013\-Jun\-21
\& Aristotle 5.19.2       2013\-Jul\-22
.Ve
.SS "\s-1SELECTED RELEASE SIZES\s0"
.IX Subsection "SELECTED RELEASE SIZES"
For example the notation \*(L"core: 212  29\*(R" in the release 1.000 means that
it had in the core 212 kilobytes, in 29 files.  The \*(L"core\*(R"..\*(L"doc\*(R" are
explained below.
.PP
.Vb 2
\& release        core       lib         ext        t         doc
\& ======================================================================
\&
\& 1.000           212  29      \-   \-      \-    \-     38   51     62   3
\& 1.014           219  29      \-   \-      \-    \-     39   52     68   4
\& 2.000           309  31      2   3      \-    \-     55   57     92   4
\& 2.001           312  31      2   3      \-    \-     55   57     94   4
\& 3.000           508  36     24  11      \-    \-     79   73    156   5
\& 3.044           645  37     61  20      \-    \-     90   74    190   6
\& 4.000           635  37     59  20      \-    \-     91   75    198   4
\& 4.019           680  37     85  29      \-    \-     98   76    199   4
\& 4.036           709  37     89  30      \-    \-     98   76    208   5
\& 5.000alpha2     785  50    114  32      \-    \-    112   86    209   5
\& 5.000alpha3     801  50    117  33      \-    \-    121   87    209   5
\& 5.000alpha9    1022  56    149  43    116   29    125   90    217   6
\& 5.000a12h       978  49    140  49    205   46    152   97    228   9
\& 5.000b3h       1035  53    232  70    216   38    162   94    218  21
\& 5.000          1038  53    250  76    216   38    154   92    536  62
\& 5.001m         1071  54    388  82    240   38    159   95    544  29
\& 5.002          1121  54    661 101    287   43    155   94    847  35
\& 5.003          1129  54    680 102    291   43    166  100    853  35
\& 5.003_07       1231  60    748 106    396   53    213  137    976  39
\& 5.004          1351  60   1230 136    408   51    355  161   1587  55
\& 5.004_01       1356  60   1258 138    410   51    358  161   1587  55
\& 5.004_04       1375  60   1294 139    413   51    394  162   1629  55
\& 5.004_05       1463  60   1435 150    394   50    445  175   1855  59
\& 5.004_51       1401  61   1260 140    413   53    358  162   1594  56
\& 5.004_53       1422  62   1295 141    438   70    394  162   1637  56
\& 5.004_56       1501  66   1301 140    447   74    408  165   1648  57
\& 5.004_59       1555  72   1317 142    448   74    424  171   1678  58
\& 5.004_62       1602  77   1327 144    629   92    428  173   1674  58
\& 5.004_65       1626  77   1358 146    615   92    446  179   1698  60
\& 5.004_68       1856  74   1382 152    619   92    463  187   1784  60
\& 5.004_70       1863  75   1456 154    675   92    494  194   1809  60
\& 5.004_73       1874  76   1467 152    762  102    506  196   1883  61
\& 5.004_75       1877  76   1467 152    770  103    508  196   1896  62
\& 5.005          1896  76   1469 152    795  103    509  197   1945  63
\& 5.005_03       1936  77   1541 153    813  104    551  201   2176  72
\& 5.005_50       1969  78   1842 301    795  103    514  198   1948  63
\& 5.005_53       1999  79   1885 303    806  104    602  224   2002  67
\& 5.005_56       2086  79   1970 307    866  113    672  238   2221  75
\& 5.6.0          2820  79   2626 364   1096  129    863  280   2840  93
\& 5.6.1          2946  78   2921 430   1171  132   1024  304   3330 102
\& 5.6.2          2947  78   3143 451   1247  127   1303  387   3406 102
\& 5.7.0          2977  80   2801 425   1250  132    975  307   3206 100
\& 5.7.1          3351  84   3442 455   1944  167   1334  357   3698 124
\& 5.7.2          3491  87   4858 618   3290  298   1598  449   3910 139
\& 5.7.3          3299  85   4295 537   2196  300   2176  626   4171 120
\& 5.8.0          3489  87   4533 585   2437  331   2588  726   4368 125
\& 5.8.1          3674  90   5104 623   2604  353   2983  836   4625 134
\& 5.8.2          3633  90   5111 623   2623  357   3019  848   4634 135
\& 5.8.3          3625  90   5141 624   2660  363   3083  869   4669 136
\& 5.8.4          3653  90   5170 634   2684  368   3148  885   4689 137
\& 5.8.5          3664  90   4260 303   2707  369   3208  898   4689 138
\& 5.8.6          3690  90   4271 303   3141  396   3411  925   4709 139
\& 5.8.7          3788  90   4322 307   3297  401   3485  964   4744 141
\& 5.8.8          3895  90   4357 314   3409  431   3622 1017   4979 144
\& 5.8.9          4132  93   5508 330   3826  529   4364 1234   5348 152
\& 5.9.0          3657  90   4951 626   2603  354   3011  841   4609 135
\& 5.9.1          3580  90   5196 634   2665  367   3186  889   4725 138
\& 5.9.2          3863  90   4654 312   3283  403   3551  973   4800 142
\& 5.9.3          4096  91   5318 381   4806  597   4272 1214   5139 147
\& 5.9.4          4393  94   5718 415   4578  642   4646 1310   5335 153
\& 5.9.5          4681  96   6849 479   4827  671   5155 1490   5572 159
\& 5.10.0         4710  97   7050 486   4899  673   5275 1503   5673 160
\& 5.10.1         4858  98   7440 519   6195  921   6147 1751   5151 163
\& 5.12.0         4999 100   1146 121  15227 2176   6400 1843   5342 168
\& 5.12.1         5000 100   1146 121  15283 2178   6407 1846   5354 169
\& 5.12.2         5003 100   1146 121  15404 2178   6413 1846   5376 170
\& 5.12.3         5004 100   1146 121  15529 2180   6417 1848   5391 171
\& 5.14.0         5328 104   1100 114  17779 2479   7697 2130   5871 188
\& 5.16.0         5562 109   1077  80  20504 2702   8750 2375   4815 152
\& 5.18.0         5892 113   1088  79  20077 2760   9365 2439   4943 154
.Ve
.PP
The \*(L"core\*(R"...\*(L"doc\*(R" mean the following files from the Perl source code
distribution.  The glob notation ** means recursively, (.) means
regular files.
.PP
.Vb 6
\& core   *.[hcy]
\& lib    lib/**/*.p[ml]
\& ext    ext/**/*.{[hcyt],xs,pm} (for \-5.10.1) or
\&        {dist,ext,cpan}/**/*.{[hcyt],xs,pm} (for 5.12.0\-)
\& t      t/**/*(.) (for 1\-5.005_56) or **/*.t (for 5.6.0\-5.7.3)
\& doc    {README*,INSTALL,*[_.]man{,.?},pod/**/*.pod}
.Ve
.PP
Here are some statistics for the other subdirectories and one file in
the Perl source distribution for somewhat more selected releases.
.PP
.Vb 2
\& ======================================================================
\&   Legend:  kB   #
\&
\&                  1.014      2.001      3.044
\&
\& Configure      31    1    37    1    62    1
\& eg              \-    \-    34   28    47   39
\& h2pl            \-    \-     \-    \-    12   12
\& msdos           \-    \-     \-    \-    41   13
\& os2             \-    \-     \-    \-    63   22
\& usub            \-    \-     \-    \-    21   16
\& x2p           103   17   104   17   137   17
\&
\& ======================================================================
\&
\&                  4.000      4.019      4.036
\&
\& atarist         \-    \-     \-    \-   113   31
\& Configure      73    1    83    1    86    1
\& eg             47   39    47   39    47   39
\& emacs          67    4    67    4    67    4
\& h2pl           12   12    12   12    12   12
\& hints           \-    \-     5   42    11   56
\& msdos          57   15    58   15    60   15
\& os2            81   29    81   29   113   31
\& usub           25    7    43    8    43    8
\& x2p           147   18   152   19   154   19
\&
\& ======================================================================
\&
\&                5.000a2  5.000a12h   5.000b3h      5.000     5.001m
\&
\& apollo          8    3     8    3     8    3     8    3     8    3
\& atarist       113   31   113   31     \-    \-     \-    \-     \-    \-
\& bench           \-    \-     0    1     \-    \-     \-    \-     \-    \-
\& Bugs            2    5    26    1     \-    \-     \-    \-     \-    \-
\& dlperl         40    5     \-    \-     \-    \-     \-    \-     \-    \-
\& do            127   71     \-    \-     \-    \-     \-    \-     \-    \-
\& Configure       \-    \-   153    1   159    1   160    1   180    1
\& Doc             \-    \-    26    1    75    7    11    1    11    1
\& eg             79   58    53   44    51   43    54   44    54   44
\& emacs          67    4   104    6   104    6   104    1   104    6
\& h2pl           12   12    12   12    12   12    12   12    12   12
\& hints          11   56    12   46    18   48    18   48    44   56
\& msdos          60   15    60   15     \-    \-     \-    \-     \-    \-
\& os2           113   31   113   31     \-    \-     \-    \-     \-    \-
\& U               \-    \-    62    8   112   42     \-    \-     \-    \-
\& usub           43    8     \-    \-     \-    \-     \-    \-     \-    \-
\& vms             \-    \-    80    7   123    9   184   15   304   20
\& x2p           171   22   171   21   162   20   162   20   279   20
\&
\& ======================================================================
\&
\&                  5.002      5.003   5.003_07
\&
\& Configure     201    1   201    1   217    1
\& eg             54   44    54   44    54   44
\& emacs         108    1   108    1   143    1
\& h2pl           12   12    12   12    12   12
\& hints          73   59    77   60    90   62
\& os2            84   17    56   10   117   42
\& plan9           \-    \-     \-    \-    79   15
\& Porting         \-    \-     \-    \-    51    1
\& utils          87    7    88    7    97    7
\& vms           500   24   475   26   505   27
\& x2p           280   20   280   20   280   19
\&
\& ======================================================================
\&
\&                  5.004   5.004_04   5.004_62   5.004_65   5.004_68
\&
\& beos            \-    \-     \-    \-     \-    \-      1   1      1   1
\& Configure     225    1   225    1   240    1    248   1    256   1
\& cygwin32       23    5    23    5    23    5     24   5     24   5
\& djgpp           \-    \-     \-    \-    14    5     14   5     14   5
\& eg             81   62    81   62    81   62     81  62     81  62
\& emacs         194    1   204    1   212    2    212   2    212   2
\& h2pl           12   12    12   12    12   12     12  12     12  12
\& hints         129   69   132   71   144   72    151  74    155  74
\& os2           121   42   127   42   127   44    129  44    129  44
\& plan9          82   15    82   15    82   15     82  15     82  15
\& Porting        94    2   109    4   203    6    234   8    241   9
\& qnx             1    2     1    2     1    2      1   2      1   2
\& utils         112    8   118    8   124    8    156   9    159   9
\& vms           518   34   524   34   538   34    569  34    569  34
\& win32         285   33   378   36   470   39    493  39    575  41
\& x2p           281   19   281   19   281   19    282  19    281  19
\&
\& ======================================================================
\&
\&               5.004_70   5.004_73   5.004_75      5.005   5.005_03
\&
\& apollo          \-    \-     \-    \-     \-    \-     \-    \-      0   1
\& beos            1    1     1    1     1    1     1    1      1   1
\& Configure     256    1   256    1   264    1   264    1    270   1
\& cygwin32       24    5    24    5    24    5    24    5     24   5
\& djgpp          14    5    14    5    14    5    14    5     15   5
\& eg             86   65    86   65    86   65    86   65     86  65
\& emacs         262    2   262    2   262    2   262    2    274   2
\& h2pl           12   12    12   12    12   12    12   12     12  12
\& hints         157   74   157   74   159   74   160   74    179  77
\& mint            \-    \-     \-    \-     \-    \-     \-    \-      4   7
\& mpeix           \-    \-     \-    \-     5    3     5    3      5   3
\& os2           129   44   139   44   142   44   143   44    148  44
\& plan9          82   15    82   15    82   15    82   15     82  15
\& Porting       241    9   253    9   259   10   264   12    272  13
\& qnx             1    2     1    2     1    2     1    2      1   2
\& utils         160    9   160    9   160    9   160    9    164   9
\& vms           570   34   572   34   573   34   575   34    583  34
\& vos             \-    \-     \-    \-     \-    \-     \-   \-     156  10
\& win32         577   41   585   41   585   41   587   41    600  42
\& x2p           281   19   281   19   281   19   281   19    281  19
\&
\& ======================================================================
\&
\&                  5.6.0      5.6.1      5.6.2      5.7.3
\&
\& apollo          8    3     8    3     8    3     8    3
\& beos            5    2     5    2     5    2     6    4
\& Configure     346    1   361    1   363    1   394    1
\& Cross           \-    \-     \-    \-     \-    \-     4    2
\& djgpp          19    6    19    6    19    6    21    7
\& eg            112   71   112   71   112   71     \-    \-
\& emacs         303    4   319    4   319    4   319    4
\& epoc           29    8    35    8    35    8    36    8
\& h2pl           24   15    24   15    24   15    24   15
\& hints         242   83   250   84   321   89   272   87
\& mint           11    9    11    9    11    9    11    9
\& mpeix           9    4     9    4     9    4     9    4
\& NetWare         \-    \-     \-    \-     \-    \-   423   57
\& os2           214   59   224   60   224   60   357   66
\& plan9          92   17    92   17    92   17    85   15
\& Porting       361   15   390   16   390   16   425   21
\& qnx             5    3     5    3     5    3     5    3
\& utils         228   12   221   11   222   11   267   13
\& uts             \-    \-     \-    \-     \-    \-    12    3
\& vmesa          25    4    25    4    25    4    25    4
\& vms           686   38   627   38   627   38   649   36
\& vos           227   12   249   15   248   15   281   17
\& win32         755   41   782   42   801   42  1006   50
\& x2p           307   20   307   20   307   20   345   20
\&
\& ======================================================================
\&
\&                  5.8.0      5.8.1      5.8.2      5.8.3      5.8.4
\&
\& apollo          8    3     8    3     8    3     8    3     8    3
\& beos            6    4     6    4     6    4     6    4     6    4
\& Configure     472    1   493    1   493    1   493    1   494    1
\& Cross           4    2    45   10    45   10    45   10    45   10
\& djgpp          21    7    21    7    21    7    21    7    21    7
\& emacs         319    4   329    4   329    4   329    4   329    4
\& epoc           33    8    33    8    33    8    33    8    33    8
\& h2pl           24   15    24   15    24   15    24   15    24   15
\& hints         294   88   321   89   321   89   321   89   348   91
\& mint           11    9    11    9    11    9    11    9    11    9
\& mpeix          24    5    25    5    25    5    25    5    25    5
\& NetWare       488   61   490   61   490   61   490   61   488   61
\& os2           361   66   445   67   450   67   488   67   488   67
\& plan9          85   15   325   17   325   17   325   17   321   17
\& Porting       479   22   537   32   538   32   539   32   538   33
\& qnx             5    3     5    3     5    3     5    3     5    3
\& utils         275   15   258   16   258   16   263   19   263   19
\& uts            12    3    12    3    12    3    12    3    12    3
\& vmesa          25    4    25    4    25    4    25    4    25    4
\& vms           648   36   654   36   654   36   656   36   656   36
\& vos           330   20   335   20   335   20   335   20   335   20
\& win32        1062   49  1125   49  1127   49  1126   49  1181   56
\& x2p           347   20   348   20   348   20   348   20   348   20
\&
\& ======================================================================
\&
\&                  5.8.5      5.8.6      5.8.7      5.8.8      5.8.9
\&
\& apollo          8    3     8    3     8    3     8    3     8    3
\& beos            6    4     6    4     8    4     8    4     8    4
\& Configure     494    1   494    1   495    1   506    1   520    1
\& Cross          45   10    45   10    45   10    45   10    46   10
\& djgpp          21    7    21    7    21    7    21    7    21    7
\& emacs         329    4   329    4   329    4   329    4   406    4
\& epoc           33    8    33    8    33    8    34    8    35    8
\& h2pl           24   15    24   15    24   15    24   15    24   15
\& hints         350   91   352   91   355   94   360   94   387   99
\& mint           11    9    11    9    11    9    11    9    11    9
\& mpeix          25    5    25    5    25    5    49    6    49    6
\& NetWare       488   61   488   61   488   61   490   61   491   61
\& os2           488   67   488   67   488   67   488   67   552   70
\& plan9         321   17   321   17   321   17   322   17   324   17
\& Porting       538   34   548   35   549   35   564   37   625   41
\& qnx             5    3     5    3     5    3     5    3     5    3
\& utils         265   19   265   19   266   19   267   19   281   21
\& uts            12    3    12    3    12    3    12    3    12    3
\& vmesa          25    4    25    4    25    4    25    4    25    4
\& vms           657   36   658   36   662   36   664   36   716   35
\& vos           335   20   335   20   335   20   336   21   345   22
\& win32        1183   56  1190   56  1199   56  1219   56  1484   68
\& x2p           349   20   349   20   349   20   349   19   350   19
\&
\& ======================================================================
\&
\&                  5.9.0      5.9.1      5.9.2      5.9.3      5.9.4
\&
\& apollo          8    3     8    3     8    3     8    3     8    3
\& beos            6    4     6    4     8    4     8    4     8    4
\& Configure     493    1   493    1   495    1   508    1   512    1
\& Cross          45   10    45   10    45   10    45   10    46   10
\& djgpp          21    7    21    7    21    7    21    7    21    7
\& emacs         329    4   329    4   329    4   329    4   329    4
\& epoc           33    8    33    8    33    8    34    8    34    8
\& h2pl           24   15    24   15    24   15    24   15    24   15
\& hints         321   89   346   91   355   94   359   94   366   96
\& mad             \-    \-     \-    \-     \-    \-     \-    \-   174    6
\& mint           11    9    11    9    11    9    11    9    11    9
\& mpeix          25    5    25    5    25    5    49    6    49    6
\& NetWare       489   61   487   61   487   61   489   61   489   61
\& os2           444   67   488   67   488   67   488   67   488   67
\& plan9         325   17   321   17   321   17   322   17   323   17
\& Porting       537   32   536   33   549   36   564   38   576   38
\& qnx             5    3     5    3     5    3     5    3     5    3
\& symbian         \-    \-     \-    \-     \-    \-   293   53   293   53
\& utils         258   16   263   19   268   20   273   23   275   24
\& uts            12    3    12    3    12    3    12    3    12    3
\& vmesa          25    4    25    4    25    4    25    4    25    4
\& vms           660   36   547   33   553   33   661   33   696   33
\& vos            11    7    11    7    11    7    11    7    11    7
\& win32        1120   49  1124   51  1191   56  1209   56  1719   90
\& x2p           348   20   348   20   349   20   349   19   349   19
\&
\& ======================================================================
\&
\&                  5.9.5     5.10.0     5.10.1     5.12.0     5.12.1
\&
\& apollo          8    3     8    3     0    3     0    3     0    3
\& beos            8    4     8    4     4    4     4    4     4    4
\& Configure     518    1   518    1   533    1   536    1   536    1
\& Cross         122   15   122   15   119   15   118   15   118   15
\& djgpp          21    7    21    7    17    7    17    7    17    7
\& emacs         329    4   406    4   402    4   402    4   402    4
\& epoc           34    8    35    8    31    8    31    8    31    8
\& h2pl           24   15    24   15    12   15    12   15    12   15
\& hints         377   98   381   98   385  100   368   97   368   97
\& mad           182    8   182    8   174    8   174    8   174    8
\& mint           11    9    11    9     3    9     \-    \-     \-    \-
\& mpeix          49    6    49    6    45    6    45    6    45    6
\& NetWare       489   61   489   61   465   61   466   61   466   61
\& os2           552   70   552   70   507   70   507   70   507   70
\& plan9         324   17   324   17   316   17   316   17   316   17
\& Porting       627   40   632   40   933   53   749   54   749   54
\& qnx             5    3     5    4     1    4     1    4     1    4
\& symbian       300   54   300   54   290   54   288   54   288   54
\& utils         260   26   264   27   268   27   269   27   269   27
\& uts            12    3    12    3     8    3     8    3     8    3
\& vmesa          25    4    25    4    21    4    21    4    21    4
\& vms           690   32   722   32   693   30   645   18   645   18
\& vos            19    8    19    8    16    8    16    8    16    8
\& win32        1482   68  1485   68  1497   70  1841   73  1841   73
\& x2p           349   19   349   19   345   19   345   19   345   19
\&
\& ======================================================================
\&
\&                 5.12.2     5.12.3      5.14.0     5.16.0       5.18.0
\&
\& apollo          0    3     0    3      \-    \-     \-    \-      \-     \-
\& beos            4    4     4    4      5    4     5    4      \-     \-
\& Configure     536    1   536    1    539    1   547    1    550     1
\& Cross         118   15   118   15    118   15   118   15    118    15
\& djgpp          17    7    17    7     18    7    18    7     18     7
\& emacs         402    4   402    4      \-    \-     \-    \-      \-     \-
\& epoc           31    8    31    8     32    8    30    8      \-     \-
\& h2pl           12   15    12   15     15   15    15   15     13    15
\& hints         368   97   368   97    370   96   371   96    354    91
\& mad           174    8   174    8    176    8   176    8    174     8
\& mpeix          45    6    45    6     46    6    46    6      \-     \-
\& NetWare       466   61   466   61    473   61   472   61    469    61
\& os2           507   70   507   70    518   70   519   70    510    70
\& plan9         316   17   316   17    319   17   319   17    318    17
\& Porting       750   54   750   54    855   60  1093   69   1149    70
\& qnx             1    4     1    4      2    4     2    4      1     4
\& symbian       288   54   288   54    292   54   292   54    290    54
\& utils         269   27   269   27    249   29   245   30    246    31
\& uts             8    3     8    3      9    3     9    3      \-     \-
\& vmesa          21    4    21    4     22    4    22    4      \-     \-
\& vms           646   18   644   18    639   17   571   15    564    15
\& vos            16    8    16    8     17    8     9    7      8     7
\& win32        1841   73  1841   73   1833   72  1655   67   1157    62
\& x2p           345   19   345   19    346   19   345   19    344    20
.Ve
.SS "\s-1SELECTED PATCH SIZES\s0"
.IX Subsection "SELECTED PATCH SIZES"
The \*(L"diff lines kB\*(R" means that for example the patch 5.003_08, to be
applied on top of the 5.003_07 (or whatever was before the 5.003_08)
added lines for 110 kilobytes, it removed lines for 19 kilobytes, and
changed lines for 424 kilobytes.  Just the lines themselves are
counted, not their context.  The \*(L"+ \- !\*(R" become from the \fIdiff\fR\|(1)
context diff output format.
.PP
.Vb 4
\& Pump\-  Release         Date              diff lines kB
\& king                                     \-\-\-\-\-\-\-\-\-\-\-\-\-
\&                                          +     \-     !
\& ======================================================================
\&
\& Chip     5.003_08      1996\-Nov\-19     110    19   424
\&          5.003_09      1996\-Nov\-26      38     9   248
\&          5.003_10      1996\-Nov\-29      29     2    27
\&          5.003_11      1996\-Dec\-06      73    12   165
\&          5.003_12      1996\-Dec\-19     275     6   436
\&          5.003_13      1996\-Dec\-20      95     1    56
\&          5.003_14      1996\-Dec\-23      23     7   333
\&          5.003_15      1996\-Dec\-23       0     0     1
\&          5.003_16      1996\-Dec\-24      12     3    50
\&          5.003_17      1996\-Dec\-27      19     1    14
\&          5.003_18      1996\-Dec\-31      21     1    32
\&          5.003_19      1997\-Jan\-04      80     3    85
\&          5.003_20      1997\-Jan\-07      18     1   146
\&          5.003_21      1997\-Jan\-15      38    10   221
\&          5.003_22      1997\-Jan\-16       4     0    18
\&          5.003_23      1997\-Jan\-25      71    15   119
\&          5.003_24      1997\-Jan\-29     426     1    20
\&          5.003_25      1997\-Feb\-04      21     8   169
\&          5.003_26      1997\-Feb\-10      16     1    15
\&          5.003_27      1997\-Feb\-18      32    10    38
\&          5.003_28      1997\-Feb\-21      58     4    66
\&          5.003_90      1997\-Feb\-25      22     2    34
\&          5.003_91      1997\-Mar\-01      37     1    39
\&          5.003_92      1997\-Mar\-06      16     3    69
\&          5.003_93      1997\-Mar\-10      12     3    15
\&          5.003_94      1997\-Mar\-22     407     7   200
\&          5.003_95      1997\-Mar\-25      41     1    37
\&          5.003_96      1997\-Apr\-01     283     5   261
\&          5.003_97      1997\-Apr\-03      13     2    34
\&          5.003_97a     1997\-Apr\-05      57     1    27
\&          5.003_97b     1997\-Apr\-08      14     1    20
\&          5.003_97c     1997\-Apr\-10      20     1    16
\&          5.003_97d     1997\-Apr\-13       8     0    16
\&          5.003_97e     1997\-Apr\-15      15     4    46
\&          5.003_97f     1997\-Apr\-17       7     1    33
\&          5.003_97g     1997\-Apr\-18       6     1    42
\&          5.003_97h     1997\-Apr\-24      23     3    68
\&          5.003_97i     1997\-Apr\-25      23     1    31
\&          5.003_97j     1997\-Apr\-28      36     1    49
\&          5.003_98      1997\-Apr\-30     171    12   539
\&          5.003_99      1997\-May\-01       6     0     7
\&          5.003_99a     1997\-May\-09      36     2    61
\&          p54rc1        1997\-May\-12       8     1    11
\&          p54rc2        1997\-May\-14       6     0    40
\&
\&        5.004           1997\-May\-15       4     0     4
\&
\& Tim      5.004_01      1997\-Jun\-13     222    14    57
\&          5.004_02      1997\-Aug\-07     112    16   119
\&          5.004_03      1997\-Sep\-05     109     0    17
\&          5.004_04      1997\-Oct\-15      66     8   173
.Ve
.PP
\fIThe patch-free era\fR
.IX Subsection "The patch-free era"
.PP
In more modern times, named releases don't come as often, and as progress
can be followed (nearly) instantly (with rsync, and since late 2008, git)
patches between versions are no longer provided. However, that doesn't
keep us from calculating how large a patch could have been. Which is
shown in the table below. Unless noted otherwise, the size mentioned is
the patch to bring version x.y.z to x.y.z+1.
.PP
.Vb 2
\& Sarathy  5.6.1         2001\-Apr\-08     531    44   651
\& Rafael   5.6.2         2003\-Nov\-15      20    11  1819
\&
\& Jarkko   5.8.0         2002\-Jul\-18    1205    31   471   From 5.7.3
\&
\&          5.8.1         2003\-Sep\-25     243   102  6162
\& Nicholas 5.8.2         2003\-Nov\-05      10    50   788
\&          5.8.3         2004\-Jan\-14      31    13   360
\&          5.8.4         2004\-Apr\-21      33     8   299
\&          5.8.5         2004\-Jul\-19      11    19   255
\&          5.8.6         2004\-Nov\-27      35     3   192
\&          5.8.7         2005\-May\-30      75    34   778
\&          5.8.8         2006\-Jan\-31     131    42  1251
\&          5.8.9         2008\-Dec\-14     340   132 12988
\&
\& Hugo     5.9.0         2003\-Oct\-27     281   168  7132   From 5.8.0
\& Rafael   5.9.1         2004\-Mar\-16      57   250  2107
\&          5.9.2         2005\-Apr\-01     720    57   858
\&          5.9.3         2006\-Jan\-28    1124   102  1906
\&          5.9.4         2006\-Aug\-15     896    60   862
\&          5.9.5         2007\-Jul\-07    1149   128  1062
\&
\&          5.10.0        2007\-Dec\-18      50    31 13111   From 5.9.5
.Ve
.SH "THE KEEPERS OF THE RECORDS"
.IX Header "THE KEEPERS OF THE RECORDS"
Jarkko Hietaniemi <\fIjhi@iki.fi\fR>.
.PP
Thanks to the collective memory of the Perlfolk.  In addition to the
Keepers of the Pumpkin also Alan Champion, Mark Dominus,
Andreas Ko\*:nig, John Macdonald, Matthias Neeracher, Jeff Okamoto,
Michael Peppler, Randal Schwartz, and Paul D. Smith sent corrections
and additions. Abigail added file and patch size data for the 5.6.0 \- 5.10
era.
     osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perlhpux.1                                   0100644 0001750 0001750 00000107570 12566207441 022620  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLHPUX 1"
.TH PERLHPUX 1 "2013-11-04" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlhpux \- Perl version 5 on Hewlett\-Packard Unix (HP\-UX) systems
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document describes various features of \s-1HP\s0's Unix operating system
(HP-UX) that will affect how Perl version 5 (hereafter just Perl) is
compiled and/or runs.
.SS "Using perl as shipped with HP-UX"
.IX Subsection "Using perl as shipped with HP-UX"
Application release September 2001, HP-UX 11.00 is the first to ship
with Perl. By the time it was perl\-5.6.1 in /opt/perl. The first
occurrence is on \s-1CD 5012\-7954\s0 and can be installed using
.PP
.Vb 1
\&  swinstall \-s /cdrom perl
.Ve
.PP
assuming you have mounted that \s-1CD\s0 on /cdrom.
.PP
That build was a portable hppa\-1.1 multithread build that supports large
files compiled with gcc\-2.9\-hppa\-991112.
.PP
If you perform a new installation, then (a newer) Perl will be installed
automatically.  Pre-installed HP-UX systems now have more recent versions
of Perl and the updated modules.
.PP
The official (threaded) builds from \s-1HP,\s0 as they are shipped on the
Application \s-1DVD/CD\s0's are available on
<http://www.software.hp.com/portal/swdepot/displayProductInfo.do?productNumber=PERL>
for both PA-RISC and \s-1IPF \s0(Itanium Processor Family). They are built
with the \s-1HP\s0 ANSI-C compiler. Up till 5.8.8 that was done by ActiveState.
.PP
To see what version is included on the \s-1DVD \s0(assumed here to be mounted
on /cdrom), issue this command:
.PP
.Vb 4
\&  # swlist \-s /cdrom perl
\&  # perl           D.5.8.8.B  5.8.8 Perl Programming Language
\&    perl.Perl5\-32  D.5.8.8.B  32\-bit 5.8.8 Perl Programming Language with Extensions
\&    perl.Perl5\-64  D.5.8.8.B  64\-bit 5.8.8 Perl Programming Language with Extensions
.Ve
.PP
To see what is installed on your system:
.PP
.Vb 8
\&  # swlist \-R perl
\&  # perl                    E.5.8.8.J  Perl Programming Language
\&  # perl.Perl5\-32           E.5.8.8.J  32\-bit Perl Programming Language with Extensions
\&    perl.Perl5\-32.PERL\-MAN  E.5.8.8.J  32\-bit Perl Man Pages for IA
\&    perl.Perl5\-32.PERL\-RUN  E.5.8.8.J  32\-bit Perl Binaries for IA
\&  # perl.Perl5\-64           E.5.8.8.J  64\-bit Perl Programming Language with Extensions
\&    perl.Perl5\-64.PERL\-MAN  E.5.8.8.J  64\-bit Perl Man Pages for IA
\&    perl.Perl5\-64.PERL\-RUN  E.5.8.8.J  64\-bit Perl Binaries for IA
.Ve
.SS "Using perl from \s-1HP\s0's porting centre"
.IX Subsection "Using perl from HP's porting centre"
\&\s-1HP\s0 porting centre tries to keep up with customer demand and release
updates from the Open Source community. Having precompiled Perl binaries
available is obvious, though \*(L"up-to-date\*(R" is something relative. At the
moment of writing only perl\-5.10.1 was available (with 5.16.3 being the
latest stable release from the porters point of view).
.PP
The \s-1HP\s0 porting centres are limited in what systems they are allowed
to port to and they usually choose the two most recent \s-1OS\s0 versions
available.
.PP
\&\s-1HP\s0 has asked the porting centre to move Open Source binaries
from /opt to /usr/local, so binaries produced since the start
of July 2002 are located in /usr/local.
.PP
One of \s-1HP\s0 porting centres \s-1URL\s0's is <http://hpux.connect.org.uk/>
The port currently available is built with \s-1GNU\s0 gcc.
.SS "Other prebuilt perl binaries"
.IX Subsection "Other prebuilt perl binaries"
To get even more recent perl depots for the whole range of HP-UX, visit
H.Merijn Brand's site at <http://mirrors.develooper.com/hpux/#Perl>.
Carefully read the notes to see if the available versions suit your needs.
.SS "Compiling Perl 5 on HP-UX"
.IX Subsection "Compiling Perl 5 on HP-UX"
When compiling Perl, you must use an \s-1ANSI C\s0 compiler.  The C compiler
that ships with all HP-UX systems is a K&R compiler that should only be
used to build new kernels.
.PP
Perl can be compiled with either \s-1HP\s0's \s-1ANSI C\s0 compiler or with gcc.  The
former is recommended, as not only can it compile Perl with no
difficulty, but also can take advantage of features listed later that
require the use of \s-1HP\s0 compiler-specific command-line flags.
.PP
If you decide to use gcc, make sure your installation is recent and
complete, and be sure to read the Perl \s-1INSTALL\s0 file for more gcc-specific
details.
.SS "PA-RISC"
.IX Subsection "PA-RISC"
\&\s-1HP\s0's \s-1HP9000\s0 Unix systems run on \s-1HP\s0's own Precision Architecture
(PA-RISC) chip.  HP-UX used to run on the Motorola \s-1MC68000\s0 family of
chips, but any machine with this chip in it is quite obsolete and this
document will not attempt to address issues for compiling Perl on the
Motorola chipset.
.PP
The version of PA-RISC at the time of this document's last update is 2.0,
which is also the last there will be. \s-1HP\s0 PA-RISC systems are usually
refered to with model description \*(L"\s-1HP 9000\*(R".\s0 The last \s-1CPU\s0 in this series
is the \s-1PA\-8900. \s0 Support for PA-RISC architectured machines officially
ends as shown in the following table:
.PP
.Vb 10
\&   PA\-RISC End\-of\-Life Roadmap
\& +\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\& | HP9000 | Superdome      | PA\-8700        | Spring 2011     |
\& | 4\-128  |                | PA\-8800/sx1000 | Summer 2012     |
\& | cores  |                | PA\-8900/sx1000 | 2014            |
\& |        |                | PA\-8900/sx2000 | 2015            |
\& +\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\& | HP9000 | rp7410, rp8400 | PA\-8700        | Spring 2011     |
\& | 2\-32   | rp7420, rp8420 | PA\-8800/sx1000 | 2012            |
\& | cores  | rp7440, rp8440 | PA\-8900/sx1000 | Autumn 2013     |
\& |        |                | PA\-8900/sx2000 | 2015            |
\& +\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\& | HP9000 | rp44x0         | PA\-8700        | Spring 2011     |
\& | 1\-8    |                | PA\-8800/rp44x0 | 2012            |
\& | cores  |                | PA\-8900/rp44x0 | 2014            |
\& +\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\& | HP9000 | rp34x0         | PA\-8700        | Spring 2011     |
\& | 1\-4    |                | PA\-8800/rp34x0 | 2012            |
\& | cores  |                | PA\-8900/rp34x0 | 2014            |
\& +\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
.Ve
.PP
From <http://www.hp.com/products1/evolution/9000/faqs.html>
.PP
.Vb 1
\& The last order date for HP 9000 systems was December 31, 2008.
.Ve
.PP
A complete list of models at the time the \s-1OS\s0 was built is in the file
/usr/sam/lib/mo/sched.models. The first column corresponds to the last
part of the output of the \*(L"model\*(R" command.  The second column is the
PA-RISC version and the third column is the exact chip type used.
(Start browsing at the bottom to prevent confusion ;\-)
.PP
.Vb 4
\&  # model
\&  9000/800/L1000\-44
\&  # grep L1000\-44 /usr/sam/lib/mo/sched.models
\&  L1000\-44        2.0     PA8500
.Ve
.SS "Portability Between PA-RISC Versions"
.IX Subsection "Portability Between PA-RISC Versions"
An executable compiled on a PA-RISC 2.0 platform will not execute on a
PA-RISC 1.1 platform, even if they are running the same version of
HP-UX.  If you are building Perl on a PA-RISC 2.0 platform and want that
Perl to also run on a PA-RISC 1.1, the compiler flags +DAportable and
+DS32 should be used.
.PP
It is no longer possible to compile PA-RISC 1.0 executables on either
the PA-RISC 1.1 or 2.0 platforms.  The command-line flags are accepted,
but the resulting executable will not run when transferred to a PA-RISC
1.0 system.
.SS "PA-RISC 1.0"
.IX Subsection "PA-RISC 1.0"
The original version of PA-RISC, \s-1HP\s0 no longer sells any system with this chip.
.PP
The following systems contained PA-RISC 1.0 chips:
.PP
.Vb 2
\&  600, 635, 645, 808, 815, 822, 825, 832, 834, 835, 840, 842, 845, 850,
\&  852, 855, 860, 865, 870, 890
.Ve
.SS "PA-RISC 1.1"
.IX Subsection "PA-RISC 1.1"
An upgrade to the PA-RISC design, it shipped for many years in many different
system.
.PP
The following systems contain with PA-RISC 1.1 chips:
.PP
.Vb 10
\&  705, 710, 712, 715, 720, 722, 725, 728, 730, 735, 742, 743, 744, 745,
\&  747, 750, 755, 770, 777, 778, 779, 800, 801, 803, 806, 807, 809, 811,
\&  813, 816, 817, 819, 821, 826, 827, 829, 831, 837, 839, 841, 847, 849,
\&  851, 856, 857, 859, 867, 869, 877, 887, 891, 892, 897, A180, A180C,
\&  B115, B120, B132L, B132L+, B160L, B180L, C100, C110, C115, C120,
\&  C160L, D200, D210, D220, D230, D250, D260, D310, D320, D330, D350,
\&  D360, D410, DX0, DX5, DXO, E25, E35, E45, E55, F10, F20, F30, G30,
\&  G40, G50, G60, G70, H20, H30, H40, H50, H60, H70, I30, I40, I50, I60,
\&  I70, J200, J210, J210XC, K100, K200, K210, K220, K230, K400, K410,
\&  K420, S700i, S715, S744, S760, T500, T520
.Ve
.SS "PA-RISC 2.0"
.IX Subsection "PA-RISC 2.0"
The most recent upgrade to the PA-RISC design, it added support for
64\-bit integer data.
.PP
As of the date of this document's last update, the following systems
contain PA-RISC 2.0 chips:
.PP
.Vb 8
\&  700, 780, 781, 782, 783, 785, 802, 804, 810, 820, 861, 871, 879, 889,
\&  893, 895, 896, 898, 899, A400, A500, B1000, B2000, C130, C140, C160,
\&  C180, C180+, C180\-XP, C200+, C400+, C3000, C360, C3600, CB260, D270,
\&  D280, D370, D380, D390, D650, J220, J2240, J280, J282, J400, J410,
\&  J5000, J5500XM, J5600, J7000, J7600, K250, K260, K260\-EG, K270, K360,
\&  K370, K380, K450, K460, K460\-EG, K460\-XP, K470, K570, K580, L1000,
\&  L2000, L3000, N4000, R380, R390, SD16000, SD32000, SD64000, T540,
\&  T600, V2000, V2200, V2250, V2500, V2600
.Ve
.PP
Just before \s-1HP\s0 took over Compaq, some systems were renamed. the link
that contained the explanation is dead, so here's a short summary:
.PP
.Vb 3
\&  HP 9000 A\-Class servers, now renamed HP Server rp2400 series.
\&  HP 9000 L\-Class servers, now renamed HP Server rp5400 series.
\&  HP 9000 N\-Class servers, now renamed HP Server rp7400.
\&
\&  rp2400, rp2405, rp2430, rp2450, rp2470, rp3410, rp3440, rp4410,
\&  rp4440, rp5400, rp5405, rp5430, rp5450, rp5470, rp7400, rp7405,
\&  rp7410, rp7420, rp7440, rp8400, rp8420, rp8440, Superdome
.Ve
.PP
The current naming convention is:
.PP
.Vb 10
\&  aadddd
\&  ||||\`+\- 00 \- 99 relative capacity & newness (upgrades, etc.)
\&  |||\`\-\-\- unique number for each architecture to ensure different
\&  |||     systems do not have the same numbering across
\&  |||     architectures
\&  ||\`\-\-\-\- 1 \- 9 identifies family and/or relative positioning
\&  ||
\&  |\`\-\-\-\-\- c = ia32 (cisc)
\&  |       p = pa\-risc
\&  |       x = ia\-64 (Itanium & Itanium 2)
\&  |       h = housing
\&  \`\-\-\-\-\-\- t = tower
\&          r = rack optimized
\&          s = super scalable
\&          b = blade
\&          sa = appliance
.Ve
.SS "Itanium Processor Family (\s-1IPF\s0) and HP-UX"
.IX Subsection "Itanium Processor Family (IPF) and HP-UX"
HP-UX also runs on the new Itanium processor.  This requires the use
of a different version of HP-UX (currently 11.23 or 11i v2), and with
the exception of a few differences detailed below and in later sections,
Perl should compile with no problems.
.PP
Although PA-RISC binaries can run on Itanium systems, you should not
attempt to use a PA-RISC version of Perl on an Itanium system.  This is
because shared libraries created on an Itanium system cannot be loaded
while running a PA-RISC executable.
.PP
\&\s-1HP\s0 Itanium 2 systems are usually refered to with model description
\&\*(L"\s-1HP\s0 Integrity\*(R".
.SS "Itanium, Itanium 2 & Madison 6"
.IX Subsection "Itanium, Itanium 2 & Madison 6"
\&\s-1HP\s0 also ships servers with the 128\-bit Itanium processor(s). The cx26x0
is told to have Madison 6. As of the date of this document's last update,
the following systems contain Itanium or Itanium 2 chips (this is likely
to be out of date):
.PP
.Vb 4
\&  BL60p, BL860c, BL870c, BL890c, cx2600, cx2620, rx1600, rx1620, rx2600,
\&  rx2600hptc, rx2620, rx2660, rx2800, rx3600, rx4610, rx4640, rx5670,
\&  rx6600, rx7420, rx7620, rx7640, rx8420, rx8620, rx8640, rx9610,
\&  sx1000, sx2000
.Ve
.PP
To see all about your machine, type
.PP
.Vb 3
\&  # model
\&  ia64 hp server rx2600
\&  # /usr/contrib/bin/machinfo
.Ve
.SS "HP-UX versions"
.IX Subsection "HP-UX versions"
Not all architectures (\s-1PA\s0 = PA-RISC, \s-1IPF\s0 = Itanium Processor Family)
support all versions of HP-UX, here is a short list
.PP
.Vb 8
\&  HP\-UX version  Kernel  Architecture End\-of\-factory support
\&  \-\-\-\-\-\-\-\-\-\-\-\-\-  \-\-\-\-\-\-  \-\-\-\-\-\-\-\-\-\-\-\- \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&  10.20          32 bit  PA           30\-Jun\-2003
\&  11.00          32/64   PA           31\-Dec\-2006
\&  11.11  11i v1  32/64   PA           31\-Dec\-2015
\&  11.22  11i v2     64        IPF     30\-Apr\-2004
\&  11.23  11i v2     64   PA & IPF     31\-Dec\-2015
\&  11.31  11i v3     64   PA & IPF     31\-Dec\-2020 (PA) 31\-Dec\-2022 (IPF)
.Ve
.PP
See for the full list of hardware/OS support and expected end-of-life
<http://www.hp.com/go/hpuxservermatrix>
.SS "Building Dynamic Extensions on HP-UX"
.IX Subsection "Building Dynamic Extensions on HP-UX"
HP-UX supports dynamically loadable libraries (shared libraries).
Shared libraries end with the suffix .sl.  On Itanium systems,
they end with the suffix .so.
.PP
Shared libraries created on a platform using a particular PA-RISC
version are not usable on platforms using an earlier PA-RISC version by
default.  However, this backwards compatibility may be enabled using the
same +DAportable compiler flag (with the same PA-RISC 1.0 caveat
mentioned above).
.PP
Shared libraries created on an Itanium platform cannot be loaded on
a PA-RISC platform.  Shared libraries created on a PA-RISC platform
can only be loaded on an Itanium platform if it is a PA-RISC executable
that is attempting to load the PA-RISC library.  A PA-RISC shared
library cannot be loaded into an Itanium executable nor vice-versa.
.PP
To create a shared library, the following steps must be performed:
.PP
.Vb 4
\&  1. Compile source modules with +z or +Z flag to create a .o module
\&     which contains Position\-Independent Code (PIC).  The linker will
\&     tell you in the next step if +Z was needed.
\&     (For gcc, the appropriate flag is \-fpic or \-fPIC.)
\&
\&  2. Link the shared library using the \-b flag.  If the code calls
\&     any functions in other system libraries (e.g., libm), it must
\&     be included on this line.
.Ve
.PP
(Note that these steps are usually handled automatically by the extension's
Makefile).
.PP
If these dependent libraries are not listed at shared library creation
time, you will get fatal \*(L"Unresolved symbol\*(R" errors at run time when the
library is loaded.
.PP
You may create a shared library that refers to another library, which
may be either an archive library or a shared library.  If this second
library is a shared library, this is called a \*(L"dependent library\*(R".  The
dependent library's name is recorded in the main shared library, but it
is not linked into the shared library.  Instead, it is loaded when the
main shared library is loaded.  This can cause problems if you build an
extension on one system and move it to another system where the
libraries may not be located in the same place as on the first system.
.PP
If the referred library is an archive library, then it is treated as a
simple collection of .o modules (all of which must contain \s-1PIC\s0).  These
modules are then linked into the shared library.
.PP
Note that it is okay to create a library which contains a dependent
library that is already linked into perl.
.PP
Some extensions, like DB_File and Compress::Zlib use/require prebuilt
libraries for the perl extensions/modules to work. If these libraries
are built using the default configuration, it might happen that you
run into an error like \*(L"invalid loader fixup\*(R" during load phase.
\&\s-1HP\s0 is aware of this problem.  Search the HP-UX cxx-dev forums for
discussions about the subject.  The short answer is that \fBeverything\fR
(all libraries, everything) must be compiled with \f(CW\*(C`+z\*(C'\fR or \f(CW\*(C`+Z\*(C'\fR to be
\&\s-1PIC \s0(position independent code).  (For gcc, that would be
\&\f(CW\*(C`\-fpic\*(C'\fR or \f(CW\*(C`\-fPIC\*(C'\fR).  In HP-UX 11.00 or newer the linker
error message should tell the name of the offending object file.
.PP
A more general approach is to intervene manually, as with an example for
the DB_File module, which requires SleepyCat's libdb.sl:
.PP
.Vb 7
\&  # cd .../db\-3.2.9/build_unix
\&  # vi Makefile
\&  ... add +Z to all cflags to create shared objects
\&  CFLAGS=         \-c $(CPPFLAGS) +Z \-Ae +O2 +Onolimit \e
\&                  \-I/usr/local/include \-I/usr/include/X11R6
\&  CXXFLAGS=       \-c $(CPPFLAGS) +Z \-Ae +O2 +Onolimit \e
\&                  \-I/usr/local/include \-I/usr/include/X11R6
\&
\&  # make clean
\&  # make
\&  # mkdir tmp
\&  # cd tmp
\&  # ar x ../libdb.a
\&  # ld \-b \-o libdb\-3.2.sl *.o
\&  # mv libdb\-3.2.sl /usr/local/lib
\&  # rm *.o
\&  # cd /usr/local/lib
\&  # rm \-f libdb.sl
\&  # ln \-s libdb\-3.2.sl libdb.sl
\&
\&  # cd .../DB_File\-1.76
\&  # make distclean
\&  # perl Makefile.PL
\&  # make
\&  # make test
\&  # make install
.Ve
.PP
As of db\-4.2.x it is no longer needed to do this by hand. Sleepycat
has changed the configuration process to add +z on HP-UX automatically.
.PP
.Vb 2
\&  # cd .../db\-4.2.25/build_unix
\&  # env CFLAGS=+DD64 LDFLAGS=+DD64 ../dist/configure
.Ve
.PP
should work to generate 64bit shared libraries for HP-UX 11.00 and 11i.
.PP
It is no longer possible to link PA-RISC 1.0 shared libraries (even
though the command-line flags are still present).
.PP
PA-RISC and Itanium object files are not interchangeable.  Although
you may be able to use ar to create an archive library of PA-RISC
object files on an Itanium system, you cannot link against it using
an Itanium link editor.
.SS "The \s-1HP ANSI C\s0 Compiler"
.IX Subsection "The HP ANSI C Compiler"
When using this compiler to build Perl, you should make sure that the
flag \-Aa is added to the cpprun and cppstdin variables in the config.sh
file (though see the section on 64\-bit perl below). If you are using a
recent version of the Perl distribution, these flags are set automatically.
.PP
Even though HP-UX 10.20 and 11.00 are not actively maintained by \s-1HP\s0
anymore, updates for the \s-1HP ANSI C\s0 compiler are still available from
time to time, and it might be advisable to see if updates are applicable.
At the moment of writing, the latests available patches for 11.00 that
should be applied are \s-1PHSS_35098, PHSS_35175, PHSS_35100, PHSS_33036,\s0
and \s-1PHSS_33902\s0). If you have a \s-1SUM\s0 account, you can use it to search
for updates/patches. Enter \*(L"\s-1ANSI\*(R"\s0 as keyword.
.SS "The \s-1GNU C\s0 Compiler"
.IX Subsection "The GNU C Compiler"
When you are going to use the \s-1GNU C\s0 compiler (gcc), and you don't have
gcc yet, you can either build it yourself from the sources (available
from e.g. <http://gcc.gnu.org/mirrors.html>) or fetch
a prebuilt binary from the \s-1HP\s0 porting center
at <http://hpux.connect.org.uk/hppd/cgi\-bin/search?term=gcc&Search=Search>
or from the \s-1DSPP \s0(you need to be a member) at
<http://h21007.www2.hp.com/portal/site/dspp/menuitem.863c3e4cbcdc3f3515b49c108973a801?ciid=2a08725cc2f02110725cc2f02110275d6e10RCRD&jumpid=reg_r1002_usen_c\-001_title_r0001>
(Browse through the list, because there are often multiple versions of
the same package available).
.PP
Most mentioned distributions are depots. H.Merijn Brand has made prebuilt
gcc binaries available on <http://mirrors.develooper.com/hpux/> and/or
<http://www.cmve.net/~merijn/> for HP-UX 10.20 (only 32bit), HP-UX 11.00,
HP-UX 11.11 (HP-UX 11i v1), and HP-UX 11.23 (HP-UX 11i v2 PA-RISC) in both
32\- and 64\-bit versions. For HP-UX 11.23 \s-1IPF\s0 and HP-UX 11.31 \s-1IPF\s0 depots are
available too. The \s-1IPF\s0 versions do not need two versions of \s-1GNU\s0 gcc.
.PP
On PA-RISC you need a different compiler for 32\-bit applications and for
64\-bit applications. On PA-RISC, 32\-bit objects and 64\-bit objects do
not mix. Period. There is no different behaviour for \s-1HP\s0 C\-ANSI-C or \s-1GNU\s0
gcc. So if you require your perl binary to use 64\-bit libraries, like
Oracle\-64bit, you \s-1MUST\s0 build a 64\-bit perl.
.PP
Building a 64\-bit capable gcc on PA-RISC from source is possible only when
you have the \s-1HP C\-ANSI C\s0 compiler or an already working 64\-bit binary of
gcc available. Best performance for perl is achieved with \s-1HP\s0's native
compiler.
.SS "Using Large Files with Perl on HP-UX"
.IX Subsection "Using Large Files with Perl on HP-UX"
Beginning with HP-UX version 10.20, files larger than 2GB (2^31 bytes)
may be created and manipulated.  Three separate methods of doing this
are available.  Of these methods, the best method for Perl is to compile
using the \-Duselargefiles flag to Configure.  This causes Perl to be
compiled using structures and functions in which these are 64 bits wide,
rather than 32 bits wide.  (Note that this will only work with \s-1HP\s0's \s-1ANSI
C\s0 compiler.  If you want to compile Perl using gcc, you will have to get
a version of the compiler that supports 64\-bit operations. See above for
where to find it.)
.PP
There are some drawbacks to this approach.  One is that any extension
which calls any file-manipulating C function will need to be recompiled
(just follow the usual \*(L"perl Makefile.PL; make; make test; make install\*(R"
procedure).
.PP
The list of functions that will need to recompiled is:
  creat,          fgetpos,        fopen,
  freopen,        fsetpos,        fstat,
  fstatvfs,       fstatvfsdev,    ftruncate,
  ftw,            lockf,          lseek,
  lstat,          mmap,           nftw,
  open,           prealloc,       stat,
  statvfs,        statvfsdev,     tmpfile,
  truncate,       getrlimit,      setrlimit
.PP
Another drawback is only valid for Perl versions before 5.6.0.  This
drawback is that the seek and tell functions (both the builtin version
and \s-1POSIX\s0 module version) will not perform correctly.
.PP
It is strongly recommended that you use this flag when you run
Configure.  If you do not do this, but later answer the question about
large files when Configure asks you, you may get a configuration that
cannot be compiled, or that does not function as expected.
.SS "Threaded Perl on HP-UX"
.IX Subsection "Threaded Perl on HP-UX"
It is possible to compile a version of threaded Perl on any version of
HP-UX before 10.30, but it is strongly suggested that you be running on
HP-UX 11.00 at least.
.PP
To compile Perl with threads, add \-Dusethreads to the arguments of
Configure.  Verify that the \-D_POSIX_C_SOURCE=199506L compiler flag is
automatically added to the list of flags.  Also make sure that \-lpthread
is listed before \-lc in the list of libraries to link Perl with. The
hints provided for HP-UX during Configure will try very hard to get
this right for you.
.PP
HP-UX versions before 10.30 require a separate installation of a \s-1POSIX\s0
threads library package. Two examples are the \s-1HP DCE\s0 package, available
on \*(L"HP-UX Hardware Extensions 3.0, Install and Core \s-1OS,\s0 Release 10.20,
April 1999 (B3920\-13941)\*(R" or the Freely available \s-1PTH\s0 package, available
on H.Merijn's site (<http://mirrors.develooper.com/hpux/>). The use of \s-1PTH\s0
will be unsupported in perl\-5.12 and up and is rather buggy in 5.11.x.
.PP
If you are going to use the \s-1HP DCE\s0 package, the library used for threading
is /usr/lib/libcma.sl, but there have been multiple updates of that
library over time. Perl will build with the first version, but it
will not pass the test suite. Older Oracle versions might be a compelling
reason not to update that library, otherwise please find a newer version
in one of the following patches: \s-1PHSS_19739, PHSS_20608,\s0 or \s-1PHSS_23672\s0
.PP
reformatted output:
.PP
.Vb 10
\&  d3:/usr/lib 106 > what libcma\-*.1
\&  libcma\-00000.1:
\&     HP DCE/9000 1.5               Module: libcma.sl (Export)
\&                                   Date: Apr 29 1996 22:11:24
\&  libcma\-19739.1:
\&     HP DCE/9000 1.5 PHSS_19739\-40 Module: libcma.sl (Export)
\&                                   Date: Sep  4 1999 01:59:07
\&  libcma\-20608.1:
\&     HP DCE/9000 1.5 PHSS_20608    Module: libcma.1 (Export)
\&                                   Date: Dec  8 1999 18:41:23
\&  libcma\-23672.1:
\&     HP DCE/9000 1.5 PHSS_23672    Module: libcma.1 (Export)
\&                                   Date: Apr  9 2001 10:01:06
\&  d3:/usr/lib 107 >
.Ve
.PP
If you choose for the \s-1PTH\s0 package, use swinstall to install pth in
the default location (/opt/pth), and then make symbolic links to the
libraries from /usr/lib
.PP
.Vb 2
\&  # cd /usr/lib
\&  # ln \-s /opt/pth/lib/libpth* .
.Ve
.PP
For building perl to support Oracle, it needs to be linked with libcl
and libpthread. So even if your perl is an unthreaded build, these
libraries might be required. See \*(L"Oracle on HP-UX\*(R" below.
.SS "64\-bit Perl on HP-UX"
.IX Subsection "64-bit Perl on HP-UX"
Beginning with HP-UX 11.00, programs compiled under HP-UX can take
advantage of the \s-1LP64\s0 programming environment (\s-1LP64\s0 means Longs and
Pointers are 64 bits wide), in which scalar variables will be able
to hold numbers larger than 2^32 with complete precision.  Perl has
proven to be consistent and reliable in 64bit mode since 5.8.1 on
all HP-UX 11.xx.
.PP
As of the date of this document, Perl is fully 64\-bit compliant on
HP-UX 11.00 and up for both cc\- and gcc builds. If you are about to
build a 64\-bit perl with \s-1GNU\s0 gcc, please read the gcc section carefully.
.PP
Should a user have the need for compiling Perl in the \s-1LP64\s0 environment,
use the \-Duse64bitall flag to Configure.  This will force Perl to be
compiled in a pure \s-1LP64\s0 environment (with the +DD64 flag for \s-1HP\s0 C\-ANSI-C,
with no additional options for \s-1GNU\s0 gcc 64\-bit on PA-RISC, and with
\&\-mlp64 for \s-1GNU\s0 gcc on Itanium).
If you want to compile Perl using gcc, you will have to get a version of
the compiler that supports 64\-bit operations.)
.PP
You can also use the \-Duse64bitint flag to Configure.  Although there
are some minor differences between compiling Perl with this flag versus
the \-Duse64bitall flag, they should not be noticeable from a Perl user's
perspective. When configuring \-Duse64bitint using a 64bit gcc on a
pa-risc architecture, \-Duse64bitint is silently promoted to \-Duse64bitall.
.PP
In both cases, it is strongly recommended that you use these flags when
you run Configure.  If you do not use do this, but later answer the
questions about 64\-bit numbers when Configure asks you, you may get a
configuration that cannot be compiled, or that does not function as
expected.
.SS "Oracle on HP-UX"
.IX Subsection "Oracle on HP-UX"
Using perl to connect to Oracle databases through \s-1DBI\s0 and DBD::Oracle
has caused a lot of people many headaches. Read \s-1README\s0.hpux in the
DBD::Oracle for much more information. The reason to mention it here
is that Oracle requires a perl built with libcl and libpthread, the
latter even when perl is build without threads. Building perl using
all defaults, but still enabling to build DBD::Oracle later on can be
achieved using
.PP
.Vb 1
\&  Configure \-A prepend:libswanted=\*(Aqcl pthread \*(Aq ...
.Ve
.PP
Do not forget the space before the trailing quote.
.PP
Also note that this does not (yet) work with all configurations,
it is known to fail with 64\-bit versions of \s-1GCC.\s0
.SS "\s-1GDBM\s0 and Threads on HP-UX"
.IX Subsection "GDBM and Threads on HP-UX"
If you attempt to compile Perl with (\s-1POSIX\s0) threads on an 11.X system
and also link in the \s-1GDBM\s0 library, then Perl will immediately core dump
when it starts up.  The only workaround at this point is to relink the
\&\s-1GDBM\s0 library under 11.X, then relink it into Perl.
.PP
the error might show something like:
.PP
Pthread internal error: message: _\|\fI_libc_reinit()\fR failed, file: ../pthreads/pthread.c, line: 1096
Return Pointer is 0xc082bf33
sh: 5345 Quit(coredump)
.PP
and Configure will give up.
.SS "\s-1NFS\s0 filesystems and \fIutime\fP\|(2) on HP-UX"
.IX Subsection "NFS filesystems and utime on HP-UX"
If you are compiling Perl on a remotely-mounted \s-1NFS\s0 filesystem, the test
io/fs.t may fail on test #18.  This appears to be a bug in HP-UX and no
fix is currently available.
.SS "HP-UX Kernel Parameters (maxdsiz) for Compiling Perl"
.IX Subsection "HP-UX Kernel Parameters (maxdsiz) for Compiling Perl"
By default, HP-UX comes configured with a maximum data segment size of
64MB.  This is too small to correctly compile Perl with the maximum
optimization levels.  You can increase the size of the maxdsiz kernel
parameter through the use of \s-1SAM.\s0
.PP
When using the \s-1GUI\s0 version of \s-1SAM,\s0 click on the Kernel Configuration
icon, then the Configurable Parameters icon.  Scroll down and select
the maxdsiz line.  From the Actions menu, select the Modify Configurable
Parameter item.  Insert the new formula into the Formula/Value box.
Then follow the instructions to rebuild your kernel and reboot your
system.
.PP
In general, a value of 256MB (or \*(L"256*1024*1024\*(R") is sufficient for
Perl to compile at maximum optimization.
.SH "nss_delete core dump from op/pwent or op/grent"
.IX Header "nss_delete core dump from op/pwent or op/grent"
You may get a bus error core dump from the op/pwent or op/grent
tests. If compiled with \-g you will see a stack trace much like
the following:
.PP
.Vb 10
\&  #0  0xc004216c in  () from /usr/lib/libc.2
\&  #1  0xc00d7550 in _\|_nss_src_state_destr () from /usr/lib/libc.2
\&  #2  0xc00d7768 in _\|_nss_src_state_destr () from /usr/lib/libc.2
\&  #3  0xc00d78a8 in nss_delete () from /usr/lib/libc.2
\&  #4  0xc01126d8 in endpwent () from /usr/lib/libc.2
\&  #5  0xd1950 in Perl_pp_epwent () from ./perl
\&  #6  0x94d3c in Perl_runops_standard () from ./perl
\&  #7  0x23728 in S_run_body () from ./perl
\&  #8  0x23428 in perl_run () from ./perl
\&  #9  0x2005c in main () from ./perl
.Ve
.PP
The key here is the \f(CW\*(C`nss_delete\*(C'\fR call.  One workaround for this
bug seems to be to create add to the file \fI/etc/nsswitch.conf\fR
(at least) the following lines
.PP
.Vb 2
\&  group: files
\&  passwd: files
.Ve
.PP
Whether you are using \s-1NIS\s0 does not matter.  Amazingly enough,
the same bug also affects Solaris.
.ie n .SH "error: pasting "")"" and ""l"" does not give a valid preprocessing token"
.el .SH "error: pasting ``)'' and ``l'' does not give a valid preprocessing token"
.IX Header "error: pasting ) and l does not give a valid preprocessing token"
There seems to be a broken system header file in HP-UX 11.00 that
breaks perl building in 32bit mode with \s-1GNU\s0 gcc\-4.x causing this
error. The same file for HP-UX 11.11 (even though the file is older)
does not show this failure, and has the correct definition, so the
best fix is to patch the header to match:
.PP
.Vb 9
\& \-\-\- /usr/include/inttypes.h  2001\-04\-20 18:42:14 +0200
\& +++ /usr/include/inttypes.h  2000\-11\-14 09:00:00 +0200
\& @@ \-72,7 +72,7 @@
\&  #define UINT32_C(_\|_c)                   _\|_CONCAT_U_\|_(_\|_c)
\&  #else /* _\|_LP64 */
\&  #define INT32_C(_\|_c)                    _\|_CONCAT_\|_(_\|_c,l)
\& \-#define UINT32_C(_\|_c)                   _\|_CONCAT_\|_(_\|_CONCAT_U_\|_(_\|_c),l)
\& +#define UINT32_C(_\|_c)                   _\|_CONCAT_\|_(_\|_c,ul)
\&  #endif /* _\|_LP64 */
\&
\&  #define INT64_C(_\|_c)                    _\|_CONCAT_L_\|_(_\|_c,l)
.Ve
.SH "Miscellaneous"
.IX Header "Miscellaneous"
HP-UX 11 Y2K patch \*(L"Y2K\-1100 B.11.00.B0125 HP-UX Core \s-1OS\s0 Year 2000
Patch Bundle\*(R" has been reported to break the io/fs test #18 which
tests whether \fIutime()\fR can change timestamps.  The Y2K patch seems to
break \fIutime()\fR so that over \s-1NFS\s0 the timestamps do not get changed
(on local filesystems \fIutime()\fR still works). This has probably been
fixed on your system by now.
.SH "AUTHOR"
.IX Header "AUTHOR"
H.Merijn Brand <h.m.brand@xs4all.nl>
Jeff Okamoto <okamoto@corp.hp.com>
.PP
With much assistance regarding shared libraries from Marc Sabatella.
                                                                                                                                        osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perlhpux5.16.1                               0100644 0001750 0001750 00000105764 12566207420 023132  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLHPUX 1"
.TH PERLHPUX 1 "2013-03-04" "perl v5.16.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlhpux \- Perl version 5 on Hewlett\-Packard Unix (HP\-UX) systems
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document describes various features of \s-1HP\s0's Unix operating system
(HP-UX) that will affect how Perl version 5 (hereafter just Perl) is
compiled and/or runs.
.SS "Using perl as shipped with HP-UX"
.IX Subsection "Using perl as shipped with HP-UX"
Application release September 2001, HP-UX 11.00 is the first to ship
with Perl. By the time it was perl\-5.6.1 in /opt/perl. The first
occurrence is on \s-1CD\s0 5012\-7954 and can be installed using
.PP
.Vb 1
\&  swinstall \-s /cdrom perl
.Ve
.PP
assuming you have mounted that \s-1CD\s0 on /cdrom. In this version the
following modules were installed:
.PP
.Vb 8
\&  ActivePerl::DocTools\-0.04   HTML::Parser\-3.19   XML::DOM\-1.25
\&  Archive::Tar\-0.072          HTML::Tagset\-3.03   XML::Parser\-2.27
\&  Compress::Zlib\-1.08         MIME::Base64\-2.11   XML::Simple\-1.05
\&  Convert::ASN1\-0.10          Net\-1.07            XML::XPath\-1.09
\&  Digest::MD5\-2.11            PPM\-2.1.5           XML::XSLT\-0.32
\&  File::CounterFile\-0.12      SOAP::Lite\-0.46     libwww\-perl\-5.51
\&  Font::AFM\-1.18              Storable\-1.011      libxml\-perl\-0.07
\&  HTML\-Tree\-3.11              URI\-1.11            perl\-ldap\-0.23
.Ve
.PP
That build was a portable hppa\-1.1 multithread build that supports large
files compiled with gcc\-2.9\-hppa\-991112.
.PP
If you perform a new installation, then (a newer) Perl will be installed
automatically.  Preinstalled HP-UX systems now slao have more recent versions
of Perl and the updated modules.
.PP
The official (threaded) builds from \s-1HP\s0, as they are shipped on the
Application \s-1DVD/CD\s0's are available on
<http://www.software.hp.com/portal/swdepot/displayProductInfo.do?productNumber=PERL>
for both PA-RISC and \s-1IPF\s0 (Itanium Processor Family). They are built
with the \s-1HP\s0 ANSI-C compiler. Up till 5.8.8 that was done by ActiveState.
.PP
To see what version is included on the \s-1DVD\s0 (assumed here to be mounted
on /cdrom), issue this command:
.PP
.Vb 4
\&  # swlist \-s /cdrom perl
\&  # perl           D.5.8.8.B  5.8.8 Perl Programming Language
\&    perl.Perl5\-32  D.5.8.8.B  32\-bit 5.8.8 Perl Programming Language with Extensions
\&    perl.Perl5\-64  D.5.8.8.B  64\-bit 5.8.8 Perl Programming Language with Extensions
.Ve
.SS "Using perl from \s-1HP\s0's porting centre"
.IX Subsection "Using perl from HP's porting centre"
\&\s-1HP\s0 porting centre tries very hard to keep up with customer demand and
release updates from the Open Source community. Having precompiled
Perl binaries available is obvious.
.PP
The \s-1HP\s0 porting centres are limited in what systems they are allowed
to port to and they usually choose the two most recent \s-1OS\s0 versions
available. This means that at the moment of writing, there are only
HP-UX 11.11 (pa-risc 2.0) and HP-UX 11.23 (Itanium 2) ports available
on the porting centres.
.PP
\&\s-1HP\s0 has asked the porting centre to move Open Source binaries
from /opt to /usr/local, so binaries produced since the start
of July 2002 are located in /usr/local.
.PP
One of \s-1HP\s0 porting centres \s-1URL\s0's is <http://hpux.connect.org.uk/>
The port currently available is built with \s-1GNU\s0 gcc.
.SS "Compiling Perl 5 on HP-UX"
.IX Subsection "Compiling Perl 5 on HP-UX"
When compiling Perl, you must use an \s-1ANSI\s0 C compiler.  The C compiler
that ships with all HP-UX systems is a K&R compiler that should only be
used to build new kernels.
.PP
Perl can be compiled with either \s-1HP\s0's \s-1ANSI\s0 C compiler or with gcc.  The
former is recommended, as not only can it compile Perl with no
difficulty, but also can take advantage of features listed later that
require the use of \s-1HP\s0 compiler-specific command-line flags.
.PP
If you decide to use gcc, make sure your installation is recent and
complete, and be sure to read the Perl \s-1INSTALL\s0 file for more gcc-specific
details.
.SS "PA-RISC"
.IX Subsection "PA-RISC"
\&\s-1HP\s0's \s-1HP9000\s0 Unix systems run on \s-1HP\s0's own Precision Architecture
(PA-RISC) chip.  HP-UX used to run on the Motorola \s-1MC68000\s0 family of
chips, but any machine with this chip in it is quite obsolete and this
document will not attempt to address issues for compiling Perl on the
Motorola chipset.
.PP
The version of PA-RISC at the time of this document's last update is 2.0,
which is also the last there will be. \s-1HP\s0 PA-RISC systems are usually
refered to with model description \*(L"\s-1HP\s0 9000\*(R". The last \s-1CPU\s0 in this series
is the \s-1PA\-8900\s0.  Support for PA-RISC architectured machines officially
ends as shown in the following table:
.PP
.Vb 10
\&   PA\-RISC End\-of\-Life Roadmap
\& +\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\& | HP9000 | Superdome      | PA\-8700        | Spring 2011     |
\& | 4\-128  |                | PA\-8800/sx1000 | Summer 2012     |
\& | cores  |                | PA\-8900/sx1000 | 2014            |
\& |        |                | PA\-8900/sx2000 | 2015            |
\& +\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\& | HP9000 | rp7410, rp8400 | PA\-8700        | Spring 2011     |
\& | 2\-32   | rp7420, rp8420 | PA\-8800/sx1000 | 2012            |
\& | cores  | rp7440, rp8440 | PA\-8900/sx1000 | Autumn 2013     |
\& |        |                | PA\-8900/sx2000 | 2015            |
\& +\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\& | HP9000 | rp44x0         | PA\-8700        | Spring 2011     |
\& | 1\-8    |                | PA\-8800/rp44x0 | 2012            |
\& | cores  |                | PA\-8900/rp44x0 | 2014            |
\& +\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\& | HP9000 | rp34x0         | PA\-8700        | Spring 2011     |
\& | 1\-4    |                | PA\-8800/rp34x0 | 2012            |
\& | cores  |                | PA\-8900/rp34x0 | 2014            |
\& +\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
.Ve
.PP
From <http://www.hp.com/products1/evolution/9000/faqs.html>
.PP
.Vb 1
\& The last order date for HP 9000 systems was December 31, 2008.
.Ve
.PP
A complete list of models at the time the \s-1OS\s0 was built is in the file
/usr/sam/lib/mo/sched.models. The first column corresponds to the last
part of the output of the \*(L"model\*(R" command.  The second column is the
PA-RISC version and the third column is the exact chip type used.
(Start browsing at the bottom to prevent confusion ;\-)
.PP
.Vb 4
\&  # model
\&  9000/800/L1000\-44
\&  # grep L1000\-44 /usr/sam/lib/mo/sched.models
\&  L1000\-44        2.0     PA8500
.Ve
.SS "Portability Between PA-RISC Versions"
.IX Subsection "Portability Between PA-RISC Versions"
An executable compiled on a PA-RISC 2.0 platform will not execute on a
PA-RISC 1.1 platform, even if they are running the same version of
HP-UX.  If you are building Perl on a PA-RISC 2.0 platform and want that
Perl to also run on a PA-RISC 1.1, the compiler flags +DAportable and
+DS32 should be used.
.PP
It is no longer possible to compile PA-RISC 1.0 executables on either
the PA-RISC 1.1 or 2.0 platforms.  The command-line flags are accepted,
but the resulting executable will not run when transferred to a PA-RISC
1.0 system.
.SS "PA-RISC 1.0"
.IX Subsection "PA-RISC 1.0"
The original version of PA-RISC, \s-1HP\s0 no longer sells any system with this chip.
.PP
The following systems contained PA-RISC 1.0 chips:
.PP
.Vb 2
\&  600, 635, 645, 808, 815, 822, 825, 832, 834, 835, 840, 842, 845, 850,
\&  852, 855, 860, 865, 870, 890
.Ve
.SS "PA-RISC 1.1"
.IX Subsection "PA-RISC 1.1"
An upgrade to the PA-RISC design, it shipped for many years in many different
system.
.PP
The following systems contain with PA-RISC 1.1 chips:
.PP
.Vb 10
\&  705, 710, 712, 715, 720, 722, 725, 728, 730, 735, 742, 743, 744, 745,
\&  747, 750, 755, 770, 777, 778, 779, 800, 801, 803, 806, 807, 809, 811,
\&  813, 816, 817, 819, 821, 826, 827, 829, 831, 837, 839, 841, 847, 849,
\&  851, 856, 857, 859, 867, 869, 877, 887, 891, 892, 897, A180, A180C,
\&  B115, B120, B132L, B132L+, B160L, B180L, C100, C110, C115, C120,
\&  C160L, D200, D210, D220, D230, D250, D260, D310, D320, D330, D350,
\&  D360, D410, DX0, DX5, DXO, E25, E35, E45, E55, F10, F20, F30, G30,
\&  G40, G50, G60, G70, H20, H30, H40, H50, H60, H70, I30, I40, I50, I60,
\&  I70, J200, J210, J210XC, K100, K200, K210, K220, K230, K400, K410,
\&  K420, S700i, S715, S744, S760, T500, T520
.Ve
.SS "PA-RISC 2.0"
.IX Subsection "PA-RISC 2.0"
The most recent upgrade to the PA-RISC design, it added support for
64\-bit integer data.
.PP
As of the date of this document's last update, the following systems
contain PA-RISC 2.0 chips:
.PP
.Vb 8
\&  700, 780, 781, 782, 783, 785, 802, 804, 810, 820, 861, 871, 879, 889,
\&  893, 895, 896, 898, 899, A400, A500, B1000, B2000, C130, C140, C160,
\&  C180, C180+, C180\-XP, C200+, C400+, C3000, C360, C3600, CB260, D270,
\&  D280, D370, D380, D390, D650, J220, J2240, J280, J282, J400, J410,
\&  J5000, J5500XM, J5600, J7000, J7600, K250, K260, K260\-EG, K270, K360,
\&  K370, K380, K450, K460, K460\-EG, K460\-XP, K470, K570, K580, L1000,
\&  L2000, L3000, N4000, R380, R390, SD16000, SD32000, SD64000, T540,
\&  T600, V2000, V2200, V2250, V2500, V2600
.Ve
.PP
Just before \s-1HP\s0 took over Compaq, some systems were renamed. the link
that contained the explanation is dead, so here's a short summary:
.PP
.Vb 3
\&  HP 9000 A\-Class servers, now renamed HP Server rp2400 series.
\&  HP 9000 L\-Class servers, now renamed HP Server rp5400 series.
\&  HP 9000 N\-Class servers, now renamed HP Server rp7400.
\&
\&  rp2400, rp2405, rp2430, rp2450, rp2470, rp3410, rp3440, rp4410,
\&  rp4440, rp5400, rp5405, rp5430, rp5450, rp5470, rp7400, rp7405,
\&  rp7410, rp7420, rp7440, rp8400, rp8420, rp8440, Superdome
.Ve
.PP
The current naming convention is:
.PP
.Vb 10
\&  aadddd
\&  ||||\`+\- 00 \- 99 relative capacity & newness (upgrades, etc.)
\&  |||\`\-\-\- unique number for each architecture to ensure different
\&  |||     systems do not have the same numbering across
\&  |||     architectures
\&  ||\`\-\-\-\- 1 \- 9 identifies family and/or relative positioning
\&  ||
\&  |\`\-\-\-\-\- c = ia32 (cisc)
\&  |       p = pa\-risc
\&  |       x = ia\-64 (Itanium & Itanium 2)
\&  |       h = housing
\&  \`\-\-\-\-\-\- t = tower
\&          r = rack optimized
\&          s = super scalable
\&          b = blade
\&          sa = appliance
.Ve
.SS "Itanium Processor Family (\s-1IPF\s0) and HP-UX"
.IX Subsection "Itanium Processor Family (IPF) and HP-UX"
HP-UX also runs on the new Itanium processor.  This requires the use
of a different version of HP-UX (currently 11.23 or 11i v2), and with
the exception of a few differences detailed below and in later sections,
Perl should compile with no problems.
.PP
Although PA-RISC binaries can run on Itanium systems, you should not
attempt to use a PA-RISC version of Perl on an Itanium system.  This is
because shared libraries created on an Itanium system cannot be loaded
while running a PA-RISC executable.
.PP
\&\s-1HP\s0 Itanium 2 systems are usually refered to with model description
\&\*(L"\s-1HP\s0 Integrity\*(R".
.SS "Itanium, Itanium 2 & Madison 6"
.IX Subsection "Itanium, Itanium 2 & Madison 6"
\&\s-1HP\s0 also ships servers with the 128\-bit Itanium processor(s). The cx26x0
is told to have Madison 6. As of the date of this document's last update,
the following systems contain Itanium or Itanium 2 chips (this is likely
to be out of date):
.PP
.Vb 4
\&  BL60p, BL860c, BL870c, cx2600, cx2620, rx1600, rx1620, rx2600,
\&  rx2600hptc, rx2620, rx2660, rx3600, rx4610, rx4640, rx5670,
\&  rx6600, rx7420, rx7620, rx7640, rx8420, rx8620, rx8640, rx9610,
\&  sx1000, sx2000
.Ve
.PP
To see all about your machine, type
.PP
.Vb 3
\&  # model
\&  ia64 hp server rx2600
\&  # /usr/contrib/bin/machinfo
.Ve
.SS "HP-UX versions"
.IX Subsection "HP-UX versions"
Not all architectures (\s-1PA\s0 = PA-RISC, \s-1IPF\s0 = Itanium Processor Family)
support all versions of HP-UX, here is a short list
.PP
.Vb 8
\&  HP\-UX version  Kernel  Architecture
\&  \-\-\-\-\-\-\-\-\-\-\-\-\-  \-\-\-\-\-\-  \-\-\-\-\-\-\-\-\-\-\-\-
\&  10.20          32 bit  PA
\&  11.00          32/64   PA
\&  11.11  11i v1  32/64   PA
\&  11.22  11i v2     64        IPF
\&  11.23  11i v2     64   PA & IPF
\&  11.31  11i v3     64   PA & IPF
.Ve
.PP
See for the full list of hardware/OS support and expected end-of-life
<http://www.hp.com/go/hpuxservermatrix>
.SS "Building Dynamic Extensions on HP-UX"
.IX Subsection "Building Dynamic Extensions on HP-UX"
HP-UX supports dynamically loadable libraries (shared libraries).
Shared libraries end with the suffix .sl.  On Itanium systems,
they end with the suffix .so.
.PP
Shared libraries created on a platform using a particular PA-RISC
version are not usable on platforms using an earlier PA-RISC version by
default.  However, this backwards compatibility may be enabled using the
same +DAportable compiler flag (with the same PA-RISC 1.0 caveat
mentioned above).
.PP
Shared libraries created on an Itanium platform cannot be loaded on
a PA-RISC platform.  Shared libraries created on a PA-RISC platform
can only be loaded on an Itanium platform if it is a PA-RISC executable
that is attempting to load the PA-RISC library.  A PA-RISC shared
library cannot be loaded into an Itanium executable nor vice-versa.
.PP
To create a shared library, the following steps must be performed:
.PP
.Vb 4
\&  1. Compile source modules with +z or +Z flag to create a .o module
\&     which contains Position\-Independent Code (PIC).  The linker will
\&     tell you in the next step if +Z was needed.
\&     (For gcc, the appropriate flag is \-fpic or \-fPIC.)
\&
\&  2. Link the shared library using the \-b flag.  If the code calls
\&     any functions in other system libraries (e.g., libm), it must
\&     be included on this line.
.Ve
.PP
(Note that these steps are usually handled automatically by the extension's
Makefile).
.PP
If these dependent libraries are not listed at shared library creation
time, you will get fatal \*(L"Unresolved symbol\*(R" errors at run time when the
library is loaded.
.PP
You may create a shared library that refers to another library, which
may be either an archive library or a shared library.  If this second
library is a shared library, this is called a \*(L"dependent library\*(R".  The
dependent library's name is recorded in the main shared library, but it
is not linked into the shared library.  Instead, it is loaded when the
main shared library is loaded.  This can cause problems if you build an
extension on one system and move it to another system where the
libraries may not be located in the same place as on the first system.
.PP
If the referred library is an archive library, then it is treated as a
simple collection of .o modules (all of which must contain \s-1PIC\s0).  These
modules are then linked into the shared library.
.PP
Note that it is okay to create a library which contains a dependent
library that is already linked into perl.
.PP
Some extensions, like DB_File and Compress::Zlib use/require prebuilt
libraries for the perl extensions/modules to work. If these libraries
are built using the default configuration, it might happen that you
run into an error like \*(L"invalid loader fixup\*(R" during load phase.
\&\s-1HP\s0 is aware of this problem.  Search the HP-UX cxx-dev forums for
discussions about the subject.  The short answer is that \fBeverything\fR
(all libraries, everything) must be compiled with \f(CW\*(C`+z\*(C'\fR or \f(CW\*(C`+Z\*(C'\fR to be
\&\s-1PIC\s0 (position independent code).  (For gcc, that would be
\&\f(CW\*(C`\-fpic\*(C'\fR or \f(CW\*(C`\-fPIC\*(C'\fR).  In HP-UX 11.00 or newer the linker
error message should tell the name of the offending object file.
.PP
A more general approach is to intervene manually, as with an example for
the DB_File module, which requires SleepyCat's libdb.sl:
.PP
.Vb 7
\&  # cd .../db\-3.2.9/build_unix
\&  # vi Makefile
\&  ... add +Z to all cflags to create shared objects
\&  CFLAGS=         \-c $(CPPFLAGS) +Z \-Ae +O2 +Onolimit \e
\&                  \-I/usr/local/include \-I/usr/include/X11R6
\&  CXXFLAGS=       \-c $(CPPFLAGS) +Z \-Ae +O2 +Onolimit \e
\&                  \-I/usr/local/include \-I/usr/include/X11R6
\&
\&  # make clean
\&  # make
\&  # mkdir tmp
\&  # cd tmp
\&  # ar x ../libdb.a
\&  # ld \-b \-o libdb\-3.2.sl *.o
\&  # mv libdb\-3.2.sl /usr/local/lib
\&  # rm *.o
\&  # cd /usr/local/lib
\&  # rm \-f libdb.sl
\&  # ln \-s libdb\-3.2.sl libdb.sl
\&
\&  # cd .../DB_File\-1.76
\&  # make distclean
\&  # perl Makefile.PL
\&  # make
\&  # make test
\&  # make install
.Ve
.PP
As of db\-4.2.x it is no longer needed to do this by hand. Sleepycat
has changed the configuration process to add +z on HP-UX automatically.
.PP
.Vb 2
\&  # cd .../db\-4.2.25/build_unix
\&  # env CFLAGS=+DD64 LDFLAGS=+DD64 ../dist/configure
.Ve
.PP
should work to generate 64bit shared libraries for HP-UX 11.00 and 11i.
.PP
It is no longer possible to link PA-RISC 1.0 shared libraries (even
though the command-line flags are still present).
.PP
PA-RISC and Itanium object files are not interchangeable.  Although
you may be able to use ar to create an archive library of PA-RISC
object files on an Itanium system, you cannot link against it using
an Itanium link editor.
.SS "The \s-1HP\s0 \s-1ANSI\s0 C Compiler"
.IX Subsection "The HP ANSI C Compiler"
When using this compiler to build Perl, you should make sure that the
flag \-Aa is added to the cpprun and cppstdin variables in the config.sh
file (though see the section on 64\-bit perl below). If you are using a
recent version of the Perl distribution, these flags are set automatically.
.PP
Even though HP-UX 10.20 and 11.00 are not actively maintained by \s-1HP\s0
anymore, updates for the \s-1HP\s0 \s-1ANSI\s0 C compiler are still available from
time to time, and it might be advisable to see if updates are applicable.
At the moment of writing, the latests available patches for 11.00 that
should be applied are \s-1PHSS_35098\s0, \s-1PHSS_35175\s0, \s-1PHSS_35100\s0, \s-1PHSS_33036\s0,
and \s-1PHSS_33902\s0). If you have a \s-1SUM\s0 account, you can use it to search
for updates/patches. Enter \*(L"\s-1ANSI\s0\*(R" as keyword.
.SS "The \s-1GNU\s0 C Compiler"
.IX Subsection "The GNU C Compiler"
When you are going to use the \s-1GNU\s0 C compiler (gcc), and you don't have
gcc yet, you can either build it yourself from the sources (available
from e.g. <http://gcc.gnu.org/mirrors.html>) or fetch
a prebuilt binary from the \s-1HP\s0 porting center. gcc prebuilds can be
fetched from
<http://h21007.www2.hp.com/dspp/tech/tech_TechSoftwareDetailPage_IDX/1,1703,547,00.html>
(Browse through the list, because there are often multiple versions of
the same package available).
.PP
Above mentioned distributions are depots. H.Merijn Brand has made prebuilt
gcc binaries available on <http://mirrors.develooper.com/hpux/> and/or
<http://www.cmve.net/~merijn/> for HP-UX 10.20, HP-UX 11.00, HP-UX 11.11
(HP-UX 11i v1), and HP-UX 11.23 (HP-UX 11i v2) in both 32\- and 64\-bit
versions. These are bzipped tar archives that also include recent \s-1GNU\s0
binutils and \s-1GNU\s0 gdb.  Read the instructions on that page to rebuild gcc
using itself.
.PP
On PA-RISC you need a different compiler for 32\-bit applications and for
64\-bit applications. On PA-RISC, 32\-bit objects and 64\-bit objects do
not mix. Period. There is no different behaviour for \s-1HP\s0 C\-ANSI-C or \s-1GNU\s0
gcc. So if you require your perl binary to use 64\-bit libraries, like
Oracle\-64bit, you \s-1MUST\s0 build a 64\-bit perl.
.PP
Building a 64\-bit capable gcc on PA-RISC from source is possible only when
you have the \s-1HP\s0 C\-ANSI C compiler or an already working 64\-bit binary of
gcc available. Best performance for perl is achieved with \s-1HP\s0's native
compiler.
.SS "Using Large Files with Perl on HP-UX"
.IX Subsection "Using Large Files with Perl on HP-UX"
Beginning with HP-UX version 10.20, files larger than 2GB (2^31 bytes)
may be created and manipulated.  Three separate methods of doing this
are available.  Of these methods, the best method for Perl is to compile
using the \-Duselargefiles flag to Configure.  This causes Perl to be
compiled using structures and functions in which these are 64 bits wide,
rather than 32 bits wide.  (Note that this will only work with \s-1HP\s0's \s-1ANSI\s0
C compiler.  If you want to compile Perl using gcc, you will have to get
a version of the compiler that supports 64\-bit operations. See above for
where to find it.)
.PP
There are some drawbacks to this approach.  One is that any extension
which calls any file-manipulating C function will need to be recompiled
(just follow the usual \*(L"perl Makefile.PL; make; make test; make install\*(R"
procedure).
.PP
The list of functions that will need to recompiled is:
  creat,          fgetpos,        fopen,
  freopen,        fsetpos,        fstat,
  fstatvfs,       fstatvfsdev,    ftruncate,
  ftw,            lockf,          lseek,
  lstat,          mmap,           nftw,
  open,           prealloc,       stat,
  statvfs,        statvfsdev,     tmpfile,
  truncate,       getrlimit,      setrlimit
.PP
Another drawback is only valid for Perl versions before 5.6.0.  This
drawback is that the seek and tell functions (both the builtin version
and \s-1POSIX\s0 module version) will not perform correctly.
.PP
It is strongly recommended that you use this flag when you run
Configure.  If you do not do this, but later answer the question about
large files when Configure asks you, you may get a configuration that
cannot be compiled, or that does not function as expected.
.SS "Threaded Perl on HP-UX"
.IX Subsection "Threaded Perl on HP-UX"
It is possible to compile a version of threaded Perl on any version of
HP-UX before 10.30, but it is strongly suggested that you be running on
HP-UX 11.00 at least.
.PP
To compile Perl with threads, add \-Dusethreads to the arguments of
Configure.  Verify that the \-D_POSIX_C_SOURCE=199506L compiler flag is
automatically added to the list of flags.  Also make sure that \-lpthread
is listed before \-lc in the list of libraries to link Perl with. The
hints provided for HP-UX during Configure will try very hard to get
this right for you.
.PP
HP-UX versions before 10.30 require a separate installation of a \s-1POSIX\s0
threads library package. Two examples are the \s-1HP\s0 \s-1DCE\s0 package, available
on \*(L"HP-UX Hardware Extensions 3.0, Install and Core \s-1OS\s0, Release 10.20,
April 1999 (B3920\-13941)\*(R" or the Freely available \s-1PTH\s0 package, available
on H.Merijn's site (<http://mirrors.develooper.com/hpux/>). The use of \s-1PTH\s0
will be unsupported in perl\-5.12 and up and is rather buggy in 5.11.x.
.PP
If you are going to use the \s-1HP\s0 \s-1DCE\s0 package, the library used for threading
is /usr/lib/libcma.sl, but there have been multiple updates of that
library over time. Perl will build with the first version, but it
will not pass the test suite. Older Oracle versions might be a compelling
reason not to update that library, otherwise please find a newer version
in one of the following patches: \s-1PHSS_19739\s0, \s-1PHSS_20608\s0, or \s-1PHSS_23672\s0
.PP
reformatted output:
.PP
.Vb 10
\&  d3:/usr/lib 106 > what libcma\-*.1
\&  libcma\-00000.1:
\&     HP DCE/9000 1.5               Module: libcma.sl (Export)
\&                                   Date: Apr 29 1996 22:11:24
\&  libcma\-19739.1:
\&     HP DCE/9000 1.5 PHSS_19739\-40 Module: libcma.sl (Export)
\&                                   Date: Sep  4 1999 01:59:07
\&  libcma\-20608.1:
\&     HP DCE/9000 1.5 PHSS_20608    Module: libcma.1 (Export)
\&                                   Date: Dec  8 1999 18:41:23
\&  libcma\-23672.1:
\&     HP DCE/9000 1.5 PHSS_23672    Module: libcma.1 (Export)
\&                                   Date: Apr  9 2001 10:01:06
\&  d3:/usr/lib 107 >
.Ve
.PP
If you choose for the \s-1PTH\s0 package, use swinstall to install pth in
the default location (/opt/pth), and then make symbolic links to the
libraries from /usr/lib
.PP
.Vb 2
\&  # cd /usr/lib
\&  # ln \-s /opt/pth/lib/libpth* .
.Ve
.PP
For building perl to support Oracle, it needs to be linked with libcl
and libpthread. So even if your perl is an unthreaded build, these
libraries might be required. See \*(L"Oracle on HP-UX\*(R" below.
.SS "64\-bit Perl on HP-UX"
.IX Subsection "64-bit Perl on HP-UX"
Beginning with HP-UX 11.00, programs compiled under HP-UX can take
advantage of the \s-1LP64\s0 programming environment (\s-1LP64\s0 means Longs and
Pointers are 64 bits wide), in which scalar variables will be able
to hold numbers larger than 2^32 with complete precision.  Perl has
proven to be consistent and reliable in 64bit mode since 5.8.1 on
all HP-UX 11.xx.
.PP
As of the date of this document, Perl is fully 64\-bit compliant on
HP-UX 11.00 and up for both cc\- and gcc builds. If you are about to
build a 64\-bit perl with \s-1GNU\s0 gcc, please read the gcc section carefully.
.PP
Should a user have the need for compiling Perl in the \s-1LP64\s0 environment,
use the \-Duse64bitall flag to Configure.  This will force Perl to be
compiled in a pure \s-1LP64\s0 environment (with the +DD64 flag for \s-1HP\s0 C\-ANSI-C,
with no additional options for \s-1GNU\s0 gcc 64\-bit on PA-RISC, and with
\&\-mlp64 for \s-1GNU\s0 gcc on Itanium).
If you want to compile Perl using gcc, you will have to get a version of
the compiler that supports 64\-bit operations.)
.PP
You can also use the \-Duse64bitint flag to Configure.  Although there
are some minor differences between compiling Perl with this flag versus
the \-Duse64bitall flag, they should not be noticeable from a Perl user's
perspective. When configuring \-Duse64bitint using a 64bit gcc on a
pa-risc architecture, \-Duse64bitint is silently promoted to \-Duse64bitall.
.PP
In both cases, it is strongly recommended that you use these flags when
you run Configure.  If you do not use do this, but later answer the
questions about 64\-bit numbers when Configure asks you, you may get a
configuration that cannot be compiled, or that does not function as
expected.
.SS "Oracle on HP-UX"
.IX Subsection "Oracle on HP-UX"
Using perl to connect to Oracle databases through \s-1DBI\s0 and DBD::Oracle
has caused a lot of people many headaches. Read \s-1README\s0.hpux in the
DBD::Oracle for much more information. The reason to mention it here
is that Oracle requires a perl built with libcl and libpthread, the
latter even when perl is build without threads. Building perl using
all defaults, but still enabling to build DBD::Oracle later on can be
achieved using
.PP
.Vb 1
\&  Configure \-A prepend:libswanted=\*(Aqcl pthread \*(Aq ...
.Ve
.PP
Do not forget the space before the trailing quote.
.PP
Also note that this does not (yet) work with all configurations,
it is known to fail with 64\-bit versions of \s-1GCC\s0.
.SS "\s-1GDBM\s0 and Threads on HP-UX"
.IX Subsection "GDBM and Threads on HP-UX"
If you attempt to compile Perl with (\s-1POSIX\s0) threads on an 11.X system
and also link in the \s-1GDBM\s0 library, then Perl will immediately core dump
when it starts up.  The only workaround at this point is to relink the
\&\s-1GDBM\s0 library under 11.X, then relink it into Perl.
.PP
the error might show something like:
.PP
Pthread internal error: message: _\|\fI_libc_reinit()\fR failed, file: ../pthreads/pthread.c, line: 1096
Return Pointer is 0xc082bf33
sh: 5345 Quit(coredump)
.PP
and Configure will give up.
.SS "\s-1NFS\s0 filesystems and \fIutime\fP\|(2) on HP-UX"
.IX Subsection "NFS filesystems and utime on HP-UX"
If you are compiling Perl on a remotely-mounted \s-1NFS\s0 filesystem, the test
io/fs.t may fail on test #18.  This appears to be a bug in HP-UX and no
fix is currently available.
.SS "HP-UX Kernel Parameters (maxdsiz) for Compiling Perl"
.IX Subsection "HP-UX Kernel Parameters (maxdsiz) for Compiling Perl"
By default, HP-UX comes configured with a maximum data segment size of
64MB.  This is too small to correctly compile Perl with the maximum
optimization levels.  You can increase the size of the maxdsiz kernel
parameter through the use of \s-1SAM\s0.
.PP
When using the \s-1GUI\s0 version of \s-1SAM\s0, click on the Kernel Configuration
icon, then the Configurable Parameters icon.  Scroll down and select
the maxdsiz line.  From the Actions menu, select the Modify Configurable
Parameter item.  Insert the new formula into the Formula/Value box.
Then follow the instructions to rebuild your kernel and reboot your
system.
.PP
In general, a value of 256MB (or \*(L"256*1024*1024\*(R") is sufficient for
Perl to compile at maximum optimization.
.SH "nss_delete core dump from op/pwent or op/grent"
.IX Header "nss_delete core dump from op/pwent or op/grent"
You may get a bus error core dump from the op/pwent or op/grent
tests. If compiled with \-g you will see a stack trace much like
the following:
.PP
.Vb 10
\&  #0  0xc004216c in  () from /usr/lib/libc.2
\&  #1  0xc00d7550 in _\|_nss_src_state_destr () from /usr/lib/libc.2
\&  #2  0xc00d7768 in _\|_nss_src_state_destr () from /usr/lib/libc.2
\&  #3  0xc00d78a8 in nss_delete () from /usr/lib/libc.2
\&  #4  0xc01126d8 in endpwent () from /usr/lib/libc.2
\&  #5  0xd1950 in Perl_pp_epwent () from ./perl
\&  #6  0x94d3c in Perl_runops_standard () from ./perl
\&  #7  0x23728 in S_run_body () from ./perl
\&  #8  0x23428 in perl_run () from ./perl
\&  #9  0x2005c in main () from ./perl
.Ve
.PP
The key here is the \f(CW\*(C`nss_delete\*(C'\fR call.  One workaround for this
bug seems to be to create add to the file \fI/etc/nsswitch.conf\fR
(at least) the following lines
.PP
.Vb 2
\&  group: files
\&  passwd: files
.Ve
.PP
Whether you are using \s-1NIS\s0 does not matter.  Amazingly enough,
the same bug also affects Solaris.
.ie n .SH "error: pasting "")"" and ""l"" does not give a valid preprocessing token"
.el .SH "error: pasting ``)'' and ``l'' does not give a valid preprocessing token"
.IX Header "error: pasting ) and l does not give a valid preprocessing token"
There seems to be a broken system header file in HP-UX 11.00 that
breaks perl building in 32bit mode with \s-1GNU\s0 gcc\-4.x causing this
error. The same file for HP-UX 11.11 (even though the file is older)
does not show this failure, and has the correct definition, so the
best fix is to patch the header to match:
.PP
.Vb 9
\& \-\-\- /usr/include/inttypes.h  2001\-04\-20 18:42:14 +0200
\& +++ /usr/include/inttypes.h  2000\-11\-14 09:00:00 +0200
\& @@ \-72,7 +72,7 @@
\&  #define UINT32_C(_\|_c)                   _\|_CONCAT_U_\|_(_\|_c)
\&  #else /* _\|_LP64 */
\&  #define INT32_C(_\|_c)                    _\|_CONCAT_\|_(_\|_c,l)
\& \-#define UINT32_C(_\|_c)                   _\|_CONCAT_\|_(_\|_CONCAT_U_\|_(_\|_c),l)
\& +#define UINT32_C(_\|_c)                   _\|_CONCAT_\|_(_\|_c,ul)
\&  #endif /* _\|_LP64 */
\&
\&  #define INT64_C(_\|_c)                    _\|_CONCAT_L_\|_(_\|_c,l)
.Ve
.SH "Miscellaneous"
.IX Header "Miscellaneous"
HP-UX 11 Y2K patch \*(L"Y2K\-1100 B.11.00.B0125 HP-UX Core \s-1OS\s0 Year 2000
Patch Bundle\*(R" has been reported to break the io/fs test #18 which
tests whether \fIutime()\fR can change timestamps.  The Y2K patch seems to
break \fIutime()\fR so that over \s-1NFS\s0 the timestamps do not get changed
(on local filesystems \fIutime()\fR still works). This has probably been
fixed on your system by now.
.SH "AUTHOR"
.IX Header "AUTHOR"
H.Merijn Brand <h.m.brand@xs4all.nl>
Jeff Okamoto <okamoto@corp.hp.com>
.PP
With much assistance regarding shared libraries from Marc Sabatella.
            osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perlhpux5.18.1                               0100644 0001750 0001750 00000107570 12566207441 023134  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLHPUX 1"
.TH PERLHPUX 1 "2013-11-04" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlhpux \- Perl version 5 on Hewlett\-Packard Unix (HP\-UX) systems
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document describes various features of \s-1HP\s0's Unix operating system
(HP-UX) that will affect how Perl version 5 (hereafter just Perl) is
compiled and/or runs.
.SS "Using perl as shipped with HP-UX"
.IX Subsection "Using perl as shipped with HP-UX"
Application release September 2001, HP-UX 11.00 is the first to ship
with Perl. By the time it was perl\-5.6.1 in /opt/perl. The first
occurrence is on \s-1CD 5012\-7954\s0 and can be installed using
.PP
.Vb 1
\&  swinstall \-s /cdrom perl
.Ve
.PP
assuming you have mounted that \s-1CD\s0 on /cdrom.
.PP
That build was a portable hppa\-1.1 multithread build that supports large
files compiled with gcc\-2.9\-hppa\-991112.
.PP
If you perform a new installation, then (a newer) Perl will be installed
automatically.  Pre-installed HP-UX systems now have more recent versions
of Perl and the updated modules.
.PP
The official (threaded) builds from \s-1HP,\s0 as they are shipped on the
Application \s-1DVD/CD\s0's are available on
<http://www.software.hp.com/portal/swdepot/displayProductInfo.do?productNumber=PERL>
for both PA-RISC and \s-1IPF \s0(Itanium Processor Family). They are built
with the \s-1HP\s0 ANSI-C compiler. Up till 5.8.8 that was done by ActiveState.
.PP
To see what version is included on the \s-1DVD \s0(assumed here to be mounted
on /cdrom), issue this command:
.PP
.Vb 4
\&  # swlist \-s /cdrom perl
\&  # perl           D.5.8.8.B  5.8.8 Perl Programming Language
\&    perl.Perl5\-32  D.5.8.8.B  32\-bit 5.8.8 Perl Programming Language with Extensions
\&    perl.Perl5\-64  D.5.8.8.B  64\-bit 5.8.8 Perl Programming Language with Extensions
.Ve
.PP
To see what is installed on your system:
.PP
.Vb 8
\&  # swlist \-R perl
\&  # perl                    E.5.8.8.J  Perl Programming Language
\&  # perl.Perl5\-32           E.5.8.8.J  32\-bit Perl Programming Language with Extensions
\&    perl.Perl5\-32.PERL\-MAN  E.5.8.8.J  32\-bit Perl Man Pages for IA
\&    perl.Perl5\-32.PERL\-RUN  E.5.8.8.J  32\-bit Perl Binaries for IA
\&  # perl.Perl5\-64           E.5.8.8.J  64\-bit Perl Programming Language with Extensions
\&    perl.Perl5\-64.PERL\-MAN  E.5.8.8.J  64\-bit Perl Man Pages for IA
\&    perl.Perl5\-64.PERL\-RUN  E.5.8.8.J  64\-bit Perl Binaries for IA
.Ve
.SS "Using perl from \s-1HP\s0's porting centre"
.IX Subsection "Using perl from HP's porting centre"
\&\s-1HP\s0 porting centre tries to keep up with customer demand and release
updates from the Open Source community. Having precompiled Perl binaries
available is obvious, though \*(L"up-to-date\*(R" is something relative. At the
moment of writing only perl\-5.10.1 was available (with 5.16.3 being the
latest stable release from the porters point of view).
.PP
The \s-1HP\s0 porting centres are limited in what systems they are allowed
to port to and they usually choose the two most recent \s-1OS\s0 versions
available.
.PP
\&\s-1HP\s0 has asked the porting centre to move Open Source binaries
from /opt to /usr/local, so binaries produced since the start
of July 2002 are located in /usr/local.
.PP
One of \s-1HP\s0 porting centres \s-1URL\s0's is <http://hpux.connect.org.uk/>
The port currently available is built with \s-1GNU\s0 gcc.
.SS "Other prebuilt perl binaries"
.IX Subsection "Other prebuilt perl binaries"
To get even more recent perl depots for the whole range of HP-UX, visit
H.Merijn Brand's site at <http://mirrors.develooper.com/hpux/#Perl>.
Carefully read the notes to see if the available versions suit your needs.
.SS "Compiling Perl 5 on HP-UX"
.IX Subsection "Compiling Perl 5 on HP-UX"
When compiling Perl, you must use an \s-1ANSI C\s0 compiler.  The C compiler
that ships with all HP-UX systems is a K&R compiler that should only be
used to build new kernels.
.PP
Perl can be compiled with either \s-1HP\s0's \s-1ANSI C\s0 compiler or with gcc.  The
former is recommended, as not only can it compile Perl with no
difficulty, but also can take advantage of features listed later that
require the use of \s-1HP\s0 compiler-specific command-line flags.
.PP
If you decide to use gcc, make sure your installation is recent and
complete, and be sure to read the Perl \s-1INSTALL\s0 file for more gcc-specific
details.
.SS "PA-RISC"
.IX Subsection "PA-RISC"
\&\s-1HP\s0's \s-1HP9000\s0 Unix systems run on \s-1HP\s0's own Precision Architecture
(PA-RISC) chip.  HP-UX used to run on the Motorola \s-1MC68000\s0 family of
chips, but any machine with this chip in it is quite obsolete and this
document will not attempt to address issues for compiling Perl on the
Motorola chipset.
.PP
The version of PA-RISC at the time of this document's last update is 2.0,
which is also the last there will be. \s-1HP\s0 PA-RISC systems are usually
refered to with model description \*(L"\s-1HP 9000\*(R".\s0 The last \s-1CPU\s0 in this series
is the \s-1PA\-8900. \s0 Support for PA-RISC architectured machines officially
ends as shown in the following table:
.PP
.Vb 10
\&   PA\-RISC End\-of\-Life Roadmap
\& +\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\& | HP9000 | Superdome      | PA\-8700        | Spring 2011     |
\& | 4\-128  |                | PA\-8800/sx1000 | Summer 2012     |
\& | cores  |                | PA\-8900/sx1000 | 2014            |
\& |        |                | PA\-8900/sx2000 | 2015            |
\& +\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\& | HP9000 | rp7410, rp8400 | PA\-8700        | Spring 2011     |
\& | 2\-32   | rp7420, rp8420 | PA\-8800/sx1000 | 2012            |
\& | cores  | rp7440, rp8440 | PA\-8900/sx1000 | Autumn 2013     |
\& |        |                | PA\-8900/sx2000 | 2015            |
\& +\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\& | HP9000 | rp44x0         | PA\-8700        | Spring 2011     |
\& | 1\-8    |                | PA\-8800/rp44x0 | 2012            |
\& | cores  |                | PA\-8900/rp44x0 | 2014            |
\& +\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\& | HP9000 | rp34x0         | PA\-8700        | Spring 2011     |
\& | 1\-4    |                | PA\-8800/rp34x0 | 2012            |
\& | cores  |                | PA\-8900/rp34x0 | 2014            |
\& +\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
.Ve
.PP
From <http://www.hp.com/products1/evolution/9000/faqs.html>
.PP
.Vb 1
\& The last order date for HP 9000 systems was December 31, 2008.
.Ve
.PP
A complete list of models at the time the \s-1OS\s0 was built is in the file
/usr/sam/lib/mo/sched.models. The first column corresponds to the last
part of the output of the \*(L"model\*(R" command.  The second column is the
PA-RISC version and the third column is the exact chip type used.
(Start browsing at the bottom to prevent confusion ;\-)
.PP
.Vb 4
\&  # model
\&  9000/800/L1000\-44
\&  # grep L1000\-44 /usr/sam/lib/mo/sched.models
\&  L1000\-44        2.0     PA8500
.Ve
.SS "Portability Between PA-RISC Versions"
.IX Subsection "Portability Between PA-RISC Versions"
An executable compiled on a PA-RISC 2.0 platform will not execute on a
PA-RISC 1.1 platform, even if they are running the same version of
HP-UX.  If you are building Perl on a PA-RISC 2.0 platform and want that
Perl to also run on a PA-RISC 1.1, the compiler flags +DAportable and
+DS32 should be used.
.PP
It is no longer possible to compile PA-RISC 1.0 executables on either
the PA-RISC 1.1 or 2.0 platforms.  The command-line flags are accepted,
but the resulting executable will not run when transferred to a PA-RISC
1.0 system.
.SS "PA-RISC 1.0"
.IX Subsection "PA-RISC 1.0"
The original version of PA-RISC, \s-1HP\s0 no longer sells any system with this chip.
.PP
The following systems contained PA-RISC 1.0 chips:
.PP
.Vb 2
\&  600, 635, 645, 808, 815, 822, 825, 832, 834, 835, 840, 842, 845, 850,
\&  852, 855, 860, 865, 870, 890
.Ve
.SS "PA-RISC 1.1"
.IX Subsection "PA-RISC 1.1"
An upgrade to the PA-RISC design, it shipped for many years in many different
system.
.PP
The following systems contain with PA-RISC 1.1 chips:
.PP
.Vb 10
\&  705, 710, 712, 715, 720, 722, 725, 728, 730, 735, 742, 743, 744, 745,
\&  747, 750, 755, 770, 777, 778, 779, 800, 801, 803, 806, 807, 809, 811,
\&  813, 816, 817, 819, 821, 826, 827, 829, 831, 837, 839, 841, 847, 849,
\&  851, 856, 857, 859, 867, 869, 877, 887, 891, 892, 897, A180, A180C,
\&  B115, B120, B132L, B132L+, B160L, B180L, C100, C110, C115, C120,
\&  C160L, D200, D210, D220, D230, D250, D260, D310, D320, D330, D350,
\&  D360, D410, DX0, DX5, DXO, E25, E35, E45, E55, F10, F20, F30, G30,
\&  G40, G50, G60, G70, H20, H30, H40, H50, H60, H70, I30, I40, I50, I60,
\&  I70, J200, J210, J210XC, K100, K200, K210, K220, K230, K400, K410,
\&  K420, S700i, S715, S744, S760, T500, T520
.Ve
.SS "PA-RISC 2.0"
.IX Subsection "PA-RISC 2.0"
The most recent upgrade to the PA-RISC design, it added support for
64\-bit integer data.
.PP
As of the date of this document's last update, the following systems
contain PA-RISC 2.0 chips:
.PP
.Vb 8
\&  700, 780, 781, 782, 783, 785, 802, 804, 810, 820, 861, 871, 879, 889,
\&  893, 895, 896, 898, 899, A400, A500, B1000, B2000, C130, C140, C160,
\&  C180, C180+, C180\-XP, C200+, C400+, C3000, C360, C3600, CB260, D270,
\&  D280, D370, D380, D390, D650, J220, J2240, J280, J282, J400, J410,
\&  J5000, J5500XM, J5600, J7000, J7600, K250, K260, K260\-EG, K270, K360,
\&  K370, K380, K450, K460, K460\-EG, K460\-XP, K470, K570, K580, L1000,
\&  L2000, L3000, N4000, R380, R390, SD16000, SD32000, SD64000, T540,
\&  T600, V2000, V2200, V2250, V2500, V2600
.Ve
.PP
Just before \s-1HP\s0 took over Compaq, some systems were renamed. the link
that contained the explanation is dead, so here's a short summary:
.PP
.Vb 3
\&  HP 9000 A\-Class servers, now renamed HP Server rp2400 series.
\&  HP 9000 L\-Class servers, now renamed HP Server rp5400 series.
\&  HP 9000 N\-Class servers, now renamed HP Server rp7400.
\&
\&  rp2400, rp2405, rp2430, rp2450, rp2470, rp3410, rp3440, rp4410,
\&  rp4440, rp5400, rp5405, rp5430, rp5450, rp5470, rp7400, rp7405,
\&  rp7410, rp7420, rp7440, rp8400, rp8420, rp8440, Superdome
.Ve
.PP
The current naming convention is:
.PP
.Vb 10
\&  aadddd
\&  ||||\`+\- 00 \- 99 relative capacity & newness (upgrades, etc.)
\&  |||\`\-\-\- unique number for each architecture to ensure different
\&  |||     systems do not have the same numbering across
\&  |||     architectures
\&  ||\`\-\-\-\- 1 \- 9 identifies family and/or relative positioning
\&  ||
\&  |\`\-\-\-\-\- c = ia32 (cisc)
\&  |       p = pa\-risc
\&  |       x = ia\-64 (Itanium & Itanium 2)
\&  |       h = housing
\&  \`\-\-\-\-\-\- t = tower
\&          r = rack optimized
\&          s = super scalable
\&          b = blade
\&          sa = appliance
.Ve
.SS "Itanium Processor Family (\s-1IPF\s0) and HP-UX"
.IX Subsection "Itanium Processor Family (IPF) and HP-UX"
HP-UX also runs on the new Itanium processor.  This requires the use
of a different version of HP-UX (currently 11.23 or 11i v2), and with
the exception of a few differences detailed below and in later sections,
Perl should compile with no problems.
.PP
Although PA-RISC binaries can run on Itanium systems, you should not
attempt to use a PA-RISC version of Perl on an Itanium system.  This is
because shared libraries created on an Itanium system cannot be loaded
while running a PA-RISC executable.
.PP
\&\s-1HP\s0 Itanium 2 systems are usually refered to with model description
\&\*(L"\s-1HP\s0 Integrity\*(R".
.SS "Itanium, Itanium 2 & Madison 6"
.IX Subsection "Itanium, Itanium 2 & Madison 6"
\&\s-1HP\s0 also ships servers with the 128\-bit Itanium processor(s). The cx26x0
is told to have Madison 6. As of the date of this document's last update,
the following systems contain Itanium or Itanium 2 chips (this is likely
to be out of date):
.PP
.Vb 4
\&  BL60p, BL860c, BL870c, BL890c, cx2600, cx2620, rx1600, rx1620, rx2600,
\&  rx2600hptc, rx2620, rx2660, rx2800, rx3600, rx4610, rx4640, rx5670,
\&  rx6600, rx7420, rx7620, rx7640, rx8420, rx8620, rx8640, rx9610,
\&  sx1000, sx2000
.Ve
.PP
To see all about your machine, type
.PP
.Vb 3
\&  # model
\&  ia64 hp server rx2600
\&  # /usr/contrib/bin/machinfo
.Ve
.SS "HP-UX versions"
.IX Subsection "HP-UX versions"
Not all architectures (\s-1PA\s0 = PA-RISC, \s-1IPF\s0 = Itanium Processor Family)
support all versions of HP-UX, here is a short list
.PP
.Vb 8
\&  HP\-UX version  Kernel  Architecture End\-of\-factory support
\&  \-\-\-\-\-\-\-\-\-\-\-\-\-  \-\-\-\-\-\-  \-\-\-\-\-\-\-\-\-\-\-\- \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&  10.20          32 bit  PA           30\-Jun\-2003
\&  11.00          32/64   PA           31\-Dec\-2006
\&  11.11  11i v1  32/64   PA           31\-Dec\-2015
\&  11.22  11i v2     64        IPF     30\-Apr\-2004
\&  11.23  11i v2     64   PA & IPF     31\-Dec\-2015
\&  11.31  11i v3     64   PA & IPF     31\-Dec\-2020 (PA) 31\-Dec\-2022 (IPF)
.Ve
.PP
See for the full list of hardware/OS support and expected end-of-life
<http://www.hp.com/go/hpuxservermatrix>
.SS "Building Dynamic Extensions on HP-UX"
.IX Subsection "Building Dynamic Extensions on HP-UX"
HP-UX supports dynamically loadable libraries (shared libraries).
Shared libraries end with the suffix .sl.  On Itanium systems,
they end with the suffix .so.
.PP
Shared libraries created on a platform using a particular PA-RISC
version are not usable on platforms using an earlier PA-RISC version by
default.  However, this backwards compatibility may be enabled using the
same +DAportable compiler flag (with the same PA-RISC 1.0 caveat
mentioned above).
.PP
Shared libraries created on an Itanium platform cannot be loaded on
a PA-RISC platform.  Shared libraries created on a PA-RISC platform
can only be loaded on an Itanium platform if it is a PA-RISC executable
that is attempting to load the PA-RISC library.  A PA-RISC shared
library cannot be loaded into an Itanium executable nor vice-versa.
.PP
To create a shared library, the following steps must be performed:
.PP
.Vb 4
\&  1. Compile source modules with +z or +Z flag to create a .o module
\&     which contains Position\-Independent Code (PIC).  The linker will
\&     tell you in the next step if +Z was needed.
\&     (For gcc, the appropriate flag is \-fpic or \-fPIC.)
\&
\&  2. Link the shared library using the \-b flag.  If the code calls
\&     any functions in other system libraries (e.g., libm), it must
\&     be included on this line.
.Ve
.PP
(Note that these steps are usually handled automatically by the extension's
Makefile).
.PP
If these dependent libraries are not listed at shared library creation
time, you will get fatal \*(L"Unresolved symbol\*(R" errors at run time when the
library is loaded.
.PP
You may create a shared library that refers to another library, which
may be either an archive library or a shared library.  If this second
library is a shared library, this is called a \*(L"dependent library\*(R".  The
dependent library's name is recorded in the main shared library, but it
is not linked into the shared library.  Instead, it is loaded when the
main shared library is loaded.  This can cause problems if you build an
extension on one system and move it to another system where the
libraries may not be located in the same place as on the first system.
.PP
If the referred library is an archive library, then it is treated as a
simple collection of .o modules (all of which must contain \s-1PIC\s0).  These
modules are then linked into the shared library.
.PP
Note that it is okay to create a library which contains a dependent
library that is already linked into perl.
.PP
Some extensions, like DB_File and Compress::Zlib use/require prebuilt
libraries for the perl extensions/modules to work. If these libraries
are built using the default configuration, it might happen that you
run into an error like \*(L"invalid loader fixup\*(R" during load phase.
\&\s-1HP\s0 is aware of this problem.  Search the HP-UX cxx-dev forums for
discussions about the subject.  The short answer is that \fBeverything\fR
(all libraries, everything) must be compiled with \f(CW\*(C`+z\*(C'\fR or \f(CW\*(C`+Z\*(C'\fR to be
\&\s-1PIC \s0(position independent code).  (For gcc, that would be
\&\f(CW\*(C`\-fpic\*(C'\fR or \f(CW\*(C`\-fPIC\*(C'\fR).  In HP-UX 11.00 or newer the linker
error message should tell the name of the offending object file.
.PP
A more general approach is to intervene manually, as with an example for
the DB_File module, which requires SleepyCat's libdb.sl:
.PP
.Vb 7
\&  # cd .../db\-3.2.9/build_unix
\&  # vi Makefile
\&  ... add +Z to all cflags to create shared objects
\&  CFLAGS=         \-c $(CPPFLAGS) +Z \-Ae +O2 +Onolimit \e
\&                  \-I/usr/local/include \-I/usr/include/X11R6
\&  CXXFLAGS=       \-c $(CPPFLAGS) +Z \-Ae +O2 +Onolimit \e
\&                  \-I/usr/local/include \-I/usr/include/X11R6
\&
\&  # make clean
\&  # make
\&  # mkdir tmp
\&  # cd tmp
\&  # ar x ../libdb.a
\&  # ld \-b \-o libdb\-3.2.sl *.o
\&  # mv libdb\-3.2.sl /usr/local/lib
\&  # rm *.o
\&  # cd /usr/local/lib
\&  # rm \-f libdb.sl
\&  # ln \-s libdb\-3.2.sl libdb.sl
\&
\&  # cd .../DB_File\-1.76
\&  # make distclean
\&  # perl Makefile.PL
\&  # make
\&  # make test
\&  # make install
.Ve
.PP
As of db\-4.2.x it is no longer needed to do this by hand. Sleepycat
has changed the configuration process to add +z on HP-UX automatically.
.PP
.Vb 2
\&  # cd .../db\-4.2.25/build_unix
\&  # env CFLAGS=+DD64 LDFLAGS=+DD64 ../dist/configure
.Ve
.PP
should work to generate 64bit shared libraries for HP-UX 11.00 and 11i.
.PP
It is no longer possible to link PA-RISC 1.0 shared libraries (even
though the command-line flags are still present).
.PP
PA-RISC and Itanium object files are not interchangeable.  Although
you may be able to use ar to create an archive library of PA-RISC
object files on an Itanium system, you cannot link against it using
an Itanium link editor.
.SS "The \s-1HP ANSI C\s0 Compiler"
.IX Subsection "The HP ANSI C Compiler"
When using this compiler to build Perl, you should make sure that the
flag \-Aa is added to the cpprun and cppstdin variables in the config.sh
file (though see the section on 64\-bit perl below). If you are using a
recent version of the Perl distribution, these flags are set automatically.
.PP
Even though HP-UX 10.20 and 11.00 are not actively maintained by \s-1HP\s0
anymore, updates for the \s-1HP ANSI C\s0 compiler are still available from
time to time, and it might be advisable to see if updates are applicable.
At the moment of writing, the latests available patches for 11.00 that
should be applied are \s-1PHSS_35098, PHSS_35175, PHSS_35100, PHSS_33036,\s0
and \s-1PHSS_33902\s0). If you have a \s-1SUM\s0 account, you can use it to search
for updates/patches. Enter \*(L"\s-1ANSI\*(R"\s0 as keyword.
.SS "The \s-1GNU C\s0 Compiler"
.IX Subsection "The GNU C Compiler"
When you are going to use the \s-1GNU C\s0 compiler (gcc), and you don't have
gcc yet, you can either build it yourself from the sources (available
from e.g. <http://gcc.gnu.org/mirrors.html>) or fetch
a prebuilt binary from the \s-1HP\s0 porting center
at <http://hpux.connect.org.uk/hppd/cgi\-bin/search?term=gcc&Search=Search>
or from the \s-1DSPP \s0(you need to be a member) at
<http://h21007.www2.hp.com/portal/site/dspp/menuitem.863c3e4cbcdc3f3515b49c108973a801?ciid=2a08725cc2f02110725cc2f02110275d6e10RCRD&jumpid=reg_r1002_usen_c\-001_title_r0001>
(Browse through the list, because there are often multiple versions of
the same package available).
.PP
Most mentioned distributions are depots. H.Merijn Brand has made prebuilt
gcc binaries available on <http://mirrors.develooper.com/hpux/> and/or
<http://www.cmve.net/~merijn/> for HP-UX 10.20 (only 32bit), HP-UX 11.00,
HP-UX 11.11 (HP-UX 11i v1), and HP-UX 11.23 (HP-UX 11i v2 PA-RISC) in both
32\- and 64\-bit versions. For HP-UX 11.23 \s-1IPF\s0 and HP-UX 11.31 \s-1IPF\s0 depots are
available too. The \s-1IPF\s0 versions do not need two versions of \s-1GNU\s0 gcc.
.PP
On PA-RISC you need a different compiler for 32\-bit applications and for
64\-bit applications. On PA-RISC, 32\-bit objects and 64\-bit objects do
not mix. Period. There is no different behaviour for \s-1HP\s0 C\-ANSI-C or \s-1GNU\s0
gcc. So if you require your perl binary to use 64\-bit libraries, like
Oracle\-64bit, you \s-1MUST\s0 build a 64\-bit perl.
.PP
Building a 64\-bit capable gcc on PA-RISC from source is possible only when
you have the \s-1HP C\-ANSI C\s0 compiler or an already working 64\-bit binary of
gcc available. Best performance for perl is achieved with \s-1HP\s0's native
compiler.
.SS "Using Large Files with Perl on HP-UX"
.IX Subsection "Using Large Files with Perl on HP-UX"
Beginning with HP-UX version 10.20, files larger than 2GB (2^31 bytes)
may be created and manipulated.  Three separate methods of doing this
are available.  Of these methods, the best method for Perl is to compile
using the \-Duselargefiles flag to Configure.  This causes Perl to be
compiled using structures and functions in which these are 64 bits wide,
rather than 32 bits wide.  (Note that this will only work with \s-1HP\s0's \s-1ANSI
C\s0 compiler.  If you want to compile Perl using gcc, you will have to get
a version of the compiler that supports 64\-bit operations. See above for
where to find it.)
.PP
There are some drawbacks to this approach.  One is that any extension
which calls any file-manipulating C function will need to be recompiled
(just follow the usual \*(L"perl Makefile.PL; make; make test; make install\*(R"
procedure).
.PP
The list of functions that will need to recompiled is:
  creat,          fgetpos,        fopen,
  freopen,        fsetpos,        fstat,
  fstatvfs,       fstatvfsdev,    ftruncate,
  ftw,            lockf,          lseek,
  lstat,          mmap,           nftw,
  open,           prealloc,       stat,
  statvfs,        statvfsdev,     tmpfile,
  truncate,       getrlimit,      setrlimit
.PP
Another drawback is only valid for Perl versions before 5.6.0.  This
drawback is that the seek and tell functions (both the builtin version
and \s-1POSIX\s0 module version) will not perform correctly.
.PP
It is strongly recommended that you use this flag when you run
Configure.  If you do not do this, but later answer the question about
large files when Configure asks you, you may get a configuration that
cannot be compiled, or that does not function as expected.
.SS "Threaded Perl on HP-UX"
.IX Subsection "Threaded Perl on HP-UX"
It is possible to compile a version of threaded Perl on any version of
HP-UX before 10.30, but it is strongly suggested that you be running on
HP-UX 11.00 at least.
.PP
To compile Perl with threads, add \-Dusethreads to the arguments of
Configure.  Verify that the \-D_POSIX_C_SOURCE=199506L compiler flag is
automatically added to the list of flags.  Also make sure that \-lpthread
is listed before \-lc in the list of libraries to link Perl with. The
hints provided for HP-UX during Configure will try very hard to get
this right for you.
.PP
HP-UX versions before 10.30 require a separate installation of a \s-1POSIX\s0
threads library package. Two examples are the \s-1HP DCE\s0 package, available
on \*(L"HP-UX Hardware Extensions 3.0, Install and Core \s-1OS,\s0 Release 10.20,
April 1999 (B3920\-13941)\*(R" or the Freely available \s-1PTH\s0 package, available
on H.Merijn's site (<http://mirrors.develooper.com/hpux/>). The use of \s-1PTH\s0
will be unsupported in perl\-5.12 and up and is rather buggy in 5.11.x.
.PP
If you are going to use the \s-1HP DCE\s0 package, the library used for threading
is /usr/lib/libcma.sl, but there have been multiple updates of that
library over time. Perl will build with the first version, but it
will not pass the test suite. Older Oracle versions might be a compelling
reason not to update that library, otherwise please find a newer version
in one of the following patches: \s-1PHSS_19739, PHSS_20608,\s0 or \s-1PHSS_23672\s0
.PP
reformatted output:
.PP
.Vb 10
\&  d3:/usr/lib 106 > what libcma\-*.1
\&  libcma\-00000.1:
\&     HP DCE/9000 1.5               Module: libcma.sl (Export)
\&                                   Date: Apr 29 1996 22:11:24
\&  libcma\-19739.1:
\&     HP DCE/9000 1.5 PHSS_19739\-40 Module: libcma.sl (Export)
\&                                   Date: Sep  4 1999 01:59:07
\&  libcma\-20608.1:
\&     HP DCE/9000 1.5 PHSS_20608    Module: libcma.1 (Export)
\&                                   Date: Dec  8 1999 18:41:23
\&  libcma\-23672.1:
\&     HP DCE/9000 1.5 PHSS_23672    Module: libcma.1 (Export)
\&                                   Date: Apr  9 2001 10:01:06
\&  d3:/usr/lib 107 >
.Ve
.PP
If you choose for the \s-1PTH\s0 package, use swinstall to install pth in
the default location (/opt/pth), and then make symbolic links to the
libraries from /usr/lib
.PP
.Vb 2
\&  # cd /usr/lib
\&  # ln \-s /opt/pth/lib/libpth* .
.Ve
.PP
For building perl to support Oracle, it needs to be linked with libcl
and libpthread. So even if your perl is an unthreaded build, these
libraries might be required. See \*(L"Oracle on HP-UX\*(R" below.
.SS "64\-bit Perl on HP-UX"
.IX Subsection "64-bit Perl on HP-UX"
Beginning with HP-UX 11.00, programs compiled under HP-UX can take
advantage of the \s-1LP64\s0 programming environment (\s-1LP64\s0 means Longs and
Pointers are 64 bits wide), in which scalar variables will be able
to hold numbers larger than 2^32 with complete precision.  Perl has
proven to be consistent and reliable in 64bit mode since 5.8.1 on
all HP-UX 11.xx.
.PP
As of the date of this document, Perl is fully 64\-bit compliant on
HP-UX 11.00 and up for both cc\- and gcc builds. If you are about to
build a 64\-bit perl with \s-1GNU\s0 gcc, please read the gcc section carefully.
.PP
Should a user have the need for compiling Perl in the \s-1LP64\s0 environment,
use the \-Duse64bitall flag to Configure.  This will force Perl to be
compiled in a pure \s-1LP64\s0 environment (with the +DD64 flag for \s-1HP\s0 C\-ANSI-C,
with no additional options for \s-1GNU\s0 gcc 64\-bit on PA-RISC, and with
\&\-mlp64 for \s-1GNU\s0 gcc on Itanium).
If you want to compile Perl using gcc, you will have to get a version of
the compiler that supports 64\-bit operations.)
.PP
You can also use the \-Duse64bitint flag to Configure.  Although there
are some minor differences between compiling Perl with this flag versus
the \-Duse64bitall flag, they should not be noticeable from a Perl user's
perspective. When configuring \-Duse64bitint using a 64bit gcc on a
pa-risc architecture, \-Duse64bitint is silently promoted to \-Duse64bitall.
.PP
In both cases, it is strongly recommended that you use these flags when
you run Configure.  If you do not use do this, but later answer the
questions about 64\-bit numbers when Configure asks you, you may get a
configuration that cannot be compiled, or that does not function as
expected.
.SS "Oracle on HP-UX"
.IX Subsection "Oracle on HP-UX"
Using perl to connect to Oracle databases through \s-1DBI\s0 and DBD::Oracle
has caused a lot of people many headaches. Read \s-1README\s0.hpux in the
DBD::Oracle for much more information. The reason to mention it here
is that Oracle requires a perl built with libcl and libpthread, the
latter even when perl is build without threads. Building perl using
all defaults, but still enabling to build DBD::Oracle later on can be
achieved using
.PP
.Vb 1
\&  Configure \-A prepend:libswanted=\*(Aqcl pthread \*(Aq ...
.Ve
.PP
Do not forget the space before the trailing quote.
.PP
Also note that this does not (yet) work with all configurations,
it is known to fail with 64\-bit versions of \s-1GCC.\s0
.SS "\s-1GDBM\s0 and Threads on HP-UX"
.IX Subsection "GDBM and Threads on HP-UX"
If you attempt to compile Perl with (\s-1POSIX\s0) threads on an 11.X system
and also link in the \s-1GDBM\s0 library, then Perl will immediately core dump
when it starts up.  The only workaround at this point is to relink the
\&\s-1GDBM\s0 library under 11.X, then relink it into Perl.
.PP
the error might show something like:
.PP
Pthread internal error: message: _\|\fI_libc_reinit()\fR failed, file: ../pthreads/pthread.c, line: 1096
Return Pointer is 0xc082bf33
sh: 5345 Quit(coredump)
.PP
and Configure will give up.
.SS "\s-1NFS\s0 filesystems and \fIutime\fP\|(2) on HP-UX"
.IX Subsection "NFS filesystems and utime on HP-UX"
If you are compiling Perl on a remotely-mounted \s-1NFS\s0 filesystem, the test
io/fs.t may fail on test #18.  This appears to be a bug in HP-UX and no
fix is currently available.
.SS "HP-UX Kernel Parameters (maxdsiz) for Compiling Perl"
.IX Subsection "HP-UX Kernel Parameters (maxdsiz) for Compiling Perl"
By default, HP-UX comes configured with a maximum data segment size of
64MB.  This is too small to correctly compile Perl with the maximum
optimization levels.  You can increase the size of the maxdsiz kernel
parameter through the use of \s-1SAM.\s0
.PP
When using the \s-1GUI\s0 version of \s-1SAM,\s0 click on the Kernel Configuration
icon, then the Configurable Parameters icon.  Scroll down and select
the maxdsiz line.  From the Actions menu, select the Modify Configurable
Parameter item.  Insert the new formula into the Formula/Value box.
Then follow the instructions to rebuild your kernel and reboot your
system.
.PP
In general, a value of 256MB (or \*(L"256*1024*1024\*(R") is sufficient for
Perl to compile at maximum optimization.
.SH "nss_delete core dump from op/pwent or op/grent"
.IX Header "nss_delete core dump from op/pwent or op/grent"
You may get a bus error core dump from the op/pwent or op/grent
tests. If compiled with \-g you will see a stack trace much like
the following:
.PP
.Vb 10
\&  #0  0xc004216c in  () from /usr/lib/libc.2
\&  #1  0xc00d7550 in _\|_nss_src_state_destr () from /usr/lib/libc.2
\&  #2  0xc00d7768 in _\|_nss_src_state_destr () from /usr/lib/libc.2
\&  #3  0xc00d78a8 in nss_delete () from /usr/lib/libc.2
\&  #4  0xc01126d8 in endpwent () from /usr/lib/libc.2
\&  #5  0xd1950 in Perl_pp_epwent () from ./perl
\&  #6  0x94d3c in Perl_runops_standard () from ./perl
\&  #7  0x23728 in S_run_body () from ./perl
\&  #8  0x23428 in perl_run () from ./perl
\&  #9  0x2005c in main () from ./perl
.Ve
.PP
The key here is the \f(CW\*(C`nss_delete\*(C'\fR call.  One workaround for this
bug seems to be to create add to the file \fI/etc/nsswitch.conf\fR
(at least) the following lines
.PP
.Vb 2
\&  group: files
\&  passwd: files
.Ve
.PP
Whether you are using \s-1NIS\s0 does not matter.  Amazingly enough,
the same bug also affects Solaris.
.ie n .SH "error: pasting "")"" and ""l"" does not give a valid preprocessing token"
.el .SH "error: pasting ``)'' and ``l'' does not give a valid preprocessing token"
.IX Header "error: pasting ) and l does not give a valid preprocessing token"
There seems to be a broken system header file in HP-UX 11.00 that
breaks perl building in 32bit mode with \s-1GNU\s0 gcc\-4.x causing this
error. The same file for HP-UX 11.11 (even though the file is older)
does not show this failure, and has the correct definition, so the
best fix is to patch the header to match:
.PP
.Vb 9
\& \-\-\- /usr/include/inttypes.h  2001\-04\-20 18:42:14 +0200
\& +++ /usr/include/inttypes.h  2000\-11\-14 09:00:00 +0200
\& @@ \-72,7 +72,7 @@
\&  #define UINT32_C(_\|_c)                   _\|_CONCAT_U_\|_(_\|_c)
\&  #else /* _\|_LP64 */
\&  #define INT32_C(_\|_c)                    _\|_CONCAT_\|_(_\|_c,l)
\& \-#define UINT32_C(_\|_c)                   _\|_CONCAT_\|_(_\|_CONCAT_U_\|_(_\|_c),l)
\& +#define UINT32_C(_\|_c)                   _\|_CONCAT_\|_(_\|_c,ul)
\&  #endif /* _\|_LP64 */
\&
\&  #define INT64_C(_\|_c)                    _\|_CONCAT_L_\|_(_\|_c,l)
.Ve
.SH "Miscellaneous"
.IX Header "Miscellaneous"
HP-UX 11 Y2K patch \*(L"Y2K\-1100 B.11.00.B0125 HP-UX Core \s-1OS\s0 Year 2000
Patch Bundle\*(R" has been reported to break the io/fs test #18 which
tests whether \fIutime()\fR can change timestamps.  The Y2K patch seems to
break \fIutime()\fR so that over \s-1NFS\s0 the timestamps do not get changed
(on local filesystems \fIutime()\fR still works). This has probably been
fixed on your system by now.
.SH "AUTHOR"
.IX Header "AUTHOR"
H.Merijn Brand <h.m.brand@xs4all.nl>
Jeff Okamoto <okamoto@corp.hp.com>
.PP
With much assistance regarding shared libraries from Marc Sabatella.
                                                                                                                                        osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perlhurd.1                                   0100644 0001750 0001750 00000013730 12566207441 022570  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLHURD 1"
.TH PERLHURD 1 "2013-11-04" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlhurd \- Perl version 5 on Hurd
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
If you want to use Perl on the Hurd, I recommend using the Debian
GNU/Hurd distribution ( see http://www.debian.org/ ), even if an
official, stable release has not yet been made.  The old \*(L"gnu\-0.2\*(R"
binary distribution will most certainly have additional problems.
.SS "Known Problems with Perl on Hurd"
.IX Subsection "Known Problems with Perl on Hurd"
The Perl test suite may still report some errors on the Hurd.  The
\&\*(L"lib/anydbm\*(R" and \*(L"pragma/warnings\*(R" tests will almost certainly fail.
Both failures are not really specific to the Hurd, as indicated by the
test suite output.
.PP
The socket tests may fail if the network is not configured.  You have
to make \*(L"/hurd/pfinet\*(R" the translator for \*(L"/servers/socket/2\*(R", giving
it the right arguments.  Try \*(L"/hurd/pfinet \-\-help\*(R" for more
information.
.PP
Here are the statistics for Perl 5.005_62 on my system:
.PP
.Vb 4
\& Failed Test  Status Wstat Total Fail  Failed  List of failed
\& \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\& lib/anydbm.t                 12    1   8.33%  12
\& pragma/warnings             333    1   0.30%  215
\&
\& 8 tests and 24 subtests skipped.
\& Failed 2/229 test scripts, 99.13% okay. 2/10850 subtests failed, 99.98% okay.
.Ve
.PP
There are quite a few systems out there that do worse!
.PP
However, since I am running a very recent Hurd snapshot, in which a lot of
bugs that were exposed by the Perl test suite have been fixed, you may
encounter more failures.  Likely candidates are: \*(L"op/stat\*(R", \*(L"lib/io_pipe\*(R",
\&\*(L"lib/io_sock\*(R", \*(L"lib/io_udp\*(R" and \*(L"lib/time\*(R".
.PP
In any way, if you're seeing failures beyond those mentioned in this
document, please consider upgrading to the latest Hurd before reporting
the failure as a bug.
.SH "AUTHOR"
.IX Header "AUTHOR"
Mark Kettenis <kettenis@gnu.org>
.PP
Last Updated: Fri, 29 Oct 1999 22:50:30 +0200
                                        osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perlhurd5.16.1                               0100644 0001750 0001750 00000013407 12566207420 023100  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLHURD 1"
.TH PERLHURD 1 "2013-03-04" "perl v5.16.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlhurd \- Perl version 5 on Hurd
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
If you want to use Perl on the Hurd, I recommend using the Debian
GNU/Hurd distribution ( see http://www.debian.org/ ), even if an
official, stable release has not yet been made.  The old \*(L"gnu\-0.2\*(R"
binary distribution will most certainly have additional problems.
.SS "Known Problems with Perl on Hurd"
.IX Subsection "Known Problems with Perl on Hurd"
The Perl test suite may still report some errors on the Hurd.  The
\&\*(L"lib/anydbm\*(R" and \*(L"pragma/warnings\*(R" tests will almost certainly fail.
Both failures are not really specific to the Hurd, as indicated by the
test suite output.
.PP
The socket tests may fail if the network is not configured.  You have
to make \*(L"/hurd/pfinet\*(R" the translator for \*(L"/servers/socket/2\*(R", giving
it the right arguments.  Try \*(L"/hurd/pfinet \-\-help\*(R" for more
information.
.PP
Here are the statistics for Perl 5.005_62 on my system:
.PP
.Vb 4
\& Failed Test  Status Wstat Total Fail  Failed  List of failed
\& \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\& lib/anydbm.t                 12    1   8.33%  12
\& pragma/warnings             333    1   0.30%  215
\&
\& 8 tests and 24 subtests skipped.
\& Failed 2/229 test scripts, 99.13% okay. 2/10850 subtests failed, 99.98% okay.
.Ve
.PP
There are quite a few systems out there that do worse!
.PP
However, since I am running a very recent Hurd snapshot, in which a lot of
bugs that were exposed by the Perl test suite have been fixed, you may
encounter more failures.  Likely candidates are: \*(L"op/stat\*(R", \*(L"lib/io_pipe\*(R",
\&\*(L"lib/io_sock\*(R", \*(L"lib/io_udp\*(R" and \*(L"lib/time\*(R".
.PP
In any way, if you're seeing failures beyond those mentioned in this
document, please consider upgrading to the latest Hurd before reporting
the failure as a bug.
.SH "AUTHOR"
.IX Header "AUTHOR"
Mark Kettenis <kettenis@gnu.org>
.PP
Last Updated: Fri, 29 Oct 1999 22:50:30 +0200
                                                                                                                                                                                                                                                         osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perlhurd5.18.1                               0100644 0001750 0001750 00000013730 12566207441 023104  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLHURD 1"
.TH PERLHURD 1 "2013-11-04" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlhurd \- Perl version 5 on Hurd
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
If you want to use Perl on the Hurd, I recommend using the Debian
GNU/Hurd distribution ( see http://www.debian.org/ ), even if an
official, stable release has not yet been made.  The old \*(L"gnu\-0.2\*(R"
binary distribution will most certainly have additional problems.
.SS "Known Problems with Perl on Hurd"
.IX Subsection "Known Problems with Perl on Hurd"
The Perl test suite may still report some errors on the Hurd.  The
\&\*(L"lib/anydbm\*(R" and \*(L"pragma/warnings\*(R" tests will almost certainly fail.
Both failures are not really specific to the Hurd, as indicated by the
test suite output.
.PP
The socket tests may fail if the network is not configured.  You have
to make \*(L"/hurd/pfinet\*(R" the translator for \*(L"/servers/socket/2\*(R", giving
it the right arguments.  Try \*(L"/hurd/pfinet \-\-help\*(R" for more
information.
.PP
Here are the statistics for Perl 5.005_62 on my system:
.PP
.Vb 4
\& Failed Test  Status Wstat Total Fail  Failed  List of failed
\& \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\& lib/anydbm.t                 12    1   8.33%  12
\& pragma/warnings             333    1   0.30%  215
\&
\& 8 tests and 24 subtests skipped.
\& Failed 2/229 test scripts, 99.13% okay. 2/10850 subtests failed, 99.98% okay.
.Ve
.PP
There are quite a few systems out there that do worse!
.PP
However, since I am running a very recent Hurd snapshot, in which a lot of
bugs that were exposed by the Perl test suite have been fixed, you may
encounter more failures.  Likely candidates are: \*(L"op/stat\*(R", \*(L"lib/io_pipe\*(R",
\&\*(L"lib/io_sock\*(R", \*(L"lib/io_udp\*(R" and \*(L"lib/time\*(R".
.PP
In any way, if you're seeing failures beyond those mentioned in this
document, please consider upgrading to the latest Hurd before reporting
the failure as a bug.
.SH "AUTHOR"
.IX Header "AUTHOR"
Mark Kettenis <kettenis@gnu.org>
.PP
Last Updated: Fri, 29 Oct 1999 22:50:30 +0200
                                        osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perlintern.1                                 0100644 0001750 0001750 00000206272 12566207441 023132  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLINTERN 1"
.TH PERLINTERN 1 "2015-08-22" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlintern \- autogenerated documentation of purely internal
		 Perl functions
.SH "DESCRIPTION"
.IX Xref "internal Perl functions interpreter functions"
.IX Header "DESCRIPTION"
This file is the autogenerated documentation of functions in the
Perl interpreter that are documented using Perl's internal documentation
format but are not marked as part of the Perl \s-1API.\s0 In other words,
\&\fBthey are not for use in extensions\fR!
.SH "Compile-time scope hooks"
.IX Header "Compile-time scope hooks"
.IP "BhkENTRY" 8
.IX Xref "BhkENTRY"
.IX Item "BhkENTRY"
Return an entry from the \s-1BHK\s0 structure. \fIwhich\fR is a preprocessor token
indicating which entry to return. If the appropriate flag is not set
this will return \s-1NULL.\s0 The type of the return value depends on which
entry you ask for.
.Sp
\&\s-1NOTE:\s0 this function is experimental and may change or be
removed without notice.
.Sp
.Vb 1
\&        void *  BhkENTRY(BHK *hk, which)
.Ve
.IP "BhkFLAGS" 8
.IX Xref "BhkFLAGS"
.IX Item "BhkFLAGS"
Return the \s-1BHK\s0's flags.
.Sp
\&\s-1NOTE:\s0 this function is experimental and may change or be
removed without notice.
.Sp
.Vb 1
\&        U32     BhkFLAGS(BHK *hk)
.Ve
.IP "\s-1CALL_BLOCK_HOOKS \s0" 8
.IX Xref "CALL_BLOCK_HOOKS"
.IX Item "CALL_BLOCK_HOOKS "
Call all the registered block hooks for type \fIwhich\fR. \fIwhich\fR is a
preprocessing token; the type of \fIarg\fR depends on \fIwhich\fR.
.Sp
\&\s-1NOTE:\s0 this function is experimental and may change or be
removed without notice.
.Sp
.Vb 1
\&        void    CALL_BLOCK_HOOKS(which, arg)
.Ve
.SH "CV reference counts and CvOUTSIDE"
.IX Header "CV reference counts and CvOUTSIDE"
.IP "CvWEAKOUTSIDE" 8
.IX Xref "CvWEAKOUTSIDE"
.IX Item "CvWEAKOUTSIDE"
Each \s-1CV\s0 has a pointer, \f(CW\*(C`CvOUTSIDE()\*(C'\fR, to its lexically enclosing
\&\s-1CV \s0(if any). Because pointers to anonymous sub prototypes are
stored in \f(CW\*(C`&\*(C'\fR pad slots, it is a possible to get a circular reference,
with the parent pointing to the child and vice-versa. To avoid the
ensuing memory leak, we do not increment the reference count of the \s-1CV\s0
pointed to by \f(CW\*(C`CvOUTSIDE\*(C'\fR in the \fIone specific instance\fR that the parent
has a \f(CW\*(C`&\*(C'\fR pad slot pointing back to us. In this case, we set the
\&\f(CW\*(C`CvWEAKOUTSIDE\*(C'\fR flag in the child. This allows us to determine under what
circumstances we should decrement the refcount of the parent when freeing
the child.
.Sp
There is a further complication with non-closure anonymous subs (i.e. those
that do not refer to any lexicals outside that sub). In this case, the
anonymous prototype is shared rather than being cloned. This has the
consequence that the parent may be freed while there are still active
children, eg
.Sp
.Vb 1
\&    BEGIN { $a = sub { eval \*(Aq$x\*(Aq } }
.Ve
.Sp
In this case, the \s-1BEGIN\s0 is freed immediately after execution since there
are no active references to it: the anon sub prototype has
\&\f(CW\*(C`CvWEAKOUTSIDE\*(C'\fR set since it's not a closure, and \f(CW$a\fR points to the same
\&\s-1CV,\s0 so it doesn't contribute to \s-1BEGIN\s0's refcount either.  When \f(CW$a\fR is
executed, the \f(CW\*(C`eval \*(Aq$x\*(Aq\*(C'\fR causes the chain of \f(CW\*(C`CvOUTSIDE\*(C'\fRs to be followed,
and the freed \s-1BEGIN\s0 is accessed.
.Sp
To avoid this, whenever a \s-1CV\s0 and its associated pad is freed, any
\&\f(CW\*(C`&\*(C'\fR entries in the pad are explicitly removed from the pad, and if the
refcount of the pointed-to anon sub is still positive, then that
child's \f(CW\*(C`CvOUTSIDE\*(C'\fR is set to point to its grandparent. This will only
occur in the single specific case of a non-closure anon prototype
having one or more active references (such as \f(CW$a\fR above).
.Sp
One other thing to consider is that a \s-1CV\s0 may be merely undefined
rather than freed, eg \f(CW\*(C`undef &foo\*(C'\fR. In this case, its refcount may
not have reached zero, but we still delete its pad and its \f(CW\*(C`CvROOT\*(C'\fR etc.
Since various children may still have their \f(CW\*(C`CvOUTSIDE\*(C'\fR pointing at this
undefined \s-1CV,\s0 we keep its own \f(CW\*(C`CvOUTSIDE\*(C'\fR for the time being, so that
the chain of lexical scopes is unbroken. For example, the following
should print 123:
.Sp
.Vb 5
\&    my $x = 123;
\&    sub tmp { sub { eval \*(Aq$x\*(Aq } }
\&    my $a = tmp();
\&    undef &tmp;
\&    print  $a\->();
\&
\&        bool    CvWEAKOUTSIDE(CV *cv)
.Ve
.SH "Embedding Functions"
.IX Header "Embedding Functions"
.IP "cv_dump" 8
.IX Xref "cv_dump"
.IX Item "cv_dump"
dump the contents of a \s-1CV\s0
.Sp
.Vb 1
\&        void    cv_dump(CV *cv, const char *title)
.Ve
.IP "cv_forget_slab" 8
.IX Xref "cv_forget_slab"
.IX Item "cv_forget_slab"
When a \s-1CV\s0 has a reference count on its slab (CvSLABBED), it is responsible
for making sure it is freed.  (Hence, no two CVs should ever have a
reference count on the same slab.)  The \s-1CV\s0 only needs to reference the slab
during compilation.  Once it is compiled and CvROOT attached, it has
finished its job, so it can forget the slab.
.Sp
.Vb 1
\&        void    cv_forget_slab(CV *cv)
.Ve
.IP "do_dump_pad" 8
.IX Xref "do_dump_pad"
.IX Item "do_dump_pad"
Dump the contents of a padlist
.Sp
.Vb 2
\&        void    do_dump_pad(I32 level, PerlIO *file,
\&                            PADLIST *padlist, int full)
.Ve
.IP "intro_my" 8
.IX Xref "intro_my"
.IX Item "intro_my"
\&\*(L"Introduce\*(R" my variables to visible status.  This is called during parsing
at the end of each statement to make lexical variables visible to
subsequent statements.
.Sp
.Vb 1
\&        U32     intro_my()
.Ve
.IP "padlist_dup" 8
.IX Xref "padlist_dup"
.IX Item "padlist_dup"
Duplicates a pad.
.Sp
.Vb 2
\&        PADLIST * padlist_dup(PADLIST *srcpad,
\&                              CLONE_PARAMS *param)
.Ve
.IP "pad_alloc_name" 8
.IX Xref "pad_alloc_name"
.IX Item "pad_alloc_name"
Allocates a place in the currently-compiling
pad (via \*(L"pad_alloc\*(R" in perlapi) and
then stores a name for that entry.  \fInamesv\fR is adopted and becomes the
name entry; it must already contain the name string and be sufficiently
upgraded.  \fItypestash\fR and \fIourstash\fR and the \f(CW\*(C`padadd_STATE\*(C'\fR flag get
added to \fInamesv\fR.  None of the other
processing of \*(L"pad_add_name_pvn\*(R" in perlapi
is done.  Returns the offset of the allocated pad slot.
.Sp
.Vb 2
\&        PADOFFSET pad_alloc_name(SV *namesv, U32 flags,
\&                                 HV *typestash, HV *ourstash)
.Ve
.IP "pad_block_start" 8
.IX Xref "pad_block_start"
.IX Item "pad_block_start"
Update the pad compilation state variables on entry to a new block.
.Sp
.Vb 1
\&        void    pad_block_start(int full)
.Ve
.IP "pad_check_dup" 8
.IX Xref "pad_check_dup"
.IX Item "pad_check_dup"
Check for duplicate declarations: report any of:
.Sp
.Vb 3
\&     * a my in the current scope with the same name;
\&     * an our (anywhere in the pad) with the same name and the
\&       same stash as C<ourstash>
.Ve
.Sp
\&\f(CW\*(C`is_our\*(C'\fR indicates that the name to check is an 'our' declaration.
.Sp
.Vb 2
\&        void    pad_check_dup(SV *name, U32 flags,
\&                              const HV *ourstash)
.Ve
.IP "pad_findlex" 8
.IX Xref "pad_findlex"
.IX Item "pad_findlex"
Find a named lexical anywhere in a chain of nested pads. Add fake entries
in the inner pads if it's found in an outer one.
.Sp
Returns the offset in the bottom pad of the lex or the fake lex.
cv is the \s-1CV\s0 in which to start the search, and seq is the current cop_seq
to match against. If warn is true, print appropriate warnings.  The out_*
vars return values, and so are pointers to where the returned values
should be stored. out_capture, if non-null, requests that the innermost
instance of the lexical is captured; out_name_sv is set to the innermost
matched namesv or fake namesv; out_flags returns the flags normally
associated with the \s-1IVX\s0 field of a fake namesv.
.Sp
Note that \fIpad_findlex()\fR is recursive; it recurses up the chain of CVs,
then comes back down, adding fake entries as it goes. It has to be this way
because fake namesvs in anon protoypes have to store in xlow the index into
the parent pad.
.Sp
.Vb 5
\&        PADOFFSET pad_findlex(const char *namepv,
\&                              STRLEN namelen, U32 flags,
\&                              const CV* cv, U32 seq, int warn,
\&                              SV** out_capture,
\&                              SV** out_name_sv, int *out_flags)
.Ve
.IP "pad_fixup_inner_anons" 8
.IX Xref "pad_fixup_inner_anons"
.IX Item "pad_fixup_inner_anons"
For any anon CVs in the pad, change CvOUTSIDE of that \s-1CV\s0 from
old_cv to new_cv if necessary. Needed when a newly-compiled \s-1CV\s0 has to be
moved to a pre-existing \s-1CV\s0 struct.
.Sp
.Vb 2
\&        void    pad_fixup_inner_anons(PADLIST *padlist,
\&                                      CV *old_cv, CV *new_cv)
.Ve
.IP "pad_free" 8
.IX Xref "pad_free"
.IX Item "pad_free"
Free the \s-1SV\s0 at offset po in the current pad.
.Sp
.Vb 1
\&        void    pad_free(PADOFFSET po)
.Ve
.IP "pad_leavemy" 8
.IX Xref "pad_leavemy"
.IX Item "pad_leavemy"
Cleanup at end of scope during compilation: set the max seq number for
lexicals in this scope and warn of any lexicals that never got introduced.
.Sp
.Vb 1
\&        void    pad_leavemy()
.Ve
.IP "pad_push" 8
.IX Xref "pad_push"
.IX Item "pad_push"
Push a new pad frame onto the padlist, unless there's already a pad at
this depth, in which case don't bother creating a new one.  Then give
the new pad an \f(CW@_\fR in slot zero.
.Sp
.Vb 1
\&        void    pad_push(PADLIST *padlist, int depth)
.Ve
.IP "pad_reset" 8
.IX Xref "pad_reset"
.IX Item "pad_reset"
Mark all the current temporaries for reuse
.Sp
.Vb 1
\&        void    pad_reset()
.Ve
.IP "pad_swipe" 8
.IX Xref "pad_swipe"
.IX Item "pad_swipe"
Abandon the tmp in the current pad at offset po and replace with a
new one.
.Sp
.Vb 1
\&        void    pad_swipe(PADOFFSET po, bool refadjust)
.Ve
.SH "Functions in file op.c"
.IX Header "Functions in file op.c"
.IP "core_prototype" 8
.IX Xref "core_prototype"
.IX Item "core_prototype"
This function assigns the prototype of the named core function to \f(CW\*(C`sv\*(C'\fR, or
to a new mortal \s-1SV\s0 if \f(CW\*(C`sv\*(C'\fR is \s-1NULL. \s0 It returns the modified \f(CW\*(C`sv\*(C'\fR, or
\&\s-1NULL\s0 if the core function has no prototype.  \f(CW\*(C`code\*(C'\fR is a code as returned
by \f(CW\*(C`keyword()\*(C'\fR.  It must not be equal to 0 or \-KEY_CORE.
.Sp
.Vb 3
\&        SV *    core_prototype(SV *sv, const char *name,
\&                               const int code,
\&                               int * const opnum)
.Ve
.SH "Functions in file pp_ctl.c"
.IX Header "Functions in file pp_ctl.c"
.IP "docatch" 8
.IX Xref "docatch"
.IX Item "docatch"
Check for the cases 0 or 3 of cur_env.je_ret, only used inside an eval context.
.Sp
0 is used as continue inside eval,
.Sp
3 is used for a die caught by an inner eval \- continue inner loop
.Sp
See cop.h: je_mustcatch, when set at any runlevel to \s-1TRUE,\s0 means eval ops must
establish a local jmpenv to handle exception traps.
.Sp
.Vb 1
\&        OP*     docatch(OP *o)
.Ve
.SH "GV Functions"
.IX Header "GV Functions"
.IP "gv_try_downgrade" 8
.IX Xref "gv_try_downgrade"
.IX Item "gv_try_downgrade"
If the typeglob \f(CW\*(C`gv\*(C'\fR can be expressed more succinctly, by having
something other than a real \s-1GV\s0 in its place in the stash, replace it
with the optimised form.  Basic requirements for this are that \f(CW\*(C`gv\*(C'\fR
is a real typeglob, is sufficiently ordinary, and is only referenced
from its package.  This function is meant to be used when a \s-1GV\s0 has been
looked up in part to see what was there, causing upgrading, but based
on what was found it turns out that the real \s-1GV\s0 isn't required after all.
.Sp
If \f(CW\*(C`gv\*(C'\fR is a completely empty typeglob, it is deleted from the stash.
.Sp
If \f(CW\*(C`gv\*(C'\fR is a typeglob containing only a sufficiently-ordinary constant
sub, the typeglob is replaced with a scalar-reference placeholder that
more compactly represents the same thing.
.Sp
\&\s-1NOTE:\s0 this function is experimental and may change or be
removed without notice.
.Sp
.Vb 1
\&        void    gv_try_downgrade(GV* gv)
.Ve
.SH "Hash Manipulation Functions"
.IX Header "Hash Manipulation Functions"
.IP "hv_ename_add" 8
.IX Xref "hv_ename_add"
.IX Item "hv_ename_add"
Adds a name to a stash's internal list of effective names.  See
\&\f(CW\*(C`hv_ename_delete\*(C'\fR.
.Sp
This is called when a stash is assigned to a new location in the symbol
table.
.Sp
.Vb 2
\&        void    hv_ename_add(HV *hv, const char *name, U32 len,
\&                             U32 flags)
.Ve
.IP "hv_ename_delete" 8
.IX Xref "hv_ename_delete"
.IX Item "hv_ename_delete"
Removes a name from a stash's internal list of effective names.  If this is
the name returned by \f(CW\*(C`HvENAME\*(C'\fR, then another name in the list will take
its place (\f(CW\*(C`HvENAME\*(C'\fR will use it).
.Sp
This is called when a stash is deleted from the symbol table.
.Sp
.Vb 2
\&        void    hv_ename_delete(HV *hv, const char *name,
\&                                U32 len, U32 flags)
.Ve
.IP "refcounted_he_chain_2hv" 8
.IX Xref "refcounted_he_chain_2hv"
.IX Item "refcounted_he_chain_2hv"
Generates and returns a \f(CW\*(C`HV *\*(C'\fR representing the content of a
\&\f(CW\*(C`refcounted_he\*(C'\fR chain.
\&\fIflags\fR is currently unused and must be zero.
.Sp
.Vb 3
\&        HV *    refcounted_he_chain_2hv(
\&                    const struct refcounted_he *c, U32 flags
\&                )
.Ve
.IP "refcounted_he_fetch_pv" 8
.IX Xref "refcounted_he_fetch_pv"
.IX Item "refcounted_he_fetch_pv"
Like \*(L"refcounted_he_fetch_pvn\*(R", but takes a nul-terminated string
instead of a string/length pair.
.Sp
.Vb 4
\&        SV *    refcounted_he_fetch_pv(
\&                    const struct refcounted_he *chain,
\&                    const char *key, U32 hash, U32 flags
\&                )
.Ve
.IP "refcounted_he_fetch_pvn" 8
.IX Xref "refcounted_he_fetch_pvn"
.IX Item "refcounted_he_fetch_pvn"
Search along a \f(CW\*(C`refcounted_he\*(C'\fR chain for an entry with the key specified
by \fIkeypv\fR and \fIkeylen\fR.  If \fIflags\fR has the \f(CW\*(C`REFCOUNTED_HE_KEY_UTF8\*(C'\fR
bit set, the key octets are interpreted as \s-1UTF\-8,\s0 otherwise they
are interpreted as Latin\-1.  \fIhash\fR is a precomputed hash of the key
string, or zero if it has not been precomputed.  Returns a mortal scalar
representing the value associated with the key, or \f(CW&PL_sv_placeholder\fR
if there is no value associated with the key.
.Sp
.Vb 5
\&        SV *    refcounted_he_fetch_pvn(
\&                    const struct refcounted_he *chain,
\&                    const char *keypv, STRLEN keylen, U32 hash,
\&                    U32 flags
\&                )
.Ve
.IP "refcounted_he_fetch_pvs" 8
.IX Xref "refcounted_he_fetch_pvs"
.IX Item "refcounted_he_fetch_pvs"
Like \*(L"refcounted_he_fetch_pvn\*(R", but takes a literal string instead of
a string/length pair, and no precomputed hash.
.Sp
.Vb 4
\&        SV *    refcounted_he_fetch_pvs(
\&                    const struct refcounted_he *chain,
\&                    const char *key, U32 flags
\&                )
.Ve
.IP "refcounted_he_fetch_sv" 8
.IX Xref "refcounted_he_fetch_sv"
.IX Item "refcounted_he_fetch_sv"
Like \*(L"refcounted_he_fetch_pvn\*(R", but takes a Perl scalar instead of a
string/length pair.
.Sp
.Vb 4
\&        SV *    refcounted_he_fetch_sv(
\&                    const struct refcounted_he *chain, SV *key,
\&                    U32 hash, U32 flags
\&                )
.Ve
.IP "refcounted_he_free" 8
.IX Xref "refcounted_he_free"
.IX Item "refcounted_he_free"
Decrements the reference count of a \f(CW\*(C`refcounted_he\*(C'\fR by one.  If the
reference count reaches zero the structure's memory is freed, which
(recursively) causes a reduction of its parent \f(CW\*(C`refcounted_he\*(C'\fR's
reference count.  It is safe to pass a null pointer to this function:
no action occurs in this case.
.Sp
.Vb 1
\&        void    refcounted_he_free(struct refcounted_he *he)
.Ve
.IP "refcounted_he_inc" 8
.IX Xref "refcounted_he_inc"
.IX Item "refcounted_he_inc"
Increment the reference count of a \f(CW\*(C`refcounted_he\*(C'\fR.  The pointer to the
\&\f(CW\*(C`refcounted_he\*(C'\fR is also returned.  It is safe to pass a null pointer
to this function: no action occurs and a null pointer is returned.
.Sp
.Vb 3
\&        struct refcounted_he * refcounted_he_inc(
\&                                   struct refcounted_he *he
\&                               )
.Ve
.IP "refcounted_he_new_pv" 8
.IX Xref "refcounted_he_new_pv"
.IX Item "refcounted_he_new_pv"
Like \*(L"refcounted_he_new_pvn\*(R", but takes a nul-terminated string instead
of a string/length pair.
.Sp
.Vb 5
\&        struct refcounted_he * refcounted_he_new_pv(
\&                                   struct refcounted_he *parent,
\&                                   const char *key, U32 hash,
\&                                   SV *value, U32 flags
\&                               )
.Ve
.IP "refcounted_he_new_pvn" 8
.IX Xref "refcounted_he_new_pvn"
.IX Item "refcounted_he_new_pvn"
Creates a new \f(CW\*(C`refcounted_he\*(C'\fR.  This consists of a single key/value
pair and a reference to an existing \f(CW\*(C`refcounted_he\*(C'\fR chain (which may
be empty), and thus forms a longer chain.  When using the longer chain,
the new key/value pair takes precedence over any entry for the same key
further along the chain.
.Sp
The new key is specified by \fIkeypv\fR and \fIkeylen\fR.  If \fIflags\fR has
the \f(CW\*(C`REFCOUNTED_HE_KEY_UTF8\*(C'\fR bit set, the key octets are interpreted
as \s-1UTF\-8,\s0 otherwise they are interpreted as Latin\-1.  \fIhash\fR is
a precomputed hash of the key string, or zero if it has not been
precomputed.
.Sp
\&\fIvalue\fR is the scalar value to store for this key.  \fIvalue\fR is copied
by this function, which thus does not take ownership of any reference
to it, and later changes to the scalar will not be reflected in the
value visible in the \f(CW\*(C`refcounted_he\*(C'\fR.  Complex types of scalar will not
be stored with referential integrity, but will be coerced to strings.
\&\fIvalue\fR may be either null or \f(CW&PL_sv_placeholder\fR to indicate that no
value is to be associated with the key; this, as with any non-null value,
takes precedence over the existence of a value for the key further along
the chain.
.Sp
\&\fIparent\fR points to the rest of the \f(CW\*(C`refcounted_he\*(C'\fR chain to be
attached to the new \f(CW\*(C`refcounted_he\*(C'\fR.  This function takes ownership
of one reference to \fIparent\fR, and returns one reference to the new
\&\f(CW\*(C`refcounted_he\*(C'\fR.
.Sp
.Vb 6
\&        struct refcounted_he * refcounted_he_new_pvn(
\&                                   struct refcounted_he *parent,
\&                                   const char *keypv,
\&                                   STRLEN keylen, U32 hash,
\&                                   SV *value, U32 flags
\&                               )
.Ve
.IP "refcounted_he_new_pvs" 8
.IX Xref "refcounted_he_new_pvs"
.IX Item "refcounted_he_new_pvs"
Like \*(L"refcounted_he_new_pvn\*(R", but takes a literal string instead of
a string/length pair, and no precomputed hash.
.Sp
.Vb 5
\&        struct refcounted_he * refcounted_he_new_pvs(
\&                                   struct refcounted_he *parent,
\&                                   const char *key, SV *value,
\&                                   U32 flags
\&                               )
.Ve
.IP "refcounted_he_new_sv" 8
.IX Xref "refcounted_he_new_sv"
.IX Item "refcounted_he_new_sv"
Like \*(L"refcounted_he_new_pvn\*(R", but takes a Perl scalar instead of a
string/length pair.
.Sp
.Vb 5
\&        struct refcounted_he * refcounted_he_new_sv(
\&                                   struct refcounted_he *parent,
\&                                   SV *key, U32 hash, SV *value,
\&                                   U32 flags
\&                               )
.Ve
.SH "IO Functions"
.IX Header "IO Functions"
.IP "start_glob" 8
.IX Xref "start_glob"
.IX Item "start_glob"
Function called by \f(CW\*(C`do_readline\*(C'\fR to spawn a glob (or do the glob inside
perl on \s-1VMS\s0). This code used to be inline, but now perl uses \f(CW\*(C`File::Glob\*(C'\fR
this glob starter is only used by miniperl during the build process.
Moving it away shrinks pp_hot.c; shrinking pp_hot.c helps speed perl up.
.Sp
\&\s-1NOTE:\s0 this function is experimental and may change or be
removed without notice.
.Sp
.Vb 1
\&        PerlIO* start_glob(SV *tmpglob, IO *io)
.Ve
.SH "Magical Functions"
.IX Header "Magical Functions"
.IP "magic_clearhint" 8
.IX Xref "magic_clearhint"
.IX Item "magic_clearhint"
Triggered by a delete from %^H, records the key to
\&\f(CW\*(C`PL_compiling.cop_hints_hash\*(C'\fR.
.Sp
.Vb 1
\&        int     magic_clearhint(SV* sv, MAGIC* mg)
.Ve
.IP "magic_clearhints" 8
.IX Xref "magic_clearhints"
.IX Item "magic_clearhints"
Triggered by clearing %^H, resets \f(CW\*(C`PL_compiling.cop_hints_hash\*(C'\fR.
.Sp
.Vb 1
\&        int     magic_clearhints(SV* sv, MAGIC* mg)
.Ve
.IP "magic_methcall" 8
.IX Xref "magic_methcall"
.IX Item "magic_methcall"
Invoke a magic method (like \s-1FETCH\s0).
.Sp
\&\f(CW\*(C`sv\*(C'\fR and \f(CW\*(C`mg\*(C'\fR are the tied thingy and the tie magic.
.Sp
\&\f(CW\*(C`meth\*(C'\fR is the name of the method to call.
.Sp
\&\f(CW\*(C`argc\*(C'\fR is the number of args (in addition to \f(CW$self\fR) to pass to the method.
.Sp
The \f(CW\*(C`flags\*(C'\fR can be:
.Sp
.Vb 4
\&    G_DISCARD     invoke method with G_DISCARD flag and don\*(Aqt
\&                  return a value
\&    G_UNDEF_FILL  fill the stack with argc pointers to
\&                  PL_sv_undef
.Ve
.Sp
The arguments themselves are any values following the \f(CW\*(C`flags\*(C'\fR argument.
.Sp
Returns the \s-1SV \s0(if any) returned by the method, or \s-1NULL\s0 on failure.
.Sp
.Vb 3
\&        SV*     magic_methcall(SV *sv, const MAGIC *mg,
\&                               const char *meth, U32 flags,
\&                               U32 argc, ...)
.Ve
.IP "magic_sethint" 8
.IX Xref "magic_sethint"
.IX Item "magic_sethint"
Triggered by a store to %^H, records the key/value pair to
\&\f(CW\*(C`PL_compiling.cop_hints_hash\*(C'\fR.  It is assumed that hints aren't storing
anything that would need a deep copy.  Maybe we should warn if we find a
reference.
.Sp
.Vb 1
\&        int     magic_sethint(SV* sv, MAGIC* mg)
.Ve
.IP "mg_localize" 8
.IX Xref "mg_localize"
.IX Item "mg_localize"
Copy some of the magic from an existing \s-1SV\s0 to new localized version of that
\&\s-1SV.\s0 Container magic (eg \f(CW%ENV\fR, \f(CW$1\fR, tie) gets copied, value magic doesn't (eg
taint, pos).
.Sp
If setmagic is false then no set magic will be called on the new (empty) \s-1SV.\s0
This typically means that assignment will soon follow (e.g. 'local \f(CW$x\fR = \f(CW$y\fR'),
and that will handle the magic.
.Sp
.Vb 1
\&        void    mg_localize(SV* sv, SV* nsv, bool setmagic)
.Ve
.SH "MRO Functions"
.IX Header "MRO Functions"
.IP "mro_get_linear_isa_dfs" 8
.IX Xref "mro_get_linear_isa_dfs"
.IX Item "mro_get_linear_isa_dfs"
Returns the Depth-First Search linearization of \f(CW@ISA\fR
the given stash.  The return value is a read-only AV*.
\&\f(CW\*(C`level\*(C'\fR should be 0 (it is used internally in this
function's recursion).
.Sp
You are responsible for \f(CW\*(C`SvREFCNT_inc()\*(C'\fR on the
return value if you plan to store it anywhere
semi-permanently (otherwise it might be deleted
out from under you the next time the cache is
invalidated).
.Sp
.Vb 1
\&        AV*     mro_get_linear_isa_dfs(HV* stash, U32 level)
.Ve
.IP "mro_isa_changed_in" 8
.IX Xref "mro_isa_changed_in"
.IX Item "mro_isa_changed_in"
Takes the necessary steps (cache invalidations, mostly)
when the \f(CW@ISA\fR of the given package has changed.  Invoked
by the \f(CW\*(C`setisa\*(C'\fR magic, should not need to invoke directly.
.Sp
.Vb 1
\&        void    mro_isa_changed_in(HV* stash)
.Ve
.IP "mro_package_moved" 8
.IX Xref "mro_package_moved"
.IX Item "mro_package_moved"
Call this function to signal to a stash that it has been assigned to
another spot in the stash hierarchy.  \f(CW\*(C`stash\*(C'\fR is the stash that has been
assigned. \f(CW\*(C`oldstash\*(C'\fR is the stash it replaces, if any.  \f(CW\*(C`gv\*(C'\fR is the glob
that is actually being assigned to.
.Sp
This can also be called with a null first argument to
indicate that \f(CW\*(C`oldstash\*(C'\fR has been deleted.
.Sp
This function invalidates isa caches on the old stash, on all subpackages
nested inside it, and on the subclasses of all those, including
non-existent packages that have corresponding entries in \f(CW\*(C`stash\*(C'\fR.
.Sp
It also sets the effective names (\f(CW\*(C`HvENAME\*(C'\fR) on all the stashes as
appropriate.
.Sp
If the \f(CW\*(C`gv\*(C'\fR is present and is not in the symbol table, then this function
simply returns.  This checked will be skipped if \f(CW\*(C`flags & 1\*(C'\fR.
.Sp
.Vb 4
\&        void    mro_package_moved(HV * const stash,
\&                                  HV * const oldstash,
\&                                  const GV * const gv,
\&                                  U32 flags)
.Ve
.SH "Optree Manipulation Functions"
.IX Header "Optree Manipulation Functions"
.IP "finalize_optree" 8
.IX Xref "finalize_optree"
.IX Item "finalize_optree"
This function finalizes the optree. Should be called directly after
the complete optree is built. It does some additional
checking which can't be done in the normal ck_xxx functions and makes
the tree thread-safe.
.Sp
.Vb 1
\&        void    finalize_optree(OP* o)
.Ve
.SH "Pad Data Structures"
.IX Header "Pad Data Structures"
.IP "\s-1CX_CURPAD_SAVE \s0" 8
.IX Xref "CX_CURPAD_SAVE"
.IX Item "CX_CURPAD_SAVE "
Save the current pad in the given context block structure.
.Sp
.Vb 1
\&        void    CX_CURPAD_SAVE(struct context)
.Ve
.IP "\s-1CX_CURPAD_SV \s0" 8
.IX Xref "CX_CURPAD_SV"
.IX Item "CX_CURPAD_SV "
Access the \s-1SV\s0 at offset po in the saved current pad in the given
context block structure (can be used as an lvalue).
.Sp
.Vb 1
\&        SV *    CX_CURPAD_SV(struct context, PADOFFSET po)
.Ve
.IP "PadnameIsOUR" 8
.IX Xref "PadnameIsOUR"
.IX Item "PadnameIsOUR"
Whether this is an \*(L"our\*(R" variable.
.Sp
.Vb 1
\&        bool    PadnameIsOUR(PADNAME pn)
.Ve
.IP "PadnameIsSTATE" 8
.IX Xref "PadnameIsSTATE"
.IX Item "PadnameIsSTATE"
Whether this is a \*(L"state\*(R" variable.
.Sp
.Vb 1
\&        bool    PadnameIsSTATE(PADNAME pn)
.Ve
.IP "PadnameOURSTASH" 8
.IX Xref "PadnameOURSTASH"
.IX Item "PadnameOURSTASH"
The stash in which this \*(L"our\*(R" variable was declared.
.Sp
.Vb 1
\&        HV *    PadnameOURSTASH()
.Ve
.IP "PadnameOUTER" 8
.IX Xref "PadnameOUTER"
.IX Item "PadnameOUTER"
Whether this entry belongs to an outer pad.
.Sp
.Vb 1
\&        bool    PadnameOUTER(PADNAME pn)
.Ve
.IP "PadnameTYPE" 8
.IX Xref "PadnameTYPE"
.IX Item "PadnameTYPE"
The stash associated with a typed lexical.  This returns the \f(CW%Foo::\fR hash
for \f(CW\*(C`my Foo $bar\*(C'\fR.
.Sp
.Vb 1
\&        HV *    PadnameTYPE(PADNAME pn)
.Ve
.IP "\s-1PAD_BASE_SV \s0" 8
.IX Xref "PAD_BASE_SV"
.IX Item "PAD_BASE_SV "
Get the value from slot \f(CW\*(C`po\*(C'\fR in the base (DEPTH=1) pad of a padlist
.Sp
.Vb 1
\&        SV *    PAD_BASE_SV(PADLIST padlist, PADOFFSET po)
.Ve
.IP "\s-1PAD_CLONE_VARS \s0" 8
.IX Xref "PAD_CLONE_VARS"
.IX Item "PAD_CLONE_VARS "
Clone the state variables associated with running and compiling pads.
.Sp
.Vb 2
\&        void    PAD_CLONE_VARS(PerlInterpreter *proto_perl,
\&                               CLONE_PARAMS* param)
.Ve
.IP "\s-1PAD_COMPNAME_FLAGS \s0" 8
.IX Xref "PAD_COMPNAME_FLAGS"
.IX Item "PAD_COMPNAME_FLAGS "
Return the flags for the current compiling pad name
at offset \f(CW\*(C`po\*(C'\fR. Assumes a valid slot entry.
.Sp
.Vb 1
\&        U32     PAD_COMPNAME_FLAGS(PADOFFSET po)
.Ve
.IP "\s-1PAD_COMPNAME_GEN \s0" 8
.IX Xref "PAD_COMPNAME_GEN"
.IX Item "PAD_COMPNAME_GEN "
The generation number of the name at offset \f(CW\*(C`po\*(C'\fR in the current
compiling pad (lvalue). Note that \f(CW\*(C`SvUVX\*(C'\fR is hijacked for this purpose.
.Sp
.Vb 1
\&        STRLEN  PAD_COMPNAME_GEN(PADOFFSET po)
.Ve
.IP "PAD_COMPNAME_GEN_set" 8
.IX Xref "PAD_COMPNAME_GEN_set"
.IX Item "PAD_COMPNAME_GEN_set"
Sets the generation number of the name at offset \f(CW\*(C`po\*(C'\fR in the current
ling pad (lvalue) to \f(CW\*(C`gen\*(C'\fR.  Note that \f(CW\*(C`SvUV_set\*(C'\fR is hijacked for this purpose.
.Sp
.Vb 1
\&        STRLEN  PAD_COMPNAME_GEN_set(PADOFFSET po, int gen)
.Ve
.IP "\s-1PAD_COMPNAME_OURSTASH \s0" 8
.IX Xref "PAD_COMPNAME_OURSTASH"
.IX Item "PAD_COMPNAME_OURSTASH "
Return the stash associated with an \f(CW\*(C`our\*(C'\fR variable.
Assumes the slot entry is a valid \f(CW\*(C`our\*(C'\fR lexical.
.Sp
.Vb 1
\&        HV *    PAD_COMPNAME_OURSTASH(PADOFFSET po)
.Ve
.IP "\s-1PAD_COMPNAME_PV \s0" 8
.IX Xref "PAD_COMPNAME_PV"
.IX Item "PAD_COMPNAME_PV "
Return the name of the current compiling pad name
at offset \f(CW\*(C`po\*(C'\fR. Assumes a valid slot entry.
.Sp
.Vb 1
\&        char *  PAD_COMPNAME_PV(PADOFFSET po)
.Ve
.IP "\s-1PAD_COMPNAME_TYPE \s0" 8
.IX Xref "PAD_COMPNAME_TYPE"
.IX Item "PAD_COMPNAME_TYPE "
Return the type (stash) of the current compiling pad name at offset
\&\f(CW\*(C`po\*(C'\fR. Must be a valid name. Returns null if not typed.
.Sp
.Vb 1
\&        HV *    PAD_COMPNAME_TYPE(PADOFFSET po)
.Ve
.IP "pad_peg" 8
.IX Xref "pad_peg"
.IX Item "pad_peg"
When \s-1PERL_MAD\s0 is enabled, this is a small no-op function that gets called
at the start of each pad-related function.  It can be breakpointed to
track all pad operations.  The parameter is a string indicating the type
of pad operation being performed.
.Sp
\&\s-1NOTE:\s0 this function is experimental and may change or be
removed without notice.
.Sp
.Vb 1
\&        void    pad_peg(const char *s)
.Ve
.IP "\s-1PAD_RESTORE_LOCAL \s0" 8
.IX Xref "PAD_RESTORE_LOCAL"
.IX Item "PAD_RESTORE_LOCAL "
Restore the old pad saved into the local variable opad by \s-1\fIPAD_SAVE_LOCAL\s0()\fR
.Sp
.Vb 1
\&        void    PAD_RESTORE_LOCAL(PAD *opad)
.Ve
.IP "\s-1PAD_SAVE_LOCAL \s0" 8
.IX Xref "PAD_SAVE_LOCAL"
.IX Item "PAD_SAVE_LOCAL "
Save the current pad to the local variable opad, then make the
current pad equal to npad
.Sp
.Vb 1
\&        void    PAD_SAVE_LOCAL(PAD *opad, PAD *npad)
.Ve
.IP "\s-1PAD_SAVE_SETNULLPAD \s0" 8
.IX Xref "PAD_SAVE_SETNULLPAD"
.IX Item "PAD_SAVE_SETNULLPAD "
Save the current pad then set it to null.
.Sp
.Vb 1
\&        void    PAD_SAVE_SETNULLPAD()
.Ve
.IP "\s-1PAD_SETSV \s0" 8
.IX Xref "PAD_SETSV"
.IX Item "PAD_SETSV "
Set the slot at offset \f(CW\*(C`po\*(C'\fR in the current pad to \f(CW\*(C`sv\*(C'\fR
.Sp
.Vb 1
\&        SV *    PAD_SETSV(PADOFFSET po, SV* sv)
.Ve
.IP "\s-1PAD_SET_CUR \s0" 8
.IX Xref "PAD_SET_CUR"
.IX Item "PAD_SET_CUR "
Set the current pad to be pad \f(CW\*(C`n\*(C'\fR in the padlist, saving
the previous current pad. \s-1NB\s0 currently this macro expands to a string too
long for some compilers, so it's best to replace it with
.Sp
.Vb 2
\&    SAVECOMPPAD();
\&    PAD_SET_CUR_NOSAVE(padlist,n);
\&
\&
\&        void    PAD_SET_CUR(PADLIST padlist, I32 n)
.Ve
.IP "\s-1PAD_SET_CUR_NOSAVE \s0" 8
.IX Xref "PAD_SET_CUR_NOSAVE"
.IX Item "PAD_SET_CUR_NOSAVE "
like \s-1PAD_SET_CUR,\s0 but without the save
.Sp
.Vb 1
\&        void    PAD_SET_CUR_NOSAVE(PADLIST padlist, I32 n)
.Ve
.IP "\s-1PAD_SV \s0" 8
.IX Xref "PAD_SV"
.IX Item "PAD_SV "
Get the value at offset \f(CW\*(C`po\*(C'\fR in the current pad
.Sp
.Vb 1
\&        void    PAD_SV(PADOFFSET po)
.Ve
.IP "PAD_SVl" 8
.IX Xref "PAD_SVl"
.IX Item "PAD_SVl"
Lightweight and lvalue version of \f(CW\*(C`PAD_SV\*(C'\fR.
Get or set the value at offset \f(CW\*(C`po\*(C'\fR in the current pad.
Unlike \f(CW\*(C`PAD_SV\*(C'\fR, does not print diagnostics with \-DX.
For internal use only.
.Sp
.Vb 1
\&        SV *    PAD_SVl(PADOFFSET po)
.Ve
.IP "\s-1SAVECLEARSV \s0" 8
.IX Xref "SAVECLEARSV"
.IX Item "SAVECLEARSV "
Clear the pointed to pad value on scope exit. (i.e. the runtime action of 'my')
.Sp
.Vb 1
\&        void    SAVECLEARSV(SV **svp)
.Ve
.IP "\s-1SAVECOMPPAD \s0" 8
.IX Xref "SAVECOMPPAD"
.IX Item "SAVECOMPPAD "
save PL_comppad and PL_curpad
.Sp
.Vb 1
\&        void    SAVECOMPPAD()
.Ve
.IP "\s-1SAVEPADSV \s0" 8
.IX Xref "SAVEPADSV"
.IX Item "SAVEPADSV "
Save a pad slot (used to restore after an iteration)
.Sp
\&\s-1XXX DAPM\s0 it would make more sense to make the arg a \s-1PADOFFSET
\&\s0	void	\s-1SAVEPADSV\s0(\s-1PADOFFSET\s0 po)
.SH "Per-Interpreter Variables"
.IX Header "Per-Interpreter Variables"
.IP "PL_DBsingle" 8
.IX Xref "PL_DBsingle"
.IX Item "PL_DBsingle"
When Perl is run in debugging mode, with the \fB\-d\fR switch, this \s-1SV\s0 is a
boolean which indicates whether subs are being single-stepped.
Single-stepping is automatically turned on after every step.  This is the C
variable which corresponds to Perl's \f(CW$DB::single\fR variable.  See
\&\f(CW\*(C`PL_DBsub\*(C'\fR.
.Sp
.Vb 1
\&        SV *    PL_DBsingle
.Ve
.IP "PL_DBsub" 8
.IX Xref "PL_DBsub"
.IX Item "PL_DBsub"
When Perl is run in debugging mode, with the \fB\-d\fR switch, this \s-1GV\s0 contains
the \s-1SV\s0 which holds the name of the sub being debugged.  This is the C
variable which corresponds to Perl's \f(CW$DB::sub\fR variable.  See
\&\f(CW\*(C`PL_DBsingle\*(C'\fR.
.Sp
.Vb 1
\&        GV *    PL_DBsub
.Ve
.IP "PL_DBtrace" 8
.IX Xref "PL_DBtrace"
.IX Item "PL_DBtrace"
Trace variable used when Perl is run in debugging mode, with the \fB\-d\fR
switch.  This is the C variable which corresponds to Perl's \f(CW$DB::trace\fR
variable.  See \f(CW\*(C`PL_DBsingle\*(C'\fR.
.Sp
.Vb 1
\&        SV *    PL_DBtrace
.Ve
.IP "PL_dowarn" 8
.IX Xref "PL_dowarn"
.IX Item "PL_dowarn"
The C variable which corresponds to Perl's $^W warning variable.
.Sp
.Vb 1
\&        bool    PL_dowarn
.Ve
.IP "PL_last_in_gv" 8
.IX Xref "PL_last_in_gv"
.IX Item "PL_last_in_gv"
The \s-1GV\s0 which was last used for a filehandle input operation. (\f(CW\*(C`<FH>\*(C'\fR)
.Sp
.Vb 1
\&        GV*     PL_last_in_gv
.Ve
.IP "PL_ofsgv" 8
.IX Xref "PL_ofsgv"
.IX Item "PL_ofsgv"
The glob containing the output field separator \- \f(CW\*(C`*,\*(C'\fR in Perl space.
.Sp
.Vb 1
\&        GV*     PL_ofsgv
.Ve
.IP "PL_rs" 8
.IX Xref "PL_rs"
.IX Item "PL_rs"
The input record separator \- \f(CW$/\fR in Perl space.
.Sp
.Vb 1
\&        SV*     PL_rs
.Ve
.SH "Stack Manipulation Macros"
.IX Header "Stack Manipulation Macros"
.IP "djSP" 8
.IX Xref "djSP"
.IX Item "djSP"
Declare Just \f(CW\*(C`SP\*(C'\fR. This is actually identical to \f(CW\*(C`dSP\*(C'\fR, and declares
a local copy of perl's stack pointer, available via the \f(CW\*(C`SP\*(C'\fR macro.
See \f(CW\*(C`SP\*(C'\fR.  (Available for backward source code compatibility with the
old (Perl 5.005) thread model.)
.Sp
.Vb 1
\&                djSP;
.Ve
.IP "\s-1LVRET \s0" 8
.IX Xref "LVRET"
.IX Item "LVRET "
True if this op will be the return value of an lvalue subroutine
.SH "SV Manipulation Functions"
.IX Header "SV Manipulation Functions"
.IP "SvTHINKFIRST" 8
.IX Xref "SvTHINKFIRST"
.IX Item "SvTHINKFIRST"
A quick flag check to see whether an sv should be passed to sv_force_normal
to be \*(L"downgraded\*(R" before SvIVX or SvPVX can be modified directly.
.Sp
For example, if your scalar is a reference and you want to modify the SvIVX
slot, you can't just do SvROK_off, as that will leak the referent.
.Sp
This is used internally by various sv-modifying functions, such as
sv_setsv, sv_setiv and sv_pvn_force.
.Sp
One case that this does not handle is a gv without SvFAKE set.  After
.Sp
.Vb 1
\&    if (SvTHINKFIRST(gv)) sv_force_normal(gv);
.Ve
.Sp
it will still be a gv.
.Sp
SvTHINKFIRST sometimes produces false positives.  In those cases
sv_force_normal does nothing.
.Sp
.Vb 1
\&        U32     SvTHINKFIRST(SV *sv)
.Ve
.IP "sv_add_arena" 8
.IX Xref "sv_add_arena"
.IX Item "sv_add_arena"
Given a chunk of memory, link it to the head of the list of arenas,
and split it into a list of free SVs.
.Sp
.Vb 2
\&        void    sv_add_arena(char *const ptr, const U32 size,
\&                             const U32 flags)
.Ve
.IP "sv_clean_all" 8
.IX Xref "sv_clean_all"
.IX Item "sv_clean_all"
Decrement the refcnt of each remaining \s-1SV,\s0 possibly triggering a
cleanup.  This function may have to be called multiple times to free
SVs which are in complex self-referential hierarchies.
.Sp
.Vb 1
\&        I32     sv_clean_all()
.Ve
.IP "sv_clean_objs" 8
.IX Xref "sv_clean_objs"
.IX Item "sv_clean_objs"
Attempt to destroy all objects not yet freed.
.Sp
.Vb 1
\&        void    sv_clean_objs()
.Ve
.IP "sv_free_arenas" 8
.IX Xref "sv_free_arenas"
.IX Item "sv_free_arenas"
Deallocate the memory used by all arenas.  Note that all the individual \s-1SV\s0
heads and bodies within the arenas must already have been freed.
.Sp
.Vb 1
\&        void    sv_free_arenas()
.Ve
.SH "SV-Body Allocation"
.IX Header "SV-Body Allocation"
.IP "sv_2num" 8
.IX Xref "sv_2num"
.IX Item "sv_2num"
Return an \s-1SV\s0 with the numeric value of the source \s-1SV,\s0 doing any necessary
reference or overload conversion.  You must use the \f(CW\*(C`SvNUM(sv)\*(C'\fR macro to
access this function.
.Sp
\&\s-1NOTE:\s0 this function is experimental and may change or be
removed without notice.
.Sp
.Vb 1
\&        SV*     sv_2num(SV *const sv)
.Ve
.IP "sv_copypv" 8
.IX Xref "sv_copypv"
.IX Item "sv_copypv"
Copies a stringified representation of the source \s-1SV\s0 into the
destination \s-1SV. \s0 Automatically performs any necessary mg_get and
coercion of numeric values into strings.  Guaranteed to preserve
\&\s-1UTF8\s0 flag even from overloaded objects.  Similar in nature to
sv_2pv[_flags] but operates directly on an \s-1SV\s0 instead of just the
string.  Mostly uses sv_2pv_flags to do its work, except when that
would lose the \s-1UTF\-8\s0'ness of the \s-1PV.\s0
.Sp
.Vb 1
\&        void    sv_copypv(SV *const dsv, SV *const ssv)
.Ve
.IP "sv_ref" 8
.IX Xref "sv_ref"
.IX Item "sv_ref"
Returns a \s-1SV\s0 describing what the \s-1SV\s0 passed in is a reference to.
.Sp
.Vb 2
\&        SV*     sv_ref(SV *dst, const SV *const sv,
\&                       const int ob)
.Ve
.SH "Unicode Support"
.IX Header "Unicode Support"
.IP "find_uninit_var" 8
.IX Xref "find_uninit_var"
.IX Item "find_uninit_var"
Find the name of the undefined variable (if any) that caused the operator
to issue a \*(L"Use of uninitialized value\*(R" warning.
If match is true, only return a name if its value matches uninit_sv.
So roughly speaking, if a unary operator (such as \s-1OP_COS\s0) generates a
warning, then following the direct child of the op may yield an
\&\s-1OP_PADSV\s0 or \s-1OP_GV\s0 that gives the name of the undefined variable.  On the
other hand, with \s-1OP_ADD\s0 there are two branches to follow, so we only print
the variable name if we get an exact match.
.Sp
The name is returned as a mortal \s-1SV.\s0
.Sp
Assumes that PL_op is the op that originally triggered the error, and that
PL_comppad/PL_curpad points to the currently executing pad.
.Sp
\&\s-1NOTE:\s0 this function is experimental and may change or be
removed without notice.
.Sp
.Vb 3
\&        SV*     find_uninit_var(const OP *const obase,
\&                                const SV *const uninit_sv,
\&                                bool top)
.Ve
.IP "report_uninit" 8
.IX Xref "report_uninit"
.IX Item "report_uninit"
Print appropriate \*(L"Use of uninitialized variable\*(R" warning.
.Sp
.Vb 1
\&        void    report_uninit(const SV *uninit_sv)
.Ve
.SH "Undocumented functions"
.IX Header "Undocumented functions"
The following functions are currently undocumented.  If you use one of
them, you may wish to consider creating and submitting documentation for
it.
.IP "Perl_croak_memory_wrap" 4
.IX Xref "Perl_croak_memory_wrap"
.IX Item "Perl_croak_memory_wrap"
.PD 0
.IP "Slab_Alloc" 4
.IX Xref "Slab_Alloc"
.IX Item "Slab_Alloc"
.IP "Slab_Free" 4
.IX Xref "Slab_Free"
.IX Item "Slab_Free"
.IP "Slab_to_ro" 4
.IX Xref "Slab_to_ro"
.IX Item "Slab_to_ro"
.IP "Slab_to_rw" 4
.IX Xref "Slab_to_rw"
.IX Item "Slab_to_rw"
.IP "_add_range_to_invlist" 4
.IX Xref "_add_range_to_invlist"
.IX Item "_add_range_to_invlist"
.IP "_core_swash_init" 4
.IX Xref "_core_swash_init"
.IX Item "_core_swash_init"
.IP "_get_invlist_len_addr" 4
.IX Xref "_get_invlist_len_addr"
.IX Item "_get_invlist_len_addr"
.IP "_get_swash_invlist" 4
.IX Xref "_get_swash_invlist"
.IX Item "_get_swash_invlist"
.IP "_invlist_array_init" 4
.IX Xref "_invlist_array_init"
.IX Item "_invlist_array_init"
.IP "_invlist_contains_cp" 4
.IX Xref "_invlist_contains_cp"
.IX Item "_invlist_contains_cp"
.IP "_invlist_contents" 4
.IX Xref "_invlist_contents"
.IX Item "_invlist_contents"
.IP "_invlist_intersection" 4
.IX Xref "_invlist_intersection"
.IX Item "_invlist_intersection"
.IP "_invlist_intersection_maybe_complement_2nd" 4
.IX Xref "_invlist_intersection_maybe_complement_2nd"
.IX Item "_invlist_intersection_maybe_complement_2nd"
.IP "_invlist_invert" 4
.IX Xref "_invlist_invert"
.IX Item "_invlist_invert"
.IP "_invlist_invert_prop" 4
.IX Xref "_invlist_invert_prop"
.IX Item "_invlist_invert_prop"
.IP "_invlist_len" 4
.IX Xref "_invlist_len"
.IX Item "_invlist_len"
.IP "_invlist_populate_swatch" 4
.IX Xref "_invlist_populate_swatch"
.IX Item "_invlist_populate_swatch"
.IP "_invlist_search" 4
.IX Xref "_invlist_search"
.IX Item "_invlist_search"
.IP "_invlist_subtract" 4
.IX Xref "_invlist_subtract"
.IX Item "_invlist_subtract"
.IP "_invlist_union" 4
.IX Xref "_invlist_union"
.IX Item "_invlist_union"
.IP "_invlist_union_maybe_complement_2nd" 4
.IX Xref "_invlist_union_maybe_complement_2nd"
.IX Item "_invlist_union_maybe_complement_2nd"
.IP "_new_invlist" 4
.IX Xref "_new_invlist"
.IX Item "_new_invlist"
.IP "_swash_inversion_hash" 4
.IX Xref "_swash_inversion_hash"
.IX Item "_swash_inversion_hash"
.IP "_swash_to_invlist" 4
.IX Xref "_swash_to_invlist"
.IX Item "_swash_to_invlist"
.IP "_to_fold_latin1" 4
.IX Xref "_to_fold_latin1"
.IX Item "_to_fold_latin1"
.IP "_to_upper_title_latin1" 4
.IX Xref "_to_upper_title_latin1"
.IX Item "_to_upper_title_latin1"
.IP "aassign_common_vars" 4
.IX Xref "aassign_common_vars"
.IX Item "aassign_common_vars"
.IP "add_cp_to_invlist" 4
.IX Xref "add_cp_to_invlist"
.IX Item "add_cp_to_invlist"
.IP "addmad" 4
.IX Xref "addmad"
.IX Item "addmad"
.IP "alloc_maybe_populate_EXACT" 4
.IX Xref "alloc_maybe_populate_EXACT"
.IX Item "alloc_maybe_populate_EXACT"
.IP "allocmy" 4
.IX Xref "allocmy"
.IX Item "allocmy"
.IP "amagic_is_enabled" 4
.IX Xref "amagic_is_enabled"
.IX Item "amagic_is_enabled"
.IP "append_madprops" 4
.IX Xref "append_madprops"
.IX Item "append_madprops"
.IP "apply" 4
.IX Xref "apply"
.IX Item "apply"
.IP "av_extend_guts" 4
.IX Xref "av_extend_guts"
.IX Item "av_extend_guts"
.IP "av_reify" 4
.IX Xref "av_reify"
.IX Item "av_reify"
.IP "bind_match" 4
.IX Xref "bind_match"
.IX Item "bind_match"
.IP "block_end" 4
.IX Xref "block_end"
.IX Item "block_end"
.IP "block_start" 4
.IX Xref "block_start"
.IX Item "block_start"
.IP "boot_core_PerlIO" 4
.IX Xref "boot_core_PerlIO"
.IX Item "boot_core_PerlIO"
.IP "boot_core_UNIVERSAL" 4
.IX Xref "boot_core_UNIVERSAL"
.IX Item "boot_core_UNIVERSAL"
.IP "boot_core_mro" 4
.IX Xref "boot_core_mro"
.IX Item "boot_core_mro"
.IP "cando" 4
.IX Xref "cando"
.IX Item "cando"
.IP "check_utf8_print" 4
.IX Xref "check_utf8_print"
.IX Item "check_utf8_print"
.IP "ck_entersub_args_core" 4
.IX Xref "ck_entersub_args_core"
.IX Item "ck_entersub_args_core"
.IP "compute_EXACTish" 4
.IX Xref "compute_EXACTish"
.IX Item "compute_EXACTish"
.IP "convert" 4
.IX Xref "convert"
.IX Item "convert"
.IP "coresub_op" 4
.IX Xref "coresub_op"
.IX Item "coresub_op"
.IP "create_eval_scope" 4
.IX Xref "create_eval_scope"
.IX Item "create_eval_scope"
.IP "croak_no_mem" 4
.IX Xref "croak_no_mem"
.IX Item "croak_no_mem"
.IP "croak_popstack" 4
.IX Xref "croak_popstack"
.IX Item "croak_popstack"
.IP "current_re_engine" 4
.IX Xref "current_re_engine"
.IX Item "current_re_engine"
.IP "cv_ckproto_len_flags" 4
.IX Xref "cv_ckproto_len_flags"
.IX Item "cv_ckproto_len_flags"
.IP "cv_clone_into" 4
.IX Xref "cv_clone_into"
.IX Item "cv_clone_into"
.IP "cvgv_set" 4
.IX Xref "cvgv_set"
.IX Item "cvgv_set"
.IP "cvstash_set" 4
.IX Xref "cvstash_set"
.IX Item "cvstash_set"
.IP "deb_stack_all" 4
.IX Xref "deb_stack_all"
.IX Item "deb_stack_all"
.IP "delete_eval_scope" 4
.IX Xref "delete_eval_scope"
.IX Item "delete_eval_scope"
.IP "die_unwind" 4
.IX Xref "die_unwind"
.IX Item "die_unwind"
.IP "do_aexec" 4
.IX Xref "do_aexec"
.IX Item "do_aexec"
.IP "do_aexec5" 4
.IX Xref "do_aexec5"
.IX Item "do_aexec5"
.IP "do_eof" 4
.IX Xref "do_eof"
.IX Item "do_eof"
.IP "do_exec" 4
.IX Xref "do_exec"
.IX Item "do_exec"
.IP "do_exec3" 4
.IX Xref "do_exec3"
.IX Item "do_exec3"
.IP "do_execfree" 4
.IX Xref "do_execfree"
.IX Item "do_execfree"
.IP "do_ipcctl" 4
.IX Xref "do_ipcctl"
.IX Item "do_ipcctl"
.IP "do_ipcget" 4
.IX Xref "do_ipcget"
.IX Item "do_ipcget"
.IP "do_msgrcv" 4
.IX Xref "do_msgrcv"
.IX Item "do_msgrcv"
.IP "do_msgsnd" 4
.IX Xref "do_msgsnd"
.IX Item "do_msgsnd"
.IP "do_ncmp" 4
.IX Xref "do_ncmp"
.IX Item "do_ncmp"
.IP "do_op_xmldump" 4
.IX Xref "do_op_xmldump"
.IX Item "do_op_xmldump"
.IP "do_pmop_xmldump" 4
.IX Xref "do_pmop_xmldump"
.IX Item "do_pmop_xmldump"
.IP "do_print" 4
.IX Xref "do_print"
.IX Item "do_print"
.IP "do_readline" 4
.IX Xref "do_readline"
.IX Item "do_readline"
.IP "do_seek" 4
.IX Xref "do_seek"
.IX Item "do_seek"
.IP "do_semop" 4
.IX Xref "do_semop"
.IX Item "do_semop"
.IP "do_shmio" 4
.IX Xref "do_shmio"
.IX Item "do_shmio"
.IP "do_sysseek" 4
.IX Xref "do_sysseek"
.IX Item "do_sysseek"
.IP "do_tell" 4
.IX Xref "do_tell"
.IX Item "do_tell"
.IP "do_trans" 4
.IX Xref "do_trans"
.IX Item "do_trans"
.IP "do_vecget" 4
.IX Xref "do_vecget"
.IX Item "do_vecget"
.IP "do_vecset" 4
.IX Xref "do_vecset"
.IX Item "do_vecset"
.IP "do_vop" 4
.IX Xref "do_vop"
.IX Item "do_vop"
.IP "dofile" 4
.IX Xref "dofile"
.IX Item "dofile"
.IP "dump_all_perl" 4
.IX Xref "dump_all_perl"
.IX Item "dump_all_perl"
.IP "dump_packsubs_perl" 4
.IX Xref "dump_packsubs_perl"
.IX Item "dump_packsubs_perl"
.IP "dump_sub_perl" 4
.IX Xref "dump_sub_perl"
.IX Item "dump_sub_perl"
.IP "dump_sv_child" 4
.IX Xref "dump_sv_child"
.IX Item "dump_sv_child"
.IP "emulate_cop_io" 4
.IX Xref "emulate_cop_io"
.IX Item "emulate_cop_io"
.IP "feature_is_enabled" 4
.IX Xref "feature_is_enabled"
.IX Item "feature_is_enabled"
.IP "find_lexical_cv" 4
.IX Xref "find_lexical_cv"
.IX Item "find_lexical_cv"
.IP "find_runcv_where" 4
.IX Xref "find_runcv_where"
.IX Item "find_runcv_where"
.IP "find_rundefsv2" 4
.IX Xref "find_rundefsv2"
.IX Item "find_rundefsv2"
.IP "find_script" 4
.IX Xref "find_script"
.IX Item "find_script"
.IP "free_tied_hv_pool" 4
.IX Xref "free_tied_hv_pool"
.IX Item "free_tied_hv_pool"
.IP "get_and_check_backslash_N_name" 4
.IX Xref "get_and_check_backslash_N_name"
.IX Item "get_and_check_backslash_N_name"
.IP "get_db_sub" 4
.IX Xref "get_db_sub"
.IX Item "get_db_sub"
.IP "get_debug_opts" 4
.IX Xref "get_debug_opts"
.IX Item "get_debug_opts"
.IP "get_hash_seed" 4
.IX Xref "get_hash_seed"
.IX Item "get_hash_seed"
.IP "get_invlist_iter_addr" 4
.IX Xref "get_invlist_iter_addr"
.IX Item "get_invlist_iter_addr"
.IP "get_invlist_previous_index_addr" 4
.IX Xref "get_invlist_previous_index_addr"
.IX Item "get_invlist_previous_index_addr"
.IP "get_invlist_version_id_addr" 4
.IX Xref "get_invlist_version_id_addr"
.IX Item "get_invlist_version_id_addr"
.IP "get_invlist_zero_addr" 4
.IX Xref "get_invlist_zero_addr"
.IX Item "get_invlist_zero_addr"
.IP "get_no_modify" 4
.IX Xref "get_no_modify"
.IX Item "get_no_modify"
.IP "get_opargs" 4
.IX Xref "get_opargs"
.IX Item "get_opargs"
.IP "get_re_arg" 4
.IX Xref "get_re_arg"
.IX Item "get_re_arg"
.IP "getenv_len" 4
.IX Xref "getenv_len"
.IX Item "getenv_len"
.IP "grok_bslash_x" 4
.IX Xref "grok_bslash_x"
.IX Item "grok_bslash_x"
.IP "hfree_next_entry" 4
.IX Xref "hfree_next_entry"
.IX Item "hfree_next_entry"
.IP "hv_backreferences_p" 4
.IX Xref "hv_backreferences_p"
.IX Item "hv_backreferences_p"
.IP "hv_kill_backrefs" 4
.IX Xref "hv_kill_backrefs"
.IX Item "hv_kill_backrefs"
.IP "hv_undef_flags" 4
.IX Xref "hv_undef_flags"
.IX Item "hv_undef_flags"
.IP "init_argv_symbols" 4
.IX Xref "init_argv_symbols"
.IX Item "init_argv_symbols"
.IP "init_constants" 4
.IX Xref "init_constants"
.IX Item "init_constants"
.IP "init_dbargs" 4
.IX Xref "init_dbargs"
.IX Item "init_dbargs"
.IP "init_debugger" 4
.IX Xref "init_debugger"
.IX Item "init_debugger"
.IP "invert" 4
.IX Xref "invert"
.IX Item "invert"
.IP "invlist_array" 4
.IX Xref "invlist_array"
.IX Item "invlist_array"
.IP "invlist_clone" 4
.IX Xref "invlist_clone"
.IX Item "invlist_clone"
.IP "invlist_highest" 4
.IX Xref "invlist_highest"
.IX Item "invlist_highest"
.IP "invlist_is_iterating" 4
.IX Xref "invlist_is_iterating"
.IX Item "invlist_is_iterating"
.IP "invlist_iterfinish" 4
.IX Xref "invlist_iterfinish"
.IX Item "invlist_iterfinish"
.IP "invlist_iterinit" 4
.IX Xref "invlist_iterinit"
.IX Item "invlist_iterinit"
.IP "invlist_max" 4
.IX Xref "invlist_max"
.IX Item "invlist_max"
.IP "invlist_previous_index" 4
.IX Xref "invlist_previous_index"
.IX Item "invlist_previous_index"
.IP "invlist_set_len" 4
.IX Xref "invlist_set_len"
.IX Item "invlist_set_len"
.IP "invlist_set_previous_index" 4
.IX Xref "invlist_set_previous_index"
.IX Item "invlist_set_previous_index"
.IP "invlist_trim" 4
.IX Xref "invlist_trim"
.IX Item "invlist_trim"
.IP "io_close" 4
.IX Xref "io_close"
.IX Item "io_close"
.IP "isALNUM_lazy" 4
.IX Xref "isALNUM_lazy"
.IX Item "isALNUM_lazy"
.IP "isIDFIRST_lazy" 4
.IX Xref "isIDFIRST_lazy"
.IX Item "isIDFIRST_lazy"
.IP "is_utf8_char_slow" 4
.IX Xref "is_utf8_char_slow"
.IX Item "is_utf8_char_slow"
.IP "is_utf8_common" 4
.IX Xref "is_utf8_common"
.IX Item "is_utf8_common"
.IP "jmaybe" 4
.IX Xref "jmaybe"
.IX Item "jmaybe"
.IP "keyword" 4
.IX Xref "keyword"
.IX Item "keyword"
.IP "keyword_plugin_standard" 4
.IX Xref "keyword_plugin_standard"
.IX Item "keyword_plugin_standard"
.IP "list" 4
.IX Xref "list"
.IX Item "list"
.IP "localize" 4
.IX Xref "localize"
.IX Item "localize"
.IP "mad_free" 4
.IX Xref "mad_free"
.IX Item "mad_free"
.IP "madlex" 4
.IX Xref "madlex"
.IX Item "madlex"
.IP "madparse" 4
.IX Xref "madparse"
.IX Item "madparse"
.IP "magic_clear_all_env" 4
.IX Xref "magic_clear_all_env"
.IX Item "magic_clear_all_env"
.IP "magic_cleararylen_p" 4
.IX Xref "magic_cleararylen_p"
.IX Item "magic_cleararylen_p"
.IP "magic_clearenv" 4
.IX Xref "magic_clearenv"
.IX Item "magic_clearenv"
.IP "magic_clearisa" 4
.IX Xref "magic_clearisa"
.IX Item "magic_clearisa"
.IP "magic_clearpack" 4
.IX Xref "magic_clearpack"
.IX Item "magic_clearpack"
.IP "magic_clearsig" 4
.IX Xref "magic_clearsig"
.IX Item "magic_clearsig"
.IP "magic_copycallchecker" 4
.IX Xref "magic_copycallchecker"
.IX Item "magic_copycallchecker"
.IP "magic_existspack" 4
.IX Xref "magic_existspack"
.IX Item "magic_existspack"
.IP "magic_freearylen_p" 4
.IX Xref "magic_freearylen_p"
.IX Item "magic_freearylen_p"
.IP "magic_freeovrld" 4
.IX Xref "magic_freeovrld"
.IX Item "magic_freeovrld"
.IP "magic_get" 4
.IX Xref "magic_get"
.IX Item "magic_get"
.IP "magic_getarylen" 4
.IX Xref "magic_getarylen"
.IX Item "magic_getarylen"
.IP "magic_getdefelem" 4
.IX Xref "magic_getdefelem"
.IX Item "magic_getdefelem"
.IP "magic_getnkeys" 4
.IX Xref "magic_getnkeys"
.IX Item "magic_getnkeys"
.IP "magic_getpack" 4
.IX Xref "magic_getpack"
.IX Item "magic_getpack"
.IP "magic_getpos" 4
.IX Xref "magic_getpos"
.IX Item "magic_getpos"
.IP "magic_getsig" 4
.IX Xref "magic_getsig"
.IX Item "magic_getsig"
.IP "magic_getsubstr" 4
.IX Xref "magic_getsubstr"
.IX Item "magic_getsubstr"
.IP "magic_gettaint" 4
.IX Xref "magic_gettaint"
.IX Item "magic_gettaint"
.IP "magic_getuvar" 4
.IX Xref "magic_getuvar"
.IX Item "magic_getuvar"
.IP "magic_getvec" 4
.IX Xref "magic_getvec"
.IX Item "magic_getvec"
.IP "magic_killbackrefs" 4
.IX Xref "magic_killbackrefs"
.IX Item "magic_killbackrefs"
.IP "magic_nextpack" 4
.IX Xref "magic_nextpack"
.IX Item "magic_nextpack"
.IP "magic_regdata_cnt" 4
.IX Xref "magic_regdata_cnt"
.IX Item "magic_regdata_cnt"
.IP "magic_regdatum_get" 4
.IX Xref "magic_regdatum_get"
.IX Item "magic_regdatum_get"
.IP "magic_regdatum_set" 4
.IX Xref "magic_regdatum_set"
.IX Item "magic_regdatum_set"
.IP "magic_scalarpack" 4
.IX Xref "magic_scalarpack"
.IX Item "magic_scalarpack"
.IP "magic_set" 4
.IX Xref "magic_set"
.IX Item "magic_set"
.IP "magic_set_all_env" 4
.IX Xref "magic_set_all_env"
.IX Item "magic_set_all_env"
.IP "magic_setarylen" 4
.IX Xref "magic_setarylen"
.IX Item "magic_setarylen"
.IP "magic_setcollxfrm" 4
.IX Xref "magic_setcollxfrm"
.IX Item "magic_setcollxfrm"
.IP "magic_setdbline" 4
.IX Xref "magic_setdbline"
.IX Item "magic_setdbline"
.IP "magic_setdefelem" 4
.IX Xref "magic_setdefelem"
.IX Item "magic_setdefelem"
.IP "magic_setenv" 4
.IX Xref "magic_setenv"
.IX Item "magic_setenv"
.IP "magic_setisa" 4
.IX Xref "magic_setisa"
.IX Item "magic_setisa"
.IP "magic_setmglob" 4
.IX Xref "magic_setmglob"
.IX Item "magic_setmglob"
.IP "magic_setnkeys" 4
.IX Xref "magic_setnkeys"
.IX Item "magic_setnkeys"
.IP "magic_setpack" 4
.IX Xref "magic_setpack"
.IX Item "magic_setpack"
.IP "magic_setpos" 4
.IX Xref "magic_setpos"
.IX Item "magic_setpos"
.IP "magic_setregexp" 4
.IX Xref "magic_setregexp"
.IX Item "magic_setregexp"
.IP "magic_setsig" 4
.IX Xref "magic_setsig"
.IX Item "magic_setsig"
.IP "magic_setsubstr" 4
.IX Xref "magic_setsubstr"
.IX Item "magic_setsubstr"
.IP "magic_settaint" 4
.IX Xref "magic_settaint"
.IX Item "magic_settaint"
.IP "magic_setutf8" 4
.IX Xref "magic_setutf8"
.IX Item "magic_setutf8"
.IP "magic_setuvar" 4
.IX Xref "magic_setuvar"
.IX Item "magic_setuvar"
.IP "magic_setvec" 4
.IX Xref "magic_setvec"
.IX Item "magic_setvec"
.IP "magic_sizepack" 4
.IX Xref "magic_sizepack"
.IX Item "magic_sizepack"
.IP "magic_wipepack" 4
.IX Xref "magic_wipepack"
.IX Item "magic_wipepack"
.IP "malloc_good_size" 4
.IX Xref "malloc_good_size"
.IX Item "malloc_good_size"
.IP "malloced_size" 4
.IX Xref "malloced_size"
.IX Item "malloced_size"
.IP "mem_collxfrm" 4
.IX Xref "mem_collxfrm"
.IX Item "mem_collxfrm"
.IP "mode_from_discipline" 4
.IX Xref "mode_from_discipline"
.IX Item "mode_from_discipline"
.IP "more_bodies" 4
.IX Xref "more_bodies"
.IX Item "more_bodies"
.IP "mro_meta_dup" 4
.IX Xref "mro_meta_dup"
.IX Item "mro_meta_dup"
.IP "mro_meta_init" 4
.IX Xref "mro_meta_init"
.IX Item "mro_meta_init"
.IP "my_attrs" 4
.IX Xref "my_attrs"
.IX Item "my_attrs"
.IP "my_betoh16" 4
.IX Xref "my_betoh16"
.IX Item "my_betoh16"
.IP "my_betoh32" 4
.IX Xref "my_betoh32"
.IX Item "my_betoh32"
.IP "my_betoh64" 4
.IX Xref "my_betoh64"
.IX Item "my_betoh64"
.IP "my_betohi" 4
.IX Xref "my_betohi"
.IX Item "my_betohi"
.IP "my_betohl" 4
.IX Xref "my_betohl"
.IX Item "my_betohl"
.IP "my_betohs" 4
.IX Xref "my_betohs"
.IX Item "my_betohs"
.IP "my_clearenv" 4
.IX Xref "my_clearenv"
.IX Item "my_clearenv"
.IP "my_htobe16" 4
.IX Xref "my_htobe16"
.IX Item "my_htobe16"
.IP "my_htobe32" 4
.IX Xref "my_htobe32"
.IX Item "my_htobe32"
.IP "my_htobe64" 4
.IX Xref "my_htobe64"
.IX Item "my_htobe64"
.IP "my_htobei" 4
.IX Xref "my_htobei"
.IX Item "my_htobei"
.IP "my_htobel" 4
.IX Xref "my_htobel"
.IX Item "my_htobel"
.IP "my_htobes" 4
.IX Xref "my_htobes"
.IX Item "my_htobes"
.IP "my_htole16" 4
.IX Xref "my_htole16"
.IX Item "my_htole16"
.IP "my_htole32" 4
.IX Xref "my_htole32"
.IX Item "my_htole32"
.IP "my_htole64" 4
.IX Xref "my_htole64"
.IX Item "my_htole64"
.IP "my_htolei" 4
.IX Xref "my_htolei"
.IX Item "my_htolei"
.IP "my_htolel" 4
.IX Xref "my_htolel"
.IX Item "my_htolel"
.IP "my_htoles" 4
.IX Xref "my_htoles"
.IX Item "my_htoles"
.IP "my_letoh16" 4
.IX Xref "my_letoh16"
.IX Item "my_letoh16"
.IP "my_letoh32" 4
.IX Xref "my_letoh32"
.IX Item "my_letoh32"
.IP "my_letoh64" 4
.IX Xref "my_letoh64"
.IX Item "my_letoh64"
.IP "my_letohi" 4
.IX Xref "my_letohi"
.IX Item "my_letohi"
.IP "my_letohl" 4
.IX Xref "my_letohl"
.IX Item "my_letohl"
.IP "my_letohs" 4
.IX Xref "my_letohs"
.IX Item "my_letohs"
.IP "my_lstat_flags" 4
.IX Xref "my_lstat_flags"
.IX Item "my_lstat_flags"
.IP "my_stat_flags" 4
.IX Xref "my_stat_flags"
.IX Item "my_stat_flags"
.IP "my_swabn" 4
.IX Xref "my_swabn"
.IX Item "my_swabn"
.IP "my_unexec" 4
.IX Xref "my_unexec"
.IX Item "my_unexec"
.IP "newATTRSUB_flags" 4
.IX Xref "newATTRSUB_flags"
.IX Item "newATTRSUB_flags"
.IP "newGP" 4
.IX Xref "newGP"
.IX Item "newGP"
.IP "newMADPROP" 4
.IX Xref "newMADPROP"
.IX Item "newMADPROP"
.IP "newMADsv" 4
.IX Xref "newMADsv"
.IX Item "newMADsv"
.IP "newSTUB" 4
.IX Xref "newSTUB"
.IX Item "newSTUB"
.IP "newTOKEN" 4
.IX Xref "newTOKEN"
.IX Item "newTOKEN"
.IP "newXS_len_flags" 4
.IX Xref "newXS_len_flags"
.IX Item "newXS_len_flags"
.IP "new_warnings_bitfield" 4
.IX Xref "new_warnings_bitfield"
.IX Item "new_warnings_bitfield"
.IP "nextargv" 4
.IX Xref "nextargv"
.IX Item "nextargv"
.IP "oopsAV" 4
.IX Xref "oopsAV"
.IX Item "oopsAV"
.IP "oopsHV" 4
.IX Xref "oopsHV"
.IX Item "oopsHV"
.IP "op_clear" 4
.IX Xref "op_clear"
.IX Item "op_clear"
.IP "op_const_sv" 4
.IX Xref "op_const_sv"
.IX Item "op_const_sv"
.IP "op_getmad" 4
.IX Xref "op_getmad"
.IX Item "op_getmad"
.IP "op_getmad_weak" 4
.IX Xref "op_getmad_weak"
.IX Item "op_getmad_weak"
.IP "op_integerize" 4
.IX Xref "op_integerize"
.IX Item "op_integerize"
.IP "op_lvalue_flags" 4
.IX Xref "op_lvalue_flags"
.IX Item "op_lvalue_flags"
.IP "op_refcnt_dec" 4
.IX Xref "op_refcnt_dec"
.IX Item "op_refcnt_dec"
.IP "op_refcnt_inc" 4
.IX Xref "op_refcnt_inc"
.IX Item "op_refcnt_inc"
.IP "op_std_init" 4
.IX Xref "op_std_init"
.IX Item "op_std_init"
.IP "op_unscope" 4
.IX Xref "op_unscope"
.IX Item "op_unscope"
.IP "op_xmldump" 4
.IX Xref "op_xmldump"
.IX Item "op_xmldump"
.IP "opslab_force_free" 4
.IX Xref "opslab_force_free"
.IX Item "opslab_force_free"
.IP "opslab_free" 4
.IX Xref "opslab_free"
.IX Item "opslab_free"
.IP "opslab_free_nopad" 4
.IX Xref "opslab_free_nopad"
.IX Item "opslab_free_nopad"
.IP "package" 4
.IX Xref "package"
.IX Item "package"
.IP "package_version" 4
.IX Xref "package_version"
.IX Item "package_version"
.IP "padlist_store" 4
.IX Xref "padlist_store"
.IX Item "padlist_store"
.IP "parse_unicode_opts" 4
.IX Xref "parse_unicode_opts"
.IX Item "parse_unicode_opts"
.IP "parser_free" 4
.IX Xref "parser_free"
.IX Item "parser_free"
.IP "parser_free_nexttoke_ops" 4
.IX Xref "parser_free_nexttoke_ops"
.IX Item "parser_free_nexttoke_ops"
.IP "peep" 4
.IX Xref "peep"
.IX Item "peep"
.IP "pmop_xmldump" 4
.IX Xref "pmop_xmldump"
.IX Item "pmop_xmldump"
.IP "pmruntime" 4
.IX Xref "pmruntime"
.IX Item "pmruntime"
.IP "populate_isa" 4
.IX Xref "populate_isa"
.IX Item "populate_isa"
.IP "prepend_madprops" 4
.IX Xref "prepend_madprops"
.IX Item "prepend_madprops"
.IP "qerror" 4
.IX Xref "qerror"
.IX Item "qerror"
.IP "re_op_compile" 4
.IX Xref "re_op_compile"
.IX Item "re_op_compile"
.IP "reg_named_buff" 4
.IX Xref "reg_named_buff"
.IX Item "reg_named_buff"
.IP "reg_named_buff_iter" 4
.IX Xref "reg_named_buff_iter"
.IX Item "reg_named_buff_iter"
.IP "reg_numbered_buff_fetch" 4
.IX Xref "reg_numbered_buff_fetch"
.IX Item "reg_numbered_buff_fetch"
.IP "reg_numbered_buff_length" 4
.IX Xref "reg_numbered_buff_length"
.IX Item "reg_numbered_buff_length"
.IP "reg_numbered_buff_store" 4
.IX Xref "reg_numbered_buff_store"
.IX Item "reg_numbered_buff_store"
.IP "reg_qr_package" 4
.IX Xref "reg_qr_package"
.IX Item "reg_qr_package"
.IP "reg_temp_copy" 4
.IX Xref "reg_temp_copy"
.IX Item "reg_temp_copy"
.IP "regcurly" 4
.IX Xref "regcurly"
.IX Item "regcurly"
.IP "regpposixcc" 4
.IX Xref "regpposixcc"
.IX Item "regpposixcc"
.IP "regprop" 4
.IX Xref "regprop"
.IX Item "regprop"
.IP "report_evil_fh" 4
.IX Xref "report_evil_fh"
.IX Item "report_evil_fh"
.IP "report_redefined_cv" 4
.IX Xref "report_redefined_cv"
.IX Item "report_redefined_cv"
.IP "report_wrongway_fh" 4
.IX Xref "report_wrongway_fh"
.IX Item "report_wrongway_fh"
.IP "rpeep" 4
.IX Xref "rpeep"
.IX Item "rpeep"
.IP "rsignal_restore" 4
.IX Xref "rsignal_restore"
.IX Item "rsignal_restore"
.IP "rsignal_save" 4
.IX Xref "rsignal_save"
.IX Item "rsignal_save"
.IP "rxres_save" 4
.IX Xref "rxres_save"
.IX Item "rxres_save"
.IP "same_dirent" 4
.IX Xref "same_dirent"
.IX Item "same_dirent"
.IP "sawparens" 4
.IX Xref "sawparens"
.IX Item "sawparens"
.IP "scalar" 4
.IX Xref "scalar"
.IX Item "scalar"
.IP "scalarvoid" 4
.IX Xref "scalarvoid"
.IX Item "scalarvoid"
.IP "sighandler" 4
.IX Xref "sighandler"
.IX Item "sighandler"
.IP "softref2xv" 4
.IX Xref "softref2xv"
.IX Item "softref2xv"
.IP "sub_crush_depth" 4
.IX Xref "sub_crush_depth"
.IX Item "sub_crush_depth"
.IP "sv_add_backref" 4
.IX Xref "sv_add_backref"
.IX Item "sv_add_backref"
.IP "sv_catxmlpv" 4
.IX Xref "sv_catxmlpv"
.IX Item "sv_catxmlpv"
.IP "sv_catxmlpvn" 4
.IX Xref "sv_catxmlpvn"
.IX Item "sv_catxmlpvn"
.IP "sv_catxmlsv" 4
.IX Xref "sv_catxmlsv"
.IX Item "sv_catxmlsv"
.IP "sv_del_backref" 4
.IX Xref "sv_del_backref"
.IX Item "sv_del_backref"
.IP "sv_free2" 4
.IX Xref "sv_free2"
.IX Item "sv_free2"
.IP "sv_kill_backrefs" 4
.IX Xref "sv_kill_backrefs"
.IX Item "sv_kill_backrefs"
.IP "sv_len_utf8_nomg" 4
.IX Xref "sv_len_utf8_nomg"
.IX Item "sv_len_utf8_nomg"
.IP "sv_mortalcopy_flags" 4
.IX Xref "sv_mortalcopy_flags"
.IX Item "sv_mortalcopy_flags"
.IP "sv_resetpvn" 4
.IX Xref "sv_resetpvn"
.IX Item "sv_resetpvn"
.IP "sv_sethek" 4
.IX Xref "sv_sethek"
.IX Item "sv_sethek"
.IP "sv_setsv_cow" 4
.IX Xref "sv_setsv_cow"
.IX Item "sv_setsv_cow"
.IP "sv_unglob" 4
.IX Xref "sv_unglob"
.IX Item "sv_unglob"
.IP "sv_xmlpeek" 4
.IX Xref "sv_xmlpeek"
.IX Item "sv_xmlpeek"
.IP "tied_method" 4
.IX Xref "tied_method"
.IX Item "tied_method"
.IP "token_free" 4
.IX Xref "token_free"
.IX Item "token_free"
.IP "token_getmad" 4
.IX Xref "token_getmad"
.IX Item "token_getmad"
.IP "translate_substr_offsets" 4
.IX Xref "translate_substr_offsets"
.IX Item "translate_substr_offsets"
.IP "try_amagic_bin" 4
.IX Xref "try_amagic_bin"
.IX Item "try_amagic_bin"
.IP "try_amagic_un" 4
.IX Xref "try_amagic_un"
.IX Item "try_amagic_un"
.IP "unshare_hek" 4
.IX Xref "unshare_hek"
.IX Item "unshare_hek"
.IP "utilize" 4
.IX Xref "utilize"
.IX Item "utilize"
.IP "varname" 4
.IX Xref "varname"
.IX Item "varname"
.IP "vivify_defelem" 4
.IX Xref "vivify_defelem"
.IX Item "vivify_defelem"
.IP "vivify_ref" 4
.IX Xref "vivify_ref"
.IX Item "vivify_ref"
.IP "wait4pid" 4
.IX Xref "wait4pid"
.IX Item "wait4pid"
.IP "was_lvalue_sub" 4
.IX Xref "was_lvalue_sub"
.IX Item "was_lvalue_sub"
.IP "watch" 4
.IX Xref "watch"
.IX Item "watch"
.IP "win32_croak_not_implemented" 4
.IX Xref "win32_croak_not_implemented"
.IX Item "win32_croak_not_implemented"
.IP "write_to_stderr" 4
.IX Xref "write_to_stderr"
.IX Item "write_to_stderr"
.IP "xmldump_all" 4
.IX Xref "xmldump_all"
.IX Item "xmldump_all"
.IP "xmldump_all_perl" 4
.IX Xref "xmldump_all_perl"
.IX Item "xmldump_all_perl"
.IP "xmldump_eval" 4
.IX Xref "xmldump_eval"
.IX Item "xmldump_eval"
.IP "xmldump_form" 4
.IX Xref "xmldump_form"
.IX Item "xmldump_form"
.IP "xmldump_indent" 4
.IX Xref "xmldump_indent"
.IX Item "xmldump_indent"
.IP "xmldump_packsubs" 4
.IX Xref "xmldump_packsubs"
.IX Item "xmldump_packsubs"
.IP "xmldump_packsubs_perl" 4
.IX Xref "xmldump_packsubs_perl"
.IX Item "xmldump_packsubs_perl"
.IP "xmldump_sub" 4
.IX Xref "xmldump_sub"
.IX Item "xmldump_sub"
.IP "xmldump_sub_perl" 4
.IX Xref "xmldump_sub_perl"
.IX Item "xmldump_sub_perl"
.IP "xmldump_vindent" 4
.IX Xref "xmldump_vindent"
.IX Item "xmldump_vindent"
.IP "xs_apiversion_bootcheck" 4
.IX Xref "xs_apiversion_bootcheck"
.IX Item "xs_apiversion_bootcheck"
.IP "xs_version_bootcheck" 4
.IX Xref "xs_version_bootcheck"
.IX Item "xs_version_bootcheck"
.IP "yyerror" 4
.IX Xref "yyerror"
.IX Item "yyerror"
.IP "yyerror_pv" 4
.IX Xref "yyerror_pv"
.IX Item "yyerror_pv"
.IP "yyerror_pvn" 4
.IX Xref "yyerror_pvn"
.IX Item "yyerror_pvn"
.IP "yylex" 4
.IX Xref "yylex"
.IX Item "yylex"
.IP "yyparse" 4
.IX Xref "yyparse"
.IX Item "yyparse"
.IP "yyunlex" 4
.IX Xref "yyunlex"
.IX Item "yyunlex"
.PD
.SH "AUTHORS"
.IX Header "AUTHORS"
The autodocumentation system was originally added to the Perl core by
Benjamin Stuhl. Documentation is by whoever was kind enough to
document their functions.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
perlguts, perlapi
                                                                                                                                                                                                                                                                                                                                      osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perlintern5.16.1                             0100644 0001750 0001750 00000173556 12566207420 023451  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLINTERN 1"
.TH PERLINTERN 1 "2015-08-22" "perl v5.16.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlintern \- autogenerated documentation of purely internal
		 Perl functions
.SH "DESCRIPTION"
.IX Xref "internal Perl functions interpreter functions"
.IX Header "DESCRIPTION"
This file is the autogenerated documentation of functions in the
Perl interpreter that are documented using Perl's internal documentation
format but are not marked as part of the Perl \s-1API\s0. In other words,
\&\fBthey are not for use in extensions\fR!
.SH "Compile-time scope hooks"
.IX Header "Compile-time scope hooks"
.IP "BhkENTRY" 8
.IX Xref "BhkENTRY"
.IX Item "BhkENTRY"
Return an entry from the \s-1BHK\s0 structure. \fIwhich\fR is a preprocessor token
indicating which entry to return. If the appropriate flag is not set
this will return \s-1NULL\s0. The type of the return value depends on which
entry you ask for.
.Sp
\&\s-1NOTE:\s0 this function is experimental and may change or be
removed without notice.
.Sp
.Vb 1
\&        void *  BhkENTRY(BHK *hk, which)
.Ve
.IP "BhkFLAGS" 8
.IX Xref "BhkFLAGS"
.IX Item "BhkFLAGS"
Return the \s-1BHK\s0's flags.
.Sp
\&\s-1NOTE:\s0 this function is experimental and may change or be
removed without notice.
.Sp
.Vb 1
\&        U32     BhkFLAGS(BHK *hk)
.Ve
.IP "\s-1CALL_BLOCK_HOOKS\s0" 8
.IX Xref "CALL_BLOCK_HOOKS"
.IX Item "CALL_BLOCK_HOOKS"
Call all the registered block hooks for type \fIwhich\fR. \fIwhich\fR is a
preprocessing token; the type of \fIarg\fR depends on \fIwhich\fR.
.Sp
\&\s-1NOTE:\s0 this function is experimental and may change or be
removed without notice.
.Sp
.Vb 1
\&        void    CALL_BLOCK_HOOKS(which, arg)
.Ve
.SH "CV reference counts and CvOUTSIDE"
.IX Header "CV reference counts and CvOUTSIDE"
.IP "CvWEAKOUTSIDE" 8
.IX Xref "CvWEAKOUTSIDE"
.IX Item "CvWEAKOUTSIDE"
Each \s-1CV\s0 has a pointer, \f(CW\*(C`CvOUTSIDE()\*(C'\fR, to its lexically enclosing
\&\s-1CV\s0 (if any). Because pointers to anonymous sub prototypes are
stored in \f(CW\*(C`&\*(C'\fR pad slots, it is a possible to get a circular reference,
with the parent pointing to the child and vice-versa. To avoid the
ensuing memory leak, we do not increment the reference count of the \s-1CV\s0
pointed to by \f(CW\*(C`CvOUTSIDE\*(C'\fR in the \fIone specific instance\fR that the parent
has a \f(CW\*(C`&\*(C'\fR pad slot pointing back to us. In this case, we set the
\&\f(CW\*(C`CvWEAKOUTSIDE\*(C'\fR flag in the child. This allows us to determine under what
circumstances we should decrement the refcount of the parent when freeing
the child.
.Sp
There is a further complication with non-closure anonymous subs (i.e. those
that do not refer to any lexicals outside that sub). In this case, the
anonymous prototype is shared rather than being cloned. This has the
consequence that the parent may be freed while there are still active
children, eg
.Sp
.Vb 1
\&    BEGIN { $a = sub { eval \*(Aq$x\*(Aq } }
.Ve
.Sp
In this case, the \s-1BEGIN\s0 is freed immediately after execution since there
are no active references to it: the anon sub prototype has
\&\f(CW\*(C`CvWEAKOUTSIDE\*(C'\fR set since it's not a closure, and \f(CW$a\fR points to the same
\&\s-1CV\s0, so it doesn't contribute to \s-1BEGIN\s0's refcount either.  When \f(CW$a\fR is
executed, the \f(CW\*(C`eval \*(Aq$x\*(Aq\*(C'\fR causes the chain of \f(CW\*(C`CvOUTSIDE\*(C'\fRs to be followed,
and the freed \s-1BEGIN\s0 is accessed.
.Sp
To avoid this, whenever a \s-1CV\s0 and its associated pad is freed, any
\&\f(CW\*(C`&\*(C'\fR entries in the pad are explicitly removed from the pad, and if the
refcount of the pointed-to anon sub is still positive, then that
child's \f(CW\*(C`CvOUTSIDE\*(C'\fR is set to point to its grandparent. This will only
occur in the single specific case of a non-closure anon prototype
having one or more active references (such as \f(CW$a\fR above).
.Sp
One other thing to consider is that a \s-1CV\s0 may be merely undefined
rather than freed, eg \f(CW\*(C`undef &foo\*(C'\fR. In this case, its refcount may
not have reached zero, but we still delete its pad and its \f(CW\*(C`CvROOT\*(C'\fR etc.
Since various children may still have their \f(CW\*(C`CvOUTSIDE\*(C'\fR pointing at this
undefined \s-1CV\s0, we keep its own \f(CW\*(C`CvOUTSIDE\*(C'\fR for the time being, so that
the chain of lexical scopes is unbroken. For example, the following
should print 123:
.Sp
.Vb 5
\&    my $x = 123;
\&    sub tmp { sub { eval \*(Aq$x\*(Aq } }
\&    my $a = tmp();
\&    undef &tmp;
\&    print  $a\->();
\&
\&        bool    CvWEAKOUTSIDE(CV *cv)
.Ve
.SH "Embedding Functions"
.IX Header "Embedding Functions"
.IP "cv_dump" 8
.IX Xref "cv_dump"
.IX Item "cv_dump"
dump the contents of a \s-1CV\s0
.Sp
.Vb 1
\&        void    cv_dump(CV *cv, const char *title)
.Ve
.IP "do_dump_pad" 8
.IX Xref "do_dump_pad"
.IX Item "do_dump_pad"
Dump the contents of a padlist
.Sp
.Vb 2
\&        void    do_dump_pad(I32 level, PerlIO *file,
\&                            PADLIST *padlist, int full)
.Ve
.IP "intro_my" 8
.IX Xref "intro_my"
.IX Item "intro_my"
\&\*(L"Introduce\*(R" my variables to visible status.
.Sp
.Vb 1
\&        U32     intro_my()
.Ve
.IP "padlist_dup" 8
.IX Xref "padlist_dup"
.IX Item "padlist_dup"
Duplicates a pad.
.Sp
.Vb 1
\&        AV *    padlist_dup(AV *srcpad, CLONE_PARAMS *param)
.Ve
.IP "pad_alloc_name" 8
.IX Xref "pad_alloc_name"
.IX Item "pad_alloc_name"
Allocates a place in the currently-compiling
pad (via \*(L"pad_alloc\*(R" in perlapi) and
then stores a name for that entry.  \fInamesv\fR is adopted and becomes the
name entry; it must already contain the name string and be sufficiently
upgraded.  \fItypestash\fR and \fIourstash\fR and the \f(CW\*(C`padadd_STATE\*(C'\fR flag get
added to \fInamesv\fR.  None of the other
processing of \*(L"pad_add_name_pvn\*(R" in perlapi
is done.  Returns the offset of the allocated pad slot.
.Sp
.Vb 2
\&        PADOFFSET pad_alloc_name(SV *namesv, U32 flags,
\&                                 HV *typestash, HV *ourstash)
.Ve
.IP "pad_block_start" 8
.IX Xref "pad_block_start"
.IX Item "pad_block_start"
Update the pad compilation state variables on entry to a new block
.Sp
.Vb 1
\&        void    pad_block_start(int full)
.Ve
.IP "pad_check_dup" 8
.IX Xref "pad_check_dup"
.IX Item "pad_check_dup"
Check for duplicate declarations: report any of:
.Sp
.Vb 3
\&     * a my in the current scope with the same name;
\&     * an our (anywhere in the pad) with the same name and the
\&       same stash as C<ourstash>
.Ve
.Sp
\&\f(CW\*(C`is_our\*(C'\fR indicates that the name to check is an 'our' declaration.
.Sp
.Vb 2
\&        void    pad_check_dup(SV *name, U32 flags,
\&                              const HV *ourstash)
.Ve
.IP "pad_findlex" 8
.IX Xref "pad_findlex"
.IX Item "pad_findlex"
Find a named lexical anywhere in a chain of nested pads. Add fake entries
in the inner pads if it's found in an outer one.
.Sp
Returns the offset in the bottom pad of the lex or the fake lex.
cv is the \s-1CV\s0 in which to start the search, and seq is the current cop_seq
to match against. If warn is true, print appropriate warnings.  The out_*
vars return values, and so are pointers to where the returned values
should be stored. out_capture, if non-null, requests that the innermost
instance of the lexical is captured; out_name_sv is set to the innermost
matched namesv or fake namesv; out_flags returns the flags normally
associated with the \s-1IVX\s0 field of a fake namesv.
.Sp
Note that \fIpad_findlex()\fR is recursive; it recurses up the chain of CVs,
then comes back down, adding fake entries as it goes. It has to be this way
because fake namesvs in anon protoypes have to store in xlow the index into
the parent pad.
.Sp
.Vb 5
\&        PADOFFSET pad_findlex(const char *namepv,
\&                              STRLEN namelen, U32 flags,
\&                              const CV* cv, U32 seq, int warn,
\&                              SV** out_capture,
\&                              SV** out_name_sv, int *out_flags)
.Ve
.IP "pad_fixup_inner_anons" 8
.IX Xref "pad_fixup_inner_anons"
.IX Item "pad_fixup_inner_anons"
For any anon CVs in the pad, change CvOUTSIDE of that \s-1CV\s0 from
old_cv to new_cv if necessary. Needed when a newly-compiled \s-1CV\s0 has to be
moved to a pre-existing \s-1CV\s0 struct.
.Sp
.Vb 2
\&        void    pad_fixup_inner_anons(PADLIST *padlist,
\&                                      CV *old_cv, CV *new_cv)
.Ve
.IP "pad_free" 8
.IX Xref "pad_free"
.IX Item "pad_free"
Free the \s-1SV\s0 at offset po in the current pad.
.Sp
.Vb 1
\&        void    pad_free(PADOFFSET po)
.Ve
.IP "pad_leavemy" 8
.IX Xref "pad_leavemy"
.IX Item "pad_leavemy"
Cleanup at end of scope during compilation: set the max seq number for
lexicals in this scope and warn of any lexicals that never got introduced.
.Sp
.Vb 1
\&        void    pad_leavemy()
.Ve
.IP "pad_push" 8
.IX Xref "pad_push"
.IX Item "pad_push"
Push a new pad frame onto the padlist, unless there's already a pad at
this depth, in which case don't bother creating a new one.  Then give
the new pad an \f(CW@_\fR in slot zero.
.Sp
.Vb 1
\&        void    pad_push(PADLIST *padlist, int depth)
.Ve
.IP "pad_reset" 8
.IX Xref "pad_reset"
.IX Item "pad_reset"
Mark all the current temporaries for reuse
.Sp
.Vb 1
\&        void    pad_reset()
.Ve
.IP "pad_swipe" 8
.IX Xref "pad_swipe"
.IX Item "pad_swipe"
Abandon the tmp in the current pad at offset po and replace with a
new one.
.Sp
.Vb 1
\&        void    pad_swipe(PADOFFSET po, bool refadjust)
.Ve
.SH "Functions in file op.c"
.IX Header "Functions in file op.c"
.IP "c