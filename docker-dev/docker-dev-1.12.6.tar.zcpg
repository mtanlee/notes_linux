.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "IO::Pager 3"
.TH IO::Pager 3 "2013-04-06" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
IO::Pager \- Select a pager and pipe text to it if destination is a TTY
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  # Select an appropriate pager and set the PAGER environment variable
\&  use IO::Pager;
\&
\&  # Optionally, pipe output to it
\&  {
\&    # TIMTOWTDI, not an exhaustive list but you can infer the others
\&    my $token =     IO::Pager::open *STDOUT; # Unbuffered is  default subclass
\&    my $token = new IO::Pager       *STDOUT,  \*(AqUnbuffered\*(Aq; # Specify subclass
\&    my $token =     IO::Pager::Unbuffered::open *STDOUT;    # Must \*(Aquse\*(Aq class!
\&    my $token = new IO::Pager::Unbuffered       *STDOUT;    # Must \*(Aquse\*(Aq class!
\&
\&
\&    print <<"  HEREDOC" ;
\&    ...
\&    A bunch of text later
\&    HEREDOC
\&
\&    # $token passes out of scope and filehandle is automagically closed
\&  }
\&
\&  {
\&    # You can also use scalar filehandles...
\&    my $token = IO::Pager::open($FH) or warn($!);
\&    print $FH "No globs or barewords for us thanks!\en";
\&  }
\&
\&  {
\&    # ...or an object interface
\&    my $token = new IO::Pager::Buffered;
\&
\&    $token\->print("OO shiny...\en");
\&  }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
IO::Pager can be used to locate an available pager and set the \fI\s-1PAGER\s0\fR
environment variable (see \*(L"\s-1NOTES\*(R"\s0). It is also a factory for creating
I/O objects such as IO::Pager::Buffered and IO::Pager::Unbuffered.
.PP
IO::Pager subclasses are designed to programmatically decide whether
or not to pipe a filehandle's output to a program specified in \fI\s-1PAGER\s0\fR.
Subclasses may implement only the \s-1IO\s0 handle methods desired and inherit
the remainder of those outlined below from IO::Pager. For anything else,
\&\s-1YMMV.\s0 See the appropriate subclass for implementation specific details.
.SH "METHODS"
.IX Header "METHODS"
.SS "new( [\s-1FILEHANDLE\s0], [\s-1SUBCLASS\s0] )"
.IX Subsection "new( [FILEHANDLE], [SUBCLASS] )"
Almost identical to open, except that you will get an IO::Handle
back if there's no \s-1TTY\s0 to allow for IO::Pager agnostic programming.
.SS "open( [\s-1FILEHANDLE\s0], [\s-1SUBCLASS\s0] )"
.IX Subsection "open( [FILEHANDLE], [SUBCLASS] )"
Instantiate a new IO::Pager, which will paginate output sent to
\&\s-1FILEHANDLE\s0 if interacting with a \s-1TTY.\s0
.PP
Save the return value to check for errors, use as an object,
or for implict close of \s-1OO\s0 handles when the variable passes out of scope.
.IP "\s-1FILEHANDLE\s0" 4
.IX Item "FILEHANDLE"
You may provide a glob or scalar.
.Sp
Defaults to currently \fIselect()\fR\-ed \fI\s-1FILEHANDLE\s0\fR.
.IP "\s-1SUBCLASS\s0" 4
.IX Item "SUBCLASS"
Specifies which variety of IO::Pager to create.
This accepts fully qualified packages \fIIO::Pager::Buffered\fR,
or simply the third portion of the package name \fIBuffered\fR for brevity.
.Sp
Defaults to IO::Pager::Unbuffered.
.Sp
Returns false and sets \fI$!\fR on failure, same as perl's \f(CW\*(C`open\*(C'\fR.
.SS "\s-1PID\s0"
.IX Subsection "PID"
Call this method on the token returned by \f(CW\*(C`open\*(C'\fR to get the process
identifier for the child process i.e; pager; if you need to perform
some long term process management e.g; perl's \f(CW\*(C`waitpid\*(C'\fR
.PP
You can also access the \s-1PID\s0 by numifying the instantiation token like so:
.PP
.Vb 1
\&  my $child = $token+0;
.Ve
.SS "close( \s-1FILEHANDLE \s0)"
.IX Subsection "close( FILEHANDLE )"
Explicitly close the filehandle, this stops any redirection of output
on \s-1FILEHANDLE\s0 that may have been warranted.
.PP
\&\fIThis does not default to the current filehandle\fR.
.PP
Alternatively, you may rely upon the implicit close of lexical handles
as they pass out of scope e.g;
.PP
.Vb 6
\&  {
\&     IO::Pager::open local *RIBBIT;
\&     print RIBBIT "No toad sexing allowed";
\&     ...
\&  }
\&  #The filehandle is closed to additional output
\&
\&  {
\&     my $token = new IO::Pager::Buffered;
\&     $token\->print("I like trains");
\&     ...
\&  }
\&  #The string "I like trains" is flushed to the pager, and the handle closed
.Ve
.SS "binmode( \s-1FILEHANDLE \s0)"
.IX Subsection "binmode( FILEHANDLE )"
Used to set the I/O layer a.k.a. discipline of a filehandle,
such as \f(CW\*(Aq:utf8\*(Aq\fR for \s-1UTF\-8\s0 encoding.
.SS "print ( \s-1FILEHANDLE LIST \s0)"
.IX Subsection "print ( FILEHANDLE LIST )"
\&\fIprint()\fR to the filehandle.
.SS "printf ( \s-1FILEHANDLE FORMAT, LIST \s0)"
.IX Subsection "printf ( FILEHANDLE FORMAT, LIST )"
\&\fIprintf()\fR to the filehandle.
.SS "syswrite( \s-1FILEHANDLE, SCALAR,\s0 [\s-1LENGTH\s0], [\s-1OFFSET\s0] )"
.IX Subsection "syswrite( FILEHANDLE, SCALAR, [LENGTH], [OFFSET] )"
\&\fIsyswrite()\fR to the filehandle.
.SH "ENVIRONMENT"
.IX Header "ENVIRONMENT"
.IP "\s-1PAGER\s0" 4
.IX Item "PAGER"
The location of the default pager.
.IP "\s-1PATH\s0" 4
.IX Item "PATH"
If the location in \s-1PAGER\s0 is not absolute, \s-1PATH\s0 may be searched.
.Sp
See \*(L"\s-1NOTES\*(R"\s0 for more information.
.SH "FILES"
.IX Header "FILES"
IO::Pager may fall back to these binaries in order if \fI\s-1PAGER\s0\fR is not
executable.
.IP "/etc/alternatives/pager" 4
.IX Item "/etc/alternatives/pager"
.PD 0
.IP "/usr/local/bin/less" 4
.IX Item "/usr/local/bin/less"
.IP "/usr/bin/less" 4
.IX Item "/usr/bin/less"
.IP "/usr/bin/more" 4
.IX Item "/usr/bin/more"
.PD
.PP
See \*(L"\s-1NOTES\*(R"\s0 for more information.
.SH "NOTES"
.IX Header "NOTES"
The algorithm for determining which pager to use is as follows:
.IP "1. Defer to \fI\s-1PAGER\s0\fR" 4
.IX Item "1. Defer to PAGER"
If the \fI\s-1PAGER\s0\fR environment variable is set, use the pager it identifies,
unless this pager is not available.
.IP "2. Usual suspects" 4
.IX Item "2. Usual suspects"
Try the standard, hardcoded paths in \*(L"\s-1FILES\*(R"\s0.
.IP "3. File::Which" 4
.IX Item "3. File::Which"
If File::Which is available, use the first pager possible amongst
\&\f(CW\*(C`less\*(C'\fR, \f(CW\*(C`most\*(C'\fR, \f(CW\*(C`w3m\*(C'\fR, \f(CW\*(C`lv\*(C'\fR, \f(CW\*(C`pg\*(C'\fR and more.
.IP "4. more" 4
.IX Item "4. more"
Set \fI\s-1PAGER\s0\fR to \f(CW\*(C`more\*(C'\fR, and cross our fingers.
.PP
Steps 1, 3 and 4 rely upon the \fI\s-1PATH\s0\fR environment variable.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
IO::Pager::Buffered, IO::Pager::Unbuffered, IO::Pager::Page,
.PP
IO::Page, Meta::Tool::Less
.SH "AUTHOR"
.IX Header "AUTHOR"
Jerrad Pierce <jpierce@cpan.org>
.PP
Florent Angly <florent.angly@gmail.com>
.PP
This module was inspired by Monte Mitzelfelt's IO::Page 0.02
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2003\-2012 Jerrad Pierce
.IP "\(bu" 4
Thou shalt not claim ownership of unmodified materials.
.IP "\(bu" 4
Thou shalt not claim whole ownership of modified materials.
.IP "\(bu" 4
Thou shalt grant the indemnity of the provider of materials.
.IP "\(bu" 4
Thou shalt use and dispense freely without other restrictions.
.PP
Or, if you prefer:
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.0 or,
at your option, any later version of Perl 5 you may have available.
                                                                                              osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/IO::Pager::Buffered.3pm                      0100644 0001750 0001750 00000016643 12566242645 024620  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "IO::Pager::Buffered 3"
.TH IO::Pager::Buffered 3 "2012-09-04" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
IO::Pager::Buffered \- Pipe deferred output to PAGER if destination is a TTY
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 8
\&  use IO::Pager::Buffered;
\&  {
\&    local $token = IO::Pager::Buffered::open *STDOUT;
\&    print <<"  HEREDOC" ;
\&    ...
\&    A bunch of text later
\&    HEREDOC
\&  }
\&
\&  {
\&    # You can also use scalar filehandles...
\&    my $token = IO::Pager::Buffered::open($FH) or warn($!);
\&    print $FH "No globs or barewords for us thanks!\en";
\&  }
\&
\&  {
\&    # ...or an object interface
\&    my $token = new IO::Pager::Buffered;
\&
\&    $token\->print("OO shiny...\en");
\&  }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
IO::Pager subclasses are designed to programmatically decide whether
or not to pipe a filehandle's output to a program specified in \fI\s-1PAGER\s0\fR;
determined and set by IO::Pager at runtime if not yet defined.
.PP
This subclass buffers all output for display upon exiting the current scope.
If this is not what you want look at another subclass such as
IO::Pager::Unbuffered. While probably not common, this may be useful in
some cases,such as buffering all output to \s-1STDOUT\s0 while the process occurs,
showing only warnings on \s-1STDERR,\s0 then displaying the output to \s-1STDOUT\s0 after.
Or alternately letting output to \s-1STDOUT\s0 slide by and defer warnings for later
perusal.
.SH "METHODS"
.IX Header "METHODS"
Class-specific method specifics below, others are inherited from IO::Pager.
.SS "open( [\s-1FILEHANDLE\s0] )"
.IX Subsection "open( [FILEHANDLE] )"
Instantiate a new IO::Pager to paginate \s-1FILEHANDLE\s0 if necessary.
\&\fIAssign the return value to a scoped variable\fR. Output does not
occur until all references to this variable are destroyed eg;
upon leaving the current scope. See \*(L"\s-1DESCRIPTION\*(R"\s0.
.SS "new( [\s-1FILEHANDLE\s0] )"
.IX Subsection "new( [FILEHANDLE] )"
Almost identical to open, except that you will get an IO::Handle
back if there's no \s-1TTY\s0 to allow for IO::Pager agnostic programming.
.SS "tell( \s-1FILEHANDLE \s0)"
.IX Subsection "tell( FILEHANDLE )"
Returns the size of the buffer in bytes.
.SS "flush( \s-1FILEHANDLE \s0)"
.IX Subsection "flush( FILEHANDLE )"
Immediately flushes the contents of the buffer.
.PP
If the last print did not end with a newline, the text from the
preceding newline to the end of the buffer will be flushed but
is unlikely to display until a newline is printed and flushed.
.SH "CAVEATS"
.IX Header "CAVEATS"
If you mix buffered and unbuffered operations the output order is unspecified,
and will probably differ for a \s-1TTY\s0 vs. a file. See perlfunc.
.PP
\&\fI$,\fR is used see perlvar.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
IO::Pager, IO::Pager::Unbuffered, IO::Pager::Page,
.SH "AUTHOR"
.IX Header "AUTHOR"
Jerrad Pierce <jpierce@cpan.org>
.PP
Florent Angly <florent.angly@gmail.com>
.PP
This module was inspired by Monte Mitzelfelt's IO::Page 0.02
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2003\-2012 Jerrad Pierce
.IP "\(bu" 4
Thou shalt not claim ownership of unmodified materials.
.IP "\(bu" 4
Thou shalt not claim whole ownership of modified materials.
.IP "\(bu" 4
Thou shalt grant the indemnity of the provider of materials.
.IP "\(bu" 4
Thou shalt use and dispense freely without other restrictions.
.PP
Or, if you prefer:
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.0 or,
at your option, any later version of Perl 5 you may have available.
                                                                                             osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/IO::Pager::Buffered5.16.3pm                  0100644 0001750 0001750 00000016322 12566242642 025121  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "IO::Pager::Buffered 3"
.TH IO::Pager::Buffered 3 "2012-09-04" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
IO::Pager::Buffered \- Pipe deferred output to PAGER if destination is a TTY
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 8
\&  use IO::Pager::Buffered;
\&  {
\&    local $token = IO::Pager::Buffered::open *STDOUT;
\&    print <<"  HEREDOC" ;
\&    ...
\&    A bunch of text later
\&    HEREDOC
\&  }
\&
\&  {
\&    # You can also use scalar filehandles...
\&    my $token = IO::Pager::Buffered::open($FH) or warn($!);
\&    print $FH "No globs or barewords for us thanks!\en";
\&  }
\&
\&  {
\&    # ...or an object interface
\&    my $token = new IO::Pager::Buffered;
\&
\&    $token\->print("OO shiny...\en");
\&  }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
IO::Pager subclasses are designed to programmatically decide whether
or not to pipe a filehandle's output to a program specified in \fI\s-1PAGER\s0\fR;
determined and set by IO::Pager at runtime if not yet defined.
.PP
This subclass buffers all output for display upon exiting the current scope.
If this is not what you want look at another subclass such as
IO::Pager::Unbuffered. While probably not common, this may be useful in
some cases,such as buffering all output to \s-1STDOUT\s0 while the process occurs,
showing only warnings on \s-1STDERR\s0, then displaying the output to \s-1STDOUT\s0 after.
Or alternately letting output to \s-1STDOUT\s0 slide by and defer warnings for later
perusal.
.SH "METHODS"
.IX Header "METHODS"
Class-specific method specifics below, others are inherited from IO::Pager.
.SS "open( [\s-1FILEHANDLE\s0] )"
.IX Subsection "open( [FILEHANDLE] )"
Instantiate a new IO::Pager to paginate \s-1FILEHANDLE\s0 if necessary.
\&\fIAssign the return value to a scoped variable\fR. Output does not
occur until all references to this variable are destroyed eg;
upon leaving the current scope. See \*(L"\s-1DESCRIPTION\s0\*(R".
.SS "new( [\s-1FILEHANDLE\s0] )"
.IX Subsection "new( [FILEHANDLE] )"
Almost identical to open, except that you will get an IO::Handle
back if there's no \s-1TTY\s0 to allow for IO::Pager agnostic programming.
.SS "tell( \s-1FILEHANDLE\s0 )"
.IX Subsection "tell( FILEHANDLE )"
Returns the size of the buffer in bytes.
.SS "flush( \s-1FILEHANDLE\s0 )"
.IX Subsection "flush( FILEHANDLE )"
Immediately flushes the contents of the buffer.
.PP
If the last print did not end with a newline, the text from the
preceding newline to the end of the buffer will be flushed but
is unlikely to display until a newline is printed and flushed.
.SH "CAVEATS"
.IX Header "CAVEATS"
If you mix buffered and unbuffered operations the output order is unspecified,
and will probably differ for a \s-1TTY\s0 vs. a file. See perlfunc.
.PP
\&\fI$,\fR is used see perlvar.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
IO::Pager, IO::Pager::Unbuffered, IO::Pager::Page,
.SH "AUTHOR"
.IX Header "AUTHOR"
Jerrad Pierce <jpierce@cpan.org>
.PP
Florent Angly <florent.angly@gmail.com>
.PP
This module was inspired by Monte Mitzelfelt's IO::Page 0.02
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2003\-2012 Jerrad Pierce
.IP "\(bu" 4
Thou shalt not claim ownership of unmodified materials.
.IP "\(bu" 4
Thou shalt not claim whole ownership of modified materials.
.IP "\(bu" 4
Thou shalt grant the indemnity of the provider of materials.
.IP "\(bu" 4
Thou shalt use and dispense freely without other restrictions.
.PP
Or, if you prefer:
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.0 or,
at your option, any later version of Perl 5 you may have available.
                                                                                                                                                                                                                                                                                                              osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/IO::Pager::Buffered5.18.3pm                  0100644 0001750 0001750 00000016643 12566242645 025134  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "IO::Pager::Buffered 3"
.TH IO::Pager::Buffered 3 "2012-09-04" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
IO::Pager::Buffered \- Pipe deferred output to PAGER if destination is a TTY
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 8
\&  use IO::Pager::Buffered;
\&  {
\&    local $token = IO::Pager::Buffered::open *STDOUT;
\&    print <<"  HEREDOC" ;
\&    ...
\&    A bunch of text later
\&    HEREDOC
\&  }
\&
\&  {
\&    # You can also use scalar filehandles...
\&    my $token = IO::Pager::Buffered::open($FH) or warn($!);
\&    print $FH "No globs or barewords for us thanks!\en";
\&  }
\&
\&  {
\&    # ...or an object interface
\&    my $token = new IO::Pager::Buffered;
\&
\&    $token\->print("OO shiny...\en");
\&  }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
IO::Pager subclasses are designed to programmatically decide whether
or not to pipe a filehandle's output to a program specified in \fI\s-1PAGER\s0\fR;
determined and set by IO::Pager at runtime if not yet defined.
.PP
This subclass buffers all output for display upon exiting the current scope.
If this is not what you want look at another subclass such as
IO::Pager::Unbuffered. While probably not common, this may be useful in
some cases,such as buffering all output to \s-1STDOUT\s0 while the process occurs,
showing only warnings on \s-1STDERR,\s0 then displaying the output to \s-1STDOUT\s0 after.
Or alternately letting output to \s-1STDOUT\s0 slide by and defer warnings for later
perusal.
.SH "METHODS"
.IX Header "METHODS"
Class-specific method specifics below, others are inherited from IO::Pager.
.SS "open( [\s-1FILEHANDLE\s0] )"
.IX Subsection "open( [FILEHANDLE] )"
Instantiate a new IO::Pager to paginate \s-1FILEHANDLE\s0 if necessary.
\&\fIAssign the return value to a scoped variable\fR. Output does not
occur until all references to this variable are destroyed eg;
upon leaving the current scope. See \*(L"\s-1DESCRIPTION\*(R"\s0.
.SS "new( [\s-1FILEHANDLE\s0] )"
.IX Subsection "new( [FILEHANDLE] )"
Almost identical to open, except that you will get an IO::Handle
back if there's no \s-1TTY\s0 to allow for IO::Pager agnostic programming.
.SS "tell( \s-1FILEHANDLE \s0)"
.IX Subsection "tell( FILEHANDLE )"
Returns the size of the buffer in bytes.
.SS "flush( \s-1FILEHANDLE \s0)"
.IX Subsection "flush( FILEHANDLE )"
Immediately flushes the contents of the buffer.
.PP
If the last print did not end with a newline, the text from the
preceding newline to the end of the buffer will be flushed but
is unlikely to display until a newline is printed and flushed.
.SH "CAVEATS"
.IX Header "CAVEATS"
If you mix buffered and unbuffered operations the output order is unspecified,
and will probably differ for a \s-1TTY\s0 vs. a file. See perlfunc.
.PP
\&\fI$,\fR is used see perlvar.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
IO::Pager, IO::Pager::Unbuffered, IO::Pager::Page,
.SH "AUTHOR"
.IX Header "AUTHOR"
Jerrad Pierce <jpierce@cpan.org>
.PP
Florent Angly <florent.angly@gmail.com>
.PP
This module was inspired by Monte Mitzelfelt's IO::Page 0.02
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2003\-2012 Jerrad Pierce
.IP "\(bu" 4
Thou shalt not claim ownership of unmodified materials.
.IP "\(bu" 4
Thou shalt not claim whole ownership of modified materials.
.IP "\(bu" 4
Thou shalt grant the indemnity of the provider of materials.
.IP "\(bu" 4
Thou shalt use and dispense freely without other restrictions.
.PP
Or, if you prefer:
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.0 or,
at your option, any later version of Perl 5 you may have available.
                                                                                             osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/IO::Pager::Page.3pm                          0100644 0001750 0001750 00000013252 12566242645 023743  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "IO::Pager::Page 3"
.TH IO::Pager::Page 3 "2012-09-04" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
IO::Pager::Page \- Emulate IO::Page, pipe STDOUT to a pager if STDOUT is a TTY
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Pipes \s-1STDOUT\s0 to a pager if \s-1STDOUT\s0 is a \s-1TTY\s0
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
IO::Pager was designed to programmatically decide whether or not to point
the \s-1STDOUT\s0 file handle into a pipe to program specified in the \fI\s-1PAGER\s0\fR
environment variable or one of a standard list of pagers.
.SH "USAGE"
.IX Header "USAGE"
.Vb 8
\&  BEGIN {
\&    use IO::Pager::Page;
\&    # use I::P::P first, just in case another module sends output to STDOUT
\&  }
\&  print<<HEREDOC;
\&  ...
\&  A bunch of text later
\&  HEREDOC
.Ve
.PP
If you wish to forgo the potential for a \fIBroken Pipe\fR foible resulting
from the user exiting the pager prematurely, load IO::Pager::Page like so:
.PP
.Vb 1
\&  use IO::Pager::Page hush=>1;
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
IO::Page, IO::Pager, IO::Pager::Unbuffered, IO::Pager::Buffered
.SH "AUTHOR"
.IX Header "AUTHOR"
Jerrad Pierce <jpierce@cpan.org>
.PP
Florent Angly <florent.angly@gmail.com>
.PP
This module inspired by Monte Mitzelfelt's IO::Page 0.02
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2003\-2012 Jerrad Pierce
.IP "\(bu" 4
Thou shalt not claim ownership of unmodified materials.
.IP "\(bu" 4
Thou shalt not claim whole ownership of modified materials.
.IP "\(bu" 4
Thou shalt grant the indemnity of the provider of materials.
.IP "\(bu" 4
Thou shalt use and dispense freely without other restrictions.
.PP
Or, if you prefer:
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.0 or,
at your option, any later version of Perl 5 you may have available.
                                                                                                                                                                                                                                                                                                                                                      osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/IO::Pager::Page5.16.3pm                      0100644 0001750 0001750 00000012731 12566242642 024253  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "IO::Pager::Page 3"
.TH IO::Pager::Page 3 "2012-09-04" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
IO::Pager::Page \- Emulate IO::Page, pipe STDOUT to a pager if STDOUT is a TTY
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Pipes \s-1STDOUT\s0 to a pager if \s-1STDOUT\s0 is a \s-1TTY\s0
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
IO::Pager was designed to programmatically decide whether or not to point
the \s-1STDOUT\s0 file handle into a pipe to program specified in the \fI\s-1PAGER\s0\fR
environment variable or one of a standard list of pagers.
.SH "USAGE"
.IX Header "USAGE"
.Vb 8
\&  BEGIN {
\&    use IO::Pager::Page;
\&    # use I::P::P first, just in case another module sends output to STDOUT
\&  }
\&  print<<HEREDOC;
\&  ...
\&  A bunch of text later
\&  HEREDOC
.Ve
.PP
If you wish to forgo the potential for a \fIBroken Pipe\fR foible resulting
from the user exiting the pager prematurely, load IO::Pager::Page like so:
.PP
.Vb 1
\&  use IO::Pager::Page hush=>1;
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
IO::Page, IO::Pager, IO::Pager::Unbuffered, IO::Pager::Buffered
.SH "AUTHOR"
.IX Header "AUTHOR"
Jerrad Pierce <jpierce@cpan.org>
.PP
Florent Angly <florent.angly@gmail.com>
.PP
This module inspired by Monte Mitzelfelt's IO::Page 0.02
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2003\-2012 Jerrad Pierce
.IP "\(bu" 4
Thou shalt not claim ownership of unmodified materials.
.IP "\(bu" 4
Thou shalt not claim whole ownership of modified materials.
.IP "\(bu" 4
Thou shalt grant the indemnity of the provider of materials.
.IP "\(bu" 4
Thou shalt use and dispense freely without other restrictions.
.PP
Or, if you prefer:
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.0 or,
at your option, any later version of Perl 5 you may have available.
                                       osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/IO::Pager::Page5.18.3pm                      0100644 0001750 0001750 00000013252 12566242645 024257  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "IO::Pager::Page 3"
.TH IO::Pager::Page 3 "2012-09-04" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
IO::Pager::Page \- Emulate IO::Page, pipe STDOUT to a pager if STDOUT is a TTY
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Pipes \s-1STDOUT\s0 to a pager if \s-1STDOUT\s0 is a \s-1TTY\s0
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
IO::Pager was designed to programmatically decide whether or not to point
the \s-1STDOUT\s0 file handle into a pipe to program specified in the \fI\s-1PAGER\s0\fR
environment variable or one of a standard list of pagers.
.SH "USAGE"
.IX Header "USAGE"
.Vb 8
\&  BEGIN {
\&    use IO::Pager::Page;
\&    # use I::P::P first, just in case another module sends output to STDOUT
\&  }
\&  print<<HEREDOC;
\&  ...
\&  A bunch of text later
\&  HEREDOC
.Ve
.PP
If you wish to forgo the potential for a \fIBroken Pipe\fR foible resulting
from the user exiting the pager prematurely, load IO::Pager::Page like so:
.PP
.Vb 1
\&  use IO::Pager::Page hush=>1;
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
IO::Page, IO::Pager, IO::Pager::Unbuffered, IO::Pager::Buffered
.SH "AUTHOR"
.IX Header "AUTHOR"
Jerrad Pierce <jpierce@cpan.org>
.PP
Florent Angly <florent.angly@gmail.com>
.PP
This module inspired by Monte Mitzelfelt's IO::Page 0.02
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2003\-2012 Jerrad Pierce
.IP "\(bu" 4
Thou shalt not claim ownership of unmodified materials.
.IP "\(bu" 4
Thou shalt not claim whole ownership of modified materials.
.IP "\(bu" 4
Thou shalt grant the indemnity of the provider of materials.
.IP "\(bu" 4
Thou shalt use and dispense freely without other restrictions.
.PP
Or, if you prefer:
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.0 or,
at your option, any later version of Perl 5 you may have available.
                                                                                                                                                                                                                                                                                                                                                      osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/IO::Pager::Unbuffered.3pm                    0100644 0001750 0001750 00000014210 12566242646 025150  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "IO::Pager::Unbuffered 3"
.TH IO::Pager::Unbuffered 3 "2013-04-06" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
IO::Pager::Unbuffered \- Pipe output to PAGER if destination is a TTY
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 8
\&  use IO::Pager::Unbuffered;
\&  {
\&    local $STDOUT = IO::Pager::Unbuffered::open *STDOUT;
\&    print <<"  HEREDOC" ;
\&    ...
\&    A bunch of text later
\&    HEREDOC
\&  }
\&
\&  {
\&    # You can also use scalar filehandles...
\&    my $token = IO::Pager::Unbuffered::open($FH) or warn($!);
\&    print $FH "No globs or barewords for us thanks!\en";
\&  }
\&
\&  {
\&    # ...or an object interface
\&    my $token = new IO::Pager::Unbuffered;
\&
\&    $token\->print("OO shiny...\en");
\&  }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
IO::Pager subclasses are designed to programmatically decide whether
or not to pipe a filehandle's output to a program specified in \fI\s-1PAGER\s0\fR;
determined and set by IO::Pager at runtime if not yet defined.
.PP
See IO::Pager for method details.
.SH "METHODS"
.IX Header "METHODS"
All methods are inherited from IO::Pager; except for instantiation.
.SH "CAVEATS"
.IX Header "CAVEATS"
You probably want to do something with \s-1SIGPIPE\s0 eg;
.PP
.Vb 3
\&  eval {
\&    $SIG{PIPE} = sub { die };
\&    local $STDOUT = IO::Pager::open(*STDOUT);
\&
\&    while (1) {
\&      # Do something
\&    }
\&  }
\&
\&  # Do something else
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
IO::Pager, IO::Pager::Buffered, IO::Pager::Page,
.SH "AUTHOR"
.IX Header "AUTHOR"
Jerrad Pierce <jpierce@cpan.org>
.PP
Florent Angly <florent.angly@gmail.com>
.PP
This module was inspired by Monte Mitzelfelt's IO::Page 0.02
.PP
Significant proddage provided by Tye McQueen.
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2003\-2012 Jerrad Pierce
.IP "\(bu" 4
Thou shalt not claim ownership of unmodified materials.
.IP "\(bu" 4
Thou shalt not claim whole ownership of modified materials.
.IP "\(bu" 4
Thou shalt grant the indemnity of the provider of materials.
.IP "\(bu" 4
Thou shalt use and dispense freely without other restrictions.
.PP
Or, if you prefer:
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.0 or,
at your option, any later version of Perl 5 you may have available.
                                                                                                                                                                                                                                                                                                                                                                                        osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/IO::Pager::Unbuffered5.16.3pm                0100644 0001750 0001750 00000013667 12566242642 025475  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "IO::Pager::Unbuffered 3"
.TH IO::Pager::Unbuffered 3 "2012-09-04" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
IO::Pager::Unbuffered \- Pipe output to PAGER if destination is a TTY
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 8
\&  use IO::Pager::Unbuffered;
\&  {
\&    local $STDOUT = IO::Pager::Unbuffered::open *STDOUT;
\&    print <<"  HEREDOC" ;
\&    ...
\&    A bunch of text later
\&    HEREDOC
\&  }
\&
\&  {
\&    # You can also use scalar filehandles...
\&    my $token = IO::Pager::Unbuffered::open($FH) or warn($!);
\&    print $FH "No globs or barewords for us thanks!\en";
\&  }
\&
\&  {
\&    # ...or an object interface
\&    my $token = new IO::Pager::Unbuffered;
\&
\&    $token\->print("OO shiny...\en");
\&  }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
IO::Pager subclasses are designed to programmatically decide whether
or not to pipe a filehandle's output to a program specified in \fI\s-1PAGER\s0\fR;
determined and set by IO::Pager at runtime if not yet defined.
.PP
See IO::Pager for method details.
.SH "METHODS"
.IX Header "METHODS"
All methods are inherited from IO::Pager; except for instantiation.
.SH "CAVEATS"
.IX Header "CAVEATS"
You probably want to do something with \s-1SIGPIPE\s0 eg;
.PP
.Vb 3
\&  eval {
\&    $SIG{PIPE} = sub { die };
\&    local $STDOUT = IO::Pager::open(*STDOUT);
\&
\&    while (1) {
\&      # Do something
\&    }
\&  }
\&
\&  # Do something else
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
IO::Pager, IO::Pager::Buffered, IO::Pager::Page,
.SH "AUTHOR"
.IX Header "AUTHOR"
Jerrad Pierce <jpierce@cpan.org>
.PP
Florent Angly <florent.angly@gmail.com>
.PP
This module was inspired by Monte Mitzelfelt's IO::Page 0.02
.PP
Significant proddage provided by Tye McQueen.
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2003\-2012 Jerrad Pierce
.IP "\(bu" 4
Thou shalt not claim ownership of unmodified materials.
.IP "\(bu" 4
Thou shalt not claim whole ownership of modified materials.
.IP "\(bu" 4
Thou shalt grant the indemnity of the provider of materials.
.IP "\(bu" 4
Thou shalt use and dispense freely without other restrictions.
.PP
Or, if you prefer:
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.0 or,
at your option, any later version of Perl 5 you may have available.
                                                                         osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/IO::Pager::Unbuffered5.18.3pm                0100644 0001750 0001750 00000014210 12566242646 025464  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "IO::Pager::Unbuffered 3"
.TH IO::Pager::Unbuffered 3 "2013-04-06" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
IO::Pager::Unbuffered \- Pipe output to PAGER if destination is a TTY
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 8
\&  use IO::Pager::Unbuffered;
\&  {
\&    local $STDOUT = IO::Pager::Unbuffered::open *STDOUT;
\&    print <<"  HEREDOC" ;
\&    ...
\&    A bunch of text later
\&    HEREDOC
\&  }
\&
\&  {
\&    # You can also use scalar filehandles...
\&    my $token = IO::Pager::Unbuffered::open($FH) or warn($!);
\&    print $FH "No globs or barewords for us thanks!\en";
\&  }
\&
\&  {
\&    # ...or an object interface
\&    my $token = new IO::Pager::Unbuffered;
\&
\&    $token\->print("OO shiny...\en");
\&  }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
IO::Pager subclasses are designed to programmatically decide whether
or not to pipe a filehandle's output to a program specified in \fI\s-1PAGER\s0\fR;
determined and set by IO::Pager at runtime if not yet defined.
.PP
See IO::Pager for method details.
.SH "METHODS"
.IX Header "METHODS"
All methods are inherited from IO::Pager; except for instantiation.
.SH "CAVEATS"
.IX Header "CAVEATS"
You probably want to do something with \s-1SIGPIPE\s0 eg;
.PP
.Vb 3
\&  eval {
\&    $SIG{PIPE} = sub { die };
\&    local $STDOUT = IO::Pager::open(*STDOUT);
\&
\&    while (1) {
\&      # Do something
\&    }
\&  }
\&
\&  # Do something else
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
IO::Pager, IO::Pager::Buffered, IO::Pager::Page,
.SH "AUTHOR"
.IX Header "AUTHOR"
Jerrad Pierce <jpierce@cpan.org>
.PP
Florent Angly <florent.angly@gmail.com>
.PP
This module was inspired by Monte Mitzelfelt's IO::Page 0.02
.PP
Significant proddage provided by Tye McQueen.
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2003\-2012 Jerrad Pierce
.IP "\(bu" 4
Thou shalt not claim ownership of unmodified materials.
.IP "\(bu" 4
Thou shalt not claim whole ownership of modified materials.
.IP "\(bu" 4
Thou shalt grant the indemnity of the provider of materials.
.IP "\(bu" 4
Thou shalt use and dispense freely without other restrictions.
.PP
Or, if you prefer:
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.0 or,
at your option, any later version of Perl 5 you may have available.
                                                                                                                                                                                                                                                                                                                                                                                        osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/IO::Pipe.3pm                                 0100644 0001750 0001750 00000015236 12566207456 022626  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "IO::Pipe 3pm"
.TH IO::Pipe 3pm "2013-11-04" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
IO::Pipe \- supply object methods for pipes
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&        use IO::Pipe;
\&
\&        $pipe = IO::Pipe\->new();
\&
\&        if($pid = fork()) { # Parent
\&            $pipe\->reader();
\&
\&            while(<$pipe>) {
\&                ...
\&            }
\&
\&        }
\&        elsif(defined $pid) { # Child
\&            $pipe\->writer();
\&
\&            print $pipe ...
\&        }
\&
\&        or
\&
\&        $pipe = IO::Pipe\->new();
\&
\&        $pipe\->reader(qw(ls \-l));
\&
\&        while(<$pipe>) {
\&            ...
\&        }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`IO::Pipe\*(C'\fR provides an interface to creating pipes between
processes.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.IP "new ( [\s-1READER, WRITER\s0] )" 4
.IX Item "new ( [READER, WRITER] )"
Creates an \f(CW\*(C`IO::Pipe\*(C'\fR, which is a reference to a newly created symbol
(see the \f(CW\*(C`Symbol\*(C'\fR package). \f(CW\*(C`IO::Pipe::new\*(C'\fR optionally takes two
arguments, which should be objects blessed into \f(CW\*(C`IO::Handle\*(C'\fR, or a
subclass thereof. These two objects will be used for the system call
to \f(CW\*(C`pipe\*(C'\fR. If no arguments are given then method \f(CW\*(C`handles\*(C'\fR is called
on the new \f(CW\*(C`IO::Pipe\*(C'\fR object.
.Sp
These two handles are held in the array part of the \s-1GLOB\s0 until either
\&\f(CW\*(C`reader\*(C'\fR or \f(CW\*(C`writer\*(C'\fR is called.
.SH "METHODS"
.IX Header "METHODS"
.IP "reader ([\s-1ARGS\s0])" 4
.IX Item "reader ([ARGS])"
The object is re-blessed into a sub-class of \f(CW\*(C`IO::Handle\*(C'\fR, and becomes a
handle at the reading end of the pipe. If \f(CW\*(C`ARGS\*(C'\fR are given then \f(CW\*(C`fork\*(C'\fR
is called and \f(CW\*(C`ARGS\*(C'\fR are passed to exec.
.IP "writer ([\s-1ARGS\s0])" 4
.IX Item "writer ([ARGS])"
The object is re-blessed into a sub-class of \f(CW\*(C`IO::Handle\*(C'\fR, and becomes a
handle at the writing end of the pipe. If \f(CW\*(C`ARGS\*(C'\fR are given then \f(CW\*(C`fork\*(C'\fR
is called and \f(CW\*(C`ARGS\*(C'\fR are passed to exec.
.IP "handles ()" 4
.IX Item "handles ()"
This method is called during construction by \f(CW\*(C`IO::Pipe::new\*(C'\fR
on the newly created \f(CW\*(C`IO::Pipe\*(C'\fR object. It returns an array of two objects
blessed into \f(CW\*(C`IO::Pipe::End\*(C'\fR, or a subclass thereof.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
IO::Handle
.SH "AUTHOR"
.IX Header "AUTHOR"
Graham Barr. Currently maintained by the Perl Porters.  Please report all
bugs to <perlbug@perl.org>.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 1996\-8 Graham Barr <gbarr@pobox.com>. All rights reserved.
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
                                                                                                                                                                                                                                                                                                                                                                  osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/IO::Pipe5.16.3pm                             0100644 0001750 0001750 00000014724 12566207435 023136  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "IO::Pipe 3pm"
.TH IO::Pipe 3pm "2013-03-04" "perl v5.16.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
IO::Pipe \- supply object methods for pipes
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&        use IO::Pipe;
\&
\&        $pipe = IO::Pipe\->new();
\&
\&        if($pid = fork()) { # Parent
\&            $pipe\->reader();
\&
\&            while(<$pipe>) {
\&                ...
\&            }
\&
\&        }
\&        elsif(defined $pid) { # Child
\&            $pipe\->writer();
\&
\&            print $pipe ...
\&        }
\&
\&        or
\&
\&        $pipe = IO::Pipe\->new();
\&
\&        $pipe\->reader(qw(ls \-l));
\&
\&        while(<$pipe>) {
\&            ...
\&        }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`IO::Pipe\*(C'\fR provides an interface to creating pipes between
processes.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.IP "new ( [\s-1READER\s0, \s-1WRITER\s0] )" 4
.IX Item "new ( [READER, WRITER] )"
Creates an \f(CW\*(C`IO::Pipe\*(C'\fR, which is a reference to a newly created symbol
(see the \f(CW\*(C`Symbol\*(C'\fR package). \f(CW\*(C`IO::Pipe::new\*(C'\fR optionally takes two
arguments, which should be objects blessed into \f(CW\*(C`IO::Handle\*(C'\fR, or a
subclass thereof. These two objects will be used for the system call
to \f(CW\*(C`pipe\*(C'\fR. If no arguments are given then method \f(CW\*(C`handles\*(C'\fR is called
on the new \f(CW\*(C`IO::Pipe\*(C'\fR object.
.Sp
These two handles are held in the array part of the \s-1GLOB\s0 until either
\&\f(CW\*(C`reader\*(C'\fR or \f(CW\*(C`writer\*(C'\fR is called.
.SH "METHODS"
.IX Header "METHODS"
.IP "reader ([\s-1ARGS\s0])" 4
.IX Item "reader ([ARGS])"
The object is re-blessed into a sub-class of \f(CW\*(C`IO::Handle\*(C'\fR, and becomes a
handle at the reading end of the pipe. If \f(CW\*(C`ARGS\*(C'\fR are given then \f(CW\*(C`fork\*(C'\fR
is called and \f(CW\*(C`ARGS\*(C'\fR are passed to exec.
.IP "writer ([\s-1ARGS\s0])" 4
.IX Item "writer ([ARGS])"
The object is re-blessed into a sub-class of \f(CW\*(C`IO::Handle\*(C'\fR, and becomes a
handle at the writing end of the pipe. If \f(CW\*(C`ARGS\*(C'\fR are given then \f(CW\*(C`fork\*(C'\fR
is called and \f(CW\*(C`ARGS\*(C'\fR are passed to exec.
.IP "handles ()" 4
.IX Item "handles ()"
This method is called during construction by \f(CW\*(C`IO::Pipe::new\*(C'\fR
on the newly created \f(CW\*(C`IO::Pipe\*(C'\fR object. It returns an array of two objects
blessed into \f(CW\*(C`IO::Pipe::End\*(C'\fR, or a subclass thereof.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
IO::Handle
.SH "AUTHOR"
.IX Header "AUTHOR"
Graham Barr. Currently maintained by the Perl Porters.  Please report all
bugs to <perlbug@perl.org>.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 1996\-8 Graham Barr <gbarr@pobox.com>. All rights reserved.
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
                                            osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/IO::Pipe5.18.3pm                             0100644 0001750 0001750 00000015236 12566207456 023142  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "IO::Pipe 3pm"
.TH IO::Pipe 3pm "2013-11-04" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
IO::Pipe \- supply object methods for pipes
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&        use IO::Pipe;
\&
\&        $pipe = IO::Pipe\->new();
\&
\&        if($pid = fork()) { # Parent
\&            $pipe\->reader();
\&
\&            while(<$pipe>) {
\&                ...
\&            }
\&
\&        }
\&        elsif(defined $pid) { # Child
\&            $pipe\->writer();
\&
\&            print $pipe ...
\&        }
\&
\&        or
\&
\&        $pipe = IO::Pipe\->new();
\&
\&        $pipe\->reader(qw(ls \-l));
\&
\&        while(<$pipe>) {
\&            ...
\&        }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`IO::Pipe\*(C'\fR provides an interface to creating pipes between
processes.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.IP "new ( [\s-1READER, WRITER\s0] )" 4
.IX Item "new ( [READER, WRITER] )"
Creates an \f(CW\*(C`IO::Pipe\*(C'\fR, which is a reference to a newly created symbol
(see the \f(CW\*(C`Symbol\*(C'\fR package). \f(CW\*(C`IO::Pipe::new\*(C'\fR optionally takes two
arguments, which should be objects blessed into \f(CW\*(C`IO::Handle\*(C'\fR, or a
subclass thereof. These two objects will be used for the system call
to \f(CW\*(C`pipe\*(C'\fR. If no arguments are given then method \f(CW\*(C`handles\*(C'\fR is called
on the new \f(CW\*(C`IO::Pipe\*(C'\fR object.
.Sp
These two handles are held in the array part of the \s-1GLOB\s0 until either
\&\f(CW\*(C`reader\*(C'\fR or \f(CW\*(C`writer\*(C'\fR is called.
.SH "METHODS"
.IX Header "METHODS"
.IP "reader ([\s-1ARGS\s0])" 4
.IX Item "reader ([ARGS])"
The object is re-blessed into a sub-class of \f(CW\*(C`IO::Handle\*(C'\fR, and becomes a
handle at the reading end of the pipe. If \f(CW\*(C`ARGS\*(C'\fR are given then \f(CW\*(C`fork\*(C'\fR
is called and \f(CW\*(C`ARGS\*(C'\fR are passed to exec.
.IP "writer ([\s-1ARGS\s0])" 4
.IX Item "writer ([ARGS])"
The object is re-blessed into a sub-class of \f(CW\*(C`IO::Handle\*(C'\fR, and becomes a
handle at the writing end of the pipe. If \f(CW\*(C`ARGS\*(C'\fR are given then \f(CW\*(C`fork\*(C'\fR
is called and \f(CW\*(C`ARGS\*(C'\fR are passed to exec.
.IP "handles ()" 4
.IX Item "handles ()"
This method is called during construction by \f(CW\*(C`IO::Pipe::new\*(C'\fR
on the newly created \f(CW\*(C`IO::Pipe\*(C'\fR object. It returns an array of two objects
blessed into \f(CW\*(C`IO::Pipe::End\*(C'\fR, or a subclass thereof.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
IO::Handle
.SH "AUTHOR"
.IX Header "AUTHOR"
Graham Barr. Currently maintained by the Perl Porters.  Please report all
bugs to <perlbug@perl.org>.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 1996\-8 Graham Barr <gbarr@pobox.com>. All rights reserved.
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
                                                                                                                                                                                                                                                                                                                                                                  osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/IO::Poll.3pm                                 0100644 0001750 0001750 00000014366 12566207456 022642  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "IO::Poll 3pm"
.TH IO::Poll 3pm "2013-11-04" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
IO::Poll \- Object interface to system poll call
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use IO::Poll qw(POLLRDNORM POLLWRNORM POLLIN POLLHUP);
\&
\&    $poll = IO::Poll\->new();
\&
\&    $poll\->mask($input_handle => POLLIN);
\&    $poll\->mask($output_handle => POLLOUT);
\&
\&    $poll\->poll($timeout);
\&
\&    $ev = $poll\->events($input);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`IO::Poll\*(C'\fR is a simple interface to the system level poll routine.
.SH "METHODS"
.IX Header "METHODS"
.IP "mask ( \s-1IO\s0 [, \s-1EVENT_MASK \s0] )" 4
.IX Item "mask ( IO [, EVENT_MASK ] )"
If \s-1EVENT_MASK\s0 is given, then, if \s-1EVENT_MASK\s0 is non-zero, \s-1IO\s0 is added to the
list of file descriptors and the next call to poll will check for
any event specified in \s-1EVENT_MASK.\s0 If \s-1EVENT_MASK\s0 is zero then \s-1IO\s0 will be
removed from the list of file descriptors.
.Sp
If \s-1EVENT_MASK\s0 is not given then the return value will be the current
event mask value for \s-1IO.\s0
.IP "poll ( [ \s-1TIMEOUT \s0] )" 4
.IX Item "poll ( [ TIMEOUT ] )"
Call the system level poll routine. If \s-1TIMEOUT\s0 is not specified then the
call will block. Returns the number of handles which had events
happen, or \-1 on error.
.IP "events ( \s-1IO \s0)" 4
.IX Item "events ( IO )"
Returns the event mask which represents the events that happened on \s-1IO\s0
during the last call to \f(CW\*(C`poll\*(C'\fR.
.IP "remove ( \s-1IO \s0)" 4
.IX Item "remove ( IO )"
Remove \s-1IO\s0 from the list of file descriptors for the next poll.
.IP "handles( [ \s-1EVENT_MASK \s0] )" 4
.IX Item "handles( [ EVENT_MASK ] )"
Returns a list of handles. If \s-1EVENT_MASK\s0 is not given then a list of all
handles known will be returned. If \s-1EVENT_MASK\s0 is given then a list
of handles will be returned which had one of the events specified by
\&\s-1EVENT_MASK\s0 happen during the last call ti \f(CW\*(C`poll\*(C'\fR
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIpoll\fR\|(2), IO::Handle, IO::Select
.SH "AUTHOR"
.IX Header "AUTHOR"
Graham Barr. Currently maintained by the Perl Porters.  Please report all
bugs to <perlbug@perl.org>.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 1997\-8 Graham Barr <gbarr@pobox.com>. All rights reserved.
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
                                                                                                                                                                                                                                                                          osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/IO::Poll5.16.3pm                             0100644 0001750 0001750 00000014045 12566207435 023143  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "IO::Poll 3pm"
.TH IO::Poll 3pm "2013-03-04" "perl v5.16.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
IO::Poll \- Object interface to system poll call
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use IO::Poll qw(POLLRDNORM POLLWRNORM POLLIN POLLHUP);
\&
\&    $poll = IO::Poll\->new();
\&
\&    $poll\->mask($input_handle => POLLIN);
\&    $poll\->mask($output_handle => POLLOUT);
\&
\&    $poll\->poll($timeout);
\&
\&    $ev = $poll\->events($input);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`IO::Poll\*(C'\fR is a simple interface to the system level poll routine.
.SH "METHODS"
.IX Header "METHODS"
.IP "mask ( \s-1IO\s0 [, \s-1EVENT_MASK\s0 ] )" 4
.IX Item "mask ( IO [, EVENT_MASK ] )"
If \s-1EVENT_MASK\s0 is given, then, if \s-1EVENT_MASK\s0 is non-zero, \s-1IO\s0 is added to the
list of file descriptors and the next call to poll will check for
any event specified in \s-1EVENT_MASK\s0. If \s-1EVENT_MASK\s0 is zero then \s-1IO\s0 will be
removed from the list of file descriptors.
.Sp
If \s-1EVENT_MASK\s0 is not given then the return value will be the current
event mask value for \s-1IO\s0.
.IP "poll ( [ \s-1TIMEOUT\s0 ] )" 4
.IX Item "poll ( [ TIMEOUT ] )"
Call the system level poll routine. If \s-1TIMEOUT\s0 is not specified then the
call will block. Returns the number of handles which had events
happen, or \-1 on error.
.IP "events ( \s-1IO\s0 )" 4
.IX Item "events ( IO )"
Returns the event mask which represents the events that happened on \s-1IO\s0
during the last call to \f(CW\*(C`poll\*(C'\fR.
.IP "remove ( \s-1IO\s0 )" 4
.IX Item "remove ( IO )"
Remove \s-1IO\s0 from the list of file descriptors for the next poll.
.IP "handles( [ \s-1EVENT_MASK\s0 ] )" 4
.IX Item "handles( [ EVENT_MASK ] )"
Returns a list of handles. If \s-1EVENT_MASK\s0 is not given then a list of all
handles known will be returned. If \s-1EVENT_MASK\s0 is given then a list
of handles will be returned which had one of the events specified by
\&\s-1EVENT_MASK\s0 happen during the last call ti \f(CW\*(C`poll\*(C'\fR
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIpoll\fR\|(2), IO::Handle, IO::Select
.SH "AUTHOR"
.IX Header "AUTHOR"
Graham Barr. Currently maintained by the Perl Porters.  Please report all
bugs to <perlbug@perl.org>.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 1997\-8 Graham Barr <gbarr@pobox.com>. All rights reserved.
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/IO::Poll5.18.3pm                             0100644 0001750 0001750 00000014366 12566207456 023156  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "IO::Poll 3pm"
.TH IO::Poll 3pm "2013-11-04" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
IO::Poll \- Object interface to system poll call
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use IO::Poll qw(POLLRDNORM POLLWRNORM POLLIN POLLHUP);
\&
\&    $poll = IO::Poll\->new();
\&
\&    $poll\->mask($input_handle => POLLIN);
\&    $poll\->mask($output_handle => POLLOUT);
\&
\&    $poll\->poll($timeout);
\&
\&    $ev = $poll\->events($input);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`IO::Poll\*(C'\fR is a simple interface to the system level poll routine.
.SH "METHODS"
.IX Header "METHODS"
.IP "mask ( \s-1IO\s0 [, \s-1EVENT_MASK \s0] )" 4
.IX Item "mask ( IO [, EVENT_MASK ] )"
If \s-1EVENT_MASK\s0 is given, then, if \s-1EVENT_MASK\s0 is non-zero, \s-1IO\s0 is added to the
list of file descriptors and the next call to poll will check for
any event specified in \s-1EVENT_MASK.\s0 If \s-1EVENT_MASK\s0 is zero then \s-1IO\s0 will be
removed from the list of file descriptors.
.Sp
If \s-1EVENT_MASK\s0 is not given then the return value will be the current
event mask value for \s-1IO.\s0
.IP "poll ( [ \s-1TIMEOUT \s0] )" 4
.IX Item "poll ( [ TIMEOUT ] )"
Call the system level poll routine. If \s-1TIMEOUT\s0 is not specified then the
call will block. Returns the number of handles which had events
happen, or \-1 on error.
.IP "events ( \s-1IO \s0)" 4
.IX Item "events ( IO )"
Returns the event mask which represents the events that happened on \s-1IO\s0
during the last call to \f(CW\*(C`poll\*(C'\fR.
.IP "remove ( \s-1IO \s0)" 4
.IX Item "remove ( IO )"
Remove \s-1IO\s0 from the list of file descriptors for the next poll.
.IP "handles( [ \s-1EVENT_MASK \s0] )" 4
.IX Item "handles( [ EVENT_MASK ] )"
Returns a list of handles. If \s-1EVENT_MASK\s0 is not given then a list of all
handles known will be returned. If \s-1EVENT_MASK\s0 is given then a list
of handles will be returned which had one of the events specified by
\&\s-1EVENT_MASK\s0 happen during the last call ti \f(CW\*(C`poll\*(C'\fR
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIpoll\fR\|(2), IO::Handle, IO::Select
.SH "AUTHOR"
.IX Header "AUTHOR"
Graham Barr. Currently maintained by the Perl Porters.  Please report all
bugs to <perlbug@perl.org>.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 1997\-8 Graham Barr <gbarr@pobox.com>. All rights reserved.
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
                                                                                                                                                                                                                                                                          osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/IO::Pty.3pm                                  0100644 0001750 0001750 00000023162 12566241776 022505  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Pty 3"
.TH Pty 3 "2010-10-11" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
IO::Pty \- Pseudo TTY object class
.SH "VERSION"
.IX Header "VERSION"
1.10
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use IO::Pty;
\&
\&    $pty = new IO::Pty;
\&
\&    $slave  = $pty\->slave;
\&
\&    foreach $val (1..10) {
\&        print $pty "$val\en";
\&        $_ = <$slave>;
\&        print "$_";
\&    }
\&
\&    close($slave);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`IO::Pty\*(C'\fR provides an interface to allow the creation of a pseudo tty.
.PP
\&\f(CW\*(C`IO::Pty\*(C'\fR inherits from \f(CW\*(C`IO::Handle\*(C'\fR and so provide all the methods
defined by the \f(CW\*(C`IO::Handle\*(C'\fR package.
.PP
Please note that pty creation is very system-dependend.  If you have
problems, see IO::Tty for help.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.IP "new" 3
.IX Item "new"
The \f(CW\*(C`new\*(C'\fR constructor takes no arguments and returns a new file
object which is the master side of the pseudo tty.
.SH "METHODS"
.IX Header "METHODS"
.IP "\fIttyname()\fR" 4
.IX Item "ttyname()"
Returns the name of the slave pseudo tty. On \s-1UNIX\s0 machines this will
be the pathname of the device.  Use this name for informational
purpose only, to get a slave filehandle, use \fIslave()\fR.
.IP "\fIslave()\fR" 4
.IX Item "slave()"
The \f(CW\*(C`slave\*(C'\fR method will return the slave filehandle of the given
master pty, opening it anew if necessary.  If IO::Stty is installed,
you can then call \f(CW\*(C`$slave\->stty()\*(C'\fR to modify the terminal settings.
.IP "\fIclose_slave()\fR" 4
.IX Item "close_slave()"
The slave filehandle will be closed and destroyed.  This is necessary
in the parent after forking to get rid of the open filehandle,
otherwise the parent will not notice if the child exits.  Subsequent
calls of \f(CW\*(C`slave()\*(C'\fR will return a newly opened slave filehandle.
.IP "\fImake_slave_controlling_terminal()\fR" 4
.IX Item "make_slave_controlling_terminal()"
This will set the slave filehandle as the controlling terminal of the
current process, which will become a session leader, so this should
only be called by a child process after a \fIfork()\fR, e.g. in the callback
to \f(CW\*(C`sync_exec()\*(C'\fR (see Proc::SyncExec).  See the \f(CW\*(C`try\*(C'\fR script
(also \f(CW\*(C`test.pl\*(C'\fR) for an example how to correctly spawn a subprocess.
.IP "\fIset_raw()\fR" 4
.IX Item "set_raw()"
Will set the pty to raw.  Note that this is a one-way operation, you
need IO::Stty to set the terminal settings to anything else.
.Sp
On some systems, the master pty is not a tty.  This method checks for
that and returns success anyway on such systems.  Note that this
method must be called on the slave, and probably should be called on
the master, just to be sure, i.e.
.Sp
.Vb 2
\&  $pty\->slave\->set_raw();
\&  $pty\->set_raw();
.Ve
.IP "clone_winsize_from(\e*FH)" 4
.IX Item "clone_winsize_from(*FH)"
Gets the terminal size from filehandle \s-1FH \s0(which must be a terminal)
and transfers it to the pty.  Returns true on success and undef on
failure.  Note that this must be called upon the \fIslave\fR, i.e.
.Sp
.Vb 1
\& $pty\->slave\->clone_winsize_from(\e*STDIN);
.Ve
.Sp
On some systems, the master pty also isatty.  I actually have no
idea if setting terminal sizes there is passed through to the slave,
so if this method is called for a master that is not a tty, it
silently returns \s-1OK.\s0
.Sp
See the \f(CW\*(C`try\*(C'\fR script for example code how to propagate \s-1SIGWINCH.\s0
.SH "SEE ALSO"
.IX Header "SEE ALSO"
IO::Tty, IO::Tty::Constant, IO::Handle, Expect, Proc::SyncExec
.SH "MAILING LISTS"
.IX Header "MAILING LISTS"
As this module is mainly used by Expect, support for it is available
via the two Expect mailing lists, expectperl-announce and
expectperl-discuss, at
.PP
.Vb 1
\&  http://lists.sourceforge.net/lists/listinfo/expectperl\-announce
.Ve
.PP
and
.PP
.Vb 1
\&  http://lists.sourceforge.net/lists/listinfo/expectperl\-discuss
.Ve
.SH "AUTHORS"
.IX Header "AUTHORS"
Originally by Graham Barr <\fIgbarr@pobox.com\fR>, based on the
Ptty module by Nick Ing-Simmons <\fInik@tiuk.ti.com\fR>.
.PP
Now maintained and heavily rewritten by Roland Giersig
<\fIRGiersig@cpan.org\fR>.
.PP
Contains copyrighted stuff from openssh v3.0p1, authored by 
Tatu Ylonen <ylo@cs.hut.fi>, Markus Friedl and Todd C. Miller
<Todd.Miller@courtesan.com>.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Now all code is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
.PP
Nevertheless the above \s-1AUTHORS\s0 retain their copyrights to the various
parts and want to receive credit if their source code is used.
See the source for details.
.SH "DISCLAIMER"
.IX Header "DISCLAIMER"
\&\s-1THIS SOFTWARE IS PROVIDED\s0 ``\s-1AS IS\s0'' \s-1AND ANY EXPRESS OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES \s0(\s-1INCLUDING,
BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES\s0; \s-1LOSS
OF USE, DATA, OR PROFITS\s0; \s-1OR BUSINESS INTERRUPTION\s0) \s-1HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
TORT \s0(\s-1INCLUDING NEGLIGENCE OR OTHERWISE\s0) \s-1ARISING IN ANY WAY OUT OF THE
USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
DAMAGE.\s0
.PP
In other words: Use at your own risk.  Provided as is.  Your mileage
may vary.  Read the source, Luke!
.PP
And finally, just to be sure:
.PP
Any Use of This Product, in Any Manner Whatsoever, Will Increase the
Amount of Disorder in the Universe. Although No Liability Is Implied
Herein, the Consumer Is Warned That This Process Will Ultimately Lead
to the Heat Death of the Universe.
                                                                                                                                                                                                                                                                                                                                                                                                              osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/IO::Pty5.16.3pm                              0100644 0001750 0001750 00000024134 12566241774 023015  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Pty 3"
.TH Pty 3 "2010-10-11" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
IO::Pty \- Pseudo TTY object class
.SH "VERSION"
.IX Header "VERSION"
1.10
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use IO::Pty;
\&
\&    $pty = new IO::Pty;
\&
\&    $slave  = $pty\->slave;
\&
\&    foreach $val (1..10) {
\&        print $pty "$val\en";
\&        $_ = <$slave>;
\&        print "$_";
\&    }
\&
\&    close($slave);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`IO::Pty\*(C'\fR provides an interface to allow the creation of a pseudo tty.
.PP
\&\f(CW\*(C`IO::Pty\*(C'\fR inherits from \f(CW\*(C`IO::Handle\*(C'\fR and so provide all the methods
defined by the \f(CW\*(C`IO::Handle\*(C'\fR package.
.PP
Please note that pty creation is very system-dependend.  If you have
problems, see IO::Tty for help.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.IP "new" 3
.IX Item "new"
The \f(CW\*(C`new\*(C'\fR constructor takes no arguments and returns a new file
object which is the master side of the pseudo tty.
.SH "METHODS"
.IX Header "METHODS"
.IP "\fIttyname()\fR" 4
.IX Item "ttyname()"
Returns the name of the slave pseudo tty. On \s-1UNIX\s0 machines this will
be the pathname of the device.  Use this name for informational
purpose only, to get a slave filehandle, use \fIslave()\fR.
.IP "\fIslave()\fR" 4
.IX Item "slave()"
The \f(CW\*(C`slave\*(C'\fR method will return the slave filehandle of the given
master pty, opening it anew if necessary.  If IO::Stty is installed,
you can then call \f(CW\*(C`$slave\->stty()\*(C'\fR to modify the terminal settings.
.IP "\fIclose_slave()\fR" 4
.IX Item "close_slave()"
The slave filehandle will be closed and destroyed.  This is necessary
in the parent after forking to get rid of the open filehandle,
otherwise the parent will not notice if the child exits.  Subsequent
calls of \f(CW\*(C`slave()\*(C'\fR will return a newly opened slave filehandle.
.IP "\fImake_slave_controlling_terminal()\fR" 4
.IX Item "make_slave_controlling_terminal()"
This will set the slave filehandle as the controlling terminal of the
current process, which will become a session leader, so this should
only be called by a child process after a \fIfork()\fR, e.g. in the callback
to \f(CW\*(C`sync_exec()\*(C'\fR (see Proc::SyncExec).  See the \f(CW\*(C`try\*(C'\fR script
(also \f(CW\*(C`test.pl\*(C'\fR) for an example how to correctly spawn a subprocess.
.IP "\fIset_raw()\fR" 4
.IX Item "set_raw()"
Will set the pty to raw.  Note that this is a one-way operation, you
need IO::Stty to set the terminal settings to anything else.
.Sp
On some systems, the master pty is not a tty.  This method checks for
that and returns success anyway on such systems.  Note that this
method must be called on the slave, and probably should be called on
the master, just to be sure, i.e.
.Sp
.Vb 2
\&  $pty\->slave\->set_raw();
\&  $pty\->set_raw();
.Ve
.IP "clone_winsize_from(\e*FH)" 4
.IX Item "clone_winsize_from(*FH)"
Gets the terminal size from filehandle \s-1FH\s0 (which must be a terminal)
and transfers it to the pty.  Returns true on success and undef on
failure.  Note that this must be called upon the \fIslave\fR, i.e.
.Sp
.Vb 1
\& $pty\->slave\->clone_winsize_from(\e*STDIN);
.Ve
.Sp
On some systems, the master pty also isatty.  I actually have no
idea if setting terminal sizes there is passed through to the slave,
so if this method is called for a master that is not a tty, it
silently returns \s-1OK\s0.
.Sp
See the \f(CW\*(C`try\*(C'\fR script for example code how to propagate \s-1SIGWINCH\s0.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
IO::Tty, IO::Tty::Constant, IO::Handle, Expect, Proc::SyncExec
.SH "MAILING LISTS"
.IX Header "MAILING LISTS"
As this module is mainly used by Expect, support for it is available
via the two Expect mailing lists, expectperl-announce and
expectperl-discuss, at
.PP
.Vb 1
\&  http://lists.sourceforge.net/lists/listinfo/expectperl\-announce
.Ve
.PP
and
.PP
.Vb 1
\&  http://lists.sourceforge.net/lists/listinfo/expectperl\-discuss
.Ve
.SH "AUTHORS"
.IX Header "AUTHORS"
Originally by Graham Barr <\fIgbarr@pobox.com\fR>, based on the
Ptty module by Nick Ing-Simmons <\fInik@tiuk.ti.com\fR>.
.PP
Now maintained and heavily rewritten by Roland Giersig
<\fIRGiersig@cpan.org\fR>.
.PP
Contains copyrighted stuff from openssh v3.0p1, authored by 
Tatu Ylonen <ylo@cs.hut.fi>, Markus Friedl and Todd C. Miller
<Todd.Miller@courtesan.com>.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Now all code is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
.PP
Nevertheless the above \s-1AUTHORS\s0 retain their copyrights to the various
parts and want to receive credit if their source code is used.
See the source for details.
.SH "DISCLAIMER"
.IX Header "DISCLAIMER"
\&\s-1THIS\s0 \s-1SOFTWARE\s0 \s-1IS\s0 \s-1PROVIDED\s0 ``\s-1AS\s0 \s-1IS\s0'' \s-1AND\s0 \s-1ANY\s0 \s-1EXPRESS\s0 \s-1OR\s0 \s-1IMPLIED\s0
\&\s-1WARRANTIES\s0, \s-1INCLUDING\s0, \s-1BUT\s0 \s-1NOT\s0 \s-1LIMITED\s0 \s-1TO\s0, \s-1THE\s0 \s-1IMPLIED\s0 \s-1WARRANTIES\s0 \s-1OF\s0
\&\s-1MERCHANTABILITY\s0 \s-1AND\s0 \s-1FITNESS\s0 \s-1FOR\s0 A \s-1PARTICULAR\s0 \s-1PURPOSE\s0 \s-1ARE\s0 \s-1DISCLAIMED\s0.
\&\s-1IN\s0 \s-1NO\s0 \s-1EVENT\s0 \s-1SHALL\s0 \s-1THE\s0 \s-1AUTHORS\s0 \s-1BE\s0 \s-1LIABLE\s0 \s-1FOR\s0 \s-1ANY\s0 \s-1DIRECT\s0, \s-1INDIRECT\s0,
\&\s-1INCIDENTAL\s0, \s-1SPECIAL\s0, \s-1EXEMPLARY\s0, \s-1OR\s0 \s-1CONSEQUENTIAL\s0 \s-1DAMAGES\s0 (\s-1INCLUDING\s0,
\&\s-1BUT\s0 \s-1NOT\s0 \s-1LIMITED\s0 \s-1TO\s0, \s-1PROCUREMENT\s0 \s-1OF\s0 \s-1SUBSTITUTE\s0 \s-1GOODS\s0 \s-1OR\s0 \s-1SERVICES\s0; \s-1LOSS\s0
\&\s-1OF\s0 \s-1USE\s0, \s-1DATA\s0, \s-1OR\s0 \s-1PROFITS\s0; \s-1OR\s0 \s-1BUSINESS\s0 \s-1INTERRUPTION\s0) \s-1HOWEVER\s0 \s-1CAUSED\s0 \s-1AND\s0
\&\s-1ON\s0 \s-1ANY\s0 \s-1THEORY\s0 \s-1OF\s0 \s-1LIABILITY\s0, \s-1WHETHER\s0 \s-1IN\s0 \s-1CONTRACT\s0, \s-1STRICT\s0 \s-1LIABILITY\s0, \s-1OR\s0
\&\s-1TORT\s0 (\s-1INCLUDING\s0 \s-1NEGLIGENCE\s0 \s-1OR\s0 \s-1OTHERWISE\s0) \s-1ARISING\s0 \s-1IN\s0 \s-1ANY\s0 \s-1WAY\s0 \s-1OUT\s0 \s-1OF\s0 \s-1THE\s0
\&\s-1USE\s0 \s-1OF\s0 \s-1THIS\s0 \s-1SOFTWARE\s0, \s-1EVEN\s0 \s-1IF\s0 \s-1ADVISED\s0 \s-1OF\s0 \s-1THE\s0 \s-1POSSIBILITY\s0 \s-1OF\s0 \s-1SUCH\s0
\&\s-1DAMAGE\s0.
.PP
In other words: Use at your own risk.  Provided as is.  Your mileage
may vary.  Read the source, Luke!
.PP
And finally, just to be sure:
.PP
Any Use of This Product, in Any Manner Whatsoever, Will Increase the
Amount of Disorder in the Universe. Although No Liability Is Implied
Herein, the Consumer Is Warned That This Process Will Ultimately Lead
to the Heat Death of the Universe.
                                                                                                                                                                                                                                                                                                                                                                                                                                    osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/IO::Pty5.18.3pm                              0100644 0001750 0001750 00000023162 12566241776 023021  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Pty 3"
.TH Pty 3 "2010-10-11" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
IO::Pty \- Pseudo TTY object class
.SH "VERSION"
.IX Header "VERSION"
1.10
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use IO::Pty;
\&
\&    $pty = new IO::Pty;
\&
\&    $slave  = $pty\->slave;
\&
\&    foreach $val (1..10) {
\&        print $pty "$val\en";
\&        $_ = <$slave>;
\&        print "$_";
\&    }
\&
\&    close($slave);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`IO::Pty\*(C'\fR provides an interface to allow the creation of a pseudo tty.
.PP
\&\f(CW\*(C`IO::Pty\*(C'\fR inherits from \f(CW\*(C`IO::Handle\*(C'\fR and so provide all the methods
defined by the \f(CW\*(C`IO::Handle\*(C'\fR package.
.PP
Please note that pty creation is very system-dependend.  If you have
problems, see IO::Tty for help.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.IP "new" 3
.IX Item "new"
The \f(CW\*(C`new\*(C'\fR constructor takes no arguments and returns a new file
object which is the master side of the pseudo tty.
.SH "METHODS"
.IX Header "METHODS"
.IP "\fIttyname()\fR" 4
.IX Item "ttyname()"
Returns the name of the slave pseudo tty. On \s-1UNIX\s0 machines this will
be the pathname of the device.  Use this name for informational
purpose only, to get a slave filehandle, use \fIslave()\fR.
.IP "\fIslave()\fR" 4
.IX Item "slave()"
The \f(CW\*(C`slave\*(C'\fR method will return the slave filehandle of the given
master pty, opening it anew if necessary.  If IO::Stty is installed,
you can then call \f(CW\*(C`$slave\->stty()\*(C'\fR to modify the terminal settings.
.IP "\fIclose_slave()\fR" 4
.IX Item "close_slave()"
The slave filehandle will be closed and destroyed.  This is necessary
in the parent after forking to get rid of the open filehandle,
otherwise the parent will not notice if the child exits.  Subsequent
calls of \f(CW\*(C`slave()\*(C'\fR will return a newly opened slave filehandle.
.IP "\fImake_slave_controlling_terminal()\fR" 4
.IX Item "make_slave_controlling_terminal()"
This will set the slave filehandle as the controlling terminal of the
current process, which will become a session leader, so this should
only be called by a child process after a \fIfork()\fR, e.g. in the callback
to \f(CW\*(C`sync_exec()\*(C'\fR (see Proc::SyncExec).  See the \f(CW\*(C`try\*(C'\fR script
(also \f(CW\*(C`test.pl\*(C'\fR) for an example how to correctly spawn a subprocess.
.IP "\fIset_raw()\fR" 4
.IX Item "set_raw()"
Will set the pty to raw.  Note that this is a one-way operation, you
need IO::Stty to set the terminal settings to anything else.
.Sp
On some systems, the master pty is not a tty.  This method checks for
that and returns success anyway on such systems.  Note that this
method must be called on the slave, and probably should be called on
the master, just to be sure, i.e.
.Sp
.Vb 2
\&  $pty\->slave\->set_raw();
\&  $pty\->set_raw();
.Ve
.IP "clone_winsize_from(\e*FH)" 4
.IX Item "clone_winsize_from(*FH)"
Gets the terminal size from filehandle \s-1FH \s0(which must be a terminal)
and transfers it to the pty.  Returns true on success and undef on
failure.  Note that this must be called upon the \fIslave\fR, i.e.
.Sp
.Vb 1
\& $pty\->slave\->clone_winsize_from(\e*STDIN);
.Ve
.Sp
On some systems, the master pty also isatty.  I actually have no
idea if setting terminal sizes there is passed through to the slave,
so if this method is called for a master that is not a tty, it
silently returns \s-1OK.\s0
.Sp
See the \f(CW\*(C`try\*(C'\fR script for example code how to propagate \s-1SIGWINCH.\s0
.SH "SEE ALSO"
.IX Header "SEE ALSO"
IO::Tty, IO::Tty::Constant, IO::Handle, Expect, Proc::SyncExec
.SH "MAILING LISTS"
.IX Header "MAILING LISTS"
As this module is mainly used by Expect, support for it is available
via the two Expect mailing lists, expectperl-announce and
expectperl-discuss, at
.PP
.Vb 1
\&  http://lists.sourceforge.net/lists/listinfo/expectperl\-announce
.Ve
.PP
and
.PP
.Vb 1
\&  http://lists.sourceforge.net/lists/listinfo/expectperl\-discuss
.Ve
.SH "AUTHORS"
.IX Header "AUTHORS"
Originally by Graham Barr <\fIgbarr@pobox.com\fR>, based on the
Ptty module by Nick Ing-Simmons <\fInik@tiuk.ti.com\fR>.
.PP
Now maintained and heavily rewritten by Roland Giersig
<\fIRGiersig@cpan.org\fR>.
.PP
Contains copyrighted stuff from openssh v3.0p1, authored by 
Tatu Ylonen <ylo@cs.hut.fi>, Markus Friedl and Todd C. Miller
<Todd.Miller@courtesan.com>.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Now all code is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
.PP
Nevertheless the above \s-1AUTHORS\s0 retain their copyrights to the various
parts and want to receive credit if their source code is used.
See the source for details.
.SH "DISCLAIMER"
.IX Header "DISCLAIMER"
\&\s-1THIS SOFTWARE IS PROVIDED\s0 ``\s-1AS IS\s0'' \s-1AND ANY EXPRESS OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES \s0(\s-1INCLUDING,
BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES\s0; \s-1LOSS
OF USE, DATA, OR PROFITS\s0; \s-1OR BUSINESS INTERRUPTION\s0) \s-1HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
TORT \s0(\s-1INCLUDING NEGLIGENCE OR OTHERWISE\s0) \s-1ARISING IN ANY WAY OUT OF THE
USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
DAMAGE.\s0
.PP
In other words: Use at your own risk.  Provided as is.  Your mileage
may vary.  Read the source, Luke!
.PP
And finally, just to be sure:
.PP
Any Use of This Product, in Any Manner Whatsoever, Will Increase the
Amount of Disorder in the Universe. Although No Liability Is Implied
Herein, the Consumer Is Warned That This Process Will Ultimately Lead
to the Heat Death of the Universe.
                                                                                                                                                                                                                                                                                                                                                                                                              osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/IO::Scalar.3pm                               0100644 0001750 0001750 00000034415 12566241447 023134  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "IO::Scalar 3"
.TH IO::Scalar 3 "2005-02-10" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
IO::Scalar \- IO:: interface for reading/writing a scalar
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Perform I/O on strings, using the basic \s-1OO\s0 interface...
.PP
.Vb 3
\&    use 5.005;
\&    use IO::Scalar;
\&    $data = "My message:\en";
\&
\&    ### Open a handle on a string, and append to it:
\&    $SH = new IO::Scalar \e$data;
\&    $SH\->print("Hello");
\&    $SH\->print(", world!\enBye now!\en");
\&    print "The string is now: ", $data, "\en";
\&
\&    ### Open a handle on a string, read it line\-by\-line, then close it:
\&    $SH = new IO::Scalar \e$data;
\&    while (defined($_ = $SH\->getline)) {
\&        print "Got line: $_";
\&    }
\&    $SH\->close;
\&
\&    ### Open a handle on a string, and slurp in all the lines:
\&    $SH = new IO::Scalar \e$data;
\&    print "All lines:\en", $SH\->getlines;
\&
\&    ### Get the current position (either of two ways):
\&    $pos = $SH\->getpos;
\&    $offset = $SH\->tell;
\&
\&    ### Set the current position (either of two ways):
\&    $SH\->setpos($pos);
\&    $SH\->seek($offset, 0);
\&
\&    ### Open an anonymous temporary scalar:
\&    $SH = new IO::Scalar;
\&    $SH\->print("Hi there!");
\&    print "I printed: ", ${$SH\->sref}, "\en";      ### get at value
.Ve
.PP
Don't like \s-1OO\s0 for your I/O?  No problem.
Thanks to the magic of an invisible \fItie()\fR, the following now
works out of the box, just as it does with IO::Handle:
.PP
.Vb 3
\&    use 5.005;
\&    use IO::Scalar;
\&    $data = "My message:\en";
\&
\&    ### Open a handle on a string, and append to it:
\&    $SH = new IO::Scalar \e$data;
\&    print $SH "Hello";
\&    print $SH ", world!\enBye now!\en";
\&    print "The string is now: ", $data, "\en";
\&
\&    ### Open a handle on a string, read it line\-by\-line, then close it:
\&    $SH = new IO::Scalar \e$data;
\&    while (<$SH>) {
\&        print "Got line: $_";
\&    }
\&    close $SH;
\&
\&    ### Open a handle on a string, and slurp in all the lines:
\&    $SH = new IO::Scalar \e$data;
\&    print "All lines:\en", <$SH>;
\&
\&    ### Get the current position (WARNING: requires 5.6):
\&    $offset = tell $SH;
\&
\&    ### Set the current position (WARNING: requires 5.6):
\&    seek $SH, $offset, 0;
\&
\&    ### Open an anonymous temporary scalar:
\&    $SH = new IO::Scalar;
\&    print $SH "Hi there!";
\&    print "I printed: ", ${$SH\->sref}, "\en";      ### get at value
.Ve
.PP
And for you folks with 1.x code out there: the old \fItie()\fR style still works,
though this is \fIunnecessary and deprecated\fR:
.PP
.Vb 1
\&    use IO::Scalar;
\&
\&    ### Writing to a scalar...
\&    my $s;
\&    tie *OUT, \*(AqIO::Scalar\*(Aq, \e$s;
\&    print OUT "line 1\enline 2\en", "line 3\en";
\&    print "String is now: $s\en"
\&
\&    ### Reading and writing an anonymous scalar...
\&    tie *OUT, \*(AqIO::Scalar\*(Aq;
\&    print OUT "line 1\enline 2\en", "line 3\en";
\&    tied(OUT)\->seek(0,0);
\&    while (<OUT>) {
\&        print "Got line: ", $_;
\&    }
.Ve
.PP
Stringification works, too!
.PP
.Vb 4
\&    my $SH = new IO::Scalar \e$data;
\&    print $SH "Hello, ";
\&    print $SH "world!";
\&    print "I printed: $SH\en";
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class is part of the IO::Stringy distribution;
see IO::Stringy for change log and general information.
.PP
The IO::Scalar class implements objects which behave just like
IO::Handle (or FileHandle) objects, except that you may use them
to write to (or read from) scalars.  These handles are
automatically tiehandle'd (though please see \*(L"\s-1WARNINGS\*(R"\s0
for information relevant to your Perl version).
.PP
Basically, this:
.PP
.Vb 4
\&    my $s;
\&    $SH = new IO::Scalar \e$s;
\&    $SH\->print("Hel", "lo, ");         ### OO style
\&    $SH\->print("world!\en");            ### ditto
.Ve
.PP
Or this:
.PP
.Vb 4
\&    my $s;
\&    $SH = tie *OUT, \*(AqIO::Scalar\*(Aq, \e$s;
\&    print OUT "Hel", "lo, ";           ### non\-OO style
\&    print OUT "world!\en";              ### ditto
.Ve
.PP
Causes \f(CW$s\fR to be set to:
.PP
.Vb 1
\&    "Hello, world!\en"
.Ve
.SH "PUBLIC INTERFACE"
.IX Header "PUBLIC INTERFACE"
.SS "Construction"
.IX Subsection "Construction"
.IP "new [\s-1ARGS...\s0]" 4
.IX Item "new [ARGS...]"
\&\fIClass method.\fR
Return a new, unattached scalar handle.
If any arguments are given, they're sent to \fIopen()\fR.
.IP "open [\s-1SCALARREF\s0]" 4
.IX Item "open [SCALARREF]"
\&\fIInstance method.\fR
Open the scalar handle on a new scalar, pointed to by \s-1SCALARREF.\s0
If no \s-1SCALARREF\s0 is given, a \*(L"private\*(R" scalar is created to hold
the file data.
.Sp
Returns the self object on success, undefined on error.
.IP "opened" 4
.IX Item "opened"
\&\fIInstance method.\fR
Is the scalar handle opened on something?
.IP "close" 4
.IX Item "close"
\&\fIInstance method.\fR
Disassociate the scalar handle from its underlying scalar.
Done automatically on destroy.
.SS "Input and output"
.IX Subsection "Input and output"
.IP "flush" 4
.IX Item "flush"
\&\fIInstance method.\fR
No-op, provided for \s-1OO\s0 compatibility.
.IP "getc" 4
.IX Item "getc"
\&\fIInstance method.\fR
Return the next character, or undef if none remain.
.IP "getline" 4
.IX Item "getline"
\&\fIInstance method.\fR
Return the next line, or undef on end of string.
Can safely be called in an array context.
Currently, lines are delimited by \*(L"\en\*(R".
.IP "getlines" 4
.IX Item "getlines"
\&\fIInstance method.\fR
Get all remaining lines.
It will \fIcroak()\fR if accidentally called in a scalar context.
.IP "print \s-1ARGS...\s0" 4
.IX Item "print ARGS..."
\&\fIInstance method.\fR
Print \s-1ARGS\s0 to the underlying scalar.
.Sp
\&\fBWarning:\fR this continues to always cause a seek to the end
of the string, but if you perform \fIseek()\fRs and \fItell()\fRs, it is
still safer to explicitly seek-to-end before subsequent \fIprint()\fRs.
.IP "read \s-1BUF, NBYTES,\s0 [\s-1OFFSET\s0]" 4
.IX Item "read BUF, NBYTES, [OFFSET]"
\&\fIInstance method.\fR
Read some bytes from the scalar.
Returns the number of bytes actually read, 0 on end-of-file, undef on error.
.IP "write \s-1BUF, NBYTES,\s0 [\s-1OFFSET\s0]" 4
.IX Item "write BUF, NBYTES, [OFFSET]"
\&\fIInstance method.\fR
Write some bytes to the scalar.
.IP "sysread \s-1BUF, LEN,\s0 [\s-1OFFSET\s0]" 4
.IX Item "sysread BUF, LEN, [OFFSET]"
\&\fIInstance method.\fR
Read some bytes from the scalar.
Returns the number of bytes actually read, 0 on end-of-file, undef on error.
.IP "syswrite \s-1BUF, NBYTES,\s0 [\s-1OFFSET\s0]" 4
.IX Item "syswrite BUF, NBYTES, [OFFSET]"
\&\fIInstance method.\fR
Write some bytes to the scalar.
.SS "Seeking/telling and other attributes"
.IX Subsection "Seeking/telling and other attributes"
.IP "autoflush" 4
.IX Item "autoflush"
\&\fIInstance method.\fR
No-op, provided for \s-1OO\s0 compatibility.
.IP "binmode" 4
.IX Item "binmode"
\&\fIInstance method.\fR
No-op, provided for \s-1OO\s0 compatibility.
.IP "clearerr" 4
.IX Item "clearerr"
\&\fIInstance method.\fR  Clear the error and \s-1EOF\s0 flags.  A no-op.
.IP "eof" 4
.IX Item "eof"
\&\fIInstance method.\fR  Are we at end of file?
.IP "seek \s-1OFFSET, WHENCE\s0" 4
.IX Item "seek OFFSET, WHENCE"
\&\fIInstance method.\fR  Seek to a given position in the stream.
.IP "sysseek \s-1OFFSET, WHENCE\s0" 4
.IX Item "sysseek OFFSET, WHENCE"
\&\fIInstance method.\fR Identical to \f(CW\*(C`seek OFFSET, WHENCE\*(C'\fR, \fIq.v.\fR
.IP "tell" 4
.IX Item "tell"
\&\fIInstance method.\fR
Return the current position in the stream, as a numeric offset.
.IP "setpos \s-1POS\s0" 4
.IX Item "setpos POS"
\&\fIInstance method.\fR
Set the current position, using the opaque value returned by \f(CW\*(C`getpos()\*(C'\fR.
.IP "getpos" 4
.IX Item "getpos"
\&\fIInstance method.\fR
Return the current position in the string, as an opaque object.
.IP "sref" 4
.IX Item "sref"
\&\fIInstance method.\fR
Return a reference to the underlying scalar.
.SH "WARNINGS"
.IX Header "WARNINGS"
Perl's \s-1TIEHANDLE\s0 spec was incomplete prior to 5.005_57;
it was missing support for \f(CW\*(C`seek()\*(C'\fR, \f(CW\*(C`tell()\*(C'\fR, and \f(CW\*(C`eof()\*(C'\fR.
Attempting to use these functions with an IO::Scalar will not work
prior to 5.005_57. IO::Scalar will not have the relevant methods
invoked; and even worse, this kind of bug can lie dormant for a while.
If you turn warnings on (via \f(CW$^W\fR or \f(CW\*(C`perl \-w\*(C'\fR),
and you see something like this...
.PP
.Vb 1
\&    attempt to seek on unopened filehandle
.Ve
.PP
\&...then you are probably trying to use one of these functions
on an IO::Scalar with an old Perl.  The remedy is to simply
use the \s-1OO\s0 version; e.g.:
.PP
.Vb 2
\&    $SH\->seek(0,0);    ### GOOD: will work on any 5.005
\&    seek($SH,0,0);     ### WARNING: will only work on 5.005_57 and beyond
.Ve
.SH "VERSION"
.IX Header "VERSION"
\&\f(CW$Id:\fR Scalar.pm,v 1.6 2005/02/10 21:21:53 dfs Exp $
.SH "AUTHORS"
.IX Header "AUTHORS"
.SS "Primary Maintainer"
.IX Subsection "Primary Maintainer"
David F. Skoll (\fIdfs@roaringpenguin.com\fR).
.SS "Principal author"
.IX Subsection "Principal author"
Eryq (\fIeryq@zeegee.com\fR).
President, ZeeGee Software Inc (\fIhttp://www.zeegee.com\fR).
.SS "Other contributors"
.IX Subsection "Other contributors"
The full set of contributors always includes the folks mentioned
in \*(L"\s-1CHANGE LOG\*(R"\s0 in IO::Stringy.  But just the same, special
thanks to the following individuals for their invaluable contributions
(if I've forgotten or misspelled your name, please email me!):
.PP
\&\fIAndy Glew,\fR
for contributing \f(CW\*(C`getc()\*(C'\fR.
.PP
\&\fIBrandon Browning,\fR
for suggesting \f(CW\*(C`opened()\*(C'\fR.
.PP
\&\fIDavid Richter,\fR
for finding and fixing the bug in \f(CW\*(C`PRINTF()\*(C'\fR.
.PP
\&\fIEric L. Brine,\fR
for his offset-using \fIread()\fR and \fIwrite()\fR implementations.
.PP
\&\fIRichard Jones,\fR
for his patches to massively improve the performance of \f(CW\*(C`getline()\*(C'\fR
and add \f(CW\*(C`sysread\*(C'\fR and \f(CW\*(C`syswrite\*(C'\fR.
.PP
\&\fIB. K. Oxley (binkley),\fR
for stringification and inheritance improvements,
and sundry good ideas.
.PP
\&\fIDoug Wilson,\fR
for the IO::Handle inheritance and automatic tie-ing.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
IO::String, which is quite similar but which was designed
more-recently and with an IO::Handle\-like interface in mind,
so you could mix \s-1OO\-\s0 and native-filehandle usage without using \fItied()\fR.
.PP
\&\fINote:\fR as of version 2.x, these classes all work like
their IO::Handle counterparts, so we have comparable
functionality to IO::String.
                                                                                                                                                                                                                                                   osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/IO::Scalar5.16.3pm                           0100644 0001750 0001750 00000034155 12566241447 023447  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "IO::Scalar 3"
.TH IO::Scalar 3 "2005-02-10" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
IO::Scalar \- IO:: interface for reading/writing a scalar
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Perform I/O on strings, using the basic \s-1OO\s0 interface...
.PP
.Vb 3
\&    use 5.005;
\&    use IO::Scalar;
\&    $data = "My message:\en";
\&
\&    ### Open a handle on a string, and append to it:
\&    $SH = new IO::Scalar \e$data;
\&    $SH\->print("Hello");
\&    $SH\->print(", world!\enBye now!\en");
\&    print "The string is now: ", $data, "\en";
\&
\&    ### Open a handle on a string, read it line\-by\-line, then close it:
\&    $SH = new IO::Scalar \e$data;
\&    while (defined($_ = $SH\->getline)) {
\&        print "Got line: $_";
\&    }
\&    $SH\->close;
\&
\&    ### Open a handle on a string, and slurp in all the lines:
\&    $SH = new IO::Scalar \e$data;
\&    print "All lines:\en", $SH\->getlines;
\&
\&    ### Get the current position (either of two ways):
\&    $pos = $SH\->getpos;
\&    $offset = $SH\->tell;
\&
\&    ### Set the current position (either of two ways):
\&    $SH\->setpos($pos);
\&    $SH\->seek($offset, 0);
\&
\&    ### Open an anonymous temporary scalar:
\&    $SH = new IO::Scalar;
\&    $SH\->print("Hi there!");
\&    print "I printed: ", ${$SH\->sref}, "\en";      ### get at value
.Ve
.PP
Don't like \s-1OO\s0 for your I/O?  No problem.
Thanks to the magic of an invisible \fItie()\fR, the following now
works out of the box, just as it does with IO::Handle:
.PP
.Vb 3
\&    use 5.005;
\&    use IO::Scalar;
\&    $data = "My message:\en";
\&
\&    ### Open a handle on a string, and append to it:
\&    $SH = new IO::Scalar \e$data;
\&    print $SH "Hello";
\&    print $SH ", world!\enBye now!\en";
\&    print "The string is now: ", $data, "\en";
\&
\&    ### Open a handle on a string, read it line\-by\-line, then close it:
\&    $SH = new IO::Scalar \e$data;
\&    while (<$SH>) {
\&        print "Got line: $_";
\&    }
\&    close $SH;
\&
\&    ### Open a handle on a string, and slurp in all the lines:
\&    $SH = new IO::Scalar \e$data;
\&    print "All lines:\en", <$SH>;
\&
\&    ### Get the current position (WARNING: requires 5.6):
\&    $offset = tell $SH;
\&
\&    ### Set the current position (WARNING: requires 5.6):
\&    seek $SH, $offset, 0;
\&
\&    ### Open an anonymous temporary scalar:
\&    $SH = new IO::Scalar;
\&    print $SH "Hi there!";
\&    print "I printed: ", ${$SH\->sref}, "\en";      ### get at value
.Ve
.PP
And for you folks with 1.x code out there: the old \fItie()\fR style still works,
though this is \fIunnecessary and deprecated\fR:
.PP
.Vb 1
\&    use IO::Scalar;
\&
\&    ### Writing to a scalar...
\&    my $s;
\&    tie *OUT, \*(AqIO::Scalar\*(Aq, \e$s;
\&    print OUT "line 1\enline 2\en", "line 3\en";
\&    print "String is now: $s\en"
\&
\&    ### Reading and writing an anonymous scalar...
\&    tie *OUT, \*(AqIO::Scalar\*(Aq;
\&    print OUT "line 1\enline 2\en", "line 3\en";
\&    tied(OUT)\->seek(0,0);
\&    while (<OUT>) {
\&        print "Got line: ", $_;
\&    }
.Ve
.PP
Stringification works, too!
.PP
.Vb 4
\&    my $SH = new IO::Scalar \e$data;
\&    print $SH "Hello, ";
\&    print $SH "world!";
\&    print "I printed: $SH\en";
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class is part of the IO::Stringy distribution;
see IO::Stringy for change log and general information.
.PP
The IO::Scalar class implements objects which behave just like
IO::Handle (or FileHandle) objects, except that you may use them
to write to (or read from) scalars.  These handles are
automatically tiehandle'd (though please see \*(L"\s-1WARNINGS\s0\*(R"
for information relevant to your Perl version).
.PP
Basically, this:
.PP
.Vb 4
\&    my $s;
\&    $SH = new IO::Scalar \e$s;
\&    $SH\->print("Hel", "lo, ");         ### OO style
\&    $SH\->print("world!\en");            ### ditto
.Ve
.PP
Or this:
.PP
.Vb 4
\&    my $s;
\&    $SH = tie *OUT, \*(AqIO::Scalar\*(Aq, \e$s;
\&    print OUT "Hel", "lo, ";           ### non\-OO style
\&    print OUT "world!\en";              ### ditto
.Ve
.PP
Causes \f(CW$s\fR to be set to:
.PP
.Vb 1
\&    "Hello, world!\en"
.Ve
.SH "PUBLIC INTERFACE"
.IX Header "PUBLIC INTERFACE"
.SS "Construction"
.IX Subsection "Construction"
.IP "new [\s-1ARGS\s0...]" 4
.IX Item "new [ARGS...]"
\&\fIClass method.\fR
Return a new, unattached scalar handle.
If any arguments are given, they're sent to \fIopen()\fR.
.IP "open [\s-1SCALARREF\s0]" 4
.IX Item "open [SCALARREF]"
\&\fIInstance method.\fR
Open the scalar handle on a new scalar, pointed to by \s-1SCALARREF\s0.
If no \s-1SCALARREF\s0 is given, a \*(L"private\*(R" scalar is created to hold
the file data.
.Sp
Returns the self object on success, undefined on error.
.IP "opened" 4
.IX Item "opened"
\&\fIInstance method.\fR
Is the scalar handle opened on something?
.IP "close" 4
.IX Item "close"
\&\fIInstance method.\fR
Disassociate the scalar handle from its underlying scalar.
Done automatically on destroy.
.SS "Input and output"
.IX Subsection "Input and output"
.IP "flush" 4
.IX Item "flush"
\&\fIInstance method.\fR
No-op, provided for \s-1OO\s0 compatibility.
.IP "getc" 4
.IX Item "getc"
\&\fIInstance method.\fR
Return the next character, or undef if none remain.
.IP "getline" 4
.IX Item "getline"
\&\fIInstance method.\fR
Return the next line, or undef on end of string.
Can safely be called in an array context.
Currently, lines are delimited by \*(L"\en\*(R".
.IP "getlines" 4
.IX Item "getlines"
\&\fIInstance method.\fR
Get all remaining lines.
It will \fIcroak()\fR if accidentally called in a scalar context.
.IP "print \s-1ARGS\s0..." 4
.IX Item "print ARGS..."
\&\fIInstance method.\fR
Print \s-1ARGS\s0 to the underlying scalar.
.Sp
\&\fBWarning:\fR this continues to always cause a seek to the end
of the string, but if you perform \fIseek()\fRs and \fItell()\fRs, it is
still safer to explicitly seek-to-end before subsequent \fIprint()\fRs.
.IP "read \s-1BUF\s0, \s-1NBYTES\s0, [\s-1OFFSET\s0]" 4
.IX Item "read BUF, NBYTES, [OFFSET]"
\&\fIInstance method.\fR
Read some bytes from the scalar.
Returns the number of bytes actually read, 0 on end-of-file, undef on error.
.IP "write \s-1BUF\s0, \s-1NBYTES\s0, [\s-1OFFSET\s0]" 4
.IX Item "write BUF, NBYTES, [OFFSET]"
\&\fIInstance method.\fR
Write some bytes to the scalar.
.IP "sysread \s-1BUF\s0, \s-1LEN\s0, [\s-1OFFSET\s0]" 4
.IX Item "sysread BUF, LEN, [OFFSET]"
\&\fIInstance method.\fR
Read some bytes from the scalar.
Returns the number of bytes actually read, 0 on end-of-file, undef on error.
.IP "syswrite \s-1BUF\s0, \s-1NBYTES\s0, [\s-1OFFSET\s0]" 4
.IX Item "syswrite BUF, NBYTES, [OFFSET]"
\&\fIInstance method.\fR
Write some bytes to the scalar.
.SS "Seeking/telling and other attributes"
.IX Subsection "Seeking/telling and other attributes"
.IP "autoflush" 4
.IX Item "autoflush"
\&\fIInstance method.\fR
No-op, provided for \s-1OO\s0 compatibility.
.IP "binmode" 4
.IX Item "binmode"
\&\fIInstance method.\fR
No-op, provided for \s-1OO\s0 compatibility.
.IP "clearerr" 4
.IX Item "clearerr"
\&\fIInstance method.\fR  Clear the error and \s-1EOF\s0 flags.  A no-op.
.IP "eof" 4
.IX Item "eof"
\&\fIInstance method.\fR  Are we at end of file?
.IP "seek \s-1OFFSET\s0, \s-1WHENCE\s0" 4
.IX Item "seek OFFSET, WHENCE"
\&\fIInstance method.\fR  Seek to a given position in the stream.
.IP "sysseek \s-1OFFSET\s0, \s-1WHENCE\s0" 4
.IX Item "sysseek OFFSET, WHENCE"
\&\fIInstance method.\fR Identical to \f(CW\*(C`seek OFFSET, WHENCE\*(C'\fR, \fIq.v.\fR
.IP "tell" 4
.IX Item "tell"
\&\fIInstance method.\fR
Return the current position in the stream, as a numeric offset.
.IP "setpos \s-1POS\s0" 4
.IX Item "setpos POS"
\&\fIInstance method.\fR
Set the current position, using the opaque value returned by \f(CW\*(C`getpos()\*(C'\fR.
.IP "getpos" 4
.IX Item "getpos"
\&\fIInstance method.\fR
Return the current position in the string, as an opaque object.
.IP "sref" 4
.IX Item "sref"
\&\fIInstance method.\fR
Return a reference to the underlying scalar.
.SH "WARNINGS"
.IX Header "WARNINGS"
Perl's \s-1TIEHANDLE\s0 spec was incomplete prior to 5.005_57;
it was missing support for \f(CW\*(C`seek()\*(C'\fR, \f(CW\*(C`tell()\*(C'\fR, and \f(CW\*(C`eof()\*(C'\fR.
Attempting to use these functions with an IO::Scalar will not work
prior to 5.005_57. IO::Scalar will not have the relevant methods
invoked; and even worse, this kind of bug can lie dormant for a while.
If you turn warnings on (via \f(CW$^W\fR or \f(CW\*(C`perl \-w\*(C'\fR),
and you see something like this...
.PP
.Vb 1
\&    attempt to seek on unopened filehandle
.Ve
.PP
\&...then you are probably trying to use one of these functions
on an IO::Scalar with an old Perl.  The remedy is to simply
use the \s-1OO\s0 version; e.g.:
.PP
.Vb 2
\&    $SH\->seek(0,0);    ### GOOD: will work on any 5.005
\&    seek($SH,0,0);     ### WARNING: will only work on 5.005_57 and beyond
.Ve
.SH "VERSION"
.IX Header "VERSION"
\&\f(CW$Id:\fR Scalar.pm,v 1.6 2005/02/10 21:21:53 dfs Exp $
.SH "AUTHORS"
.IX Header "AUTHORS"
.SS "Primary Maintainer"
.IX Subsection "Primary Maintainer"
David F. Skoll (\fIdfs@roaringpenguin.com\fR).
.SS "Principal author"
.IX Subsection "Principal author"
Eryq (\fIeryq@zeegee.com\fR).
President, ZeeGee Software Inc (\fIhttp://www.zeegee.com\fR).
.SS "Other contributors"
.IX Subsection "Other contributors"
The full set of contributors always includes the folks mentioned
in \*(L"\s-1CHANGE\s0 \s-1LOG\s0\*(R" in IO::Stringy.  But just the same, special
thanks to the following individuals for their invaluable contributions
(if I've forgotten or misspelled your name, please email me!):
.PP
\&\fIAndy Glew,\fR
for contributing \f(CW\*(C`getc()\*(C'\fR.
.PP
\&\fIBrandon Browning,\fR
for suggesting \f(CW\*(C`opened()\*(C'\fR.
.PP
\&\fIDavid Richter,\fR
for finding and fixing the bug in \f(CW\*(C`PRINTF()\*(C'\fR.
.PP
\&\fIEric L. Brine,\fR
for his offset-using \fIread()\fR and \fIwrite()\fR implementations.
.PP
\&\fIRichard Jones,\fR
for his patches to massively improve the performance of \f(CW\*(C`getline()\*(C'\fR
and add \f(CW\*(C`sysread\*(C'\fR and \f(CW\*(C`syswrite\*(C'\fR.
.PP
\&\fIB. K. Oxley (binkley),\fR
for stringification and inheritance improvements,
and sundry good ideas.
.PP
\&\fIDoug Wilson,\fR
for the IO::Handle inheritance and automatic tie-ing.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
IO::String, which is quite similar but which was designed
more-recently and with an IO::Handle\-like interface in mind,
so you could mix \s-1OO\-\s0 and native-filehandle usage without using \fItied()\fR.
.PP
\&\fINote:\fR as of version 2.x, these classes all work like
their IO::Handle counterparts, so we have comparable
functionality to IO::String.
                                                                                                                                                                                                                                                                                                                                                                                                                   osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/IO::Scalar5.18.3pm                           0100644 0001750 0001750 00000034415 12566241447 023450  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "IO::Scalar 3"
.TH IO::Scalar 3 "2005-02-10" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
IO::Scalar \- IO:: interface for reading/writing a scalar
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Perform I/O on strings, using the basic \s-1OO\s0 interface...
.PP
.Vb 3
\&    use 5.005;
\&    use IO::Scalar;
\&    $data = "My message:\en";
\&
\&    ### Open a handle on a string, and append to it:
\&    $SH = new IO::Scalar \e$data;
\&    $SH\->print("Hello");
\&    $SH\->print(", world!\enBye now!\en");
\&    print "The string is now: ", $data, "\en";
\&
\&    ### Open a handle on a string, read it line\-by\-line, then close it:
\&    $SH = new IO::Scalar \e$data;
\&    while (defined($_ = $SH\->getline)) {
\&        print "Got line: $_";
\&    }
\&    $SH\->close;
\&
\&    ### Open a handle on a string, and slurp in all the lines:
\&    $SH = new IO::Scalar \e$data;
\&    print "All lines:\en", $SH\->getlines;
\&
\&    ### Get the current position (either of two ways):
\&    $pos = $SH\->getpos;
\&    $offset = $SH\->tell;
\&
\&    ### Set the current position (either of two ways):
\&    $SH\->setpos($pos);
\&    $SH\->seek($offset, 0);
\&
\&    ### Open an anonymous temporary scalar:
\&    $SH = new IO::Scalar;
\&    $SH\->print("Hi there!");
\&    print "I printed: ", ${$SH\->sref}, "\en";      ### get at value
.Ve
.PP
Don't like \s-1OO\s0 for your I/O?  No problem.
Thanks to the magic of an invisible \fItie()\fR, the following now
works out of the box, just as it does with IO::Handle:
.PP
.Vb 3
\&    use 5.005;
\&    use IO::Scalar;
\&    $data = "My message:\en";
\&
\&    ### Open a handle on a string, and append to it:
\&    $SH = new IO::Scalar \e$data;
\&    print $SH "Hello";
\&    print $SH ", world!\enBye now!\en";
\&    print "The string is now: ", $data, "\en";
\&
\&    ### Open a handle on a string, read it line\-by\-line, then close it:
\&    $SH = new IO::Scalar \e$data;
\&    while (<$SH>) {
\&        print "Got line: $_";
\&    }
\&    close $SH;
\&
\&    ### Open a handle on a string, and slurp in all the lines:
\&    $SH = new IO::Scalar \e$data;
\&    print "All lines:\en", <$SH>;
\&
\&    ### Get the current position (WARNING: requires 5.6):
\&    $offset = tell $SH;
\&
\&    ### Set the current position (WARNING: requires 5.6):
\&    seek $SH, $offset, 0;
\&
\&    ### Open an anonymous temporary scalar:
\&    $SH = new IO::Scalar;
\&    print $SH "Hi there!";
\&    print "I printed: ", ${$SH\->sref}, "\en";      ### get at value
.Ve
.PP
And for you folks with 1.x code out there: the old \fItie()\fR style still works,
though this is \fIunnecessary and deprecated\fR:
.PP
.Vb 1
\&    use IO::Scalar;
\&
\&    ### Writing to a scalar...
\&    my $s;
\&    tie *OUT, \*(AqIO::Scalar\*(Aq, \e$s;
\&    print OUT "line 1\enline 2\en", "line 3\en";
\&    print "String is now: $s\en"
\&
\&    ### Reading and writing an anonymous scalar...
\&    tie *OUT, \*(AqIO::Scalar\*(Aq;
\&    print OUT "line 1\enline 2\en", "line 3\en";
\&    tied(OUT)\->seek(0,0);
\&    while (<OUT>) {
\&        print "Got line: ", $_;
\&    }
.Ve
.PP
Stringification works, too!
.PP
.Vb 4
\&    my $SH = new IO::Scalar \e$data;
\&    print $SH "Hello, ";
\&    print $SH "world!";
\&    print "I printed: $SH\en";
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class is part of the IO::Stringy distribution;
see IO::Stringy for change log and general information.
.PP
The IO::Scalar class implements objects which behave just like
IO::Handle (or FileHandle) objects, except that you may use them
to write to (or read from) scalars.  These handles are
automatically tiehandle'd (though please see \*(L"\s-1WARNINGS\*(R"\s0
for information relevant to your Perl version).
.PP
Basically, this:
.PP
.Vb 4
\&    my $s;
\&    $SH = new IO::Scalar \e$s;
\&    $SH\->print("Hel", "lo, ");         ### OO style
\&    $SH\->print("world!\en");            ### ditto
.Ve
.PP
Or this:
.PP
.Vb 4
\&    my $s;
\&    $SH = tie *OUT, \*(AqIO::Scalar\*(Aq, \e$s;
\&    print OUT "Hel", "lo, ";           ### non\-OO style
\&    print OUT "world!\en";              ### ditto
.Ve
.PP
Causes \f(CW$s\fR to be set to:
.PP
.Vb 1
\&    "Hello, world!\en"
.Ve
.SH "PUBLIC INTERFACE"
.IX Header "PUBLIC INTERFACE"
.SS "Construction"
.IX Subsection "Construction"
.IP "new [\s-1ARGS...\s0]" 4
.IX Item "new [ARGS...]"
\&\fIClass method.\fR
Return a new, unattached scalar handle.
If any arguments are given, they're sent to \fIopen()\fR.
.IP "open [\s-1SCALARREF\s0]" 4
.IX Item "open [SCALARREF]"
\&\fIInstance method.\fR
Open the scalar handle on a new scalar, pointed to by \s-1SCALARREF.\s0
If no \s-1SCALARREF\s0 is given, a \*(L"private\*(R" scalar is created to hold
the file data.
.Sp
Returns the self object on success, undefined on error.
.IP "opened" 4
.IX Item "opened"
\&\fIInstance method.\fR
Is the scalar handle opened on something?
.IP "close" 4
.IX Item "close"
\&\fIInstance method.\fR
Disassociate the scalar handle from its underlying scalar.
Done automatically on destroy.
.SS "Input and output"
.IX Subsection "Input and output"
.IP "flush" 4
.IX Item "flush"
\&\fIInstance method.\fR
No-op, provided for \s-1OO\s0 compatibility.
.IP "getc" 4
.IX Item "getc"
\&\fIInstance method.\fR
Return the next character, or undef if none remain.
.IP "getline" 4
.IX Item "getline"
\&\fIInstance method.\fR
Return the next line, or undef on end of string.
Can safely be called in an array context.
Currently, lines are delimited by \*(L"\en\*(R".
.IP "getlines" 4
.IX Item "getlines"
\&\fIInstance method.\fR
Get all remaining lines.
It will \fIcroak()\fR if accidentally called in a scalar context.
.IP "print \s-1ARGS...\s0" 4
.IX Item "print ARGS..."
\&\fIInstance method.\fR
Print \s-1ARGS\s0 to the underlying scalar.
.Sp
\&\fBWarning:\fR this continues to always cause a seek to the end
of the string, but if you perform \fIseek()\fRs and \fItell()\fRs, it is
still safer to explicitly seek-to-end before subsequent \fIprint()\fRs.
.IP "read \s-1BUF, NBYTES,\s0 [\s-1OFFSET\s0]" 4
.IX Item "read BUF, NBYTES, [OFFSET]"
\&\fIInstance method.\fR
Read some bytes from the scalar.
Returns the number of bytes actually read, 0 on end-of-file, undef on error.
.IP "write \s-1BUF, NBYTES,\s0 [\s-1OFFSET\s0]" 4
.IX Item "write BUF, NBYTES, [OFFSET]"
\&\fIInstance method.\fR
Write some bytes to the scalar.
.IP "sysread \s-1BUF, LEN,\s0 [\s-1OFFSET\s0]" 4
.IX Item "sysread BUF, LEN, [OFFSET]"
\&\fIInstance method.\fR
Read some bytes from the scalar.
Returns the number of bytes actually read, 0 on end-of-file, undef on error.
.IP "syswrite \s-1BUF, NBYTES,\s0 [\s-1OFFSET\s0]" 4
.IX Item "syswrite BUF, NBYTES, [OFFSET]"
\&\fIInstance method.\fR
Write some bytes to the scalar.
.SS "Seeking/telling and other attributes"
.IX Subsection "Seeking/telling and other attributes"
.IP "autoflush" 4
.IX Item "autoflush"
\&\fIInstance method.\fR
No-op, provided for \s-1OO\s0 compatibility.
.IP "binmode" 4
.IX Item "binmode"
\&\fIInstance method.\fR
No-op, provided for \s-1OO\s0 compatibility.
.IP "clearerr" 4
.IX Item "clearerr"
\&\fIInstance method.\fR  Clear the error and \s-1EOF\s0 flags.  A no-op.
.IP "eof" 4
.IX Item "eof"
\&\fIInstance method.\fR  Are we at end of file?
.IP "seek \s-1OFFSET, WHENCE\s0" 4
.IX Item "seek OFFSET, WHENCE"
\&\fIInstance method.\fR  Seek to a given position in the stream.
.IP "sysseek \s-1OFFSET, WHENCE\s0" 4
.IX Item "sysseek OFFSET, WHENCE"
\&\fIInstance method.\fR Identical to \f(CW\*(C`seek OFFSET, WHENCE\*(C'\fR, \fIq.v.\fR
.IP "tell" 4
.IX Item "tell"
\&\fIInstance method.\fR
Return the current position in the stream, as a numeric offset.
.IP "setpos \s-1POS\s0" 4
.IX Item "setpos POS"
\&\fIInstance method.\fR
Set the current position, using the opaque value returned by \f(CW\*(C`getpos()\*(C'\fR.
.IP "getpos" 4
.IX Item "getpos"
\&\fIInstance method.\fR
Return the current position in the string, as an opaque object.
.IP "sref" 4
.IX Item "sref"
\&\fIInstance method.\fR
Return a reference to the underlying scalar.
.SH "WARNINGS"
.IX Header "WARNINGS"
Perl's \s-1TIEHANDLE\s0 spec was incomplete prior to 5.005_57;
it was missing support for \f(CW\*(C`seek()\*(C'\fR, \f(CW\*(C`tell()\*(C'\fR, and \f(CW\*(C`eof()\*(C'\fR.
Attempting to use these functions with an IO::Scalar will not work
prior to 5.005_57. IO::Scalar will not have the relevant methods
invoked; and even worse, this kind of bug can lie dormant for a while.
If you turn warnings on (via \f(CW$^W\fR or \f(CW\*(C`perl \-w\*(C'\fR),
and you see something like this...
.PP
.Vb 1
\&    attempt to seek on unopened filehandle
.Ve
.PP
\&...then you are probably trying to use one of these functions
on an IO::Scalar with an old Perl.  The remedy is to simply
use the \s-1OO\s0 version; e.g.:
.PP
.Vb 2
\&    $SH\->seek(0,0);    ### GOOD: will work on any 5.005
\&    seek($SH,0,0);     ### WARNING: will only work on 5.005_57 and beyond
.Ve
.SH "VERSION"
.IX Header "VERSION"
\&\f(CW$Id:\fR Scalar.pm,v 1.6 2005/02/10 21:21:53 dfs Exp $
.SH "AUTHORS"
.IX Header "AUTHORS"
.SS "Primary Maintainer"
.IX Subsection "Primary Maintainer"
David F. Skoll (\fIdfs@roaringpenguin.com\fR).
.SS "Principal author"
.IX Subsection "Principal author"
Eryq (\fIeryq@zeegee.com\fR).
President, ZeeGee Software Inc (\fIhttp://www.zeegee.com\fR).
.SS "Other contributors"
.IX Subsection "Other contributors"
The full set of contributors always includes the folks mentioned
in \*(L"\s-1CHANGE LOG\*(R"\s0 in IO::Stringy.  But just the same, special
thanks to the following individuals for their invaluable contributions
(if I've forgotten or misspelled your name, please email me!):
.PP
\&\fIAndy Glew,\fR
for contributing \f(CW\*(C`getc()\*(C'\fR.
.PP
\&\fIBrandon Browning,\fR
for suggesting \f(CW\*(C`opened()\*(C'\fR.
.PP
\&\fIDavid Richter,\fR
for finding and fixing the bug in \f(CW\*(C`PRINTF()\*(C'\fR.
.PP
\&\fIEric L. Brine,\fR
for his offset-using \fIread()\fR and \fIwrite()\fR implementations.
.PP
\&\fIRichard Jones,\fR
for his patches to massively improve the performance of \f(CW\*(C`getline()\*(C'\fR
and add \f(CW\*(C`sysread\*(C'\fR and \f(CW\*(C`syswrite\*(C'\fR.
.PP
\&\fIB. K. Oxley (binkley),\fR
for stringification and inheritance improvements,
and sundry good ideas.
.PP
\&\fIDoug Wilson,\fR
for the IO::Handle inheritance and automatic tie-ing.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
IO::String, which is quite similar but which was designed
more-recently and with an IO::Handle\-like interface in mind,
so you could mix \s-1OO\-\s0 and native-filehandle usage without using \fItied()\fR.
.PP
\&\fINote:\fR as of version 2.x, these classes all work like
their IO::Handle counterparts, so we have comparable
functionality to IO::String.
                                                                                                                                                                                                                                                   osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/IO::ScalarArray.3pm                          0100644 0001750 0001750 00000032460 12566241447 024131  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "IO::ScalarArray 3"
.TH IO::ScalarArray 3 "2005-02-10" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
IO::ScalarArray \- IO:: interface for reading/writing an array of scalars
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Perform I/O on strings, using the basic \s-1OO\s0 interface...
.PP
.Vb 2
\&    use IO::ScalarArray;
\&    @data = ("My mes", "sage:\en");
\&
\&    ### Open a handle on an array, and append to it:
\&    $AH = new IO::ScalarArray \e@data;
\&    $AH\->print("Hello");       
\&    $AH\->print(", world!\enBye now!\en");  
\&    print "The array is now: ", @data, "\en";
\&
\&    ### Open a handle on an array, read it line\-by\-line, then close it:
\&    $AH = new IO::ScalarArray \e@data;
\&    while (defined($_ = $AH\->getline)) { 
\&        print "Got line: $_";
\&    }
\&    $AH\->close;
\&
\&    ### Open a handle on an array, and slurp in all the lines:
\&    $AH = new IO::ScalarArray \e@data;
\&    print "All lines:\en", $AH\->getlines; 
\&
\&    ### Get the current position (either of two ways):
\&    $pos = $AH\->getpos;         
\&    $offset = $AH\->tell;  
\&
\&    ### Set the current position (either of two ways):
\&    $AH\->setpos($pos);        
\&    $AH\->seek($offset, 0);
\&
\&    ### Open an anonymous temporary array:
\&    $AH = new IO::ScalarArray;
\&    $AH\->print("Hi there!");
\&    print "I printed: ", @{$AH\->aref}, "\en";      ### get at value
.Ve
.PP
Don't like \s-1OO\s0 for your I/O?  No problem.  
Thanks to the magic of an invisible \fItie()\fR, the following now 
works out of the box, just as it does with IO::Handle:
.PP
.Vb 2
\&    use IO::ScalarArray;
\&    @data = ("My mes", "sage:\en");
\&
\&    ### Open a handle on an array, and append to it:
\&    $AH = new IO::ScalarArray \e@data;
\&    print $AH "Hello";    
\&    print $AH ", world!\enBye now!\en";
\&    print "The array is now: ", @data, "\en";
\&
\&    ### Open a handle on a string, read it line\-by\-line, then close it:
\&    $AH = new IO::ScalarArray \e@data;
\&    while (<$AH>) {
\&        print "Got line: $_";
\&    }
\&    close $AH;
\&
\&    ### Open a handle on a string, and slurp in all the lines:
\&    $AH = new IO::ScalarArray \e@data;
\&    print "All lines:\en", <$AH>;
\&
\&    ### Get the current position (WARNING: requires 5.6):
\&    $offset = tell $AH;
\&
\&    ### Set the current position (WARNING: requires 5.6):
\&    seek $AH, $offset, 0;
\&
\&    ### Open an anonymous temporary scalar:
\&    $AH = new IO::ScalarArray;
\&    print $AH "Hi there!";
\&    print "I printed: ", @{$AH\->aref}, "\en";      ### get at value
.Ve
.PP
And for you folks with 1.x code out there: the old \fItie()\fR style still works,
though this is \fIunnecessary and deprecated\fR:
.PP
.Vb 1
\&    use IO::ScalarArray;
\&
\&    ### Writing to a scalar...
\&    my @a; 
\&    tie *OUT, \*(AqIO::ScalarArray\*(Aq, \e@a;
\&    print OUT "line 1\enline 2\en", "line 3\en";
\&    print "Array is now: ", @a, "\en"
\&
\&    ### Reading and writing an anonymous scalar... 
\&    tie *OUT, \*(AqIO::ScalarArray\*(Aq;
\&    print OUT "line 1\enline 2\en", "line 3\en";
\&    tied(OUT)\->seek(0,0);
\&    while (<OUT>) { 
\&        print "Got line: ", $_;
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class is part of the IO::Stringy distribution;
see IO::Stringy for change log and general information.
.PP
The IO::ScalarArray class implements objects which behave just like 
IO::Handle (or FileHandle) objects, except that you may use them 
to write to (or read from) arrays of scalars.  Logically, an
array of scalars defines an in-core \*(L"file\*(R" whose contents are
the concatenation of the scalars in the array.  The handles created by 
this class are automatically tiehandle'd (though please see \*(L"\s-1WARNINGS\*(R"\s0
for information relevant to your Perl version).
.PP
For writing large amounts of data with individual \fIprint()\fR statements, 
this class is likely to be more efficient than IO::Scalar.
.PP
Basically, this:
.PP
.Vb 4
\&    my @a;
\&    $AH = new IO::ScalarArray \e@a;
\&    $AH\->print("Hel", "lo, ");         ### OO style
\&    $AH\->print("world!\en");            ### ditto
.Ve
.PP
Or this:
.PP
.Vb 4
\&    my @a;
\&    $AH = new IO::ScalarArray \e@a;
\&    print $AH "Hel", "lo, ";           ### non\-OO style
\&    print $AH "world!\en";              ### ditto
.Ve
.PP
Causes \f(CW@a\fR to be set to the following array of 3 strings:
.PP
.Vb 3
\&    ( "Hel" , 
\&      "lo, " , 
\&      "world!\en" )
.Ve
.PP
See IO::Scalar and compare with this class.
.SH "PUBLIC INTERFACE"
.IX Header "PUBLIC INTERFACE"
.SS "Construction"
.IX Subsection "Construction"
.IP "new [\s-1ARGS...\s0]" 4
.IX Item "new [ARGS...]"
\&\fIClass method.\fR
Return a new, unattached array handle.  
If any arguments are given, they're sent to \fIopen()\fR.
.IP "open [\s-1ARRAYREF\s0]" 4
.IX Item "open [ARRAYREF]"
\&\fIInstance method.\fR
Open the array handle on a new array, pointed to by \s-1ARRAYREF.\s0
If no \s-1ARRAYREF\s0 is given, a \*(L"private\*(R" array is created to hold
the file data.
.Sp
Returns the self object on success, undefined on error.
.IP "opened" 4
.IX Item "opened"
\&\fIInstance method.\fR
Is the array handle opened on something?
.IP "close" 4
.IX Item "close"
\&\fIInstance method.\fR
Disassociate the array handle from its underlying array.
Done automatically on destroy.
.SS "Input and output"
.IX Subsection "Input and output"
.IP "flush" 4
.IX Item "flush"
\&\fIInstance method.\fR
No-op, provided for \s-1OO\s0 compatibility.
.IP "getc" 4
.IX Item "getc"
\&\fIInstance method.\fR
Return the next character, or undef if none remain.
This does a \fIread\fR\|(1), which is somewhat costly.
.IP "getline" 4
.IX Item "getline"
\&\fIInstance method.\fR
Return the next line, or undef on end of data.
Can safely be called in an array context.
Currently, lines are delimited by \*(L"\en\*(R".
.IP "getlines" 4
.IX Item "getlines"
\&\fIInstance method.\fR
Get all remaining lines.
It will \fIcroak()\fR if accidentally called in a scalar context.
.IP "print \s-1ARGS...\s0" 4
.IX Item "print ARGS..."
\&\fIInstance method.\fR
Print \s-1ARGS\s0 to the underlying array.
.Sp
Currently, this always causes a \*(L"seek to the end of the array\*(R"
and generates a new array entry.  This may change in the future.
.IP "read \s-1BUF, NBYTES,\s0 [\s-1OFFSET\s0];" 4
.IX Item "read BUF, NBYTES, [OFFSET];"
\&\fIInstance method.\fR
Read some bytes from the array.
Returns the number of bytes actually read, 0 on end-of-file, undef on error.
.IP "write \s-1BUF, NBYTES,\s0 [\s-1OFFSET\s0];" 4
.IX Item "write BUF, NBYTES, [OFFSET];"
\&\fIInstance method.\fR
Write some bytes into the array.
.SS "Seeking/telling and other attributes"
.IX Subsection "Seeking/telling and other attributes"
.IP "autoflush" 4
.IX Item "autoflush"
\&\fIInstance method.\fR
No-op, provided for \s-1OO\s0 compatibility.
.IP "binmode" 4
.IX Item "binmode"
\&\fIInstance method.\fR
No-op, provided for \s-1OO\s0 compatibility.
.IP "clearerr" 4
.IX Item "clearerr"
\&\fIInstance method.\fR  Clear the error and \s-1EOF\s0 flags.  A no-op.
.IP "eof" 4
.IX Item "eof"
\&\fIInstance method.\fR  Are we at end of file?
.IP "seek \s-1POS,WHENCE\s0" 4
.IX Item "seek POS,WHENCE"
\&\fIInstance method.\fR
Seek to a given position in the stream.
Only a \s-1WHENCE\s0 of 0 (\s-1SEEK_SET\s0) is supported.
.IP "tell" 4
.IX Item "tell"
\&\fIInstance method.\fR
Return the current position in the stream, as a numeric offset.
.IP "setpos \s-1POS\s0" 4
.IX Item "setpos POS"
\&\fIInstance method.\fR
Seek to a given position in the array, using the opaque \fIgetpos()\fR value.
Don't expect this to be a number.
.IP "getpos" 4
.IX Item "getpos"
\&\fIInstance method.\fR
Return the current position in the array, as an opaque value.
Don't expect this to be a number.
.IP "aref" 4
.IX Item "aref"
\&\fIInstance method.\fR
Return a reference to the underlying array.
.SH "WARNINGS"
.IX Header "WARNINGS"
Perl's \s-1TIEHANDLE\s0 spec was incomplete prior to 5.005_57;
it was missing support for \f(CW\*(C`seek()\*(C'\fR, \f(CW\*(C`tell()\*(C'\fR, and \f(CW\*(C`eof()\*(C'\fR.
Attempting to use these functions with an IO::ScalarArray will not work
prior to 5.005_57. IO::ScalarArray will not have the relevant methods 
invoked; and even worse, this kind of bug can lie dormant for a while.
If you turn warnings on (via \f(CW$^W\fR or \f(CW\*(C`perl \-w\*(C'\fR),
and you see something like this...
.PP
.Vb 1
\&    attempt to seek on unopened filehandle
.Ve
.PP
\&...then you are probably trying to use one of these functions
on an IO::ScalarArray with an old Perl.  The remedy is to simply
use the \s-1OO\s0 version; e.g.:
.PP
.Vb 2
\&    $AH\->seek(0,0);    ### GOOD: will work on any 5.005
\&    seek($AH,0,0);     ### WARNING: will only work on 5.005_57 and beyond
.Ve
.SH "VERSION"
.IX Header "VERSION"
\&\f(CW$Id:\fR ScalarArray.pm,v 1.7 2005/02/10 21:21:53 dfs Exp $
.SH "AUTHOR"
.IX Header "AUTHOR"
.SS "Primary Maintainer"
.IX Subsection "Primary Maintainer"
David F. Skoll (\fIdfs@roaringpenguin.com\fR).
.SS "Principal author"
.IX Subsection "Principal author"
Eryq (\fIeryq@zeegee.com\fR).
President, ZeeGee Software Inc (\fIhttp://www.zeegee.com\fR).
.SS "Other contributors"
.IX Subsection "Other contributors"
Thanks to the following individuals for their invaluable contributions
(if I've forgotten or misspelled your name, please email me!):
.PP
\&\fIAndy Glew,\fR
for suggesting \f(CW\*(C`getc()\*(C'\fR.
.PP
\&\fIBrandon Browning,\fR
for suggesting \f(CW\*(C`opened()\*(C'\fR.
.PP
\&\fIEric L. Brine,\fR
for his offset-using \fIread()\fR and \fIwrite()\fR implementations.
.PP
\&\fIDoug Wilson,\fR
for the IO::Handle inheritance and automatic tie-ing.
                                                                                                                                                                                                                osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/IO::ScalarArray5.16.3pm                      0100644 0001750 0001750 00000032155 12566241447 024444  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "IO::ScalarArray 3"
.TH IO::ScalarArray 3 "2005-02-10" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
IO::ScalarArray \- IO:: interface for reading/writing an array of scalars
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Perform I/O on strings, using the basic \s-1OO\s0 interface...
.PP
.Vb 2
\&    use IO::ScalarArray;
\&    @data = ("My mes", "sage:\en");
\&
\&    ### Open a handle on an array, and append to it:
\&    $AH = new IO::ScalarArray \e@data;
\&    $AH\->print("Hello");       
\&    $AH\->print(", world!\enBye now!\en");  
\&    print "The array is now: ", @data, "\en";
\&
\&    ### Open a handle on an array, read it line\-by\-line, then close it:
\&    $AH = new IO::ScalarArray \e@data;
\&    while (defined($_ = $AH\->getline)) { 
\&        print "Got line: $_";
\&    }
\&    $AH\->close;
\&
\&    ### Open a handle on an array, and slurp in all the lines:
\&    $AH = new IO::ScalarArray \e@data;
\&    print "All lines:\en", $AH\->getlines; 
\&
\&    ### Get the current position (either of two ways):
\&    $pos = $AH\->getpos;         
\&    $offset = $AH\->tell;  
\&
\&    ### Set the current position (either of two ways):
\&    $AH\->setpos($pos);        
\&    $AH\->seek($offset, 0);
\&
\&    ### Open an anonymous temporary array:
\&    $AH = new IO::ScalarArray;
\&    $AH\->print("Hi there!");
\&    print "I printed: ", @{$AH\->aref}, "\en";      ### get at value
.Ve
.PP
Don't like \s-1OO\s0 for your I/O?  No problem.  
Thanks to the magic of an invisible \fItie()\fR, the following now 
works out of the box, just as it does with IO::Handle:
.PP
.Vb 2
\&    use IO::ScalarArray;
\&    @data = ("My mes", "sage:\en");
\&
\&    ### Open a handle on an array, and append to it:
\&    $AH = new IO::ScalarArray \e@data;
\&    print $AH "Hello";    
\&    print $AH ", world!\enBye now!\en";
\&    print "The array is now: ", @data, "\en";
\&
\&    ### Open a handle on a string, read it line\-by\-line, then close it:
\&    $AH = new IO::ScalarArray \e@data;
\&    while (<$AH>) {
\&        print "Got line: $_";
\&    }
\&    close $AH;
\&
\&    ### Open a handle on a string, and slurp in all the lines:
\&    $AH = new IO::ScalarArray \e@data;
\&    print "All lines:\en", <$AH>;
\&
\&    ### Get the current position (WARNING: requires 5.6):
\&    $offset = tell $AH;
\&
\&    ### Set the current position (WARNING: requires 5.6):
\&    seek $AH, $offset, 0;
\&
\&    ### Open an anonymous temporary scalar:
\&    $AH = new IO::ScalarArray;
\&    print $AH "Hi there!";
\&    print "I printed: ", @{$AH\->aref}, "\en";      ### get at value
.Ve
.PP
And for you folks with 1.x code out there: the old \fItie()\fR style still works,
though this is \fIunnecessary and deprecated\fR:
.PP
.Vb 1
\&    use IO::ScalarArray;
\&
\&    ### Writing to a scalar...
\&    my @a; 
\&    tie *OUT, \*(AqIO::ScalarArray\*(Aq, \e@a;
\&    print OUT "line 1\enline 2\en", "line 3\en";
\&    print "Array is now: ", @a, "\en"
\&
\&    ### Reading and writing an anonymous scalar... 
\&    tie *OUT, \*(AqIO::ScalarArray\*(Aq;
\&    print OUT "line 1\enline 2\en", "line 3\en";
\&    tied(OUT)\->seek(0,0);
\&    while (<OUT>) { 
\&        print "Got line: ", $_;
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class is part of the IO::Stringy distribution;
see IO::Stringy for change log and general information.
.PP
The IO::ScalarArray class implements objects which behave just like 
IO::Handle (or FileHandle) objects, except that you may use them 
to write to (or read from) arrays of scalars.  Logically, an
array of scalars defines an in-core \*(L"file\*(R" whose contents are
the concatenation of the scalars in the array.  The handles created by 
this class are automatically tiehandle'd (though please see \*(L"\s-1WARNINGS\s0\*(R"
for information relevant to your Perl version).
.PP
For writing large amounts of data with individual \fIprint()\fR statements, 
this class is likely to be more efficient than IO::Scalar.
.PP
Basically, this:
.PP
.Vb 4
\&    my @a;
\&    $AH = new IO::ScalarArray \e@a;
\&    $AH\->print("Hel", "lo, ");         ### OO style
\&    $AH\->print("world!\en");            ### ditto
.Ve
.PP
Or this:
.PP
.Vb 4
\&    my @a;
\&    $AH = new IO::ScalarArray \e@a;
\&    print $AH "Hel", "lo, ";           ### non\-OO style
\&    print $AH "world!\en";              ### ditto
.Ve
.PP
Causes \f(CW@a\fR to be set to the following array of 3 strings:
.PP
.Vb 3
\&    ( "Hel" , 
\&      "lo, " , 
\&      "world!\en" )
.Ve
.PP
See IO::Scalar and compare with this class.
.SH "PUBLIC INTERFACE"
.IX Header "PUBLIC INTERFACE"
.SS "Construction"
.IX Subsection "Construction"
.IP "new [\s-1ARGS\s0...]" 4
.IX Item "new [ARGS...]"
\&\fIClass method.\fR
Return a new, unattached array handle.  
If any arguments are given, they're sent to \fIopen()\fR.
.IP "open [\s-1ARRAYREF\s0]" 4
.IX Item "open [ARRAYREF]"
\&\fIInstance method.\fR
Open the array handle on a new array, pointed to by \s-1ARRAYREF\s0.
If no \s-1ARRAYREF\s0 is given, a \*(L"private\*(R" array is created to hold
the file data.
.Sp
Returns the self object on success, undefined on error.
.IP "opened" 4
.IX Item "opened"
\&\fIInstance method.\fR
Is the array handle opened on something?
.IP "close" 4
.IX Item "close"
\&\fIInstance method.\fR
Disassociate the array handle from its underlying array.
Done automatically on destroy.
.SS "Input and output"
.IX Subsection "Input and output"
.IP "flush" 4
.IX Item "flush"
\&\fIInstance method.\fR
No-op, provided for \s-1OO\s0 compatibility.
.IP "getc" 4
.IX Item "getc"
\&\fIInstance method.\fR
Return the next character, or undef if none remain.
This does a \fIread\fR\|(1), which is somewhat costly.
.IP "getline" 4
.IX Item "getline"
\&\fIInstance method.\fR
Return the next line, or undef on end of data.
Can safely be called in an array context.
Currently, lines are delimited by \*(L"\en\*(R".
.IP "getlines" 4
.IX Item "getlines"
\&\fIInstance method.\fR
Get all remaining lines.
It will \fIcroak()\fR if accidentally called in a scalar context.
.IP "print \s-1ARGS\s0..." 4
.IX Item "print ARGS..."
\&\fIInstance method.\fR
Print \s-1ARGS\s0 to the underlying array.
.Sp
Currently, this always causes a \*(L"seek to the end of the array\*(R"
and generates a new array entry.  This may change in the future.
.IP "read \s-1BUF\s0, \s-1NBYTES\s0, [\s-1OFFSET\s0];" 4
.IX Item "read BUF, NBYTES, [OFFSET];"
\&\fIInstance method.\fR
Read some bytes from the array.
Returns the number of bytes actually read, 0 on end-of-file, undef on error.
.IP "write \s-1BUF\s0, \s-1NBYTES\s0, [\s-1OFFSET\s0];" 4
.IX Item "write BUF, NBYTES, [OFFSET];"
\&\fIInstance method.\fR
Write some bytes into the array.
.SS "Seeking/telling and other attributes"
.IX Subsection "Seeking/telling and other attributes"
.IP "autoflush" 4
.IX Item "autoflush"
\&\fIInstance method.\fR
No-op, provided for \s-1OO\s0 compatibility.
.IP "binmode" 4
.IX Item "binmode"
\&\fIInstance method.\fR
No-op, provided for \s-1OO\s0 compatibility.
.IP "clearerr" 4
.IX Item "clearerr"
\&\fIInstance method.\fR  Clear the error and \s-1EOF\s0 flags.  A no-op.
.IP "eof" 4
.IX Item "eof"
\&\fIInstance method.\fR  Are we at end of file?
.IP "seek \s-1POS\s0,WHENCE" 4
.IX Item "seek POS,WHENCE"
\&\fIInstance method.\fR
Seek to a given position in the stream.
Only a \s-1WHENCE\s0 of 0 (\s-1SEEK_SET\s0) is supported.
.IP "tell" 4
.IX Item "tell"
\&\fIInstance method.\fR
Return the current position in the stream, as a numeric offset.
.IP "setpos \s-1POS\s0" 4
.IX Item "setpos POS"
\&\fIInstance method.\fR
Seek to a given position in the array, using the opaque \fIgetpos()\fR value.
Don't expect this to be a number.
.IP "getpos" 4
.IX Item "getpos"
\&\fIInstance method.\fR
Return the current position in the array, as an opaque value.
Don't expect this to be a number.
.IP "aref" 4
.IX Item "aref"
\&\fIInstance method.\fR
Return a reference to the underlying array.
.SH "WARNINGS"
.IX Header "WARNINGS"
Perl's \s-1TIEHANDLE\s0 spec was incomplete prior to 5.005_57;
it was missing support for \f(CW\*(C`seek()\*(C'\fR, \f(CW\*(C`tell()\*(C'\fR, and \f(CW\*(C`eof()\*(C'\fR.
Attempting to use these functions with an IO::ScalarArray will not work
prior to 5.005_57. IO::ScalarArray will not have the relevant methods 
invoked; and even worse, this kind of bug can lie dormant for a while.
If you turn warnings on (via \f(CW$^W\fR or \f(CW\*(C`perl \-w\*(C'\fR),
and you see something like this...
.PP
.Vb 1
\&    attempt to seek on unopened filehandle
.Ve
.PP
\&...then you are probably trying to use one of these functions
on an IO::ScalarArray with an old Perl.  The remedy is to simply
use the \s-1OO\s0 version; e.g.:
.PP
.Vb 2
\&    $AH\->seek(0,0);    ### GOOD: will work on any 5.005
\&    seek($AH,0,0);     ### WARNING: will only work on 5.005_57 and beyond
.Ve
.SH "VERSION"
.IX Header "VERSION"
\&\f(CW$Id:\fR ScalarArray.pm,v 1.7 2005/02/10 21:21:53 dfs Exp $
.SH "AUTHOR"
.IX Header "AUTHOR"
.SS "Primary Maintainer"
.IX Subsection "Primary Maintainer"
David F. Skoll (\fIdfs@roaringpenguin.com\fR).
.SS "Principal author"
.IX Subsection "Principal author"
Eryq (\fIeryq@zeegee.com\fR).
President, ZeeGee Software Inc (\fIhttp://www.zeegee.com\fR).
.SS "Other contributors"
.IX Subsection "Other contributors"
Thanks to the following individuals for their invaluable contributions
(if I've forgotten or misspelled your name, please email me!):
.PP
\&\fIAndy Glew,\fR
for suggesting \f(CW\*(C`getc()\*(C'\fR.
.PP
\&\fIBrandon Browning,\fR
for suggesting \f(CW\*(C`opened()\*(C'\fR.
.PP
\&\fIEric L. Brine,\fR
for his offset-using \fIread()\fR and \fIwrite()\fR implementations.
.PP
\&\fIDoug Wilson,\fR
for the IO::Handle inheritance and automatic tie-ing.
                                                                                                                                                                                                                                                                                                                                                                                                                   osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/IO::ScalarArray5.18.3pm                      0100644 0001750 0001750 00000032460 12566241447 024445  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "IO::ScalarArray 3"
.TH IO::ScalarArray 3 "2005-02-10" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
IO::ScalarArray \- IO:: interface for reading/writing an array of scalars
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Perform I/O on strings, using the basic \s-1OO\s0 interface...
.PP
.Vb 2
\&    use IO::ScalarArray;
\&    @data = ("My mes", "sage:\en");
\&
\&    ### Open a handle on an array, and append to it:
\&    $AH = new IO::ScalarArray \e@data;
\&    $AH\->print("Hello");       
\&    $AH\->print(", world!\enBye now!\en");  
\&    print "The array is now: ", @data, "\en";
\&
\&    ### Open a handle on an array, read it line\-by\-line, then close it:
\&    $AH = new IO::ScalarArray \e@data;
\&    while (defined($_ = $AH\->getline)) { 
\&        print "Got line: $_";
\&    }
\&    $AH\->close;
\&
\&    ### Open a handle on an array, and slurp in all the lines:
\&    $AH = new IO::ScalarArray \e@data;
\&    print "All lines:\en", $AH\->getlines; 
\&
\&    ### Get the current position (either of two ways):
\&    $pos = $AH\->getpos;         
\&    $offset = $AH\->tell;  
\&
\&    ### Set the current position (either of two ways):
\&    $AH\->setpos($pos);        
\&    $AH\->seek($offset, 0);
\&
\&    ### Open an anonymous temporary array:
\&    $AH = new IO::ScalarArray;
\&    $AH\->print("Hi there!");
\&    print "I printed: ", @{$AH\->aref}, "\en";      ### get at value
.Ve
.PP
Don't like \s-1OO\s0 for your I/O?  No problem.  
Thanks to the magic of an invisible \fItie()\fR, the following now 
works out of the box, just as it does with IO::Handle:
.PP
.Vb 2
\&    use IO::ScalarArray;
\&    @data = ("My mes", "sage:\en");
\&
\&    ### Open a handle on an array, and append to it:
\&    $AH = new IO::ScalarArray \e@data;
\&    print $AH "Hello";    
\&    print $AH ", world!\enBye now!\en";
\&    print "The array is now: ", @data, "\en";
\&
\&    ### Open a handle on a string, read it line\-by\-line, then close it:
\&    $AH = new IO::ScalarArray \e@data;
\&    while (<$AH>) {
\&        print "Got line: $_";
\&    }
\&    close $AH;
\&
\&    ### Open a handle on a string, and slurp in all the lines:
\&    $AH = new IO::ScalarArray \e@data;
\&    print "All lines:\en", <$AH>;
\&
\&    ### Get the current position (WARNING: requires 5.6):
\&    $offset = tell $AH;
\&
\&    ### Set the current position (WARNING: requires 5.6):
\&    seek $AH, $offset, 0;
\&
\&    ### Open an anonymous temporary scalar:
\&    $AH = new IO::ScalarArray;
\&    print $AH "Hi there!";
\&    print "I printed: ", @{$AH\->aref}, "\en";      ### get at value
.Ve
.PP
And for you folks with 1.x code out there: the old \fItie()\fR style still works,
though this is \fIunnecessary and deprecated\fR:
.PP
.Vb 1
\&    use IO::ScalarArray;
\&
\&    ### Writing to a scalar...
\&    my @a; 
\&    tie *OUT, \*(AqIO::ScalarArray\*(Aq, \e@a;
\&    print OUT "line 1\enline 2\en", "line 3\en";
\&    print "Array is now: ", @a, "\en"
\&
\&    ### Reading and writing an anonymous scalar... 
\&    tie *OUT, \*(AqIO::ScalarArray\*(Aq;
\&    print OUT "line 1\enline 2\en", "line 3\en";
\&    tied(OUT)\->seek(0,0);
\&    while (<OUT>) { 
\&        print "Got line: ", $_;
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class is part of the IO::Stringy distribution;
see IO::Stringy for change log and general information.
.PP
The IO::ScalarArray class implements objects which behave just like 
IO::Handle (or FileHandle) objects, except that you may use them 
to write to (or read from) arrays of scalars.  Logically, an
array of scalars defines an in-core \*(L"file\*(R" whose contents are
the concatenation of the scalars in the array.  The handles created by 
this class are automatically tiehandle'd (though please see \*(L"\s-1WARNINGS\*(R"\s0
for information relevant to your Perl version).
.PP
For writing large amounts of data with individual \fIprint()\fR statements, 
this class is likely to be more efficient than IO::Scalar.
.PP
Basically, this:
.PP
.Vb 4
\&    my @a;
\&    $AH = new IO::ScalarArray \e@a;
\&    $AH\->print("Hel", "lo, ");         ### OO style
\&    $AH\->print("world!\en");            ### ditto
.Ve
.PP
Or this:
.PP
.Vb 4
\&    my @a;
\&    $AH = new IO::ScalarArray \e@a;
\&    print $AH "Hel", "lo, ";           ### non\-OO style
\&    print $AH "world!\en";              ### ditto
.Ve
.PP
Causes \f(CW@a\fR to be set to the following array of 3 strings:
.PP
.Vb 3
\&    ( "Hel" , 
\&      "lo, " , 
\&      "world!\en" )
.Ve
.PP
See IO::Scalar and compare with this class.
.SH "PUBLIC INTERFACE"
.IX Header "PUBLIC INTERFACE"
.SS "Construction"
.IX Subsection "Construction"
.IP "new [\s-1ARGS...\s0]" 4
.IX Item "new [ARGS...]"
\&\fIClass method.\fR
Return a new, unattached array handle.  
If any arguments are given, they're sent to \fIopen()\fR.
.IP "open [\s-1ARRAYREF\s0]" 4
.IX Item "open [ARRAYREF]"
\&\fIInstance method.\fR
Open the array handle on a new array, pointed to by \s-1ARRAYREF.\s0
If no \s-1ARRAYREF\s0 is given, a \*(L"private\*(R" array is created to hold
the file data.
.Sp
Returns the self object on success, undefined on error.
.IP "opened" 4
.IX Item "opened"
\&\fIInstance method.\fR
Is the array handle opened on something?
.IP "close" 4
.IX Item "close"
\&\fIInstance method.\fR
Disassociate the array handle from its underlying array.
Done automatically on destroy.
.SS "Input and output"
.IX Subsection "Input and output"
.IP "flush" 4
.IX Item "flush"
\&\fIInstance method.\fR
No-op, provided for \s-1OO\s0 compatibility.
.IP "getc" 4
.IX Item "getc"
\&\fIInstance method.\fR
Return the next character, or undef if none remain.
This does a \fIread\fR\|(1), which is somewhat costly.
.IP "getline" 4
.IX Item "getline"
\&\fIInstance method.\fR
Return the next line, or undef on end of data.
Can safely be called in an array context.
Currently, lines are delimited by \*(L"\en\*(R".
.IP "getlines" 4
.IX Item "getlines"
\&\fIInstance method.\fR
Get all remaining lines.
It will \fIcroak()\fR if accidentally called in a scalar context.
.IP "print \s-1ARGS...\s0" 4
.IX Item "print ARGS..."
\&\fIInstance method.\fR
Print \s-1ARGS\s0 to the underlying array.
.Sp
Currently, this always causes a \*(L"seek to the end of the array\*(R"
and generates a new array entry.  This may change in the future.
.IP "read \s-1BUF, NBYTES,\s0 [\s-1OFFSET\s0];" 4
.IX Item "read BUF, NBYTES, [OFFSET];"
\&\fIInstance method.\fR
Read some bytes from the array.
Returns the number of bytes actually read, 0 on end-of-file, undef on error.
.IP "write \s-1BUF, NBYTES,\s0 [\s-1OFFSET\s0];" 4
.IX Item "write BUF, NBYTES, [OFFSET];"
\&\fIInstance method.\fR
Write some bytes into the array.
.SS "Seeking/telling and other attributes"
.IX Subsection "Seeking/telling and other attributes"
.IP "autoflush" 4
.IX Item "autoflush"
\&\fIInstance method.\fR
No-op, provided for \s-1OO\s0 compatibility.
.IP "binmode" 4
.IX Item "binmode"
\&\fIInstance method.\fR
No-op, provided for \s-1OO\s0 compatibility.
.IP "clearerr" 4
.IX Item "clearerr"
\&\fIInstance method.\fR  Clear the error and \s-1EOF\s0 flags.  A no-op.
.IP "eof" 4
.IX Item "eof"
\&\fIInstance method.\fR  Are we at end of file?
.IP "seek \s-1POS,WHENCE\s0" 4
.IX Item "seek POS,WHENCE"
\&\fIInstance method.\fR
Seek to a given position in the stream.
Only a \s-1WHENCE\s0 of 0 (\s-1SEEK_SET\s0) is supported.
.IP "tell" 4
.IX Item "tell"
\&\fIInstance method.\fR
Return the current position in the stream, as a numeric offset.
.IP "setpos \s-1POS\s0" 4
.IX Item "setpos POS"
\&\fIInstance method.\fR
Seek to a given position in the array, using the opaque \fIgetpos()\fR value.
Don't expect this to be a number.
.IP "getpos" 4
.IX Item "getpos"
\&\fIInstance method.\fR
Return the current position in the array, as an opaque value.
Don't expect this to be a number.
.IP "aref" 4
.IX Item "aref"
\&\fIInstance method.\fR
Return a reference to the underlying array.
.SH "WARNINGS"
.IX Header "WARNINGS"
Perl's \s-1TIEHANDLE\s0 spec was incomplete prior to 5.005_57;
it was missing support for \f(CW\*(C`seek()\*(C'\fR, \f(CW\*(C`tell()\*(C'\fR, and \f(CW\*(C`eof()\*(C'\fR.
Attempting to use these functions with an IO::ScalarArray will not work
prior to 5.005_57. IO::ScalarArray will not have the relevant methods 
invoked; and even worse, this kind of bug can lie dormant for a while.
If you turn warnings on (via \f(CW$^W\fR or \f(CW\*(C`perl \-w\*(C'\fR),
and you see something like this...
.PP
.Vb 1
\&    attempt to seek on unopened filehandle
.Ve
.PP
\&...then you are probably trying to use one of these functions
on an IO::ScalarArray with an old Perl.  The remedy is to simply
use the \s-1OO\s0 version; e.g.:
.PP
.Vb 2
\&    $AH\->seek(0,0);    ### GOOD: will work on any 5.005
\&    seek($AH,0,0);     ### WARNING: will only work on 5.005_57 and beyond
.Ve
.SH "VERSION"
.IX Header "VERSION"
\&\f(CW$Id:\fR ScalarArray.pm,v 1.7 2005/02/10 21:21:53 dfs Exp $
.SH "AUTHOR"
.IX Header "AUTHOR"
.SS "Primary Maintainer"
.IX Subsection "Primary Maintainer"
David F. Skoll (\fIdfs@roaringpenguin.com\fR).
.SS "Principal author"
.IX Subsection "Principal author"
Eryq (\fIeryq@zeegee.com\fR).
President, ZeeGee Software Inc (\fIhttp://www.zeegee.com\fR).
.SS "Other contributors"
.IX Subsection "Other contributors"
Thanks to the following individuals for their invaluable contributions
(if I've forgotten or misspelled your name, please email me!):
.PP
\&\fIAndy Glew,\fR
for suggesting \f(CW\*(C`getc()\*(C'\fR.
.PP
\&\fIBrandon Browning,\fR
for suggesting \f(CW\*(C`opened()\*(C'\fR.
.PP
\&\fIEric L. Brine,\fR
for his offset-using \fIread()\fR and \fIwrite()\fR implementations.
.PP
\&\fIDoug Wilson,\fR
for the IO::Handle inheritance and automatic tie-ing.
                                                                                                                                                                                                                osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/IO::Seekable.3pm                             0100644 0001750 0001750 00000015616 12566207456 023446  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "IO::Seekable 3pm"
.TH IO::Seekable 3pm "2013-11-04" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
IO::Seekable \- supply seek based methods for I/O objects
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&    use IO::Seekable;
\&    package IO::Something;
\&    @ISA = qw(IO::Seekable);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`IO::Seekable\*(C'\fR does not have a constructor of its own as it is intended to
be inherited by other \f(CW\*(C`IO::Handle\*(C'\fR based objects. It provides methods
which allow seeking of the file descriptors.
.ie n .IP "$io\->getpos" 4
.el .IP "\f(CW$io\fR\->getpos" 4
.IX Item "$io->getpos"
Returns an opaque value that represents the current position of the
IO::File, or \f(CW\*(C`undef\*(C'\fR if this is not possible (eg an unseekable stream such
as a terminal, pipe or socket). If the \fIfgetpos()\fR function is available in
your C library it is used to implements getpos, else perl emulates getpos
using C's \fIftell()\fR function.
.ie n .IP "$io\->setpos" 4
.el .IP "\f(CW$io\fR\->setpos" 4
.IX Item "$io->setpos"
Uses the value of a previous getpos call to return to a previously visited
position. Returns \*(L"0 but true\*(R" on success, \f(CW\*(C`undef\*(C'\fR on failure.
.PP
See perlfunc for complete descriptions of each of the following
supported \f(CW\*(C`IO::Seekable\*(C'\fR methods, which are just front ends for the
corresponding built-in functions:
.ie n .IP "$io\->seek ( \s-1POS, WHENCE \s0)" 4
.el .IP "\f(CW$io\fR\->seek ( \s-1POS, WHENCE \s0)" 4
.IX Item "$io->seek ( POS, WHENCE )"
Seek the IO::File to position \s-1POS,\s0 relative to \s-1WHENCE:\s0
.RS 4
.IP "WHENCE=0 (\s-1SEEK_SET\s0)" 8
.IX Item "WHENCE=0 (SEEK_SET)"
\&\s-1POS\s0 is absolute position. (Seek relative to the start of the file)
.IP "WHENCE=1 (\s-1SEEK_CUR\s0)" 8
.IX Item "WHENCE=1 (SEEK_CUR)"
\&\s-1POS\s0 is an offset from the current position. (Seek relative to current)
.IP "WHENCE=2 (\s-1SEEK_END\s0)" 8
.IX Item "WHENCE=2 (SEEK_END)"
\&\s-1POS\s0 is an offset from the end of the file. (Seek relative to end)
.RE
.RS 4
.Sp
The SEEK_* constants can be imported from the \f(CW\*(C`Fcntl\*(C'\fR module if you
don't wish to use the numbers \f(CW0\fR \f(CW1\fR or \f(CW2\fR in your code.
.Sp
Returns \f(CW1\fR upon success, \f(CW0\fR otherwise.
.RE
.ie n .IP "$io\->sysseek( \s-1POS, WHENCE \s0)" 4
.el .IP "\f(CW$io\fR\->sysseek( \s-1POS, WHENCE \s0)" 4
.IX Item "$io->sysseek( POS, WHENCE )"
Similar to \f(CW$io\fR\->seek, but sets the IO::File's position using the system
call \fIlseek\fR\|(2) directly, so will confuse most perl \s-1IO\s0 operators except
sysread and syswrite (see perlfunc for full details)
.Sp
Returns the new position, or \f(CW\*(C`undef\*(C'\fR on failure.  A position
of zero is returned as the string \f(CW"0 but true"\fR
.ie n .IP "$io\->tell" 4
.el .IP "\f(CW$io\fR\->tell" 4
.IX Item "$io->tell"
Returns the IO::File's current position, or \-1 on error.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
perlfunc, 
\&\*(L"I/O Operators\*(R" in perlop,
IO::Handle
IO::File
.SH "HISTORY"
.IX Header "HISTORY"
Derived from FileHandle.pm by Graham Barr <gbarr@pobox.com>
                                                                                                                  osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/IO::Seekable5.16.3pm                         0100644 0001750 0001750 00000015331 12566207435 023747  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "IO::Seekable 3pm"
.TH IO::Seekable 3pm "2013-02-26" "perl v5.16.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
IO::Seekable \- supply seek based methods for I/O objects
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&    use IO::Seekable;
\&    package IO::Something;
\&    @ISA = qw(IO::Seekable);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`IO::Seekable\*(C'\fR does not have a constructor of its own as it is intended to
be inherited by other \f(CW\*(C`IO::Handle\*(C'\fR based objects. It provides methods
which allow seeking of the file descriptors.
.ie n .IP "$io\->getpos" 4
.el .IP "\f(CW$io\fR\->getpos" 4
.IX Item "$io->getpos"
Returns an opaque value that represents the current position of the
IO::File, or \f(CW\*(C`undef\*(C'\fR if this is not possible (eg an unseekable stream such
as a terminal, pipe or socket). If the \fIfgetpos()\fR function is available in
your C library it is used to implements getpos, else perl emulates getpos
using C's \fIftell()\fR function.
.ie n .IP "$io\->setpos" 4
.el .IP "\f(CW$io\fR\->setpos" 4
.IX Item "$io->setpos"
Uses the value of a previous getpos call to return to a previously visited
position. Returns \*(L"0 but true\*(R" on success, \f(CW\*(C`undef\*(C'\fR on failure.
.PP
See perlfunc for complete descriptions of each of the following
supported \f(CW\*(C`IO::Seekable\*(C'\fR methods, which are just front ends for the
corresponding built-in functions:
.ie n .IP "$io\->seek ( \s-1POS\s0, \s-1WHENCE\s0 )" 4
.el .IP "\f(CW$io\fR\->seek ( \s-1POS\s0, \s-1WHENCE\s0 )" 4
.IX Item "$io->seek ( POS, WHENCE )"
Seek the IO::File to position \s-1POS\s0, relative to \s-1WHENCE:\s0
.RS 4
.IP "WHENCE=0 (\s-1SEEK_SET\s0)" 8
.IX Item "WHENCE=0 (SEEK_SET)"
\&\s-1POS\s0 is absolute position. (Seek relative to the start of the file)
.IP "WHENCE=1 (\s-1SEEK_CUR\s0)" 8
.IX Item "WHENCE=1 (SEEK_CUR)"
\&\s-1POS\s0 is an offset from the current position. (Seek relative to current)
.IP "WHENCE=2 (\s-1SEEK_END\s0)" 8
.IX Item "WHENCE=2 (SEEK_END)"
\&\s-1POS\s0 is an offset from the end of the file. (Seek relative to end)
.RE
.RS 4
.Sp
The SEEK_* constants can be imported from the \f(CW\*(C`Fcntl\*(C'\fR module if you
don't wish to use the numbers \f(CW0\fR \f(CW1\fR or \f(CW2\fR in your code.
.Sp
Returns \f(CW1\fR upon success, \f(CW0\fR otherwise.
.RE
.ie n .IP "$io\->sysseek( \s-1POS\s0, \s-1WHENCE\s0 )" 4
.el .IP "\f(CW$io\fR\->sysseek( \s-1POS\s0, \s-1WHENCE\s0 )" 4
.IX Item "$io->sysseek( POS, WHENCE )"
Similar to \f(CW$io\fR\->seek, but sets the IO::File's position using the system
call \fIlseek\fR\|(2) directly, so will confuse most perl \s-1IO\s0 operators except
sysread and syswrite (see perlfunc for full details)
.Sp
Returns the new position, or \f(CW\*(C`undef\*(C'\fR on failure.  A position
of zero is returned as the string \f(CW"0 but true"\fR
.ie n .IP "$io\->tell" 4
.el .IP "\f(CW$io\fR\->tell" 4
.IX Item "$io->tell"
Returns the IO::File's current position, or \-1 on error.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
perlfunc, 
\&\*(L"I/O Operators\*(R" in perlop,
IO::Handle
IO::File
.SH "HISTORY"
.IX Header "HISTORY"
Derived from FileHandle.pm by Graham Barr <gbarr@pobox.com>
                                                                                                                                                                                                                                                                                                       osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/IO::Seekable5.18.3pm                         0100644 0001750 0001750 00000015616 12566207456 023762  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "IO::Seekable 3pm"
.TH IO::Seekable 3pm "2013-11-04" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
IO::Seekable \- supply seek based methods for I/O objects
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&    use IO::Seekable;
\&    package IO::Something;
\&    @ISA = qw(IO::Seekable);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`IO::Seekable\*(C'\fR does not have a constructor of its own as it is intended to
be inherited by other \f(CW\*(C`IO::Handle\*(C'\fR based objects. It provides methods
which allow seeking of the file descriptors.
.ie n .IP "$io\->getpos" 4
.el .IP "\f(CW$io\fR\->getpos" 4
.IX Item "$io->getpos"
Returns an opaque value that represents the current position of the
IO::File, or \f(CW\*(C`undef\*(C'\fR if this is not possible (eg an unseekable stream such
as a terminal, pipe or socket). If the \fIfgetpos()\fR function is available in
your C library it is used to implements getpos, else perl emulates getpos
using C's \fIftell()\fR function.
.ie n .IP "$io\->setpos" 4
.el .IP "\f(CW$io\fR\->setpos" 4
.IX Item "$io->setpos"
Uses the value of a previous getpos call to return to a previously visited
position. Returns \*(L"0 but true\*(R" on success, \f(CW\*(C`undef\*(C'\fR on failure.
.PP
See perlfunc for complete descriptions of each of the following
supported \f(CW\*(C`IO::Seekable\*(C'\fR methods, which are just front ends for the
corresponding built-in functions:
.ie n .IP "$io\->seek ( \s-1POS, WHENCE \s0)" 4
.el .IP "\f(CW$io\fR\->seek ( \s-1POS, WHENCE \s0)" 4
.IX Item "$io->seek ( POS, WHENCE )"
Seek the IO::File to position \s-1POS,\s0 relative to \s-1WHENCE:\s0
.RS 4
.IP "WHENCE=0 (\s-1SEEK_SET\s0)" 8
.IX Item "WHENCE=0 (SEEK_SET)"
\&\s-1POS\s0 is absolute position. (Seek relative to the start of the file)
.IP "WHENCE=1 (\s-1SEEK_CUR\s0)" 8
.IX Item "WHENCE=1 (SEEK_CUR)"
\&\s-1POS\s0 is an offset from the current position. (Seek relative to current)
.IP "WHENCE=2 (\s-1SEEK_END\s0)" 8
.IX Item "WHENCE=2 (SEEK_END)"
\&\s-1POS\s0 is an offset from the end of the file. (Seek relative to end)
.RE
.RS 4
.Sp
The SEEK_* constants can be imported from the \f(CW\*(C`Fcntl\*(C'\fR module if you
don't wish to use the numbers \f(CW0\fR \f(CW1\fR or \f(CW2\fR in your code.
.Sp
Returns \f(CW1\fR upon success, \f(CW0\fR otherwise.
.RE
.ie n .IP "$io\->sysseek( \s-1POS, WHENCE \s0)" 4
.el .IP "\f(CW$io\fR\->sysseek( \s-1POS, WHENCE \s0)" 4
.IX Item "$io->sysseek( POS, WHENCE )"
Similar to \f(CW$io\fR\->seek, but sets the IO::File's position using the system
call \fIlseek\fR\|(2) directly, so will confuse most perl \s-1IO\s0 operators except
sysread and syswrite (see perlfunc for full details)
.Sp
Returns the new position, or \f(CW\*(C`undef\*(C'\fR on failure.  A position
of zero is returned as the string \f(CW"0 but true"\fR
.ie n .IP "$io\->tell" 4
.el .IP "\f(CW$io\fR\->tell" 4
.IX Item "$io->tell"
Returns the IO::File's current position, or \-1 on error.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
perlfunc, 
\&\*(L"I/O Operators\*(R" in perlop,
IO::Handle
IO::File
.SH "HISTORY"
.IX Header "HISTORY"
Derived from FileHandle.pm by Graham Barr <gbarr@pobox.com>
                                                                                                                  osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/IO::Select.3pm                               0100644 0001750 0001750 00000021455 12566207456 023150  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "IO::Select 3pm"
.TH IO::Select 3pm "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
IO::Select \- OO interface to the select system call
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use IO::Select;
\&
\&    $s = IO::Select\->new();
\&
\&    $s\->add(\e*STDIN);
\&    $s\->add($some_handle);
\&
\&    @ready = $s\->can_read($timeout);
\&
\&    @ready = IO::Select\->new(@handles)\->can_read(0);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \f(CW\*(C`IO::Select\*(C'\fR package implements an object approach to the system \f(CW\*(C`select\*(C'\fR
function call. It allows the user to see what \s-1IO\s0 handles, see IO::Handle,
are ready for reading, writing or have an exception pending.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.IP "new ( [ \s-1HANDLES \s0] )" 4
.IX Item "new ( [ HANDLES ] )"
The constructor creates a new object and optionally initialises it with a set
of handles.
.SH "METHODS"
.IX Header "METHODS"
.IP "add ( \s-1HANDLES \s0)" 4
.IX Item "add ( HANDLES )"
Add the list of handles to the \f(CW\*(C`IO::Select\*(C'\fR object. It is these values that
will be returned when an event occurs. \f(CW\*(C`IO::Select\*(C'\fR keeps these values in a
cache which is indexed by the \f(CW\*(C`fileno\*(C'\fR of the handle, so if more than one
handle with the same \f(CW\*(C`fileno\*(C'\fR is specified then only the last one is cached.
.Sp
Each handle can be an \f(CW\*(C`IO::Handle\*(C'\fR object, an integer or an array
reference where the first element is an \f(CW\*(C`IO::Handle\*(C'\fR or an integer.
.IP "remove ( \s-1HANDLES \s0)" 4
.IX Item "remove ( HANDLES )"
Remove all the given handles from the object. This method also works
by the \f(CW\*(C`fileno\*(C'\fR of the handles. So the exact handles that were added
need not be passed, just handles that have an equivalent \f(CW\*(C`fileno\*(C'\fR
.IP "exists ( \s-1HANDLE \s0)" 4
.IX Item "exists ( HANDLE )"
Returns a true value (actually the handle itself) if it is present.
Returns undef otherwise.
.IP "handles" 4
.IX Item "handles"
Return an array of all registered handles.
.IP "can_read ( [ \s-1TIMEOUT \s0] )" 4
.IX Item "can_read ( [ TIMEOUT ] )"
Return an array of handles that are ready for reading. \f(CW\*(C`TIMEOUT\*(C'\fR is
the maximum amount of time to wait before returning an empty list, in
seconds, possibly fractional. If \f(CW\*(C`TIMEOUT\*(C'\fR is not given and any
handles are registered then the call will block.
.IP "can_write ( [ \s-1TIMEOUT \s0] )" 4
.IX Item "can_write ( [ TIMEOUT ] )"
Same as \f(CW\*(C`can_read\*(C'\fR except check for handles that can be written to.
.IP "has_exception ( [ \s-1TIMEOUT \s0] )" 4
.IX Item "has_exception ( [ TIMEOUT ] )"
Same as \f(CW\*(C`can_read\*(C'\fR except check for handles that have an exception
condition, for example pending out-of-band data.
.IP "count ()" 4
.IX Item "count ()"
Returns the number of handles that the object will check for when
one of the \f(CW\*(C`can_\*(C'\fR methods is called or the object is passed to
the \f(CW\*(C`select\*(C'\fR static method.
.IP "\fIbits()\fR" 4
.IX Item "bits()"
Return the bit string suitable as argument to the core \fIselect()\fR call.
.IP "select ( \s-1READ, WRITE, EXCEPTION\s0 [, \s-1TIMEOUT \s0] )" 4
.IX Item "select ( READ, WRITE, EXCEPTION [, TIMEOUT ] )"
\&\f(CW\*(C`select\*(C'\fR is a static method, that is you call it with the package name
like \f(CW\*(C`new\*(C'\fR. \f(CW\*(C`READ\*(C'\fR, \f(CW\*(C`WRITE\*(C'\fR and \f(CW\*(C`EXCEPTION\*(C'\fR are either \f(CW\*(C`undef\*(C'\fR or
\&\f(CW\*(C`IO::Select\*(C'\fR objects. \f(CW\*(C`TIMEOUT\*(C'\fR is optional and has the same effect as
for the core select call.
.Sp
The result will be an array of 3 elements, each a reference to an array
which will hold the handles that are ready for reading, writing and have
exceptions respectively. Upon error an empty list is returned.
.SH "EXAMPLE"
.IX Header "EXAMPLE"
Here is a short example which shows how \f(CW\*(C`IO::Select\*(C'\fR could be used
to write a server which communicates with several sockets while also
listening for more connections on a listen socket
.PP
.Vb 2
\&    use IO::Select;
\&    use IO::Socket;
\&
\&    $lsn = IO::Socket::INET\->new(Listen => 1, LocalPort => 8080);
\&    $sel = IO::Select\->new( $lsn );
\&
\&    while(@ready = $sel\->can_read) {
\&        foreach $fh (@ready) {
\&            if($fh == $lsn) {
\&                # Create a new socket
\&                $new = $lsn\->accept;
\&                $sel\->add($new);
\&            }
\&            else {
\&                # Process socket
\&
\&                # Maybe we have finished with the socket
\&                $sel\->remove($fh);
\&                $fh\->close;
\&            }
\&        }
\&    }
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Graham Barr. Currently maintained by the Perl Porters.  Please report all
bugs to <perlbug@perl.org>.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 1997\-8 Graham Barr <gbarr@pobox.com>. All rights reserved.
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
                                                                                                                                                                                                                   osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/IO::Select5.16.3pm                           0100644 0001750 0001750 00000021152 12566207435 023451  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "IO::Select 3pm"
.TH IO::Select 3pm "2013-03-04" "perl v5.16.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
IO::Select \- OO interface to the select system call
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use IO::Select;
\&
\&    $s = IO::Select\->new();
\&
\&    $s\->add(\e*STDIN);
\&    $s\->add($some_handle);
\&
\&    @ready = $s\->can_read($timeout);
\&
\&    @ready = IO::Select\->new(@handles)\->can_read(0);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \f(CW\*(C`IO::Select\*(C'\fR package implements an object approach to the system \f(CW\*(C`select\*(C'\fR
function call. It allows the user to see what \s-1IO\s0 handles, see IO::Handle,
are ready for reading, writing or have an exception pending.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.IP "new ( [ \s-1HANDLES\s0 ] )" 4
.IX Item "new ( [ HANDLES ] )"
The constructor creates a new object and optionally initialises it with a set
of handles.
.SH "METHODS"
.IX Header "METHODS"
.IP "add ( \s-1HANDLES\s0 )" 4
.IX Item "add ( HANDLES )"
Add the list of handles to the \f(CW\*(C`IO::Select\*(C'\fR object. It is these values that
will be returned when an event occurs. \f(CW\*(C`IO::Select\*(C'\fR keeps these values in a
cache which is indexed by the \f(CW\*(C`fileno\*(C'\fR of the handle, so if more than one
handle with the same \f(CW\*(C`fileno\*(C'\fR is specified then only the last one is cached.
.Sp
Each handle can be an \f(CW\*(C`IO::Handle\*(C'\fR object, an integer or an array
reference where the first element is an \f(CW\*(C`IO::Handle\*(C'\fR or an integer.
.IP "remove ( \s-1HANDLES\s0 )" 4
.IX Item "remove ( HANDLES )"
Remove all the given handles from the object. This method also works
by the \f(CW\*(C`fileno\*(C'\fR of the handles. So the exact handles that were added
need not be passed, just handles that have an equivalent \f(CW\*(C`fileno\*(C'\fR
.IP "exists ( \s-1HANDLE\s0 )" 4
.IX Item "exists ( HANDLE )"
Returns a true value (actually the handle itself) if it is present.
Returns undef otherwise.
.IP "handles" 4
.IX Item "handles"
Return an array of all registered handles.
.IP "can_read ( [ \s-1TIMEOUT\s0 ] )" 4
.IX Item "can_read ( [ TIMEOUT ] )"
Return an array of handles that are ready for reading. \f(CW\*(C`TIMEOUT\*(C'\fR is
the maximum amount of time to wait before returning an empty list, in
seconds, possibly fractional. If \f(CW\*(C`TIMEOUT\*(C'\fR is not given and any
handles are registered then the call will block.
.IP "can_write ( [ \s-1TIMEOUT\s0 ] )" 4
.IX Item "can_write ( [ TIMEOUT ] )"
Same as \f(CW\*(C`can_read\*(C'\fR except check for handles that can be written to.
.IP "has_exception ( [ \s-1TIMEOUT\s0 ] )" 4
.IX Item "has_exception ( [ TIMEOUT ] )"
Same as \f(CW\*(C`can_read\*(C'\fR except check for handles that have an exception
condition, for example pending out-of-band data.
.IP "count ()" 4
.IX Item "count ()"
Returns the number of handles that the object will check for when
one of the \f(CW\*(C`can_\*(C'\fR methods is called or the object is passed to
the \f(CW\*(C`select\*(C'\fR static method.
.IP "\fIbits()\fR" 4
.IX Item "bits()"
Return the bit string suitable as argument to the core \fIselect()\fR call.
.IP "select ( \s-1READ\s0, \s-1WRITE\s0, \s-1EXCEPTION\s0 [, \s-1TIMEOUT\s0 ] )" 4
.IX Item "select ( READ, WRITE, EXCEPTION [, TIMEOUT ] )"
\&\f(CW\*(C`select\*(C'\fR is a static method, that is you call it with the package name
like \f(CW\*(C`new\*(C'\fR. \f(CW\*(C`READ\*(C'\fR, \f(CW\*(C`WRITE\*(C'\fR and \f(CW\*(C`EXCEPTION\*(C'\fR are either \f(CW\*(C`undef\*(C'\fR or
\&\f(CW\*(C`IO::Select\*(C'\fR objects. \f(CW\*(C`TIMEOUT\*(C'\fR is optional and has the same effect as
for the core select call.
.Sp
The result will be an array of 3 elements, each a reference to an array
which will hold the handles that are ready for reading, writing and have
exceptions respectively. Upon error an empty list is returned.
.SH "EXAMPLE"
.IX Header "EXAMPLE"
Here is a short example which shows how \f(CW\*(C`IO::Select\*(C'\fR could be used
to write a server which communicates with several sockets while also
listening for more connections on a listen socket
.PP
.Vb 2
\&    use IO::Select;
\&    use IO::Socket;
\&
\&    $lsn = IO::Socket::INET\->new(Listen => 1, LocalPort => 8080);
\&    $sel = IO::Select\->new( $lsn );
\&
\&    while(@ready = $sel\->can_read) {
\&        foreach $fh (@ready) {
\&            if($fh == $lsn) {
\&                # Create a new socket
\&                $new = $lsn\->accept;
\&                $sel\->add($new);
\&            }
\&            else {
\&                # Process socket
\&
\&                # Maybe we have finished with the socket
\&                $sel\->remove($fh);
\&                $fh\->close;
\&            }
\&        }
\&    }
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Graham Barr. Currently maintained by the Perl Porters.  Please report all
bugs to <perlbug@perl.org>.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 1997\-8 Graham Barr <gbarr@pobox.com>. All rights reserved.
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
                                                                                                                                                                                                                                                                                                                                                                                                                      osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/IO::Select5.18.3pm                           0100644 0001750 0001750 00000021455 12566207456 023464  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "IO::Select 3pm"
.TH IO::Select 3pm "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
IO::Select \- OO interface to the select system call
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use IO::Select;
\&
\&    $s = IO::Select\->new();
\&
\&    $s\->add(\e*STDIN);
\&    $s\->add($some_handle);
\&
\&    @ready = $s\->can_read($timeout);
\&
\&    @ready = IO::Select\->new(@handles)\->can_read(0);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \f(CW\*(C`IO::Select\*(C'\fR package implements an object approach to the system \f(CW\*(C`select\*(C'\fR
function call. It allows the user to see what \s-1IO\s0 handles, see IO::Handle,
are ready for reading, writing or have an exception pending.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.IP "new ( [ \s-1HANDLES \s0] )" 4
.IX Item "new ( [ HANDLES ] )"
The constructor creates a new object and optionally initialises it with a set
of handles.
.SH "METHODS"
.IX Header "METHODS"
.IP "add ( \s-1HANDLES \s0)" 4
.IX Item "add ( HANDLES )"
Add the list of handles to the \f(CW\*(C`IO::Select\*(C'\fR object. It is these values that
will be returned when an event occurs. \f(CW\*(C`IO::Select\*(C'\fR keeps these values in a
cache which is indexed by the \f(CW\*(C`fileno\*(C'\fR of the handle, so if more than one
handle with the same \f(CW\*(C`fileno\*(C'\fR is specified then only the last one is cached.
.Sp
Each handle can be an \f(CW\*(C`IO::Handle\*(C'\fR object, an integer or an array
reference where the first element is an \f(CW\*(C`IO::Handle\*(C'\fR or an integer.
.IP "remove ( \s-1HANDLES \s0)" 4
.IX Item "remove ( HANDLES )"
Remove all the given handles from the object. This method also works
by the \f(CW\*(C`fileno\*(C'\fR of the handles. So the exact handles that were added
need not be passed, just handles that have an equivalent \f(CW\*(C`fileno\*(C'\fR
.IP "exists ( \s-1HANDLE \s0)" 4
.IX Item "exists ( HANDLE )"
Returns a true value (actually the handle itself) if it is present.
Returns undef otherwise.
.IP "handles" 4
.IX Item "handles"
Return an array of all registered handles.
.IP "can_read ( [ \s-1TIMEOUT \s0] )" 4
.IX Item "can_read ( [ TIMEOUT ] )"
Return an array of handles that are ready for reading. \f(CW\*(C`TIMEOUT\*(C'\fR is
the maximum amount of time to wait before returning an empty list, in
seconds, possibly fractional. If \f(CW\*(C`TIMEOUT\*(C'\fR is not given and any
handles are registered then the call will block.
.IP "can_write ( [ \s-1TIMEOUT \s0] )" 4
.IX Item "can_write ( [ TIMEOUT ] )"
Same as \f(CW\*(C`can_read\*(C'\fR except check for handles that can be written to.
.IP "has_exception ( [ \s-1TIMEOUT \s0] )" 4
.IX Item "has_exception ( [ TIMEOUT ] )"
Same as \f(CW\*(C`can_read\*(C'\fR except check for handles that have an exception
condition, for example pending out-of-band data.
.IP "count ()" 4
.IX Item "count ()"
Returns the number of handles that the object will check for when
one of the \f(CW\*(C`can_\*(C'\fR methods is called or the object is passed to
the \f(CW\*(C`select\*(C'\fR static method.
.IP "\fIbits()\fR" 4
.IX Item "bits()"
Return the bit string suitable as argument to the core \fIselect()\fR call.
.IP "select ( \s-1READ, WRITE, EXCEPTION\s0 [, \s-1TIMEOUT \s0] )" 4
.IX Item "select ( READ, WRITE, EXCEPTION [, TIMEOUT ] )"
\&\f(CW\*(C`select\*(C'\fR is a static method, that is you call it with the package name
like \f(CW\*(C`new\*(C'\fR. \f(CW\*(C`READ\*(C'\fR, \f(CW\*(C`WRITE\*(C'\fR and \f(CW\*(C`EXCEPTION\*(C'\fR are either \f(CW\*(C`undef\*(C'\fR or
\&\f(CW\*(C`IO::Select\*(C'\fR objects. \f(CW\*(C`TIMEOUT\*(C'\fR is optional and has the same effect as
for the core select call.
.Sp
The result will be an array of 3 elements, each a reference to an array
which will hold the handles that are ready for reading, writing and have
exceptions respectively. Upon error an empty list is returned.
.SH "EXAMPLE"
.IX Header "EXAMPLE"
Here is a short example which shows how \f(CW\*(C`IO::Select\*(C'\fR could be used
to write a server which communicates with several sockets while also
listening for more connections on a listen socket
.PP
.Vb 2
\&    use IO::Select;
\&    use IO::Socket;
\&
\&    $lsn = IO::Socket::INET\->new(Listen => 1, LocalPort => 8080);
\&    $sel = IO::Select\->new( $lsn );
\&
\&    while(@ready = $sel\->can_read) {
\&        foreach $fh (@ready) {
\&            if($fh == $lsn) {
\&                # Create a new socket
\&                $new = $lsn\->accept;
\&                $sel\->add($new);
\&            }
\&            else {
\&                # Process socket
\&
\&                # Maybe we have finished with the socket
\&                $sel\->remove($fh);
\&                $fh\->close;
\&            }
\&        }
\&    }
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Graham Barr. Currently maintained by the Perl Porters.  Please report all
bugs to <perlbug@perl.org>.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 1997\-8 Graham Barr <gbarr@pobox.com>. All rights reserved.
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
                                                                                                                                                                                                                   osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/IO::Socket.3pm                               0100644 0001750 0001750 00000024663 12566207456 023165  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "IO::Socket 3pm"
.TH IO::Socket 3pm "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
IO::Socket \- Object interface to socket communications
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use IO::Socket;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`IO::Socket\*(C'\fR provides an object interface to creating and using sockets. It
is built upon the IO::Handle interface and inherits all the methods defined
by IO::Handle.
.PP
\&\f(CW\*(C`IO::Socket\*(C'\fR only defines methods for those operations which are common to all
types of socket. Operations which are specified to a socket in a particular 
domain have methods defined in sub classes of \f(CW\*(C`IO::Socket\*(C'\fR
.PP
\&\f(CW\*(C`IO::Socket\*(C'\fR will export all functions (and constants) defined by Socket.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.IP "new ( [\s-1ARGS\s0] )" 4
.IX Item "new ( [ARGS] )"
Creates an \f(CW\*(C`IO::Socket\*(C'\fR, which is a reference to a
newly created symbol (see the \f(CW\*(C`Symbol\*(C'\fR package). \f(CW\*(C`new\*(C'\fR
optionally takes arguments, these arguments are in key-value pairs.
\&\f(CW\*(C`new\*(C'\fR only looks for one key \f(CW\*(C`Domain\*(C'\fR which tells new which domain
the socket will be in. All other arguments will be passed to the
configuration method of the package for that domain, See below.
.Sp
.Vb 1
\& NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE
.Ve
.Sp
As of \s-1VERSION 1.18\s0 all IO::Socket objects have autoflush turned on
by default. This was not the case with earlier releases.
.Sp
.Vb 1
\& NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE
.Ve
.SH "METHODS"
.IX Header "METHODS"
See perlfunc for complete descriptions of each of the following
supported \f(CW\*(C`IO::Socket\*(C'\fR methods, which are just front ends for the
corresponding built-in functions:
.PP
.Vb 10
\&    socket
\&    socketpair
\&    bind
\&    listen
\&    accept
\&    send
\&    recv
\&    peername (getpeername)
\&    sockname (getsockname)
\&    shutdown
.Ve
.PP
Some methods take slightly different arguments to those defined in perlfunc
in attempt to make the interface more flexible. These are
.IP "accept([\s-1PKG\s0])" 4
.IX Item "accept([PKG])"
perform the system call \f(CW\*(C`accept\*(C'\fR on the socket and return a new
object. The new object will be created in the same class as the listen
socket, unless \f(CW\*(C`PKG\*(C'\fR is specified. This object can be used to
communicate with the client that was trying to connect.
.Sp
In a scalar context the new socket is returned, or undef upon
failure. In a list context a two-element array is returned containing
the new socket and the peer address; the list will be empty upon
failure.
.Sp
The timeout in the [\s-1PKG\s0] can be specified as zero to effect a \*(L"poll\*(R",
but you shouldn't do that because a new IO::Select object will be
created behind the scenes just to do the single poll.  This is
horrendously inefficient.  Use rather true \fIselect()\fR with a zero
timeout on the handle, or non-blocking \s-1IO.\s0
.IP "socketpair(\s-1DOMAIN, TYPE, PROTOCOL\s0)" 4
.IX Item "socketpair(DOMAIN, TYPE, PROTOCOL)"
Call \f(CW\*(C`socketpair\*(C'\fR and return a list of two sockets created, or an
empty list on failure.
.PP
Additional methods that are provided are:
.IP "atmark" 4
.IX Item "atmark"
True if the socket is currently positioned at the urgent data mark,
false otherwise.
.Sp
.Vb 1
\&    use IO::Socket;
\&
\&    my $sock = IO::Socket::INET\->new(\*(Aqsome_server\*(Aq);
\&    $sock\->read($data, 1024) until $sock\->atmark;
.Ve
.Sp
Note: this is a reasonably new addition to the family of socket
functions, so all systems may not support this yet.  If it is
unsupported by the system, an attempt to use this method will
abort the program.
.Sp
The \fIatmark()\fR functionality is also exportable as \fIsockatmark()\fR function:
.Sp
.Vb 1
\&        use IO::Socket \*(Aqsockatmark\*(Aq;
.Ve
.Sp
This allows for a more traditional use of \fIsockatmark()\fR as a procedural
socket function.  If your system does not support \fIsockatmark()\fR, the
\&\f(CW\*(C`use\*(C'\fR declaration will fail at compile time.
.IP "connected" 4
.IX Item "connected"
If the socket is in a connected state the peer address is returned.
If the socket is not in a connected state then undef will be returned.
.IP "protocol" 4
.IX Item "protocol"
Returns the numerical number for the protocol being used on the socket, if
known. If the protocol is unknown, as with an \s-1AF_UNIX\s0 socket, zero
is returned.
.IP "sockdomain" 4
.IX Item "sockdomain"
Returns the numerical number for the socket domain type. For example, for
an \s-1AF_INET\s0 socket the value of &AF_INET will be returned.
.IP "sockopt(\s-1OPT\s0 [, \s-1VAL\s0])" 4
.IX Item "sockopt(OPT [, VAL])"
Unified method to both set and get options in the \s-1SOL_SOCKET\s0 level. If called
with one argument then getsockopt is called, otherwise setsockopt is called.
.IP "getsockopt(\s-1LEVEL, OPT\s0)" 4
.IX Item "getsockopt(LEVEL, OPT)"
Get option associated with the socket. Other levels than \s-1SOL_SOCKET\s0
may be specified here.
.IP "setsockopt(\s-1LEVEL, OPT, VAL\s0)" 4
.IX Item "setsockopt(LEVEL, OPT, VAL)"
Set option associated with the socket. Other levels than \s-1SOL_SOCKET\s0
may be specified here.
.IP "socktype" 4
.IX Item "socktype"
Returns the numerical number for the socket type. For example, for
a \s-1SOCK_STREAM\s0 socket the value of &SOCK_STREAM will be returned.
.IP "timeout([\s-1VAL\s0])" 4
.IX Item "timeout([VAL])"
Set or get the timeout value (in seconds) associated with this socket.
If called without any arguments then the current setting is returned. If
called with an argument the current setting is changed and the previous
value returned.
.SH "LIMITATIONS"
.IX Header "LIMITATIONS"
On some systems, for an IO::Socket object created with \fInew_from_fd()\fR,
or created with \fIaccept()\fR from such an object, the \fIprotocol()\fR,
\&\fIsockdomain()\fR and \fIsocktype()\fR methods may return undef.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Socket, IO::Handle, IO::Socket::INET, IO::Socket::UNIX
.SH "AUTHOR"
.IX Header "AUTHOR"
Graham Barr.  \fIatmark()\fR by Lincoln Stein.  Currently maintained by the
Perl Porters.  Please report all bugs to <perlbug@perl.org>.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 1997\-8 Graham Barr <gbarr@pobox.com>. All rights reserved.
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.PP
The \fIatmark()\fR implementation: Copyright 2001, Lincoln Stein <lstein@cshl.org>.
This module is distributed under the same terms as Perl itself.
Feel free to use, modify and redistribute it as long as you retain
the correct attribution.
                                                                             osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/IO::Socket5.16.3pm                           0100644 0001750 0001750 00000024000 12566207435 023455  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "IO::Socket 3pm"
.TH IO::Socket 3pm "2013-03-04" "perl v5.16.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
IO::Socket \- Object interface to socket communications
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use IO::Socket;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`IO::Socket\*(C'\fR provides an object interface to creating and using sockets. It
is built upon the IO::Handle interface and inherits all the methods defined
by IO::Handle.
.PP
\&\f(CW\*(C`IO::Socket\*(C'\fR only defines methods for those operations which are common to all
types of socket. Operations which are specified to a socket in a particular 
domain have methods defined in sub classes of \f(CW\*(C`IO::Socket\*(C'\fR
.PP
\&\f(CW\*(C`IO::Socket\*(C'\fR will export all functions (and constants) defined by Socket.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.IP "new ( [\s-1ARGS\s0] )" 4
.IX Item "new ( [ARGS] )"
Creates an \f(CW\*(C`IO::Socket\*(C'\fR, which is a reference to a
newly created symbol (see the \f(CW\*(C`Symbol\*(C'\fR package). \f(CW\*(C`new\*(C'\fR
optionally takes arguments, these arguments are in key-value pairs.
\&\f(CW\*(C`new\*(C'\fR only looks for one key \f(CW\*(C`Domain\*(C'\fR which tells new which domain
the socket will be in. All other arguments will be passed to the
configuration method of the package for that domain, See below.
.Sp
.Vb 1
\& NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE
.Ve
.Sp
As of \s-1VERSION\s0 1.18 all IO::Socket objects have autoflush turned on
by default. This was not the case with earlier releases.
.Sp
.Vb 1
\& NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE
.Ve
.SH "METHODS"
.IX Header "METHODS"
See perlfunc for complete descriptions of each of the following
supported \f(CW\*(C`IO::Socket\*(C'\fR methods, which are just front ends for the
corresponding built-in functions:
.PP
.Vb 10
\&    socket
\&    socketpair
\&    bind
\&    listen
\&    accept
\&    send
\&    recv
\&    peername (getpeername)
\&    sockname (getsockname)
\&    shutdown
.Ve
.PP
Some methods take slightly different arguments to those defined in perlfunc
in attempt to make the interface more flexible. These are
.IP "accept([\s-1PKG\s0])" 4
.IX Item "accept([PKG])"
perform the system call \f(CW\*(C`accept\*(C'\fR on the socket and return a new
object. The new object will be created in the same class as the listen
socket, unless \f(CW\*(C`PKG\*(C'\fR is specified. This object can be used to
communicate with the client that was trying to connect.
.Sp
In a scalar context the new socket is returned, or undef upon
failure. In a list context a two-element array is returned containing
the new socket and the peer address; the list will be empty upon
failure.
.Sp
The timeout in the [\s-1PKG\s0] can be specified as zero to effect a \*(L"poll\*(R",
but you shouldn't do that because a new IO::Select object will be
created behind the scenes just to do the single poll.  This is
horrendously inefficient.  Use rather true \fIselect()\fR with a zero
timeout on the handle, or non-blocking \s-1IO\s0.
.IP "socketpair(\s-1DOMAIN\s0, \s-1TYPE\s0, \s-1PROTOCOL\s0)" 4
.IX Item "socketpair(DOMAIN, TYPE, PROTOCOL)"
Call \f(CW\*(C`socketpair\*(C'\fR and return a list of two sockets created, or an
empty list on failure.
.PP
Additional methods that are provided are:
.IP "atmark" 4
.IX Item "atmark"
True if the socket is currently positioned at the urgent data mark,
false otherwise.
.Sp
.Vb 1
\&    use IO::Socket;
\&
\&    my $sock = IO::Socket::INET\->new(\*(Aqsome_server\*(Aq);
\&    $sock\->read($data, 1024) until $sock\->atmark;
.Ve
.Sp
Note: this is a reasonably new addition to the family of socket
functions, so all systems may not support this yet.  If it is
unsupported by the system, an attempt to use this method will
abort the program.
.Sp
The \fIatmark()\fR functionality is also exportable as \fIsockatmark()\fR function:
.Sp
.Vb 1
\&        use IO::Socket \*(Aqsockatmark\*(Aq;
.Ve
.Sp
This allows for a more traditional use of \fIsockatmark()\fR as a procedural
socket function.  If your system does not support \fIsockatmark()\fR, the
\&\f(CW\*(C`use\*(C'\fR declaration will fail at compile time.
.IP "connected" 4
.IX Item "connected"
If the socket is in a connected state the peer address is returned.
If the socket is not in a connected state then undef will be returned.
.IP "protocol" 4
.IX Item "protocol"
Returns the numerical number for the protocol being used on the socket, if
known. If the protocol is unknown, as with an \s-1AF_UNIX\s0 socket, zero
is returned.
.IP "sockdomain" 4
.IX Item "sockdomain"
Returns the numerical number for the socket domain type. For example, for
an \s-1AF_INET\s0 socket the value of &AF_INET will be returned.
.IP "sockopt(\s-1OPT\s0 [, \s-1VAL\s0])" 4
.IX Item "sockopt(OPT [, VAL])"
Unified method to both set and get options in the \s-1SOL_SOCKET\s0 level. If called
with one argument then getsockopt is called, otherwise setsockopt is called.
.IP "getsockopt(\s-1LEVEL\s0, \s-1OPT\s0)" 4
.IX Item "getsockopt(LEVEL, OPT)"
Get option associated with the socket. Other levels than \s-1SOL_SOCKET\s0
may be specified here.
.IP "setsockopt(\s-1LEVEL\s0, \s-1OPT\s0, \s-1VAL\s0)" 4
.IX Item "setsockopt(LEVEL, OPT, VAL)"
Set option associated with the socket. Other levels than \s-1SOL_SOCKET\s0
may be specified here.
.IP "socktype" 4
.IX Item "socktype"
Returns the numerical number for the socket type. For example, for
a \s-1SOCK_STREAM\s0 socket the value of &SOCK_STREAM will be returned.
.IP "timeout([\s-1VAL\s0])" 4
.IX Item "timeout([VAL])"
Set or get the timeout value (in seconds) associated with this socket.
If called without any arguments then the current setting is returned. If
called with an argument the current setting is changed and the previous
value returned.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Socket, IO::Handle, IO::Socket::INET, IO::Socket::UNIX
.SH "AUTHOR"
.IX Header "AUTHOR"
Graham Barr.  \fIatmark()\fR by Lincoln Stein.  Currently maintained by the
Perl Porters.  Please report all bugs to <perlbug@perl.org>.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 1997\-8 Graham Barr <gbarr@pobox.com>. All rights reserved.
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.PP
The \fIatmark()\fR implementation: Copyright 2001, Lincoln Stein <lstein@cshl.org>.
This module is distributed under the same terms as Perl itself.
Feel free to use, modify and redistribute it as long as you retain
the correct attribution.
osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/IO::Socket5.18.3pm                           0100644 0001750 0001750 00000024663 12566207456 023501  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "IO::Socket 3pm"
.TH IO::Socket 3pm "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
IO::Socket \- Object interface to socket communications
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use IO::Socket;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`IO::Socket\*(C'\fR provides an object interface to creating and using sockets. It
is built upon the IO::Handle interface and inherits all the methods defined
by IO::Handle.
.PP
\&\f(CW\*(C`IO::Socket\*(C'\fR only defines methods for those operations which are common to all
types of socket. Operations which are specified to a socket in a particular 
domain have methods defined in sub classes of \f(CW\*(C`IO::Socket\*(C'\fR
.PP
\&\f(CW\*(C`IO::Socket\*(C'\fR will export all functions (and constants) defined by Socket.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.IP "new ( [\s-1ARGS\s0] )" 4
.IX Item "new ( [ARGS] )"
Creates an \f(CW\*(C`IO::Socket\*(C'\fR, which is a reference to a
newly created symbol (see the \f(CW\*(C`Symbol\*(C'\fR package). \f(CW\*(C`new\*(C'\fR
optionally takes arguments, these arguments are in key-value pairs.
\&\f(CW\*(C`new\*(C'\fR only looks for one key \f(CW\*(C`Domain\*(C'\fR which tells new which domain
the socket will be in. All other arguments will be passed to the
configuration method of the package for that domain, See below.
.Sp
.Vb 1
\& NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE
.Ve
.Sp
As of \s-1VERSION 1.18\s0 all IO::Socket objects have autoflush turned on
by default. This was not the case with earlier releases.
.Sp
.Vb 1
\& NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE
.Ve
.SH "METHODS"
.IX Header "METHODS"
See perlfunc for complete descriptions of each of the following
supported \f(CW\*(C`IO::Socket\*(C'\fR methods, which are just front ends for the
corresponding built-in functions:
.PP
.Vb 10
\&    socket
\&    socketpair
\&    bind
\&    listen
\&    accept
\&    send
\&    recv
\&    peername (getpeername)
\&    sockname (getsockname)
\&    shutdown
.Ve
.PP
Some methods take slightly different arguments to those defined in perlfunc
in attempt to make the interface more flexible. These are
.IP "accept([\s-1PKG\s0])" 4
.IX Item "accept([PKG])"
perform the system call \f(CW\*(C`accept\*(C'\fR on the socket and return a new
object. The new object will be created in the same class as the listen
socket, unless \f(CW\*(C`PKG\*(C'\fR is specified. This object can be used to
communicate with the client that was trying to connect.
.Sp
In a scalar context the new socket is returned, or undef upon
failure. In a list context a two-element array is returned containing
the new socket and the peer address; the list will be empty upon
failure.
.Sp
The timeout in the [\s-1PKG\s0] can be specified as zero to effect a \*(L"poll\*(R",
but you shouldn't do that because a new IO::Select object will be
created behind the scenes just to do the single poll.  This is
horrendously inefficient.  Use rather true \fIselect()\fR with a zero
timeout on the handle, or non-blocking \s-1IO.\s0
.IP "socketpair(\s-1DOMAIN, TYPE, PROTOCOL\s0)" 4
.IX Item "socketpair(DOMAIN, TYPE, PROTOCOL)"
Call \f(CW\*(C`socketpair\*(C'\fR and return a list of two sockets created, or an
empty list on failure.
.PP
Additional methods that are provided are:
.IP "atmark" 4
.IX Item "atmark"
True if the socket is currently positioned at the urgent data mark,
false otherwise.
.Sp
.Vb 1
\&    use IO::Socket;
\&
\&    my $sock = IO::Socket::INET\->new(\*(Aqsome_server\*(Aq);
\&    $sock\->read($data, 1024) until $sock\->atmark;
.Ve
.Sp
Note: this is a reasonably new addition to the family of socket
functions, so all systems may not support this yet.  If it is
unsupported by the system, an attempt to use this method will
abort the program.
.Sp
The \fIatmark()\fR functionality is also exportable as \fIsockatmark()\fR function:
.Sp
.Vb 1
\&        use IO::Socket \*(Aqsockatmark\*(Aq;
.Ve
.Sp
This allows for a more traditional use of \fIsockatmark()\fR as a procedural
socket function.  If your system does not support \fIsockatmark()\fR, the
\&\f(CW\*(C`use\*(C'\fR declaration will fail at compile time.
.IP "connected" 4
.IX Item "connected"
If the socket is in a connected state the peer address is returned.
If the socket is not in a connected state then undef will be returned.
.IP "protocol" 4
.IX Item "protocol"
Returns the numerical number for the protocol being used on the socket, if
known. If the protocol is unknown, as with an \s-1AF_UNIX\s0 socket, zero
is returned.
.IP "sockdomain" 4
.IX Item "sockdomain"
Returns the numerical number for the socket domain type. For example, for
an \s-1AF_INET\s0 socket the value of &AF_INET will be returned.
.IP "sockopt(\s-1OPT\s0 [, \s-1VAL\s0])" 4
.IX Item "sockopt(OPT [, VAL])"
Unified method to both set and get options in the \s-1SOL_SOCKET\s0 level. If called
with one argument then getsockopt is called, otherwise setsockopt is called.
.IP "getsockopt(\s-1LEVEL, OPT\s0)" 4
.IX Item "getsockopt(LEVEL, OPT)"
Get option associated with the socket. Other levels than \s-1SOL_SOCKET\s0
may be specified here.
.IP "setsockopt(\s-1LEVEL, OPT, VAL\s0)" 4
.IX Item "setsockopt(LEVEL, OPT, VAL)"
Set option associated with the socket. Other levels than \s-1SOL_SOCKET\s0
may be specified here.
.IP "socktype" 4
.IX Item "socktype"
Returns the numerical number for the socket type. For example, for
a \s-1SOCK_STREAM\s0 socket the value of &SOCK_STREAM will be returned.
.IP "timeout([\s-1VAL\s0])" 4
.IX Item "timeout([VAL])"
Set or get the timeout value (in seconds) associated with this socket.
If called without any arguments then the current setting is returned. If
called with an argument the current setting is changed and the previous
value returned.
.SH "LIMITATIONS"
.IX Header "LIMITATIONS"
On some systems, for an IO::Socket object created with \fInew_from_fd()\fR,
or created with \fIaccept()\fR from such an object, the \fIprotocol()\fR,
\&\fIsockdomain()\fR and \fIsocktype()\fR methods may return undef.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Socket, IO::Handle, IO::Socket::INET, IO::Socket::UNIX
.SH "AUTHOR"
.IX Header "AUTHOR"
Graham Barr.  \fIatmark()\fR by Lincoln Stein.  Currently maintained by the
Perl Porters.  Please report all bugs to <perlbug@perl.org>.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 1997\-8 Graham Barr <gbarr@pobox.com>. All rights reserved.
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.PP
The \fIatmark()\fR implementation: Copyright 2001, Lincoln Stein <lstein@cshl.org>.
This module is distributed under the same terms as Perl itself.
Feel free to use, modify and redistribute it as long as you retain
the correct attribution.
                                                                             osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/IO::Socket::INET.3pm                         0100644 0001750 0001750 00000023071 12566207456 024021  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "IO::Socket::INET 3pm"
.TH IO::Socket::INET 3pm "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
IO::Socket::INET \- Object interface for AF_INET domain sockets
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use IO::Socket::INET;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`IO::Socket::INET\*(C'\fR provides an object interface to creating and using sockets
in the \s-1AF_INET\s0 domain. It is built upon the IO::Socket interface and
inherits all the methods defined by IO::Socket.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.IP "new ( [\s-1ARGS\s0] )" 4
.IX Item "new ( [ARGS] )"
Creates an \f(CW\*(C`IO::Socket::INET\*(C'\fR object, which is a reference to a
newly created symbol (see the \f(CW\*(C`Symbol\*(C'\fR package). \f(CW\*(C`new\*(C'\fR
optionally takes arguments, these arguments are in key-value pairs.
.Sp
In addition to the key-value pairs accepted by IO::Socket,
\&\f(CW\*(C`IO::Socket::INET\*(C'\fR provides.
.Sp
.Vb 10
\& PeerAddr    Remote host address          <hostname>[:<port>]
\& PeerHost    Synonym for PeerAddr
\& PeerPort    Remote port or service       <service>[(<no>)] | <no>
\& LocalAddr   Local host bind address      hostname[:port]
\& LocalHost   Synonym for LocalAddr
\& LocalPort   Local host bind port         <service>[(<no>)] | <no>
\& Proto       Protocol name (or number)    "tcp" | "udp" | ...
\& Type        Socket type              SOCK_STREAM | SOCK_DGRAM | ...
\& Listen      Queue size for listen
\& ReuseAddr   Set SO_REUSEADDR before binding
\& Reuse       Set SO_REUSEADDR before binding (deprecated,
\&                                              prefer ReuseAddr)
\& ReusePort   Set SO_REUSEPORT before binding
\& Broadcast   Set SO_BROADCAST before binding
\& Timeout     Timeout value for various operations
\& MultiHomed  Try all addresses for multi\-homed hosts
\& Blocking    Determine if connection will be blocking mode
.Ve
.Sp
If \f(CW\*(C`Listen\*(C'\fR is defined then a listen socket is created, else if the
socket type, which is derived from the protocol, is \s-1SOCK_STREAM\s0 then
\&\fIconnect()\fR is called.
.Sp
Although it is not illegal, the use of \f(CW\*(C`MultiHomed\*(C'\fR on a socket
which is in non-blocking mode is of little use. This is because the
first connect will never fail with a timeout as the connect call
will not block.
.Sp
The \f(CW\*(C`PeerAddr\*(C'\fR can be a hostname or the IP-address on the
\&\*(L"xx.xx.xx.xx\*(R" form.  The \f(CW\*(C`PeerPort\*(C'\fR can be a number or a symbolic
service name.  The service name might be followed by a number in
parenthesis which is used if the service is not known by the system.
The \f(CW\*(C`PeerPort\*(C'\fR specification can also be embedded in the \f(CW\*(C`PeerAddr\*(C'\fR
by preceding it with a \*(L":\*(R".
.Sp
If \f(CW\*(C`Proto\*(C'\fR is not given and you specify a symbolic \f(CW\*(C`PeerPort\*(C'\fR port,
then the constructor will try to derive \f(CW\*(C`Proto\*(C'\fR from the service
name.  As a last resort \f(CW\*(C`Proto\*(C'\fR \*(L"tcp\*(R" is assumed.  The \f(CW\*(C`Type\*(C'\fR
parameter will be deduced from \f(CW\*(C`Proto\*(C'\fR if not specified.
.Sp
If the constructor is only passed a single argument, it is assumed to
be a \f(CW\*(C`PeerAddr\*(C'\fR specification.
.Sp
If \f(CW\*(C`Blocking\*(C'\fR is set to 0, the connection will be in nonblocking mode.
If not specified it defaults to 1 (blocking mode).
.Sp
Examples:
.Sp
.Vb 3
\&   $sock = IO::Socket::INET\->new(PeerAddr => \*(Aqwww.perl.org\*(Aq,
\&                                 PeerPort => \*(Aqhttp(80)\*(Aq,
\&                                 Proto    => \*(Aqtcp\*(Aq);
\&
\&   $sock = IO::Socket::INET\->new(PeerAddr => \*(Aqlocalhost:smtp(25)\*(Aq);
\&
\&   $sock = IO::Socket::INET\->new(Listen    => 5,
\&                                 LocalAddr => \*(Aqlocalhost\*(Aq,
\&                                 LocalPort => 9000,
\&                                 Proto     => \*(Aqtcp\*(Aq);
\&
\&   $sock = IO::Socket::INET\->new(\*(Aq127.0.0.1:25\*(Aq);
\&
\&   $sock = IO::Socket::INET\->new(
\&                           PeerPort  => 9999,
\&                           PeerAddr  => inet_ntoa(INADDR_BROADCAST),
\&                           Proto     => udp,    
\&                           LocalAddr => \*(Aqlocalhost\*(Aq,
\&                           Broadcast => 1 ) 
\&                       or die "Can\*(Aqt bind : $@\en";
\&
\& NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE
.Ve
.Sp
As of \s-1VERSION 1.18\s0 all IO::Socket objects have autoflush turned on
by default. This was not the case with earlier releases.
.Sp
.Vb 1
\& NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE
.Ve
.SS "\s-1METHODS\s0"
.IX Subsection "METHODS"
.IP "sockaddr ()" 4
.IX Item "sockaddr ()"
Return the address part of the sockaddr structure for the socket
.IP "sockport ()" 4
.IX Item "sockport ()"
Return the port number that the socket is using on the local host
.IP "sockhost ()" 4
.IX Item "sockhost ()"
Return the address part of the sockaddr structure for the socket in a
text form xx.xx.xx.xx
.IP "peeraddr ()" 4
.IX Item "peeraddr ()"
Return the address part of the sockaddr structure for the socket on
the peer host
.IP "peerport ()" 4
.IX Item "peerport ()"
Return the port number for the socket on the peer host.
.IP "peerhost ()" 4
.IX Item "peerhost ()"
Return the address part of the sockaddr structure for the socket on the
peer host in a text form xx.xx.xx.xx
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Socket, IO::Socket
.SH "AUTHOR"
.IX Header "AUTHOR"
Graham Barr. Currently maintained by the Perl Porters.  Please report all
bugs to <perlbug@perl.org>.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 1996\-8 Graham Barr <gbarr@pobox.com>. All rights reserved.
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                       osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/IO::Socket::INET5.16.3pm                     0100644 0001750 0001750 00000022550 12566207435 024331  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "IO::Socket::INET 3pm"
.TH IO::Socket::INET 3pm "2013-03-04" "perl v5.16.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
IO::Socket::INET \- Object interface for AF_INET domain sockets
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use IO::Socket::INET;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`IO::Socket::INET\*(C'\fR provides an object interface to creating and using sockets
in the \s-1AF_INET\s0 domain. It is built upon the IO::Socket interface and
inherits all the methods defined by IO::Socket.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.IP "new ( [\s-1ARGS\s0] )" 4
.IX Item "new ( [ARGS] )"
Creates an \f(CW\*(C`IO::Socket::INET\*(C'\fR object, which is a reference to a
newly created symbol (see the \f(CW\*(C`Symbol\*(C'\fR package). \f(CW\*(C`new\*(C'\fR
optionally takes arguments, these arguments are in key-value pairs.
.Sp
In addition to the key-value pairs accepted by IO::Socket,
\&\f(CW\*(C`IO::Socket::INET\*(C'\fR provides.
.Sp
.Vb 10
\& PeerAddr    Remote host address          <hostname>[:<port>]
\& PeerHost    Synonym for PeerAddr
\& PeerPort    Remote port or service       <service>[(<no>)] | <no>
\& LocalAddr   Local host bind address      hostname[:port]
\& LocalHost   Synonym for LocalAddr
\& LocalPort   Local host bind port         <service>[(<no>)] | <no>
\& Proto       Protocol name (or number)    "tcp" | "udp" | ...
\& Type        Socket type              SOCK_STREAM | SOCK_DGRAM | ...
\& Listen      Queue size for listen
\& ReuseAddr   Set SO_REUSEADDR before binding
\& Reuse       Set SO_REUSEADDR before binding (deprecated,
\&                                              prefer ReuseAddr)
\& ReusePort   Set SO_REUSEPORT before binding
\& Broadcast   Set SO_BROADCAST before binding
\& Timeout     Timeout value for various operations
\& MultiHomed  Try all addresses for multi\-homed hosts
\& Blocking    Determine if connection will be blocking mode
.Ve
.Sp
If \f(CW\*(C`Listen\*(C'\fR is defined then a listen socket is created, else if the
socket type, which is derived from the protocol, is \s-1SOCK_STREAM\s0 then
\&\fIconnect()\fR is called.
.Sp
Although it is not illegal, the use of \f(CW\*(C`MultiHomed\*(C'\fR on a socket
which is in non-blocking mode is of little use. This is because the
first connect will never fail with a timeout as the connect call
will not block.
.Sp
The \f(CW\*(C`PeerAddr\*(C'\fR can be a hostname or the IP-address on the
\&\*(L"xx.xx.xx.xx\*(R" form.  The \f(CW\*(C`PeerPort\*(C'\fR can be a number or a symbolic
service name.  The service name might be followed by a number in
parenthesis which is used if the service is not known by the system.
The \f(CW\*(C`PeerPort\*(C'\fR specification can also be embedded in the \f(CW\*(C`PeerAddr\*(C'\fR
by preceding it with a \*(L":\*(R".
.Sp
If \f(CW\*(C`Proto\*(C'\fR is not given and you specify a symbolic \f(CW\*(C`PeerPort\*(C'\fR port,
then the constructor will try to derive \f(CW\*(C`Proto\*(C'\fR from the service
name.  As a last resort \f(CW\*(C`Proto\*(C'\fR \*(L"tcp\*(R" is assumed.  The \f(CW\*(C`Type\*(C'\fR
parameter will be deduced from \f(CW\*(C`Proto\*(C'\fR if not specified.
.Sp
If the constructor is only passed a single argument, it is assumed to
be a \f(CW\*(C`PeerAddr\*(C'\fR specification.
.Sp
If \f(CW\*(C`Blocking\*(C'\fR is set to 0, the connection will be in nonblocking mode.
If not specified it defaults to 1 (blocking mode).
.Sp
Examples:
.Sp
.Vb 3
\&   $sock = IO::Socket::INET\->new(PeerAddr => \*(Aqwww.perl.org\*(Aq,
\&                                 PeerPort => \*(Aqhttp(80)\*(Aq,
\&                                 Proto    => \*(Aqtcp\*(Aq);
\&
\&   $sock = IO::Socket::INET\->new(PeerAddr => \*(Aqlocalhost:smtp(25)\*(Aq);
\&
\&   $sock = IO::Socket::INET\->new(Listen    => 5,
\&                                 LocalAddr => \*(Aqlocalhost\*(Aq,
\&                                 LocalPort => 9000,
\&                                 Proto     => \*(Aqtcp\*(Aq);
\&
\&   $sock = IO::Socket::INET\->new(\*(Aq127.0.0.1:25\*(Aq);
\&
\&   $sock = IO::Socket::INET\->new(
\&                           PeerPort  => 9999,
\&                           PeerAddr  => inet_ntoa(INADDR_BROADCAST),
\&                           Proto     => udp,    
\&                           LocalAddr => \*(Aqlocalhost\*(Aq,
\&                           Broadcast => 1 ) 
\&                       or die "Can\*(Aqt bind : $@\en";
\&
\& NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE
.Ve
.Sp
As of \s-1VERSION\s0 1.18 all IO::Socket objects have autoflush turned on
by default. This was not the case with earlier releases.
.Sp
.Vb 1
\& NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE
.Ve
.SS "\s-1METHODS\s0"
.IX Subsection "METHODS"
.IP "sockaddr ()" 4
.IX Item "sockaddr ()"
Return the address part of the sockaddr structure for the socket
.IP "sockport ()" 4
.IX Item "sockport ()"
Return the port number that the socket is using on the local host
.IP "sockhost ()" 4
.IX Item "sockhost ()"
Return the address part of the sockaddr structure for the socket in a
text form xx.xx.xx.xx
.IP "peeraddr ()" 4
.IX Item "peeraddr ()"
Return the address part of the sockaddr structure for the socket on
the peer host
.IP "peerport ()" 4
.IX Item "peerport ()"
Return the port number for the socket on the peer host.
.IP "peerhost ()" 4
.IX Item "peerhost ()"
Return the address part of the sockaddr structure for the socket on the
peer host in a text form xx.xx.xx.xx
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Socket, IO::Socket
.SH "AUTHOR"
.IX Header "AUTHOR"
Graham Barr. Currently maintained by the Perl Porters.  Please report all
bugs to <perlbug@perl.org>.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 1996\-8 Graham Barr <gbarr@pobox.com>. All rights reserved.
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
                                                                                                                                                        osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/IO::Socket::INET5.18.3pm                     0100644 0001750 0001750 00000023071 12566207456 024335  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "IO::Socket::INET 3pm"
.TH IO::Socket::INET 3pm "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
IO::Socket::INET \- Object interface for AF_INET domain sockets
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use IO::Socket::INET;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`IO::Socket::INET\*(C'\fR provides an object interface to creating and using sockets
in the \s-1AF_INET\s0 domain. It is built upon the IO::Socket interface and
inherits all the methods defined by IO::Socket.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.IP "new ( [\s-1ARGS\s0] )" 4
.IX Item "new ( [ARGS] )"
Creates an \f(CW\*(C`IO::Socket::INET\*(C'\fR object, which is a reference to a
newly created symbol (see the \f(CW\*(C`Symbol\*(C'\fR package). \f(CW\*(C`new\*(C'\fR
optionally takes arguments, these arguments are in key-value pairs.
.Sp
In addition to the key-value pairs accepted by IO::Socket,
\&\f(CW\*(C`IO::Socket::INET\*(C'\fR provides.
.Sp
.Vb 10
\& PeerAddr    Remote host address          <hostname>[:<port>]
\& PeerHost    Synonym for PeerAddr
\& PeerPort    Remote port or service       <service>[(<no>)] | <no>
\& LocalAddr   Local host bind address      hostname[:port]
\& LocalHost   Synonym for LocalAddr
\& LocalPort   Local host bind port         <service>[(<no>)] | <no>
\& Proto       Protocol name (or number)    "tcp" | "udp" | ...
\& Type        Socket type              SOCK_STREAM | SOCK_DGRAM | ...
\& Listen      Queue size for listen
\& ReuseAddr   Set SO_REUSEADDR before binding
\& Reuse       Set SO_REUSEADDR before binding (deprecated,
\&                                              prefer ReuseAddr)
\& ReusePort   Set SO_REUSEPORT before binding
\& Broadcast   Set SO_BROADCAST before binding
\& Timeout     Timeout value for various operations
\& MultiHomed  Try all addresses for multi\-homed hosts
\& Blocking    Determine if connection will be blocking mode
.Ve
.Sp
If \f(CW\*(C`Listen\*(C'\fR is defined then a listen socket is created, else if the
socket type, which is derived from the protocol, is \s-1SOCK_STREAM\s0 then
\&\fIconnect()\fR is called.
.Sp
Although it is not illegal, the use of \f(CW\*(C`MultiHomed\*(C'\fR on a socket
which is in non-blocking mode is of little use. This is because the
first connect will never fail with a timeout as the connect call
will not block.
.Sp
The \f(CW\*(C`PeerAddr\*(C'\fR can be a hostname or the IP-address on the
\&\*(L"xx.xx.xx.xx\*(R" form.  The \f(CW\*(C`PeerPort\*(C'\fR can be a number or a symbolic
service name.  The service name might be followed by a number in
parenthesis which is used if the service is not known by the system.
The \f(CW\*(C`PeerPort\*(C'\fR specification can also be embedded in the \f(CW\*(C`PeerAddr\*(C'\fR
by preceding it with a \*(L":\*(R".
.Sp
If \f(CW\*(C`Proto\*(C'\fR is not given and you specify a symbolic \f(CW\*(C`PeerPort\*(C'\fR port,
then the constructor will try to derive \f(CW\*(C`Proto\*(C'\fR from the service
name.  As a last resort \f(CW\*(C`Proto\*(C'\fR \*(L"tcp\*(R" is assumed.  The \f(CW\*(C`Type\*(C'\fR
parameter will be deduced from \f(CW\*(C`Proto\*(C'\fR if not specified.
.Sp
If the constructor is only passed a single argument, it is assumed to
be a \f(CW\*(C`PeerAddr\*(C'\fR specification.
.Sp
If \f(CW\*(C`Blocking\*(C'\fR is set to 0, the connection will be in nonblocking mode.
If not specified it defaults to 1 (blocking mode).
.Sp
Examples:
.Sp
.Vb 3
\&   $sock = IO::Socket::INET\->new(PeerAddr => \*(Aqwww.perl.org\*(Aq,
\&                                 PeerPort => \*(Aqhttp(80)\*(Aq,
\&                                 Proto    => \*(Aqtcp\*(Aq);
\&
\&   $sock = IO::Socket::INET\->new(PeerAddr => \*(Aqlocalhost:smtp(25)\*(Aq);
\&
\&   $sock = IO::Socket::INET\->new(Listen    => 5,
\&                                 LocalAddr => \*(Aqlocalhost\*(Aq,
\&                                 LocalPort => 9000,
\&                                 Proto     => \*(Aqtcp\*(Aq);
\&
\&   $sock = IO::Socket::INET\->new(\*(Aq127.0.0.1:25\*(Aq);
\&
\&   $sock = IO::Socket::INET\->new(
\&                           PeerPort  => 9999,
\&                           PeerAddr  => inet_ntoa(INADDR_BROADCAST),
\&                           Proto     => udp,    
\&                           LocalAddr => \*(Aqlocalhost\*(Aq,
\&                           Broadcast => 1 ) 
\&                       or die "Can\*(Aqt bind : $@\en";
\&
\& NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE
.Ve
.Sp
As of \s-1VERSION 1.18\s0 all IO::Socket objects have autoflush turned on
by default. This was not the case with earlier releases.
.Sp
.Vb 1
\& NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE
.Ve
.SS "\s-1METHODS\s0"
.IX Subsection "METHODS"
.IP "sockaddr ()" 4
.IX Item "sockaddr ()"
Return the address part of the sockaddr structure for the socket
.IP "sockport ()" 4
.IX Item "sockport ()"
Return the port number that the socket is using on the local host
.IP "sockhost ()" 4
.IX Item "sockhost ()"
Return the address part of the sockaddr structure for the socket in a
text form xx.xx.xx.xx
.IP "peeraddr ()" 4
.IX Item "peeraddr ()"
Return the address part of the sockaddr structure for the socket on
the peer host
.IP "peerport ()" 4
.IX Item "peerport ()"
Return the port number for the socket on the peer host.
.IP "peerhost ()" 4
.IX Item "peerhost ()"
Return the address part of the sockaddr structure for the socket on the
peer host in a text form xx.xx.xx.xx
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Socket, IO::Socket
.SH "AUTHOR"
.IX Header "AUTHOR"
Graham Barr. Currently maintained by the Perl Porters.  Please report all
bugs to <perlbug@perl.org>.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 1996\-8 Graham Barr <gbarr@pobox.com>. All rights reserved.
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                       osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/IO::Socket::INET6.3pm                        0100644 0001750 0001750 00000031643 12566241503 024102  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "IO::Socket::INET6 3"
.TH IO::Socket::INET6 3 "2015-08-22" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
IO::Socket::INET6 \- Object interface for AF_INET/AF_INET6 domain sockets
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use IO::Socket::INET6;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`IO::Socket::INET6\*(C'\fR provides an object interface to creating and using sockets
in either \s-1AF_INET\s0 or \s-1AF_INET6\s0 domains. It is built upon the IO::Socket interface and
inherits all the methods defined by IO::Socket.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.IP "new ( [\s-1ARGS\s0] )" 4
.IX Item "new ( [ARGS] )"
Creates an \f(CW\*(C`IO::Socket::INET6\*(C'\fR object, which is a reference to a
newly created symbol (see the \f(CW\*(C`Symbol\*(C'\fR package). \f(CW\*(C`new\*(C'\fR
optionally takes arguments, these arguments are in key-value pairs.
.Sp
In addition to the key-value pairs accepted by IO::Socket,
\&\f(CW\*(C`IO::Socket::INET6\*(C'\fR provides.
.Sp
.Vb 10
\&    Domain      Address family               AF_INET | AF_INET6 | AF_UNSPEC (default)
\&    PeerAddr    Remote host address          <hostname>[:<port>]
\&    PeerHost    Synonym for PeerAddr
\&    PeerPort    Remote port or service       <service>[(<no>)] | <no>
\&    PeerFlow    Remote flow information
\&    PeerScope   Remote address scope
\&    LocalAddr   Local host bind address      hostname[:port]
\&    LocalHost   Synonym for LocalAddr
\&    LocalPort   Local host bind port         <service>[(<no>)] | <no>
\&    LocalFlow   Local host flow information
\&    LocalScope  Local host address scope
\&    Proto       Protocol name (or number)    "tcp" | "udp" | ...
\&    Type        Socket type                  SOCK_STREAM | SOCK_DGRAM | ...
\&    Listen      Queue size for listen
\&    ReuseAddr   Set SO_REUSEADDR before binding
\&    Reuse       Set SO_REUSEADDR before binding (deprecated, prefer ReuseAddr)
\&    ReusePort   Set SO_REUSEPORT before binding
\&    Broadcast   Set SO_BROADCAST before binding
\&    Timeout     Timeout value for various operations
\&    MultiHomed  Try all addresses for multi\-homed hosts
\&    Blocking    Determine if connection will be blocking mode
.Ve
.Sp
If \f(CW\*(C`Listen\*(C'\fR is defined then a listen socket is created, else if the
socket type, which is derived from the protocol, is \s-1SOCK_STREAM\s0 then
\&\fIconnect()\fR is called.
.Sp
Although it is not illegal, the use of \f(CW\*(C`MultiHomed\*(C'\fR on a socket
which is in non-blocking mode is of little use. This is because the
first connect will never fail with a timeout as the connect call
will not block.
.Sp
The \f(CW\*(C`PeerAddr\*(C'\fR can be a hostname,  the IPv6\-address on the
\&\*(L"2001:800:40:2a05::10\*(R" form , or the IPv4\-address on the \*(L"213.34.234.245\*(R" form.
The \f(CW\*(C`PeerPort\*(C'\fR can be a number or a symbolic
service name.  The service name might be followed by a number in
parenthesis which is used if the service is not known by the system.
The \f(CW\*(C`PeerPort\*(C'\fR specification can also be embedded in the \f(CW\*(C`PeerAddr\*(C'\fR
by preceding it with a \*(L":\*(R", and closing the IPv6 address on brackets \*(L"[]\*(R" if
necessary: \*(L"124.678.12.34:23\*(R",\*(L"[2a05:345f::10]:23\*(R",\*(L"any.server.com:23\*(R".
.Sp
If \f(CW\*(C`Domain\*(C'\fR is not given, \s-1AF_UNSPEC\s0 is assumed, that is, both \s-1AF_INET\s0 and \s-1AF_INET6\s0 will
be both considered when resolving \s-1DNS\s0 names. \s-1AF_INET6\s0 has priority.
If you guess you are in trouble not reaching the peer,(the service is not available via
\&\s-1AF_INET6\s0 but \s-1AF_INET\s0) you can either try Multihomed (try any address/family until reach)
or concrete your address \f(CW\*(C`family\*(C'\fR (\s-1AF_INET, AF_INET6\s0).
.Sp
If \f(CW\*(C`Proto\*(C'\fR is not given and you specify a symbolic \f(CW\*(C`PeerPort\*(C'\fR port,
then the constructor will try to derive \f(CW\*(C`Proto\*(C'\fR from the service
name.  As a last resort \f(CW\*(C`Proto\*(C'\fR \*(L"tcp\*(R" is assumed.  The \f(CW\*(C`Type\*(C'\fR
parameter will be deduced from \f(CW\*(C`Proto\*(C'\fR if not specified.
.Sp
If the constructor is only passed a single argument, it is assumed to
be a \f(CW\*(C`PeerAddr\*(C'\fR specification.
.Sp
If \f(CW\*(C`Blocking\*(C'\fR is set to 0, the connection will be in nonblocking mode.
If not specified it defaults to 1 (blocking mode).
.Sp
Examples:
.Sp
.Vb 3
\&   $sock = IO::Socket::INET6\->new(PeerAddr => \*(Aqwww.perl.org\*(Aq,
\&                                 PeerPort => \*(Aqhttp(80)\*(Aq,
\&                                 Proto    => \*(Aqtcp\*(Aq);
.Ve
.Sp
Suppose either you have no IPv6 connectivity or www.perl.org has no http service on IPv6. Then,
.Sp
(Trying all address/families until reach)
.Sp
.Vb 4
\&   $sock = IO::Socket::INET6\->new(PeerAddr => \*(Aqwww.perl.org\*(Aq,
\&                                 PeerPort => \*(Aqhttp(80)\*(Aq,
\&                                 Multihomed => 1 ,
\&                                 Proto    => \*(Aqtcp\*(Aq);
.Ve
.Sp
(Concrete to IPv4 protocol)
.Sp
.Vb 4
\&   $sock = IO::Socket::INET6\->new(PeerAddr => \*(Aqwww.perl.org\*(Aq,
\&                                 PeerPort => \*(Aqhttp(80)\*(Aq,
\&                                 Domain => AF_INET ,
\&                                 Proto    => \*(Aqtcp\*(Aq);
\&
\&
\&   $sock = IO::Socket::INET6\->new(PeerAddr => \*(Aqlocalhost:smtp(25)\*(Aq);
\&
\&   $sock = IO::Socket::INET6\->new(Listen    => 5,
\&                                 LocalAddr => \*(Aqlocalhost\*(Aq,
\&                                 LocalPort => 9000,
\&                                 Proto     => \*(Aqtcp\*(Aq);
\&
\&   $sock = IO::Socket::INET6\->new(\*(Aq[::1]:25\*(Aq);
\&
\&   $sock = IO::Socket::INET6\->new(PeerPort  => 9999,
\&                                 PeerAddr  => Socket6::inet_ntop(AF_INET6,in6addr_broadcast),
\&                                 Proto     => udp,
\&                                 LocalAddr => \*(Aqlocalhost\*(Aq,
\&                                 Broadcast => 1 )
\&                             or die "Can\*(Aqt bind : $@\en";
\&
\& NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE
.Ve
.Sp
As of \s-1VERSION 1.18\s0 all IO::Socket objects have autoflush turned on
by default. This was not the case with earlier releases.
.Sp
.Vb 1
\& NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE
.Ve
.SS "\s-1METHODS\s0"
.IX Subsection "METHODS"
.IP "accept ()" 4
.IX Item "accept ()"
See IO::Socket::INET.
.IP "bind ()" 4
.IX Item "bind ()"
See IO::Socket::INET.
.IP "configure ()" 4
.IX Item "configure ()"
This function exists in this module, but I (= Shlomi Fish) don't know what it
does, or understand it. It's also not tested anywhere. I'll be happy to be
enlightened.
.IP "connect ()" 4
.IX Item "connect ()"
See IO::Socket::INET.
.IP "sockaddr ()" 4
.IX Item "sockaddr ()"
Return the address part of the sockaddr structure for the socket
.IP "\fIsockdomain()\fR" 4
.IX Item "sockdomain()"
Returns the domain of the socket \- \s-1AF_INET\s0 or \s-1AF_INET6\s0 or whatever.
.IP "sockport ()" 4
.IX Item "sockport ()"
Return the port number that the socket is using on the local host
.IP "sockhost ()" 4
.IX Item "sockhost ()"
Return the address part of the sockaddr structure for the socket in a
text form (\*(L"2001:800:40:2a05::10\*(R" or \*(L"245.245.13.27\*(R")
.IP "sockflow ()" 4
.IX Item "sockflow ()"
Return the flow information part of the sockaddr structure for the socket
.IP "sockscope ()" 4
.IX Item "sockscope ()"
Return the scope identification part of the sockaddr structure for the socket
.IP "peeraddr ()" 4
.IX Item "peeraddr ()"
Return the address part of the sockaddr structure for the socket on
the peer host
.IP "peerport ()" 4
.IX Item "peerport ()"
Return the port number for the socket on the peer host.
.IP "peerhost ()" 4
.IX Item "peerhost ()"
Return the address part of the sockaddr structure for the socket on the
peer host in a text form (\*(L"2001:800:40:2a05::10\*(R" or \*(L"245.245.13.27\*(R")
.IP "peerflow ()" 4
.IX Item "peerflow ()"
Return the flow information part of the sockaddr structure for the socket
on the peer host
.IP "peerscope ()" 4
.IX Item "peerscope ()"
Return the scope identification part of the sockaddr structure for the socket
on the peer host
.SH "REPOSITORY"
.IX Header "REPOSITORY"
The Subversion repository for this module carrying complete version history
and other information is:
.PP
<http://svn.berlios.de/svnroot/repos/web\-cpan/IO\-Socket\-INET6/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Socket,Socket6, IO::Socket
.SH "AUTHOR"
.IX Header "AUTHOR"
This program is based on IO::Socket::INET by Graham Barr
<gbarr@pobox.com> and currently maintained by the Perl Porters.
.PP
Modified by Rafael Martinez Torres <rafael.martinez@novagnet.com> and
Euro6IX project.
.PP
Modified further by Shlomi Fish <shlomif@iglu.org.il>, while disclaiming
all copyrights.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2003\- Rafael Martinez Torres <rafael.martinez@novagnet.com>.
.PP
Copyright (c) 2003\- Euro6IX project.
.PP
Copyright (c) 1996\-8 Graham Barr <gbarr@pobox.com>.
.PP
All rights reserved.
.PP
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
                                                                                             osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/IO::Socket::INET65.16.3pm                    0100644 0001750 0001750 00000031437 12566241502 024414  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "IO::Socket::INET6 3"
.TH IO::Socket::INET6 3 "2015-08-22" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
IO::Socket::INET6 \- Object interface for AF_INET|AF_INET6 domain sockets
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use IO::Socket::INET6;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`IO::Socket::INET6\*(C'\fR provides an object interface to creating and using sockets
in either \s-1AF_INET\s0 or \s-1AF_INET6\s0 domains. It is built upon the IO::Socket interface and
inherits all the methods defined by IO::Socket.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.IP "new ( [\s-1ARGS\s0] )" 4
.IX Item "new ( [ARGS] )"
Creates an \f(CW\*(C`IO::Socket::INET6\*(C'\fR object, which is a reference to a
newly created symbol (see the \f(CW\*(C`Symbol\*(C'\fR package). \f(CW\*(C`new\*(C'\fR
optionally takes arguments, these arguments are in key-value pairs.
.Sp
In addition to the key-value pairs accepted by IO::Socket,
\&\f(CW\*(C`IO::Socket::INET6\*(C'\fR provides.
.Sp
.Vb 10
\&    Domain      Address family               AF_INET | AF_INET6 | AF_UNSPEC (default)
\&    PeerAddr    Remote host address          <hostname>[:<port>]
\&    PeerHost    Synonym for PeerAddr
\&    PeerPort    Remote port or service       <service>[(<no>)] | <no>
\&    PeerFlow    Remote flow information
\&    PeerScope   Remote address scope 
\&    LocalAddr   Local host bind address      hostname[:port]
\&    LocalHost   Synonym for LocalAddr
\&    LocalPort   Local host bind port         <service>[(<no>)] | <no>
\&    LocalFlow   Local host flow information
\&    LocalScope  Local host address scope
\&    Proto       Protocol name (or number)    "tcp" | "udp" | ...
\&    Type        Socket type                  SOCK_STREAM | SOCK_DGRAM | ...
\&    Listen      Queue size for listen
\&    ReuseAddr   Set SO_REUSEADDR before binding
\&    Reuse       Set SO_REUSEADDR before binding (deprecated, prefer ReuseAddr)
\&    ReusePort   Set SO_REUSEPORT before binding
\&    Broadcast   Set SO_BROADCAST before binding
\&    Timeout     Timeout value for various operations
\&    MultiHomed  Try all adresses for multi\-homed hosts
\&    Blocking    Determine if connection will be blocking mode
.Ve
.Sp
If \f(CW\*(C`Listen\*(C'\fR is defined then a listen socket is created, else if the
socket type, which is derived from the protocol, is \s-1SOCK_STREAM\s0 then
\&\fIconnect()\fR is called.
.Sp
Although it is not illegal, the use of \f(CW\*(C`MultiHomed\*(C'\fR on a socket
which is in non-blocking mode is of little use. This is because the
first connect will never fail with a timeout as the connect call
will not block.
.Sp
The \f(CW\*(C`PeerAddr\*(C'\fR can be a hostname,  the IPv6\-address on the
\&\*(L"2001:800:40:2a05::10\*(R" form , or the IPv4\-address on the \*(L"213.34.234.245\*(R" form.
The \f(CW\*(C`PeerPort\*(C'\fR can be a number or a symbolic
service name.  The service name might be followed by a number in
parenthesis which is used if the service is not known by the system.
The \f(CW\*(C`PeerPort\*(C'\fR specification can also be embedded in the \f(CW\*(C`PeerAddr\*(C'\fR
by preceding it with a \*(L":\*(R", and closing the IPv6 address on bracktes \*(L"[]\*(R" if
necessary: \*(L"124.678.12.34:23\*(R",\*(L"[2a05:345f::10]:23\*(R",\*(L"any.server.com:23\*(R".
.Sp
If \f(CW\*(C`Domain\*(C'\fR is not given, \s-1AF_UNSPEC\s0 is assumed, that is, both \s-1AF_INET\s0 and \s-1AF_INET6\s0 will
be both considered when resolving \s-1DNS\s0 names. \s-1AF_INET6\s0 is prioritary.
If you guess you are in trouble not reaching the peer,(the service is not available via
\&\s-1AF_INET6\s0 but \s-1AF_INET\s0) you can either try Multihomed (try any address/family until reach)
or concrete your address \f(CW\*(C`family\*(C'\fR (\s-1AF_INET\s0, \s-1AF_INET6\s0).
.Sp
If \f(CW\*(C`Proto\*(C'\fR is not given and you specify a symbolic \f(CW\*(C`PeerPort\*(C'\fR port,
then the constructor will try to derive \f(CW\*(C`Proto\*(C'\fR from the service
name.  As a last resort \f(CW\*(C`Proto\*(C'\fR \*(L"tcp\*(R" is assumed.  The \f(CW\*(C`Type\*(C'\fR
parameter will be deduced from \f(CW\*(C`Proto\*(C'\fR if not specified.
.Sp
If the constructor is only passed a single argument, it is assumed to
be a \f(CW\*(C`PeerAddr\*(C'\fR specification.
.Sp
If \f(CW\*(C`Blocking\*(C'\fR is set to 0, the connection will be in nonblocking mode.
If not specified it defaults to 1 (blocking mode).
.Sp
Examples:
.Sp
.Vb 3
\&   $sock = IO::Socket::INET6\->new(PeerAddr => \*(Aqwww.perl.org\*(Aq,
\&                                 PeerPort => \*(Aqhttp(80)\*(Aq,
\&                                 Proto    => \*(Aqtcp\*(Aq);
.Ve
.Sp
Suppose either you have no IPv6 connectivity or www.perl.org has no http service on IPv6. Then,
.Sp
(Trying all address/families until reach)
.Sp
.Vb 4
\&   $sock = IO::Socket::INET6\->new(PeerAddr => \*(Aqwww.perl.org\*(Aq,
\&                                 PeerPort => \*(Aqhttp(80)\*(Aq,
\&                                 Multihomed => 1 ,
\&                                 Proto    => \*(Aqtcp\*(Aq);
.Ve
.Sp
(Concrete to IPv4 protocol)
.Sp
.Vb 4
\&   $sock = IO::Socket::INET6\->new(PeerAddr => \*(Aqwww.perl.org\*(Aq,
\&                                 PeerPort => \*(Aqhttp(80)\*(Aq,
\&                                 Domain => AF_INET ,
\&                                 Proto    => \*(Aqtcp\*(Aq);
\&
\&
\&   $sock = IO::Socket::INET6\->new(PeerAddr => \*(Aqlocalhost:smtp(25)\*(Aq);
\&
\&   $sock = IO::Socket::INET6\->new(Listen    => 5,
\&                                 LocalAddr => \*(Aqlocalhost\*(Aq,
\&                                 LocalPort => 9000,
\&                                 Proto     => \*(Aqtcp\*(Aq);
\&
\&   $sock = IO::Socket::INET6\->new(\*(Aq[::1]:25\*(Aq);
\&
\&   $sock = IO::Socket::INET6\->new(PeerPort  => 9999,
\&                                 PeerAddr  => Socket6::inet_ntop(AF_INET6,in6addr_broadcast),
\&                                 Proto     => udp,    
\&                                 LocalAddr => \*(Aqlocalhost\*(Aq,
\&                                 Broadcast => 1 ) 
\&                             or die "Can\*(Aqt bind : $@\en";
\&
\& NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE
.Ve
.Sp
As of \s-1VERSION\s0 1.18 all IO::Socket objects have autoflush turned on
by default. This was not the case with earlier releases.
.Sp
.Vb 1
\& NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE
.Ve
.SS "\s-1METHODS\s0"
.IX Subsection "METHODS"
.IP "accept ()" 4
.IX Item "accept ()"
See IO::Socket::INET.
.IP "bind ()" 4
.IX Item "bind ()"
See IO::Socket::INET.
.IP "configure ()" 4
.IX Item "configure ()"
This function exists in this module, but I (= Shlomi Fish) don't know what it 
does, or understand it. It's also not tested anywhere. I'll be happy to be
enlightened.
.IP "connect ()" 4
.IX Item "connect ()"
See IO::Socket::INET.
.IP "sockaddr ()" 4
.IX Item "sockaddr ()"
Return the address part of the sockaddr structure for the socket
.IP "\fIsockdomain()\fR" 4
.IX Item "sockdomain()"
Returns the domain of the socket \- \s-1AF_INET\s0 or \s-1AF_INET6\s0 or whatever.
.IP "sockport ()" 4
.IX Item "sockport ()"
Return the port number that the socket is using on the local host
.IP "sockhost ()" 4
.IX Item "sockhost ()"
Return the address part of the sockaddr structure for the socket in a
text form (\*(L"2001:800:40:2a05::10\*(R" or \*(L"245.245.13.27\*(R")
.IP "sockflow ()" 4
.IX Item "sockflow ()"
Return the flow information part of the sockaddr structure for the socket
.IP "sockscope ()" 4
.IX Item "sockscope ()"
Return the scope identification part of the sockaddr structure for the socket
.IP "peeraddr ()" 4
.IX Item "peeraddr ()"
Return the address part of the sockaddr structure for the socket on
the peer host
.IP "peerport ()" 4
.IX Item "peerport ()"
Return the port number for the socket on the peer host.
.IP "peerhost ()" 4
.IX Item "peerhost ()"
Return the address part of the sockaddr structure for the socket on the
peer host in a text form (\*(L"2001:800:40:2a05::10\*(R" or \*(L"245.245.13.27\*(R")
.IP "peerflow ()" 4
.IX Item "peerflow ()"
Return the flow information part of the sockaddr structure for the socket 
on the peer host
.IP "peerscope ()" 4
.IX Item "peerscope ()"
Return the scope identification part of the sockaddr structure for the socket
on the peer host
.SH "REPOSITORY"
.IX Header "REPOSITORY"
The Subversion repository for this module carrying complete version history
and other information is:
.PP
http://svn.berlios.de/svnroot/repos/web\-cpan/IO\-Socket\-INET6/ <http://svn.berlios.de/svnroot/repos/web-cpan/IO-Socket-INET6/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Socket,Socket6, IO::Socket
.SH "AUTHOR"
.IX Header "AUTHOR"
This program is based on IO::Socket::INET by Graham Barr
<gbarr@pobox.com> and currently maintained by the Perl Porters.
.PP
Modified by Rafael Martinez Torres <rafael.martinez@novagnet.com> and
Euro6IX project.
.PP
Modified further by Shlomi Fish <shlomif@iglu.org.il>, while disclaiming
all copyrights.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2003\- Rafael Martinez Torres <rafael.martinez@novagnet.com>.
.PP
Copyright (c) 2003\- Euro6IX project.
.PP
Copyright (c) 1996\-8 Graham Barr <gbarr@pobox.com>.
.PP
All rights reserved.
.PP
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
                                                                                                                                                                                                                                 osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/IO::Socket::INET65.18.3pm                    0100644 0001750 0001750 00000031643 12566241503 024416  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "IO::Socket::INET6 3"
.TH IO::Socket::INET6 3 "2015-08-22" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
IO::Socket::INET6 \- Object interface for AF_INET/AF_INET6 domain sockets
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use IO::Socket::INET6;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`IO::Socket::INET6\*(C'\fR provides an object interface to creating and using sockets
in either \s-1AF_INET\s0 or \s-1AF_INET6\s0 domains. It is built upon the IO::Socket interface and
inherits all the methods defined by IO::Socket.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.IP "new ( [\s-1ARGS\s0] )" 4
.IX Item "new ( [ARGS] )"
Creates an \f(CW\*(C`IO::Socket::INET6\*(C'\fR object, which is a reference to a
newly created symbol (see the \f(CW\*(C`Symbol\*(C'\fR package). \f(CW\*(C`new\*(C'\fR
optionally takes arguments, these arguments are in key-value pairs.
.Sp
In addition to the key-value pairs accepted by IO::Socket,
\&\f(CW\*(C`IO::Socket::INET6\*(C'\fR provides.
.Sp
.Vb 10
\&    Domain      Address family               AF_INET | AF_INET6 | AF_UNSPEC (default)
\&    PeerAddr    Remote host address          <hostname>[:<port>]
\&    PeerHost    Synonym for PeerAddr
\&    PeerPort    Remote port or service       <service>[(<no>)] | <no>
\&    PeerFlow    Remote flow information
\&    PeerScope   Remote address scope
\&    LocalAddr   Local host bind address      hostname[:port]
\&    LocalHost   Synonym for LocalAddr
\&    LocalPort   Local host bind port         <service>[(<no>)] | <no>
\&    LocalFlow   Local host flow information
\&    LocalScope  Local host address scope
\&    Proto       Protocol name (or number)    "tcp" | "udp" | ...
\&    Type        Socket type                  SOCK_STREAM | SOCK_DGRAM | ...
\&    Listen      Queue size for listen
\&    ReuseAddr   Set SO_REUSEADDR before binding
\&    Reuse       Set SO_REUSEADDR before binding (deprecated, prefer ReuseAddr)
\&    ReusePort   Set SO_REUSEPORT before binding
\&    Broadcast   Set SO_BROADCAST before binding
\&    Timeout     Timeout value for various operations
\&    MultiHomed  Try all addresses for multi\-homed hosts
\&    Blocking    Determine if connection will be blocking mode
.Ve
.Sp
If \f(CW\*(C`Listen\*(C'\fR is defined then a listen socket is created, else if the
socket type, which is derived from the protocol, is \s-1SOCK_STREAM\s0 then
\&\fIconnect()\fR is called.
.Sp
Although it is not illegal, the use of \f(CW\*(C`MultiHomed\*(C'\fR on a socket
which is in non-blocking mode is of little use. This is because the
first connect will never fail with a timeout as the connect call
will not block.
.Sp
The \f(CW\*(C`PeerAddr\*(C'\fR can be a hostname,  the IPv6\-address on the
\&\*(L"2001:800:40:2a05::10\*(R" form , or the IPv4\-address on the \*(L"213.34.234.245\*(R" form.
The \f(CW\*(C`PeerPort\*(C'\fR can be a number or a symbolic
service name.  The service name might be followed by a number in
parenthesis which is used if the service is not known by the system.
The \f(CW\*(C`PeerPort\*(C'\fR specification can also be embedded in the \f(CW\*(C`PeerAddr\*(C'\fR
by preceding it with a \*(L":\*(R", and closing the IPv6 address on brackets \*(L"[]\*(R" if
necessary: \*(L"124.678.12.34:23\*(R",\*(L"[2a05:345f::10]:23\*(R",\*(L"any.server.com:23\*(R".
.Sp
If \f(CW\*(C`Domain\*(C'\fR is not given, \s-1AF_UNSPEC\s0 is assumed, that is, both \s-1AF_INET\s0 and \s-1AF_INET6\s0 will
be both considered when resolving \s-1DNS\s0 names. \s-1AF_INET6\s0 has priority.
If you guess you are in trouble not reaching the peer,(the service is not available via
\&\s-1AF_INET6\s0 but \s-1AF_INET\s0) you can either try Multihomed (try any address/family until reach)
or concrete your address \f(CW\*(C`family\*(C'\fR (\s-1AF_INET, AF_INET6\s0).
.Sp
If \f(CW\*(C`Proto\*(C'\fR is not given and you specify a symbolic \f(CW\*(C`PeerPort\*(C'\fR port,
then the constructor will try to derive \f(CW\*(C`Proto\*(C'\fR from the service
name.  As a last resort \f(CW\*(C`Proto\*(C'\fR \*(L"tcp\*(R" is assumed.  The \f(CW\*(C`Type\*(C'\fR
parameter will be deduced from \f(CW\*(C`Proto\*(C'\fR if not specified.
.Sp
If the constructor is only passed a single argument, it is assumed to
be a \f(CW\*(C`PeerAddr\*(C'\fR specification.
.Sp
If \f(CW\*(C`Blocking\*(C'\fR is set to 0, the connection will be in nonblocking mode.
If not specified it defaults to 1 (blocking mode).
.Sp
Examples:
.Sp
.Vb 3
\&   $sock = IO::Socket::INET6\->new(PeerAddr => \*(Aqwww.perl.org\*(Aq,
\&                                 PeerPort => \*(Aqhttp(80)\*(Aq,
\&                                 Proto    => \*(Aqtcp\*(Aq);
.Ve
.Sp
Suppose either you have no IPv6 connectivity or www.perl.org has no http service on IPv6. Then,
.Sp
(Trying all address/families until reach)
.Sp
.Vb 4
\&   $sock = IO::Socket::INET6\->new(PeerAddr => \*(Aqwww.perl.org\*(Aq,
\&                                 PeerPort => \*(Aqhttp(80)\*(Aq,
\&                                 Multihomed => 1 ,
\&                                 Proto    => \*(Aqtcp\*(Aq);
.Ve
.Sp
(Concrete to IPv4 protocol)
.Sp
.Vb 4
\&   $sock = IO::Socket::INET6\->new(PeerAddr => \*(Aqwww.perl.org\*(Aq,
\&                                 PeerPort => \*(Aqhttp(80)\*(Aq,
\&                                 Domain => AF_INET ,
\&                                 Proto    => \*(Aqtcp\*(Aq);
\&
\&
\&   $sock = IO::Socket::INET6\->new(PeerAddr => \*(Aqlocalhost:smtp(25)\*(Aq);
\&
\&   $sock = IO::Socket::INET6\->new(Listen    => 5,
\&                                 LocalAddr => \*(Aqlocalhost\*(Aq,
\&                                 LocalPort => 9000,
\&                                 Proto     => \*(Aqtcp\*(Aq);
\&
\&   $sock = IO::Socket::INET6\->new(\*(Aq[::1]:25\*(Aq);
\&
\&   $sock = IO::Socket::INET6\->new(PeerPort  => 9999,
\&                                 PeerAddr  => Socket6::inet_ntop(AF_INET6,in6addr_broadcast),
\&                                 Proto     => udp,
\&                                 LocalAddr => \*(Aqlocalhost\*(Aq,
\&                                 Broadcast => 1 )
\&                             or die "Can\*(Aqt bind : $@\en";
\&
\& NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE
.Ve
.Sp
As of \s-1VERSION 1.18\s0 all IO::Socket objects have autoflush turned on
by default. This was not the case with earlier releases.
.Sp
.Vb 1
\& NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE
.Ve
.SS "\s-1METHODS\s0"
.IX Subsection "METHODS"
.IP "accept ()" 4
.IX Item "accept ()"
See IO::Socket::INET.
.IP "bind ()" 4
.IX Item "bind ()"
See IO::Socket::INET.
.IP "configure ()" 4
.IX Item "configure ()"
This function exists in this module, but I (= Shlomi Fish) don't know what it
does, or understand it. It's also not tested anywhere. I'll be happy to be
enlightened.
.IP "connect ()" 4
.IX Item "connect ()"
See IO::Socket::INET.
.IP "sockaddr ()" 4
.IX Item "sockaddr ()"
Return the address part of the sockaddr structure for the socket
.IP "\fIsockdomain()\fR" 4
.IX Item "sockdomain()"
Returns the domain of the socket \- \s-1AF_INET\s0 or \s-1AF_INET6\s0 or whatever.
.IP "sockport ()" 4
.IX Item "sockport ()"
Return the port number that the socket is using on the local host
.IP "sockhost ()" 4
.IX Item "sockhost ()"
Return the address part of the sockaddr structure for the socket in a
text form (\*(L"2001:800:40:2a05::10\*(R" or \*(L"245.245.13.27\*(R")
.IP "sockflow ()" 4
.IX Item "sockflow ()"
Return the flow information part of the sockaddr structure for the socket
.IP "sockscope ()" 4
.IX Item "sockscope ()"
Return the scope identification part of the sockaddr structure for the socket
.IP "peeraddr ()" 4
.IX Item "peeraddr ()"
Return the address part of the sockaddr structure for the socket on
the peer host
.IP "peerport ()" 4
.IX Item "peerport ()"
Return the port number for the socket on the peer host.
.IP "peerhost ()" 4
.IX Item "peerhost ()"
Return the address part of the sockaddr structure for the socket on the
peer host in a text form (\*(L"2001:800:40:2a05::10\*(R" or \*(L"245.245.13.27\*(R")
.IP "peerflow ()" 4
.IX Item "peerflow ()"
Return the flow information part of the sockaddr structure for the socket
on the peer host
.IP "peerscope ()" 4
.IX Item "peerscope ()"
Return the scope identification part of the sockaddr structure for the socket
on the peer host
.SH "REPOSITORY"
.IX Header "REPOSITORY"
The Subversion repository for this module carrying complete version history
and other information is:
.PP
<http://svn.berlios.de/svnroot/repos/web\-cpan/IO\-Socket\-INET6/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Socket,Socket6, IO::Socket
.SH "AUTHOR"
.IX Header "AUTHOR"
This program is based on IO::Socket::INET by Graham Barr
<gbarr@pobox.com> and currently maintained by the Perl Porters.
.PP
Modified by Rafael Martinez Torres <rafael.martinez@novagnet.com> and
Euro6IX project.
.PP
Modified further by Shlomi Fish <shlomif@iglu.org.il>, while disclaiming
all copyrights.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2003\- Rafael Martinez Torres <rafael.martinez@novagnet.com>.
.PP
Copyright (c) 2003\- Euro6IX project.
.PP
Copyright (c) 1996\-8 Graham Barr <gbarr@pobox.com>.
.PP
All rights reserved.
.PP
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
                                                                                             osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/IO::Socket::SSL.3pm                          0100644 0001750 0001750 00000170037 12566241332 023717  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "IO::Socket::SSL 3"
.TH IO::Socket::SSL 3 "2015-08-22" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
IO::Socket::SSL \-\- SSL sockets with IO::Socket interface
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    use strict;
\&    use IO::Socket::SSL;
\&
\&    # simple HTTP client \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&    my $client = IO::Socket::SSL\->new(
\&        # where to connect
\&        PeerHost => "www.example.com",
\&        PeerPort => "https",
\&
\&        # certificate verification
\&        SSL_verify_mode => SSL_VERIFY_PEER,
\&        SSL_ca_path => \*(Aq/etc/ssl/certs\*(Aq, # typical CA path on Linux
\&        # on OpenBSD instead: SSL_ca_file => \*(Aq/etc/ssl/cert.pem\*(Aq
\&
\&        # easy hostname verification
\&        SSL_verifycn_name => \*(Aqfoo.bar\*(Aq, # defaults to PeerHost
\&        SSL_verifycn_scheme => \*(Aqhttp\*(Aq,
\&
\&        # SNI support
\&        SSL_hostname => \*(Aqfoo.bar\*(Aq, # defaults to PeerHost
\&
\&    ) or die "failed connect or ssl handshake: $!,$SSL_ERROR";
\&
\&    # send and receive over SSL connection
\&    print $client "GET / HTTP/1.0\er\en\er\en";
\&    print <$client>;
\&
\&    # simple server \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&    my $server = IO::Socket::SSL\->new(
\&        # where to listen
\&        LocalAddr => \*(Aq127.0.0.1\*(Aq,
\&        LocalPort => 8080,
\&        Listen => 10,
\&
\&        # which certificate to offer
\&        # with SNI support there can be different certificates per hostname
\&        SSL_cert_file => \*(Aqcert.pem\*(Aq,
\&        SSL_key_file => \*(Aqkey.pem\*(Aq,
\&    ) or die "failed to listen: $!";
\&
\&    # accept client
\&    my $client = $server\->accept or die
\&        "failed to accept or ssl handshake: $!,$SSL_ERROR";
\&
\&    # Upgrade existing socket to SSL \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&    my $sock = IO::Socket::INET\->new(\*(Aqimap.example.com:imap\*(Aq);
\&    # ... receive greeting, send STARTTLS, receive ok ...
\&    IO::Socket::SSL\->start_SSL($sock,
\&        SSL_verify_mode => SSL_VERIFY_PEER,
\&        SSL_ca_path => \*(Aq/etc/ssl/certs\*(Aq,
\&        ...
\&    ) or die "failed to upgrade to SSL: $SSL_ERROR";
\&
\&    # manual name verification, could also be done in start_SSL with
\&    # SSL_verifycn_name etc
\&    $client\->verify_hostname( \*(Aqimap.example.com\*(Aq,\*(Aqimap\*(Aq )
\&        or die "hostname verification failed";
\&
\&    # all data are now SSL encrypted
\&    print $sock ....
\&
\&    # use non\-blocking socket (BEWARE OF SELECT!) \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&    my $cl = IO::Socket::SSL\->new($dst);
\&    $cl\->blocking(0);
\&    my $sel = IO::Select\->new($cl);
\&    while (1) {
\&        # with SSL a call for reading n bytes does not result in reading of n
\&        # bytes from the socket, but instead it must read at least one full SSL
\&        # frame. If the socket has no new bytes, but there are unprocessed data
\&        # from the SSL frame can_read will block!
\&
\&        # wait for data on socket
\&        $sel\->can_read();
\&
\&        # new data on socket or eof
\&        READ:
\&        # this does not read only 1 byte from socket, but reads the complete SSL
\&        # frame and then just returns one byte. On subsequent calls it than
\&        # returns more byte of the same SSL frame until it needs to read the
\&        # next frame.
\&        my $n = sysread( $cl,my $buf,1);
\&        if ( ! defined $n ) {
\&            die $! if not ${EAGAIN};
\&            next if $SSL_ERROR == SSL_WANT_READ;
\&            if ( $SSL_ERROR == SSL_WANT_WRITE ) {
\&                # need to write data on renegotiation
\&                $sel\->can_write;
\&                next;
\&            }
\&            die "something went wrong: $SSL_ERROR";
\&        } elsif ( ! $n ) {
\&            last; # eof
\&        } else {
\&            # read next bytes
\&            # we might have still data within the current SSL frame
\&            # thus first process these data instead of waiting on the underlying
\&            # socket object
\&            goto READ if $self\->pending;  # goto sysread
\&            next;                         # goto $sel\->can_read
\&        }
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides an interface to \s-1SSL\s0 sockets, similar to other IO::Socket
modules. Because of that, it can be used to make existing programs using
IO::Socket::INET or similar modules to provide \s-1SSL\s0 encryption without much
effort.
IO::Socket::SSL supports all the extra features that one needs to write a
full-featured \s-1SSL\s0 client or server application: multiple \s-1SSL\s0 contexts, cipher
selection, certificate verification, Server Name Indication (\s-1SNI\s0), Next
Protocol Negotiation (\s-1NPN\s0), \s-1SSL\s0 version selection and more.
.PP
If you have never used \s-1SSL\s0 before, you should read the section 'Using \s-1SSL\s0'
before attempting to use this module.
.PP
If you used IO::Socket before you should read the following section
\&'Differences to IO::Socket'.
.PP
If you want to use \s-1SSL\s0 with non-blocking sockets and/or within an event loop
please read very carefully the sections about non-blocking I/O and polling of \s-1SSL\s0
sockets.
.PP
If you are trying to use it with threads see the \s-1BUGS\s0 section.
.SS "Differences to IO::Socket"
.IX Subsection "Differences to IO::Socket"
Although IO::Socket::SSL tries to behave similar to IO::Socket there are
some important differences due to the way \s-1SSL\s0 works:
.IP "\(bu" 4
buffered input
.Sp
Data are transmitted inside the \s-1SSL\s0 protocol using encrypted frames, which can
only be decrypted once the full frame is received. So if you use \f(CW\*(C`read\*(C'\fR or
\&\f(CW\*(C`sysread\*(C'\fR to receive less data than the \s-1SSL\s0 frame contains, it will read the
whole frame, return part of it and buffer the rest for later reads. 
This does not make a difference for simple programs, but if you use
select-loops or polling or non-blocking I/O please read the related sections.
.IP "\(bu" 4
\&\s-1SSL\s0 handshakes
.Sp
Before any encryption can be done the peers have to agree to common algorithms,
verify certificates etc. So a handshake needs to be done before any payload is
send or received and might additionally happen later in the connection again.
.Sp
This has important implications when doing non-blocking or event-based I/O
(please read the related sections), but means also, that connect and accept
calls include the \s-1SSL\s0 handshake and thus might block or fail, if the peer does
not behave like expected. For instance accept will wait infinitly if a \s-1TCP\s0
client connects to the socket but does not initiate an \s-1SSL\s0 handshake.
.SH "METHODS"
.IX Header "METHODS"
IO::Socket::SSL inherits from another IO::Socket module.
The choice of the super class depends on the installed modules:
.IP "\(bu" 4
If IO::Socket::IP with at least version 0.20 is installed it will use this
module as super class, transparently providing IPv6 and IPv4 support.
.IP "\(bu" 4
If IO::Socket::INET6 is installed it will use this module as super class,
transparently providing IPv6 and IPv4 support.
.IP "\(bu" 4
Otherwise it will fall back to IO::Socket::INET, which is a perl core module.
With IO::Socket::INET you only get IPv4 support.
.PP
Please be aware, that with the IPv6 capable super classes, it will lookup first
for the IPv6 address of a given hostname. If the resolver provides an IPv6
address, but the host cannot be reached by IPv6, there will be no automatic
fallback to IPv4.
To avoid these problems you can either force IPv4 by specifying and \s-1AF_INET\s0
as \f(CW\*(C`Domain\*(C'\fR of the socket or globally enforce IPv4 by loading IO::Socket::SSL
with the option 'inet4'.
.PP
IO::Socket::SSL will provide all of the methods of its super class, but
sometimes it will override them to match the behavior expected from \s-1SSL\s0 or to
provide additional arguments.
.PP
The new or changed methods are described below, but please read also the
section about \s-1SSL\s0 specific error handling.
.IP "\fBnew(...)\fR" 4
.IX Item "new(...)"
Creates a new IO::Socket::SSL object.  You may use all the friendly options
that came bundled with the super class (e.g. IO::Socket::IP,
IO::Socket::INET, ...) plus (optionally) the ones described below.
If you don't specify any \s-1SSL\s0 related options it will do it's best in using
secure defaults, e.g. chosing good ciphers, enabling proper verification etc.
.RS 4
.IP "SSL_hostname" 2
.IX Item "SSL_hostname"
This can be given to specify the hostname used for \s-1SNI,\s0 which is needed if you
have multiple \s-1SSL\s0 hostnames on the same \s-1IP\s0 address. If not given it will try to
determine hostname from PeerAddr, which will fail if only \s-1IP\s0 was given or if
this argument is used within start_SSL.
.Sp
If you want to disable \s-1SNI\s0 set this argument to ''.
.Sp
Currently only supported for the client side and will be ignored for the server
side.
.Sp
See section \*(L"\s-1SNI\s0 Support\*(R" for details of \s-1SNI\s0 the support.
.IP "SSL_version" 2
.IX Item "SSL_version"
Sets the version of the \s-1SSL\s0 protocol used to transmit data. 
\&'SSLv23' auto-negotiates between SSLv2 and SSLv3, while 'SSLv2', 'SSLv3',
\&'TLSv1', 'TLSv1_1' or 'TLSv1_2' restrict the protocol to the specified version.
All values are case-insensitive.  Instead of 'TLSv1_1' and 'TLSv1_2' one can
also use 'TLSv11' and 'TLSv12'.  Support for 'TLSv1_1' and 'TLSv1_2' requires
recent versions of Net::SSLeay and openssl.
.Sp
You can limit to set of supported protocols by adding !version separated by ':'.
.Sp
The default SSL_version is 'SSLv23:!SSLv2' which means, that SSLv2, SSLv3 and
TLSv1 are supported for initial protocol handshakes, but SSLv2 will not be
accepted, leaving only SSLv3 and TLSv1. You can also use !TLSv1_1 and !TLSv1_2
to disable \s-1TLS\s0 versions 1.1 and 1.2 while allowing \s-1TLS\s0 version 1.0.
.Sp
Setting the version instead to 'TLSv1' will probably break interaction with
lots of clients which start with SSLv2 and then upgrade to TLSv1. On the other
side some clients just close the connection when they receive a \s-1TLS\s0 version 1.1
request. In this case setting the version to 'SSLv23:!SSLv2:!TLSv1_1:!TLSv1_2'
might help.
.IP "SSL_cipher_list" 2
.IX Item "SSL_cipher_list"
If this option is set the cipher list for the connection will be set to the
given value, e.g. something like '\s-1ALL:\s0!LOW:!EXP:!aNULL'. Look into the OpenSSL
documentation (<http://www.openssl.org/docs/apps/ciphers.html#CIPHER_STRINGS>)
for more details.
.Sp
Unless you fail to contact your peer because of no shared ciphers it is
recommended to leave this option at the default setting. The default setting
prefers ciphers with forward secrecy, disables anonymous authentication and
disables known insecure ciphers like \s-1MD5, DES\s0 etc. This gives a grade A result
at the tests of \s-1SSL\s0 Labs.
To use the less secure OpenSSL builtin default (whatever this is) set
SSL_cipher_list to ''.
.IP "SSL_honor_cipher_order" 2
.IX Item "SSL_honor_cipher_order"
If this option is true the cipher order the server specified is used instead
of the order proposed by the client. This option defaults to true to make use of
our secure cipher list setting.
.IP "SSL_use_cert" 2
.IX Item "SSL_use_cert"
If this is true, it forces IO::Socket::SSL to use a certificate and key, even if
you are setting up an \s-1SSL\s0 client.  If this is set to 0 (the default), then you will
only need a certificate and key if you are setting up a server.
.Sp
SSL_use_cert will implicitly be set if SSL_server is set.
For convenience it is also set if it was not given but a cert was given for use
(SSL_cert_file or similar).
.IP "SSL_server" 2
.IX Item "SSL_server"
Set this option to a true value, if the socket should be used as a server.
If this is not explicitly set it is assumed, if the Listen parameter is given
when creating the socket.
.IP "SSL_cert_file | SSL_cert | SSL_key_file | SSL_key" 2
.IX Item "SSL_cert_file | SSL_cert | SSL_key_file | SSL_key"
If you create a server you usually need to specify a server certificate which
should be verified by the client. Same is true for client certificates, which
should be verified by the server.
The certificate can be given as a file in \s-1PEM\s0 format with SSL_cert_file or
as an internal representation of a X509* object with SSL_cert.
.Sp
For each certificate a key is need, which can either be given as a file in \s-1PEM\s0
format with SSL_key_file or as an internal representation of a EVP_PKEY* object
with SSL_key.
.Sp
If your \s-1SSL\s0 server should be able to use different certificates on the same \s-1IP\s0
address, depending on the name given by \s-1SNI,\s0 you can use a hash reference
instead of a file with \f(CW\*(C`<hostname =\*(C'\fR cert_file>>.
.Sp
In case certs and keys are needed but not given it might fall back to builtin
defaults, see \*(L"Defaults for Cert, Key and \s-1CA\*(R".\s0
.Sp
Examples:
.Sp
.Vb 2
\& SSL_cert_file => \*(Aqmycert.pem\*(Aq,
\& SSL_key_file => \*(Aqmykey.pem\*(Aq,
\&
\& SSL_cert_file => {
\&    "foo.example.org" => \*(Aqfoo\-cert.pem\*(Aq,
\&    "bar.example.org" => \*(Aqbar\-cert.pem\*(Aq,
\&    # used when nothing matches or client does not support SNI
\&    \*(Aq\*(Aq => \*(Aqdefault\-cert.pem\*(Aq,
\& }
\& SSL_key_file => {
\&    "foo.example.org" => \*(Aqfoo\-key.pem\*(Aq,
\&    "bar.example.org" => \*(Aqbar\-key.pem\*(Aq,
\&    # used when nothing matches or client does not support SNI
\&    \*(Aq\*(Aq => \*(Aqdefault\-key.pem\*(Aq,
\& }
.Ve
.IP "SSL_dh_file" 2
.IX Item "SSL_dh_file"
If you want Diffie-Hellman key exchange you need to supply a suitable file here
or use the SSL_dh parameter. See dhparam command in openssl for more information.
To create a server which provides forward secrecy you need to either give the \s-1DH\s0
parameters or (better, because faster) the \s-1ECDH\s0 curve.
.Sp
If neither \f(CW\*(C`SSL_dh_file\*(C'\fR not \f(CW\*(C`SSL_dh\*(C'\fR is set a builtin \s-1DH\s0 parameter with a
length of 2048 bit is used to offer \s-1DH\s0 key exchange by default. If you don't
want this (e.g. disable \s-1DH\s0 key exchange) explicitly set this or the \f(CW\*(C`SSL_dh\*(C'\fR
parameter to undef.
.IP "SSL_dh" 2
.IX Item "SSL_dh"
Like SSL_dh_file, but instead of giving a file you use a preloaded or generated DH*.
.IP "SSL_ecdh_curve" 2
.IX Item "SSL_ecdh_curve"
If you want Elliptic Curve Diffie-Hellmann key exchange you need to supply the
\&\s-1OID\s0 or \s-1NID\s0 of a suitable curve (like 'prime256v1') here.
To create a server which provides forward secrecy you need to either give the \s-1DH\s0
parameters or (better, because faster) the \s-1ECDH\s0 curve.
.Sp
This parameter defaults to 'prime256v1' (builtin of OpenSSL) to offer \s-1ECDH\s0 key
exchange by default. If you don't want this explicitly set it to undef.
.IP "SSL_passwd_cb" 2
.IX Item "SSL_passwd_cb"
If your private key is encrypted, you might not want the default password prompt from
Net::SSLeay.  This option takes a reference to a subroutine that should return the
password required to decrypt your private key.
.IP "SSL_ca_file | SSL_ca_path" 2
.IX Item "SSL_ca_file | SSL_ca_path"
Usually you want to verify that the peer certificate has been signed by a
trusted certificate authority. In this case you should use this option to
specify the file (SSL_ca_file) or directory (SSL_ca_path) containing the
certificate(s) of the trusted certificate authorities.
If both SSL_ca_file and SSL_ca_path are undefined and not builtin defaults (see
\&\*(L"Defaults for Cert, Key and \s-1CA\*(R".\s0) can be used, it will try to use the system
defaults used built into the OpenSSL library.
If you really don't want to set a \s-1CA\s0 set this key to \f(CW\*(Aq\*(Aq\fR.
.IP "SSL_verify_mode" 2
.IX Item "SSL_verify_mode"
This option sets the verification mode for the peer certificate.
You may combine \s-1SSL_VERIFY_PEER \s0(verify_peer), \s-1SSL_VERIFY_FAIL_IF_NO_PEER_CERT
\&\s0(fail verification if no peer certificate exists; ignored for clients),
\&\s-1SSL_VERIFY_CLIENT_ONCE \s0(verify client once; ignored for clients).
See OpenSSL man page for SSL_CTX_set_verify for more information.
.Sp
The default is \s-1SSL_VERIFY_NONE\s0 for server  (e.g. no check for client
certificate) and \s-1SSL_VERIFY_PEER\s0 for client (check server certificate).
.IP "SSL_verify_callback" 2
.IX Item "SSL_verify_callback"
If you want to verify certificates yourself, you can pass a sub reference along
with this parameter to do so.  When the callback is called, it will be passed:
.RS 2
.IP "1. a true/false value that indicates what OpenSSL thinks of the certificate," 4
.IX Item "1. a true/false value that indicates what OpenSSL thinks of the certificate,"
.PD 0
.IP "2. a C\-style memory address of the certificate store," 4
.IX Item "2. a C-style memory address of the certificate store,"
.IP "3. a string containing the certificate's issuer attributes and owner attributes, and" 4
.IX Item "3. a string containing the certificate's issuer attributes and owner attributes, and"
.IP "4. a string containing any errors encountered (0 if no errors)." 4
.IX Item "4. a string containing any errors encountered (0 if no errors)."
.IP "5. a C\-style memory address of the peer's own certificate (convertible to \s-1PEM\s0 form with \fINet::SSLeay::PEM_get_string_X509()\fR)." 4
.IX Item "5. a C-style memory address of the peer's own certificate (convertible to PEM form with Net::SSLeay::PEM_get_string_X509())."
.RE
.RS 2
.PD
.Sp
The function should return 1 or 0, depending on whether it thinks the certificate
is valid or invalid.  The default is to let OpenSSL do all of the busy work.
.Sp
The callback will be called for each element in the certificate chain.
.Sp
See the OpenSSL documentation for SSL_CTX_set_verify for more information.
.RE
.IP "SSL_verifycn_scheme" 2
.IX Item "SSL_verifycn_scheme"
Set the scheme used to automatically verify the hostname of the peer.
See the information about the verification schemes in \fBverify_hostname\fR.
.Sp
The default is undef, e.g. to not automatically verify the hostname.
If no verification is done the other \fBSSL_verifycn_*\fR options have
no effect, but you might still do manual verification by calling
\&\fBverify_hostname\fR.
.IP "SSL_verifycn_name" 2
.IX Item "SSL_verifycn_name"
Set the name which is used in verification of hostname. If SSL_verifycn_scheme
is set and no SSL_verifycn_name is given it will try to use the PeerHost and
PeerAddr settings and fail if no name can be determined.
.Sp
Using PeerHost or PeerAddr works only if you create the connection directly
with \f(CW\*(C`IO::Socket::SSL\->new\*(C'\fR, if an IO::Socket::INET object is upgraded
with \fBstart_SSL\fR the name has to be given in \fBSSL_verifycn_name\fR.
.IP "SSL_check_crl" 2
.IX Item "SSL_check_crl"
If you want to verify that the peer certificate has not been revoked
by the signing authority, set this value to true. OpenSSL will search
for the \s-1CRL\s0 in your SSL_ca_path, or use the file specified by
SSL_crl_file.  See the Net::SSLeay documentation for more details.
Note that this functionality appears to be broken with OpenSSL <
v0.9.7b, so its use with lower versions will result in an error.
.IP "SSL_crl_file" 2
.IX Item "SSL_crl_file"
If you want to specify the \s-1CRL\s0 file to be used, set this value to the
pathname to be used.  This must be used in addition to setting
SSL_check_crl.
.IP "SSL_reuse_ctx" 2
.IX Item "SSL_reuse_ctx"
If you have already set the above options for a previous instance of
IO::Socket::SSL, then you can reuse the \s-1SSL\s0 context of that instance by passing
it as the value for the SSL_reuse_ctx parameter.  You may also create a
new instance of the IO::Socket::SSL::SSL_Context class, using any context options
that you desire without specifying connection options, and pass that here instead.
.Sp
If you use this option, all other context-related options that you pass
in the same call to \fInew()\fR will be ignored unless the context supplied was invalid.
Note that, contrary to versions of IO::Socket::SSL below v0.90, a global \s-1SSL\s0 context
will not be implicitly used unless you use the \fIset_default_context()\fR function.
.IP "SSL_create_ctx_callback" 2
.IX Item "SSL_create_ctx_callback"
With this callback you can make individual settings to the context after it
got created and the default setup was done.
The callback will be called with the \s-1CTX\s0 object from Net::SSLeay as the single
argument.
.Sp
Example for limiting the server session cache size:
.Sp
.Vb 4
\&  SSL_create_ctx_callback => sub {
\&      my $ctx = shift;
\&          Net::SSLeay::CTX_sess_set_cache_size($ctx,128);
\&  }
.Ve
.IP "SSL_session_cache_size" 2
.IX Item "SSL_session_cache_size"
If you make repeated connections to the same host/port and the \s-1SSL\s0 renegotiation time
is an issue, you can turn on client-side session caching with this option by specifying a
positive cache size.  For successive connections, pass the SSL_reuse_ctx option to
the \fInew()\fR calls (or use \fIset_default_context()\fR) to make use of the cached sessions.
The session cache size refers to the number of unique host/port pairs that can be
stored at one time; the oldest sessions in the cache will be removed if new ones are
added.
.Sp
This option does not effect the session cache a server has for it's clients, e.g. it
does not affect \s-1SSL\s0 objects with SSL_server set.
.IP "SSL_session_cache" 2
.IX Item "SSL_session_cache"
Specifies session cache object which should be used instead of creating a new.
Overrules SSL_session_cache_size.
This option is useful if you want to reuse the cache, but not the rest of
the context.
.Sp
A session cache object can be created using
\&\f(CW\*(C`IO::Socket::SSL::Session_Cache\->new( cachesize )\*(C'\fR.
.Sp
Use \fIset_default_session_cache()\fR to set a global cache object.
.IP "SSL_session_key" 2
.IX Item "SSL_session_key"
Specifies a key to use for lookups and inserts into client-side session cache.
Per default ip:port of destination will be used, but sometimes you want to
share the same session over multiple ports on the same server (like with \s-1FTPS\s0).
.IP "SSL_session_id_context" 2
.IX Item "SSL_session_id_context"
This gives an id for the servers session cache. It's necessary if you want
clients to connect with a client certificate. If not given but SSL_verify_mode
specifies the need for client certificate a context unique id will be picked.
.IP "SSL_error_trap" 2
.IX Item "SSL_error_trap"
When using the \fIaccept()\fR or \fIconnect()\fR methods, it may be the case that the
actual socket connection works but the \s-1SSL\s0 negotiation fails, as in the case of
an \s-1HTTP\s0 client connecting to an \s-1HTTPS\s0 server.  Passing a subroutine ref attached
to this parameter allows you to gain control of the orphaned socket instead of having it
be closed forcibly.	 The subroutine, if called, will be passed two parameters:
a reference to the socket on which the \s-1SSL\s0 negotiation failed and the full
text of the error message.
.IP "SSL_npn_protocols" 2
.IX Item "SSL_npn_protocols"
If used on the server side it specifies list of protocols advertised by \s-1SSL\s0
server as an array ref, e.g. ['spdy/2','http1.1'].
On the client side it specifies the protocols offered by the client for \s-1NPN\s0
as an array ref.
See also method next_proto_negotiated.
.Sp
Next Protocol Negotioation (\s-1NPN\s0) is available with Net::SSLeay 1.46+ and openssl\-1.0.1+.
To check support you might call \f(CW\*(C`IO::Socket::SSL\-\*(C'\fR\fIcan_npn()\fR>.
If you use this option with an unsupported Net::SSLeay/OpenSSL it will
throw an error.
.RE
.RS 4
.RE
.IP "\fBaccept\fR" 4
.IX Item "accept"
This behaves similar to the accept function of the underlying socket class, but
additionally does the initial \s-1SSL\s0 handshake. But because the underlying socket
class does return a blocking file handle even when accept is called on a
non-blocking socket, the \s-1SSL\s0 handshake on the new file object will be done in a
blocking way. Please see the section about non-blocking I/O for details.
If you don't like this behavior you should do accept on the \s-1TCP\s0 socket and then
upgrade it with \f(CW\*(C`start_SSL\*(C'\fR later.
.IP "\fBconnect(...)\fR" 4
.IX Item "connect(...)"
This behaves similar to the connnect function but also does an \s-1SSL\s0 handshake.
Because you cannot give \s-1SSL\s0 specific arguments to this function, you should
better either use \f(CW\*(C`new\*(C'\fR to create a connect \s-1SSL\s0 socket or \f(CW\*(C`start_SSL\*(C'\fR to
upgrade an established \s-1TCP\s0 socket to \s-1SSL.\s0
.IP "\fBclose(...)\fR" 4
.IX Item "close(...)"
There are a number of nasty traps that lie in wait if you are not careful about using
\&\fIclose()\fR.  The first of these will bite you if you have been using \fIshutdown()\fR on your
sockets.  Since the \s-1SSL\s0 protocol mandates that a \s-1SSL \s0\*(L"close notify\*(R" message be
sent before the socket is closed, a \fIshutdown()\fR that closes the socket's write channel
will cause the \fIclose()\fR call to hang.  For a similar reason, if you try to close a
copy of a socket (as in a forking server) you will affect the original socket as well.
To get around these problems, call close with an object-oriented syntax
(e.g. \f(CW$socket\fR\->close(SSL_no_shutdown => 1))
and one or more of the following parameters:
.RS 4
.IP "SSL_no_shutdown" 2
.IX Item "SSL_no_shutdown"
If set to a true value, this option will make \fIclose()\fR not use the \fISSL_shutdown()\fR call
on the socket in question so that the close operation can complete without problems
if you have used \fIshutdown()\fR or are working on a copy of a socket.
.Sp
Not using a real ssl shutdown on a socket will make session caching unusable.
.IP "SSL_fast_shutdown" 2
.IX Item "SSL_fast_shutdown"
If set to true only a unidirectional shutdown will be done, e.g. only the
close_notify (see \fISSL_shutdown\fR\|(3)) will be sent. Otherwise a bidirectional
shutdown will be done where it waits for the close_notify of the peer too.
.Sp
Because a unidirectional shutdown is enough to keep session cache working it
defaults to fast shutdown inside close.
.IP "SSL_ctx_free" 2
.IX Item "SSL_ctx_free"
If you want to make sure that the \s-1SSL\s0 context of the socket is destroyed when
you close it, set this option to a true value.
.RE
.RS 4
.RE
.IP "\fBsysread( \s-1BUF, LEN,\s0 [ \s-1OFFSET \s0] )\fR" 4
.IX Item "sysread( BUF, LEN, [ OFFSET ] )"
This function behaves from the outside the same as \fBsysread\fR in other
IO::Socket objects, e.g. it returns at most \s-1LEN\s0 bytes of data. 
But in reality it reads not only \s-1LEN\s0 bytes from the underlying socket, but at
a single \s-1SSL\s0 frame. It then returns up to \s-1LEN\s0 bytes it decrypted from this \s-1SSL\s0
frame. If the frame contained more data than requested it will return only \s-1LEN\s0
data, buffer the rest and return it on futher read calls.
This means, that it might be possible to read data, even if the underlying
socket is not readable, so using poll or select might not be sufficient.
.Sp
sysread will only return data from a single \s-1SSL\s0 frame, e.g. either the pending
data from the already buffered frame or it will read a frame from the underlying
socket and return the decrypted data. It will not return data spanning several
\&\s-1SSL\s0 frames in a single call.
.Sp
Also, calls to sysread might fail, because it must first finish an \s-1SSL\s0
handshake.
.Sp
To understand these behaviors is essential, if you write applications which use
event loops and/or non-blocking sockets. Please read the specific sections in
this documentation.
.IP "\fBsyswrite( \s-1BUF,\s0 [ \s-1LEN,\s0 [ \s-1OFFSET \s0]] )\fR" 4
.IX Item "syswrite( BUF, [ LEN, [ OFFSET ]] )"
This functions behaves from the outside the same as \fBsyswrite\fR in other
IO::Socket objects, e.g. it will write at most \s-1LEN\s0 bytes to the socket, but
there is no guarantee, that all \s-1LEN\s0 bytes are written. It will return the number
of bytes written. 
syswrite will write all the data within a single \s-1SSL\s0 frame, which means, that
no more than 16.384 bytes, which is the maximum size of an \s-1SSL\s0 frame, can be
written at once.
.Sp
For non-blocking sockets \s-1SSL\s0 specific behavior applies. 
Pease read the specific section in this documentation.
.IP "\fBpeek( \s-1BUF, LEN,\s0 [ \s-1OFFSET \s0])\fR" 4
.IX Item "peek( BUF, LEN, [ OFFSET ])"
This function has exactly the same syntax as \fBsysread\fR, and performs nearly the
same task but will not advance the read position so that successive calls to
\&\fIpeek()\fR with the same arguments will return the same results.  This function
requires OpenSSL 0.9.6a or later to work.
.IP "\fB\f(BIpending()\fB\fR" 4
.IX Item "pending()"
This function gives you the number of bytes available without reading from the
underlying socket object. This function is essential if you work with event
loops, please see the section about polling \s-1SSL\s0 sockets.
.IP "\fB\f(BIget_cipher()\fB\fR" 4
.IX Item "get_cipher()"
Returns the string form of the cipher that the IO::Socket::SSL object is using.
.IP "\fB\f(BIget_sslversion()\fB\fR" 4
.IX Item "get_sslversion()"
Returns the string representation of the \s-1SSL\s0 version of an established
connection.
.IP "\fB\f(BIget_sslversion_int()\fB\fR" 4
.IX Item "get_sslversion_int()"
Returns the integer representation of the \s-1SSL\s0 version of an established
connection.
.IP "\fB\f(BIdump_peer_certificate()\fB\fR" 4
.IX Item "dump_peer_certificate()"
Returns a parsable string with select fields from the peer \s-1SSL\s0 certificate.	 This
method directly returns the result of the \fIdump_peer_certificate()\fR method of Net::SSLeay.
.IP "\fBpeer_certificate($field)\fR" 4
.IX Item "peer_certificate($field)"
If a peer certificate exists, this function can retrieve values from it.
If no field is given the internal representation of certificate from Net::SSLeay is
returned.
The following fields can be queried:
.RS 4
.IP "authority (alias issuer)" 8
.IX Item "authority (alias issuer)"
The certificate authority which signed the certificate.
.IP "owner (alias subject)" 8
.IX Item "owner (alias subject)"
The owner of the certificate.
.IP "commonName (alias cn) \- only for Net::SSLeay version >=1.30" 8
.IX Item "commonName (alias cn) - only for Net::SSLeay version >=1.30"
The common name, usually the server name for \s-1SSL\s0 certificates.
.IP "subjectAltNames \- only for Net::SSLeay version >=1.33" 8
.IX Item "subjectAltNames - only for Net::SSLeay version >=1.33"
Alternative names for the subject, usually different names for the same
server, like example.org, example.com, *.example.com.
.Sp
It returns a list of (typ,value) with typ \s-1GEN_DNS, GEN_IPADD\s0 etc (these
constants are exported from IO::Socket::SSL).
See Net::SSLeay::X509_get_subjectAltNames.
.RE
.RS 4
.RE
.IP "\fBget_servername\fR" 4
.IX Item "get_servername"
This gives the name requested by the client if Server Name Indication
(\s-1SNI\s0) was used.
.IP "\fBverify_hostname($hostname,$scheme)\fR" 4
.IX Item "verify_hostname($hostname,$scheme)"
This verifies the given hostname against the peer certificate using the
given scheme. Hostname is usually what you specify within the PeerAddr.
.Sp
Verification of hostname against a certificate is different between various
applications and RFCs. Some scheme allow wildcards for hostnames, some only
in subjectAltNames, and even their different wildcard schemes are possible.
.Sp
To ease the verification the following schemes are predefined:
.RS 4
.IP "ldap (rfc4513), pop3,imap,acap (rfc2995), nntp (rfc4642)" 8
.IX Item "ldap (rfc4513), pop3,imap,acap (rfc2995), nntp (rfc4642)"
Simple wildcards in subjectAltNames are possible, e.g. *.example.org matches
www.example.org but not lala.www.example.org. If nothing from subjectAltNames
match it checks against the common name, but there are no wildcards allowed.
.IP "http (rfc2818), alias is www" 8
.IX Item "http (rfc2818), alias is www"
Extended wildcards in subjectAltNames and common name are possible, e.g.
*.example.org or even www*.example.org. The common
name will be only checked if no names are given in subjectAltNames.
.IP "smtp (rfc3207)" 8
.IX Item "smtp (rfc3207)"
This \s-1RFC\s0 doesn't say much useful about the verification so it just assumes
that subjectAltNames are possible, but no wildcards are possible anywhere.
.IP "none" 8
.IX Item "none"
No verification will be done.
Actually is does not make any sense to call verify_hostname in this case.
.RE
.RS 4
.Sp
The scheme can be given either by specifying the name for one of the above predefined
schemes, or by using a hash which can have the following keys and values:
.IP "check_cn:  0|'always'|'when_only'" 8
.IX Item "check_cn: 0|'always'|'when_only'"
Determines if the common name gets checked. If 'always' it will always be checked
(like in ldap), if 'when_only' it will only be checked if no names are given in
subjectAltNames (like in http), for any other values the common name will not be checked.
.IP "wildcards_in_alt: 0|'leftmost'|'anywhere'" 8
.IX Item "wildcards_in_alt: 0|'leftmost'|'anywhere'"
Determines if and where wildcards in subjectAltNames are possible. If 'leftmost'
only cases like *.example.org will be possible (like in ldap), for 'anywhere'
www*.example.org is possible too (like http), dangerous things like but www.*.org
or even '*' will not be allowed.
.IP "wildcards_in_cn: 0|'leftmost'|'anywhere'" 8
.IX Item "wildcards_in_cn: 0|'leftmost'|'anywhere'"
Similar to wildcards_in_alt, but checks the common name. There is no predefined
scheme which allows wildcards in common names.
.IP "callback: \e&coderef" 8
.IX Item "callback: &coderef"
If you give a subroutine for verification it will be called with the arguments
($hostname,$commonName,@subjectAltNames), where hostname is the name given for
verification, commonName is the result from peer_certificate('cn') and
subjectAltNames is the result from peer_certificate('subjectAltNames').
.Sp
All other arguments for the verification scheme will be ignored in this case.
.RE
.RS 4
.RE
.IP "\fB\f(BInext_proto_negotiated()\fB\fR" 4
.IX Item "next_proto_negotiated()"
This method returns the name of negotiated protocol \- e.g. 'http/1.1'. It works
for both client and server side of \s-1SSL\s0 connection.
.Sp
\&\s-1NPN\s0 support is available with Net::SSLeay 1.46+ and openssl\-1.0.1+.
To check support you might call \f(CW\*(C`IO::Socket::SSL\-\*(C'\fR\fIcan_npn()\fR>.
.IP "\fB\f(BIerrstr()\fB\fR" 4
.IX Item "errstr()"
Returns the last error (in string form) that occurred.	If you do not have a real
object to perform this method on, call \fIIO::Socket::SSL::errstr()\fR instead.
.Sp
For read and write errors on non-blocking sockets, this method may include the string
\&\f(CW\*(C`SSL wants a read first!\*(C'\fR or \f(CW\*(C`SSL wants a write first!\*(C'\fR meaning that the other side
is expecting to read from or write to the socket and wants to be satisfied before you
get to do anything. But with version 0.98 you are better comparing the global exported
variable \f(CW$SSL_ERROR\fR against the exported symbols \s-1SSL_WANT_READ\s0 and \s-1SSL_WANT_WRITE.\s0
.IP "\fB\f(BIopened()\fB\fR" 4
.IX Item "opened()"
This returns false if the socket could not be opened, 1 if the socket could be opened
and the \s-1SSL\s0 handshake was successful done and \-1 if the underlying IO::Handle is open,
but the \s-1SSL\s0 handshake failed.
.IP "\fBIO::Socket::SSL\->start_SSL($socket, ... )\fR" 4
.IX Item "IO::Socket::SSL->start_SSL($socket, ... )"
This will convert a glob reference or a socket that you provide to an IO::Socket::SSL
object.	 You may also pass parameters to specify context or connection options as with
a call to \fInew()\fR.  If you are using this function on an \fIaccept()\fRed socket, you must
set the parameter \*(L"SSL_server\*(R" to 1, i.e. IO::Socket::SSL\->start_SSL($socket, SSL_server => 1).
If you have a class that inherits from IO::Socket::SSL and you want the \f(CW$socket\fR to be blessed
into your own class instead, use MyClass\->start_SSL($socket) to achieve the desired effect.
.Sp
Note that if \fIstart_SSL()\fR fails in \s-1SSL\s0 negotiation, \f(CW$socket\fR will remain blessed in its
original class.	 For non-blocking sockets you better just upgrade the socket to
IO::Socket::SSL and call accept_SSL or connect_SSL and the upgraded object. To
just upgrade the socket set \fBSSL_startHandshake\fR explicitly to 0. If you call start_SSL
w/o this parameter it will revert to blocking behavior for accept_SSL and connect_SSL.
.Sp
If given the parameter \*(L"Timeout\*(R" it will stop if after the timeout no \s-1SSL\s0 connection
was established. This parameter is only used for blocking sockets, if it is not given the
default Timeout from the underlying IO::Socket will be used.
.IP "\fBstop_SSL(...)\fR" 4
.IX Item "stop_SSL(...)"
This is the opposite of \fIstart_SSL()\fR, e.g. it will shutdown the \s-1SSL\s0 connection
and return to the class before \fIstart_SSL()\fR. It gets the same arguments as \fIclose()\fR,
in fact \fIclose()\fR calls \fIstop_SSL()\fR (but without downgrading the class).
.Sp
Will return true if it succeeded and undef if failed. This might be the case for
non-blocking sockets. In this case $! is set to \s-1EAGAIN\s0 and the ssl error to
\&\s-1SSL_WANT_READ\s0 or \s-1SSL_WANT_WRITE.\s0 In this case the call should be retried again with
the same arguments once the socket is ready.
.Sp
For calling from \f(CW\*(C`stop_SSL\*(C'\fR \f(CW\*(C`SSL_fast_shutdown\*(C'\fR default to false, e.g. it
waits for the close_notify of the peer. This is necesarry in case you want to
downgrade the socket and continue to use it as a plain socket.
.ie n .IP "\fBIO::Socket::SSL\->new_from_fd($fd, [mode], \fB%sslargs\fB)\fR" 4
.el .IP "\fBIO::Socket::SSL\->new_from_fd($fd, [mode], \f(CB%sslargs\fB)\fR" 4
.IX Item "IO::Socket::SSL->new_from_fd($fd, [mode], %sslargs)"
This will convert a socket identified via a file descriptor into an \s-1SSL\s0 socket.
Note that the argument list does not include a \*(L"\s-1MODE\*(R"\s0 argument; if you supply one,
it will be thoughtfully ignored (for compatibility with IO::Socket::INET). Instead,
a mode of '+<' is assumed, and the file descriptor passed must be able to handle such
I/O because the initial \s-1SSL\s0 handshake requires bidirectional communication.
.Sp
Internally the given \f(CW$fd\fR will be upgraded to a socket object using the
\&\f(CW\*(C`new_from_fd\*(C'\fR method of the super class (IO::Socket::INET or similar) and then
\&\f(CW\*(C`start_SSL\*(C'\fR will be called using the given \f(CW%sslargs\fR.
If \f(CW$fd\fR is already an IO::Socket object you should better call \f(CW\*(C`start_SSL\*(C'\fR
directly.
.IP "\fBIO::Socket::SSL::set_default_context(...)\fR" 4
.IX Item "IO::Socket::SSL::set_default_context(...)"
You may use this to make IO::Socket::SSL automatically re-use a given context (unless
specifically overridden in a call to \fInew()\fR).  It accepts one argument, which should
be either an IO::Socket::SSL object or an IO::Socket::SSL::SSL_Context object.	See
the SSL_reuse_ctx option of \fInew()\fR for more details.	 Note that this sets the default
context globally, so use with caution (esp. in mod_perl scripts).
.IP "\fBIO::Socket::SSL::set_default_session_cache(...)\fR" 4
.IX Item "IO::Socket::SSL::set_default_session_cache(...)"
You may use this to make IO::Socket::SSL automatically re-use a given session cache
(unless specifically overridden in a call to \fInew()\fR).  It accepts one argument, which should
be an IO::Socket::SSL::Session_Cache object or similar (e.g something which implements
get_session and add_session like IO::Socket::SSL::Session_Cache does).
See the SSL_session_cache option of \fInew()\fR for more details.	 Note that this sets the default
cache globally, so use with caution.
.IP "\fBIO::Socket::SSL::set_defaults(%args)\fR" 4
.IX Item "IO::Socket::SSL::set_defaults(%args)"
With this function one can set defaults for all SSL_* parameter used for creation of
the context, like the SSL_verify* parameter.
.RS 4
.IP "mode \- set default SSL_verify_mode" 8
.IX Item "mode - set default SSL_verify_mode"
.PD 0
.IP "callback \- set default SSL_verify_callback" 8
.IX Item "callback - set default SSL_verify_callback"
.IP "scheme \- set default SSL_verifycn_scheme" 8
.IX Item "scheme - set default SSL_verifycn_scheme"
.IP "name \- set default SSL_verifycn_name" 8
.IX Item "name - set default SSL_verifycn_name"
.PD
If not given and scheme is hash reference with key callback it will be set to 'unknown'
.RE
.RS 4
.RE
.IP "\fBIO::Socket::SSL::set_client_defaults(%args)\fR" 4
.IX Item "IO::Socket::SSL::set_client_defaults(%args)"
Similar to \f(CW\*(C`set_defaults\*(C'\fR, but only sets the defaults for client mode.
.IP "\fBIO::Socket::SSL::set_server_defaults(%args)\fR" 4
.IX Item "IO::Socket::SSL::set_server_defaults(%args)"
Similar to \f(CW\*(C`set_defaults\*(C'\fR, but only sets the defaults for server mode.
.PP
The following methods are unsupported (not to mention futile!) and IO::Socket::SSL
will emit a large \s-1\fICROAK\s0()\fR if you are silly enough to use them:
.IP "truncate" 4
.IX Item "truncate"
.PD 0
.IP "stat" 4
.IX Item "stat"
.IP "ungetc" 4
.IX Item "ungetc"
.IP "setbuf" 4
.IX Item "setbuf"
.IP "setvbuf" 4
.IX Item "setvbuf"
.IP "fdopen" 4
.IX Item "fdopen"
.IP "send/recv" 4
.IX Item "send/recv"
.PD
Note that \fIsend()\fR and \fIrecv()\fR cannot be reliably trapped by a tied filehandle (such as
that used by IO::Socket::SSL) and so may send unencrypted data over the socket.	 Object-oriented
calls to these functions will fail, telling you to use the print/printf/syswrite
and read/sysread families instead.
.SS "Defaults for Cert, Key and \s-1CA\s0"
.IX Subsection "Defaults for Cert, Key and CA"
Only if no SSL_key*, no SSL_cert* and no SSL_ca* options are given it will fall
back to the following builtin defaults:
.IP "SSL_cert_file" 4
.IX Item "SSL_cert_file"
Depending on the SSL_server setting it will be either \f(CW\*(C`certs/server\-cert.pem\*(C'\fR
or \f(CW\*(C`certs/client\-cert.pem\*(C'\fR.
.IP "SSL_key_file" 4
.IX Item "SSL_key_file"
Depending on the SSL_server setting it will be either \f(CW\*(C`certs/server\-key.pem\*(C'\fR
or \f(CW\*(C`certs/client\-key.pem\*(C'\fR.
.IP "SSL_ca_file | SSL_ca_path" 4
.IX Item "SSL_ca_file | SSL_ca_path"
It will set SSL_ca_file to \f(CW\*(C`certs/my\-ca.pem\*(C'\fR if it exist.
Otherwise it will set SSL_ca_path to \f(CW\*(C`ca/\*(C'\fR if it exist.
.PP
\&\fBPlease note, that these defaults are depreciated and will be removed in the
near future\fR, e.g. you should specify all the certificates and keys you use.
If you don't specify a \s-1CA\s0 file or path it will fall back to the system default
built into OpenSSL.
.SH "ERROR HANDLING"
.IX Header "ERROR HANDLING"
If an \s-1SSL\s0 specific error occurs the global variable \f(CW$SSL_ERROR\fR will be set.
If the error occurred on an existing \s-1SSL\s0 socket the method \f(CW\*(C`errstr\*(C'\fR will
give access to the latest socket specific error.
Both \f(CW$SSL_ERROR\fR and \f(CW\*(C`errstr\*(C'\fR method give a dualvar similar to \f(CW$!\fR, e.g.
providing an error number in numeric context or an error description in string
context.
.SH "Polling of SSL Sockets (e.g. select, poll and other event loops)"
.IX Header "Polling of SSL Sockets (e.g. select, poll and other event loops)"
If you sysread one byte on a normal socket it will result in a syscall to read
one byte. Thus, if more than one byte is available on the socket it will be kept
in the network stack of your \s-1OS\s0 and the next select or poll call will return the
socket as readable.
But, with \s-1SSL\s0 you don't deliver single bytes. Multiple data bytes are packet
and encrypted together in an \s-1SSL\s0 frame. Decryption can only be done on the whole
frame, so a sysread for one byte actually reads the complete \s-1SSL\s0 frame from the
socket, decrypts it and returns the first decrypted byte. Further sysreads will
return more bytes from the same frame until all bytes are returned and the
next \s-1SSL\s0 frame will be read from the socket.
.PP
Thus, in order to decide if you can read more data (e.g. if sysread will block)
you must check, if there are still data in the current \s-1SSL\s0 frame by calling
\&\f(CW\*(C`pending\*(C'\fR and if there are no data pending you might check the underlying
socket with select or poll.
Another way might be if you try to sysread at least 16k all the time. 16k is the
maximum size of an \s-1SSL\s0 frame and because sysread returns data from only a single
\&\s-1SSL\s0 frame you guarantee this way, that there are no pending data.
Please see the example on top of this documentation on how to use \s-1SSL\s0 within a
select loop.
.SH "Non-blocking I/O"
.IX Header "Non-blocking I/O"
If you have a non-blocking socket, the expected behavior on read, write, accept
or connect is to set \f(CW$!\fR to \s-1EAGAIN\s0 if the operation can not be completed
immediately.
.PP
With \s-1SSL\s0 handshakes might occure at any time, even within an established
connections. In this cases it is necessary to finish the handshake, before
you can read or write data. This might result in situations, where you want to
read but must first finish the write of a handshake or where you want to write
but must first finish a read.
In these cases \f(CW$!\fR is set to \s-1EGAIN\s0 like expected, and additionally
\&\f(CW$SSL_ERROR\fR is set to either \s-1SSL_WANT_READ\s0 or \s-1SSL_WANT_WRITE.\s0
Thus if you get \s-1EAGAIN\s0 on a \s-1SSL\s0 socket you must check \f(CW$SSL_ERROR\fR for
SSL_WANT_* and adapt your event mask accordingly.
.PP
Using readline on non-blocking sockets does not make much sense and I would
advise against using it.
And, while the behavior is not documented for other IO::Socket classes, it
will try to emulate the behavior seen there, e.g. to return the received data
instead of blocking, even if the line is not complete. If an unrecoverable error
occurs it will return nothing, even if it already received some data.
.PP
Also, I would advise against using \f(CW\*(C`accept\*(C'\fR with a non-blocking \s-1SSL\s0 object,
because it might block and this is not what most would expect. The reason for
this is that accept on a non-blocking \s-1TCP\s0 socket (e.g. IO::Socket::IP,
IO::Socket::INET..) results in a new \s-1TCP\s0 socket, which does not inherit the
non-blocking behavior of the master socket. And thus the initial \s-1SSL\s0 handshake
on the new socket inside \f(CW\*(C`IO::Socket::SSL::accept\*(C'\fR will be done in a blocking
way. To work around it you should better do an \s-1TCP\s0 accept and later upgrade the
\&\s-1TCP\s0 socket in a non-blocking way with \f(CW\*(C`start_SSL\*(C'\fR and \f(CW\*(C`accept_SSL\*(C'\fR.
.SH "SNI Support"
.IX Header "SNI Support"
Newer extensions to \s-1SSL\s0 can distinguish between multiple hostnames on the same
\&\s-1IP\s0 address using Server Name Indication (\s-1SNI\s0).
.PP
Support for \s-1SNI\s0 on the client side was added somewhere in the OpenSSL 0.9.8
series, but only with 1.0 a bug was fixed when the server could not decide about
its hostname. Therefore client side \s-1SNI\s0 is only supported with OpenSSL 1.0 or
higher in IO::Socket::SSL.
With a supported version, \s-1SNI\s0 is used automatically on the client side, if it can
determine the hostname from \f(CW\*(C`PeerAddr\*(C'\fR or \f(CW\*(C`PeerHost\*(C'\fR. On unsupported OpenSSL
versions it will silently not use \s-1SNI.\s0
The hostname can also be given explicitly given with \f(CW\*(C`SSL_hostname\*(C'\fR, but in
this case it will throw in error, if \s-1SNI\s0 is not supported.
To check for support you might call \f(CW\*(C`IO::Socket::SSL\-\*(C'\fR\fIcan_client_sni()\fR>.
.PP
On the server side earlier versions of OpenSSL are supported, but only together
with Net::SSLeay version >= 1.50.
To check for support you might call \f(CW\*(C`IO::Socket::SSL\-\*(C'\fR\fIcan_server_sni()\fR>.
If server side \s-1SNI\s0 is supported, you might specify different certificates per
host with \f(CW\*(C`SSL_cert*\*(C'\fR and \f(CW\*(C`SSL_key*\*(C'\fR, and check the requested name using
\&\f(CW\*(C`get_servername\*(C'\fR.
.SH "RETURN VALUES"
.IX Header "RETURN VALUES"
A few changes have gone into IO::Socket::SSL v0.93 and later with respect to
return values.	The behavior on success remains unchanged, but for \fIall\fR functions,
the return value on error is now an empty list.	 Therefore, the return value will be
false in all contexts, but those who have been using the return values as arguments
to subroutines (like \f(CW\*(C`mysub(IO::Socket::SSL(...)\-\*(C'\fRnew, ...)>) may run into problems.
The moral of the story: \fIalways\fR check the return values of these functions before
using them in any way that you consider meaningful.
.SH "DEBUGGING"
.IX Header "DEBUGGING"
If you are having problems using IO::Socket::SSL despite the fact that can recite backwards
the section of this documentation labelled 'Using \s-1SSL\s0', you should try enabling debugging.	To
specify the debug level, pass 'debug#' (where # is a number from 0 to 3) to IO::Socket::SSL
when calling it.
The debug level will also be propagated to Net::SSLeay::trace, see also Net::SSLeay:
.IP "use IO::Socket::SSL qw(debug0);" 4
.IX Item "use IO::Socket::SSL qw(debug0);"
No debugging (default).
.IP "use IO::Socket::SSL qw(debug1);" 4
.IX Item "use IO::Socket::SSL qw(debug1);"
Print out errors from IO::Socket::SSL and ciphers from Net::SSLeay.
.IP "use IO::Socket::SSL qw(debug2);" 4
.IX Item "use IO::Socket::SSL qw(debug2);"
Print also information about call flow from IO::Socket::SSL and progress
information from Net::SSLeay.
.IP "use IO::Socket::SSL qw(debug3);" 4
.IX Item "use IO::Socket::SSL qw(debug3);"
Print also some data dumps from IO::Socket::SSL and from Net::SSLeay.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
See the 'example' directory.
.SH "BUGS"
.IX Header "BUGS"
IO::Socket::SSL depends on Net::SSLeay.  Up to version 1.43 of Net::SSLeay
it was not thread safe, although it did probably work if you did not use
SSL_verify_callback and SSL_password_cb.
.PP
If you use IO::Socket::SSL together with threads you should load it (e.g. use or
require) inside the main thread before creating any other threads which use it.
This way it is much faster because it will be initialized only once. Also there
are reports that it might crash the other way.
.PP
Creating an IO::Socket::SSL object in one thread and closing it in another
thread will not work.
.PP
IO::Socket::SSL does not work together with Storable::fd_retrieve/fd_store.
See \s-1BUGS\s0 file for more information and how to work around the problem.
.PP
Non-blocking and timeouts (which are based on non-blocking) are not
supported on Win32, because the underlying IO::Socket::INET does not support
non-blocking on this platform.
.PP
If you have a server and it looks like you have a memory leak you might
check the size of your session cache. Default for Net::SSLeay seems to be
20480, see the example for SSL_create_ctx_callback for how to limit it.
.PP
The default for SSL_verify_mode on the client is currently \s-1SSL_VERIFY_NONE,\s0
which is a very bad idea, thus the default will change in the near future.
See documentation for SSL_verify_mode for more information.
.SH "LIMITATIONS"
.IX Header "LIMITATIONS"
IO::Socket::SSL uses Net::SSLeay as the shiny interface to OpenSSL, which is
the shiny interface to the ugliness of \s-1SSL.	\s0 As a result, you will need both Net::SSLeay
and OpenSSL on your computer before using this module.
.PP
If you have Scalar::Util (standard with Perl 5.8.0 and above) or WeakRef, IO::Socket::SSL
sockets will auto-close when they go out of scope, just like IO::Socket::INET sockets.	If
you do not have one of these modules, then IO::Socket::SSL sockets will stay open until the
program ends or you explicitly close them.	This is due to the fact that a circular reference
is required to make IO::Socket::SSL sockets act simultaneously like objects and glob references.
.SH "DEPRECATIONS"
.IX Header "DEPRECATIONS"
The following functions are deprecated and are only retained for compatibility:
.IP "\fIcontext_init()\fR" 2
.IX Item "context_init()"
use the SSL_reuse_ctx option if you want to re-use a context
.IP "\fIsocketToSSL()\fR and \fIsocket_to_SSL()\fR" 2
.IX Item "socketToSSL() and socket_to_SSL()"
use IO::Socket::SSL\->\fIstart_SSL()\fR instead
.IP "\fIkill_socket()\fR" 2
.IX Item "kill_socket()"
use \fIclose()\fR instead
.IP "\fIget_peer_certificate()\fR" 2
.IX Item "get_peer_certificate()"
use the \fIpeer_certificate()\fR function instead.
Used to return X509_Certificate with methods subject_name and issuer_name.
Now simply returns \f(CW$self\fR which has these methods (although deprecated).
.IP "\fIissuer_name()\fR" 2
.IX Item "issuer_name()"
use peer_certificate( 'issuer' ) instead
.IP "\fIsubject_name()\fR" 2
.IX Item "subject_name()"
use peer_certificate( 'subject' ) instead
.SH "SEE ALSO"
.IX Header "SEE ALSO"
IO::Socket::INET, IO::Socket::INET6, IO::Socket::IP, Net::SSLeay.
.SH "AUTHORS"
.IX Header "AUTHORS"
Steffen Ullrich, <steffen at genua.de> is the current maintainer.
.PP
Peter Behroozi, <behrooz at fas.harvard.edu> (Note the lack of an \*(L"i\*(R" at the end of \*(L"behrooz\*(R")
.PP
Marko Asplund, <marko.asplund at kronodoc.fi>, was the original author of IO::Socket::SSL.
.PP
Patches incorporated from various people, see file Changes.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
The original versions of this module are Copyright (C) 1999\-2002 Marko Asplund.
.PP
The rewrite of this module is Copyright (C) 2002\-2005 Peter Behroozi.
.PP
Versions 0.98 and newer are Copyright (C) 2006\-2013 Steffen Ullrich.
.PP
This module is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.SH "Appendix: Using SSL"
.IX Header "Appendix: Using SSL"
If you are unfamiliar with the way OpenSSL works, good references may be found in
both the book \*(L"Network Security with OpenSSL\*(R" (Oreilly & Assoc.) and the web site
<http://www.tldp.org/HOWTO/SSL\-Certificates\-HOWTO/>.  Read on for a quick overview.
.SS "The Long of It (Detail)"
.IX Subsection "The Long of It (Detail)"
The usual reason for using \s-1SSL\s0 is to keep your data safe.  This means that not only
do you have to encrypt the data while it is being transported over a network, but
you also have to make sure that the right person gets the data, e.g. you need to
authenticate the person.
To accomplish this with \s-1SSL,\s0 you have to use certificates.
A certificate closely resembles a Government-issued \s-1ID \s0(at least in places where
you can trust them). The \s-1ID\s0 contains some sort of identifying information such
as a name and address, and is usually stamped with a seal of Government
Approval. Theoretically, this means that you may trust the information on the
card and do business with the owner of the card.
The same ideas apply to \s-1SSL\s0 certificates, which have some identifying
information and are \*(L"stamped\*(R" (signed) by someone (a \s-1CA,\s0 e.g. Certificate
Authority) who you trust will adequately verify the identifying information. In
this case, because of some clever number theory, it is extremely difficult to
falsify the signing process. Another useful consequence of number theory is that
the certificate is linked to the encryption process, so you may encrypt data
(using information on the certificate) that only the certificate owner can
decrypt.
.PP
What does this mean for you?
So most common case is that at least the server has a certificate which the
client can verify, but the server may also ask back for a certificate to
authenticate the client.
To verify that a certificate is trusted, one checks if the certificate is signed
by the expected \s-1CA \s0(Certificate Authority), which often means any \s-1CA\s0 installed
on the system (IO::Socket::SSL tries to use the CAs installed on the system by
default). So if you trust the \s-1CA,\s0 trust the number theory and trust the
used algorithms you can be confident, that no-one is reading your data.
.PP
Beside the authentication using certificates there is also anonymous
authentication, which effectivly means no authentication. In this case it is
easy for somebody in between to intercept the connection, e.g. playing man in
the middle and nobody notices.
By default IO::Socket::SSL uses only ciphers which require certificates and
which are safe enough, but if you want to set your own cipher_list make sure,
that you explicitly exclude anonymous authentication. E.g. setting the cipher
list to \s-1HIGH\s0 is not enough, you should use at least \s-1HIGH:\s0!aNULL.
.SS "The Short of It (Summary)"
.IX Subsection "The Short of It (Summary)"
For servers, you will need to generate a cryptographic private key and a certificate
request.  You will need to send the certificate request to a Certificate Authority to
get a real certificate back, after which you can start serving people.	For clients,
you will not need anything unless the server wants validation, in which case you will
also need a private key and a real certificate.	 For more information about how to
get these, see <http://www.modssl.org/docs/2.8/ssl_faq.html#ToC24>.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/IO::Socket::SSL5.16.3pm                      0100644 0001750 0001750 00000121453 12566241333 024230  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "SSL 3"
.TH SSL 3 "2012-10-04" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
IO::Socket::SSL \-\- Nearly transparent SSL encapsulation for IO::Socket::INET.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&        use strict;
\&        use IO::Socket::SSL;
\&
\&        my $client = IO::Socket::SSL\->new("www.example.com:https")
\&                || warn "I encountered a problem: ".IO::Socket::SSL::errstr();
\&        $client\->verify_hostname( \*(Aqwww.example.com\*(Aq,\*(Aqhttp\*(Aq )
\&                || die "hostname verification failed";
\&
\&        print $client "GET / HTTP/1.0\er\en\er\en";
\&        print <$client>;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module is a true drop-in replacement for IO::Socket::INET that uses
\&\s-1SSL\s0 to encrypt data before it is transferred to a remote server or
client.	 IO::Socket::SSL supports all the extra features that one needs
to write a full-featured \s-1SSL\s0 client or server application: multiple \s-1SSL\s0 contexts,
cipher selection, certificate verification, and \s-1SSL\s0 version selection.	As an
extra bonus, it works perfectly with mod_perl.
.PP
If you have never used \s-1SSL\s0 before, you should read the appendix labelled 'Using \s-1SSL\s0'
before attempting to use this module.
.PP
If you have used this module before, read on, as versions 0.93 and above
have several changes from the previous IO::Socket::SSL versions (especially
see the note about return values).
.PP
If you are using non-blocking sockets read on, as version 0.98 added better
support for non-blocking.
.PP
If you are trying to use it with threads see the \s-1BUGS\s0 section.
.SH "METHODS"
.IX Header "METHODS"
IO::Socket::SSL inherits its methods from IO::Socket::INET, overriding them
as necessary.  If there is an \s-1SSL\s0 error, the method or operation will return an
empty list (false in all contexts).	 The methods that have changed from the
perspective of the user are re-documented here:
.IP "\fBnew(...)\fR" 4
.IX Item "new(...)"
Creates a new IO::Socket::SSL object.  You may use all the friendly options
that came bundled with IO::Socket::INET, plus (optionally) the ones that follow:
.RS 4
.IP "SSL_hostname" 2
.IX Item "SSL_hostname"
This can be given to specifiy the hostname used for \s-1SNI\s0, which is needed if you
have multiple \s-1SSL\s0 hostnames on the same \s-1IP\s0 address. If not given it will try to
determine hostname from PeerAddr, which will fail if only \s-1IP\s0 was given or if
this argument is used within start_SSL.
.Sp
If you want to disable \s-1SNI\s0 set this argument to ''.
.Sp
Currently only supported for the client side and will be ignored for the server
side.
.IP "SSL_version" 2
.IX Item "SSL_version"
Sets the version of the \s-1SSL\s0 protocol used to transmit data. 'SSLv23' auto-negotiates 
between SSLv2 and SSLv3, while 'SSLv2', 'SSLv3' or 'TLSv1' restrict the protocol
to the specified version. All values are case-insensitive.
.Sp
You can limit to set of supported protocols by adding !version separated by ':'.
.Sp
The default SSL_version is 'SSLv23:!SSLv2' which means, that SSLv2, SSLv3 and TLSv1 
are supported for initial protocol handshakes, but SSLv2 will not be accepted, leaving 
only SSLv3 and TLSv1. You can also use !TLSv11 and !TLSv12 to disable \s-1TLS\s0 versions
1.1 and 1.2 while allowing \s-1TLS\s0 version 1.0.
.Sp
Setting the version instead to 'TLSv1' will probably break interaction with lots of
clients which start with SSLv2 and then upgrade to TLSv1. On the other side some
clients just close the connection when they receive a \s-1TLS\s0 version 1.1 request. In this 
case setting the version to 'SSLv23:!SSLv2:!TLSv11:!TLSv12' might help.
.IP "SSL_cipher_list" 2
.IX Item "SSL_cipher_list"
If this option is set the cipher list for the connection will be set to the
given value, e.g. something like '\s-1ALL:\s0!LOW:!EXP:!ADH'. Look into the OpenSSL
documentation (<http://www.openssl.org/docs/apps/ciphers.html#CIPHER_STRINGS>)
for more details.
.Sp
If this option is not set '\s-1ALL:\s0!LOW' will be used.
To use OpenSSL builtin default (whatever this is) set it to ''.
.IP "SSL_honor_cipher_order" 2
.IX Item "SSL_honor_cipher_order"
If this option is true the cipher order the server specified is used instead
of the order proposed by the client. To mitigate \s-1BEAST\s0 attack you might use
something like
.Sp
.Vb 2
\&  SSL_honor_cipher_order => 1,
\&  SSL_cipher_list => \*(AqRC4\-SHA:ALL:!ADH:!LOW\*(Aq,
.Ve
.IP "SSL_use_cert" 2
.IX Item "SSL_use_cert"
If this is set, it forces IO::Socket::SSL to use a certificate and key, even if
you are setting up an \s-1SSL\s0 client.  If this is set to 0 (the default), then you will
only need a certificate and key if you are setting up a server.
.Sp
SSL_use_cert will implicitly be set if SSL_server is set.
For convinience it is also set if it was not given but a cert was given for use
(SSL_cert_file or similar).
.IP "SSL_server" 2
.IX Item "SSL_server"
Use this, if the socket should be used as a server.
If this is not explicitly set it is assumed, if Listen with given when creating
the socket.
.IP "SSL_key_file" 2
.IX Item "SSL_key_file"
If your \s-1RSA\s0 private key is not in default place (\fIcerts/server\-key.pem\fR for servers,
\&\fIcerts/client\-key.pem\fR for clients), then this is the option that you would use to
specify a different location.  Keys should be \s-1PEM\s0 formatted, and if they are
encrypted, you will be prompted to enter a password before the socket is formed
(unless you specified the SSL_passwd_cb option).
.IP "SSL_key" 2
.IX Item "SSL_key"
This is an EVP_PKEY* and can be used instead of SSL_key_file.
Useful if you don't have your key in a file but create it dynamically or get it from
a string (see openssl PEM_read_bio_PrivateKey etc for getting a EVP_PKEY* from
a string).
.IP "SSL_cert_file" 2
.IX Item "SSL_cert_file"
If your \s-1SSL\s0 certificate is not in the default place (\fIcerts/server\-cert.pem\fR for servers,
\&\fIcerts/client\-cert.pem\fR for clients), then you should use this option to specify the
location of your certificate.  Note that a key and certificate are only required for an
\&\s-1SSL\s0 server, so you do not need to bother with these trifling options should you be
setting up an unauthenticated client.
.IP "SSL_cert" 2
.IX Item "SSL_cert"
This is an X509* or an array of X509*.
The first X509* is the internal representation of the certificate while the following
ones are extra certificates. Useful if you create your certificate dynamically (like
in a \s-1SSL\s0 intercepting proxy) or get it from a string (see openssl PEM_read_bio_X509 etc
for getting a X509* from a string).
.IP "SSL_dh_file" 2
.IX Item "SSL_dh_file"
If you want Diffie-Hellman key exchange you need to supply a suitable file here
or use the SSL_dh parameter. See dhparam command in openssl for more information.
.IP "SSL_dh" 2
.IX Item "SSL_dh"
Like SSL_dh_file, but instead of giving a file you use a preloaded or generated DH*.
.IP "SSL_passwd_cb" 2
.IX Item "SSL_passwd_cb"
If your private key is encrypted, you might not want the default password prompt from
Net::SSLeay.  This option takes a reference to a subroutine that should return the
password required to decrypt your private key.
.IP "SSL_ca_file" 2
.IX Item "SSL_ca_file"
If you want to verify that the peer certificate has been signed by a reputable
certificate authority, then you should use this option to locate the file
containing the certificate(s) of the reputable certificate authorities if it is
not already in the file \fIcerts/my\-ca.pem\fR.
If you definitly want no SSL_ca_file used you should set it to undef.
.IP "SSL_ca_path" 2
.IX Item "SSL_ca_path"
If you are unusually friendly with the OpenSSL documentation, you might have set
yourself up a directory containing several trusted certificates as separate files
as well as an index of the certificates.  If you want to use that directory for
validation purposes, and that directory is not \fIca/\fR, then use this option to
point IO::Socket::SSL to the right place to look.
If you definitly want no SSL_ca_path used you should set it to undef.
.IP "SSL_verify_mode" 2
.IX Item "SSL_verify_mode"
This option sets the verification mode for the peer certificate.  The default
(0x00) does no authentication.	You may combine 0x01 (verify peer), 0x02 (fail
verification if no peer certificate exists; ignored for clients), and 0x04
(verify client once) to change the default.
.Sp
See OpenSSL man page for SSL_CTX_set_verify for more information.
.IP "SSL_verify_callback" 2
.IX Item "SSL_verify_callback"
If you want to verify certificates yourself, you can pass a sub reference along
with this parameter to do so.  When the callback is called, it will be passed:
.RS 2
.IP "1. a true/false value that indicates what OpenSSL thinks of the certificate," 4
.IX Item "1. a true/false value that indicates what OpenSSL thinks of the certificate,"
.PD 0
.IP "2. a C\-style memory address of the certificate store," 4
.IX Item "2. a C-style memory address of the certificate store,"
.IP "3. a string containing the certificate's issuer attributes and owner attributes, and" 4
.IX Item "3. a string containing the certificate's issuer attributes and owner attributes, and"
.IP "4. a string containing any errors encountered (0 if no errors)." 4
.IX Item "4. a string containing any errors encountered (0 if no errors)."
.IP "5. a C\-style memory address of the peer's own certificate (convertible to \s-1PEM\s0 form with \fINet::SSLeay::PEM_get_string_X509()\fR)." 4
.IX Item "5. a C-style memory address of the peer's own certificate (convertible to PEM form with Net::SSLeay::PEM_get_string_X509())."
.RE
.RS 2
.PD
.Sp
The function should return 1 or 0, depending on whether it thinks the certificate
is valid or invalid.  The default is to let OpenSSL do all of the busy work.
.Sp
The callback will be called for each element in the certificate chain.
.Sp
See the OpenSSL documentation for SSL_CTX_set_verify for more information.
.RE
.IP "SSL_verifycn_scheme" 2
.IX Item "SSL_verifycn_scheme"
Set the scheme used to automatically verify the hostname of the peer.
See the information about the verification schemes in \fBverify_hostname\fR.
.Sp
The default is undef, e.g. to not automatically verify the hostname.
If no verification is done the other \fBSSL_verifycn_*\fR options have
no effect, but you might still do manual verification by calling
\&\fBverify_hostname\fR.
.IP "SSL_verifycn_name" 2
.IX Item "SSL_verifycn_name"
Set the name which is used in verification of hostname. If SSL_verifycn_scheme
is set and no SSL_verifycn_name is given it will try to use the PeerHost and
PeerAddr settings and fail if no name can be determined.
.Sp
Using PeerHost or PeerAddr works only if you create the connection directly
with \f(CW\*(C`IO::Socket::SSL\->new\*(C'\fR, if an IO::Socket::INET object is upgraded
with \fBstart_SSL\fR the name has to be given in \fBSSL_verifycn_name\fR.
.IP "SSL_check_crl" 2
.IX Item "SSL_check_crl"
If you want to verify that the peer certificate has not been revoked
by the signing authority, set this value to true. OpenSSL will search
for the \s-1CRL\s0 in your SSL_ca_path, or use the file specified by
SSL_crl_file.  See the Net::SSLeay documentation for more details.
Note that this functionality appears to be broken with OpenSSL <
v0.9.7b, so its use with lower versions will result in an error.
.IP "SSL_crl_file" 2
.IX Item "SSL_crl_file"
If you want to specify the \s-1CRL\s0 file to be used, set this value to the
pathname to be used.  This must be used in addition to setting
SSL_check_crl.
.IP "SSL_reuse_ctx" 2
.IX Item "SSL_reuse_ctx"
If you have already set the above options (SSL_version through SSL_check_crl;
this does not include SSL_cipher_list yet) for a previous instance of
IO::Socket::SSL, then you can reuse the \s-1SSL\s0 context of that instance by passing
it as the value for the SSL_reuse_ctx parameter.  You may also create a
new instance of the IO::Socket::SSL::SSL_Context class, using any context options
that you desire without specifying connection options, and pass that here instead.
.Sp
If you use this option, all other context-related options that you pass
in the same call to \fInew()\fR will be ignored unless the context supplied was invalid.
Note that, contrary to versions of IO::Socket::SSL below v0.90, a global \s-1SSL\s0 context
will not be implicitly used unless you use the \fIset_default_context()\fR function.
.IP "SSL_create_ctx_callback" 2
.IX Item "SSL_create_ctx_callback"
With this callback you can make individual settings to the context after it
got created and the default setup was done.
The callback will be called with the \s-1CTX\s0 object from Net::SSLeay as the single
argument.
.Sp
Example for limiting the server session cache size:
.Sp
.Vb 4
\&  SSL_create_ctx_callback => sub { 
\&      my $ctx = shift;
\&          Net::SSLeay::CTX_sess_set_cache_size($ctx,128);
\&  }
.Ve
.IP "SSL_session_cache_size" 2
.IX Item "SSL_session_cache_size"
If you make repeated connections to the same host/port and the \s-1SSL\s0 renegotiation time
is an issue, you can turn on client-side session caching with this option by specifying a
positive cache size.  For successive connections, pass the SSL_reuse_ctx option to
the \fInew()\fR calls (or use \fIset_default_context()\fR) to make use of the cached sessions.
The session cache size refers to the number of unique host/port pairs that can be
stored at one time; the oldest sessions in the cache will be removed if new ones are
added.
.Sp
This option does not effect the session cache a server has for it's clients, e.g. it
does not affect \s-1SSL\s0 objects with SSL_server set.
.IP "SSL_session_cache" 2
.IX Item "SSL_session_cache"
Specifies session cache object which should be used instead of creating a new.
Overrules SSL_session_cache_size.
This option is useful if you want to reuse the cache, but not the rest of
the context.
.Sp
A session cache object can be created using
\&\f(CW\*(C`IO::Socket::SSL::Session_Cache\->new( cachesize )\*(C'\fR.
.Sp
Use \fIset_default_session_cache()\fR to set a global cache object.
.IP "SSL_session_id_context" 2
.IX Item "SSL_session_id_context"
This gives an id for the servers session cache. It's necessary if you want
clients to connect with a client certificate. If not given but SSL_verify_mode
specifies the need for client certificate a context unique id will be picked.
.IP "SSL_error_trap" 2
.IX Item "SSL_error_trap"
When using the \fIaccept()\fR or \fIconnect()\fR methods, it may be the case that the
actual socket connection works but the \s-1SSL\s0 negotiation fails, as in the case of
an \s-1HTTP\s0 client connecting to an \s-1HTTPS\s0 server.  Passing a subroutine ref attached
to this parameter allows you to gain control of the orphaned socket instead of having it
be closed forcibly.	 The subroutine, if called, will be passed two parameters:
a reference to the socket on which the \s-1SSL\s0 negotiation failed and and the full
text of the error message.
.IP "SSL_npn_protocols" 2
.IX Item "SSL_npn_protocols"
If used on the server side it specifies list of protocols advertised by \s-1SSL\s0
server as an array ref, e.g. ['spdy/2','http1.1']. 
On the client side it specifies the protocols offered by the client for \s-1NPN\s0
as an array ref.
See also method next_proto_negotiated.
.Sp
Next Protocol Negotioation (\s-1NPN\s0) is available with Net::SSLeay 1.46+ and openssl\-1.0.1+.
.RE
.RS 4
.RE
.IP "\fBclose(...)\fR" 4
.IX Item "close(...)"
There are a number of nasty traps that lie in wait if you are not careful about using
\&\fIclose()\fR.  The first of these will bite you if you have been using \fIshutdown()\fR on your
sockets.  Since the \s-1SSL\s0 protocol mandates that a \s-1SSL\s0 \*(L"close notify\*(R" message be
sent before the socket is closed, a \fIshutdown()\fR that closes the socket's write channel
will cause the \fIclose()\fR call to hang.  For a similar reason, if you try to close a
copy of a socket (as in a forking server) you will affect the original socket as well.
To get around these problems, call close with an object-oriented syntax
(e.g. \f(CW$socket\fR\->close(SSL_no_shutdown => 1))
and one or more of the following parameters:
.RS 4
.IP "SSL_no_shutdown" 2
.IX Item "SSL_no_shutdown"
If set to a true value, this option will make \fIclose()\fR not use the \fISSL_shutdown()\fR call
on the socket in question so that the close operation can complete without problems
if you have used \fIshutdown()\fR or are working on a copy of a socket.
.IP "SSL_fast_shutdown" 2
.IX Item "SSL_fast_shutdown"
If set to true only a unidirectional shutdown will be done, e.g. only the
close_notify (see \fISSL_shutdown\fR\|(3)) will be called. Otherwise a bidrectional
shutdown will be done. If used within \fIclose()\fR it defaults to true, if used
within \fIstop_SSL()\fR it defaults to false.
.IP "SSL_ctx_free" 2
.IX Item "SSL_ctx_free"
If you want to make sure that the \s-1SSL\s0 context of the socket is destroyed when
you close it, set this option to a true value.
.RE
.RS 4
.RE
.IP "\fBpeek(...)\fR" 4
.IX Item "peek(...)"
This function has exactly the same syntax as \fIsysread()\fR, and performs nearly the same
task (reading data from the socket) but will not advance the read position so
that successive calls to \fIpeek()\fR with the same arguments will return the same results.
This function requires OpenSSL 0.9.6a or later to work.
.IP "\fB\f(BIpending()\fB\fR" 4
.IX Item "pending()"
This function will let you know how many bytes of data are immediately ready for reading
from the socket.  This is especially handy if you are doing reads on a blocking socket
or just want to know if new data has been sent over the socket.
.IP "\fB\f(BIget_cipher()\fB\fR" 4
.IX Item "get_cipher()"
Returns the string form of the cipher that the IO::Socket::SSL object is using.
.IP "\fB\f(BIdump_peer_certificate()\fB\fR" 4
.IX Item "dump_peer_certificate()"
Returns a parsable string with select fields from the peer \s-1SSL\s0 certificate.	 This
method directly returns the result of the \fIdump_peer_certificate()\fR method of Net::SSLeay.
.IP "\fBpeer_certificate($field)\fR" 4
.IX Item "peer_certificate($field)"
If a peer certificate exists, this function can retrieve values from it.
If no field is given the internal representation of certificate from Net::SSLeay is
returned.
The following fields can be queried:
.RS 4
.IP "authority (alias issuer)" 8
.IX Item "authority (alias issuer)"
The certificate authority which signed the certificate.
.IP "owner (alias subject)" 8
.IX Item "owner (alias subject)"
The owner of the certificate.
.IP "commonName (alias cn) \- only for Net::SSLeay version >=1.30" 8
.IX Item "commonName (alias cn) - only for Net::SSLeay version >=1.30"
The common name, usually the server name for \s-1SSL\s0 certificates.
.IP "subjectAltNames \- only for Net::SSLeay version >=1.33" 8
.IX Item "subjectAltNames - only for Net::SSLeay version >=1.33"
Alternative names for the subject, usually different names for the same
server, like example.org, example.com, *.example.com.
.Sp
It returns a list of (typ,value) with typ \s-1GEN_DNS\s0, \s-1GEN_IPADD\s0 etc (these
constants are exported from IO::Socket::SSL).
See Net::SSLeay::X509_get_subjectAltNames.
.RE
.RS 4
.RE
.IP "\fBverify_hostname($hostname,$scheme)\fR" 4
.IX Item "verify_hostname($hostname,$scheme)"
This verifies the given hostname against the peer certificate using the
given scheme. Hostname is usually what you specify within the PeerAddr.
.Sp
Verification of hostname against a certificate is different between various
applications and RFCs. Some scheme allow wildcards for hostnames, some only
in subjectAltNames, and even their different wildcard schemes are possible.
.Sp
To ease the verification the following schemes are predefined:
.RS 4
.IP "ldap (rfc4513), pop3,imap,acap (rfc2995), nntp (rfc4642)" 8
.IX Item "ldap (rfc4513), pop3,imap,acap (rfc2995), nntp (rfc4642)"
Simple wildcards in subjectAltNames are possible, e.g. *.example.org matches
www.example.org but not lala.www.example.org. If nothing from subjectAltNames
match it checks against the common name, but there are no wildcards allowed.
.IP "http (rfc2818), alias is www" 8
.IX Item "http (rfc2818), alias is www"
Extended wildcards in subjectAltNames and common name are possible, e.g. 
*.example.org or even www*.example.org. The common
name will be only checked if no names are given in subjectAltNames.
.IP "smtp (rfc3207)" 8
.IX Item "smtp (rfc3207)"
This \s-1RFC\s0 doesn't say much useful about the verification so it just assumes
that subjectAltNames are possible, but no wildcards are possible anywhere.
.IP "none" 8
.IX Item "none"
No verification will be done.
Actually is does not make any sense to call verify_hostname in this case.
.RE
.RS 4
.Sp
The scheme can be given either by specifying the name for one of the above predefined
schemes, or by using a hash which can have the following keys and values:
.IP "check_cn:  0|'always'|'when_only'" 8
.IX Item "check_cn:  0|'always'|'when_only'"
Determines if the common name gets checked. If 'always' it will always be checked
(like in ldap), if 'when_only' it will only be checked if no names are given in
subjectAltNames (like in http), for any other values the common name will not be checked.
.IP "wildcards_in_alt: 0|'leftmost'|'anywhere'" 8
.IX Item "wildcards_in_alt: 0|'leftmost'|'anywhere'"
Determines if and where wildcards in subjectAltNames are possible. If 'leftmost'
only cases like *.example.org will be possible (like in ldap), for 'anywhere'
www*.example.org is possible too (like http), dangerous things like but www.*.org
or even '*' will not be allowed.
.IP "wildcards_in_cn: 0|'leftmost'|'anywhere'" 8
.IX Item "wildcards_in_cn: 0|'leftmost'|'anywhere'"
Similar to wildcards_in_alt, but checks the common name. There is no predefined
scheme which allows wildcards in common names.
.IP "callback: \e&coderef" 8
.IX Item "callback: &coderef"
If you give a subroutine for verification it will be called with the arguments
($hostname,$commonName,@subjectAltNames), where hostname is the name given for
verification, commonName is the result from peer_certificate('cn') and
subjectAltNames is the result from peer_certificate('subjectAltNames').
.Sp
All other arguments for the verification scheme will be ignored in this case.
.RE
.RS 4
.RE
.IP "\fB\f(BInext_proto_negotiated()\fB\fR" 4
.IX Item "next_proto_negotiated()"
This method returns the name of negotiated protocol \- e.g. 'http/1.1'. It works
for both client and server side of \s-1SSL\s0 connection.
.Sp
\&\s-1NPN\s0 support is available with Net::SSLeay 1.46+ and openssl\-1.0.1+.
.IP "\fB\f(BIerrstr()\fB\fR" 4
.IX Item "errstr()"
Returns the last error (in string form) that occurred.	If you do not have a real
object to perform this method on, call \fIIO::Socket::SSL::errstr()\fR instead.
.Sp
For read and write errors on non-blocking sockets, this method may include the string
\&\f(CW\*(C`SSL wants a read first!\*(C'\fR or \f(CW\*(C`SSL wants a write first!\*(C'\fR meaning that the other side
is expecting to read from or write to the socket and wants to be satisfied before you
get to do anything. But with version 0.98 you are better comparing the global exported
variable \f(CW$SSL_ERROR\fR against the exported symbols \s-1SSL_WANT_READ\s0 and \s-1SSL_WANT_WRITE\s0.
.IP "\fB\f(BIopened()\fB\fR" 4
.IX Item "opened()"
This returns false if the socket could not be opened, 1 if the socket could be opened
and the \s-1SSL\s0 handshake was successful done and \-1 if the underlying IO::Handle is open,
but the \s-1SSL\s0 handshake failed.
.IP "\fBIO::Socket::SSL\->start_SSL($socket, ... )\fR" 4
.IX Item "IO::Socket::SSL->start_SSL($socket, ... )"
This will convert a glob reference or a socket that you provide to an IO::Socket::SSL
object.	 You may also pass parameters to specify context or connection options as with
a call to \fInew()\fR.  If you are using this function on an \fIaccept()\fRed socket, you must
set the parameter \*(L"SSL_server\*(R" to 1, i.e. IO::Socket::SSL\->start_SSL($socket, SSL_server => 1).
If you have a class that inherits from IO::Socket::SSL and you want the \f(CW$socket\fR to be blessed
into your own class instead, use MyClass\->start_SSL($socket) to achieve the desired effect.
.Sp
Note that if \fIstart_SSL()\fR fails in \s-1SSL\s0 negotiation, \f(CW$socket\fR will remain blessed in its
original class.	 For non-blocking sockets you better just upgrade the socket to
IO::Socket::SSL and call accept_SSL or connect_SSL and the upgraded object. To
just upgrade the socket set \fBSSL_startHandshake\fR explicitly to 0. If you call start_SSL
w/o this parameter it will revert to blocking behavior for accept_SSL and connect_SSL.
.Sp
If given the parameter \*(L"Timeout\*(R" it will stop if after the timeout no \s-1SSL\s0 connection
was established. This parameter is only used for blocking sockets, if it is not given the
default Timeout from the underlying IO::Socket will be used.
.IP "\fBstop_SSL(...)\fR" 4
.IX Item "stop_SSL(...)"
This is the opposite of \fIstart_SSL()\fR, e.g. it will shutdown the \s-1SSL\s0 connection
and return to the class before \fIstart_SSL()\fR. It gets the same arguments as \fIclose()\fR,
in fact \fIclose()\fR calls \fIstop_SSL()\fR (but without downgrading the class).
.Sp
Will return true if it suceeded and undef if failed. This might be the case for
non-blocking sockets. In this case $! is set to \s-1EAGAIN\s0 and the ssl error to
\&\s-1SSL_WANT_READ\s0 or \s-1SSL_WANT_WRITE\s0. In this case the call should be retried again with
the same arguments once the socket is ready is until it succeeds.
.IP "\fBIO::Socket::SSL\->new_from_fd($fd, ...)\fR" 4
.IX Item "IO::Socket::SSL->new_from_fd($fd, ...)"
This will convert a socket identified via a file descriptor into an \s-1SSL\s0 socket.
Note that the argument list does not include a \*(L"\s-1MODE\s0\*(R" argument; if you supply one,
it will be thoughtfully ignored (for compatibility with IO::Socket::INET).	Instead,
a mode of '+<' is assumed, and the file descriptor passed must be able to handle such
I/O because the initial \s-1SSL\s0 handshake requires bidirectional communication.
.IP "\fBIO::Socket::SSL::set_default_context(...)\fR" 4
.IX Item "IO::Socket::SSL::set_default_context(...)"
You may use this to make IO::Socket::SSL automatically re-use a given context (unless
specifically overridden in a call to \fInew()\fR).  It accepts one argument, which should
be either an IO::Socket::SSL object or an IO::Socket::SSL::SSL_Context object.	See
the SSL_reuse_ctx option of \fInew()\fR for more details.	 Note that this sets the default
context globally, so use with caution (esp. in mod_perl scripts).
.IP "\fBIO::Socket::SSL::set_default_session_cache(...)\fR" 4
.IX Item "IO::Socket::SSL::set_default_session_cache(...)"
You may use this to make IO::Socket::SSL automatically re-use a given session cache
(unless specifically overridden in a call to \fInew()\fR).  It accepts one argument, which should
be an IO::Socket::SSL::Session_Cache object or similar (e.g something which implements
get_session and add_session like IO::Socket::SSL::Session_Cache does).
See the SSL_session_cache option of \fInew()\fR for more details.	 Note that this sets the default
cache globally, so use with caution.
.IP "\fBIO::Socket::SSL::set_ctx_defaults(%args)\fR" 4
.IX Item "IO::Socket::SSL::set_ctx_defaults(%args)"
With this function one can set defaults for all SSL_* parameter used for creation of
the context, like the SSL_verify* parameter.
.RS 4
.IP "mode \- set default SSL_verify_mode" 8
.IX Item "mode - set default SSL_verify_mode"
.PD 0
.IP "callback \- set default SSL_verify_callback" 8
.IX Item "callback - set default SSL_verify_callback"
.IP "scheme \- set default SSL_verifycn_scheme" 8
.IX Item "scheme - set default SSL_verifycn_scheme"
.IP "name \- set default SSL_verifycn_name" 8
.IX Item "name - set default SSL_verifycn_name"
.PD
If not given and scheme is hash reference with key callback it will be set to 'unknown'
.RE
.RS 4
.RE
.PP
The following methods are unsupported (not to mention futile!) and IO::Socket::SSL
will emit a large \s-1\fICROAK\s0()\fR if you are silly enough to use them:
.IP "truncate" 4
.IX Item "truncate"
.PD 0
.IP "stat" 4
.IX Item "stat"
.IP "ungetc" 4
.IX Item "ungetc"
.IP "setbuf" 4
.IX Item "setbuf"
.IP "setvbuf" 4
.IX Item "setvbuf"
.IP "fdopen" 4
.IX Item "fdopen"
.IP "send/recv" 4
.IX Item "send/recv"
.PD
Note that \fIsend()\fR and \fIrecv()\fR cannot be reliably trapped by a tied filehandle (such as
that used by IO::Socket::SSL) and so may send unencrypted data over the socket.	 Object-oriented
calls to these functions will fail, telling you to use the print/printf/syswrite
and read/sysread families instead.
.SH "IPv6"
.IX Header "IPv6"
Support for IPv6 with IO::Socket::SSL is expected to work and basic testing is done.
If IO::Socket::INET6 is available it will automatically use it instead of
IO::Socket::INET4.
.PP
Please be aware of the associated problems: If you give a name as a host and the
host resolves to both IPv6 and IPv4 it will try IPv6 first and if there is no IPv6
connectivity it will fail.
.PP
To avoid these problems you can either force IPv4 by specifying and \s-1AF_INET\s0 as the
Domain (this is per socket) or load IO::Socket::SSL with the option 'inet4'
(This is a global setting, e.g. affects all IO::Socket::SSL objects in the program).
.SH "RETURN VALUES"
.IX Header "RETURN VALUES"
A few changes have gone into IO::Socket::SSL v0.93 and later with respect to
return values.	The behavior on success remains unchanged, but for \fIall\fR functions,
the return value on error is now an empty list.	 Therefore, the return value will be
false in all contexts, but those who have been using the return values as arguments
to subroutines (like \f(CW\*(C`mysub(IO::Socket::SSL(...)\-\*(C'\fRnew, ...)>) may run into problems.
The moral of the story: \fIalways\fR check the return values of these functions before
using them in any way that you consider meaningful.
.SH "DEBUGGING"
.IX Header "DEBUGGING"
If you are having problems using IO::Socket::SSL despite the fact that can recite backwards
the section of this documentation labelled 'Using \s-1SSL\s0', you should try enabling debugging.	To
specify the debug level, pass 'debug#' (where # is a number from 0 to 3) to IO::Socket::SSL
when calling it.
The debug level will also be propagated to Net::SSLeay::trace, see also Net::SSLeay:
.IP "use IO::Socket::SSL qw(debug0);" 4
.IX Item "use IO::Socket::SSL qw(debug0);"
No debugging (default).
.IP "use IO::Socket::SSL qw(debug1);" 4
.IX Item "use IO::Socket::SSL qw(debug1);"
Print out errors from IO::Socket::SSL and ciphers from Net::SSLeay.
.IP "use IO::Socket::SSL qw(debug2);" 4
.IX Item "use IO::Socket::SSL qw(debug2);"
Print also information about call flow from IO::Socket::SSL and progress
information from Net::SSLeay.
.IP "use IO::Socket::SSL qw(debug3);" 4
.IX Item "use IO::Socket::SSL qw(debug3);"
Print also some data dumps from IO::Socket::SSL and from Net::SSLeay.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
See the 'example' directory.
.SH "BUGS"
.IX Header "BUGS"
IO::Socket::SSL depends on Net::SSLeay.  Up to version 1.43 of Net::SSLeay
it was not thread safe, although it did probably work if you did not use 
SSL_verify_callback and SSL_password_cb.
.PP
Creating an IO::Socket::SSL object in one thread and closing it in another
thread will not work.
.PP
IO::Socket::SSL does not work together with Storable::fd_retrieve/fd_store.
See \s-1BUGS\s0 file for more information and how to work around the problem.
.PP
Non-blocking and timeouts (which are based on non-blocking) are not
supported on Win32, because the underlying IO::Socket::INET does not support
non-blocking on this platform.
.PP
If you have a server and it looks like you have a memory leak you might 
check the size of your session cache. Default for Net::SSLeay seems to be 
20480, see the example for SSL_create_ctx_callback for how to limit it.
.SH "LIMITATIONS"
.IX Header "LIMITATIONS"
IO::Socket::SSL uses Net::SSLeay as the shiny interface to OpenSSL, which is
the shiny interface to the ugliness of \s-1SSL\s0.	 As a result, you will need both Net::SSLeay
and OpenSSL on your computer before using this module.
.PP
If you have Scalar::Util (standard with Perl 5.8.0 and above) or WeakRef, IO::Socket::SSL
sockets will auto-close when they go out of scope, just like IO::Socket::INET sockets.	If
you do not have one of these modules, then IO::Socket::SSL sockets will stay open until the
program ends or you explicitly close them.	This is due to the fact that a circular reference
is required to make IO::Socket::SSL sockets act simultaneously like objects and glob references.
.SH "DEPRECATIONS"
.IX Header "DEPRECATIONS"
The following functions are deprecated and are only retained for compatibility:
.IP "\fIcontext_init()\fR" 2
.IX Item "context_init()"
use the SSL_reuse_ctx option if you want to re-use a context
.IP "\fIsocketToSSL()\fR and \fIsocket_to_SSL()\fR" 2
.IX Item "socketToSSL() and socket_to_SSL()"
use IO::Socket::SSL\->\fIstart_SSL()\fR instead
.IP "\fIkill_socket()\fR" 2
.IX Item "kill_socket()"
use \fIclose()\fR instead
.IP "\fIget_peer_certificate()\fR" 2
.IX Item "get_peer_certificate()"
use the \fIpeer_certificate()\fR function instead.
Used to return X509_Certificate with methods subject_name and issuer_name.
Now simply returns \f(CW$self\fR which has these methods (although depreceated).
.IP "\fIissuer_name()\fR" 2
.IX Item "issuer_name()"
use peer_certificate( 'issuer' ) instead
.IP "\fIsubject_name()\fR" 2
.IX Item "subject_name()"
use peer_certificate( 'subject' ) instead
.PP
The following classes have been removed:
.IP "\s-1SSL_SSL\s0" 2
.IX Item "SSL_SSL"
(not that you should have been directly accessing this anyway):
.IP "X509_Certificate" 2
.IX Item "X509_Certificate"
(but \fIget_peer_certificate()\fR will still Do The Right Thing)
.SH "SEE ALSO"
.IX Header "SEE ALSO"
IO::Socket::INET, IO::Socket::INET6, Net::SSLeay.
.SH "AUTHORS"
.IX Header "AUTHORS"
Steffen Ullrich, <steffen at genua.de> is the current maintainer.
.PP
Peter Behroozi, <behrooz at fas.harvard.edu> (Note the lack of an \*(L"i\*(R" at the end of \*(L"behrooz\*(R")
.PP
Marko Asplund, <marko.asplund at kronodoc.fi>, was the original author of IO::Socket::SSL.
.PP
Patches incorporated from various people, see file Changes.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Working support for non-blocking was added by Steffen Ullrich.
.PP
The rewrite of this module is Copyright (C) 2002\-2005 Peter Behroozi.
.PP
The original versions of this module are Copyright (C) 1999\-2002 Marko Asplund.
.PP
This module is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.SH "Appendix: Using SSL"
.IX Header "Appendix: Using SSL"
If you are unfamiliar with the way OpenSSL works, good references may be found in
both the book \*(L"Network Security with OpenSSL\*(R" (Oreilly & Assoc.) and the web site
http://www.tldp.org/HOWTO/SSL\-Certificates\-HOWTO/ <http://www.tldp.org/HOWTO/SSL-Certificates-HOWTO/>.  Read on for a quick overview.
.SS "The Long of It (Detail)"
.IX Subsection "The Long of It (Detail)"
The usual reason for using \s-1SSL\s0 is to keep your data safe.  This means that not only
do you have to encrypt the data while it is being transported over a network, but
you also have to make sure that the right person gets the data.	 To accomplish this
with \s-1SSL\s0, you have to use certificates.	 A certificate closely resembles a
Government-issued \s-1ID\s0 (at least in places where you can trust them).	 The \s-1ID\s0 contains some sort of
identifying information such as a name and address, and is usually stamped with a seal
of Government Approval.	 Theoretically, this means that you may trust the information on
the card and do business with the owner of the card.  The same ideas apply to \s-1SSL\s0 certificates,
which have some identifying information and are \*(L"stamped\*(R" [most people refer to this as
\&\fIsigning\fR instead] by someone (a Certificate Authority) who you trust will adequately
verify the identifying information.	 In this case, because of some clever number theory,
it is extremely difficult to falsify the stamping process.	Another useful consequence
of number theory is that the certificate is linked to the encryption process, so you may
encrypt data (using information on the certificate) that only the certificate owner can
decrypt.
.PP
What does this mean for you?  It means that at least one person in the party has to
have an \s-1ID\s0 to get drinks :\-).  Seriously, it means that one of the people communicating
has to have a certificate to ensure that your data is safe.	 For client/server
interactions, the server must \fBalways\fR have a certificate.	 If the server wants to
verify that the client is safe, then the client must also have a personal certificate.
To verify that a certificate is safe, one compares the stamped \*(L"seal\*(R" [commonly called
an \fIencrypted digest/hash/signature\fR] on the certificate with the official \*(L"seal\*(R" of
the Certificate Authority to make sure that they are the same.	To do this, you will
need the [unfortunately named] certificate of the Certificate Authority.  With all these
in hand, you can set up a \s-1SSL\s0 connection and be reasonably confident that no-one is
reading your data.
.SS "The Short of It (Summary)"
.IX Subsection "The Short of It (Summary)"
For servers, you will need to generate a cryptographic private key and a certificate
request.  You will need to send the certificate request to a Certificate Authority to
get a real certificate back, after which you can start serving people.	For clients,
you will not need anything unless the server wants validation, in which case you will
also need a private key and a real certificate.	 For more information about how to
get these, see <http://www.modssl.org/docs/2.8/ssl_faq.html#ToC24>.
                                                                                                                                                                                                                     osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/IO::Socket::SSL5.18.3pm                      0100644 0001750 0001750 00000170037 12566241332 024233  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "IO::Socket::SSL 3"
.TH IO::Socket::SSL 3 "2015-08-22" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
IO::Socket::SSL \-\- SSL sockets with IO::Socket interface
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    use strict;
\&    use IO::Socket::SSL;
\&
\&    # simple HTTP client \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&    my $client = IO::Socket::SSL\->new(
\&        # where to connect
\&        PeerHost => "www.example.com",
\&        PeerPort => "https",
\&
\&        # certificate verification
\&        SSL_verify_mode => SSL_VERIFY_PEER,
\&        SSL_ca_path => \*(Aq/etc/ssl/certs\*(Aq, # typical CA path on Linux
\&        # on OpenBSD instead: SSL_ca_file => \*(Aq/etc/ssl/cert.pem\*(Aq
\&
\&        # easy hostname verification
\&        SSL_verifycn_name => \*(Aqfoo.bar\*(Aq, # defaults to PeerHost
\&        SSL_verifycn_scheme => \*(Aqhttp\*(Aq,
\&
\&        # SNI support
\&        SSL_hostname => \*(Aqfoo.bar\*(Aq, # defaults to PeerHost
\&
\&    ) or die "failed connect or ssl handshake: $!,$SSL_ERROR";
\&
\&    # send and receive over SSL connection
\&    print $client "GET / HTTP/1.0\er\en\er\en";
\&    print <$client>;
\&
\&    # simple server \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&    my $server = IO::Socket::SSL\->new(
\&        # where to listen
\&        LocalAddr => \*(Aq127.0.0.1\*(Aq,
\&        LocalPort => 8080,
\&        Listen => 10,
\&
\&        # which certificate to offer
\&        # with SNI support there can be different certificates per hostname
\&        SSL_cert_file => \*(Aqcert.pem\*(Aq,
\&        SSL_key_file => \*(Aqkey.pem\*(Aq,
\&    ) or die "failed to listen: $!";
\&
\&    # accept client
\&    my $client = $server\->accept or die
\&        "failed to accept or ssl handshake: $!,$SSL_ERROR";
\&
\&    # Upgrade existing socket to SSL \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&    my $sock = IO::Socket::INET\->new(\*(Aqimap.example.com:imap\*(Aq);
\&    # ... receive greeting, send STARTTLS, receive ok ...
\&    IO::Socket::SSL\->start_SSL($sock,
\&        SSL_verify_mode => SSL_VERIFY_PEER,
\&        SSL_ca_path => \*(Aq/etc/ssl/certs\*(Aq,
\&        ...
\&    ) or die "failed to upgrade to SSL: $SSL_ERROR";
\&
\&    # manual name verification, could also be done in start_SSL with
\&    # SSL_verifycn_name etc
\&    $client\->verify_hostname( \*(Aqimap.example.com\*(Aq,\*(Aqimap\*(Aq )
\&        or die "hostname verification failed";
\&
\&    # all data are now SSL encrypted
\&    print $sock ....
\&
\&    # use non\-blocking socket (BEWARE OF SELECT!) \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&    my $cl = IO::Socket::SSL\->new($dst);
\&    $cl\->blocking(0);
\&    my $sel = IO::Select\->new($cl);
\&    while (1) {
\&        # with SSL a call for reading n bytes does not result in reading of n
\&        # bytes from the socket, but instead it must read at least one full SSL
\&        # frame. If the socket has no new bytes, but there are unprocessed data
\&        # from the SSL frame can_read will block!
\&
\&        # wait for data on socket
\&        $sel\->can_read();
\&
\&        # new data on socket or eof
\&        READ:
\&        # this does not read only 1 byte from socket, but reads the complete SSL
\&        # frame and then just returns one byte. On subsequent calls it than
\&        # returns more byte of the same SSL frame until it needs to read the
\&        # next frame.
\&        my $n = sysread( $cl,my $buf,1);
\&        if ( ! defined $n ) {
\&            die $! if not ${EAGAIN};
\&            next if $SSL_ERROR == SSL_WANT_READ;
\&            if ( $SSL_ERROR == SSL_WANT_WRITE ) {
\&                # need to write data on renegotiation
\&                $sel\->can_write;
\&                next;
\&            }
\&            die "something went wrong: $SSL_ERROR";
\&        } elsif ( ! $n ) {
\&            last; # eof
\&        } else {
\&            # read next bytes
\&            # we might have still data within the current SSL frame
\&            # thus first process these data instead of waiting on the underlying
\&            # socket object
\&            goto READ if $self\->pending;  # goto sysread
\&            next;                         # goto $sel\->can_read
\&        }
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides an interface to \s-1SSL\s0 sockets, similar to other IO::Socket
modules. Because of that, it can be used to make existing programs using
IO::Socket::INET or similar modules to provide \s-1SSL\s0 encryption without much
effort.
IO::Socket::SSL supports all the extra features that one needs to write a
full-featured \s-1SSL\s0 client or server application: multiple \s-1SSL\s0 contexts, cipher
selection, certificate verification, Server Name Indication (\s-1SNI\s0), Next
Protocol Negotiation (\s-1NPN\s0), \s-1SSL\s0 version selection and more.
.PP
If you have never used \s-1SSL\s0 before, you should read the section 'Using \s-1SSL\s0'
before attempting to use this module.
.PP
If you used IO::Socket before you should read the following section
\&'Differences to IO::Socket'.
.PP
If you want to use \s-1SSL\s0 with non-blocking sockets and/or within an event loop
please read very carefully the sections about non-blocking I/O and polling of \s-1SSL\s0
sockets.
.PP
If you are trying to use it with threads see the \s-1BUGS\s0 section.
.SS "Differences to IO::Socket"
.IX Subsection "Differences to IO::Socket"
Although IO::Socket::SSL tries to behave similar to IO::Socket there are
some important differences due to the way \s-1SSL\s0 works:
.IP "\(bu" 4
buffered input
.Sp
Data are transmitted inside the \s-1SSL\s0 protocol using encrypted frames, which can
only be decrypted once the full frame is received. So if you use \f(CW\*(C`read\*(C'\fR or
\&\f(CW\*(C`sysread\*(C'\fR to receive less data than the \s-1SSL\s0 frame contains, it will read the
whole frame, return part of it and buffer the rest for later reads. 
This does not make a difference for simple programs, but if you use
select-loops or polling or non-blocking I/O please read the related sections.
.IP "\(bu" 4
\&\s-1SSL\s0 handshakes
.Sp
Before any encryption can be done the peers have to agree to common algorithms,
verify certificates etc. So a handshake needs to be done before any payload is
send or received and might additionally happen later in the connection again.
.Sp
This has important implications when doing non-blocking or event-based I/O
(please read the related sections), but means also, that connect and accept
calls include the \s-1SSL\s0 handshake and thus might block or fail, if the peer does
not behave like expected. For instance accept will wait infinitly if a \s-1TCP\s0
client connects to the socket but does not initiate an \s-1SSL\s0 handshake.
.SH "METHODS"
.IX Header "METHODS"
IO::Socket::SSL inherits from another IO::Socket module.
The choice of the super class depends on the installed modules:
.IP "\(bu" 4
If IO::Socket::IP with at least version 0.20 is installed it will use this
module as super class, transparently providing IPv6 and IPv4 support.
.IP "\(bu" 4
If IO::Socket::INET6 is installed it will use this module as super class,
transparently providing IPv6 and IPv4 support.
.IP "\(bu" 4
Otherwise it will fall back to IO::Socket::INET, which is a perl core module.
With IO::Socket::INET you only get IPv4 support.
.PP
Please be aware, that with the IPv6 capable super classes, it will lookup first
for the IPv6 address of a given hostname. If the resolver provides an IPv6
address, but the host cannot be reached by IPv6, there will be no automatic
fallback to IPv4.
To avoid these problems you can either force IPv4 by specifying and \s-1AF_INET\s0
as \f(CW\*(C`Domain\*(C'\fR of the socket or globally enforce IPv4 by loading IO::Socket::SSL
with the option 'inet4'.
.PP
IO::Socket::SSL will provide all of the methods of its super class, but
sometimes it will override them to match the behavior expected from \s-1SSL\s0 or to
provide additional arguments.
.PP
The new or changed methods are described below, but please read also the
section about \s-1SSL\s0 specific error handling.
.IP "\fBnew(...)\fR" 4
.IX Item "new(...)"
Creates a new IO::Socket::SSL object.  You may use all the friendly options
that came bundled with the super class (e.g. IO::Socket::IP,
IO::Socket::INET, ...) plus (optionally) the ones described below.
If you don't specify any \s-1SSL\s0 related options it will do it's best in using
secure defaults, e.g. chosing good ciphers, enabling proper verification etc.
.RS 4
.IP "SSL_hostname" 2
.IX Item "SSL_hostname"
This can be given to specify the hostname used for \s-1SNI,\s0 which is needed if you
have multiple \s-1SSL\s0 hostnames on the same \s-1IP\s0 address. If not given it will try to
determine hostname from PeerAddr, which will fail if only \s-1IP\s0 was given or if
this argument is used within start_SSL.
.Sp
If you want to disable \s-1SNI\s0 set this argument to ''.
.Sp
Currently only supported for the client side and will be ignored for the server
side.
.Sp
See section \*(L"\s-1SNI\s0 Support\*(R" for details of \s-1SNI\s0 the support.
.IP "SSL_version" 2
.IX Item "SSL_version"
Sets the version of the \s-1SSL\s0 protocol used to transmit data. 
\&'SSLv23' auto-negotiates between SSLv2 and SSLv3, while 'SSLv2', 'SSLv3',
\&'TLSv1', 'TLSv1_1' or 'TLSv1_2' restrict the protocol to the specified version.
All values are case-insensitive.  Instead of 'TLSv1_1' and 'TLSv1_2' one can
also use 'TLSv11' and 'TLSv12'.  Support for 'TLSv1_1' and 'TLSv1_2' requires
recent versions of Net::SSLeay and openssl.
.Sp
You can limit to set of supported protocols by adding !version separated by ':'.
.Sp
The default SSL_version is 'SSLv23:!SSLv2' which means, that SSLv2, SSLv3 and
TLSv1 are supported for initial protocol handshakes, but SSLv2 will not be
accepted, leaving only SSLv3 and TLSv1. You can also use !TLSv1_1 and !TLSv1_2
to disable \s-1TLS\s0 versions 1.1 and 1.2 while allowing \s-1TLS\s0 version 1.0.
.Sp
Setting the version instead to 'TLSv1' will probably break interaction with
lots of clients which start with SSLv2 and then upgrade to TLSv1. On the other
side some clients just close the connection when they receive a \s-1TLS\s0 version 1.1
request. In this case setting the version to 'SSLv23:!SSLv2:!TLSv1_1:!TLSv1_2'
might help.
.IP "SSL_cipher_list" 2
.IX Item "SSL_cipher_list"
If this option is set the cipher list for the connection will be set to the
given value, e.g. something like '\s-1ALL:\s0!LOW:!EXP:!aNULL'. Look into the OpenSSL
documentation (<http://www.openssl.org/docs/apps/ciphers.html#CIPHER_STRINGS>)
for more details.
.Sp
Unless you fail to contact your peer because of no shared ciphers it is
recommended to leave this option at the default setting. The default setting
prefers ciphers with forward secrecy, disables anonymous authentication and
disables known insecure ciphers like \s-1MD5, DES\s0 etc. This gives a grade A result
at the tests of \s-1SSL\s0 Labs.
To use the less secure OpenSSL builtin default (whatever this is) set
SSL_cipher_list to ''.
.IP "SSL_honor_cipher_order" 2
.IX Item "SSL_honor_cipher_order"
If this option is true the cipher order the server specified is used instead
of the order proposed by the client. This option defaults to true to make use of
our secure cipher list setting.
.IP "SSL_use_cert" 2
.IX Item "SSL_use_cert"
If this is true, it forces IO::Socket::SSL to use a certificate and key, even if
you are setting up an \s-1SSL\s0 client.  If this is set to 0 (the default), then you will
only need a certificate and key if you are setting up a server.
.Sp
SSL_use_cert will implicitly be set if SSL_server is set.
For convenience it is also set if it was not given but a cert was given for use
(SSL_cert_file or similar).
.IP "SSL_server" 2
.IX Item "SSL_server"
Set this option to a true value, if the socket should be used as a server.
If this is not explicitly set it is assumed, if the Listen parameter is given
when creating the socket.
.IP "SSL_cert_file | SSL_cert | SSL_key_file | SSL_key" 2
.IX Item "SSL_cert_file | SSL_cert | SSL_key_file | SSL_key"
If you create a server you usually need to specify a server certificate which
should be verified by the client. Same is true for client certificates, which
should be verified by the server.
The certificate can be given as a file in \s-1PEM\s0 format with SSL_cert_file or
as an internal representation of a X509* object with SSL_cert.
.Sp
For each certificate a key is need, which can either be given as a file in \s-1PEM\s0
format with SSL_key_file or as an internal representation of a EVP_PKEY* object
with SSL_key.
.Sp
If your \s-1SSL\s0 server should be able to use different certificates on the same \s-1IP\s0
address, depending on the name given by \s-1SNI,\s0 you can use a hash reference
instead of a file with \f(CW\*(C`<hostname =\*(C'\fR cert_file>>.
.Sp
In case certs and keys are needed but not given it might fall back to builtin
defaults, see \*(L"Defaults for Cert, Key and \s-1CA\*(R".\s0
.Sp
Examples:
.Sp
.Vb 2
\& SSL_cert_file => \*(Aqmycert.pem\*(Aq,
\& SSL_key_file => \*(Aqmykey.pem\*(Aq,
\&
\& SSL_cert_file => {
\&    "foo.example.org" => \*(Aqfoo\-cert.pem\*(Aq,
\&    "bar.example.org" => \*(Aqbar\-cert.pem\*(Aq,
\&    # used when nothing matches or client does not support SNI
\&    \*(Aq\*(Aq => \*(Aqdefault\-cert.pem\*(Aq,
\& }
\& SSL_key_file => {
\&    "foo.example.org" => \*(Aqfoo\-key.pem\*(Aq,
\&    "bar.example.org" => \*(Aqbar\-key.pem\*(Aq,
\&    # used when nothing matches or client does not support SNI
\&    \*(Aq\*(Aq => \*(Aqdefault\-key.pem\*(Aq,
\& }
.Ve
.IP "SSL_dh_file" 2
.IX Item "SSL_dh_file"
If you want Diffie-Hellman key exchange you need to supply a suitable file here
or use the SSL_dh parameter. See dhparam command in openssl for more information.
To create a server which provides forward secrecy you need to either give the \s-1DH\s0
parameters or (better, because faster) the \s-1ECDH\s0 curve.
.Sp
If neither \f(CW\*(C`SSL_dh_file\*(C'\fR not \f(CW\*(C`SSL_dh\*(C'\fR is set a builtin \s-1DH\s0 parameter with a
length of 2048 bit is used to offer \s-1DH\s0 key exchange by default. If you don't
want this (e.g. disable \s-1DH\s0 key exchange) explicitly set this or the \f(CW\*(C`SSL_dh\*(C'\fR
parameter to undef.
.IP "SSL_dh" 2
.IX Item "SSL_dh"
Like SSL_dh_file, but instead of giving a file you use a preloaded or generated DH*.
.IP "SSL_ecdh_curve" 2
.IX Item "SSL_ecdh_curve"
If you want Elliptic Curve Diffie-Hellmann key exchange you need to supply the
\&\s-1OID\s0 or \s-1NID\s0 of a suitable curve (like 'prime256v1') here.
To create a server which provides forward secrecy you need to either give the \s-1DH\s0
parameters or (better, because faster) the \s-1ECDH\s0 curve.
.Sp
This parameter defaults to 'prime256v1' (builtin of OpenSSL) to offer \s-1ECDH\s0 key
exchange by default. If you don't want this explicitly set it to undef.
.IP "SSL_passwd_cb" 2
.IX Item "SSL_passwd_cb"
If your private key is encrypted, you might not want the default password prompt from
Net::SSLeay.  This option takes a reference to a subroutine that should return the
password required to decrypt your private key.
.IP "SSL_ca_file | SSL_ca_path" 2
.IX Item "SSL_ca_file | SSL_ca_path"
Usually you want to verify that the peer certificate has been signed by a
trusted certificate authority. In this case you should use this option to
specify the file (SSL_ca_file) or directory (SSL_ca_path) containing the
certificate(s) of the trusted certificate authorities.
If both SSL_ca_file and SSL_ca_path are undefined and not builtin defaults (see
\&\*(L"Defaults for Cert, Key and \s-1CA\*(R".\s0) can be used, it will try to use the system
defaults used built into the OpenSSL library.
If you really don't want to set a \s-1CA\s0 set this key to \f(CW\*(Aq\*(Aq\fR.
.IP "SSL_verify_mode" 2
.IX Item "SSL_verify_mode"
This option sets the verification mode for the peer certificate.
You may combine \s-1SSL_VERIFY_PEER \s0(verify_peer), \s-1SSL_VERIFY_FAIL_IF_NO_PEER_CERT
\&\s0(fail verification if no peer certificate exists; ignored for clients),
\&\s-1SSL_VERIFY_CLIENT_ONCE \s0(verify client once; ignored for clients).
See OpenSSL man page for SSL_CTX_set_verify for more information.
.Sp
The default is \s-1SSL_VERIFY_NONE\s0 for server  (e.g. no check for client
certificate) and \s-1SSL_VERIFY_PEER\s0 for client (check server certificate).
.IP "SSL_verify_callback" 2
.IX Item "SSL_verify_callback"
If you want to verify certificates yourself, you can pass a sub reference along
with this parameter to do so.  When the callback is called, it will be passed:
.RS 2
.IP "1. a true/false value that indicates what OpenSSL thinks of the certificate," 4
.IX Item "1. a true/false value that indicates what OpenSSL thinks of the certificate,"
.PD 0
.IP "2. a C\-style memory address of the certificate store," 4
.IX Item "2. a C-style memory address of the certificate store,"
.IP "3. a string containing the certificate's issuer attributes and owner attributes, and" 4
.IX Item "3. a string containing the certificate's issuer attributes and owner attributes, and"
.IP "4. a string containing any errors encountered (0 if no errors)." 4
.IX Item "4. a string containing any errors encountered (0 if no errors)."
.IP "5. a C\-style memory address of the peer's own certificate (convertible to \s-1PEM\s0 form with \fINet::SSLeay::PEM_get_string_X509()\fR)." 4
.IX Item "5. a C-style memory address of the peer's own certificate (convertible to PEM form with Net::SSLeay::PEM_get_string_X509())."
.RE
.RS 2
.PD
.Sp
The function should return 1 or 0, depending on whether it thinks the certificate
is valid or invalid.  The default is to let OpenSSL do all of the busy work.
.Sp
The callback will be called for each element in the certificate chain.
.Sp
See the OpenSSL documentation for SSL_CTX_set_verify for more information.
.RE
.IP "SSL_verifycn_scheme" 2
.IX Item "SSL_verifycn_scheme"
Set the scheme used to automatically verify the hostname of the peer.
See the information about the verification schemes in \fBverify_hostname\fR.
.Sp
The default is undef, e.g. to not automatically verify the hostname.
If no verification is done the other \fBSSL_verifycn_*\fR options have
no effect, but you might still do manual verification by calling
\&\fBverify_hostname\fR.
.IP "SSL_verifycn_name" 2
.IX Item "SSL_verifycn_name"
Set the name which is used in verification of hostname. If SSL_verifycn_scheme
is set and no SSL_verifycn_name is given it will try to use the PeerHost and
PeerAddr settings and fail if no name can be determined.
.Sp
Using PeerHost or PeerAddr works only if you create the connection directly
with \f(CW\*(C`IO::Socket::SSL\->new\*(C'\fR, if an IO::Socket::INET object is upgraded
with \fBstart_SSL\fR the name has to be given in \fBSSL_verifycn_name\fR.
.IP "SSL_check_crl" 2
.IX Item "SSL_check_crl"
If you want to verify that the peer certificate has not been revoked
by the signing authority, set this value to true. OpenSSL will search
for the \s-1CRL\s0 in your SSL_ca_path, or use the file specified by
SSL_crl_file.  See the Net::SSLeay documentation for more details.
Note that this functionality appears to be broken with OpenSSL <
v0.9.7b, so its use with lower versions will result in an error.
.IP "SSL_crl_file" 2
.IX Item "SSL_crl_file"
If you want to specify the \s-1CRL\s0 file to be used, set this value to the
pathname to be used.  This must be used in addition to setting
SSL_check_crl.
.IP "SSL_reuse_ctx" 2
.IX Item "SSL_reuse_ctx"
If you have already set the above options for a previous instance of
IO::Socket::SSL, then you can reuse the \s-1SSL\s0 context of that instance by passing
it as the value for the SSL_reuse_ctx parameter.  You may also create a
new instance of the IO::Socket::SSL::SSL_Context class, using any context options
that you desire without specifying connection options, and pass that here instead.
.Sp
If you use this option, all other context-related options that you pass
in the same call to \fInew()\fR will be ignored unless the context supplied was invalid.
Note that, contrary to versions of IO::Socket::SSL below v0.90, a global \s-1SSL\s0 context
will not be implicitly used unless you use the \fIset_default_context()\fR function.
.IP "SSL_create_ctx_callback" 2
.IX Item "SSL_create_ctx_callback"
With this callback you can make individual settings to the context after it
got created and the default setup was done.
The callback will be called with the \s-1CTX\s0 object from Net::SSLeay as the single
argument.
.Sp
Example for limiting the server session cache size:
.Sp
.Vb 4
\&  SSL_create_ctx_callback => sub {
\&      my $ctx = shift;
\&          Net::SSLeay::CTX_sess_set_cache_size($ctx,128);
\&  }
.Ve
.IP "SSL_session_cache_size" 2
.IX Item "SSL_session_cache_size"
If you make repeated connections to the same host/port and the \s-1SSL\s0 renegotiation time
is an issue, you can turn on client-side session caching with this option by specifying a
positive cache size.  For successive connections, pass the SSL_reuse_ctx option to
the \fInew()\fR calls (or use \fIset_default_context()\fR) to make use of the cached sessions.
The session cache size refers to the number of unique host/port pairs that can be
stored at one time; the oldest sessions in the cache will be removed if new ones are
added.
.Sp
This option does not effect the session cache a server has for it's clients, e.g. it
does not affect \s-1SSL\s0 objects with SSL_server set.
.IP "SSL_session_cache" 2
.IX Item "SSL_session_cache"
Specifies session cache object which should be used instead of creating a new.
Overrules SSL_session_cache_size.
This option is useful if you want to reuse the cache, but not the rest of
the context.
.Sp
A session cache object can be created using
\&\f(CW\*(C`IO::Socket::SSL::Session_Cache\->new( cachesize )\*(C'\fR.
.Sp
Use \fIset_default_session_cache()\fR to set a global cache object.
.IP "SSL_session_key" 2
.IX Item "SSL_session_key"
Specifies a key to use for lookups and inserts into client-side session cache.
Per default ip:port of destination will be used, but sometimes you want to
share the same session over multiple ports on the same server (like with \s-1FTPS\s0).
.IP "SSL_session_id_context" 2
.IX Item "SSL_session_id_context"
This gives an id for the servers session cache. It's necessary if you want
clients to connect with a client certificate. If not given but SSL_verify_mode
specifies the need for client certificate a context unique id will be picked.
.IP "SSL_error_trap" 2
.IX Item "SSL_error_trap"
When using the \fIaccept()\fR or \fIconnect()\fR methods, it may be the case that the
actual socket connection works but the \s-1SSL\s0 negotiation fails, as in the case of
an \s-1HTTP\s0 client connecting to an \s-1HTTPS\s0 server.  Passing a subroutine ref attached
to this parameter allows you to gain control of the orphaned socket instead of having it
be closed forcibly.	 The subroutine, if called, will be passed two parameters:
a reference to the socket on which the \s-1SSL\s0 negotiation failed and the full
text of the error message.
.IP "SSL_npn_protocols" 2
.IX Item "SSL_npn_protocols"
If used on the server side it specifies list of protocols advertised by \s-1SSL\s0
server as an array ref, e.g. ['spdy/2','http1.1'].
On the client side it specifies the protocols offered by the client for \s-1NPN\s0
as an array ref.
See also method next_proto_negotiated.
.Sp
Next Protocol Negotioation (\s-1NPN\s0) is available with Net::SSLeay 1.46+ and openssl\-1.0.1+.
To check support you might call \f(CW\*(C`IO::Socket::SSL\-\*(C'\fR\fIcan_npn()\fR>.
If you use this option with an unsupported Net::SSLeay/OpenSSL it will
throw an error.
.RE
.RS 4
.RE
.IP "\fBaccept\fR" 4
.IX Item "accept"
This behaves similar to the accept function of the underlying socket class, but
additionally does the initial \s-1SSL\s0 handshake. But because the underlying socket
class does return a blocking file handle even when accept is called on a
non-blocking socket, the \s-1SSL\s0 handshake on the new file object will be done in a
blocking way. Please see the section about non-blocking I/O for details.
If you don't like this behavior you should do accept on the \s-1TCP\s0 socket and then
upgrade it with \f(CW\*(C`start_SSL\*(C'\fR later.
.IP "\fBconnect(...)\fR" 4
.IX Item "connect(...)"
This behaves similar to the connnect function but also does an \s-1SSL\s0 handshake.
Because you cannot give \s-1SSL\s0 specific arguments to this function, you should
better either use \f(CW\*(C`new\*(C'\fR to create a connect \s-1SSL\s0 socket or \f(CW\*(C`start_SSL\*(C'\fR to
upgrade an established \s-1TCP\s0 socket to \s-1SSL.\s0
.IP "\fBclose(...)\fR" 4
.IX Item "close(...)"
There are a number of nasty traps that lie in wait if you are not careful about using
\&\fIclose()\fR.  The first of these will bite you if you have been using \fIshutdown()\fR on your
sockets.  Since the \s-1SSL\s0 protocol mandates that a \s-1SSL \s0\*(L"close notify\*(R" message be
sent before the socket is closed, a \fIshutdown()\fR that closes the socket's write channel
will cause the \fIclose()\fR call to hang.  For a similar reason, if you try to close a
copy of a socket (as in a forking server) you will affect the original socket as well.
To get around these problems, call close with an object-oriented syntax
(e.g. \f(CW$socket\fR\->close(SSL_no_shutdown => 1))
and one or more of the following parameters:
.RS 4
.IP "SSL_no_shutdown" 2
.IX Item "SSL_no_shutdown"
If set to a true value, this option will make \fIclose()\fR not use the \fISSL_shutdown()\fR call
on the socket in question so that the close operation can complete without problems
if you have used \fIshutdown()\fR or are working on a copy of a socket.
.Sp
Not using a real ssl shutdown on a socket will make session caching unusable.
.IP "SSL_fast_shutdown" 2
.IX Item "SSL_fast_shutdown"
If set to true only a unidirectional shutdown will be done, e.g. only the
close_notify (see \fISSL_shutdown\fR\|(3)) will be sent. Otherwise a bidirectional
shutdown will be done where it waits for the close_notify of the peer too.
.Sp
Because a unidirectional shutdown is enough to keep session cache working it
defaults to fast shutdown inside close.
.IP "SSL_ctx_free" 2
.IX Item "SSL_ctx_free"
If you want to make sure that the \s-1SSL\s0 context of the socket is destroyed when
you close it, set this option to a true value.
.RE
.RS 4
.RE
.IP "\fBsysread( \s-1BUF, LEN,\s0 [ \s-1OFFSET \s0] )\fR" 4
.IX Item "sysread( BUF, LEN, [ OFFSET ] )"
This function behaves from the outside the same as \fBsysread\fR in other
IO::Socket objects, e.g. it returns at most \s-1LEN\s0 bytes of data. 
But in reality it reads not only \s-1LEN\s0 bytes from the underlying socket, but at
a single \s-1SSL\s0 frame. It then returns up to \s-1LEN\s0 bytes it decrypted from this \s-1SSL\s0
frame. If the frame contained more data than requested it will return only \s-1LEN\s0
data, buffer the rest and return it on futher read calls.
This means, that it might be possible to read data, even if the underlying
socket is not readable, so using poll or select might not be sufficient.
.Sp
sysread will only return data from a single \s-1SSL\s0 frame, e.g. either the pending
data from the already buffered frame or it will read a frame from the underlying
socket and return the decrypted data. It will not return data spanning several
\&\s-1SSL\s0 frames in a single call.
.Sp
Also, calls to sysread might fail, because it must first finish an \s-1SSL\s0
handshake.
.Sp
To understand these behaviors is essential, if you write applications which use
event loops and/or non-blocking sockets. Please read the specific sections in
this documentation.
.IP "\fBsyswrite( \s-1BUF,\s0 [ \s-1LEN,\s0 [ \s-1OFFSET \s0]] )\fR" 4
.IX Item "syswrite( BUF, [ LEN, [ OFFSET ]] )"
This functions behaves from the outside the same as \fBsyswrite\fR in other
IO::Socket objects, e.g. it will write at most \s-1LEN\s0 bytes to the socket, but
there is no guarantee, that all \s-1LEN\s0 bytes are written. It will return the number
of bytes written. 
syswrite will write all the data within a single \s-1SSL\s0 frame, which means, that
no more than 16.384 bytes, which is the maximum size of an \s-1SSL\s0 frame, can be
written at once.
.Sp
For non-blocking sockets \s-1SSL\s0 specific behavior applies. 
Pease read the specific section in this documentation.
.IP "\fBpeek( \s-1BUF, LEN,\s0 [ \s-1OFFSET \s0])\fR" 4
.IX Item "peek( BUF, LEN, [ OFFSET ])"
This function has exactly the same syntax as \fBsysread\fR, and performs nearly the
same task but will not advance the read position so that successive calls to
\&\fIpeek()\fR with the same arguments will return the same results.  This function
requires OpenSSL 0.9.6a or later to work.
.IP "\fB\f(BIpending()\fB\fR" 4
.IX Item "pending()"
This function gives you the number of bytes available without reading from the
underlying socket object. This function is essential if you work with event
loops, please see the section about polling \s-1SSL\s0 sockets.
.IP "\fB\f(BIget_cipher()\fB\fR" 4
.IX Item "get_cipher()"
Returns the string form of the cipher that the IO::Socket::SSL object is using.
.IP "\fB\f(BIget_sslversion()\fB\fR" 4
.IX Item "get_sslversion()"
Returns the string representation of the \s-1SSL\s0 version of an established
connection.
.IP "\fB\f(BIget_sslversion_int()\fB\fR" 4
.IX Item "get_sslversion_int()"
Returns the integer representation of the \s-1SSL\s0 version of an established
connection.
.IP "\fB\f(BIdump_peer_certificate()\fB\fR" 4
.IX Item "dump_peer_certificate()"
Returns a parsable string with select fields from the peer \s-1SSL\s0 certificate.	 This
method directly returns the result of the \fIdump_peer_certificate()\fR method of Net::SSLeay.
.IP "\fBpeer_certificate($field)\fR" 4
.IX Item "peer_certificate($field)"
If a peer certificate exists, this function can retrieve values from it.
If no field is given the internal representation of certificate from Net::SSLeay is
returned.
The following fields can be queried:
.RS 4
.IP "authority (alias issuer)" 8
.IX Item "authority (alias issuer)"
The certificate authority which signed the certificate.
.IP "owner (alias subject)" 8
.IX Item "owner (alias subject)"
The owner of the certificate.
.IP "commonName (alias cn) \- only for Net::SSLeay version >=1.30" 8
.IX Item "commonName (alias cn) - only for Net::SSLeay version >=1.30"
The common name, usually the server name for \s-1SSL\s0 certificates.
.IP "subjectAltNames \- only for Net::SSLeay version >=1.33" 8
.IX Item "subjectAltNames - only for Net::SSLeay version >=1.33"
Alternative names for the subject, usually different names for the same
server, like example.org, example.com, *.example.com.
.Sp
It returns a list of (typ,value) with typ \s-1GEN_DNS, GEN_IPADD\s0 etc (these
constants are exported from IO::Socket::SSL).
See Net::SSLeay::X509_get_subjectAltNames.
.RE
.RS 4
.RE
.IP "\fBget_servername\fR" 4
.IX Item "get_servername"
This gives the name requested by the client if Server Name Indication
(\s-1SNI\s0) was used.
.IP "\fBverify_hostname($hostname,$scheme)\fR" 4
.IX Item "verify_hostname($hostname,$scheme)"
This verifies the given hostname against the peer certificate using the
given scheme. Hostname is usually what you specify within the PeerAddr.
.Sp
Verification of hostname against a certificate is different between various
applications and RFCs. Some scheme allow wildcards for hostnames, some only
in subjectAltNames, and even their different wildcard schemes are possible.
.Sp
To ease the verification the following schemes are predefined:
.RS 4
.IP "ldap (rfc4513), pop3,imap,acap (rfc2995), nntp (rfc4642)" 8
.IX Item "ldap (rfc4513), pop3,imap,acap (rfc2995), nntp (rfc4642)"
Simple wildcards in subjectAltNames are possible, e.g. *.example.org matches
www.example.org but not lala.www.example.org. If nothing from subjectAltNames
match it checks against the common name, but there are no wildcards allowed.
.IP "http (rfc2818), alias is www" 8
.IX Item "http (rfc2818), alias is www"
Extended wildcards in subjectAltNames and common name are possible, e.g.
*.example.org or even www*.example.org. The common
name will be only checked if no names are given in subjectAltNames.
.IP "smtp (rfc3207)" 8
.IX Item "smtp (rfc3207)"
This \s-1RFC\s0 doesn't say much useful about the verification so it just assumes
that subjectAltNames are possible, but no wildcards are possible anywhere.
.IP "none" 8
.IX Item "none"
No verification will be done.
Actually is does not make any sense to call verify_hostname in this case.
.RE
.RS 4
.Sp
The scheme can be given either by specifying the name for one of the above predefined
schemes, or by using a hash which can have the following keys and values:
.IP "check_cn:  0|'always'|'when_only'" 8
.IX Item "check_cn: 0|'always'|'when_only'"
Determines if the common name gets checked. If 'always' it will always be checked
(like in ldap), if 'when_only' it will only be checked if no names are given in
subjectAltNames (like in http), for any other values the common name will not be checked.
.IP "wildcards_in_alt: 0|'leftmost'|'anywhere'" 8
.IX Item "wildcards_in_alt: 0|'leftmost'|'anywhere'"
Determines if and where wildcards in subjectAltNames are possible. If 'leftmost'
only cases like *.example.org will be possible (like in ldap), for 'anywhere'
www*.example.org is possible too (like http), dangerous things like but www.*.org
or even '*' will not be allowed.
.IP "wildcards_in_cn: 0|'leftmost'|'anywhere'" 8
.IX Item "wildcards_in_cn: 0|'leftmost'|'anywhere'"
Similar to wildcards_in_alt, but checks the common name. There is no predefined
scheme which allows wildcards in common names.
.IP "callback: \e&coderef" 8
.IX Item "callback: &coderef"
If you give a subroutine for verification it will be called with the arguments
($hostname,$commonName,@subjectAltNames), where hostname is the name given for
verification, commonName is the result from peer_certificate('cn') and
subjectAltNames is the result from peer_certificate('subjectAltNames').
.Sp
All other arguments for the verification scheme will be ignored in this case.
.RE
.RS 4
.RE
.IP "\fB\f(BInext_proto_negotiated()\fB\fR" 4
.IX Item "next_proto_negotiated()"
This method returns the name of negotiated protocol \- e.g. 'http/1.1'. It works
for both client and server side of \s-1SSL\s0 connection.
.Sp
\&\s-1NPN\s0 support is available with Net::SSLeay 1.46+ and openssl\-1.0.1+.
To check support you might call \f(CW\*(C`IO::Socket::SSL\-\*(C'\fR\fIcan_npn()\fR>.
.IP "\fB\f(BIerrstr()\fB\fR" 4
.IX Item "errstr()"
Returns the last error (in string form) that occurred.	If you do not have a real
object to perform this method on, call \fIIO::Socket::SSL::errstr()\fR instead.
.Sp
For read and write errors on non-blocking sockets, this method may include the string
\&\f(CW\*(C`SSL wants a read first!\*(C'\fR or \f(CW\*(C`SSL wants a write first!\*(C'\fR meaning that the other side
is expecting to read from or write to the socket and wants to be satisfied before you
get to do anything. But with version 0.98 you are better comparing the global exported
variable \f(CW$SSL_ERROR\fR against the exported symbols \s-1SSL_WANT_READ\s0 and \s-1SSL_WANT_WRITE.\s0
.IP "\fB\f(BIopened()\fB\fR" 4
.IX Item "opened()"
This returns false if the socket could not be opened, 1 if the socket could be opened
and the \s-1SSL\s0 handshake was successful done and \-1 if the underlying IO::Handle is open,
but the \s-1SSL\s0 handshake failed.
.IP "\fBIO::Socket::SSL\->start_SSL($socket, ... )\fR" 4
.IX Item "IO::Socket::SSL->start_SSL($socket, ... )"
This will convert a glob reference or a socket that you provide to an IO::Socket::SSL
object.	 You may also pass parameters to specify context or connection options as with
a call to \fInew()\fR.  If you are using this function on an \fIaccept()\fRed socket, you must
set the parameter \*(L"SSL_server\*(R" to 1, i.e. IO::Socket::SSL\->start_SSL($socket, SSL_server => 1).
If you have a class that inherits from IO::Socket::SSL and you want the \f(CW$socket\fR to be blessed
into your own class instead, use MyClass\->start_SSL($socket) to achieve the desired effect.
.Sp
Note that if \fIstart_SSL()\fR fails in \s-1SSL\s0 negotiation, \f(CW$socket\fR will remain blessed in its
original class.	 For non-blocking sockets you better just upgrade the socket to
IO::Socket::SSL and call accept_SSL or connect_SSL and the upgraded object. To
just upgrade the socket set \fBSSL_startHandshake\fR explicitly to 0. If you call start_SSL
w/o this parameter it will revert to blocking behavior for accept_SSL and connect_SSL.
.Sp
If given the parameter \*(L"Timeout\*(R" it will stop if after the timeout no \s-1SSL\s0 connection
was established. This parameter is only used for blocking sockets, if it is not given the
default Timeout from the underlying IO::Socket will be used.
.IP "\fBstop_SSL(...)\fR" 4
.IX Item "stop_SSL(...)"
This is the opposite of \fIstart_SSL()\fR, e.g. it will shutdown the \s-1SSL\s0 connection
and return to the class before \fIstart_SSL()\fR. It gets the same arguments as \fIclose()\fR,
in fact \fIclose()\fR calls \fIstop_SSL()\fR (but without downgrading the class).
.Sp
Will return true if it succeeded and undef if failed. This might be the case for
non-blocking sockets. In this case $! is set to \s-1EAGAIN\s0 and the ssl error to
\&\s-1SSL_WANT_READ\s0 or \s-1SSL_WANT_WRITE.\s0 In this case the call should be retried again with
the same arguments once the socket is ready.
.Sp
For calling from \f(CW\*(C`stop_SSL\*(C'\fR \f(CW\*(C`SSL_fast_shutdown\*(C'\fR default to false, e.g. it
waits for the close_notify of the peer. This is necesarry in case you want to
downgrade the socket and continue to use it as a plain socket.
.ie n .IP "\fBIO::Socket::SSL\->new_from_fd($fd, [mode], \fB%sslargs\fB)\fR" 4
.el .IP "\fBIO::Socket::SSL\->new_from_fd($fd, [mode], \f(CB%sslargs\fB)\fR" 4
.IX Item "IO::Socket::SSL->new_from_fd($fd, [mode], %sslargs)"
This will convert a socket identified via a file descriptor into an \s-1SSL\s0 socket.
Note that the argument list does not include a \*(L"\s-1MODE\*(R"\s0 argument; if you supply one,
it will be thoughtfully ignored (for compatibility with IO::Socket::INET). Instead,
a mode of '+<' is assumed, and the file descriptor passed must be able to handle such
I/O because the initial \s-1SSL\s0 handshake requires bidirectional communication.
.Sp
Internally the given \f(CW$fd\fR will be upgraded to a socket object using the
\&\f(CW\*(C`new_from_fd\*(C'\fR method of the super class (IO::Socket::INET or similar) and then
\&\f(CW\*(C`start_SSL\*(C'\fR will be called using the given \f(CW%sslargs\fR.
If \f(CW$fd\fR is already an IO::Socket object you should better call \f(CW\*(C`start_SSL\*(C'\fR
directly.
.IP "\fBIO::Socket::SSL::set_default_context(...)\fR" 4
.IX Item "IO::Socket::SSL::set_default_context(...)"
You may use this to make IO::Socket::SSL automatically re-use a given context (unless
specifically overridden in a call to \fInew()\fR).  It accepts one argument, which should
be either an IO::Socket::SSL object or an IO::Socket::SSL::SSL_Context object.	See
the SSL_reuse_ctx option of \fInew()\fR for more details.	 Note that this sets the default
context globally, so use with caution (esp. in mod_perl scripts).
.IP "\fBIO::Socket::SSL::set_default_session_cache(...)\fR" 4
.IX Item "IO::Socket::SSL::set_default_session_cache(...)"
You may use this to make IO::Socket::SSL automatically re-use a given session cache
(unless specifically overridden in a call to \fInew()\fR).  It accepts one argument, which should
be an IO::Socket::SSL::Session_Cache object or similar (e.g something which implements
get_session and add_session like IO::Socket::SSL::Session_Cache does).
See the SSL_session_cache option of \fInew()\fR for more details.	 Note that this sets the default
cache globally, so use with caution.
.IP "\fBIO::Socket::SSL::set_defaults(%args)\fR" 4
.IX Item "IO::Socket::SSL::set_defaults(%args)"
With this function one can set defaults for all SSL_* parameter used for creation of
the context, like the SSL_verify* parameter.
.RS 4
.IP "mode \- set default SSL_verify_mode" 8
.IX Item "mode - set default SSL_verify_mode"
.PD 0
.IP "callback \- set default SSL_verify_callback" 8
.IX Item "callback - set default SSL_verify_callback"
.IP "scheme \- set default SSL_verifycn_scheme" 8
.IX Item "scheme - set default SSL_verifycn_scheme"
.IP "name \- set default SSL_verifycn_name" 8
.IX Item "name - set default SSL_verifycn_name"
.PD
If not given and scheme is hash reference with key callback it will be set to 'unknown'
.RE
.RS 4
.RE
.IP "\fBIO::Socket::SSL::set_client_defaults(%args)\fR" 4
.IX Item "IO::Socket::SSL::set_client_defaults(%args)"
Similar to \f(CW\*(C`set_defaults\*(C'\fR, but only sets the defaults for client mode.
.IP "\fBIO::Socket::SSL::set_server_defaults(%args)\fR" 4
.IX Item "IO::Socket::SSL::set_server_defaults(%args)"
Similar to \f(CW\*(C`set_defaults\*(C'\fR, but only sets the defaults for server mode.
.PP
The following methods are unsupported (not to mention futile!) and IO::Socket::SSL
will emit a large \s-1\fICROAK\s0()\fR if you are silly enough to use them:
.IP "truncate" 4
.IX Item "truncate"
.PD 0
.IP "stat" 4
.IX Item "stat"
.IP "ungetc" 4
.IX Item "ungetc"
.IP "setbuf" 4
.IX Item "setbuf"
.IP "setvbuf" 4
.IX Item "setvbuf"
.IP "fdopen" 4
.IX Item "fdopen"
.IP "send/recv" 4
.IX Item "send/recv"
.PD
Note that \fIsend()\fR and \fIrecv()\fR cannot be reliably trapped by a tied filehandle (such as
that used by IO::Socket::SSL) and so may send unencrypted data over the socket.	 Object-oriented
calls to these functions will fail, telling you to use the print/printf/syswrite
and read/sysread families instead.
.SS "Defaults for Cert, Key and \s-1CA\s0"
.IX Subsection "Defaults for Cert, Key and CA"
Only if no SSL_key*, no SSL_cert* and no SSL_ca* options are given it will fall
back to the following builtin defaults:
.IP "SSL_cert_file" 4
.IX Item "SSL_cert_file"
Depending on the SSL_server setting it will be either \f(CW\*(C`certs/server\-cert.pem\*(C'\fR
or \f(CW\*(C`certs/client\-cert.pem\*(C'\fR.
.IP "SSL_key_file" 4
.IX Item "SSL_key_file"
Depending on the SSL_server setting it will be either \f(CW\*(C`certs/server\-key.pem\*(C'\fR
or \f(CW\*(C`certs/client\-key.pem\*(C'\fR.
.IP "SSL_ca_file | SSL_ca_path" 4
.IX Item "SSL_ca_file | SSL_ca_path"
It will set SSL_ca_file to \f(CW\*(C`certs/my\-ca.pem\*(C'\fR if it exist.
Otherwise it will set SSL_ca_path to \f(CW\*(C`ca/\*(C'\fR if it exist.
.PP
\&\fBPlease note, that these defaults are depreciated and will be removed in the
near future\fR, e.g. you should specify all the certificates and keys you use.
If you don't specify a \s-1CA\s0 file or path it will fall back to the system default
built into OpenSSL.
.SH "ERROR HANDLING"
.IX Header "ERROR HANDLING"
If an \s-1SSL\s0 specific error occurs the global variable \f(CW$SSL_ERROR\fR will be set.
If the error occurred on an existing \s-1SSL\s0 socket the method \f(CW\*(C`errstr\*(C'\fR will
give access to the latest socket specific error.
Both \f(CW$SSL_ERROR\fR and \f(CW\*(C`errstr\*(C'\fR method give a dualvar similar to \f(CW$!\fR, e.g.
providing an error number in numeric context or an error description in string
context.
.SH "Polling of SSL Sockets (e.g. select, poll and other event loops)"
.IX Header "Polling of SSL Sockets (e.g. select, poll and other event loops)"
If you sysread one byte on a normal socket it will result in a syscall to read
one byte. Thus, if more than one byte is available on the socket it will be kept
in the network stack of your \s-1OS\s0 and the next select or poll call will return the
socket as readable.
But, with \s-1SSL\s0 you don't deliver single bytes. Multiple data bytes are packet
and encrypted together in an \s-1SSL\s0 frame. Decryption can only be done on the whole
frame, so a sysread for one byte actually reads the complete \s-1SSL\s0 frame from the
socket, decrypts it and returns the first decrypted byte. Further sysreads will
return more bytes from the same frame until all bytes are returned and the
next \s-1SSL\s0 frame will be read from the socket.
.PP
Thus, in order to decide if you can read more data (e.g. if sysread will block)
you must check, if there are still data in the current \s-1SSL\s0 frame by calling
\&\f(CW\*(C`pending\*(C'\fR and if there are no data pending you might check the underlying
socket with select or poll.
Another way might be if you try to sysread at least 16k all the time. 16k is the
maximum size of an \s-1SSL\s0 frame and because sysread returns data from only a single
\&\s-1SSL\s0 frame you guarantee this way, that there are no pending data.
Please see the example on top of this documentation on how to use \s-1SSL\s0 within a
select loop.
.SH "Non-blocking I/O"
.IX Header "Non-blocking I/O"
If you have a non-blocking socket, the expected behavior on read, write, accept
or connect is to set \f(CW$!\fR to \s-1EAGAIN\s0 if the operation can not be completed
immediately.
.PP
With \s-1SSL\s0 handshakes might occure at any time, even within an established
connections. In this cases it is necessary to finish the handshake, before
you can read or write data. This might result in situations, where you want to
read but must first finish the write of a handshake or where you want to write
but must first finish a read.
In these cases \f(CW$!\fR is set to \s-1EGAIN\s0 like expected, and additionally
\&\f(CW$SSL_ERROR\fR is set to either \s-1SSL_WANT_READ\s0 or \s-1SSL_WANT_WRITE.\s0
Thus if you get \s-1EAGAIN\s0 on a \s-1SSL\s0 socket you must check \f(CW$SSL_ERROR\fR for
SSL_WANT_* and adapt your event mask accordingly.
.PP
Using readline on non-blocking sockets does not make much sense and I would
advise against using it.
And, while the behavior is not documented for other IO::Socket classes, it
will try to emulate the behavior seen there, e.g. to return the received data
instead of blocking, even if the line is not complete. If an unrecoverable error
occurs it will return nothing, even if it already received some data.
.PP
Also, I would advise against using \f(CW\*(C`accept\*(C'\fR with a non-blocking \s-1SSL\s0 object,
because it might block and this is not what most would expect. The reason for
this is that accept on a non-blocking \s-1TCP\s0 socket (e.g. IO::Socket::IP,
IO::Socket::INET..) results in a new \s-1TCP\s0 socket, which does not inherit the
non-blocking behavior of the master socket. And thus the initial \s-1SSL\s0 handshake
on the new socket inside \f(CW\*(C`IO::Socket::SSL::accept\*(C'\fR will be done in a blocking
way. To work around it you should better do an \s-1TCP\s0 accept and later upgrade the
\&\s-1TCP\s0 socket in a non-blocking way with \f(CW\*(C`start_SSL\*(C'\fR and \f(CW\*(C`accept_SSL\*(C'\fR.
.SH "SNI Support"
.IX Header "SNI Support"
Newer extensions to \s-1SSL\s0 can distinguish between multiple hostnames on the same
\&\s-1IP\s0 address using Server Name Indication (\s-1SNI\s0).
.PP
Support for \s-1SNI\s0 on the client side was added somewhere in the OpenSSL 0.9.8
series, but only with 1.0 a bug was fixed when the server could not decide about
its hostname. Therefore client side \s-1SNI\s0 is only supported with OpenSSL 1.0 or
higher in IO::Socket::SSL.
With a supported version, \s-1SNI\s0 is used automatically on the client side, if it can
determine the hostname from \f(CW\*(C`PeerAddr\*(C'\fR or \f(CW\*(C`PeerHost\*(C'\fR. On unsupported OpenSSL
versions it will silently not use \s-1SNI.\s0
The hostname can also be given explicitly given with \f(CW\*(C`SSL_hostname\*(C'\fR, but in
this case it will throw in error, if \s-1SNI\s0 is not supported.
To check for support you might call \f(CW\*(C`IO::Socket::SSL\-\*(C'\fR\fIcan_client_sni()\fR>.
.PP
On the server side earlier versions of OpenSSL are supported, but only together
with Net::SSLeay version >= 1.50.
To check for support you might call \f(CW\*(C`IO::Socket::SSL\-\*(C'\fR\fIcan_server_sni()\fR>.
If server side \s-1SNI\s0 is supported, you might specify different certificates per
host with \f(CW\*(C`SSL_cert*\*(C'\fR and \f(CW\*(C`SSL_key*\*(C'\fR, and check the requested name using
\&\f(CW\*(C`get_servername\*(C'\fR.
.SH "RETURN VALUES"
.IX Header "RETURN VALUES"
A few changes have gone into IO::Socket::SSL v0.93 and later with respect to
return values.	The behavior on success remains unchanged, but for \fIall\fR functions,
the return value on error is now an empty list.	 Therefore, the return value will be
false in all contexts, but those who have been using the return values as arguments
to subroutines (like \f(CW\*(C`mysub(IO::Socket::SSL(...)\-\*(C'\fRnew, ...)>) may run into problems.
The moral of the story: \fIalways\fR check the return values of these functions before
using them in any way that you consider meaningful.
.SH "DEBUGGING"
.IX Header "DEBUGGING"
If you are having problems using IO::Socket::SSL despite the fact that can recite backwards
the section of this documentation labelled 'Using \s-1SSL\s0', you should try enabling debugging.	To
specify the debug level, pass 'debug#' (where # is a number from 0 to 3) to IO::Socket::SSL
when calling it.
The debug level will also be propagated to Net::SSLeay::trace, see also Net::SSLeay:
.IP "use IO::Socket::SSL qw(debug0);" 4
.IX Item "use IO::Socket::SSL qw(debug0);"
No debugging (default).
.IP "use IO::Socket::SSL qw(debug1);" 4
.IX Item "use IO::Socket::SSL qw(debug1);"
Print out errors from IO::Socket::SSL and ciphers from Net::SSLeay.
.IP "use IO::Socket::SSL qw(debug2);" 4
.IX Item "use IO::Socket::SSL qw(debug2);"
Print also information about call flow from IO::Socket::SSL and progress
information from Net::SSLeay.
.IP "use IO::Socket::SSL qw(debug3);" 4
.IX Item "use IO::Socket::SSL qw(debug3);"
Print also some data dumps from IO::Socket::SSL and from Net::SSLeay.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
See the 'example' directory.
.SH "BUGS"
.IX Header "BUGS"
IO::Socket::SSL depends on Net::SSLeay.  Up to version 1.43 of Net::SSLeay
it was not thread safe, although it did probably work if you did not use
SSL_verify_callback and SSL_password_cb.
.PP
If you use IO::Socket::SSL together with threads you should load it (e.g. use or
require) inside the main thread before creating any other threads which use it.
This way it is much faster because it will be initialized only once. Also there
are reports that it might crash the other way.
.PP
Creating an IO::Socket::SSL object in one thread and closing it in another
thread will not work.
.PP
IO::Socket::SSL does not work together with Storable::fd_retrieve/fd_store.
See \s-1BUGS\s0 file for more information and how to work around the problem.
.PP
Non-blocking and timeouts (which are based on non-blocking) are not
supported on Win32, because the underlying IO::Socket::INET does not support
non-blocking on this platform.
.PP
If you have a server and it looks like you have a memory leak you might
check the size of your session cache. Default for Net::SSLeay seems to be
20480, see the example for SSL_create_ctx_callback for how to limit it.
.PP
The default for SSL_verify_mode on the client is currently \s-1SSL_VERIFY_NONE,\s0
which is a very bad idea, thus the default will change in the near future.
See documentation for SSL_verify_mode for more information.
.SH "LIMITATIONS"
.IX Header "LIMITATIONS"
IO::Socket::SSL uses Net::SSLeay as the shiny interface to OpenSSL, which is
the shiny interface to the ugliness of \s-1SSL.	\s0 As a result, you will need both Net::SSLeay
and OpenSSL on your computer before using this module.
.PP
If you have Scalar::Util (standard with Perl 5.8.0 and above) or WeakRef, IO::Socket::SSL
sockets will auto-close when they go out of scope, just like IO::Socket::INET sockets.	If
you do not have one of these modules, then IO::Socket::SSL sockets will stay open until the
program ends or you explicitly close them.	This is due to the fact that a circular reference
is required to make IO::Socket::SSL sockets act simultaneously like objects and glob references.
.SH "DEPRECATIONS"
.IX Header "DEPRECATIONS"
The following functions are deprecated and are only retained for compatibility:
.IP "\fIcontext_init()\fR" 2
.IX Item "context_init()"
use the SSL_reuse_ctx option if you want to re-use a context
.IP "\fIsocketToSSL()\fR and \fIsocket_to_SSL()\fR" 2
.IX Item "socketToSSL() and socket_to_SSL()"
use IO::Socket::SSL\->\fIstart_SSL()\fR instead
.IP "\fIkill_socket()\fR" 2
.IX Item "kill_socket()"
use \fIclose()\fR instead
.IP "\fIget_peer_certificate()\fR" 2
.IX Item "get_peer_certificate()"
use the \fIpeer_certificate()\fR function instead.
Used to return X509_Certificate with methods subject_name and issuer_name.
Now simply returns \f(CW$self\fR which has these methods (although deprecated).
.IP "\fIissuer_name()\fR" 2
.IX Item "issuer_name()"
use peer_certificate( 'issuer' ) instead
.IP "\fIsubject_name()\fR" 2
.IX Item "subject_name()"
use peer_certificate( 'subject' ) instead
.SH "SEE ALSO"
.IX Header "SEE ALSO"
IO::Socket::INET, IO::Socket::INET6, IO::Socket::IP, Net::SSLeay.
.SH "AUTHORS"
.IX Header "AUTHORS"
Steffen Ullrich, <steffen at genua.de> is the current maintainer.
.PP
Peter Behroozi, <behrooz at fas.harvard.edu> (Note the lack of an \*(L"i\*(R" at the end of \*(L"behrooz\*(R")
.PP
Marko Asplund, <marko.asplund at kronodoc.fi>, was the original author of IO::Socket::SSL.
.PP
Patches incorporated from various people, see file Changes.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
The original versions of this module are Copyright (C) 1999\-2002 Marko Asplund.
.PP
The rewrite of this module is Copyright (C) 2002\-2005 Peter Behroozi.
.PP
Versions 0.98 and newer are Copyright (C) 2006\-2013 Steffen Ullrich.
.PP
This module is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.SH "Appendix: Using SSL"
.IX Header "Appendix: Using SSL"
If you are unfamiliar with the way OpenSSL works, good references may be found in
both the book \*(L"Network Security with OpenSSL\*(R" (Oreilly & Assoc.) and the web site
<http://www.tldp.org/HOWTO/SSL\-Certificates\-HOWTO/>.  Read on for a quick overview.
.SS "The Long of It (Detail)"
.IX Subsection "The Long of It (Detail)"
The usual reason for using \s-1SSL\s0 is to keep your data safe.  This means that not only
do you have to encrypt the data while it is being transported over a network, but
you also have to make sure that the right person gets the data, e.g. you need to
authenticate the person.
To accomplish this with \s-1SSL,\s0 you have to use certificates.
A certificate closely resembles a Government-issued \s-1ID \s0(at least in places where
you can trust them). The \s-1ID\s0 contains some sort of identifying information such
as a name and address, and is usually stamped with a seal of Government
Approval. Theoretically, this means that you may trust the information on the
card and do business with the owner of the card.
The same ideas apply to \s-1SSL\s0 certificates, which have some identifying
information and are \*(L"stamped\*(R" (signed) by someone (a \s-1CA,\s0 e.g. Certificate
Authority) who you trust will adequately verify the identifying information. In
this case, because of some clever number theory, it is extremely difficult to
falsify the signing process. Another useful consequence of number theory is that
the certificate is linked to the encryption process, so you may encrypt data
(using information on the certificate) that only the certificate owner can
decrypt.
.PP
What does this mean for you?
So most common case is that at least the server has a certificate which the
client can verify, but the server may also ask back for a certificate to
authenticate the client.
To verify that a certificate is trusted, one checks if the certificate is signed
by the expected \s-1CA \s0(Certificate Authority), which often means any \s-1CA\s0 installed
on the system (IO::Socket::SSL tries to use the CAs installed on the system by
default). So if you trust the \s-1CA,\s0 trust the number theory and trust the
used algorithms you can be confident, that no-one is reading your data.
.PP
Beside the authentication using certificates there is also anonymous
authentication, which effectivly means no authentication. In this case it is
easy for somebody in between to intercept the connection, e.g. playing man in
the middle and nobody notices.
By default IO::Socket::SSL uses only ciphers which require certificates and
which are safe enough, but if you want to set your own cipher_list make sure,
that you explicitly exclude anonymous authentication. E.g. setting the cipher
list to \s-1HIGH\s0 is not enough, you should use at least \s-1HIGH:\s0!aNULL.
.SS "The Short of It (Summary)"
.IX Subsection "The Short of It (Summary)"
For servers, you will need to generate a cryptographic private key and a certificate
request.  You will need to send the certificate request to a Certificate Authority to
get a real certificate back, after which you can start serving people.	For clients,
you will not need anything unless the server wants validation, in which case you will
also need a private key and a real certificate.	 For more information about how to
get these, see <http://www.modssl.org/docs/2.8/ssl_faq.html#ToC24>.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/IO::Socket::SSL::Intercept.3pm               0100644 0001750 0001750 00000027315 12566241332 025761  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "IO::Socket::SSL::Intercept 3"
.TH IO::Socket::SSL::Intercept 3 "2014-01-07" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
IO::Socket::SSL::Intercept \-\- SSL interception (man in the middle)
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 10
\&    use IO::Socket::SSL::Intercept;
\&    # create interceptor with proxy certificates
\&    my $mitm = IO::Socket::SSL::Intercept\->new(
\&        proxy_cert_file => \*(Aqproxy_cert.pem\*(Aq,
\&        proxy_key_file  => \*(Aqproxy_key.pem\*(Aq,
\&        ...
\&    );
\&    my $listen = IO::Socket::INET\->new( LocalAddr => .., Listen => .. );
\&    while (1) {
\&        # TCP accept new client
\&        my $client = $listen\->accept or next;
\&        # SSL connect to server
\&        my $server = IO::Socket::SSL\->new(
\&            PeerAddr => ..,
\&            SSL_verify_mode => ...,
\&            ...
\&        ) or die "ssl connect failed: $!,$SSL_ERROR";
\&        # clone server certificate
\&        my ($cert,$key) = $mitm\->clone_cert( $server\->peer_certificate );
\&        # and upgrade client side to SSL with cloned certificate
\&        IO::Socket::SSL\->start_SSL($client,
\&            SSL_server => 1,
\&            SSL_cert => $cert,
\&            SSL_key => $key
\&        ) or die "upgrade failed: $SSL_ERROR";
\&        # now transfer data between $client and $server and analyze
\&        # the unencrypted data
\&        ...
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides functionality to clone certificates and sign them with a
proxy certificate, thus making it easy to intercept \s-1SSL\s0 connections (man in the
middle). It also manages a cache of the generated certificates.
.SH "How Intercepting SSL Works"
.IX Header "How Intercepting SSL Works"
Intercepting \s-1SSL\s0 connections is useful for analyzing encrypted traffic for
security reasons or for testing. It does not break the end-to-end security of
\&\s-1SSL,\s0 e.g. a properly written client will notice the interception unless you
explicitly configure the client to trust your interceptor.
Intercepting \s-1SSL\s0 works the following way:
.IP "\(bu" 4
Create a new \s-1CA\s0 certificate, which will be used to sign the cloned certificates.
This proxy \s-1CA\s0 certificate should be trusted by the client, or (a properly
written client) will throw error messages or deny the connections because it
detected a man in the middle attack.
Due to the way the interception works there no support for client side
certificates is possible.
.Sp
Using openssl such a proxy \s-1CA\s0 certificate and private key can be created with:
.Sp
.Vb 4
\&  openssl genrsa \-out proxy_key.pem 1024
\&  openssl req \-new \-x509 \-extensions v3_ca \-key proxy_key.pem \-out proxy_cert.pem
\&  # export as PKCS12 for import into browser
\&  openssl pkcs12 \-export \-in proxy_cert.pem \-inkey proxy_key.pem \-out proxy_cert.p12
.Ve
.IP "\(bu" 4
Configure client to connect to use intercepting proxy or somehow redirect
connections from client to the proxy (e.g. packet filter redirects, \s-1ARP\s0 or \s-1DNS\s0
spoofing etc).
.IP "\(bu" 4
Accept the \s-1TCP\s0 connection from the client, e.g. don't do any \s-1SSL\s0 handshakes with
the client yet.
.IP "\(bu" 4
Establish the \s-1SSL\s0 connection to the server and verify the servers certificate as
usually. Then create a new certificate based on the original servers
certificate, but signed by your proxy \s-1CA.\s0
This a the step where IO::Socket::SSL::Intercept helps.
.IP "\(bu" 4
Upgrade the \s-1TCP\s0 connection to the client to \s-1SSL\s0 using the cloned certificate
from the server. If the client trusts your proxy \s-1CA\s0 it will accept the upgrade
to \s-1SSL.\s0
.IP "\(bu" 4
Transfer data between client and server. While the connections to client and
server are both encrypted with \s-1SSL\s0 you will read/write the unencrypted data in
your proxy application.
.SH "METHODS"
.IX Header "METHODS"
IO::Socket::SSL::Intercept helps creating the cloned certificate with the
following methods:
.ie n .IP "\fB\fB$mitm\fB = IO::Socket::SSL::Intercept\->new(%args)\fR" 4
.el .IP "\fB\f(CB$mitm\fB = IO::Socket::SSL::Intercept\->new(%args)\fR" 4
.IX Item "$mitm = IO::Socket::SSL::Intercept->new(%args)"
This creates a new interceptor object. \f(CW%args\fR should be
.RS 4
.IP "proxy_cert X509 | proxy_cert_file filename" 8
.IX Item "proxy_cert X509 | proxy_cert_file filename"
This is the proxy certificate.
It can be either given by an X509 object from Net::SSLeays internal
representation, or using a file in \s-1PEM\s0 format.
.IP "proxy_key \s-1EVP_PKEY\s0 | proxy_key_file filename" 8
.IX Item "proxy_key EVP_PKEY | proxy_key_file filename"
This is the key for the proxy certificate.
It can be either given by an \s-1EVP_PKEY\s0 object from Net::SSLeays internal
representation, or using a file in \s-1PEM\s0 format.
The key should not have a passphrase.
.IP "pubkey \s-1EVP_PKEY\s0 | pubkey_file filename" 8
.IX Item "pubkey EVP_PKEY | pubkey_file filename"
This optional argument specifies the public key used for the cloned certificate.
It can be either given by an \s-1EVP_PKEY\s0 object from Net::SSLeays internal
representation, or using a file in \s-1PEM\s0 format.
If not given it will create a new public key on each call of \f(CW\*(C`new\*(C'\fR.
.IP "serial \s-1INTEGER\s0" 8
.IX Item "serial INTEGER"
This optional argument gives the starting point for the serial numbers of the
newly created certificates. Default to 1.
.IP "cache \s-1HASH\s0 | \s-1SUBROUTINE\s0" 8
.IX Item "cache HASH | SUBROUTINE"
This optional argument gives a way to cache created certificates, so that they
don't get recreated on future accesses to the same host.
If the argument ist not given an internal \s-1HASH\s0 ist used.
.Sp
If the argument is a hash it will store for each generated certificate a hash
reference with \f(CW\*(C`cert\*(C'\fR and \f(CW\*(C`atime\*(C'\fR in the hash, where \f(CW\*(C`atime\*(C'\fR is the time of
last access (to expire unused entries) and \f(CW\*(C`cert\*(C'\fR is the certificate. Please
note, that the certificate is in Net::SSLeays internal X509 format and can
thus not be simply dumped and restored.
The key for the hash is an \f(CW\*(C`ident\*(C'\fR either given to \f(CW\*(C`clone_cert\*(C'\fR or generated
from the original certificate.
.Sp
If the argument is a subroutine it will be called as \f(CW\*(C`$cache\->(ident)\*(C'\fR
to get an existing certificate and with \f(CW\*(C`$cache\->(ident,cert)\*(C'\fR to cache the
newly created certificate.
.RE
.RS 4
.RE
.ie n .IP "\fB($clone_cert,$key) = \fB$mitm\fB\->clone_cert($original_cert,[ \f(BI$ident\fB ])\fR" 4
.el .IP "\fB($clone_cert,$key) = \f(CB$mitm\fB\->clone_cert($original_cert,[ \f(CB$ident\fB ])\fR" 4
.IX Item "($clone_cert,$key) = $mitm->clone_cert($original_cert,[ $ident ])"
This clones the given certificate.
An ident as the key into the cache can be given (like \f(CW\*(C`host:port\*(C'\fR), if not it
will be created from the properties of the original certificate.
It returns the cloned certificate and its key (which is the same for alle
created certificates).
.ie n .IP "\fB\fB$string\fB = \f(BI$mitm\fB\->serialize\fR" 4
.el .IP "\fB\f(CB$string\fB = \f(CB$mitm\fB\->serialize\fR" 4
.IX Item "$string = $mitm->serialize"
This creates a serialized version of the object (e.g. a string) which can then
be used to persistantly store created certificates over restarts of the
application. The cache will only be serialized if it is a \s-1HASH.\s0
To work together with Storable the \f(CW\*(C`STORABLE_freeze\*(C'\fR function is defined to
call \f(CW\*(C`serialize\*(C'\fR.
.ie n .IP "\fB\fB$mitm\fB = IO::Socket::SSL::Intercept\->unserialize($string)\fR" 4
.el .IP "\fB\f(CB$mitm\fB = IO::Socket::SSL::Intercept\->unserialize($string)\fR" 4
.IX Item "$mitm = IO::Socket::SSL::Intercept->unserialize($string)"
This restores an Intercept object from a serialized string.
To work together with Storable the \f(CW\*(C`STORABLE_thaw\*(C'\fR function is defined to
call \f(CW\*(C`unserialize\*(C'\fR.
.SH "AUTHOR"
.IX Header "AUTHOR"
Steffen Ullrich
                                                                                                                                                                                                                                                                                                                   osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/IO::Socket::SSL::Intercept5.18.3pm           0100644 0001750 0001750 00000027315 12566241332 026275  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "IO::Socket::SSL::Intercept 3"
.TH IO::Socket::SSL::Intercept 3 "2014-01-07" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
IO::Socket::SSL::Intercept \-\- SSL interception (man in the middle)
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 10
\&    use IO::Socket::SSL::Intercept;
\&    # create interceptor with proxy certificates
\&    my $mitm = IO::Socket::SSL::Intercept\->new(
\&        proxy_cert_file => \*(Aqproxy_cert.pem\*(Aq,
\&        proxy_key_file  => \*(Aqproxy_key.pem\*(Aq,
\&        ...
\&    );
\&    my $listen = IO::Socket::INET\->new( LocalAddr => .., Listen => .. );
\&    while (1) {
\&        # TCP accept new client
\&        my $client = $listen\->accept or next;
\&        # SSL connect to server
\&        my $server = IO::Socket::SSL\->new(
\&            PeerAddr => ..,
\&            SSL_verify_mode => ...,
\&            ...
\&        ) or die "ssl connect failed: $!,$SSL_ERROR";
\&        # clone server certificate
\&        my ($cert,$key) = $mitm\->clone_cert( $server\->peer_certificate );
\&        # and upgrade client side to SSL with cloned certificate
\&        IO::Socket::SSL\->start_SSL($client,
\&            SSL_server => 1,
\&            SSL_cert => $cert,
\&            SSL_key => $key
\&        ) or die "upgrade failed: $SSL_ERROR";
\&        # now transfer data between $client and $server and analyze
\&        # the unencrypted data
\&        ...
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides functionality to clone certificates and sign them with a
proxy certificate, thus making it easy to intercept \s-1SSL\s0 connections (man in the
middle). It also manages a cache of the generated certificates.
.SH "How Intercepting SSL Works"
.IX Header "How Intercepting SSL Works"
Intercepting \s-1SSL\s0 connections is useful for analyzing encrypted traffic for
security reasons or for testing. It does not break the end-to-end security of
\&\s-1SSL,\s0 e.g. a properly written client will notice the interception unless you
explicitly configure the client to trust your interceptor.
Intercepting \s-1SSL\s0 works the following way:
.IP "\(bu" 4
Create a new \s-1CA\s0 certificate, which will be used to sign the cloned certificates.
This proxy \s-1CA\s0 certificate should be trusted by the client, or (a properly
written client) will throw error messages or deny the connections because it
detected a man in the middle attack.
Due to the way the interception works there no support for client side
certificates is possible.
.Sp
Using openssl such a proxy \s-1CA\s0 certificate and private key can be created with:
.Sp
.Vb 4
\&  openssl genrsa \-out proxy_key.pem 1024
\&  openssl req \-new \-x509 \-extensions v3_ca \-key proxy_key.pem \-out proxy_cert.pem
\&  # export as PKCS12 for import into browser
\&  openssl pkcs12 \-export \-in proxy_cert.pem \-inkey proxy_key.pem \-out proxy_cert.p12
.Ve
.IP "\(bu" 4
Configure client to connect to use intercepting proxy or somehow redirect
connections from client to the proxy (e.g. packet filter redirects, \s-1ARP\s0 or \s-1DNS\s0
spoofing etc).
.IP "\(bu" 4
Accept the \s-1TCP\s0 connection from the client, e.g. don't do any \s-1SSL\s0 handshakes with
the client yet.
.IP "\(bu" 4
Establish the \s-1SSL\s0 connection to the server and verify the servers certificate as
usually. Then create a new certificate based on the original servers
certificate, but signed by your proxy \s-1CA.\s0
This a the step where IO::Socket::SSL::Intercept helps.
.IP "\(bu" 4
Upgrade the \s-1TCP\s0 connection to the client to \s-1SSL\s0 using the cloned certificate
from the server. If the client trusts your proxy \s-1CA\s0 it will accept the upgrade
to \s-1SSL.\s0
.IP "\(bu" 4
Transfer data between client and server. While the connections to client and
server are both encrypted with \s-1SSL\s0 you will read/write the unencrypted data in
your proxy application.
.SH "METHODS"
.IX Header "METHODS"
IO::Socket::SSL::Intercept helps creating the cloned certificate with the
following methods:
.ie n .IP "\fB\fB$mitm\fB = IO::Socket::SSL::Intercept\->new(%args)\fR" 4
.el .IP "\fB\f(CB$mitm\fB = IO::Socket::SSL::Intercept\->new(%args)\fR" 4
.IX Item "$mitm = IO::Socket::SSL::Intercept->new(%args)"
This creates a new interceptor object. \f(CW%args\fR should be
.RS 4
.IP "proxy_cert X509 | proxy_cert_file filename" 8
.IX Item "proxy_cert X509 | proxy_cert_file filename"
This is the proxy certificate.
It can be either given by an X509 object from Net::SSLeays internal
representation, or using a file in \s-1PEM\s0 format.
.IP "proxy_key \s-1EVP_PKEY\s0 | proxy_key_file filename" 8
.IX Item "proxy_key EVP_PKEY | proxy_key_file filename"
This is the key for the proxy certificate.
It can be either given by an \s-1EVP_PKEY\s0 object from Net::SSLeays internal
representation, or using a file in \s-1PEM\s0 format.
The key should not have a passphrase.
.IP "pubkey \s-1EVP_PKEY\s0 | pubkey_file filename" 8
.IX Item "pubkey EVP_PKEY | pubkey_file filename"
This optional argument specifies the public key used for the cloned certificate.
It can be either given by an \s-1EVP_PKEY\s0 object from Net::SSLeays internal
representation, or using a file in \s-1PEM\s0 format.
If not given it will create a new public key on each call of \f(CW\*(C`new\*(C'\fR.
.IP "serial \s-1INTEGER\s0" 8
.IX Item "serial INTEGER"
This optional argument gives the starting point for the serial numbers of the
newly created certificates. Default to 1.
.IP "cache \s-1HASH\s0 | \s-1SUBROUTINE\s0" 8
.IX Item "cache HASH | SUBROUTINE"
This optional argument gives a way to cache created certificates, so that they
don't get recreated on future accesses to the same host.
If the argument ist not given an internal \s-1HASH\s0 ist used.
.Sp
If the argument is a hash it will store for each generated certificate a hash
reference with \f(CW\*(C`cert\*(C'\fR and \f(CW\*(C`atime\*(C'\fR in the hash, where \f(CW\*(C`atime\*(C'\fR is the time of
last access (to expire unused entries) and \f(CW\*(C`cert\*(C'\fR is the certificate. Please
note, that the certificate is in Net::SSLeays internal X509 format and can
thus not be simply dumped and restored.
The key for the hash is an \f(CW\*(C`ident\*(C'\fR either given to \f(CW\*(C`clone_cert\*(C'\fR or generated
from the original certificate.
.Sp
If the argument is a subroutine it will be called as \f(CW\*(C`$cache\->(ident)\*(C'\fR
to get an existing certificate and with \f(CW\*(C`$cache\->(ident,cert)\*(C'\fR to cache the
newly created certificate.
.RE
.RS 4
.RE
.ie n .IP "\fB($clone_cert,$key) = \fB$mitm\fB\->clone_cert($original_cert,[ \f(BI$ident\fB ])\fR" 4
.el .IP "\fB($clone_cert,$key) = \f(CB$mitm\fB\->clone_cert($original_cert,[ \f(CB$ident\fB ])\fR" 4
.IX Item "($clone_cert,$key) = $mitm->clone_cert($original_cert,[ $ident ])"
This clones the given certificate.
An ident as the key into the cache can be given (like \f(CW\*(C`host:port\*(C'\fR), if not it
will be created from the properties of the original certificate.
It returns the cloned certificate and its key (which is the same for alle
created certificates).
.ie n .IP "\fB\fB$string\fB = \f(BI$mitm\fB\->serialize\fR" 4
.el .IP "\fB\f(CB$string\fB = \f(CB$mitm\fB\->serialize\fR" 4
.IX Item "$string = $mitm->serialize"
This creates a serialized version of the object (e.g. a string) which can then
be used to persistantly store created certificates over restarts of the
application. The cache will only be serialized if it is a \s-1HASH.\s0
To work together with Storable the \f(CW\*(C`STORABLE_freeze\*(C'\fR function is defined to
call \f(CW\*(C`serialize\*(C'\fR.
.ie n .IP "\fB\fB$mitm\fB = IO::Socket::SSL::Intercept\->unserialize($string)\fR" 4
.el .IP "\fB\f(CB$mitm\fB = IO::Socket::SSL::Intercept\->unserialize($string)\fR" 4
.IX Item "$mitm = IO::Socket::SSL::Intercept->unserialize($string)"
This restores an Intercept object from a serialized string.
To work together with Storable the \f(CW\*(C`STORABLE_thaw\*(C'\fR function is defined to
call \f(CW\*(C`unserialize\*(C'\fR.
.SH "AUTHOR"
.IX Header "AUTHOR"
Steffen Ullrich
                                                                                                                                                                                                                                                                                                                   osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/IO::Socket::SSL::Utils.3pm                   0100644 0001750 0001750 00000017330 12566241332 025120  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "IO::Socket::SSL::Utils 3"
.TH IO::Socket::SSL::Utils 3 "2014-01-07" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
IO::Socket::SSL::Utils \-\- loading, storing, creating certificates and keys
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\&    use IO::Socket::SSL::Utils;
\&    my $cert = PEM_file2cert(\*(Aqcert.pem\*(Aq);
\&    my $string = PEM_cert2string($cert);
\&    CERT_free($cert);
\&
\&    my $key = KEY_create_rsa(2048);
\&    PEM_string2file($key);
\&    KEY_free($key);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides various utility functions to work with certificates and
private keys, shielding some of the complexity of the underlying Net::SSLeay and
OpenSSL.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.IP "\(bu" 4
Functions converting between string or file and certificates and keys.
They croak if the operation cannot be completed.
.RS 4
.IP "PEM_file2cert(file) \-> cert" 8
.IX Item "PEM_file2cert(file) -> cert"
.PD 0
.IP "PEM_cert2file(cert,file)" 8
.IX Item "PEM_cert2file(cert,file)"
.IP "PEM_string2cert(string) \-> cert" 8
.IX Item "PEM_string2cert(string) -> cert"
.IP "PEM_cert2string(cert) \-> string" 8
.IX Item "PEM_cert2string(cert) -> string"
.IP "PEM_file2key(file) \-> key" 8
.IX Item "PEM_file2key(file) -> key"
.IP "PEM_key2file(key,file)" 8
.IX Item "PEM_key2file(key,file)"
.IP "PEM_string2key(string) \-> key" 8
.IX Item "PEM_string2key(string) -> key"
.IP "PEM_key2string(key) \-> string" 8
.IX Item "PEM_key2string(key) -> string"
.RE
.RS 4
.RE
.IP "\(bu" 4
.PD
Functions for cleaning up.
Each loaded or created cert and key must be freed to not leak memory.
.RS 4
.IP "CERT_free(cert)" 8
.IX Item "CERT_free(cert)"
.PD 0
.IP "KEY_free(key)" 8
.IX Item "KEY_free(key)"
.RE
.RS 4
.RE
.IP "\(bu" 4
.PD
KEY_create_rsa(bits) \-> key
.Sp
Creates an \s-1RSA\s0 key pair, bits defaults to 1024.
.IP "\(bu" 4
CERT_asHash(cert) \-> hash
.Sp
Extracts the information from the certificate into a hash:
.RS 4
.IP "serial" 8
.IX Item "serial"
The serial number
.IP "version" 8
.IX Item "version"
Certificate version, usually 2 (x509v3)
.IP "subject" 8
.IX Item "subject"
Hash with the parts of the subject, e.g. commonName, countryName,
organizationName, stateOrProvinceName, localityName.
.IP "subjectAltNames" 8
.IX Item "subjectAltNames"
Array with list of alternative names. Each entry in the list is of
\&\f(CW\*(C`[type,value]\*(C'\fR, where \f(CW\*(C`type\*(C'\fR can be \s-1OTHERNAME, EMAIL, DNS, X400, DIRNAME,
EDIPARTY, URI, IP\s0 or \s-1RID.\s0
.IP "not_before, not_after" 8
.IX Item "not_before, not_after"
The time frame, where the certificate is valid, as time_t, e.g. can be converted
with localtime or similar functions.
.RE
.RS 4
.RE
.IP "\(bu" 4
CERT_create(hash) \-> (cert,key)
.Sp
Creates a certificate based on the given hash.
Additionally to the information described in \f(CW\*(C`CERT_asHash\*(C'\fR the following keys
can be given:
.RS 4
.IP "\s-1CA\s0 true|false" 8
.IX Item "CA true|false"
if true declare certificate as \s-1CA,\s0 defaults to false
.IP "key key" 8
.IX Item "key key"
use given key as key for certificate, otherwise a new one will be generated and
returned
.IP "issuer_cert cert" 8
.IX Item "issuer_cert cert"
set issuer for new certificate
.IP "issuer_key key" 8
.IX Item "issuer_key key"
sign new certificate with given key
.RE
.RS 4
.Sp
If not all necessary information are given some will have usable defaults, e.g.
.IP "not_before defaults to the current time" 8
.IX Item "not_before defaults to the current time"
.PD 0
.IP "not_after defaults to 365 days in the future" 8
.IX Item "not_after defaults to 365 days in the future"
.IP "subject has a default pointing to IO::Socket::SSL" 8
.IX Item "subject has a default pointing to IO::Socket::SSL"
.IP "version defaults to 2 (x509v3)" 8
.IX Item "version defaults to 2 (x509v3)"
.IP "serial will be a random number" 8
.IX Item "serial will be a random number"
.RE
.RS 4
.RE
.PD
.SH "AUTHOR"
.IX Header "AUTHOR"
Steffen Ullrich
                                                                                                                                                                                                                                                                                                        osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/IO::Socket::SSL::Utils5.18.3pm               0100644 0001750 0001750 00000017330 12566241332 025434  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "IO::Socket::SSL::Utils 3"
.TH IO::Socket::SSL::Utils 3 "2014-01-07" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
IO::Socket::SSL::Utils \-\- loading, storing, creating certificates and keys
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\&    use IO::Socket::SSL::Utils;
\&    my $cert = PEM_file2cert(\*(Aqcert.pem\*(Aq);
\&    my $string = PEM_cert2string($cert);
\&    CERT_free($cert);
\&
\&    my $key = KEY_create_rsa(2048);
\&    PEM_string2file($key);
\&    KEY_free($key);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides various utility functions to work with certificates and
private keys, shielding some of the complexity of the underlying Net::SSLeay and
OpenSSL.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.IP "\(bu" 4
Functions converting between string or file and certificates and keys.
They croak if the operation cannot be completed.
.RS 4
.IP "PEM_file2cert(file) \-> cert" 8
.IX Item "PEM_file2cert(file) -> cert"
.PD 0
.IP "PEM_cert2file(cert,file)" 8
.IX Item "PEM_cert2file(cert,file)"
.IP "PEM_string2cert(string) \-> cert" 8
.IX Item "PEM_string2cert(string) -> cert"
.IP "PEM_cert2string(cert) \-> string" 8
.IX Item "PEM_cert2string(cert) -> string"
.IP "PEM_file2key(file) \-> key" 8
.IX Item "PEM_file2key(file) -> key"
.IP "PEM_key2file(key,file)" 8
.IX Item "PEM_key2file(key,file)"
.IP "PEM_string2key(string) \-> key" 8
.IX Item "PEM_string2key(string) -> key"
.IP "PEM_key2string(key) \-> string" 8
.IX Item "PEM_key2string(key) -> string"
.RE
.RS 4
.RE
.IP "\(bu" 4
.PD
Functions for cleaning up.
Each loaded or created cert and key must be freed to not leak memory.
.RS 4
.IP "CERT_free(cert)" 8
.IX Item "CERT_free(cert)"
.PD 0
.IP "KEY_free(key)" 8
.IX Item "KEY_free(key)"
.RE
.RS 4
.RE
.IP "\(bu" 4
.PD
KEY_create_rsa(bits) \-> key
.Sp
Creates an \s-1RSA\s0 key pair, bits defaults to 1024.
.IP "\(bu" 4
CERT_asHash(cert) \-> hash
.Sp
Extracts the information from the certificate into a hash:
.RS 4
.IP "serial" 8
.IX Item "serial"
The serial number
.IP "version" 8
.IX Item "version"
Certificate version, usually 2 (x509v3)
.IP "subject" 8
.IX Item "subject"
Hash with the parts of the subject, e.g. commonName, countryName,
organizationName, stateOrProvinceName, localityName.
.IP "subjectAltNames" 8
.IX Item "subjectAltNames"
Array with list of alternative names. Each entry in the list is of
\&\f(CW\*(C`[type,value]\*(C'\fR, where \f(CW\*(C`type\*(C'\fR can be \s-1OTHERNAME, EMAIL, DNS, X400, DIRNAME,
EDIPARTY, URI, IP\s0 or \s-1RID.\s0
.IP "not_before, not_after" 8
.IX Item "not_before, not_after"
The time frame, where the certificate is valid, as time_t, e.g. can be converted
with localtime or similar functions.
.RE
.RS 4
.RE
.IP "\(bu" 4
CERT_create(hash) \-> (cert,key)
.Sp
Creates a certificate based on the given hash.
Additionally to the information described in \f(CW\*(C`CERT_asHash\*(C'\fR the following keys
can be given:
.RS 4
.IP "\s-1CA\s0 true|false" 8
.IX Item "CA true|false"
if true declare certificate as \s-1CA,\s0 defaults to false
.IP "key key" 8
.IX Item "key key"
use given key as key for certificate, otherwise a new one will be generated and
returned
.IP "issuer_cert cert" 8
.IX Item "issuer_cert cert"
set issuer for new certificate
.IP "issuer_key key" 8
.IX Item "issuer_key key"
sign new certificate with given key
.RE
.RS 4
.Sp
If not all necessary information are given some will have usable defaults, e.g.
.IP "not_before defaults to the current time" 8
.IX Item "not_before defaults to the current time"
.PD 0
.IP "not_after defaults to 365 days in the future" 8
.IX Item "not_after defaults to 365 days in the future"
.IP "subject has a default pointing to IO::Socket::SSL" 8
.IX Item "subject has a default pointing to IO::Socket::SSL"
.IP "version defaults to 2 (x509v3)" 8
.IX Item "version defaults to 2 (x509v3)"
.IP "serial will be a random number" 8
.IX Item "serial will be a random number"
.RE
.RS 4
.RE
.PD
.SH "AUTHOR"
.IX Header "AUTHOR"
Steffen Ullrich
                                                                                                                                                                                                                                                                                                        osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/IO::Socket::UNIX.3pm                         0100644 0001750 0001750 00000013744 12566207456 024053  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "IO::Socket::UNIX 3pm"
.TH IO::Socket::UNIX 3pm "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
IO::Socket::UNIX \- Object interface for AF_UNIX domain sockets
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use IO::Socket::UNIX;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`IO::Socket::UNIX\*(C'\fR provides an object interface to creating and using sockets
in the \s-1AF_UNIX\s0 domain. It is built upon the IO::Socket interface and
inherits all the methods defined by IO::Socket.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.IP "new ( [\s-1ARGS\s0] )" 4
.IX Item "new ( [ARGS] )"
Creates an \f(CW\*(C`IO::Socket::UNIX\*(C'\fR object, which is a reference to a
newly created symbol (see the \f(CW\*(C`Symbol\*(C'\fR package). \f(CW\*(C`new\*(C'\fR
optionally takes arguments, these arguments are in key-value pairs.
.Sp
In addition to the key-value pairs accepted by IO::Socket,
\&\f(CW\*(C`IO::Socket::UNIX\*(C'\fR provides.
.Sp
.Vb 4
\&    Type        Type of socket (eg SOCK_STREAM or SOCK_DGRAM)
\&    Local       Path to local fifo
\&    Peer        Path to peer fifo
\&    Listen      Create a listen socket
.Ve
.Sp
If the constructor is only passed a single argument, it is assumed to
be a \f(CW\*(C`Peer\*(C'\fR specification.
.Sp
.Vb 1
\& NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE
.Ve
.Sp
As of \s-1VERSION 1.18\s0 all IO::Socket objects have autoflush turned on
by default. This was not the case with earlier releases.
.Sp
.Vb 1
\& NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE
.Ve
.SH "METHODS"
.IX Header "METHODS"
.IP "\fIhostpath()\fR" 4
.IX Item "hostpath()"
Returns the pathname to the fifo at the local end
.IP "\fIpeerpath()\fR" 4
.IX Item "peerpath()"
Returns the pathanme to the fifo at the peer end
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Socket, IO::Socket
.SH "AUTHOR"
.IX Header "AUTHOR"
Graham Barr. Currently maintained by the Perl Porters.  Please report all
bugs to <perlbug@perl.org>.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 1996\-8 Graham Barr <gbarr@pobox.com>. All rights reserved.
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
                            osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/IO::Socket::UNIX5.16.3pm                     0100644 0001750 0001750 00000013423 12566207435 024354  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "IO::Socket::UNIX 3pm"
.TH IO::Socket::UNIX 3pm "2013-03-04" "perl v5.16.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
IO::Socket::UNIX \- Object interface for AF_UNIX domain sockets
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use IO::Socket::UNIX;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`IO::Socket::UNIX\*(C'\fR provides an object interface to creating and using sockets
in the \s-1AF_UNIX\s0 domain. It is built upon the IO::Socket interface and
inherits all the methods defined by IO::Socket.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.IP "new ( [\s-1ARGS\s0] )" 4
.IX Item "new ( [ARGS] )"
Creates an \f(CW\*(C`IO::Socket::UNIX\*(C'\fR object, which is a reference to a
newly created symbol (see the \f(CW\*(C`Symbol\*(C'\fR package). \f(CW\*(C`new\*(C'\fR
optionally takes arguments, these arguments are in key-value pairs.
.Sp
In addition to the key-value pairs accepted by IO::Socket,
\&\f(CW\*(C`IO::Socket::UNIX\*(C'\fR provides.
.Sp
.Vb 4
\&    Type        Type of socket (eg SOCK_STREAM or SOCK_DGRAM)
\&    Local       Path to local fifo
\&    Peer        Path to peer fifo
\&    Listen      Create a listen socket
.Ve
.Sp
If the constructor is only passed a single argument, it is assumed to
be a \f(CW\*(C`Peer\*(C'\fR specification.
.Sp
.Vb 1
\& NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE
.Ve
.Sp
As of \s-1VERSION\s0 1.18 all IO::Socket objects have autoflush turned on
by default. This was not the case with earlier releases.
.Sp
.Vb 1
\& NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE
.Ve
.SH "METHODS"
.IX Header "METHODS"
.IP "\fIhostpath()\fR" 4
.IX Item "hostpath()"
Returns the pathname to the fifo at the local end
.IP "\fIpeerpath()\fR" 4
.IX Item "peerpath()"
Returns the pathanme to the fifo at the peer end
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Socket, IO::Socket
.SH "AUTHOR"
.IX Header "AUTHOR"
Graham Barr. Currently maintained by the Perl Porters.  Please report all
bugs to <perlbug@perl.org>.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 1996\-8 Graham Barr <gbarr@pobox.com>. All rights reserved.
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
                                                                                                                                                                                                                                             osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/IO::Socket::UNIX5.18.3pm                     0100644 0001750 0001750 00000013744 12566207456 024367  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "IO::Socket::UNIX 3pm"
.TH IO::Socket::UNIX 3pm "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
IO::Socket::UNIX \- Object interface for AF_UNIX domain sockets
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use IO::Socket::UNIX;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`IO::Socket::UNIX\*(C'\fR provides an object interface to creating and using sockets
in the \s-1AF_UNIX\s0 domain. It is built upon the IO::Socket interface and
inherits all the methods defined by IO::Socket.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.IP "new ( [\s-1ARGS\s0] )" 4
.IX Item "new ( [ARGS] )"
Creates an \f(CW\*(C`IO::Socket::UNIX\*(C'\fR object, which is a reference to a
newly created symbol (see the \f(CW\*(C`Symbol\*(C'\fR package). \f(CW\*(C`new\*(C'\fR
optionally takes arguments, these arguments are in key-value pairs.
.Sp
In addition to the key-value pairs accepted by IO::Socket,
\&\f(CW\*(C`IO::Socket::UNIX\*(C'\fR provides.
.Sp
.Vb 4
\&    Type        Type of socket (eg SOCK_STREAM or SOCK_DGRAM)
\&    Local       Path to local fifo
\&    Peer        Path to peer fifo
\&    Listen      Create a listen socket
.Ve
.Sp
If the constructor is only passed a single argument, it is assumed to
be a \f(CW\*(C`Peer\*(C'\fR specification.
.Sp
.Vb 1
\& NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE
.Ve
.Sp
As of \s-1VERSION 1.18\s0 all IO::Socket objects have autoflush turned on
by default. This was not the case with earlier releases.
.Sp
.Vb 1
\& NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE
.Ve
.SH "METHODS"
.IX Header "METHODS"
.IP "\fIhostpath()\fR" 4
.IX Item "hostpath()"
Returns the pathname to the fifo at the local end
.IP "\fIpeerpath()\fR" 4
.IX Item "peerpath()"
Returns the pathanme to the fifo at the peer end
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Socket, IO::Socket
.SH "AUTHOR"
.IX Header "AUTHOR"
Graham Barr. Currently maintained by the Perl Porters.  Please report all
bugs to <perlbug@perl.org>.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 1996\-8 Graham Barr <gbarr@pobox.com>. All rights reserved.
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
                            osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/IO::String.3pm                               0100644 0001750 0001750 00000021270 12566241426 023165  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "String 3"
.TH String 3 "2005-12-05" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
IO::String \- Emulate file interface for in\-core strings
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\& use IO::String;
\& $io = IO::String\->new;
\& $io = IO::String\->new($var);
\& tie *IO, \*(AqIO::String\*(Aq;
\&
\& # read data
\& <$io>;
\& $io\->getline;
\& read($io, $buf, 100);
\&
\& # write data
\& print $io "string\en";
\& $io\->print(@data);
\& syswrite($io, $buf, 100);
\&
\& select $io;
\& printf "Some text %s\en", $str;
\&
\& # seek
\& $pos = $io\->getpos;
\& $io\->setpos(0);        # rewind
\& $io\->seek(\-30, \-1);
\& seek($io, 0, 0);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \f(CW\*(C`IO::String\*(C'\fR module provides the \f(CW\*(C`IO::File\*(C'\fR interface for in-core
strings.  An \f(CW\*(C`IO::String\*(C'\fR object can be attached to a string, and
makes it possible to use the normal file operations for reading or
writing data, as well as for seeking to various locations of the string.
This is useful when you want to use a library module that only
provides an interface to file handles on data that you have in a string
variable.
.PP
Note that perl\-5.8 and better has built-in support for \*(L"in memory\*(R"
files, which are set up by passing a reference instead of a filename
to the \fIopen()\fR call. The reason for using this module is that it
makes the code backwards compatible with older versions of Perl.
.PP
The \f(CW\*(C`IO::String\*(C'\fR module provides an interface compatible with
\&\f(CW\*(C`IO::File\*(C'\fR as distributed with \fI\s-1IO\-1.20\s0\fR, but the following methods
are not available: new_from_fd, fdopen, format_write,
format_page_number, format_lines_per_page, format_lines_left,
format_name, format_top_name.
.PP
The following methods are specific to the \f(CW\*(C`IO::String\*(C'\fR class:
.ie n .IP "$io = IO::String\->new" 4
.el .IP "\f(CW$io\fR = IO::String\->new" 4
.IX Item "$io = IO::String->new"
.PD 0
.ie n .IP "$io = IO::String\->new( $string )" 4
.el .IP "\f(CW$io\fR = IO::String\->new( \f(CW$string\fR )" 4
.IX Item "$io = IO::String->new( $string )"
.PD
The constructor returns a newly-created \f(CW\*(C`IO::String\*(C'\fR object.  It
takes an optional argument, which is the string to read from or write
into.  If no \f(CW$string\fR argument is given, then an internal buffer
(initially empty) is allocated.
.Sp
The \f(CW\*(C`IO::String\*(C'\fR object returned is tied to itself.  This means
that you can use most Perl I/O built-ins on it too: readline, <>, getc,
print, printf, syswrite, sysread, close.
.ie n .IP "$io\->open" 4
.el .IP "\f(CW$io\fR\->open" 4
.IX Item "$io->open"
.PD 0
.ie n .IP "$io\->open( $string )" 4
.el .IP "\f(CW$io\fR\->open( \f(CW$string\fR )" 4
.IX Item "$io->open( $string )"
.PD
Attaches an existing IO::String object to some other \f(CW$string\fR, or
allocates a new internal buffer (if no argument is given).  The
position is reset to 0.
.ie n .IP "$io\->string_ref" 4
.el .IP "\f(CW$io\fR\->string_ref" 4
.IX Item "$io->string_ref"
Returns a reference to the string that is attached to
the \f(CW\*(C`IO::String\*(C'\fR object.  Most useful when you let the \f(CW\*(C`IO::String\*(C'\fR
create an internal buffer to write into.
.ie n .IP "$io\->pad" 4
.el .IP "\f(CW$io\fR\->pad" 4
.IX Item "$io->pad"
.PD 0
.ie n .IP "$io\->pad( $char )" 4
.el .IP "\f(CW$io\fR\->pad( \f(CW$char\fR )" 4
.IX Item "$io->pad( $char )"
.PD
Specifies the padding to use if
the string is extended by either the \fIseek()\fR or \fItruncate()\fR methods.  It
is a single character and defaults to \*(L"\e0\*(R".
.ie n .IP "$io\->pos" 4
.el .IP "\f(CW$io\fR\->pos" 4
.IX Item "$io->pos"
.PD 0
.ie n .IP "$io\->pos( $newpos )" 4
.el .IP "\f(CW$io\fR\->pos( \f(CW$newpos\fR )" 4
.IX Item "$io->pos( $newpos )"
.PD
Yet another interface for reading and setting the current read/write
position within the string (the normal getpos/setpos/tell/seek
methods are also available).  The \fIpos()\fR method always returns the
old position, and if you pass it an argument it sets the new
position.
.Sp
There is (deliberately) a difference between the \fIsetpos()\fR and \fIseek()\fR
methods in that \fIseek()\fR extends the string (with the specified
padding) if you go to a location past the end, whereas \fIsetpos()\fR
just snaps back to the end.  If \fItruncate()\fR is used to extend the string,
then it works as \fIseek()\fR.
.SH "BUGS"
.IX Header "BUGS"
In Perl versions < 5.6, the \s-1TIEHANDLE\s0 interface was incomplete.
If you use such a Perl, then \fIseek()\fR, \fItell()\fR, \fIeof()\fR, \fIfileno()\fR, \fIbinmode()\fR will
not do anything on an \f(CW\*(C`IO::String\*(C'\fR handle.  See perltie for
details.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
IO::File, IO::Stringy, \*(L"open\*(R" in perlfunc
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 1998\-2005 Gisle Aas.
.PP
This library is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
                                                                                                                                                                                                                                                                                                                                        osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/IO::String5.16.3pm                           0100644 0001750 0001750 00000020747 12566241426 023507  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "String 3"
.TH String 3 "2005-12-05" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
IO::String \- Emulate file interface for in\-core strings
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\& use IO::String;
\& $io = IO::String\->new;
\& $io = IO::String\->new($var);
\& tie *IO, \*(AqIO::String\*(Aq;
\&
\& # read data
\& <$io>;
\& $io\->getline;
\& read($io, $buf, 100);
\&
\& # write data
\& print $io "string\en";
\& $io\->print(@data);
\& syswrite($io, $buf, 100);
\&
\& select $io;
\& printf "Some text %s\en", $str;
\&
\& # seek
\& $pos = $io\->getpos;
\& $io\->setpos(0);        # rewind
\& $io\->seek(\-30, \-1);
\& seek($io, 0, 0);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \f(CW\*(C`IO::String\*(C'\fR module provides the \f(CW\*(C`IO::File\*(C'\fR interface for in-core
strings.  An \f(CW\*(C`IO::String\*(C'\fR object can be attached to a string, and
makes it possible to use the normal file operations for reading or
writing data, as well as for seeking to various locations of the string.
This is useful when you want to use a library module that only
provides an interface to file handles on data that you have in a string
variable.
.PP
Note that perl\-5.8 and better has built-in support for \*(L"in memory\*(R"
files, which are set up by passing a reference instead of a filename
to the \fIopen()\fR call. The reason for using this module is that it
makes the code backwards compatible with older versions of Perl.
.PP
The \f(CW\*(C`IO::String\*(C'\fR module provides an interface compatible with
\&\f(CW\*(C`IO::File\*(C'\fR as distributed with \fI\s-1IO\-1\s0.20\fR, but the following methods
are not available: new_from_fd, fdopen, format_write,
format_page_number, format_lines_per_page, format_lines_left,
format_name, format_top_name.
.PP
The following methods are specific to the \f(CW\*(C`IO::String\*(C'\fR class:
.ie n .IP "$io = IO::String\->new" 4
.el .IP "\f(CW$io\fR = IO::String\->new" 4
.IX Item "$io = IO::String->new"
.PD 0
.ie n .IP "$io = IO::String\->new( $string )" 4
.el .IP "\f(CW$io\fR = IO::String\->new( \f(CW$string\fR )" 4
.IX Item "$io = IO::String->new( $string )"
.PD
The constructor returns a newly-created \f(CW\*(C`IO::String\*(C'\fR object.  It
takes an optional argument, which is the string to read from or write
into.  If no \f(CW$string\fR argument is given, then an internal buffer
(initially empty) is allocated.
.Sp
The \f(CW\*(C`IO::String\*(C'\fR object returned is tied to itself.  This means
that you can use most Perl I/O built-ins on it too: readline, <>, getc,
print, printf, syswrite, sysread, close.
.ie n .IP "$io\->open" 4
.el .IP "\f(CW$io\fR\->open" 4
.IX Item "$io->open"
.PD 0
.ie n .IP "$io\->open( $string )" 4
.el .IP "\f(CW$io\fR\->open( \f(CW$string\fR )" 4
.IX Item "$io->open( $string )"
.PD
Attaches an existing IO::String object to some other \f(CW$string\fR, or
allocates a new internal buffer (if no argument is given).  The
position is reset to 0.
.ie n .IP "$io\->string_ref" 4
.el .IP "\f(CW$io\fR\->string_ref" 4
.IX Item "$io->string_ref"
Returns a reference to the string that is attached to
the \f(CW\*(C`IO::String\*(C'\fR object.  Most useful when you let the \f(CW\*(C`IO::String\*(C'\fR
create an internal buffer to write into.
.ie n .IP "$io\->pad" 4
.el .IP "\f(CW$io\fR\->pad" 4
.IX Item "$io->pad"
.PD 0
.ie n .IP "$io\->pad( $char )" 4
.el .IP "\f(CW$io\fR\->pad( \f(CW$char\fR )" 4
.IX Item "$io->pad( $char )"
.PD
Specifies the padding to use if
the string is extended by either the \fIseek()\fR or \fItruncate()\fR methods.  It
is a single character and defaults to \*(L"\e0\*(R".
.ie n .IP "$io\->pos" 4
.el .IP "\f(CW$io\fR\->pos" 4
.IX Item "$io->pos"
.PD 0
.ie n .IP "$io\->pos( $newpos )" 4
.el .IP "\f(CW$io\fR\->pos( \f(CW$newpos\fR )" 4
.IX Item "$io->pos( $newpos )"
.PD
Yet another interface for reading and setting the current read/write
position within the string (the normal getpos/setpos/tell/seek
methods are also available).  The \fIpos()\fR method always returns the
old position, and if you pass it an argument it sets the new
position.
.Sp
There is (deliberately) a difference between the \fIsetpos()\fR and \fIseek()\fR
methods in that \fIseek()\fR extends the string (with the specified
padding) if you go to a location past the end, whereas \fIsetpos()\fR
just snaps back to the end.  If \fItruncate()\fR is used to extend the string,
then it works as \fIseek()\fR.
.SH "BUGS"
.IX Header "BUGS"
In Perl versions < 5.6, the \s-1TIEHANDLE\s0 interface was incomplete.
If you use such a Perl, then \fIseek()\fR, \fItell()\fR, \fIeof()\fR, \fIfileno()\fR, \fIbinmode()\fR will
not do anything on an \f(CW\*(C`IO::String\*(C'\fR handle.  See perltie for
details.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
IO::File, IO::Stringy, \*(L"open\*(R" in perlfunc
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 1998\-2005 Gisle Aas.
.PP
This library is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
                         osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/IO::String5.18.3pm                           0100644 0001750 0001750 00000021270 12566241426 023501  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "String 3"
.TH String 3 "2005-12-05" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
IO::String \- Emulate file interface for in\-core strings
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\& use IO::String;
\& $io = IO::String\->new;
\& $io = IO::String\->new($var);
\& tie *IO, \*(AqIO::String\*(Aq;
\&
\& # read data
\& <$io>;
\& $io\->getline;
\& read($io, $buf, 100);
\&
\& # write data
\& print $io "string\en";
\& $io\->print(@data);
\& syswrite($io, $buf, 100);
\&
\& select $io;
\& printf "Some text %s\en", $str;
\&
\& # seek
\& $pos = $io\->getpos;
\& $io\->setpos(0);        # rewind
\& $io\->seek(\-30, \-1);
\& seek($io, 0, 0);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \f(CW\*(C`IO::String\*(C'\fR module provides the \f(CW\*(C`IO::File\*(C'\fR interface for in-core
strings.  An \f(CW\*(C`IO::String\*(C'\fR object can be attached to a string, and
makes it possible to use the normal file operations for reading or
writing data, as well as for seeking to various locations of the string.
This is useful when you want to use a library module that only
provides an interface to file handles on data that you have in a string
variable.
.PP
Note that perl\-5.8 and better has built-in support for \*(L"in memory\*(R"
files, which are set up by passing a reference instead of a filename
to the \fIopen()\fR call. The reason for using this module is that it
makes the code backwards compatible with older versions of Perl.
.PP
The \f(CW\*(C`IO::String\*(C'\fR module provides an interface compatible with
\&\f(CW\*(C`IO::File\*(C'\fR as distributed with \fI\s-1IO\-1.20\s0\fR, but the following methods
are not available: new_from_fd, fdopen, format_write,
format_page_number, format_lines_per_page, format_lines_left,
format_name, format_top_name.
.PP
The following methods are specific to the \f(CW\*(C`IO::String\*(C'\fR class:
.ie n .IP "$io = IO::String\->new" 4
.el .IP "\f(CW$io\fR = IO::String\->new" 4
.IX Item "$io = IO::String->new"
.PD 0
.ie n .IP "$io = IO::String\->new( $string )" 4
.el .IP "\f(CW$io\fR = IO::String\->new( \f(CW$string\fR )" 4
.IX Item "$io = IO::String->new( $string )"
.PD
The constructor returns a newly-created \f(CW\*(C`IO::String\*(C'\fR object.  It
takes an optional argument, which is the string to read from or write
into.  If no \f(CW$string\fR argument is given, then an internal buffer
(initially empty) is allocated.
.Sp
The \f(CW\*(C`IO::String\*(C'\fR object returned is tied to itself.  This means
that you can use most Perl I/O built-ins on it too: readline, <>, getc,
print, printf, syswrite, sysread, close.
.ie n .IP "$io\->open" 4
.el .IP "\f(CW$io\fR\->open" 4
.IX Item "$io->open"
.PD 0
.ie n .IP "$io\->open( $string )" 4
.el .IP "\f(CW$io\fR\->open( \f(CW$string\fR )" 4
.IX Item "$io->open( $string )"
.PD
Attaches an existing IO::String object to some other \f(CW$string\fR, or
allocates a new internal buffer (if no argument is given).  The
position is reset to 0.
.ie n .IP "$io\->string_ref" 4
.el .IP "\f(CW$io\fR\->string_ref" 4
.IX Item "$io->string_ref"
Returns a reference to the string that is attached to
the \f(CW\*(C`IO::String\*(C'\fR object.  Most useful when you let the \f(CW\*(C`IO::String\*(C'\fR
create an internal buffer to write into.
.ie n .IP "$io\->pad" 4
.el .IP "\f(CW$io\fR\->pad" 4
.IX Item "$io->pad"
.PD 0
.ie n .IP "$io\->pad( $char )" 4
.el .IP "\f(CW$io\fR\->pad( \f(CW$char\fR )" 4
.IX Item "$io->pad( $char )"
.PD
Specifies the padding to use if
the string is extended by either the \fIseek()\fR or \fItruncate()\fR methods.  It
is a single character and defaults to \*(L"\e0\*(R".
.ie n .IP "$io\->pos" 4
.el .IP "\f(CW$io\fR\->pos" 4
.IX Item "$io->pos"
.PD 0
.ie n .IP "$io\->pos( $newpos )" 4
.el .IP "\f(CW$io\fR\->pos( \f(CW$newpos\fR )" 4
.IX Item "$io->pos( $newpos )"
.PD
Yet another interface for reading and setting the current read/write
position within the string (the normal getpos/setpos/tell/seek
methods are also available).  The \fIpos()\fR method always returns the
old position, and if you pass it an argument it sets the new
position.
.Sp
There is (deliberately) a difference between the \fIsetpos()\fR and \fIseek()\fR
methods in that \fIseek()\fR extends the string (with the specified
padding) if you go to a location past the end, whereas \fIsetpos()\fR
just snaps back to the end.  If \fItruncate()\fR is used to extend the string,
then it works as \fIseek()\fR.
.SH "BUGS"
.IX Header "BUGS"
In Perl versions < 5.6, the \s-1TIEHANDLE\s0 interface was incomplete.
If you use such a Perl, then \fIseek()\fR, \fItell()\fR, \fIeof()\fR, \fIfileno()\fR, \fIbinmode()\fR will
not do anything on an \f(CW\*(C`IO::String\*(C'\fR handle.  See perltie for
details.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
IO::File, IO::Stringy, \*(L"open\*(R" in perlfunc
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 1998\-2005 Gisle Aas.
.PP
This library is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
                                                                                                                                                                                                                                                                                                                                        osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/IO::Stringy.3pm                              0100644 0001750 0001750 00000044555 12566241447 023374  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "IO::Stringy 3"
.TH IO::Stringy 3 "2005-02-10" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
IO\-stringy \- I/O on in\-core objects like strings and arrays
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 7
\&    IO::
\&    ::AtomicFile   adpO  Write a file which is updated atomically     ERYQ
\&    ::Lines        bdpO  I/O handle to read/write to array of lines   ERYQ
\&    ::Scalar       RdpO  I/O handle to read/write to a string         ERYQ
\&    ::ScalarArray  RdpO  I/O handle to read/write to array of scalars ERYQ
\&    ::Wrap         RdpO  Wrap old\-style FHs in standard OO interface  ERYQ
\&    ::WrapTie      adpO  Tie your handles & retain full OO interface  ERYQ
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This toolkit primarily provides modules for performing both traditional
and object-oriented i/o) on things \fIother\fR than normal filehandles;
in particular, IO::Scalar, IO::ScalarArray,
and IO::Lines.
.PP
In the more-traditional IO::Handle front, we
have IO::AtomicFile
which may be used to painlessly create files which are updated
atomically.
.PP
And in the \*(L"this-may-prove-useful\*(R" corner, we have IO::Wrap,
whose exported \fIwraphandle()\fR function will clothe anything that's not
a blessed object in an IO::Handle\-like wrapper... so you can just
use \s-1OO\s0 syntax and stop worrying about whether your function's caller
handed you a string, a globref, or a FileHandle.
.SH "WARNINGS"
.IX Header "WARNINGS"
Perl's \s-1TIEHANDLE\s0 spec was incomplete prior to 5.005_57;
it was missing support for \f(CW\*(C`seek()\*(C'\fR, \f(CW\*(C`tell()\*(C'\fR, and \f(CW\*(C`eof()\*(C'\fR.
Attempting to use these functions with an IO::Scalar, IO::ScalarArray,
IO::Lines, etc. \fBwill not work\fR prior to 5.005_57.
None of the relevant methods will be invoked by Perl;
and even worse, this kind of bug can lie dormant for a while.
If you turn warnings on (via \f(CW$^W\fR or \f(CW\*(C`perl \-w\*(C'\fR), and you see
something like this...
.PP
.Vb 1
\&    seek() on unopened file
.Ve
.PP
\&...then you are probably trying to use one of these functions
on one of our \s-1IO::\s0 classes with an old Perl.  The remedy is to simply
use the \s-1OO\s0 version; e.g.:
.PP
.Vb 2
\&    $SH\->seek(0,0);    ### GOOD: will work on any 5.005
\&    seek($SH,0,0);     ### WARNING: will only work on 5.005_57 and beyond
.Ve
.SH "INSTALLATION"
.IX Header "INSTALLATION"
.SS "Requirements"
.IX Subsection "Requirements"
As of version 2.x, this toolkit requires Perl 5.005 for
the IO::Handle subclasses, and 5.005_57 or better is
\&\fBstrongly\fR recommended.  See \*(L"\s-1WARNINGS\*(R"\s0 for details.
.SS "Directions"
.IX Subsection "Directions"
Most of you already know the drill...
.PP
.Vb 4
\&    perl Makefile.PL
\&    make
\&    make test
\&    make install
.Ve
.PP
For everyone else out there...
if you've never installed Perl code before, or you're trying to use
this in an environment where your sysadmin or \s-1ISP\s0 won't let you do
interesting things, \fBrelax:\fR since this module contains no binary
extensions, you can cheat.  That means copying the directory tree
under my \*(L"./lib\*(R" directory into someplace where your script can \*(L"see\*(R"
it.  For example, under Linux:
.PP
.Vb 1
\&    cp \-r IO\-stringy\-1.234/lib/* /path/to/my/perl/
.Ve
.PP
Now, in your Perl code, do this:
.PP
.Vb 2
\&    use lib "/path/to/my/perl";
\&    use IO::Scalar;                   ### or whatever
.Ve
.PP
Ok, now you've been told.  At this point, anyone who whines about
not being given enough information gets an unflattering haiku
written about them in the next change log.  I'll do it.
Don't think I won't.
.SH "VERSION"
.IX Header "VERSION"
\&\f(CW$Id:\fR Stringy.pm,v 1.3 2005/02/10 21:24:05 dfs Exp $
.SH "TO DO"
.IX Header "TO DO"
.IP "(2000/08/02)  Finalize $/ support" 4
.IX Item "(2000/08/02) Finalize $/ support"
Graham Barr submitted this patch half a \fIyear\fR ago;
Like a moron, I lost his message under a ton of others,
and only now have the experimental implementation done.
.Sp
Will the sudden sensitivity to $/ hose anyone out there?
I'm worried, so you have to enable it explicitly in 1.x.
It will be on by default in 2.x, though only IO::Scalar
has been implemented.
.IP "(2001/08/08)  Remove IO::WrapTie from new \s-1IO::\s0 classes" 4
.IX Item "(2001/08/08) Remove IO::WrapTie from new IO:: classes"
It's not needed.  Backwards compatibility could be maintained
by having \fInew_tie()\fR be identical to \fInew()\fR.  Heck, I'll bet
that IO::WrapTie should be reimplemented so the returned
object is just like an IO::Scalar in its use of globrefs.
.SH "CHANGE LOG"
.IX Header "CHANGE LOG"
.IP "Version 2.110   (2005/02/10)" 4
.IX Item "Version 2.110 (2005/02/10)"
Maintainership taken over by \s-1DSKOLL\s0 <dfs@roaringpenguin.com>
.Sp
Closed the following bugs at
https://rt.cpan.org/NoAuth/Bugs.html?Dist=IO\-stringy:
.IP "" 4
2208 IO::ScalarArray\->getline does not return undef for \s-1EOF\s0 if undef($/)
.IP "" 4
7132 IO\-stringy/Makefile.PL bug \- name should be module name
.IP "" 4
11249 IO::Scalar flush shouldn't return undef
.IP "" 4
2172 $\e (output record separator) not respected
.IP "" 4
8605 \fIIO::InnerFile::seek()\fR should return 1 on success
.IP "" 4
4798 *.html in lib/
.IP "" 4
4369 Improvement: handling of fixed-size reads in IO::Scalar
.Sp
(Actually, bug 4369 was closed in Version 2.109)
.IP "Version 2.109   (2003/12/21)" 4
.IX Item "Version 2.109 (2003/12/21)"
IO::Scalar::getline now works with ref to int.
\&\fIThanks to Dominique Quatravaux for this patch.\fR
.IP "Version 2.108   (2001/08/20)" 4
.IX Item "Version 2.108 (2001/08/20)"
The terms-of-use have been placed in the distribution file \*(L"\s-1COPYING\*(R".\s0
Also, small documentation tweaks were made.
.IP "Version 2.105   (2001/08/09)" 4
.IX Item "Version 2.105 (2001/08/09)"
Added support for various \fIseek()\fR whences to IO::ScalarArray.
.Sp
Added support for consulting $/ in IO::Scalar and IO::ScalarArray.
The old \f(CW\*(C`use_RS()\*(C'\fR is not even an option.
Unsupported record separators will cause a \fIcroak()\fR.
.Sp
Added a lot of regression tests to supoprt the above.
.Sp
Better on-line docs (hyperlinks to individual functions).
.IP "Version 2.103   (2001/08/08)" 4
.IX Item "Version 2.103 (2001/08/08)"
After sober consideration I have reimplemented \fIIO::Scalar::print()\fR
so that it once again always seeks to the end of the string.
Benchmarks show the new implementation to be just as fast as
Juergen's contributed patch; until someone can convince me otherwise,
the current, safer implementation stays.
.Sp
I thought more about giving IO::Scalar two separate handles,
one for reading and one for writing, as suggested by Binkley.
His points about what \fItell()\fR and \fIeof()\fR return are, I think,
show-stoppers for this feature.  Even the manpages for stdio's \fIfseek()\fR
seem to imply a \fIsingle\fR file position indicator, not two.
So I think I will take this off the \s-1TO DO\s0 list.
\&\fBRemedy:\fR you can always have two handles open on the same
scalar, one which you only write to, and one which you only read from.
That should give the same effect.
.IP "Version 2.101   (2001/08/07)" 4
.IX Item "Version 2.101 (2001/08/07)"
\&\fBAlpha release.\fR
This is the initial release of the \*(L"IO::Scalar and friends are
now subclasses of IO::Handle\*(R".  I'm flinging it against the wall.
Please tell me if the banana sticks.  When it does, the banana
will be called 2.2x.
.Sp
First off, \fImany many thanks to Doug Wilson\fR, who
has provided an \fIinvaluable\fR service by patching IO::Scalar
and friends so that they (1) inherit from IO::Handle, (2) automatically
tie themselves so that the \f(CW\*(C`new()\*(C'\fR objects can be used in native i/o
constructs, and (3) doing it so that the whole damn thing passes
its regression tests.  As Doug knows, my globref Kung-Fu was not
up to the task; he graciously provided the patches.  This has earned
him a seat at the Co-Authors table, and the
right to have me address him as \fIsensei\fR.
.Sp
Performance of \fIIO::Scalar::print()\fR has been improved by as much as 2x
for lots of little prints, with the cost of forcing those
who print-then-seek-then-print to explicitly seek to end-of-string
before printing again.
\&\fIThanks to Juergen Zeller for this patch.\fR
.Sp
Added the \s-1COPYING\s0 file, which had been missing from prior versions.
\&\fIThanks to Albert Chin-A-Young for pointing this out.\fR
.Sp
IO::Scalar consults $/ by default (1.x ignored it by default).
Yes, I still need to support IO::ScalarArray.
.IP "Version 1.221   (2001/08/07)" 4
.IX Item "Version 1.221 (2001/08/07)"
I threatened in \*(L"\s-1INSTALLATION\*(R"\s0 to write an unflattering haiku
about anyone who whined that I gave them insufficient information...
but it turns out that I left out a crucial direction.  D'\s-1OH\s0!
\&\fIThanks to David Beroff for the \*(L"patch\*(R" and the haiku...\fR
.Sp
.Vb 3
\&       Enough info there?
\&         Here\*(Aqs unflattering haiku:
\&       Forgot the line, "make"!  ;\-)
.Ve
.IP "Version 1.220   (2001/04/03)" 4
.IX Item "Version 1.220 (2001/04/03)"
Added untested \s-1SEEK, TELL,\s0 and \s-1EOF\s0 methods to IO::Scalar
and IO::ScalarArray to support corresponding functions for
tied filehandles: untested, because I'm still running 5.00556
and Perl is complaining about \*(L"\fItell()\fR on unopened file\*(R".
\&\fIThanks to Graham Barr for the suggestion.\fR
.Sp
Removed not-fully-blank lines from modules; these were causing
lots of POD-related warnings.
\&\fIThanks to Nicolas Joly for the suggestion.\fR
.IP "Version 1.219   (2001/02/23)" 4
.IX Item "Version 1.219 (2001/02/23)"
IO::Scalar objects can now be made sensitive to $/ .
Pains were taken to keep the fast code fast while adding this feature.
\&\fICheers to Graham Barr for submitting his patch;
jeers to me for losing his email for 6 months.\fR
.IP "Version 1.218   (2001/02/23)" 4
.IX Item "Version 1.218 (2001/02/23)"
IO::Scalar has a new \fIsysseek()\fR method.
\&\fIThanks again to Richard Jones.\fR
.Sp
New \*(L"\s-1TO DO\*(R"\s0 section, because people who submit patches/ideas should
at least know that they're in the system... and that I won't lose
their stuff.  Please read it.
.Sp
New entries in \*(L"\s-1AUTHOR\*(R"\s0.
Please read those too.
.IP "Version 1.216   (2000/09/28)" 4
.IX Item "Version 1.216 (2000/09/28)"
\&\fBIO::Scalar and IO::ScalarArray now inherit from IO::Handle.\fR
I thought I'd remembered a problem with this ages ago, related to
the fact that these \s-1IO::\s0 modules don't have \*(L"real\*(R" filehandles,
but the problem apparently isn't surfacing now.
If you suddenly encounter Perl warnings during global destruction
(especially if you're using tied filehandles), then please let me know!
\&\fIThanks to B. K. Oxley (binkley) for this.\fR
.Sp
\&\fBNasty bug fixed in \f(BIIO::Scalar::write()\fB.\fR
Apparently, the offset and the number-of-bytes arguments were,
for all practical purposes, \fIreversed.\fR  You were okay if
you did all your writing with \fIprint()\fR, but boy was \fIthis\fR a stupid bug!
\&\fIThanks to Richard Jones for finding this one.
For you, Rich, a double-length haiku:\fR
.Sp
.Vb 3
\&       Newspaper headline
\&          typeset by dyslexic man
\&       loses urgency
\&
\&       BABY EATS FISH is
\&          simply not equivalent
\&       to FISH EATS BABY
.Ve
.Sp
\&\fBNew sysread and syswrite methods for IO::Scalar.\fR
\&\fIThanks again to Richard Jones for this.\fR
.IP "Version 1.215   (2000/09/05)" 4
.IX Item "Version 1.215 (2000/09/05)"
Added 'bool' overload to '""' overload, so object always evaluates
to true.  (Whew.  Glad I caught this before it went to \s-1CPAN.\s0)
.IP "Version 1.214   (2000/09/03)" 4
.IX Item "Version 1.214 (2000/09/03)"
Evaluating an IO::Scalar in a string context now yields
the underlying string.
\&\fIThanks to B. K. Oxley (binkley) for this.\fR
.IP "Version 1.213   (2000/08/16)" 4
.IX Item "Version 1.213 (2000/08/16)"
Minor documentation fixes.
.IP "Version 1.212   (2000/06/02)" 4
.IX Item "Version 1.212 (2000/06/02)"
Fixed IO::InnerFile incompatibility with Perl5.004.
\&\fIThanks to many folks for reporting this.\fR
.IP "Version 1.210   (2000/04/17)" 4
.IX Item "Version 1.210 (2000/04/17)"
Added \fIflush()\fR and other no-op methods.
\&\fIThanks to Doru Petrescu for suggesting this.\fR
.IP "Version 1.209   (2000/03/17)" 4
.IX Item "Version 1.209 (2000/03/17)"
Small bug fixes.
.IP "Version 1.208   (2000/03/14)" 4
.IX Item "Version 1.208 (2000/03/14)"
Incorporated a number of contributed patches and extensions,
mostly related to speed hacks, support for \*(L"offset\*(R", and
\&\s-1WRITE/CLOSE\s0 methods.
\&\fIThanks to Richard Jones, Doru Petrescu, and many others.\fR
.IP "Version 1.206   (1999/04/18)" 4
.IX Item "Version 1.206 (1999/04/18)"
Added creation of ./testout when Makefile.PL is run.
.IP "Version 1.205   (1999/01/15)" 4
.IX Item "Version 1.205 (1999/01/15)"
Verified for Perl5.005.
.IP "Version 1.202   (1998/04/18)" 4
.IX Item "Version 1.202 (1998/04/18)"
New IO::WrapTie and IO::AtomicFile added.
.IP "Version 1.110" 4
.IX Item "Version 1.110"
Added IO::WrapTie.
.IP "Version 1.107" 4
.IX Item "Version 1.107"
Added IO::Lines, and made some bug fixes to IO::ScalarArray.
Also, added \fIgetc()\fR.
.IP "Version 1.105" 4
.IX Item "Version 1.105"
No real changes; just upgraded IO::Wrap to have a \f(CW$VERSION\fR string.
.SH "AUTHOR"
.IX Header "AUTHOR"
.IP "Primary Maintainer" 4
.IX Item "Primary Maintainer"
David F. Skoll (\fIdfs@roaringpenguin.com\fR).
.IP "Original Author" 4
.IX Item "Original Author"
Eryq (\fIeryq@zeegee.com\fR).
President, ZeeGee Software Inc (\fIhttp://www.zeegee.com\fR).
.IP "Co-Authors" 4
.IX Item "Co-Authors"
For all their bug reports and patch submissions, the following
are officially recognized:
.Sp
.Vb 4
\&     Richard Jones
\&     B. K. Oxley (binkley)
\&     Doru Petrescu
\&     Doug Wilson (for picking up the ball I dropped, and doing tie() right)
.Ve
.PP
Go to \fIhttp://www.zeegee.com\fR for the latest downloads
and on-line documentation for this module.
.PP
Enjoy.  Yell if it breaks.
.SH "POD ERRORS"
.IX Header "POD ERRORS"
Hey! \fBThe above document had some coding errors, which are explained below:\fR
.IP "Around line 153:" 4
.IX Item "Around line 153:"
Expected text after =item, not a bullet
.IP "Around line 157:" 4
.IX Item "Around line 157:"
Expected text after =item, not a bullet
.IP "Around line 161:" 4
.IX Item "Around line 161:"
Expected text after =item, not a bullet
.IP "Around line 165:" 4
.IX Item "Around line 165:"
Expected text after =item, not a bullet
.IP "Around line 169:" 4
.IX Item "Around line 169:"
Expected text after =item, not a bullet
.IP "Around line 173:" 4
.IX Item "Around line 173:"
Expected text after =item, not a bullet
.IP "Around line 177:" 4
.IX Item "Around line 177:"
Expected text after =item, not a bullet
                                                                                                                                                   osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/IO::Stringy5.16.3pm                          0100644 0001750 0001750 00000042730 12566241447 023677  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "IO::Stringy 3"
.TH IO::Stringy 3 "2005-02-10" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
IO\-stringy \- I/O on in\-core objects like strings and arrays
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 7
\&    IO::
\&    ::AtomicFile   adpO  Write a file which is updated atomically     ERYQ
\&    ::Lines        bdpO  I/O handle to read/write to array of lines   ERYQ
\&    ::Scalar       RdpO  I/O handle to read/write to a string         ERYQ
\&    ::ScalarArray  RdpO  I/O handle to read/write to array of scalars ERYQ
\&    ::Wrap         RdpO  Wrap old\-style FHs in standard OO interface  ERYQ
\&    ::WrapTie      adpO  Tie your handles & retain full OO interface  ERYQ
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This toolkit primarily provides modules for performing both traditional
and object-oriented i/o) on things \fIother\fR than normal filehandles;
in particular, IO::Scalar, IO::ScalarArray,
and IO::Lines.
.PP
In the more-traditional IO::Handle front, we
have IO::AtomicFile
which may be used to painlessly create files which are updated
atomically.
.PP
And in the \*(L"this-may-prove-useful\*(R" corner, we have IO::Wrap,
whose exported \fIwraphandle()\fR function will clothe anything that's not
a blessed object in an IO::Handle\-like wrapper... so you can just
use \s-1OO\s0 syntax and stop worrying about whether your function's caller
handed you a string, a globref, or a FileHandle.
.SH "WARNINGS"
.IX Header "WARNINGS"
Perl's \s-1TIEHANDLE\s0 spec was incomplete prior to 5.005_57;
it was missing support for \f(CW\*(C`seek()\*(C'\fR, \f(CW\*(C`tell()\*(C'\fR, and \f(CW\*(C`eof()\*(C'\fR.
Attempting to use these functions with an IO::Scalar, IO::ScalarArray,
IO::Lines, etc. \fBwill not work\fR prior to 5.005_57.
None of the relevant methods will be invoked by Perl;
and even worse, this kind of bug can lie dormant for a while.
If you turn warnings on (via \f(CW$^W\fR or \f(CW\*(C`perl \-w\*(C'\fR), and you see
something like this...
.PP
.Vb 1
\&    seek() on unopened file
.Ve
.PP
\&...then you are probably trying to use one of these functions
on one of our \s-1IO::\s0 classes with an old Perl.  The remedy is to simply
use the \s-1OO\s0 version; e.g.:
.PP
.Vb 2
\&    $SH\->seek(0,0);    ### GOOD: will work on any 5.005
\&    seek($SH,0,0);     ### WARNING: will only work on 5.005_57 and beyond
.Ve
.SH "INSTALLATION"
.IX Header "INSTALLATION"
.SS "Requirements"
.IX Subsection "Requirements"
As of version 2.x, this toolkit requires Perl 5.005 for
the IO::Handle subclasses, and 5.005_57 or better is
\&\fBstrongly\fR recommended.  See \*(L"\s-1WARNINGS\s0\*(R" for details.
.SS "Directions"
.IX Subsection "Directions"
Most of you already know the drill...
.PP
.Vb 4
\&    perl Makefile.PL
\&    make
\&    make test
\&    make install
.Ve
.PP
For everyone else out there...
if you've never installed Perl code before, or you're trying to use
this in an environment where your sysadmin or \s-1ISP\s0 won't let you do
interesting things, \fBrelax:\fR since this module contains no binary
extensions, you can cheat.  That means copying the directory tree
under my \*(L"./lib\*(R" directory into someplace where your script can \*(L"see\*(R"
it.  For example, under Linux:
.PP
.Vb 1
\&    cp \-r IO\-stringy\-1.234/lib/* /path/to/my/perl/
.Ve
.PP
Now, in your Perl code, do this:
.PP
.Vb 2
\&    use lib "/path/to/my/perl";
\&    use IO::Scalar;                   ### or whatever
.Ve
.PP
Ok, now you've been told.  At this point, anyone who whines about
not being given enough information gets an unflattering haiku
written about them in the next change log.  I'll do it.
Don't think I won't.
.SH "VERSION"
.IX Header "VERSION"
\&\f(CW$Id:\fR Stringy.pm,v 1.3 2005/02/10 21:24:05 dfs Exp $
.SH "TO DO"
.IX Header "TO DO"
.IP "(2000/08/02)  Finalize $/ support" 4
.IX Item "(2000/08/02)  Finalize $/ support"
Graham Barr submitted this patch half a \fIyear\fR ago;
Like a moron, I lost his message under a ton of others,
and only now have the experimental implementation done.
.Sp
Will the sudden sensitivity to $/ hose anyone out there?
I'm worried, so you have to enable it explicitly in 1.x.
It will be on by default in 2.x, though only IO::Scalar
has been implemented.
.IP "(2001/08/08)  Remove IO::WrapTie from new \s-1IO::\s0 classes" 4
.IX Item "(2001/08/08)  Remove IO::WrapTie from new IO:: classes"
It's not needed.  Backwards compatibility could be maintained
by having \fInew_tie()\fR be identical to \fInew()\fR.  Heck, I'll bet
that IO::WrapTie should be reimplemented so the returned
object is just like an IO::Scalar in its use of globrefs.
.SH "CHANGE LOG"
.IX Header "CHANGE LOG"
.IP "Version 2.110   (2005/02/10)" 4
.IX Item "Version 2.110   (2005/02/10)"
Maintainership taken over by \s-1DSKOLL\s0 <dfs@roaringpenguin.com>
.Sp
Closed the following bugs at
https://rt.cpan.org/NoAuth/Bugs.html?Dist=IO\-stringy:
.IP "" 4
2208 IO::ScalarArray\->getline does not return undef for \s-1EOF\s0 if undef($/)
.IP "" 4
7132 IO\-stringy/Makefile.PL bug \- name should be module name
.IP "" 4
11249 IO::Scalar flush shouldn't return undef
.IP "" 4
2172 $\e (output record separator) not respected
.IP "" 4
8605 \fIIO::InnerFile::seek()\fR should return 1 on success
.IP "" 4
4798 *.html in lib/
.IP "" 4
4369 Improvement: handling of fixed-size reads in IO::Scalar
.Sp
(Actually, bug 4369 was closed in Version 2.109)
.IP "Version 2.109   (2003/12/21)" 4
.IX Item "Version 2.109   (2003/12/21)"
IO::Scalar::getline now works with ref to int.
\&\fIThanks to Dominique Quatravaux for this patch.\fR
.IP "Version 2.108   (2001/08/20)" 4
.IX Item "Version 2.108   (2001/08/20)"
The terms-of-use have been placed in the distribution file \*(L"\s-1COPYING\s0\*(R".
Also, small documentation tweaks were made.
.IP "Version 2.105   (2001/08/09)" 4
.IX Item "Version 2.105   (2001/08/09)"
Added support for various \fIseek()\fR whences to IO::ScalarArray.
.Sp
Added support for consulting $/ in IO::Scalar and IO::ScalarArray.
The old \f(CW\*(C`use_RS()\*(C'\fR is not even an option.
Unsupported record separators will cause a \fIcroak()\fR.
.Sp
Added a lot of regression tests to supoprt the above.
.Sp
Better on-line docs (hyperlinks to individual functions).
.IP "Version 2.103   (2001/08/08)" 4
.IX Item "Version 2.103   (2001/08/08)"
After sober consideration I have reimplemented \fIIO::Scalar::print()\fR
so that it once again always seeks to the end of the string.
Benchmarks show the new implementation to be just as fast as
Juergen's contributed patch; until someone can convince me otherwise,
the current, safer implementation stays.
.Sp
I thought more about giving IO::Scalar two separate handles,
one for reading and one for writing, as suggested by Binkley.
His points about what \fItell()\fR and \fIeof()\fR return are, I think,
show-stoppers for this feature.  Even the manpages for stdio's \fIfseek()\fR
seem to imply a \fIsingle\fR file position indicator, not two.
So I think I will take this off the \s-1TO\s0 \s-1DO\s0 list.
\&\fBRemedy:\fR you can always have two handles open on the same
scalar, one which you only write to, and one which you only read from.
That should give the same effect.
.IP "Version 2.101   (2001/08/07)" 4
.IX Item "Version 2.101   (2001/08/07)"
\&\fBAlpha release.\fR
This is the initial release of the \*(L"IO::Scalar and friends are
now subclasses of IO::Handle\*(R".  I'm flinging it against the wall.
Please tell me if the banana sticks.  When it does, the banana
will be called 2.2x.
.Sp
First off, \fImany many thanks to Doug Wilson\fR, who
has provided an \fIinvaluable\fR service by patching IO::Scalar
and friends so that they (1) inherit from IO::Handle, (2) automatically
tie themselves so that the \f(CW\*(C`new()\*(C'\fR objects can be used in native i/o
constructs, and (3) doing it so that the whole damn thing passes
its regression tests.  As Doug knows, my globref Kung-Fu was not
up to the task; he graciously provided the patches.  This has earned
him a seat at the Co-Authors table, and the
right to have me address him as \fIsensei\fR.
.Sp
Performance of \fIIO::Scalar::print()\fR has been improved by as much as 2x
for lots of little prints, with the cost of forcing those
who print-then-seek-then-print to explicitly seek to end-of-string
before printing again.
\&\fIThanks to Juergen Zeller for this patch.\fR
.Sp
Added the \s-1COPYING\s0 file, which had been missing from prior versions.
\&\fIThanks to Albert Chin-A-Young for pointing this out.\fR
.Sp
IO::Scalar consults $/ by default (1.x ignored it by default).
Yes, I still need to support IO::ScalarArray.
.IP "Version 1.221   (2001/08/07)" 4
.IX Item "Version 1.221   (2001/08/07)"
I threatened in \*(L"\s-1INSTALLATION\s0\*(R" to write an unflattering haiku
about anyone who whined that I gave them insufficient information...
but it turns out that I left out a crucial direction.  D'\s-1OH\s0!
\&\fIThanks to David Beroff for the \*(L"patch\*(R" and the haiku...\fR
.Sp
.Vb 3
\&       Enough info there?
\&         Here\*(Aqs unflattering haiku:
\&       Forgot the line, "make"!  ;\-)
.Ve
.IP "Version 1.220   (2001/04/03)" 4
.IX Item "Version 1.220   (2001/04/03)"
Added untested \s-1SEEK\s0, \s-1TELL\s0, and \s-1EOF\s0 methods to IO::Scalar
and IO::ScalarArray to support corresponding functions for
tied filehandles: untested, because I'm still running 5.00556
and Perl is complaining about \*(L"\fItell()\fR on unopened file\*(R".
\&\fIThanks to Graham Barr for the suggestion.\fR
.Sp
Removed not-fully-blank lines from modules; these were causing
lots of POD-related warnings.
\&\fIThanks to Nicolas Joly for the suggestion.\fR
.IP "Version 1.219   (2001/02/23)" 4
.IX Item "Version 1.219   (2001/02/23)"
IO::Scalar objects can now be made sensitive to $/ .
Pains were taken to keep the fast code fast while adding this feature.
\&\fICheers to Graham Barr for submitting his patch;
jeers to me for losing his email for 6 months.\fR
.IP "Version 1.218   (2001/02/23)" 4
.IX Item "Version 1.218   (2001/02/23)"
IO::Scalar has a new \fIsysseek()\fR method.
\&\fIThanks again to Richard Jones.\fR
.Sp
New \*(L"\s-1TO\s0 \s-1DO\s0\*(R" section, because people who submit patches/ideas should
at least know that they're in the system... and that I won't lose
their stuff.  Please read it.
.Sp
New entries in \*(L"\s-1AUTHOR\s0\*(R".
Please read those too.
.IP "Version 1.216   (2000/09/28)" 4
.IX Item "Version 1.216   (2000/09/28)"
\&\fBIO::Scalar and IO::ScalarArray now inherit from IO::Handle.\fR
I thought I'd remembered a problem with this ages ago, related to
the fact that these \s-1IO::\s0 modules don't have \*(L"real\*(R" filehandles,
but the problem apparently isn't surfacing now.
If you suddenly encounter Perl warnings during global destruction
(especially if you're using tied filehandles), then please let me know!
\&\fIThanks to B. K. Oxley (binkley) for this.\fR
.Sp
\&\fBNasty bug fixed in \f(BIIO::Scalar::write()\fB.\fR
Apparently, the offset and the number-of-bytes arguments were,
for all practical purposes, \fIreversed.\fR  You were okay if
you did all your writing with \fIprint()\fR, but boy was \fIthis\fR a stupid bug!
\&\fIThanks to Richard Jones for finding this one.
For you, Rich, a double-length haiku:\fR
.Sp
.Vb 3
\&       Newspaper headline
\&          typeset by dyslexic man
\&       loses urgency
\&
\&       BABY EATS FISH is
\&          simply not equivalent
\&       to FISH EATS BABY
.Ve
.Sp
\&\fBNew sysread and syswrite methods for IO::Scalar.\fR
\&\fIThanks again to Richard Jones for this.\fR
.IP "Version 1.215   (2000/09/05)" 4
.IX Item "Version 1.215   (2000/09/05)"
Added 'bool' overload to '""' overload, so object always evaluates
to true.  (Whew.  Glad I caught this before it went to \s-1CPAN\s0.)
.IP "Version 1.214   (2000/09/03)" 4
.IX Item "Version 1.214   (2000/09/03)"
Evaluating an IO::Scalar in a string context now yields
the underlying string.
\&\fIThanks to B. K. Oxley (binkley) for this.\fR
.IP "Version 1.213   (2000/08/16)" 4
.IX Item "Version 1.213   (2000/08/16)"
Minor documentation fixes.
.IP "Version 1.212   (2000/06/02)" 4
.IX Item "Version 1.212   (2000/06/02)"
Fixed IO::InnerFile incompatibility with Perl5.004.
\&\fIThanks to many folks for reporting this.\fR
.IP "Version 1.210   (2000/04/17)" 4
.IX Item "Version 1.210   (2000/04/17)"
Added \fIflush()\fR and other no-op methods.
\&\fIThanks to Doru Petrescu for suggesting this.\fR
.IP "Version 1.209   (2000/03/17)" 4
.IX Item "Version 1.209   (2000/03/17)"
Small bug fixes.
.IP "Version 1.208   (2000/03/14)" 4
.IX Item "Version 1.208   (2000/03/14)"
Incorporated a number of contributed patches and extensions,
mostly related to speed hacks, support for \*(L"offset\*(R", and
\&\s-1WRITE/CLOSE\s0 methods.
\&\fIThanks to Richard Jones, Doru Petrescu, and many others.\fR
.IP "Version 1.206   (1999/04/18)" 4
.IX Item "Version 1.206   (1999/04/18)"
Added creation of ./testout when Makefile.PL is run.
.IP "Version 1.205   (1999/01/15)" 4
.IX Item "Version 1.205   (1999/01/15)"
Verified for Perl5.005.
.IP "Version 1.202   (1998/04/18)" 4
.IX Item "Version 1.202   (1998/04/18)"
New IO::WrapTie and IO::AtomicFile added.
.IP "Version 1.110" 4
.IX Item "Version 1.110"
Added IO::WrapTie.
.IP "Version 1.107" 4
.IX Item "Version 1.107"
Added IO::Lines, and made some bug fixes to IO::ScalarArray.
Also, added \fIgetc()\fR.
.IP "Version 1.105" 4
.IX Item "Version 1.105"
No real changes; just upgraded IO::Wrap to have a \f(CW$VERSION\fR string.
.SH "AUTHOR"
.IX Header "AUTHOR"
.IP "Primary Maintainer" 4
.IX Item "Primary Maintainer"
David F. Skoll (\fIdfs@roaringpenguin.com\fR).
.IP "Original Author" 4
.IX Item "Original Author"
Eryq (\fIeryq@zeegee.com\fR).
President, ZeeGee Software Inc (\fIhttp://www.zeegee.com\fR).
.IP "Co-Authors" 4
.IX Item "Co-Authors"
For all their bug reports and patch submissions, the following
are officially recognized:
.Sp
.Vb 4
\&     Richard Jones
\&     B. K. Oxley (binkley)
\&     Doru Petrescu
\&     Doug Wilson (for picking up the ball I dropped, and doing tie() right)
.Ve
.PP
Go to \fIhttp://www.zeegee.com\fR for the latest downloads
and on-line documentation for this module.
.PP
Enjoy.  Yell if it breaks.
                                        osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/IO::Stringy5.18.3pm                          0100644 0001750 0001750 00000044555 12566241447 023710  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "IO::Stringy 3"
.TH IO::Stringy 3 "2005-02-10" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
IO\-stringy \- I/O on in\-core objects like strings and arrays
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 7
\&    IO::
\&    ::AtomicFile   adpO  Write a file which is updated atomically     ERYQ
\&    ::Lines        bdpO  I/O handle to read/write to array of lines   ERYQ
\&    ::Scalar       RdpO  I/O handle to read/write to a string         ERYQ
\&    ::ScalarArray  RdpO  I/O handle to read/write to array of scalars ERYQ
\&    ::Wrap         RdpO  Wrap old\-style FHs in standard OO interface  ERYQ
\&    ::WrapTie      adpO  Tie your handles & retain full OO interface  ERYQ
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This toolkit primarily provides modules for performing both traditional
and object-oriented i/o) on things \fIother\fR than normal filehandles;
in particular, IO::Scalar, IO::ScalarArray,
and IO::Lines.
.PP
In the more-traditional IO::Handle front, we
have IO::AtomicFile
which may be used to painlessly create files which are updated
atomically.
.PP
And in the \*(L"this-may-prove-useful\*(R" corner, we have IO::Wrap,
whose exported \fIwraphandle()\fR function will clothe anything that's not
a blessed object in an IO::Handle\-like wrapper... so you can just
use \s-1OO\s0 syntax and stop worrying about whether your function's caller
handed you a string, a globref, or a FileHandle.
.SH "WARNINGS"
.IX Header "WARNINGS"
Perl's \s-1TIEHANDLE\s0 spec was incomplete prior to 5.005_57;
it was missing support for \f(CW\*(C`seek()\*(C'\fR, \f(CW\*(C`tell()\*(C'\fR, and \f(CW\*(C`eof()\*(C'\fR.
Attempting to use these functions with an IO::Scalar, IO::ScalarArray,
IO::Lines, etc. \fBwill not work\fR prior to 5.005_57.
None of the relevant methods will be invoked by Perl;
and even worse, this kind of bug can lie dormant for a while.
If you turn warnings on (via \f(CW$^W\fR or \f(CW\*(C`perl \-w\*(C'\fR), and you see
something like this...
.PP
.Vb 1
\&    seek() on unopened file
.Ve
.PP
\&...then you are probably trying to use one of these functions
on one of our \s-1IO::\s0 classes with an old Perl.  The remedy is to simply
use the \s-1OO\s0 version; e.g.:
.PP
.Vb 2
\&    $SH\->seek(0,0);    ### GOOD: will work on any 5.005
\&    seek($SH,0,0);     ### WARNING: will only work on 5.005_57 and beyond
.Ve
.SH "INSTALLATION"
.IX Header "INSTALLATION"
.SS "Requirements"
.IX Subsection "Requirements"
As of version 2.x, this toolkit requires Perl 5.005 for
the IO::Handle subclasses, and 5.005_57 or better is
\&\fBstrongly\fR recommended.  See \*(L"\s-1WARNINGS\*(R"\s0 for details.
.SS "Directions"
.IX Subsection "Directions"
Most of you already know the drill...
.PP
.Vb 4
\&    perl Makefile.PL
\&    make
\&    make test
\&    make install
.Ve
.PP
For everyone else out there...
if you've never installed Perl code before, or you're trying to use
this in an environment where your sysadmin or \s-1ISP\s0 won't let you do
interesting things, \fBrelax:\fR since this module contains no binary
extensions, you can cheat.  That means copying the directory tree
under my \*(L"./lib\*(R" directory into someplace where your script can \*(L"see\*(R"
it.  For example, under Linux:
.PP
.Vb 1
\&    cp \-r IO\-stringy\-1.234/lib/* /path/to/my/perl/
.Ve
.PP
Now, in your Perl code, do this:
.PP
.Vb 2
\&    use lib "/path/to/my/perl";
\&    use IO::Scalar;                   ### or whatever
.Ve
.PP
Ok, now you've been told.  At this point, anyone who whines about
not being given enough information gets an unflattering haiku
written about them in the next change log.  I'll do it.
Don't think I won't.
.SH "VERSION"
.IX Header "VERSION"
\&\f(CW$Id:\fR Stringy.pm,v 1.3 2005/02/10 21:24:05 dfs Exp $
.SH "TO DO"
.IX Header "TO DO"
.IP "(2000/08/02)  Finalize $/ support" 4
.IX Item "(2000/08/02) Finalize $/ support"
Graham Barr submitted this patch half a \fIyear\fR ago;
Like a moron, I lost his message under a ton of others,
and only now have the experimental implementation done.
.Sp
Will the sudden sensitivity to $/ hose anyone out there?
I'm worried, so you have to enable it explicitly in 1.x.
It will be on by default in 2.x, though only IO::Scalar
has been implemented.
.IP "(2001/08/08)  Remove IO::WrapTie from new \s-1IO::\s0 classes" 4
.IX Item "(2001/08/08) Remove IO::WrapTie from new IO:: classes"
It's not needed.  Backwards compatibility could be maintained
by having \fInew_tie()\fR be identical to \fInew()\fR.  Heck, I'll bet
that IO::WrapTie should be reimplemented so the returned
object is just like an IO::Scalar in its use of globrefs.
.SH "CHANGE LOG"
.IX Header "CHANGE LOG"
.IP "Version 2.110   (2005/02/10)" 4
.IX Item "Version 2.110 (2005/02/10)"
Maintainership taken over by \s-1DSKOLL\s0 <dfs@roaringpenguin.com>
.Sp
Closed the following bugs at
https://rt.cpan.org/NoAuth/Bugs.html?Dist=IO\-stringy:
.IP "" 4
2208 IO::ScalarArray\->getline does not return undef for \s-1EOF\s0 if undef($/)
.IP "" 4
7132 IO\-stringy/Makefile.PL bug \- name should be module name
.IP "" 4
11249 IO::Scalar flush shouldn't return undef
.IP "" 4
2172 $\e (output record separator) not respected
.IP "" 4
8605 \fIIO::InnerFile::seek()\fR should return 1 on success
.IP "" 4
4798 *.html in lib/
.IP "" 4
4369 Improvement: handling of fixed-size reads in IO::Scalar
.Sp
(Actually, bug 4369 was closed in Version 2.109)
.IP "Version 2.109   (2003/12/21)" 4
.IX Item "Version 2.109 (2003/12/21)"
IO::Scalar::getline now works with ref to int.
\&\fIThanks to Dominique Quatravaux for this patch.\fR
.IP "Version 2.108   (2001/08/20)" 4
.IX Item "Version 2.108 (2001/08/20)"
The terms-of-use have been placed in the distribution file \*(L"\s-1COPYING\*(R".\s0
Also, small documentation tweaks were made.
.IP "Version 2.105   (2001/08/09)" 4
.IX Item "Version 2.105 (2001/08/09)"
Added support for various \fIseek()\fR whences to IO::ScalarArray.
.Sp
Added support for consulting $/ in IO::Scalar and IO::ScalarArray.
The old \f(CW\*(C`use_RS()\*(C'\fR is not even an option.
Unsupported record separators will cause a \fIcroak()\fR.
.Sp
Added a lot of regression tests to supoprt the above.
.Sp
Better on-line docs (hyperlinks to individual functions).
.IP "Version 2.103   (2001/08/08)" 4
.IX Item "Version 2.103 (2001/08/08)"
After sober consideration I have reimplemented \fIIO::Scalar::print()\fR
so that it once again always seeks to the end of the string.
Benchmarks show the new implementation to be just as fast as
Juergen's contributed patch; until someone can convince me otherwise,
the current, safer implementation stays.
.Sp
I thought more about giving IO::Scalar two separate handles,
one for reading and one for writing, as suggested by Binkley.
His points about what \fItell()\fR and \fIeof()\fR return are, I think,
show-stoppers for this feature.  Even the manpages for stdio's \fIfseek()\fR
seem to imply a \fIsingle\fR file position indicator, not two.
So I think I will take this off the \s-1TO DO\s0 list.
\&\fBRemedy:\fR you can always have two handles open on the same
scalar, one which you only write to, and one which you only read from.
That should give the same effect.
.IP "Version 2.101   (2001/08/07)" 4
.IX Item "Version 2.101 (2001/08/07)"
\&\fBAlpha release.\fR
This is the initial release of the \*(L"IO::Scalar and friends are
now subclasses of IO::Handle\*(R".  I'm flinging it against the wall.
Please tell me if the banana sticks.  When it does, the banana
will be called 2.2x.
.Sp
First off, \fImany many thanks to Doug Wilson\fR, who
has provided an \fIinvaluable\fR service by patching IO::Scalar
and friends so that they (1) inherit from IO::Handle, (2) automatically
tie themselves so that the \f(CW\*(C`new()\*(C'\fR objects can be used in native i/o
constructs, and (3) doing it so that the whole damn thing passes
its regression tests.  As Doug knows, my globref Kung-Fu was not
up to the task; he graciously provided the patches.  This has earned
him a seat at the Co-Authors table, and the
right to have me address him as \fIsensei\fR.
.Sp
Performance of \fIIO::Scalar::print()\fR has been improved by as much as 2x
for lots of little prints, with the cost of forcing those
who print-then-seek-then-print to explicitly seek to end-of-string
before printing again.
\&\fIThanks to Juergen Zeller for this patch.\fR
.Sp
Added the \s-1COPYING\s0 file, which had been missing from prior versions.
\&\fIThanks to Albert Chin-A-Young for pointing this out.\fR
.Sp
IO::Scalar consults $/ by default (1.x ignored it by default).
Yes, I still need to support IO::ScalarArray.
.IP "Version 1.221   (2001/08/07)" 4
.IX Item "Version 1.221 (2001/08/07)"
I threatened in \*(L"\s-1INSTALLATION\*(R"\s0 to write an unflattering haiku
about anyone who whined that I gave them insufficient information...
but it turns out that I left out a crucial direction.  D'\s-1OH\s0!
\&\fIThanks to David Beroff for the \*(L"patch\*(R" and the haiku...\fR
.Sp
.Vb 3
\&       Enough info there?
\&         Here\*(Aqs unflattering haiku:
\&       Forgot the line, "make"!  ;\-)
.Ve
.IP "Version 1.220   (2001/04/03)" 4
.IX Item "Version 1.220 (2001/04/03)"
Added untested \s-1SEEK, TELL,\s0 and \s-1EOF\s0 methods to IO::Scalar
and IO::ScalarArray to support corresponding functions for
tied filehandles: untested, because I'm still running 5.00556
and Perl is complaining about \*(L"\fItell()\fR on unopened file\*(R".
\&\fIThanks to Graham Barr for the suggestion.\fR
.Sp
Removed not-fully-blank lines from modules; these were causing
lots of POD-related warnings.
\&\fIThanks to Nicolas Joly for the suggestion.\fR
.IP "Version 1.219   (2001/02/23)" 4
.IX Item "Version 1.219 (2001/02/23)"
IO::Scalar objects can now be made sensitive to $/ .
Pains were taken to keep the fast code fast while adding this feature.
\&\fICheers to Graham Barr for submitting his patch;
jeers to me for losing his email for 6 months.\fR
.IP "Version 1.218   (2001/02/23)" 4
.IX Item "Version 1.218 (2001/02/23)"
IO::Scalar has a new \fIsysseek()\fR method.
\&\fIThanks again to Richard Jones.\fR
.Sp
New \*(L"\s-1TO DO\*(R"\s0 section, because people who submit patches/ideas should
at least know that they're in the system... and that I won't lose
their stuff.  Please read it.
.Sp
New entries in \*(L"\s-1AUTHOR\*(R"\s0.
Please read those too.
.IP "Version 1.216   (2000/09/28)" 4
.IX Item "Version 1.216 (2000/09/28)"
\&\fBIO::Scalar and IO::ScalarArray now inherit from IO::Handle.\fR
I thought I'd remembered a problem with this ages ago, related to
the fact that these \s-1IO::\s0 modules don't have \*(L"real\*(R" filehandles,
but the problem apparently isn't surfacing now.
If you suddenly encounter Perl warnings during global destruction
(especially if you're using tied filehandles), then please let me know!
\&\fIThanks to B. K. Oxley (binkley) for this.\fR
.Sp
\&\fBNasty bug fixed in \f(BIIO::Scalar::write()\fB.\fR
Apparently, the offset and the number-of-bytes arguments were,
for all practical purposes, \fIreversed.\fR  You were okay if
you did all your writing with \fIprint()\fR, but boy was \fIthis\fR a stupid bug!
\&\fIThanks to Richard Jones for finding this one.
For you, Rich, a double-length haiku:\fR
.Sp
.Vb 3
\&       Newspaper headline
\&          typeset by dyslexic man
\&       loses urgency
\&
\&       BABY EATS FISH is
\&          simply not equivalent
\&       to FISH EATS BABY
.Ve
.Sp
\&\fBNew sysread and syswrite methods for IO::Scalar.\fR
\&\fIThanks again to Richard Jones for this.\fR
.IP "Version 1.215   (2000/09/05)" 4
.IX Item "Version 1.215 (2000/09/05)"
Added 'bool' overload to '""' overload, so object always evaluates
to true.  (Whew.  Glad I caught this before it went to \s-1CPAN.\s0)
.IP "Version 1.214   (2000/09/03)" 4
.IX Item "Version 1.214 (2000/09/03)"
Evaluating an IO::Scalar in a string context now yields
the underlying string.
\&\fIThanks to B. K. Oxley (binkley) for this.\fR
.IP "Version 1.213   (2000/08/16)" 4
.IX Item "Version 1.213 (2000/08/16)"
Minor documentation fixes.
.IP "Version 1.212   (2000/06/02)" 4
.IX Item "Version 1.212 (2000/06/02)"
Fixed IO::InnerFile incompatibility with Perl5.004.
\&\fIThanks to many folks for reporting this.\fR
.IP "Version 1.210   (2000/04/17)" 4
.IX Item "Version 1.210 (2000/04/17)"
Added \fIflush()\fR and other no-op methods.
\&\fIThanks to Doru Petrescu for suggesting this.\fR
.IP "Version 1.209   (2000/03/17)" 4
.IX Item "Version 1.209 (2000/03/17)"
Small bug fixes.
.IP "Version 1.208   (2000/03/14)" 4
.IX Item "Version 1.208 (2000/03/14)"
Incorporated a number of contributed patches and extensions,
mostly related to speed hacks, support for \*(L"offset\*(R", and
\&\s-1WRITE/CLOSE\s0 methods.
\&\fIThanks to Richard Jones, Doru Petrescu, and many others.\fR
.IP "Version 1.206   (1999/04/18)" 4
.IX Item "Version 1.206 (1999/04/18)"
Added creation of ./testout when Makefile.PL is run.
.IP "Version 1.205   (1999/01/15)" 4
.IX Item "Version 1.205 (1999/01/15)"
Verified for Perl5.005.
.IP "Version 1.202   (1998/04/18)" 4
.IX Item "Version 1.202 (1998/04/18)"
New IO::WrapTie and IO::AtomicFile added.
.IP "Version 1.110" 4
.IX Item "Version 1.110"
Added IO::WrapTie.
.IP "Version 1.107" 4
.IX Item "Version 1.107"
Added IO::Lines, and made some bug fixes to IO::ScalarArray.
Also, added \fIgetc()\fR.
.IP "Version 1.105" 4
.IX Item "Version 1.105"
No real changes; just upgraded IO::Wrap to have a \f(CW$VERSION\fR string.
.SH "AUTHOR"
.IX Header "AUTHOR"
.IP "Primary Maintainer" 4
.IX Item "Primary Maintainer"
David F. Skoll (\fIdfs@roaringpenguin.com\fR).
.IP "Original Author" 4
.IX Item "Original Author"
Eryq (\fIeryq@zeegee.com\fR).
President, ZeeGee Software Inc (\fIhttp://www.zeegee.com\fR).
.IP "Co-Authors" 4
.IX Item "Co-Authors"
For all their bug reports and patch submissions, the following
are officially recognized:
.Sp
.Vb 4
\&     Richard Jones
\&     B. K. Oxley (binkley)
\&     Doru Petrescu
\&     Doug Wilson (for picking up the ball I dropped, and doing tie() right)
.Ve
.PP
Go to \fIhttp://www.zeegee.com\fR for the latest downloads
and on-line documentation for this module.
.PP
Enjoy.  Yell if it breaks.
.SH "POD ERRORS"
.IX Header "POD ERRORS"
Hey! \fBThe above document had some coding errors, which are explained below:\fR
.IP "Around line 153:" 4
.IX Item "Around line 153:"
Expected text after =item, not a bullet
.IP "Around line 157:" 4
.IX Item "Around line 157:"
Expected text after =item, not a bullet
.IP "Around line 161:" 4
.IX Item "Around line 161:"
Expected text after =item, not a bullet
.IP "Around line 165:" 4
.IX Item "Around line 165:"
Expected text after =item, not a bullet
.IP "Around line 169:" 4
.IX Item "Around line 169:"
Expected text after =item, not a bullet
.IP "Around line 173:" 4
.IX Item "Around line 173:"
Expected text after =item, not a bullet
.IP "Around line 177:" 4
.IX Item "Around line 177:"
Expected text after =item, not a bullet
                                                                                                                                                   osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/IO::Stty.3pm                                 0100644 0001750 0001750 00000030537 12566241706 022671  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "IO::Stty 3"
.TH IO::Stty 3 "2015-08-22" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Change and print terminal line settings
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&    # calling the script directly
\&    stty.pl [setting...]
\&    stty.pl {\-a,\-g,\-v,\-\-version}
\&    
\&    # Calling Stty module
\&    use IO::Stty;
\&    IO::Stty::stty(\e*TTYHANDLE, @modes);
\&
\&     use IO::Stty;
\&     $old_mode=IO::Stty::stty(\e*STDIN,\*(Aq\-g\*(Aq);
\&
\&     # Turn off echoing.
\&     IO::Stty::stty(\e*STDIN,\*(Aq\-echo\*(Aq);
\&
\&     # Do whatever.. grab input maybe?
\&     $read_password = <>;
\&
\&     # Now restore the old mode.
\&     IO::Stty::stty(\e*STDIN,$old_mode);
\&
\&     # What settings do we have anyway?
\&     print IO::Stty::stty(\e*STDIN,\*(Aq\-a\*(Aq);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is the \s-1PERL POSIX\s0 compliant stty.
.SH "INTRO"
.IX Header "INTRO"
This has not been tailored to the IO::File stuff but will work with it as
indicated. Before you go futzing with term parameters it's a good idea to grab
the current settings and restore them when you finish.
.PP
stty accepts the following non-option arguments that change aspects of the
terminal line operation. A `[\-]' before a capability means that it can be
turned off by preceding it with a `\-'.
.SH "stty parameters"
.IX Header "stty parameters"
.SS "Control settings"
.IX Subsection "Control settings"
.IP "[\-]parenb" 4
.IX Item "[-]parenb"
Generate parity bit in output and expect parity bit in input.
.IP "[\-]parodd" 4
.IX Item "[-]parodd"
Set odd parity (even with `\-').
.IP "cs5 cs6 cs7 cs8" 4
.IX Item "cs5 cs6 cs7 cs8"
Set character size to 5, 6, 7, or 8 bits.
.IP "[\-]hupcl [\-]hup" 4
.IX Item "[-]hupcl [-]hup"
Send a hangup signal when the last process closes the tty.
.IP "[\-]cstopb" 4
.IX Item "[-]cstopb"
Use two stop bits per character (one with `\-').
.IP "[\-]cread" 4
.IX Item "[-]cread"
Allow input to be received.
.IP "[\-]clocal" 4
.IX Item "[-]clocal"
Disable modem control signals.
.SS "Input settings"
.IX Subsection "Input settings"
.IP "[\-]ignbrk" 4
.IX Item "[-]ignbrk"
Ignore break characters.
.IP "[\-]brkint" 4
.IX Item "[-]brkint"
Breaks cause an interrupt signal.
.IP "[\-]ignpar" 4
.IX Item "[-]ignpar"
Ignore characters with parity errors.
.IP "[\-]parmrk" 4
.IX Item "[-]parmrk"
Mark parity errors (with a 255\-0\-character sequence).
.IP "[\-]inpck" 4
.IX Item "[-]inpck"
Enable input parity checking.
.IP "[\-]istrip" 4
.IX Item "[-]istrip"
Clear high (8th) bit of input characters.
.IP "[\-]inlcr" 4
.IX Item "[-]inlcr"
Translate newline to carriage return.
.IP "[\-]igncr" 4
.IX Item "[-]igncr"
Ignore carriage return.
.IP "[\-]icrnl" 4
.IX Item "[-]icrnl"
Translate carriage return to newline.
.IP "[\-]ixon" 4
.IX Item "[-]ixon"
Enable \s-1XON/XOFF\s0 flow control.
.IP "[\-]ixoff" 4
.IX Item "[-]ixoff"
Enable sending of stop character when the system
input buffer is almost full, and start character
when it becomes almost empty again.
.SS "Output settings"
.IX Subsection "Output settings"
.IP "[\-]opost" 4
.IX Item "[-]opost"
Postprocess output.
.SS "Local settings"
.IX Subsection "Local settings"
.IP "[\-]isig" 4
.IX Item "[-]isig"
Enable interrupt, quit, and suspend special characters.
.IP "[\-]icanon" 4
.IX Item "[-]icanon"
Enable erase, kill, werase, and rprnt special characters.
.IP "[\-]echo" 4
.IX Item "[-]echo"
Echo input characters.
.IP "[\-]echoe, [\-]crterase" 4
.IX Item "[-]echoe, [-]crterase"
Echo erase characters as backspace-space-backspace.
.IP "[\-]echok" 4
.IX Item "[-]echok"
Echo a newline after a kill character.
.IP "[\-]echonl" 4
.IX Item "[-]echonl"
Echo newline even if not echoing other characters.
.IP "[\-]noflsh" 4
.IX Item "[-]noflsh"
Disable flushing after interrupt and quit special characters.
.Sp
* Though this claims non-posixhood it is supported by the perl \s-1POSIX\s0.pm.
.IP "[\-]tostop (np)" 4
.IX Item "[-]tostop (np)"
Stop background jobs that try to write to the terminal.
.SS "Combination settings"
.IX Subsection "Combination settings"
.IP "ek" 4
.IX Item "ek"
Reset the erase and kill special characters to their default values.
.IP "sane" 4
.IX Item "sane"
Same as:
.Sp
.Vb 2
\&    cread \-ignbrk brkint \-inlcr \-igncr icrnl \-ixoff opost 
\&    isig icanon echo echoe echok \-echonl \-noflsh \-tostop
.Ve
.Sp
also sets all special characters to their default
values.
.IP "[\-]cooked" 4
.IX Item "[-]cooked"
Same as:
.Sp
.Vb 1
\&    brkint ignpar istrip icrnl ixon opost isig icanon
.Ve
.Sp
plus sets the eof and eol characters to their default values 
if they are the same as the min and time characters.
With `\-', same as raw.
.IP "[\-]raw" 4
.IX Item "[-]raw"
Same as:
.Sp
.Vb 2
\&    \-ignbrk \-brkint \-ignpar \-parmrk \-inpck \-istrip \-inlcr \-igncr
\&    \-icrnl \-ixon \-ixoff \-opost \-isig \-icanon min 1 time 0
.Ve
.Sp
With `\-', same as cooked.
.IP "[\-]pass8" 4
.IX Item "[-]pass8"
Same as:
.Sp
.Vb 1
\&    \-parenb \-istrip cs8
.Ve
.Sp
With  `\-',  same  as parenb istrip cs7.
.IP "dec" 4
.IX Item "dec"
Same as:
.Sp
.Vb 1
\&    echoe echoctl echoke \-ixany
.Ve
.Sp
Also sets the interrupt special character to Ctrl-C, erase to
Del, and kill to Ctrl-U.
.SS "Special characters"
.IX Subsection "Special characters"
The special characters' default values vary from system to
system. They are set with the syntax `name value', where
the names are listed below and the value can be given
either literally, in hat notation (`^c'), or as an integer
which may start with `0x' to indicate hexadecimal, `0' to
indicate octal, or any other digit to indicate decimal.
Giving a value of `^\-' or `undef' disables that special
character.
.IP "intr" 4
.IX Item "intr"
Send an interrupt signal.
.IP "quit" 4
.IX Item "quit"
Send a quit signal.
.IP "erase" 4
.IX Item "erase"
Erase the last character typed.
.IP "kill" 4
.IX Item "kill"
Erase the current line.
.IP "eof" 4
.IX Item "eof"
Send an end of file (terminate the input).
.IP "eol" 4
.IX Item "eol"
End the line.
.IP "start" 4
.IX Item "start"
Restart the output after stopping it.
.IP "stop" 4
.IX Item "stop"
Stop the output.
.IP "susp" 4
.IX Item "susp"
Send a terminal stop signal.
.SS "Special settings"
.IX Subsection "Special settings"
.IP "min N" 4
.IX Item "min N"
Set the minimum number of characters that will satisfy a read 
until the time value has expired,  when <E>\-icanon<E> is set.
.IP "time N" 4
.IX Item "time N"
Set the number of tenths of a second before reads
time out if the min number of characters  have  not
been read, when \-icanon is set.
.IP "N" 4
.IX Item "N"
Set the input and output speeds to N.  N can be one
of: 0 50 75 110 134 134.5 150 200 300 600 1200 1800
2400 4800 9600 19200 38400 exta extb.  exta is  the
same  as 19200; extb is the same as 38400.  0 hangs
up the line if \-clocal is set.
.SS "\s-1OPTIONS\s0"
.IX Subsection "OPTIONS"
.IP "\-a" 4
.IX Item "-a"
Print all current settings in human-readable  form.
.IP "\-g" 4
.IX Item "-g"
Print all current settings in a form  that  can  be
used  as  an  argument  to  another stty command to
restore the current settings.
.IP "\-v,\-\-version" 4
.IX Item "-v,--version"
Print version info.
.SH "Direct Subroutines"
.IX Header "Direct Subroutines"
.IP "\fB\f(BIstty()\fB\fR" 4
.IX Item "stty()"
.Vb 1
\&    IO::Stty::stty(\e*STDIN, @params);
.Ve
.Sp
From comments:
.Sp
.Vb 5
\&    I\*(Aqm not feeling very inspired about this. Terminal parameters are obscure
\&    and boring. Basically what this will do is get the current setting,
\&    take the parameters, modify the setting and write it back. Zzzz.
\&    This is not especially efficent and probably not too fast. Assuming the POSIX
\&    spec has been implemented properly it should mostly work.
.Ve
.IP "\fB\f(BIshow_me_the_crap()\fB\fR" 4
.IX Item "show_me_the_crap()"
Needs documentation
.SH "AUTHOR"
.IX Header "AUTHOR"
Austin Schutz <auschutz@cpan.org> (Initial version and maintenance)
.PP
Todd Rinaldo <toddr@cpan.org> (Maintenance)
.SH "BUGS"
.IX Header "BUGS"
This is use at your own risk software. Do anything you want with it except
blame me for it blowing up your machine because it's full of bugs.
.PP
See above for what functions are supported. It's mostly standard \s-1POSIX\s0
stuff. If any of the settings are wrong and you actually know what some of
these extremely arcane settings (like what 'sane' should be in \s-1POSIX\s0 land)
really should be, please open an \s-1RT\s0 ticket.
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
None
.SH "COPYRIGHT & LICENSE"
.IX Header "COPYRIGHT & LICENSE"
Copyright 1997 Austin Schutz, all rights reserved.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
                                                                                                                                                                 osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/IO::Stty5.16.3pm                             0100644 0001750 0001750 00000030225 12566241704 023173  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "IO::Stty 3"
.TH IO::Stty 3 "2015-08-22" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Change and print terminal line settings
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&    # calling the script directly
\&    stty.pl [setting...]
\&    stty.pl {\-a,\-g,\-v,\-\-version}
\&    
\&    # Calling Stty module
\&    use IO::Stty;
\&    IO::Stty::stty(\e*TTYHANDLE, @modes);
\&
\&     use IO::Stty;
\&     $old_mode=IO::Stty::stty(\e*STDIN,\*(Aq\-g\*(Aq);
\&
\&     # Turn off echoing.
\&     IO::Stty::stty(\e*STDIN,\*(Aq\-echo\*(Aq);
\&
\&     # Do whatever.. grab input maybe?
\&     $read_password = <>;
\&
\&     # Now restore the old mode.
\&     IO::Stty::stty(\e*STDIN,$old_mode);
\&
\&     # What settings do we have anyway?
\&     print IO::Stty::stty(\e*STDIN,\*(Aq\-a\*(Aq);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is the \s-1PERL\s0 \s-1POSIX\s0 compliant stty.
.SH "INTRO"
.IX Header "INTRO"
This has not been tailored to the IO::File stuff but will work with it as
indicated. Before you go futzing with term parameters it's a good idea to grab
the current settings and restore them when you finish.
.PP
stty accepts the following non-option arguments that change aspects of the
terminal line operation. A `[\-]' before a capability means that it can be
turned off by preceding it with a `\-'.
.SH "stty parameters"
.IX Header "stty parameters"
.SS "Control settings"
.IX Subsection "Control settings"
.IP "[\-]parenb" 4
.IX Item "[-]parenb"
Generate parity bit in output and expect parity bit in input.
.IP "[\-]parodd" 4
.IX Item "[-]parodd"
Set odd parity (even with `\-').
.IP "cs5 cs6 cs7 cs8" 4
.IX Item "cs5 cs6 cs7 cs8"
Set character size to 5, 6, 7, or 8 bits.
.IP "[\-]hupcl [\-]hup" 4
.IX Item "[-]hupcl [-]hup"
Send a hangup signal when the last process closes the tty.
.IP "[\-]cstopb" 4
.IX Item "[-]cstopb"
Use two stop bits per character (one with `\-').
.IP "[\-]cread" 4
.IX Item "[-]cread"
Allow input to be received.
.IP "[\-]clocal" 4
.IX Item "[-]clocal"
Disable modem control signals.
.SS "Input settings"
.IX Subsection "Input settings"
.IP "[\-]ignbrk" 4
.IX Item "[-]ignbrk"
Ignore break characters.
.IP "[\-]brkint" 4
.IX Item "[-]brkint"
Breaks cause an interrupt signal.
.IP "[\-]ignpar" 4
.IX Item "[-]ignpar"
Ignore characters with parity errors.
.IP "[\-]parmrk" 4
.IX Item "[-]parmrk"
Mark parity errors (with a 255\-0\-character sequence).
.IP "[\-]inpck" 4
.IX Item "[-]inpck"
Enable input parity checking.
.IP "[\-]istrip" 4
.IX Item "[-]istrip"
Clear high (8th) bit of input characters.
.IP "[\-]inlcr" 4
.IX Item "[-]inlcr"
Translate newline to carriage return.
.IP "[\-]igncr" 4
.IX Item "[-]igncr"
Ignore carriage return.
.IP "[\-]icrnl" 4
.IX Item "[-]icrnl"
Translate carriage return to newline.
.IP "[\-]ixon" 4
.IX Item "[-]ixon"
Enable \s-1XON/XOFF\s0 flow control.
.IP "[\-]ixoff" 4
.IX Item "[-]ixoff"
Enable sending of stop character when the system
input buffer is almost full, and start character
when it becomes almost empty again.
.SS "Output settings"
.IX Subsection "Output settings"
.IP "[\-]opost" 4
.IX Item "[-]opost"
Postprocess output.
.SS "Local settings"
.IX Subsection "Local settings"
.IP "[\-]isig" 4
.IX Item "[-]isig"
Enable interrupt, quit, and suspend special characters.
.IP "[\-]icanon" 4
.IX Item "[-]icanon"
Enable erase, kill, werase, and rprnt special characters.
.IP "[\-]echo" 4
.IX Item "[-]echo"
Echo input characters.
.IP "[\-]echoe, [\-]crterase" 4
.IX Item "[-]echoe, [-]crterase"
Echo erase characters as backspace-space-backspace.
.IP "[\-]echok" 4
.IX Item "[-]echok"
Echo a newline after a kill character.
.IP "[\-]echonl" 4
.IX Item "[-]echonl"
Echo newline even if not echoing other characters.
.IP "[\-]noflsh" 4
.IX Item "[-]noflsh"
Disable flushing after interrupt and quit special characters.
.Sp
* Though this claims non-posixhood it is supported by the perl \s-1POSIX\s0.pm.
.IP "[\-]tostop (np)" 4
.IX Item "[-]tostop (np)"
Stop background jobs that try to write to the terminal.
.SS "Combination settings"
.IX Subsection "Combination settings"
.IP "ek" 4
.IX Item "ek"
Reset the erase and kill special characters to their default values.
.IP "sane" 4
.IX Item "sane"
Same as:
.Sp
.Vb 2
\&    cread \-ignbrk brkint \-inlcr \-igncr icrnl \-ixoff opost 
\&    isig icanon echo echoe echok \-echonl \-noflsh \-tostop
.Ve
.Sp
also sets all special characters to their default
values.
.IP "[\-]cooked" 4
.IX Item "[-]cooked"
Same as:
.Sp
.Vb 1
\&    brkint ignpar istrip icrnl ixon opost isig icanon
.Ve
.Sp
plus sets the eof and eol characters to their default values 
if they are the same as the min and time characters.
With `\-', same as raw.
.IP "[\-]raw" 4
.IX Item "[-]raw"
Same as:
.Sp
.Vb 2
\&    \-ignbrk \-brkint \-ignpar \-parmrk \-inpck \-istrip \-inlcr \-igncr
\&    \-icrnl \-ixon \-ixoff \-opost \-isig \-icanon min 1 time 0
.Ve
.Sp
With `\-', same as cooked.
.IP "[\-]pass8" 4
.IX Item "[-]pass8"
Same as:
.Sp
.Vb 1
\&    \-parenb \-istrip cs8
.Ve
.Sp
With  `\-',  same  as parenb istrip cs7.
.IP "dec" 4
.IX Item "dec"
Same as:
.Sp
.Vb 1
\&    echoe echoctl echoke \-ixany
.Ve
.Sp
Also sets the interrupt special character to Ctrl-C, erase to
Del, and kill to Ctrl-U.
.SS "Special characters"
.IX Subsection "Special characters"
The special characters' default values vary from system to
system. They are set with the syntax `name value', where
the names are listed below and the value can be given
either literally, in hat notation (`^c'), or as an integer
which may start with `0x' to indicate hexadecimal, `0' to
indicate octal, or any other digit to indicate decimal.
Giving a value of `^\-' or `undef' disables that special
character.
.IP "intr" 4
.IX Item "intr"
Send an interrupt signal.
.IP "quit" 4
.IX Item "quit"
Send a quit signal.
.IP "erase" 4
.IX Item "erase"
Erase the last character typed.
.IP "kill" 4
.IX Item "kill"
Erase the current line.
.IP "eof" 4
.IX Item "eof"
Send an end of file (terminate the input).
.IP "eol" 4
.IX Item "eol"
End the line.
.IP "start" 4
.IX Item "start"
Restart the output after stopping it.
.IP "stop" 4
.IX Item "stop"
Stop the output.
.IP "susp" 4
.IX Item "susp"
Send a terminal stop signal.
.SS "Special settings"
.IX Subsection "Special settings"
.IP "min N" 4
.IX Item "min N"
Set the minimum number of characters that will satisfy a read 
until the time value has expired,  when <E>\-icanon<E> is set.
.IP "time N" 4
.IX Item "time N"
Set the number of tenths of a second before reads
time out if the min number of characters  have  not
been read, when \-icanon is set.
.IP "N" 4
.IX Item "N"
Set the input and output speeds to N.  N can be one
of: 0 50 75 110 134 134.5 150 200 300 600 1200 1800
2400 4800 9600 19200 38400 exta extb.  exta is  the
same  as 19200; extb is the same as 38400.  0 hangs
up the line if \-clocal is set.
.SS "\s-1OPTIONS\s0"
.IX Subsection "OPTIONS"
.IP "\-a" 4
.IX Item "-a"
Print all current settings in human-readable  form.
.IP "\-g" 4
.IX Item "-g"
Print all current settings in a form  that  can  be
used  as  an  argument  to  another stty command to
restore the current settings.
.IP "\-v,\-\-version" 4
.IX Item "-v,--version"
Print version info.
.SH "Direct Subroutines"
.IX Header "Direct Subroutines"
.IP "\fB\f(BIstty()\fB\fR" 4
.IX Item "stty()"
.Vb 1
\&    IO::Stty::stty(\e*STDIN, @params);
.Ve
.Sp
From comments:
.Sp
.Vb 5
\&    I\*(Aqm not feeling very inspired about this. Terminal parameters are obscure
\&    and boring. Basically what this will do is get the current setting,
\&    take the parameters, modify the setting and write it back. Zzzz.
\&    This is not especially efficent and probably not too fast. Assuming the POSIX
\&    spec has been implemented properly it should mostly work.
.Ve
.IP "\fB\f(BIshow_me_the_crap()\fB\fR" 4
.IX Item "show_me_the_crap()"
Needs documentation
.SH "AUTHOR"
.IX Header "AUTHOR"
Austin Schutz <auschutz@cpan.org> (Initial version and maintenance)
.PP
Todd Rinaldo <toddr@cpan.org> (Maintenance)
.SH "BUGS"
.IX Header "BUGS"
This is use at your own risk software. Do anything you want with it except
blame me for it blowing up your machine because it's full of bugs.
.PP
See above for what functions are supported. It's mostly standard \s-1POSIX\s0
stuff. If any of the settings are wrong and you actually know what some of
these extremely arcane settings (like what 'sane' should be in \s-1POSIX\s0 land)
really should be, please open an \s-1RT\s0 ticket.
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
None
.SH "COPYRIGHT & LICENSE"
.IX Header "COPYRIGHT & LICENSE"
Copyright 1997 Austin Schutz, all rights reserved.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
                                                                                                                                                                                                                                                                                                                                                                           osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/IO::Stty5.18.3pm                             0100644 0001750 0001750 00000030537 12566241706 023205  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "IO::Stty 3"
.TH IO::Stty 3 "2015-08-22" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Change and print terminal line settings
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&    # calling the script directly
\&    stty.pl [setting...]
\&    stty.pl {\-a,\-g,\-v,\-\-version}
\&    
\&    # Calling Stty module
\&    use IO::Stty;
\&    IO::Stty::stty(\e*TTYHANDLE, @modes);
\&
\&     use IO::Stty;
\&     $old_mode=IO::Stty::stty(\e*STDIN,\*(Aq\-g\*(Aq);
\&
\&     # Turn off echoing.
\&     IO::Stty::stty(\e*STDIN,\*(Aq\-echo\*(Aq);
\&
\&     # Do whatever.. grab input maybe?
\&     $read_password = <>;
\&
\&     # Now restore the old mode.
\&     IO::Stty::stty(\e*STDIN,$old_mode);
\&
\&     # What settings do we have anyway?
\&     print IO::Stty::stty(\e*STDIN,\*(Aq\-a\*(Aq);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is the \s-1PERL POSIX\s0 compliant stty.
.SH "INTRO"
.IX Header "INTRO"
This has not been tailored to the IO::File stuff but will work with it as
indicated. Before you go futzing with term parameters it's a good idea to grab
the current settings and restore them when you finish.
.PP
stty accepts the following non-option arguments that change aspects of the
terminal line operation. A `[\-]' before a capability means that it can be
turned off by preceding it with a `\-'.
.SH "stty parameters"
.IX Header "stty parameters"
.SS "Control settings"
.IX Subsection "Control settings"
.IP "[\-]parenb" 4
.IX Item "[-]parenb"
Generate parity bit in output and expect parity bit in input.
.IP "[\-]parodd" 4
.IX Item "[-]parodd"
Set odd parity (even with `\-').
.IP "cs5 cs6 cs7 cs8" 4
.IX Item "cs5 cs6 cs7 cs8"
Set character size to 5, 6, 7, or 8 bits.
.IP "[\-]hupcl [\-]hup" 4
.IX Item "[-]hupcl [-]hup"
Send a hangup signal when the last process closes the tty.
.IP "[\-]cstopb" 4
.IX Item "[-]cstopb"
Use two stop bits per character (one with `\-').
.IP "[\-]cread" 4
.IX Item "[-]cread"
Allow input to be received.
.IP "[\-]clocal" 4
.IX Item "[-]clocal"
Disable modem control signals.
.SS "Input settings"
.IX Subsection "Input settings"
.IP "[\-]ignbrk" 4
.IX Item "[-]ignbrk"
Ignore break characters.
.IP "[\-]brkint" 4
.IX Item "[-]brkint"
Breaks cause an interrupt signal.
.IP "[\-]ignpar" 4
.IX Item "[-]ignpar"
Ignore characters with parity errors.
.IP "[\-]parmrk" 4
.IX Item "[-]parmrk"
Mark parity errors (with a 255\-0\-character sequence).
.IP "[\-]inpck" 4
.IX Item "[-]inpck"
Enable input parity checking.
.IP "[\-]istrip" 4
.IX Item "[-]istrip"
Clear high (8th) bit of input characters.
.IP "[\-]inlcr" 4
.IX Item "[-]inlcr"
Translate newline to carriage return.
.IP "[\-]igncr" 4
.IX Item "[-]igncr"
Ignore carriage return.
.IP "[\-]icrnl" 4
.IX Item "[-]icrnl"
Translate carriage return to newline.
.IP "[\-]ixon" 4
.IX Item "[-]ixon"
Enable \s-1XON/XOFF\s0 flow control.
.IP "[\-]ixoff" 4
.IX Item "[-]ixoff"
Enable sending of stop character when the system
input buffer is almost full, and start character
when it becomes almost empty again.
.SS "Output settings"
.IX Subsection "Output settings"
.IP "[\-]opost" 4
.IX Item "[-]opost"
Postprocess output.
.SS "Local settings"
.IX Subsection "Local settings"
.IP "[\-]isig" 4
.IX Item "[-]isig"
Enable interrupt, quit, and suspend special characters.
.IP "[\-]icanon" 4
.IX Item "[-]icanon"
Enable erase, kill, werase, and rprnt special characters.
.IP "[\-]echo" 4
.IX Item "[-]echo"
Echo input characters.
.IP "[\-]echoe, [\-]crterase" 4
.IX Item "[-]echoe, [-]crterase"
Echo erase characters as backspace-space-backspace.
.IP "[\-]echok" 4
.IX Item "[-]echok"
Echo a newline after a kill character.
.IP "[\-]echonl" 4
.IX Item "[-]echonl"
Echo newline even if not echoing other characters.
.IP "[\-]noflsh" 4
.IX Item "[-]noflsh"
Disable flushing after interrupt and quit special characters.
.Sp
* Though this claims non-posixhood it is supported by the perl \s-1POSIX\s0.pm.
.IP "[\-]tostop (np)" 4
.IX Item "[-]tostop (np)"
Stop background jobs that try to write to the terminal.
.SS "Combination settings"
.IX Subsection "Combination settings"
.IP "ek" 4
.IX Item "ek"
Reset the erase and kill special characters to their default values.
.IP "sane" 4
.IX Item "sane"
Same as:
.Sp
.Vb 2
\&    cread \-ignbrk brkint \-inlcr \-igncr icrnl \-ixoff opost 
\&    isig icanon echo echoe echok \-echonl \-noflsh \-tostop
.Ve
.Sp
also sets all special characters to their default
values.
.IP "[\-]cooked" 4
.IX Item "[-]cooked"
Same as:
.Sp
.Vb 1
\&    brkint ignpar istrip icrnl ixon opost isig icanon
.Ve
.Sp
plus sets the eof and eol characters to their default values 
if they are the same as the min and time characters.
With `\-', same as raw.
.IP "[\-]raw" 4
.IX Item "[-]raw"
Same as:
.Sp
.Vb 2
\&    \-ignbrk \-brkint \-ignpar \-parmrk \-inpck \-istrip \-inlcr \-igncr
\&    \-icrnl \-ixon \-ixoff \-opost \-isig \-icanon min 1 time 0
.Ve
.Sp
With `\-', same as cooked.
.IP "[\-]pass8" 4
.IX Item "[-]pass8"
Same as:
.Sp
.Vb 1
\&    \-parenb \-istrip cs8
.Ve
.Sp
With  `\-',  same  as parenb istrip cs7.
.IP "dec" 4
.IX Item "dec"
Same as:
.Sp
.Vb 1
\&    echoe echoctl echoke \-ixany
.Ve
.Sp
Also sets the interrupt special character to Ctrl-C, erase to
Del, and kill to Ctrl-U.
.SS "Special characters"
.IX Subsection "Special characters"
The special characters' default values vary from system to
system. They are set with the syntax `name value', where
the names are listed below and the value can be given
either literally, in hat notation (`^c'), or as an integer
which may start with `0x' to indicate hexadecimal, `0' to
indicate octal, or any other digit to indicate decimal.
Giving a value of `^\-' or `undef' disables that special
character.
.IP "intr" 4
.IX Item "intr"
Send an interrupt signal.
.IP "quit" 4
.IX Item "quit"
Send a quit signal.
.IP "erase" 4
.IX Item "erase"
Erase the last character typed.
.IP "kill" 4
.IX Item "kill"
Erase the current line.
.IP "eof" 4
.IX Item "eof"
Send an end of file (terminate the input).
.IP "eol" 4
.IX Item "eol"
End the line.
.IP "start" 4
.IX Item "start"
Restart the output after stopping it.
.IP "stop" 4
.IX Item "stop"
Stop the output.
.IP "susp" 4
.IX Item "susp"
Send a terminal stop signal.
.SS "Special settings"
.IX Subsection "Special settings"
.IP "min N" 4
.IX Item "min N"
Set the minimum number of characters that will satisfy a read 
until the time value has expired,  when <E>\-icanon<E> is set.
.IP "time N" 4
.IX Item "time N"
Set the number of tenths of a second before reads
time out if the min number of characters  have  not
been read, when \-icanon is set.
.IP "N" 4
.IX Item "N"
Set the input and output speeds to N.  N can be one
of: 0 50 75 110 134 134.5 150 200 300 600 1200 1800
2400 4800 9600 19200 38400 exta extb.  exta is  the
same  as 19200; extb is the same as 38400.  0 hangs
up the line if \-clocal is set.
.SS "\s-1OPTIONS\s0"
.IX Subsection "OPTIONS"
.IP "\-a" 4
.IX Item "-a"
Print all current settings in human-readable  form.
.IP "\-g" 4
.IX Item "-g"
Print all current settings in a form  that  can  be
used  as  an  argument  to  another stty command to
restore the current settings.
.IP "\-v,\-\-version" 4
.IX Item "-v,--version"
Print version info.
.SH "Direct Subroutines"
.IX Header "Direct Subroutines"
.IP "\fB\f(BIstty()\fB\fR" 4
.IX Item "stty()"
.Vb 1
\&    IO::Stty::stty(\e*STDIN, @params);
.Ve
.Sp
From comments:
.Sp
.Vb 5
\&    I\*(Aqm not feeling very inspired about this. Terminal parameters are obscure
\&    and boring. Basically what this will do is get the current setting,
\&    take the parameters, modify the setting and write it back. Zzzz.
\&    This is not especially efficent and probably not too fast. Assuming the POSIX
\&    spec has been implemented properly it should mostly work.
.Ve
.IP "\fB\f(BIshow_me_the_crap()\fB\fR" 4
.IX Item "show_me_the_crap()"
Needs documentation
.SH "AUTHOR"
.IX Header "AUTHOR"
Austin Schutz <auschutz@cpan.org> (Initial version and maintenance)
.PP
Todd Rinaldo <toddr@cpan.org> (Maintenance)
.SH "BUGS"
.IX Header "BUGS"
This is use at your own risk software. Do anything you want with it except
blame me for it blowing up your machine because it's full of bugs.
.PP
See above for what functions are supported. It's mostly standard \s-1POSIX\s0
stuff. If any of the settings are wrong and you actually know what some of
these extremely arcane settings (like what 'sane' should be in \s-1POSIX\s0 land)
really should be, please open an \s-1RT\s0 ticket.
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
None
.SH "COPYRIGHT & LICENSE"
.IX Header "COPYRIGHT & LICENSE"
Copyright 1997 Austin Schutz, all rights reserved.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
                                                                                                                                                                 osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/IO::Tty.3pm                                  0100644 0001750 0001750 00000023644 12566241776 022516  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Tty 3"
.TH Tty 3 "2010-10-11" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
IO::Tty \- Low\-level allocate a pseudo\-Tty, import constants.
.SH "VERSION"
.IX Header "VERSION"
1.10
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&    use IO::Tty qw(TIOCNOTTY);
\&    ...
\&    # use only to import constants, see IO::Pty to create ptys.
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`IO::Tty\*(C'\fR is used internally by \f(CW\*(C`IO::Pty\*(C'\fR to create a pseudo-tty.
You wouldn't want to use it directly except to import constants, use
\&\f(CW\*(C`IO::Pty\*(C'\fR.  For a list of importable constants, see
IO::Tty::Constant.
.PP
Windows is now supported, but \s-1ONLY\s0 under the Cygwin
environment, see <http://sources.redhat.com/cygwin/>.
.PP
Please note that pty creation is very system-dependend.  From my
experience, any modern \s-1POSIX\s0 system should be fine.  Find below a list
of systems that \f(CW\*(C`IO::Tty\*(C'\fR should work on.  A more detailed table
(which is slowly getting out-of-date) is available from the project
pages document manager at SourceForge
<http://sourceforge.net/projects/expectperl/>.
.PP
If you have problems on your system and your system is listed in the
\&\*(L"verified\*(R" list, you probably have some non-standard setup, e.g. you
compiled your Linux-kernel yourself and disabled ptys (bummer!).
Please ask your friendly sysadmin for help.
.PP
If your system is not listed, unpack the latest version of \f(CW\*(C`IO::Tty\*(C'\fR,
do a \f(CW\*(Aqperl Makefile.PL; make; make test; uname \-a\*(Aq\fR and send me
(\fIRGiersig@cpan.org\fR) the results and I'll see what I can deduce from
that.  There are chances that it will work right out-of-the-box...
.PP
If it's working on your system, please send me a short note with
details (version number, distribution, etc. 'uname \-a' and 'perl \-V'
is a good start; also, the output from \*(L"perl Makefile.PL\*(R" contains a
lot of interesting info, so please include that as well) so I can get
an overview.  Thanks!
.SH "VERIFIED SYSTEMS, KNOWN ISSUES"
.IX Header "VERIFIED SYSTEMS, KNOWN ISSUES"
This is a list of systems that \f(CW\*(C`IO::Tty\*(C'\fR seems to work on ('make
test' passes) with comments about \*(L"features\*(R":
.IP "\(bu" 4
\&\s-1AIX 4.3\s0
.Sp
Returns \s-1EIO\s0 instead of \s-1EOF\s0 when the slave is closed.  Benign.
.IP "\(bu" 4
\&\s-1AIX 5\s0.x
.IP "\(bu" 4
FreeBSD 4.4
.Sp
\&\s-1EOF\s0 on the slave tty is not reported back to the master.
.IP "\(bu" 4
OpenBSD 2.8
.Sp
The ioctl \s-1TIOCSCTTY\s0 sometimes fails.  This is also known in
Tcl/Expect, see http://expect.nist.gov/FAQ.html
.Sp
\&\s-1EOF\s0 on the slave tty is not reported back to the master.
.IP "\(bu" 4
Darwin 7.9.0
.IP "\(bu" 4
\&\s-1HPUX 10.20 & 11.00\s0
.Sp
\&\s-1EOF\s0 on the slave tty is not reported back to the master.
.IP "\(bu" 4
\&\s-1IRIX 6.5\s0
.IP "\(bu" 4
Linux 2.2.x & 2.4.x
.Sp
Returns \s-1EIO\s0 instead of \s-1EOF\s0 when the slave is closed.  Benign.
.IP "\(bu" 4
\&\s-1OSF 4.0\s0
.Sp
\&\s-1EOF\s0 on the slave tty is not reported back to the master.
.IP "\(bu" 4
Solaris 8, 2.7, 2.6
.Sp
Has the \*(L"feature\*(R" of returning \s-1EOF\s0 just once?!
.Sp
\&\s-1EOF\s0 on the slave tty is not reported back to the master.
.IP "\(bu" 4
Windows NT/2k/XP (under Cygwin)
.Sp
When you send (print) a too long line (>160 chars) to a non-raw pty,
the call just hangs forever and even \fIalarm()\fR cannot get you out.
Don't complain to me...
.Sp
\&\s-1EOF\s0 on the slave tty is not reported back to the master.
.IP "\(bu" 4
z/OS
.PP
The following systems have not been verified yet for this version, but
a previous version worked on them:
.IP "\(bu" 4
\&\s-1SCO\s0 Unix
.IP "\(bu" 4
NetBSD
.Sp
probably the same as the other *BSDs...
.PP
If you have additions to these lists, please mail them to
<\fIRGiersig@cpan.org\fR>.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
IO::Pty, IO::Tty::Constant
.SH "MAILING LISTS"
.IX Header "MAILING LISTS"
As this module is mainly used by Expect, support for it is available
via the two Expect mailing lists, expectperl-announce and
expectperl-discuss, at
.PP
.Vb 1
\&  http://lists.sourceforge.net/lists/listinfo/expectperl\-announce
.Ve
.PP
and
.PP
.Vb 1
\&  http://lists.sourceforge.net/lists/listinfo/expectperl\-discuss
.Ve
.SH "AUTHORS"
.IX Header "AUTHORS"
Originally by Graham Barr <\fIgbarr@pobox.com\fR>, based on the
Ptty module by Nick Ing-Simmons <\fInik@tiuk.ti.com\fR>.
.PP
Now maintained and heavily rewritten by Roland Giersig
<\fIRGiersig@cpan.org\fR>.
.PP
Contains copyrighted stuff from openssh v3.0p1, authored by Tatu
Ylonen <ylo@cs.hut.fi>, Markus Friedl and Todd C. Miller
<Todd.Miller@courtesan.com>.  I also got a lot of inspiry from the pty
code in Xemacs.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Now all code is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
.PP
Nevertheless the above \s-1AUTHORS\s0 retain their copyrights to the various
parts and want to receive credit if their source code is used.
See the source for details.
.SH "DISCLAIMER"
.IX Header "DISCLAIMER"
\&\s-1THIS SOFTWARE IS PROVIDED\s0 ``\s-1AS IS\s0'' \s-1AND ANY EXPRESS OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES \s0(\s-1INCLUDING,
BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES\s0; \s-1LOSS
OF USE, DATA, OR PROFITS\s0; \s-1OR BUSINESS INTERRUPTION\s0) \s-1HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
TORT \s0(\s-1INCLUDING NEGLIGENCE OR OTHERWISE\s0) \s-1ARISING IN ANY WAY OUT OF THE
USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
DAMAGE.\s0
.PP
In other words: Use at your own risk.  Provided as is.  Your mileage
may vary.  Read the source, Luke!
.PP
And finally, just to be sure:
.PP
Any Use of This Product, in Any Manner Whatsoever, Will Increase the
Amount of Disorder in the Universe. Although No Liability Is Implied
Herein, the Consumer Is Warned That This Process Will Ultimately Lead
to the Heat Death of the Universe.
                                                                                            osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/IO::Tty5.16.3pm                              0100644 0001750 0001750 00000024616 12566241774 023026  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Tty 3"
.TH Tty 3 "2010-10-11" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
IO::Tty \- Low\-level allocate a pseudo\-Tty, import constants.
.SH "VERSION"
.IX Header "VERSION"
1.10
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&    use IO::Tty qw(TIOCNOTTY);
\&    ...
\&    # use only to import constants, see IO::Pty to create ptys.
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`IO::Tty\*(C'\fR is used internally by \f(CW\*(C`IO::Pty\*(C'\fR to create a pseudo-tty.
You wouldn't want to use it directly except to import constants, use
\&\f(CW\*(C`IO::Pty\*(C'\fR.  For a list of importable constants, see
IO::Tty::Constant.
.PP
Windows is now supported, but \s-1ONLY\s0 under the Cygwin
environment, see <http://sources.redhat.com/cygwin/>.
.PP
Please note that pty creation is very system-dependend.  From my
experience, any modern \s-1POSIX\s0 system should be fine.  Find below a list
of systems that \f(CW\*(C`IO::Tty\*(C'\fR should work on.  A more detailed table
(which is slowly getting out-of-date) is available from the project
pages document manager at SourceForge
<http://sourceforge.net/projects/expectperl/>.
.PP
If you have problems on your system and your system is listed in the
\&\*(L"verified\*(R" list, you probably have some non-standard setup, e.g. you
compiled your Linux-kernel yourself and disabled ptys (bummer!).
Please ask your friendly sysadmin for help.
.PP
If your system is not listed, unpack the latest version of \f(CW\*(C`IO::Tty\*(C'\fR,
do a \f(CW\*(Aqperl Makefile.PL; make; make test; uname \-a\*(Aq\fR and send me
(\fIRGiersig@cpan.org\fR) the results and I'll see what I can deduce from
that.  There are chances that it will work right out-of-the-box...
.PP
If it's working on your system, please send me a short note with
details (version number, distribution, etc. 'uname \-a' and 'perl \-V'
is a good start; also, the output from \*(L"perl Makefile.PL\*(R" contains a
lot of interesting info, so please include that as well) so I can get
an overview.  Thanks!
.SH "VERIFIED SYSTEMS, KNOWN ISSUES"
.IX Header "VERIFIED SYSTEMS, KNOWN ISSUES"
This is a list of systems that \f(CW\*(C`IO::Tty\*(C'\fR seems to work on ('make
test' passes) with comments about \*(L"features\*(R":
.IP "\(bu" 4
\&\s-1AIX\s0 4.3
.Sp
Returns \s-1EIO\s0 instead of \s-1EOF\s0 when the slave is closed.  Benign.
.IP "\(bu" 4
\&\s-1AIX\s0 5.x
.IP "\(bu" 4
FreeBSD 4.4
.Sp
\&\s-1EOF\s0 on the slave tty is not reported back to the master.
.IP "\(bu" 4
OpenBSD 2.8
.Sp
The ioctl \s-1TIOCSCTTY\s0 sometimes fails.  This is also known in
Tcl/Expect, see http://expect.nist.gov/FAQ.html
.Sp
\&\s-1EOF\s0 on the slave tty is not reported back to the master.
.IP "\(bu" 4
Darwin 7.9.0
.IP "\(bu" 4
\&\s-1HPUX\s0 10.20 & 11.00
.Sp
\&\s-1EOF\s0 on the slave tty is not reported back to the master.
.IP "\(bu" 4
\&\s-1IRIX\s0 6.5
.IP "\(bu" 4
Linux 2.2.x & 2.4.x
.Sp
Returns \s-1EIO\s0 instead of \s-1EOF\s0 when the slave is closed.  Benign.
.IP "\(bu" 4
\&\s-1OSF\s0 4.0
.Sp
\&\s-1EOF\s0 on the slave tty is not reported back to the master.
.IP "\(bu" 4
Solaris 8, 2.7, 2.6
.Sp
Has the \*(L"feature\*(R" of returning \s-1EOF\s0 just once?!
.Sp
\&\s-1EOF\s0 on the slave tty is not reported back to the master.
.IP "\(bu" 4
Windows NT/2k/XP (under Cygwin)
.Sp
When you send (print) a too long line (>160 chars) to a non-raw pty,
the call just hangs forever and even \fIalarm()\fR cannot get you out.
Don't complain to me...
.Sp
\&\s-1EOF\s0 on the slave tty is not reported back to the master.
.IP "\(bu" 4
z/OS
.PP
The following systems have not been verified yet for this version, but
a previous version worked on them:
.IP "\(bu" 4
\&\s-1SCO\s0 Unix
.IP "\(bu" 4
NetBSD
.Sp
probably the same as the other *BSDs...
.PP
If you have additions to these lists, please mail them to
<\fIRGiersig@cpan.org\fR>.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
IO::Pty, IO::Tty::Constant
.SH "MAILING LISTS"
.IX Header "MAILING LISTS"
As this module is mainly used by Expect, support for it is available
via the two Expect mailing lists, expectperl-announce and
expectperl-discuss, at
.PP
.Vb 1
\&  http://lists.sourceforge.net/lists/listinfo/expectperl\-announce
.Ve
.PP
and
.PP
.Vb 1
\&  http://lists.sourceforge.net/lists/listinfo/expectperl\-discuss
.Ve
.SH "AUTHORS"
.IX Header "AUTHORS"
Originally by Graham Barr <\fIgbarr@pobox.com\fR>, based on the
Ptty module by Nick Ing-Simmons <\fInik@tiuk.ti.com\fR>.
.PP
Now maintained and heavily rewritten by Roland Giersig
<\fIRGiersig@cpan.org\fR>.
.PP
Contains copyrighted stuff from openssh v3.0p1, authored by Tatu
Ylonen <ylo@cs.hut.fi>, Markus Friedl and Todd C. Miller
<Todd.Miller@courtesan.com>.  I also got a lot of inspiry from the pty
code in Xemacs.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Now all code is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
.PP
Nevertheless the above \s-1AUTHORS\s0 retain their copyrights to the various
parts and want to receive credit if their source code is used.
See the source for details.
.SH "DISCLAIMER"
.IX Header "DISCLAIMER"
\&\s-1THIS\s0 \s-1SOFTWARE\s0 \s-1IS\s0 \s-1PROVIDED\s0 ``\s-1AS\s0 \s-1IS\s0'' \s-1AND\s0 \s-1ANY\s0 \s-1EXPRESS\s0 \s-1OR\s0 \s-1IMPLIED\s0
\&\s-1WARRANTIES\s0, \s-1INCLUDING\s0, \s-1BUT\s0 \s-1NOT\s0 \s-1LIMITED\s0 \s-1TO\s0, \s-1THE\s0 \s-1IMPLIED\s0 \s-1WARRANTIES\s0 \s-1OF\s0
\&\s-1MERCHANTABILITY\s0 \s-1AND\s0 \s-1FITNESS\s0 \s-1FOR\s0 A \s-1PARTICULAR\s0 \s-1PURPOSE\s0 \s-1ARE\s0 \s-1DISCLAIMED\s0.
\&\s-1IN\s0 \s-1NO\s0 \s-1EVENT\s0 \s-1SHALL\s0 \s-1THE\s0 \s-1AUTHORS\s0 \s-1BE\s0 \s-1LIABLE\s0 \s-1FOR\s0 \s-1ANY\s0 \s-1DIRECT\s0, \s-1INDIRECT\s0,
\&\s-1INCIDENTAL\s0, \s-1SPECIAL\s0, \s-1EXEMPLARY\s0, \s-1OR\s0 \s-1CONSEQUENTIAL\s0 \s-1DAMAGES\s0 (\s-1INCLUDING\s0,
\&\s-1BUT\s0 \s-1NOT\s0 \s-1LIMITED\s0 \s-1TO\s0, \s-1PROCUREMENT\s0 \s-1OF\s0 \s-1SUBSTITUTE\s0 \s-1GOODS\s0 \s-1OR\s0 \s-1SERVICES\s0; \s-1LOSS\s0
\&\s-1OF\s0 \s-1USE\s0, \s-1DATA\s0, \s-1OR\s0 \s-1PROFITS\s0; \s-1OR\s0 \s-1BUSINESS\s0 \s-1INTERRUPTION\s0) \s-1HOWEVER\s0 \s-1CAUSED\s0 \s-1AND\s0
\&\s-1ON\s0 \s-1ANY\s0 \s-1THEORY\s0 \s-1OF\s0 \s-1LIABILITY\s0, \s-1WHETHER\s0 \s-1IN\s0 \s-1CONTRACT\s0, \s-1STRICT\s0 \s-1LIABILITY\s0, \s-1OR\s0
\&\s-1TORT\s0 (\s-1INCLUDING\s0 \s-1NEGLIGENCE\s0 \s-1OR\s0 \s-1OTHERWISE\s0) \s-1ARISING\s0 \s-1IN\s0 \s-1ANY\s0 \s-1WAY\s0 \s-1OUT\s0 \s-1OF\s0 \s-1THE\s0
\&\s-1USE\s0 \s-1OF\s0 \s-1THIS\s0 \s-1SOFTWARE\s0, \s-1EVEN\s0 \s-1IF\s0 \s-1ADVISED\s0 \s-1OF\s0 \s-1THE\s0 \s-1POSSIBILITY\s0 \s-1OF\s0 \s-1SUCH\s0
\&\s-1DAMAGE\s0.
.PP
In other words: Use at your own risk.  Provided as is.  Your mileage
may vary.  Read the source, Luke!
.PP
And finally, just to be sure:
.PP
Any Use of This Product, in Any Manner Whatsoever, Will Increase the
Amount of Disorder in the Universe. Although No Liability Is Implied
Herein, the Consumer Is Warned That This Process Will Ultimately Lead
to the Heat Death of the Universe.
                                                                                                                  osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/IO::Tty5.18.3pm                              0100644 0001750 0001750 00000023644 12566241776 023032  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Tty 3"
.TH Tty 3 "2010-10-11" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
IO::Tty \- Low\-level allocate a pseudo\-Tty, import constants.
.SH "VERSION"
.IX Header "VERSION"
1.10
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&    use IO::Tty qw(TIOCNOTTY);
\&    ...
\&    # use only to import constants, see IO::Pty to create ptys.
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`IO::Tty\*(C'\fR is used internally by \f(CW\*(C`IO::Pty\*(C'\fR to create a pseudo-tty.
You wouldn't want to use it directly except to import constants, use
\&\f(CW\*(C`IO::Pty\*(C'\fR.  For a list of importable constants, see
IO::Tty::Constant.
.PP
Windows is now supported, but \s-1ONLY\s0 under the Cygwin
environment, see <http://sources.redhat.com/cygwin/>.
.PP
Please note that pty creation is very system-dependend.  From my
experience, any modern \s-1POSIX\s0 system should be fine.  Find below a list
of systems that \f(CW\*(C`IO::Tty\*(C'\fR should work on.  A more detailed table
(which is slowly getting out-of-date) is available from the project
pages document manager at SourceForge
<http://sourceforge.net/projects/expectperl/>.
.PP
If you have problems on your system and your system is listed in the
\&\*(L"verified\*(R" list, you probably have some non-standard setup, e.g. you
compiled your Linux-kernel yourself and disabled ptys (bummer!).
Please ask your friendly sysadmin for help.
.PP
If your system is not listed, unpack the latest version of \f(CW\*(C`IO::Tty\*(C'\fR,
do a \f(CW\*(Aqperl Makefile.PL; make; make test; uname \-a\*(Aq\fR and send me
(\fIRGiersig@cpan.org\fR) the results and I'll see what I can deduce from
that.  There are chances that it will work right out-of-the-box...
.PP
If it's working on your system, please send me a short note with
details (version number, distribution, etc. 'uname \-a' and 'perl \-V'
is a good start; also, the output from \*(L"perl Makefile.PL\*(R" contains a
lot of interesting info, so please include that as well) so I can get
an overview.  Thanks!
.SH "VERIFIED SYSTEMS, KNOWN ISSUES"
.IX Header "VERIFIED SYSTEMS, KNOWN ISSUES"
This is a list of systems that \f(CW\*(C`IO::Tty\*(C'\fR seems to work on ('make
test' passes) with comments about \*(L"features\*(R":
.IP "\(bu" 4
\&\s-1AIX 4.3\s0
.Sp
Returns \s-1EIO\s0 instead of \s-1EOF\s0 when the slave is closed.  Benign.
.IP "\(bu" 4
\&\s-1AIX 5\s0.x
.IP "\(bu" 4
FreeBSD 4.4
.Sp
\&\s-1EOF\s0 on the slave tty is not reported back to the master.
.IP "\(bu" 4
OpenBSD 2.8
.Sp
The ioctl \s-1TIOCSCTTY\s0 sometimes fails.  This is also known in
Tcl/Expect, see http://expect.nist.gov/FAQ.html
.Sp
\&\s-1EOF\s0 on the slave tty is not reported back to the master.
.IP "\(bu" 4
Darwin 7.9.0
.IP "\(bu" 4
\&\s-1HPUX 10.20 & 11.00\s0
.Sp
\&\s-1EOF\s0 on the slave tty is not reported back to the master.
.IP "\(bu" 4
\&\s-1IRIX 6.5\s0
.IP "\(bu" 4
Linux 2.2.x & 2.4.x
.Sp
Returns \s-1EIO\s0 instead of \s-1EOF\s0 when the slave is closed.  Benign.
.IP "\(bu" 4
\&\s-1OSF 4.0\s0
.Sp
\&\s-1EOF\s0 on the slave tty is not reported back to the master.
.IP "\(bu" 4
Solaris 8, 2.7, 2.6
.Sp
Has the \*(L"feature\*(R" of returning \s-1EOF\s0 just once?!
.Sp
\&\s-1EOF\s0 on the slave tty is not reported back to the master.
.IP "\(bu" 4
Windows NT/2k/XP (under Cygwin)
.Sp
When you send (print) a too long line (>160 chars) to a non-raw pty,
the call just hangs forever and even \fIalarm()\fR cannot get you out.
Don't complain to me...
.Sp
\&\s-1EOF\s0 on the slave tty is not reported back to the master.
.IP "\(bu" 4
z/OS
.PP
The following systems have not been verified yet for this version, but
a previous version worked on them:
.IP "\(bu" 4
\&\s-1SCO\s0 Unix
.IP "\(bu" 4
NetBSD
.Sp
probably the same as the other *BSDs...
.PP
If you have additions to these lists, please mail them to
<\fIRGiersig@cpan.org\fR>.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
IO::Pty, IO::Tty::Constant
.SH "MAILING LISTS"
.IX Header "MAILING LISTS"
As this module is mainly used by Expect, support for it is available
via the two Expect mailing lists, expectperl-announce and
expectperl-discuss, at
.PP
.Vb 1
\&  http://lists.sourceforge.net/lists/listinfo/expectperl\-announce
.Ve
.PP
and
.PP
.Vb 1
\&  http://lists.sourceforge.net/lists/listinfo/expectperl\-discuss
.Ve
.SH "AUTHORS"
.IX Header "AUTHORS"
Originally by Graham Barr <\fIgbarr@pobox.com\fR>, based on the
Ptty module by Nick Ing-Simmons <\fInik@tiuk.ti.com\fR>.
.PP
Now maintained and heavily rewritten by Roland Giersig
<\fIRGiersig@cpan.org\fR>.
.PP
Contains copyrighted stuff from openssh v3.0p1, authored by Tatu
Ylonen <ylo@cs.hut.fi>, Markus Friedl and Todd C. Miller
<Todd.Miller@courtesan.com>.  I also got a lot of inspiry from the pty
code in Xemacs.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Now all code is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
.PP
Nevertheless the above \s-1AUTHORS\s0 retain their copyrights to the various
parts and want to receive credit if their source code is used.
See the source for details.
.SH "DISCLAIMER"
.IX Header "DISCLAIMER"
\&\s-1THIS SOFTWARE IS PROVIDED\s0 ``\s-1AS IS\s0'' \s-1AND ANY EXPRESS OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES \s0(\s-1INCLUDING,
BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES\s0; \s-1LOSS
OF USE, DATA, OR PROFITS\s0; \s-1OR BUSINESS INTERRUPTION\s0) \s-1HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
TORT \s0(\s-1INCLUDING NEGLIGENCE OR OTHERWISE\s0) \s-1ARISING IN ANY WAY OUT OF THE
USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
DAMAGE.\s0
.PP
In other words: Use at your own risk.  Provided as is.  Your mileage
may vary.  Read the source, Luke!
.PP
And finally, just to be sure:
.PP
Any Use of This Product, in Any Manner Whatsoever, Will Increase the
Amount of Disorder in the Universe. Although No Liability Is Implied
Herein, the Consumer Is Warned That This Process Will Ultimately Lead
to the Heat Death of the Universe.
                                                                                            osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/IO::Tty::Constant.3pm                        0100644 0001750 0001750 00000027063 12566241776 024413  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Tty::Constant 3"
.TH Tty::Constant 3 "2015-08-22" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
IO::Tty::Constant \- Terminal Constants (autogenerated)
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& use IO::Tty::Constant qw(TIOCNOTTY);
\& ...
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This package defines constants usually found in <termio.h> or
<termios.h> (and their #include hierarchy).  Find below an
autogenerated alphabetic list of all known constants and whether they
are defined on your system (prefixed with '+') and have compilation
problems ('o').  Undefined or problematic constants are set to 'undef'.
.SH "DEFINED CONSTANTS"
.IX Header "DEFINED CONSTANTS"
.IP "+" 4
B0
.IP "+" 4
B110
.IP "+" 4
B115200
.IP "+" 4
B1200
.IP "+" 4
B134
.IP "+" 4
B150
.IP "\-" 4
B153600
.IP "+" 4
B1800
.IP "+" 4
B19200
.IP "+" 4
B200
.IP "+" 4
B230400
.IP "+" 4
B2400
.IP "+" 4
B300
.IP "\-" 4
B307200
.IP "+" 4
B38400
.IP "\-" 4
B460800
.IP "+" 4
B4800
.IP "+" 4
B50
.IP "+" 4
B57600
.IP "+" 4
B600
.IP "+" 4
B75
.IP "+" 4
B76800
.IP "+" 4
B9600
.IP "+" 4
\&\s-1BRKINT\s0
.IP "+" 4
\&\s-1BS0\s0
.IP "+" 4
\&\s-1BS1\s0
.IP "+" 4
\&\s-1BSDLY\s0
.IP "\-" 4
\&\s-1CBAUD\s0
.IP "\-" 4
\&\s-1CBAUDEXT\s0
.IP "+" 4
\&\s-1CBRK\s0
.IP "+" 4
\&\s-1CCTS_OFLOW\s0
.IP "\-" 4
\&\s-1CDEL\s0
.IP "+" 4
\&\s-1CDSUSP\s0
.IP "+" 4
\&\s-1CEOF\s0
.IP "+" 4
\&\s-1CEOL\s0
.IP "\-" 4
\&\s-1CEOL2\s0
.IP "+" 4
\&\s-1CEOT\s0
.IP "+" 4
\&\s-1CERASE\s0
.IP "\-" 4
\&\s-1CESC\s0
.IP "+" 4
\&\s-1CFLUSH\s0
.IP "\-" 4
\&\s-1CIBAUD\s0
.IP "\-" 4
\&\s-1CIBAUDEXT\s0
.IP "+" 4
\&\s-1CINTR\s0
.IP "+" 4
\&\s-1CKILL\s0
.IP "+" 4
\&\s-1CLNEXT\s0
.IP "+" 4
\&\s-1CLOCAL\s0
.IP "\-" 4
\&\s-1CNSWTCH\s0
.IP "\-" 4
\&\s-1CNUL\s0
.IP "+" 4
\&\s-1CQUIT\s0
.IP "+" 4
\&\s-1CR0\s0
.IP "+" 4
\&\s-1CR1\s0
.IP "+" 4
\&\s-1CR2\s0
.IP "+" 4
\&\s-1CR3\s0
.IP "+" 4
\&\s-1CRDLY\s0
.IP "+" 4
\&\s-1CREAD\s0
.IP "+" 4
\&\s-1CRPRNT\s0
.IP "+" 4
\&\s-1CRTSCTS\s0
.IP "\-" 4
\&\s-1CRTSXOFF\s0
.IP "+" 4
\&\s-1CRTS_IFLOW\s0
.IP "+" 4
\&\s-1CS5\s0
.IP "+" 4
\&\s-1CS6\s0
.IP "+" 4
\&\s-1CS7\s0
.IP "+" 4
\&\s-1CS8\s0
.IP "+" 4
\&\s-1CSIZE\s0
.IP "+" 4
\&\s-1CSTART\s0
.IP "+" 4
\&\s-1CSTOP\s0
.IP "+" 4
\&\s-1CSTOPB\s0
.IP "+" 4
\&\s-1CSUSP\s0
.IP "\-" 4
\&\s-1CSWTCH\s0
.IP "+" 4
\&\s-1CWERASE\s0
.IP "\-" 4
\&\s-1DEFECHO\s0
.IP "\-" 4
\&\s-1DIOC\s0
.IP "\-" 4
\&\s-1DIOCGETP\s0
.IP "\-" 4
\&\s-1DIOCSETP\s0
.IP "\-" 4
\&\s-1DOSMODE\s0
.IP "+" 4
\&\s-1ECHO\s0
.IP "+" 4
\&\s-1ECHOCTL\s0
.IP "+" 4
\&\s-1ECHOE\s0
.IP "+" 4
\&\s-1ECHOK\s0
.IP "+" 4
\&\s-1ECHOKE\s0
.IP "+" 4
\&\s-1ECHONL\s0
.IP "+" 4
\&\s-1ECHOPRT\s0
.IP "+" 4
\&\s-1EXTA\s0
.IP "+" 4
\&\s-1EXTB\s0
.IP "+" 4
\&\s-1FF0\s0
.IP "+" 4
\&\s-1FF1\s0
.IP "+" 4
\&\s-1FFDLY\s0
.IP "\-" 4
\&\s-1FIORDCHK\s0
.IP "+" 4
\&\s-1FLUSHO\s0
.IP "+" 4
\&\s-1HUPCL\s0
.IP "+" 4
\&\s-1ICANON\s0
.IP "+" 4
\&\s-1ICRNL\s0
.IP "+" 4
\&\s-1IEXTEN\s0
.IP "+" 4
\&\s-1IGNBRK\s0
.IP "+" 4
\&\s-1IGNCR\s0
.IP "+" 4
\&\s-1IGNPAR\s0
.IP "+" 4
\&\s-1IMAXBEL\s0
.IP "+" 4
\&\s-1INLCR\s0
.IP "+" 4
\&\s-1INPCK\s0
.IP "+" 4
\&\s-1ISIG\s0
.IP "+" 4
\&\s-1ISTRIP\s0
.IP "\-" 4
\&\s-1IUCLC\s0
.IP "+" 4
\&\s-1IXANY\s0
.IP "+" 4
\&\s-1IXOFF\s0
.IP "+" 4
\&\s-1IXON\s0
.IP "\-" 4
\&\s-1KBENABLED\s0
.IP "\-" 4
\&\s-1LDCHG\s0
.IP "\-" 4
\&\s-1LDCLOSE\s0
.IP "\-" 4
\&\s-1LDDMAP\s0
.IP "\-" 4
\&\s-1LDEMAP\s0
.IP "\-" 4
\&\s-1LDGETT\s0
.IP "\-" 4
\&\s-1LDGMAP\s0
.IP "\-" 4
\&\s-1LDIOC\s0
.IP "\-" 4
\&\s-1LDNMAP\s0
.IP "\-" 4
\&\s-1LDOPEN\s0
.IP "\-" 4
\&\s-1LDSETT\s0
.IP "\-" 4
\&\s-1LDSMAP\s0
.IP "\-" 4
\&\s-1LOBLK\s0
.IP "+" 4
\&\s-1NCCS\s0
.IP "+" 4
\&\s-1NL0\s0
.IP "+" 4
\&\s-1NL1\s0
.IP "+" 4
\&\s-1NLDLY\s0
.IP "+" 4
\&\s-1NOFLSH\s0
.IP "+" 4
\&\s-1OCRNL\s0
.IP "+" 4
\&\s-1OFDEL\s0
.IP "+" 4
\&\s-1OFILL\s0
.IP "\-" 4
\&\s-1OLCUC\s0
.IP "+" 4
\&\s-1ONLCR\s0
.IP "+" 4
\&\s-1ONLRET\s0
.IP "+" 4
\&\s-1ONOCR\s0
.IP "+" 4
\&\s-1OPOST\s0
.IP "\-" 4
\&\s-1PAGEOUT\s0
.IP "+" 4
\&\s-1PARENB\s0
.IP "\-" 4
\&\s-1PAREXT\s0
.IP "+" 4
\&\s-1PARMRK\s0
.IP "+" 4
\&\s-1PARODD\s0
.IP "+" 4
\&\s-1PENDIN\s0
.IP "\-" 4
\&\s-1RCV1EN\s0
.IP "\-" 4
\&\s-1RTS_TOG\s0
.IP "+" 4
\&\s-1TAB0\s0
.IP "+" 4
\&\s-1TAB1\s0
.IP "+" 4
\&\s-1TAB2\s0
.IP "+" 4
\&\s-1TAB3\s0
.IP "+" 4
\&\s-1TABDLY\s0
.IP "\-" 4
\&\s-1TCDSET\s0
.IP "\-" 4
\&\s-1TCFLSH\s0
.IP "\-" 4
\&\s-1TCGETA\s0
.IP "\-" 4
\&\s-1TCGETS\s0
.IP "+" 4
\&\s-1TCIFLUSH\s0
.IP "+" 4
\&\s-1TCIOFF\s0
.IP "+" 4
\&\s-1TCIOFLUSH\s0
.IP "+" 4
\&\s-1TCION\s0
.IP "+" 4
\&\s-1TCOFLUSH\s0
.IP "+" 4
\&\s-1TCOOFF\s0
.IP "+" 4
\&\s-1TCOON\s0
.IP "+" 4
\&\s-1TCSADRAIN\s0
.IP "+" 4
\&\s-1TCSAFLUSH\s0
.IP "+" 4
\&\s-1TCSANOW\s0
.IP "\-" 4
\&\s-1TCSBRK\s0
.IP "\-" 4
\&\s-1TCSETA\s0
.IP "\-" 4
\&\s-1TCSETAF\s0
.IP "\-" 4
\&\s-1TCSETAW\s0
.IP "\-" 4
\&\s-1TCSETCTTY\s0
.IP "\-" 4
\&\s-1TCSETS\s0
.IP "\-" 4
\&\s-1TCSETSF\s0
.IP "\-" 4
\&\s-1TCSETSW\s0
.IP "\-" 4
\&\s-1TCXONC\s0
.IP "\-" 4
\&\s-1TERM_D40\s0
.IP "\-" 4
\&\s-1TERM_D42\s0
.IP "\-" 4
\&\s-1TERM_H45\s0
.IP "\-" 4
\&\s-1TERM_NONE\s0
.IP "\-" 4
\&\s-1TERM_TEC\s0
.IP "\-" 4
\&\s-1TERM_TEX\s0
.IP "\-" 4
\&\s-1TERM_V10\s0
.IP "\-" 4
\&\s-1TERM_V61\s0
.IP "+" 4
\&\s-1TIOCCBRK\s0
.IP "+" 4
\&\s-1TIOCCDTR\s0
.IP "+" 4
\&\s-1TIOCCONS\s0
.IP "+" 4
\&\s-1TIOCEXCL\s0
.IP "+" 4
\&\s-1TIOCFLUSH\s0
.IP "+" 4
\&\s-1TIOCGETD\s0
.IP "\-" 4
\&\s-1TIOCGETC\s0
.IP "\-" 4
\&\s-1TIOCGETP\s0
.IP "\-" 4
\&\s-1TIOCGLTC\s0
.IP "\-" 4
\&\s-1TIOCSETC\s0
.IP "\-" 4
\&\s-1TIOCSETN\s0
.IP "\-" 4
\&\s-1TIOCSETP\s0
.IP "\-" 4
\&\s-1TIOCSLTC\s0
.IP "+" 4
\&\s-1TIOCGPGRP\s0
.IP "\-" 4
\&\s-1TIOCGSID\s0
.IP "\-" 4
\&\s-1TIOCGSOFTCAR\s0
.IP "+" 4
\&\s-1TIOCGWINSZ\s0
.IP "\-" 4
\&\s-1TIOCHPCL\s0
.IP "\-" 4
\&\s-1TIOCKBOF\s0
.IP "\-" 4
\&\s-1TIOCKBON\s0
.IP "\-" 4
\&\s-1TIOCLBIC\s0
.IP "\-" 4
\&\s-1TIOCLBIS\s0
.IP "\-" 4
\&\s-1TIOCLGET\s0
.IP "\-" 4
\&\s-1TIOCLSET\s0
.IP "+" 4
\&\s-1TIOCMBIC\s0
.IP "+" 4
\&\s-1TIOCMBIS\s0
.IP "+" 4
\&\s-1TIOCMGET\s0
.IP "+" 4
\&\s-1TIOCMSET\s0
.IP "+" 4
\&\s-1TIOCM_CAR\s0
.IP "+" 4
\&\s-1TIOCM_CD\s0
.IP "+" 4
\&\s-1TIOCM_CTS\s0
.IP "+" 4
\&\s-1TIOCM_DSR\s0
.IP "+" 4
\&\s-1TIOCM_DTR\s0
.IP "+" 4
\&\s-1TIOCM_LE\s0
.IP "+" 4
\&\s-1TIOCM_RI\s0
.IP "+" 4
\&\s-1TIOCM_RNG\s0
.IP "+" 4
\&\s-1TIOCM_RTS\s0
.IP "+" 4
\&\s-1TIOCM_SR\s0
.IP "+" 4
\&\s-1TIOCM_ST\s0
.IP "+" 4
\&\s-1TIOCNOTTY\s0
.IP "+" 4
\&\s-1TIOCNXCL\s0
.IP "+" 4
\&\s-1TIOCOUTQ\s0
.IP "+" 4
\&\s-1TIOCREMOTE\s0
.IP "+" 4
\&\s-1TIOCSBRK\s0
.IP "+" 4
\&\s-1TIOCSCTTY\s0
.IP "+" 4
\&\s-1TIOCSDTR\s0
.IP "+" 4
\&\s-1TIOCSETD\s0
.IP "\-" 4
\&\s-1TIOCSIGNAL\s0
.IP "+" 4
\&\s-1TIOCSPGRP\s0
.IP "\-" 4
\&\s-1TIOCSSID\s0
.IP "\-" 4
\&\s-1TIOCSSOFTCAR\s0
.IP "+" 4
\&\s-1TIOCSTART\s0
.IP "+" 4
\&\s-1TIOCSTI\s0
.IP "+" 4
\&\s-1TIOCSTOP\s0
.IP "+" 4
\&\s-1TIOCSWINSZ\s0
.IP "\-" 4
\&\s-1TM_ANL\s0
.IP "\-" 4
\&\s-1TM_CECHO\s0
.IP "\-" 4
\&\s-1TM_CINVIS\s0
.IP "\-" 4
\&\s-1TM_LCF\s0
.IP "\-" 4
\&\s-1TM_NONE\s0
.IP "\-" 4
\&\s-1TM_SET\s0
.IP "\-" 4
\&\s-1TM_SNL\s0
.IP "+" 4
\&\s-1TOSTOP\s0
.IP "\-" 4
\&\s-1VCEOF\s0
.IP "\-" 4
\&\s-1VCEOL\s0
.IP "+" 4
\&\s-1VDISCARD\s0
.IP "+" 4
\&\s-1VDSUSP\s0
.IP "+" 4
\&\s-1VEOF\s0
.IP "+" 4
\&\s-1VEOL\s0
.IP "+" 4
\&\s-1VEOL2\s0
.IP "+" 4
\&\s-1VERASE\s0
.IP "+" 4
\&\s-1VINTR\s0
.IP "+" 4
\&\s-1VKILL\s0
.IP "+" 4
\&\s-1VLNEXT\s0
.IP "+" 4
\&\s-1VMIN\s0
.IP "+" 4
\&\s-1VQUIT\s0
.IP "+" 4
\&\s-1VREPRINT\s0
.IP "+" 4
\&\s-1VSTART\s0
.IP "+" 4
\&\s-1VSTOP\s0
.IP "+" 4
\&\s-1VSUSP\s0
.IP "\-" 4
\&\s-1VSWTCH\s0
.IP "+" 4
\&\s-1VT0\s0
.IP "+" 4
\&\s-1VT1\s0
.IP "+" 4
\&\s-1VTDLY\s0
.IP "+" 4
\&\s-1VTIME\s0
.IP "+" 4
\&\s-1VWERASE\s0
.IP "\-" 4
\&\s-1WRAP\s0
.IP "\-" 4
\&\s-1XCASE\s0
.IP "\-" 4
\&\s-1XCLUDE\s0
.IP "\-" 4
\&\s-1XMT1EN\s0
.IP "\-" 4
\&\s-1XTABS\s0
.SH "FOR MORE INFO SEE"
.IX Header "FOR MORE INFO SEE"
IO::Tty
.SH "POD ERRORS"
.IX Header "POD ERRORS"
Hey! \fBThe above document had some coding errors, which are explained below:\fR
.IP "Around line 31:" 4
.IX Item "Around line 31:"
\&'=item' outside of any '=over'
.IP "Around line 1096:" 4
.IX Item "Around line 1096:"
You forgot a '=back' before '=head1'
                                                                                                                                                                                                                                                                                                                                                                                                                                                                             osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/IO::Tty::Constant5.16.3pm                    0100644 0001750 0001750 00000026542 12566241774 024724  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Tty::Constant 3"
.TH Tty::Constant 3 "2015-08-22" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
IO::Tty::Constant \- Terminal Constants (autogenerated)
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& use IO::Tty::Constant qw(TIOCNOTTY);
\& ...
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This package defines constants usually found in <termio.h> or
<termios.h> (and their #include hierarchy).  Find below an
autogenerated alphabetic list of all known constants and whether they
are defined on your system (prefixed with '+') and have compilation
problems ('o').  Undefined or problematic constants are set to 'undef'.
.SH "DEFINED CONSTANTS"
.IX Header "DEFINED CONSTANTS"
.IP "+" 4
B0
.IP "+" 4
B110
.IP "+" 4
B115200
.IP "+" 4
B1200
.IP "+" 4
B134
.IP "+" 4
B150
.IP "\-" 4
B153600
.IP "+" 4
B1800
.IP "+" 4
B19200
.IP "+" 4
B200
.IP "+" 4
B230400
.IP "+" 4
B2400
.IP "+" 4
B300
.IP "\-" 4
B307200
.IP "+" 4
B38400
.IP "\-" 4
B460800
.IP "+" 4
B4800
.IP "+" 4
B50
.IP "+" 4
B57600
.IP "+" 4
B600
.IP "+" 4
B75
.IP "+" 4
B76800
.IP "+" 4
B9600
.IP "+" 4
\&\s-1BRKINT\s0
.IP "+" 4
\&\s-1BS0\s0
.IP "+" 4
\&\s-1BS1\s0
.IP "+" 4
\&\s-1BSDLY\s0
.IP "\-" 4
\&\s-1CBAUD\s0
.IP "\-" 4
\&\s-1CBAUDEXT\s0
.IP "+" 4
\&\s-1CBRK\s0
.IP "+" 4
\&\s-1CCTS_OFLOW\s0
.IP "\-" 4
\&\s-1CDEL\s0
.IP "+" 4
\&\s-1CDSUSP\s0
.IP "+" 4
\&\s-1CEOF\s0
.IP "+" 4
\&\s-1CEOL\s0
.IP "\-" 4
\&\s-1CEOL2\s0
.IP "+" 4
\&\s-1CEOT\s0
.IP "+" 4
\&\s-1CERASE\s0
.IP "\-" 4
\&\s-1CESC\s0
.IP "+" 4
\&\s-1CFLUSH\s0
.IP "\-" 4
\&\s-1CIBAUD\s0
.IP "\-" 4
\&\s-1CIBAUDEXT\s0
.IP "+" 4
\&\s-1CINTR\s0
.IP "+" 4
\&\s-1CKILL\s0
.IP "+" 4
\&\s-1CLNEXT\s0
.IP "+" 4
\&\s-1CLOCAL\s0
.IP "\-" 4
\&\s-1CNSWTCH\s0
.IP "\-" 4
\&\s-1CNUL\s0
.IP "+" 4
\&\s-1CQUIT\s0
.IP "+" 4
\&\s-1CR0\s0
.IP "+" 4
\&\s-1CR1\s0
.IP "+" 4
\&\s-1CR2\s0
.IP "+" 4
\&\s-1CR3\s0
.IP "+" 4
\&\s-1CRDLY\s0
.IP "+" 4
\&\s-1CREAD\s0
.IP "+" 4
\&\s-1CRPRNT\s0
.IP "+" 4
\&\s-1CRTSCTS\s0
.IP "\-" 4
\&\s-1CRTSXOFF\s0
.IP "+" 4
\&\s-1CRTS_IFLOW\s0
.IP "+" 4
\&\s-1CS5\s0
.IP "+" 4
\&\s-1CS6\s0
.IP "+" 4
\&\s-1CS7\s0
.IP "+" 4
\&\s-1CS8\s0
.IP "+" 4
\&\s-1CSIZE\s0
.IP "+" 4
\&\s-1CSTART\s0
.IP "+" 4
\&\s-1CSTOP\s0
.IP "+" 4
\&\s-1CSTOPB\s0
.IP "+" 4
\&\s-1CSUSP\s0
.IP "\-" 4
\&\s-1CSWTCH\s0
.IP "+" 4
\&\s-1CWERASE\s0
.IP "\-" 4
\&\s-1DEFECHO\s0
.IP "\-" 4
\&\s-1DIOC\s0
.IP "\-" 4
\&\s-1DIOCGETP\s0
.IP "\-" 4
\&\s-1DIOCSETP\s0
.IP "\-" 4
\&\s-1DOSMODE\s0
.IP "+" 4
\&\s-1ECHO\s0
.IP "+" 4
\&\s-1ECHOCTL\s0
.IP "+" 4
\&\s-1ECHOE\s0
.IP "+" 4
\&\s-1ECHOK\s0
.IP "+" 4
\&\s-1ECHOKE\s0
.IP "+" 4
\&\s-1ECHONL\s0
.IP "+" 4
\&\s-1ECHOPRT\s0
.IP "+" 4
\&\s-1EXTA\s0
.IP "+" 4
\&\s-1EXTB\s0
.IP "+" 4
\&\s-1FF0\s0
.IP "+" 4
\&\s-1FF1\s0
.IP "+" 4
\&\s-1FFDLY\s0
.IP "\-" 4
\&\s-1FIORDCHK\s0
.IP "+" 4
\&\s-1FLUSHO\s0
.IP "+" 4
\&\s-1HUPCL\s0
.IP "+" 4
\&\s-1ICANON\s0
.IP "+" 4
\&\s-1ICRNL\s0
.IP "+" 4
\&\s-1IEXTEN\s0
.IP "+" 4
\&\s-1IGNBRK\s0
.IP "+" 4
\&\s-1IGNCR\s0
.IP "+" 4
\&\s-1IGNPAR\s0
.IP "+" 4
\&\s-1IMAXBEL\s0
.IP "+" 4
\&\s-1INLCR\s0
.IP "+" 4
\&\s-1INPCK\s0
.IP "+" 4
\&\s-1ISIG\s0
.IP "+" 4
\&\s-1ISTRIP\s0
.IP "\-" 4
\&\s-1IUCLC\s0
.IP "+" 4
\&\s-1IXANY\s0
.IP "+" 4
\&\s-1IXOFF\s0
.IP "+" 4
\&\s-1IXON\s0
.IP "\-" 4
\&\s-1KBENABLED\s0
.IP "\-" 4
\&\s-1LDCHG\s0
.IP "\-" 4
\&\s-1LDCLOSE\s0
.IP "\-" 4
\&\s-1LDDMAP\s0
.IP "\-" 4
\&\s-1LDEMAP\s0
.IP "\-" 4
\&\s-1LDGETT\s0
.IP "\-" 4
\&\s-1LDGMAP\s0
.IP "\-" 4
\&\s-1LDIOC\s0
.IP "\-" 4
\&\s-1LDNMAP\s0
.IP "\-" 4
\&\s-1LDOPEN\s0
.IP "\-" 4
\&\s-1LDSETT\s0
.IP "\-" 4
\&\s-1LDSMAP\s0
.IP "\-" 4
\&\s-1LOBLK\s0
.IP "+" 4
\&\s-1NCCS\s0
.IP "+" 4
\&\s-1NL0\s0
.IP "+" 4
\&\s-1NL1\s0
.IP "+" 4
\&\s-1NLDLY\s0
.IP "+" 4
\&\s-1NOFLSH\s0
.IP "+" 4
\&\s-1OCRNL\s0
.IP "+" 4
\&\s-1OFDEL\s0
.IP "+" 4
\&\s-1OFILL\s0
.IP "\-" 4
\&\s-1OLCUC\s0
.IP "+" 4
\&\s-1ONLCR\s0
.IP "+" 4
\&\s-1ONLRET\s0
.IP "+" 4
\&\s-1ONOCR\s0
.IP "+" 4
\&\s-1OPOST\s0
.IP "\-" 4
\&\s-1PAGEOUT\s0
.IP "+" 4
\&\s-1PARENB\s0
.IP "\-" 4
\&\s-1PAREXT\s0
.IP "+" 4
\&\s-1PARMRK\s0
.IP "+" 4
\&\s-1PARODD\s0
.IP "+" 4
\&\s-1PENDIN\s0
.IP "\-" 4
\&\s-1RCV1EN\s0
.IP "\-" 4
\&\s-1RTS_TOG\s0
.IP "+" 4
\&\s-1TAB0\s0
.IP "+" 4
\&\s-1TAB1\s0
.IP "+" 4
\&\s-1TAB2\s0
.IP "+" 4
\&\s-1TAB3\s0
.IP "+" 4
\&\s-1TABDLY\s0
.IP "\-" 4
\&\s-1TCDSET\s0
.IP "\-" 4
\&\s-1TCFLSH\s0
.IP "\-" 4
\&\s-1TCGETA\s0
.IP "\-" 4
\&\s-1TCGETS\s0
.IP "+" 4
\&\s-1TCIFLUSH\s0
.IP "+" 4
\&\s-1TCIOFF\s0
.IP "+" 4
\&\s-1TCIOFLUSH\s0
.IP "+" 4
\&\s-1TCION\s0
.IP "+" 4
\&\s-1TCOFLUSH\s0
.IP "+" 4
\&\s-1TCOOFF\s0
.IP "+" 4
\&\s-1TCOON\s0
.IP "+" 4
\&\s-1TCSADRAIN\s0
.IP "+" 4
\&\s-1TCSAFLUSH\s0
.IP "+" 4
\&\s-1TCSANOW\s0
.IP "\-" 4
\&\s-1TCSBRK\s0
.IP "\-" 4
\&\s-1TCSETA\s0
.IP "\-" 4
\&\s-1TCSETAF\s0
.IP "\-" 4
\&\s-1TCSETAW\s0
.IP "\-" 4
\&\s-1TCSETCTTY\s0
.IP "\-" 4
\&\s-1TCSETS\s0
.IP "\-" 4
\&\s-1TCSETSF\s0
.IP "\-" 4
\&\s-1TCSETSW\s0
.IP "\-" 4
\&\s-1TCXONC\s0
.IP "\-" 4
\&\s-1TERM_D40\s0
.IP "\-" 4
\&\s-1TERM_D42\s0
.IP "\-" 4
\&\s-1TERM_H45\s0
.IP "\-" 4
\&\s-1TERM_NONE\s0
.IP "\-" 4
\&\s-1TERM_TEC\s0
.IP "\-" 4
\&\s-1TERM_TEX\s0
.IP "\-" 4
\&\s-1TERM_V10\s0
.IP "\-" 4
\&\s-1TERM_V61\s0
.IP "+" 4
\&\s-1TIOCCBRK\s0
.IP "+" 4
\&\s-1TIOCCDTR\s0
.IP "+" 4
\&\s-1TIOCCONS\s0
.IP "+" 4
\&\s-1TIOCEXCL\s0
.IP "+" 4
\&\s-1TIOCFLUSH\s0
.IP "+" 4
\&\s-1TIOCGETD\s0
.IP "\-" 4
\&\s-1TIOCGETC\s0
.IP "\-" 4
\&\s-1TIOCGETP\s0
.IP "\-" 4
\&\s-1TIOCGLTC\s0
.IP "\-" 4
\&\s-1TIOCSETC\s0
.IP "\-" 4
\&\s-1TIOCSETN\s0
.IP "\-" 4
\&\s-1TIOCSETP\s0
.IP "\-" 4
\&\s-1TIOCSLTC\s0
.IP "+" 4
\&\s-1TIOCGPGRP\s0
.IP "\-" 4
\&\s-1TIOCGSID\s0
.IP "\-" 4
\&\s-1TIOCGSOFTCAR\s0
.IP "+" 4
\&\s-1TIOCGWINSZ\s0
.IP "\-" 4
\&\s-1TIOCHPCL\s0
.IP "\-" 4
\&\s-1TIOCKBOF\s0
.IP "\-" 4
\&\s-1TIOCKBON\s0
.IP "\-" 4
\&\s-1TIOCLBIC\s0
.IP "\-" 4
\&\s-1TIOCLBIS\s0
.IP "\-" 4
\&\s-1TIOCLGET\s0
.IP "\-" 4
\&\s-1TIOCLSET\s0
.IP "+" 4
\&\s-1TIOCMBIC\s0
.IP "+" 4
\&\s-1TIOCMBIS\s0
.IP "+" 4
\&\s-1TIOCMGET\s0
.IP "+" 4
\&\s-1TIOCMSET\s0
.IP "+" 4
\&\s-1TIOCM_CAR\s0
.IP "+" 4
\&\s-1TIOCM_CD\s0
.IP "+" 4
\&\s-1TIOCM_CTS\s0
.IP "+" 4
\&\s-1TIOCM_DSR\s0
.IP "+" 4
\&\s-1TIOCM_DTR\s0
.IP "+" 4
\&\s-1TIOCM_LE\s0
.IP "+" 4
\&\s-1TIOCM_RI\s0
.IP "+" 4
\&\s-1TIOCM_RNG\s0
.IP "+" 4
\&\s-1TIOCM_RTS\s0
.IP "+" 4
\&\s-1TIOCM_SR\s0
.IP "+" 4
\&\s-1TIOCM_ST\s0
.IP "+" 4
\&\s-1TIOCNOTTY\s0
.IP "+" 4
\&\s-1TIOCNXCL\s0
.IP "+" 4
\&\s-1TIOCOUTQ\s0
.IP "+" 4
\&\s-1TIOCREMOTE\s0
.IP "+" 4
\&\s-1TIOCSBRK\s0
.IP "+" 4
\&\s-1TIOCSCTTY\s0
.IP "+" 4
\&\s-1TIOCSDTR\s0
.IP "+" 4
\&\s-1TIOCSETD\s0
.IP "\-" 4
\&\s-1TIOCSIGNAL\s0
.IP "+" 4
\&\s-1TIOCSPGRP\s0
.IP "\-" 4
\&\s-1TIOCSSID\s0
.IP "\-" 4
\&\s-1TIOCSSOFTCAR\s0
.IP "+" 4
\&\s-1TIOCSTART\s0
.IP "+" 4
\&\s-1TIOCSTI\s0
.IP "+" 4
\&\s-1TIOCSTOP\s0
.IP "+" 4
\&\s-1TIOCSWINSZ\s0
.IP "\-" 4
\&\s-1TM_ANL\s0
.IP "\-" 4
\&\s-1TM_CECHO\s0
.IP "\-" 4
\&\s-1TM_CINVIS\s0
.IP "\-" 4
\&\s-1TM_LCF\s0
.IP "\-" 4
\&\s-1TM_NONE\s0
.IP "\-" 4
\&\s-1TM_SET\s0
.IP "\-" 4
\&\s-1TM_SNL\s0
.IP "+" 4
\&\s-1TOSTOP\s0
.IP "\-" 4
\&\s-1VCEOF\s0
.IP "\-" 4
\&\s-1VCEOL\s0
.IP "+" 4
\&\s-1VDISCARD\s0
.IP "+" 4
\&\s-1VDSUSP\s0
.IP "+" 4
\&\s-1VEOF\s0
.IP "+" 4
\&\s-1VEOL\s0
.IP "+" 4
\&\s-1VEOL2\s0
.IP "+" 4
\&\s-1VERASE\s0
.IP "+" 4
\&\s-1VINTR\s0
.IP "+" 4
\&\s-1VKILL\s0
.IP "+" 4
\&\s-1VLNEXT\s0
.IP "+" 4
\&\s-1VMIN\s0
.IP "+" 4
\&\s-1VQUIT\s0
.IP "+" 4
\&\s-1VREPRINT\s0
.IP "+" 4
\&\s-1VSTART\s0
.IP "+" 4
\&\s-1VSTOP\s0
.IP "+" 4
\&\s-1VSUSP\s0
.IP "\-" 4
\&\s-1VSWTCH\s0
.IP "+" 4
\&\s-1VT0\s0
.IP "+" 4
\&\s-1VT1\s0
.IP "+" 4
\&\s-1VTDLY\s0
.IP "+" 4
\&\s-1VTIME\s0
.IP "+" 4
\&\s-1VWERASE\s0
.IP "\-" 4
\&\s-1WRAP\s0
.IP "\-" 4
\&\s-1XCASE\s0
.IP "\-" 4
\&\s-1XCLUDE\s0
.IP "\-" 4
\&\s-1XMT1EN\s0
.IP "\-" 4
\&\s-1XTABS\s0
.SH "FOR MORE INFO SEE"
.IX Header "FOR MORE INFO SEE"
IO::Tty
.SH "POD ERRORS"
.IX Header "POD ERRORS"
Hey! \fBThe above document had some coding errors, which are explained below:\fR
.IP "Around line 31:" 4
.IX Item "Around line 31:"
\&'=item' outside of any '=over'
.IP "Around line 1096:" 4
.IX Item "Around line 1096:"
You forgot a '=back' before '=head1'
                                                                                                                                                              osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/IO::Tty::Constant5.18.3pm                    0100644 0001750 0001750 00000027063 12566241776 024727  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Tty::Constant 3"
.TH Tty::Constant 3 "2015-08-22" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
IO::Tty::Constant \- Terminal Constants (autogenerated)
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& use IO::Tty::Constant qw(TIOCNOTTY);
\& ...
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This package defines constants usually found in <termio.h> or
<termios.h> (and their #include hierarchy).  Find below an
autogenerated alphabetic list of all known constants and whether they
are defined on your system (prefixed with '+') and have compilation
problems ('o').  Undefined or problematic constants are set to 'undef'.
.SH "DEFINED CONSTANTS"
.IX Header "DEFINED CONSTANTS"
.IP "+" 4
B0
.IP "+" 4
B110
.IP "+" 4
B115200
.IP "+" 4
B1200
.IP "+" 4
B134
.IP "+" 4
B150
.IP "\-" 4
B153600
.IP "+" 4
B1800
.IP "+" 4
B19200
.IP "+" 4
B200
.IP "+" 4
B230400
.IP "+" 4
B2400
.IP "+" 4
B300
.IP "\-" 4
B307200
.IP "+" 4
B38400
.IP "\-" 4
B460800
.IP "+" 4
B4800
.IP "+" 4
B50
.IP "+" 4
B57600
.IP "+" 4
B600
.IP "+" 4
B75
.IP "+" 4
B76800
.IP "+" 4
B9600
.IP "+" 4
\&\s-1BRKINT\s0
.IP "+" 4
\&\s-1BS0\s0
.IP "+" 4
\&\s-1BS1\s0
.IP "+" 4
\&\s-1BSDLY\s0
.IP "\-" 4
\&\s-1CBAUD\s0
.IP "\-" 4
\&\s-1CBAUDEXT\s0
.IP "+" 4
\&\s-1CBRK\s0
.IP "+" 4
\&\s-1CCTS_OFLOW\s0
.IP "\-" 4
\&\s-1CDEL\s0
.IP "+" 4
\&\s-1CDSUSP\s0
.IP "+" 4
\&\s-1CEOF\s0
.IP "+" 4
\&\s-1CEOL\s0
.IP "\-" 4
\&\s-1CEOL2\s0
.IP "+" 4
\&\s-1CEOT\s0
.IP "+" 4
\&\s-1CERASE\s0
.IP "\-" 4
\&\s-1CESC\s0
.IP "+" 4
\&\s-1CFLUSH\s0
.IP "\-" 4
\&\s-1CIBAUD\s0
.IP "\-" 4
\&\s-1CIBAUDEXT\s0
.IP "+" 4
\&\s-1CINTR\s0
.IP "+" 4
\&\s-1CKILL\s0
.IP "+" 4
\&\s-1CLNEXT\s0
.IP "+" 4
\&\s-1CLOCAL\s0
.IP "\-" 4
\&\s-1CNSWTCH\s0
.IP "\-" 4
\&\s-1CNUL\s0
.IP "+" 4
\&\s-1CQUIT\s0
.IP "+" 4
\&\s-1CR0\s0
.IP "+" 4
\&\s-1CR1\s0
.IP "+" 4
\&\s-1CR2\s0
.IP "+" 4
\&\s-1CR3\s0
.IP "+" 4
\&\s-1CRDLY\s0
.IP "+" 4
\&\s-1CREAD\s0
.IP "+" 4
\&\s-1CRPRNT\s0
.IP "+" 4
\&\s-1CRTSCTS\s0
.IP "\-" 4
\&\s-1CRTSXOFF\s0
.IP "+" 4
\&\s-1CRTS_IFLOW\s0
.IP "+" 4
\&\s-1CS5\s0
.IP "+" 4
\&\s-1CS6\s0
.IP "+" 4
\&\s-1CS7\s0
.IP "+" 4
\&\s-1CS8\s0
.IP "+" 4
\&\s-1CSIZE\s0
.IP "+" 4
\&\s-1CSTART\s0
.IP "+" 4
\&\s-1CSTOP\s0
.IP "+" 4
\&\s-1CSTOPB\s0
.IP "+" 4
\&\s-1CSUSP\s0
.IP "\-" 4
\&\s-1CSWTCH\s0
.IP "+" 4
\&\s-1CWERASE\s0
.IP "\-" 4
\&\s-1DEFECHO\s0
.IP "\-" 4
\&\s-1DIOC\s0
.IP "\-" 4
\&\s-1DIOCGETP\s0
.IP "\-" 4
\&\s-1DIOCSETP\s0
.IP "\-" 4
\&\s-1DOSMODE\s0
.IP "+" 4
\&\s-1ECHO\s0
.IP "+" 4
\&\s-1ECHOCTL\s0
.IP "+" 4
\&\s-1ECHOE\s0
.IP "+" 4
\&\s-1ECHOK\s0
.IP "+" 4
\&\s-1ECHOKE\s0
.IP "+" 4
\&\s-1ECHONL\s0
.IP "+" 4
\&\s-1ECHOPRT\s0
.IP "+" 4
\&\s-1EXTA\s0
.IP "+" 4
\&\s-1EXTB\s0
.IP "+" 4
\&\s-1FF0\s0
.IP "+" 4
\&\s-1FF1\s0
.IP "+" 4
\&\s-1FFDLY\s0
.IP "\-" 4
\&\s-1FIORDCHK\s0
.IP "+" 4
\&\s-1FLUSHO\s0
.IP "+" 4
\&\s-1HUPCL\s0
.IP "+" 4
\&\s-1ICANON\s0
.IP "+" 4
\&\s-1ICRNL\s0
.IP "+" 4
\&\s-1IEXTEN\s0
.IP "+" 4
\&\s-1IGNBRK\s0
.IP "+" 4
\&\s-1IGNCR\s0
.IP "+" 4
\&\s-1IGNPAR\s0
.IP "+" 4
\&\s-1IMAXBEL\s0
.IP "+" 4
\&\s-1INLCR\s0
.IP "+" 4
\&\s-1INPCK\s0
.IP "+" 4
\&\s-1ISIG\s0
.IP "+" 4
\&\s-1ISTRIP\s0
.IP "\-" 4
\&\s-1IUCLC\s0
.IP "+" 4
\&\s-1IXANY\s0
.IP "+" 4
\&\s-1IXOFF\s0
.IP "+" 4
\&\s-1IXON\s0
.IP "\-" 4
\&\s-1KBENABLED\s0
.IP "\-" 4
\&\s-1LDCHG\s0
.IP "\-" 4
\&\s-1LDCLOSE\s0
.IP "\-" 4
\&\s-1LDDMAP\s0
.IP "\-" 4
\&\s-1LDEMAP\s0
.IP "\-" 4
\&\s-1LDGETT\s0
.IP "\-" 4
\&\s-1LDGMAP\s0
.IP "\-" 4
\&\s-1LDIOC\s0
.IP "\-" 4
\&\s-1LDNMAP\s0
.IP "\-" 4
\&\s-1LDOPEN\s0
.IP "\-" 4
\&\s-1LDSETT\s0
.IP "\-" 4
\&\s-1LDSMAP\s0
.IP "\-" 4
\&\s-1LOBLK\s0
.IP "+" 4
\&\s-1NCCS\s0
.IP "+" 4
\&\s-1NL0\s0
.IP "+" 4
\&\s-1NL1\s0
.IP "+" 4
\&\s-1NLDLY\s0
.IP "+" 4
\&\s-1NOFLSH\s0
.IP "+" 4
\&\s-1OCRNL\s0
.IP "+" 4
\&\s-1OFDEL\s0
.IP "+" 4
\&\s-1OFILL\s0
.IP "\-" 4
\&\s-1OLCUC\s0
.IP "+" 4
\&\s-1ONLCR\s0
.IP "+" 4
\&\s-1ONLRET\s0
.IP "+" 4
\&\s-1ONOCR\s0
.IP "+" 4
\&\s-1OPOST\s0
.IP "\-" 4
\&\s-1PAGEOUT\s0
.IP "+" 4
\&\s-1PARENB\s0
.IP "\-" 4
\&\s-1PAREXT\s0
.IP "+" 4
\&\s-1PARMRK\s0
.IP "+" 4
\&\s-1PARODD\s0
.IP "+" 4
\&\s-1PENDIN\s0
.IP "\-" 4
\&\s-1RCV1EN\s0
.IP "\-" 4
\&\s-1RTS_TOG\s0
.IP "+" 4
\&\s-1TAB0\s0
.IP "+" 4
\&\s-1TAB1\s0
.IP "+" 4
\&\s-1TAB2\s0
.IP "+" 4
\&\s-1TAB3\s0
.IP "+" 4
\&\s-1TABDLY\s0
.IP "\-" 4
\&\s-1TCDSET\s0
.IP "\-" 4
\&\s-1TCFLSH\s0
.IP "\-" 4
\&\s-1TCGETA\s0
.IP "\-" 4
\&\s-1TCGETS\s0
.IP "+" 4
\&\s-1TCIFLUSH\s0
.IP "+" 4
\&\s-1TCIOFF\s0
.IP "+" 4
\&\s-1TCIOFLUSH\s0
.IP "+" 4
\&\s-1TCION\s0
.IP "+" 4
\&\s-1TCOFLUSH\s0
.IP "+" 4
\&\s-1TCOOFF\s0
.IP "+" 4
\&\s-1TCOON\s0
.IP "+" 4
\&\s-1TCSADRAIN\s0
.IP "+" 4
\&\s-1TCSAFLUSH\s0
.IP "+" 4
\&\s-1TCSANOW\s0
.IP "\-" 4
\&\s-1TCSBRK\s0
.IP "\-" 4
\&\s-1TCSETA\s0
.IP "\-" 4
\&\s-1TCSETAF\s0
.IP "\-" 4
\&\s-1TCSETAW\s0
.IP "\-" 4
\&\s-1TCSETCTTY\s0
.IP "\-" 4
\&\s-1TCSETS\s0
.IP "\-" 4
\&\s-1TCSETSF\s0
.IP "\-" 4
\&\s-1TCSETSW\s0
.IP "\-" 4
\&\s-1TCXONC\s0
.IP "\-" 4
\&\s-1TERM_D40\s0
.IP "\-" 4
\&\s-1TERM_D42\s0
.IP "\-" 4
\&\s-1TERM_H45\s0
.IP "\-" 4
\&\s-1TERM_NONE\s0
.IP "\-" 4
\&\s-1TERM_TEC\s0
.IP "\-" 4
\&\s-1TERM_TEX\s0
.IP "\-" 4
\&\s-1TERM_V10\s0
.IP "\-" 4
\&\s-1TERM_V61\s0
.IP "+" 4
\&\s-1TIOCCBRK\s0
.IP "+" 4
\&\s-1TIOCCDTR\s0
.IP "+" 4
\&\s-1TIOCCONS\s0
.IP "+" 4
\&\s-1TIOCEXCL\s0
.IP "+" 4
\&\s-1TIOCFLUSH\s0
.IP "+" 4
\&\s-1TIOCGETD\s0
.IP "\-" 4
\&\s-1TIOCGETC\s0
.IP "\-" 4
\&\s-1TIOCGETP\s0
.IP "\-" 4
\&\s-1TIOCGLTC\s0
.IP "\-" 4
\&\s-1TIOCSETC\s0
.IP "\-" 4
\&\s-1TIOCSETN\s0
.IP "\-" 4
\&\s-1TIOCSETP\s0
.IP "\-" 4
\&\s-1TIOCSLTC\s0
.IP "+" 4
\&\s-1TIOCGPGRP\s0
.IP "\-" 4
\&\s-1TIOCGSID\s0
.IP "\-" 4
\&\s-1TIOCGSOFTCAR\s0
.IP "+" 4
\&\s-1TIOCGWINSZ\s0
.IP "\-" 4
\&\s-1TIOCHPCL\s0
.IP "\-" 4
\&\s-1TIOCKBOF\s0
.IP "\-" 4
\&\s-1TIOCKBON\s0
.IP "\-" 4
\&\s-1TIOCLBIC\s0
.IP "\-" 4
\&\s-1TIOCLBIS\s0
.IP "\-" 4
\&\s-1TIOCLGET\s0
.IP "\-" 4
\&\s-1TIOCLSET\s0
.IP "+" 4
\&\s-1TIOCMBIC\s0
.IP "+" 4
\&\s-1TIOCMBIS\s0
.IP "+" 4
\&\s-1TIOCMGET\s0
.IP "+" 4
\&\s-1TIOCMSET\s0
.IP "+" 4
\&\s-1TIOCM_CAR\s0
.IP "+" 4
\&\s-1TIOCM_CD\s0
.IP "+" 4
\&\s-1TIOCM_CTS\s0
.IP "+" 4
\&\s-1TIOCM_DSR\s0
.IP "+" 4
\&\s-1TIOCM_DTR\s0
.IP "+" 4
\&\s-1TIOCM_LE\s0
.IP "+" 4
\&\s-1TIOCM_RI\s0
.IP "+" 4
\&\s-1TIOCM_RNG\s0
.IP "+" 4
\&\s-1TIOCM_RTS\s0
.IP "+" 4
\&\s-1TIOCM_SR\s0
.IP "+" 4
\&\s-1TIOCM_ST\s0
.IP "+" 4
\&\s-1TIOCNOTTY\s0
.IP "+" 4
\&\s-1TIOCNXCL\s0
.IP "+" 4
\&\s-1TIOCOUTQ\s0
.IP "+" 4
\&\s-1TIOCREMOTE\s0
.IP "+" 4
\&\s-1TIOCSBRK\s0
.IP "+" 4
\&\s-1TIOCSCTTY\s0
.IP "+" 4
\&\s-1TIOCSDTR\s0
.IP "+" 4
\&\s-1TIOCSETD\s0
.IP "\-" 4
\&\s-1TIOCSIGNAL\s0
.IP "+" 4
\&\s-1TIOCSPGRP\s0
.IP "\-" 4
\&\s-1TIOCSSID\s0
.IP "\-" 4
\&\s-1TIOCSSOFTCAR\s0
.IP "+" 4
\&\s-1TIOCSTART\s0
.IP "+" 4
\&\s-1TIOCSTI\s0
.IP "+" 4
\&\s-1TIOCSTOP\s0
.IP "+" 4
\&\s-1TIOCSWINSZ\s0
.IP "\-" 4
\&\s-1TM_ANL\s0
.IP "\-" 4
\&\s-1TM_CECHO\s0
.IP "\-" 4
\&\s-1TM_CINVIS\s0
.IP "\-" 4
\&\s-1TM_LCF\s0
.IP "\-" 4
\&\s-1TM_NONE\s0
.IP "\-" 4
\&\s-1TM_SET\s0
.IP "\-" 4
\&\s-1TM_SNL\s0
.IP "+" 4
\&\s-1TOSTOP\s0
.IP "\-" 4
\&\s-1VCEOF\s0
.IP "\-" 4
\&\s-1VCEOL\s0
.IP "+" 4
\&\s-1VDISCARD\s0
.IP "+" 4
\&\s-1VDSUSP\s0
.IP "+" 4
\&\s-1VEOF\s0
.IP "+" 4
\&\s-1VEOL\s0
.IP "+" 4
\&\s-1VEOL2\s0
.IP "+" 4
\&\s-1VERASE\s0
.IP "+" 4
\&\s-1VINTR\s0
.IP "+" 4
\&\s-1VKILL\s0
.IP "+" 4
\&\s-1VLNEXT\s0
.IP "+" 4
\&\s-1VMIN\s0
.IP "+" 4
\&\s-1VQUIT\s0
.IP "+" 4
\&\s-1VREPRINT\s0
.IP "+" 4
\&\s-1VSTART\s0
.IP "+" 4
\&\s-1VSTOP\s0
.IP "+" 4
\&\s-1VSUSP\s0
.IP "\-" 4
\&\s-1VSWTCH\s0
.IP "+" 4
\&\s-1VT0\s0
.IP "+" 4
\&\s-1VT1\s0
.IP "+" 4
\&\s-1VTDLY\s0
.IP "+" 4
\&\s-1VTIME\s0
.IP "+" 4
\&\s-1VWERASE\s0
.IP "\-" 4
\&\s-1WRAP\s0
.IP "\-" 4
\&\s-1XCASE\s0
.IP "\-" 4
\&\s-1XCLUDE\s0
.IP "\-" 4
\&\s-1XMT1EN\s0
.IP "\-" 4
\&\s-1XTABS\s0
.SH "FOR MORE INFO SEE"
.IX Header "FOR MORE INFO SEE"
IO::Tty
.SH "POD ERRORS"
.IX Header "POD ERRORS"
Hey! \fBThe above document had some coding errors, which are explained below:\fR
.IP "Around line 31:" 4
.IX Item "Around line 31:"
\&'=item' outside of any '=over'
.IP "Around line 1096:" 4
.IX Item "Around line 1096:"
You forgot a '=back' before '=head1'
                                                                                                                                                                                                                                                                                                                                                                                                                                                                             osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/IO::Uncompress::AnyInflate.3pm               0100644 0001750 0001750 00000103257 12566207456 026227  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "IO::Uncompress::AnyInflate 3pm"
.TH IO::Uncompress::AnyInflate 3pm "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
IO::Uncompress::AnyInflate \- Uncompress zlib\-based (zip, gzip) file/buffer
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use IO::Uncompress::AnyInflate qw(anyinflate $AnyInflateError) ;
\&
\&    my $status = anyinflate $input => $output [,OPTS]
\&        or die "anyinflate failed: $AnyInflateError\en";
\&
\&    my $z = new IO::Uncompress::AnyInflate $input [OPTS] 
\&        or die "anyinflate failed: $AnyInflateError\en";
\&
\&    $status = $z\->read($buffer)
\&    $status = $z\->read($buffer, $length)
\&    $status = $z\->read($buffer, $length, $offset)
\&    $line = $z\->getline()
\&    $char = $z\->getc()
\&    $char = $z\->ungetc()
\&    $char = $z\->opened()
\&
\&    $status = $z\->inflateSync()
\&
\&    $data = $z\->trailingData()
\&    $status = $z\->nextStream()
\&    $data = $z\->getHeaderInfo()
\&    $z\->tell()
\&    $z\->seek($position, $whence)
\&    $z\->binmode()
\&    $z\->fileno()
\&    $z\->eof()
\&    $z\->close()
\&
\&    $AnyInflateError ;
\&
\&    # IO::File mode
\&
\&    <$z>
\&    read($z, $buffer);
\&    read($z, $buffer, $length);
\&    read($z, $buffer, $length, $offset);
\&    tell($z)
\&    seek($z, $position, $whence)
\&    binmode($z)
\&    fileno($z)
\&    eof($z)
\&    close($z)
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides a Perl interface that allows the reading of
files/buffers that have been compressed in a number of formats that use the
zlib compression library.
.PP
The formats supported are
.IP "\s-1RFC 1950\s0" 5
.IX Item "RFC 1950"
.PD 0
.IP "\s-1RFC 1951 \s0(optionally)" 5
.IX Item "RFC 1951 (optionally)"
.IP "gzip (\s-1RFC 1952\s0)" 5
.IX Item "gzip (RFC 1952)"
.IP "zip" 5
.IX Item "zip"
.PD
.PP
The module will auto-detect which, if any, of the supported
compression formats is being used.
.SH "Functional Interface"
.IX Header "Functional Interface"
A top-level function, \f(CW\*(C`anyinflate\*(C'\fR, is provided to carry out
\&\*(L"one-shot\*(R" uncompression between buffers and/or files. For finer
control over the uncompression process, see the \*(L"\s-1OO\s0 Interface\*(R"
section.
.PP
.Vb 1
\&    use IO::Uncompress::AnyInflate qw(anyinflate $AnyInflateError) ;
\&
\&    anyinflate $input_filename_or_reference => $output_filename_or_reference [,OPTS] 
\&        or die "anyinflate failed: $AnyInflateError\en";
.Ve
.PP
The functional interface needs Perl5.005 or better.
.ie n .SS "anyinflate $input => $output [, \s-1OPTS\s0]"
.el .SS "anyinflate \f(CW$input\fP => \f(CW$output\fP [, \s-1OPTS\s0]"
.IX Subsection "anyinflate $input => $output [, OPTS]"
\&\f(CW\*(C`anyinflate\*(C'\fR expects at least two parameters,
\&\f(CW$input_filename_or_reference\fR and \f(CW$output_filename_or_reference\fR.
.PP
\fIThe \f(CI$input_filename_or_reference\fI parameter\fR
.IX Subsection "The $input_filename_or_reference parameter"
.PP
The parameter, \f(CW$input_filename_or_reference\fR, is used to define the
source of the compressed data.
.PP
It can take one of the following forms:
.IP "A filename" 5
.IX Item "A filename"
If the <$input_filename_or_reference> parameter is a simple scalar, it is
assumed to be a filename. This file will be opened for reading and the
input data will be read from it.
.IP "A filehandle" 5
.IX Item "A filehandle"
If the \f(CW$input_filename_or_reference\fR parameter is a filehandle, the input
data will be read from it.  The string '\-' can be used as an alias for
standard input.
.IP "A scalar reference" 5
.IX Item "A scalar reference"
If \f(CW$input_filename_or_reference\fR is a scalar reference, the input data
will be read from \f(CW$$input_filename_or_reference\fR.
.IP "An array reference" 5
.IX Item "An array reference"
If \f(CW$input_filename_or_reference\fR is an array reference, each element in
the array must be a filename.
.Sp
The input data will be read from each file in turn.
.Sp
The complete array will be walked to ensure that it only
contains valid filenames before any data is uncompressed.
.IP "An Input FileGlob string" 5
.IX Item "An Input FileGlob string"
If \f(CW$input_filename_or_reference\fR is a string that is delimited by the
characters \*(L"<\*(R" and \*(L">\*(R" \f(CW\*(C`anyinflate\*(C'\fR will assume that it is an 
\&\fIinput fileglob string\fR. The input is the list of files that match the 
fileglob.
.Sp
See File::GlobMapper for more details.
.PP
If the \f(CW$input_filename_or_reference\fR parameter is any other type,
\&\f(CW\*(C`undef\*(C'\fR will be returned.
.PP
\fIThe \f(CI$output_filename_or_reference\fI parameter\fR
.IX Subsection "The $output_filename_or_reference parameter"
.PP
The parameter \f(CW$output_filename_or_reference\fR is used to control the
destination of the uncompressed data. This parameter can take one of
these forms.
.IP "A filename" 5
.IX Item "A filename"
If the \f(CW$output_filename_or_reference\fR parameter is a simple scalar, it is
assumed to be a filename.  This file will be opened for writing and the 
uncompressed data will be written to it.
.IP "A filehandle" 5
.IX Item "A filehandle"
If the \f(CW$output_filename_or_reference\fR parameter is a filehandle, the
uncompressed data will be written to it.  The string '\-' can be used as
an alias for standard output.
.IP "A scalar reference" 5
.IX Item "A scalar reference"
If \f(CW$output_filename_or_reference\fR is a scalar reference, the
uncompressed data will be stored in \f(CW$$output_filename_or_reference\fR.
.IP "An Array Reference" 5
.IX Item "An Array Reference"
If \f(CW$output_filename_or_reference\fR is an array reference, 
the uncompressed data will be pushed onto the array.
.IP "An Output FileGlob" 5
.IX Item "An Output FileGlob"
If \f(CW$output_filename_or_reference\fR is a string that is delimited by the
characters \*(L"<\*(R" and \*(L">\*(R" \f(CW\*(C`anyinflate\*(C'\fR will assume that it is an
\&\fIoutput fileglob string\fR. The output is the list of files that match the
fileglob.
.Sp
When \f(CW$output_filename_or_reference\fR is an fileglob string,
\&\f(CW$input_filename_or_reference\fR must also be a fileglob string. Anything
else is an error.
.Sp
See File::GlobMapper for more details.
.PP
If the \f(CW$output_filename_or_reference\fR parameter is any other type,
\&\f(CW\*(C`undef\*(C'\fR will be returned.
.SS "Notes"
.IX Subsection "Notes"
When \f(CW$input_filename_or_reference\fR maps to multiple compressed
files/buffers and \f(CW$output_filename_or_reference\fR is
a single file/buffer, after uncompression \f(CW$output_filename_or_reference\fR will contain a
concatenation of all the uncompressed data from each of the input
files/buffers.
.SS "Optional Parameters"
.IX Subsection "Optional Parameters"
Unless specified below, the optional parameters for \f(CW\*(C`anyinflate\*(C'\fR,
\&\f(CW\*(C`OPTS\*(C'\fR, are the same as those used with the \s-1OO\s0 interface defined in the
\&\*(L"Constructor Options\*(R" section below.
.ie n .IP """AutoClose => 0|1""" 5
.el .IP "\f(CWAutoClose => 0|1\fR" 5
.IX Item "AutoClose => 0|1"
This option applies to any input or output data streams to 
\&\f(CW\*(C`anyinflate\*(C'\fR that are filehandles.
.Sp
If \f(CW\*(C`AutoClose\*(C'\fR is specified, and the value is true, it will result in all
input and/or output filehandles being closed once \f(CW\*(C`anyinflate\*(C'\fR has
completed.
.Sp
This parameter defaults to 0.
.ie n .IP """BinModeOut => 0|1""" 5
.el .IP "\f(CWBinModeOut => 0|1\fR" 5
.IX Item "BinModeOut => 0|1"
When writing to a file or filehandle, set \f(CW\*(C`binmode\*(C'\fR before writing to the
file.
.Sp
Defaults to 0.
.ie n .IP """Append => 0|1""" 5
.el .IP "\f(CWAppend => 0|1\fR" 5
.IX Item "Append => 0|1"
The behaviour of this option is dependent on the type of output data
stream.
.RS 5
.IP "\(bu" 5
A Buffer
.Sp
If \f(CW\*(C`Append\*(C'\fR is enabled, all uncompressed data will be append to the end of
the output buffer. Otherwise the output buffer will be cleared before any
uncompressed data is written to it.
.IP "\(bu" 5
A Filename
.Sp
If \f(CW\*(C`Append\*(C'\fR is enabled, the file will be opened in append mode. Otherwise
the contents of the file, if any, will be truncated before any uncompressed
data is written to it.
.IP "\(bu" 5
A Filehandle
.Sp
If \f(CW\*(C`Append\*(C'\fR is enabled, the filehandle will be positioned to the end of
the file via a call to \f(CW\*(C`seek\*(C'\fR before any uncompressed data is
written to it.  Otherwise the file pointer will not be moved.
.RE
.RS 5
.Sp
When \f(CW\*(C`Append\*(C'\fR is specified, and set to true, it will \fIappend\fR all uncompressed 
data to the output data stream.
.Sp
So when the output is a filehandle it will carry out a seek to the eof
before writing any uncompressed data. If the output is a filename, it will be opened for
appending. If the output is a buffer, all uncompressed data will be
appended to the existing buffer.
.Sp
Conversely when \f(CW\*(C`Append\*(C'\fR is not specified, or it is present and is set to
false, it will operate as follows.
.Sp
When the output is a filename, it will truncate the contents of the file
before writing any uncompressed data. If the output is a filehandle
its position will not be changed. If the output is a buffer, it will be
wiped before any uncompressed data is output.
.Sp
Defaults to 0.
.RE
.ie n .IP """MultiStream => 0|1""" 5
.el .IP "\f(CWMultiStream => 0|1\fR" 5
.IX Item "MultiStream => 0|1"
If the input file/buffer contains multiple compressed data streams, this
option will uncompress the whole lot as a single data stream.
.Sp
Defaults to 0.
.ie n .IP """TrailingData => $scalar""" 5
.el .IP "\f(CWTrailingData => $scalar\fR" 5
.IX Item "TrailingData => $scalar"
Returns the data, if any, that is present immediately after the compressed
data stream once uncompression is complete.
.Sp
This option can be used when there is useful information immediately
following the compressed data stream, and you don't know the length of the
compressed data stream.
.Sp
If the input is a buffer, \f(CW\*(C`trailingData\*(C'\fR will return everything from the
end of the compressed data stream to the end of the buffer.
.Sp
If the input is a filehandle, \f(CW\*(C`trailingData\*(C'\fR will return the data that is
left in the filehandle input buffer once the end of the compressed data
stream has been reached. You can then use the filehandle to read the rest
of the input file.
.Sp
Don't bother using \f(CW\*(C`trailingData\*(C'\fR if the input is a filename.
.Sp
If you know the length of the compressed data stream before you start
uncompressing, you can avoid having to use \f(CW\*(C`trailingData\*(C'\fR by setting the
\&\f(CW\*(C`InputLength\*(C'\fR option.
.SS "Examples"
.IX Subsection "Examples"
To read the contents of the file \f(CW\*(C`file1.txt.Compressed\*(C'\fR and write the
uncompressed data to the file \f(CW\*(C`file1.txt\*(C'\fR.
.PP
.Vb 3
\&    use strict ;
\&    use warnings ;
\&    use IO::Uncompress::AnyInflate qw(anyinflate $AnyInflateError) ;
\&
\&    my $input = "file1.txt.Compressed";
\&    my $output = "file1.txt";
\&    anyinflate $input => $output
\&        or die "anyinflate failed: $AnyInflateError\en";
.Ve
.PP
To read from an existing Perl filehandle, \f(CW$input\fR, and write the
uncompressed data to a buffer, \f(CW$buffer\fR.
.PP
.Vb 4
\&    use strict ;
\&    use warnings ;
\&    use IO::Uncompress::AnyInflate qw(anyinflate $AnyInflateError) ;
\&    use IO::File ;
\&
\&    my $input = new IO::File "<file1.txt.Compressed"
\&        or die "Cannot open \*(Aqfile1.txt.Compressed\*(Aq: $!\en" ;
\&    my $buffer ;
\&    anyinflate $input => \e$buffer 
\&        or die "anyinflate failed: $AnyInflateError\en";
.Ve
.PP
To uncompress all files in the directory \*(L"/my/home\*(R" that match \*(L"*.txt.Compressed\*(R" and store the compressed data in the same directory
.PP
.Vb 3
\&    use strict ;
\&    use warnings ;
\&    use IO::Uncompress::AnyInflate qw(anyinflate $AnyInflateError) ;
\&
\&    anyinflate \*(Aq</my/home/*.txt.Compressed>\*(Aq => \*(Aq</my/home/#1.txt>\*(Aq
\&        or die "anyinflate failed: $AnyInflateError\en";
.Ve
.PP
and if you want to compress each file one at a time, this will do the trick
.PP
.Vb 3
\&    use strict ;
\&    use warnings ;
\&    use IO::Uncompress::AnyInflate qw(anyinflate $AnyInflateError) ;
\&
\&    for my $input ( glob "/my/home/*.txt.Compressed" )
\&    {
\&        my $output = $input;
\&        $output =~ s/.Compressed// ;
\&        anyinflate $input => $output 
\&            or die "Error compressing \*(Aq$input\*(Aq: $AnyInflateError\en";
\&    }
.Ve
.SH "OO Interface"
.IX Header "OO Interface"
.SS "Constructor"
.IX Subsection "Constructor"
The format of the constructor for IO::Uncompress::AnyInflate is shown below
.PP
.Vb 2
\&    my $z = new IO::Uncompress::AnyInflate $input [OPTS]
\&        or die "IO::Uncompress::AnyInflate failed: $AnyInflateError\en";
.Ve
.PP
Returns an \f(CW\*(C`IO::Uncompress::AnyInflate\*(C'\fR object on success and undef on failure.
The variable \f(CW$AnyInflateError\fR will contain an error message on failure.
.PP
If you are running Perl 5.005 or better the object, \f(CW$z\fR, returned from
IO::Uncompress::AnyInflate can be used exactly like an IO::File filehandle.
This means that all normal input file operations can be carried out with
\&\f(CW$z\fR.  For example, to read a line from a compressed file/buffer you can
use either of these forms
.PP
.Vb 2
\&    $line = $z\->getline();
\&    $line = <$z>;
.Ve
.PP
The mandatory parameter \f(CW$input\fR is used to determine the source of the
compressed data. This parameter can take one of three forms.
.IP "A filename" 5
.IX Item "A filename"
If the \f(CW$input\fR parameter is a scalar, it is assumed to be a filename. This
file will be opened for reading and the compressed data will be read from it.
.IP "A filehandle" 5
.IX Item "A filehandle"
If the \f(CW$input\fR parameter is a filehandle, the compressed data will be
read from it.
The string '\-' can be used as an alias for standard input.
.IP "A scalar reference" 5
.IX Item "A scalar reference"
If \f(CW$input\fR is a scalar reference, the compressed data will be read from
\&\f(CW$$input\fR.
.SS "Constructor Options"
.IX Subsection "Constructor Options"
The option names defined below are case insensitive and can be optionally
prefixed by a '\-'.  So all of the following are valid
.PP
.Vb 4
\&    \-AutoClose
\&    \-autoclose
\&    AUTOCLOSE
\&    autoclose
.Ve
.PP
\&\s-1OPTS\s0 is a combination of the following options:
.ie n .IP """AutoClose => 0|1""" 5
.el .IP "\f(CWAutoClose => 0|1\fR" 5
.IX Item "AutoClose => 0|1"
This option is only valid when the \f(CW$input\fR parameter is a filehandle. If
specified, and the value is true, it will result in the file being closed once
either the \f(CW\*(C`close\*(C'\fR method is called or the IO::Uncompress::AnyInflate object is
destroyed.
.Sp
This parameter defaults to 0.
.ie n .IP """MultiStream => 0|1""" 5
.el .IP "\f(CWMultiStream => 0|1\fR" 5
.IX Item "MultiStream => 0|1"
Allows multiple concatenated compressed streams to be treated as a single
compressed stream. Decompression will stop once either the end of the
file/buffer is reached, an error is encountered (premature eof, corrupt
compressed data) or the end of a stream is not immediately followed by the
start of another stream.
.Sp
This parameter defaults to 0.
.ie n .IP """Prime => $string""" 5
.el .IP "\f(CWPrime => $string\fR" 5
.IX Item "Prime => $string"
This option will uncompress the contents of \f(CW$string\fR before processing the
input file/buffer.
.Sp
This option can be useful when the compressed data is embedded in another
file/data structure and it is not possible to work out where the compressed
data begins without having to read the first few bytes. If this is the
case, the uncompression can be \fIprimed\fR with these bytes using this
option.
.ie n .IP """Transparent => 0|1""" 5
.el .IP "\f(CWTransparent => 0|1\fR" 5
.IX Item "Transparent => 0|1"
If this option is set and the input file/buffer is not compressed data,
the module will allow reading of it anyway.
.Sp
In addition, if the input file/buffer does contain compressed data and
there is non-compressed data immediately following it, setting this option
will make this module treat the whole file/buffer as a single data stream.
.Sp
This option defaults to 1.
.ie n .IP """BlockSize => $num""" 5
.el .IP "\f(CWBlockSize => $num\fR" 5
.IX Item "BlockSize => $num"
When reading the compressed input data, IO::Uncompress::AnyInflate will read it in
blocks of \f(CW$num\fR bytes.
.Sp
This option defaults to 4096.
.ie n .IP """InputLength => $size""" 5
.el .IP "\f(CWInputLength => $size\fR" 5
.IX Item "InputLength => $size"
When present this option will limit the number of compressed bytes read
from the input file/buffer to \f(CW$size\fR. This option can be used in the
situation where there is useful data directly after the compressed data
stream and you know beforehand the exact length of the compressed data
stream.
.Sp
This option is mostly used when reading from a filehandle, in which case
the file pointer will be left pointing to the first byte directly after the
compressed data stream.
.Sp
This option defaults to off.
.ie n .IP """Append => 0|1""" 5
.el .IP "\f(CWAppend => 0|1\fR" 5
.IX Item "Append => 0|1"
This option controls what the \f(CW\*(C`read\*(C'\fR method does with uncompressed data.
.Sp
If set to 1, all uncompressed data will be appended to the output parameter
of the \f(CW\*(C`read\*(C'\fR method.
.Sp
If set to 0, the contents of the output parameter of the \f(CW\*(C`read\*(C'\fR method
will be overwritten by the uncompressed data.
.Sp
Defaults to 0.
.ie n .IP """Strict => 0|1""" 5
.el .IP "\f(CWStrict => 0|1\fR" 5
.IX Item "Strict => 0|1"
This option controls whether the extra checks defined below are used when
carrying out the decompression. When Strict is on, the extra tests are
carried out, when Strict is off they are not.
.Sp
The default for this option is off.
.Sp
If the input is an \s-1RFC 1950\s0 data stream, the following will be checked:
.RS 5
.IP "1." 5
The \s-1ADLER32\s0 checksum field must be present.
.IP "2." 5
The value of the \s-1ADLER32\s0 field read must match the adler32 value of the
uncompressed data actually contained in the file.
.RE
.RS 5
.Sp
If the input is a gzip (\s-1RFC 1952\s0) data stream, the following will be checked:
.IP "1." 5
If the \s-1FHCRC\s0 bit is set in the gzip \s-1FLG\s0 header byte, the \s-1CRC16\s0 bytes in the
header must match the crc16 value of the gzip header actually read.
.IP "2." 5
If the gzip header contains a name field (\s-1FNAME\s0) it consists solely of \s-1ISO
8859\-1\s0 characters.
.IP "3." 5
If the gzip header contains a comment field (\s-1FCOMMENT\s0) it consists solely
of \s-1ISO 8859\-1\s0 characters plus line-feed.
.IP "4." 5
If the gzip \s-1FEXTRA\s0 header field is present it must conform to the sub-field
structure as defined in \s-1RFC 1952.\s0
.IP "5." 5
The \s-1CRC32\s0 and \s-1ISIZE\s0 trailer fields must be present.
.IP "6." 5
The value of the \s-1CRC32\s0 field read must match the crc32 value of the
uncompressed data actually contained in the gzip file.
.IP "7." 5
The value of the \s-1ISIZE\s0 fields read must match the length of the
uncompressed data actually read from the file.
.RE
.RS 5
.RE
.ie n .IP """RawInflate => 0|1""" 5
.el .IP "\f(CWRawInflate => 0|1\fR" 5
.IX Item "RawInflate => 0|1"
When auto-detecting the compressed format, try to test for raw-deflate (\s-1RFC
1951\s0) content using the \f(CW\*(C`IO::Uncompress::RawInflate\*(C'\fR module.
.Sp
The reason this is not default behaviour is because \s-1RFC 1951\s0 content can
only be detected by attempting to uncompress it. This process is error
prone and can result is false positives.
.Sp
Defaults to 0.
.ie n .IP """ParseExtra => 0|1"" If the gzip \s-1FEXTRA\s0 header field is present and this option is set, it will force the module to check that it conforms to the sub-field structure as defined in \s-1RFC 1952.\s0" 5
.el .IP "\f(CWParseExtra => 0|1\fR If the gzip \s-1FEXTRA\s0 header field is present and this option is set, it will force the module to check that it conforms to the sub-field structure as defined in \s-1RFC 1952.\s0" 5
.IX Item "ParseExtra => 0|1 If the gzip FEXTRA header field is present and this option is set, it will force the module to check that it conforms to the sub-field structure as defined in RFC 1952."
If the \f(CW\*(C`Strict\*(C'\fR is on it will automatically enable this option.
.Sp
Defaults to 0.
.SS "Examples"
.IX Subsection "Examples"
\&\s-1TODO\s0
.SH "Methods"
.IX Header "Methods"
.SS "read"
.IX Subsection "read"
Usage is
.PP
.Vb 1
\&    $status = $z\->read($buffer)
.Ve
.PP
Reads a block of compressed data (the size the the compressed block is
determined by the \f(CW\*(C`Buffer\*(C'\fR option in the constructor), uncompresses it and
writes any uncompressed data into \f(CW$buffer\fR. If the \f(CW\*(C`Append\*(C'\fR parameter is
set in the constructor, the uncompressed data will be appended to the
\&\f(CW$buffer\fR parameter. Otherwise \f(CW$buffer\fR will be overwritten.
.PP
Returns the number of uncompressed bytes written to \f(CW$buffer\fR, zero if eof
or a negative number on error.
.SS "read"
.IX Subsection "read"
Usage is
.PP
.Vb 2
\&    $status = $z\->read($buffer, $length)
\&    $status = $z\->read($buffer, $length, $offset)
\&
\&    $status = read($z, $buffer, $length)
\&    $status = read($z, $buffer, $length, $offset)
.Ve
.PP
Attempt to read \f(CW$length\fR bytes of uncompressed data into \f(CW$buffer\fR.
.PP
The main difference between this form of the \f(CW\*(C`read\*(C'\fR method and the
previous one, is that this one will attempt to return \fIexactly\fR \f(CW$length\fR
bytes. The only circumstances that this function will not is if end-of-file
or an \s-1IO\s0 error is encountered.
.PP
Returns the number of uncompressed bytes written to \f(CW$buffer\fR, zero if eof
or a negative number on error.
.SS "getline"
.IX Subsection "getline"
Usage is
.PP
.Vb 2
\&    $line = $z\->getline()
\&    $line = <$z>
.Ve
.PP
Reads a single line.
.PP
This method fully supports the use of of the variable \f(CW$/\fR (or
\&\f(CW$INPUT_RECORD_SEPARATOR\fR or \f(CW$RS\fR when \f(CW\*(C`English\*(C'\fR is in use) to
determine what constitutes an end of line. Paragraph mode, record mode and
file slurp mode are all supported.
.SS "getc"
.IX Subsection "getc"
Usage is
.PP
.Vb 1
\&    $char = $z\->getc()
.Ve
.PP
Read a single character.
.SS "ungetc"
.IX Subsection "ungetc"
Usage is
.PP
.Vb 1
\&    $char = $z\->ungetc($string)
.Ve
.SS "inflateSync"
.IX Subsection "inflateSync"
Usage is
.PP
.Vb 1
\&    $status = $z\->inflateSync()
.Ve
.PP
\&\s-1TODO\s0
.SS "getHeaderInfo"
.IX Subsection "getHeaderInfo"
Usage is
.PP
.Vb 2
\&    $hdr  = $z\->getHeaderInfo();
\&    @hdrs = $z\->getHeaderInfo();
.Ve
.PP
This method returns either a hash reference (in scalar context) or a list
or hash references (in array context) that contains information about each
of the header fields in the compressed data stream(s).
.SS "tell"
.IX Subsection "tell"
Usage is
.PP
.Vb 2
\&    $z\->tell()
\&    tell $z
.Ve
.PP
Returns the uncompressed file offset.
.SS "eof"
.IX Subsection "eof"
Usage is
.PP
.Vb 2
\&    $z\->eof();
\&    eof($z);
.Ve
.PP
Returns true if the end of the compressed input stream has been reached.
.SS "seek"
.IX Subsection "seek"
.Vb 2
\&    $z\->seek($position, $whence);
\&    seek($z, $position, $whence);
.Ve
.PP
Provides a sub-set of the \f(CW\*(C`seek\*(C'\fR functionality, with the restriction
that it is only legal to seek forward in the input file/buffer.
It is a fatal error to attempt to seek backward.
.PP
Note that the implementation of \f(CW\*(C`seek\*(C'\fR in this module does not provide
true random access to a compressed file/buffer. It  works by uncompressing
data from the current offset in the file/buffer until it reaches the
ucompressed offset specified in the parameters to \f(CW\*(C`seek\*(C'\fR. For very small
files this may be acceptable behaviour. For large files it may cause an
unacceptable delay.
.PP
The \f(CW$whence\fR parameter takes one the usual values, namely \s-1SEEK_SET,
SEEK_CUR\s0 or \s-1SEEK_END.\s0
.PP
Returns 1 on success, 0 on failure.
.SS "binmode"
.IX Subsection "binmode"
Usage is
.PP
.Vb 2
\&    $z\->binmode
\&    binmode $z ;
.Ve
.PP
This is a noop provided for completeness.
.SS "opened"
.IX Subsection "opened"
.Vb 1
\&    $z\->opened()
.Ve
.PP
Returns true if the object currently refers to a opened file/buffer.
.SS "autoflush"
.IX Subsection "autoflush"
.Vb 2
\&    my $prev = $z\->autoflush()
\&    my $prev = $z\->autoflush(EXPR)
.Ve
.PP
If the \f(CW$z\fR object is associated with a file or a filehandle, this method
returns the current autoflush setting for the underlying filehandle. If
\&\f(CW\*(C`EXPR\*(C'\fR is present, and is non-zero, it will enable flushing after every
write/print operation.
.PP
If \f(CW$z\fR is associated with a buffer, this method has no effect and always
returns \f(CW\*(C`undef\*(C'\fR.
.PP
\&\fBNote\fR that the special variable \f(CW$|\fR \fBcannot\fR be used to set or
retrieve the autoflush setting.
.SS "input_line_number"
.IX Subsection "input_line_number"
.Vb 2
\&    $z\->input_line_number()
\&    $z\->input_line_number(EXPR)
.Ve
.PP
Returns the current uncompressed line number. If \f(CW\*(C`EXPR\*(C'\fR is present it has
the effect of setting the line number. Note that setting the line number
does not change the current position within the file/buffer being read.
.PP
The contents of \f(CW$/\fR are used to to determine what constitutes a line
terminator.
.SS "fileno"
.IX Subsection "fileno"
.Vb 2
\&    $z\->fileno()
\&    fileno($z)
.Ve
.PP
If the \f(CW$z\fR object is associated with a file or a filehandle, \f(CW\*(C`fileno\*(C'\fR
will return the underlying file descriptor. Once the \f(CW\*(C`close\*(C'\fR method is
called \f(CW\*(C`fileno\*(C'\fR will return \f(CW\*(C`undef\*(C'\fR.
.PP
If the \f(CW$z\fR object is associated with a buffer, this method will return
\&\f(CW\*(C`undef\*(C'\fR.
.SS "close"
.IX Subsection "close"
.Vb 2
\&    $z\->close() ;
\&    close $z ;
.Ve
.PP
Closes the output file/buffer.
.PP
For most versions of Perl this method will be automatically invoked if
the IO::Uncompress::AnyInflate object is destroyed (either explicitly or by the
variable with the reference to the object going out of scope). The
exceptions are Perl versions 5.005 through 5.00504 and 5.8.0. In
these cases, the \f(CW\*(C`close\*(C'\fR method will be called automatically, but
not until global destruction of all live objects when the program is
terminating.
.PP
Therefore, if you want your scripts to be able to run on all versions
of Perl, you should call \f(CW\*(C`close\*(C'\fR explicitly and not rely on automatic
closing.
.PP
Returns true on success, otherwise 0.
.PP
If the \f(CW\*(C`AutoClose\*(C'\fR option has been enabled when the IO::Uncompress::AnyInflate
object was created, and the object is associated with a file, the
underlying file will also be closed.
.SS "nextStream"
.IX Subsection "nextStream"
Usage is
.PP
.Vb 1
\&    my $status = $z\->nextStream();
.Ve
.PP
Skips to the next compressed data stream in the input file/buffer. If a new
compressed data stream is found, the eof marker will be cleared and \f(CW$.\fR
will be reset to 0.
.PP
Returns 1 if a new stream was found, 0 if none was found, and \-1 if an
error was encountered.
.SS "trailingData"
.IX Subsection "trailingData"
Usage is
.PP
.Vb 1
\&    my $data = $z\->trailingData();
.Ve
.PP
Returns the data, if any, that is present immediately after the compressed
data stream once uncompression is complete. It only makes sense to call
this method once the end of the compressed data stream has been
encountered.
.PP
This option can be used when there is useful information immediately
following the compressed data stream, and you don't know the length of the
compressed data stream.
.PP
If the input is a buffer, \f(CW\*(C`trailingData\*(C'\fR will return everything from the
end of the compressed data stream to the end of the buffer.
.PP
If the input is a filehandle, \f(CW\*(C`trailingData\*(C'\fR will return the data that is
left in the filehandle input buffer once the end of the compressed data
stream has been reached. You can then use the filehandle to read the rest
of the input file.
.PP
Don't bother using \f(CW\*(C`trailingData\*(C'\fR if the input is a filename.
.PP
If you know the length of the compressed data stream before you start
uncompressing, you can avoid having to use \f(CW\*(C`trailingData\*(C'\fR by setting the
\&\f(CW\*(C`InputLength\*(C'\fR option in the constructor.
.SH "Importing"
.IX Header "Importing"
No symbolic constants are required by this IO::Uncompress::AnyInflate at present.
.IP ":all" 5
.IX Item ":all"
Imports \f(CW\*(C`anyinflate\*(C'\fR and \f(CW$AnyInflateError\fR.
Same as doing this
.Sp
.Vb 1
\&    use IO::Uncompress::AnyInflate qw(anyinflate $AnyInflateError) ;
.Ve
.SH "EXAMPLES"
.IX Header "EXAMPLES"
.SS "Working with Net::FTP"
.IX Subsection "Working with Net::FTP"
See IO::Compress::FAQ
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Compress::Zlib, IO::Compress::Gzip, IO::Uncompress::Gunzip, IO::Compress::Deflate, IO::Uncompress::Inflate, IO::Compress::RawDeflate, IO::Uncompress::RawInflate, IO::Compress::Bzip2, IO::Uncompress::Bunzip2, IO::Compress::Lzma, IO::Uncompress::UnLzma, IO::Compress::Xz, IO::Uncompress::UnXz, IO::Compress::Lzop, IO::Uncompress::UnLzop, IO::Compress::Lzf, IO::Uncompress::UnLzf, IO::Uncompress::AnyUncompress
.PP
IO::Compress::FAQ
.PP
File::GlobMapper, Archive::Zip,
Archive::Tar,
IO::Zlib
.PP
For \s-1RFC 1950, 1951\s0 and 1952 see 
\&\fIhttp://www.faqs.org/rfcs/rfc1950.html\fR,
\&\fIhttp://www.faqs.org/rfcs/rfc1951.html\fR and
\&\fIhttp://www.faqs.org/rfcs/rfc1952.html\fR
.PP
The \fIzlib\fR compression library was written by Jean-loup Gailly
\&\fIgzip@prep.ai.mit.edu\fR and Mark Adler \fImadler@alumni.caltech.edu\fR.
.PP
The primary site for the \fIzlib\fR compression library is
\&\fIhttp://www.zlib.org\fR.
.PP
The primary site for gzip is \fIhttp://www.gzip.org\fR.
.SH "AUTHOR"
.IX Header "AUTHOR"
This module was written by Paul Marquess, \fIpmqs@cpan.org\fR.
.SH "MODIFICATION HISTORY"
.IX Header "MODIFICATION HISTORY"
See the Changes file.
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (c) 2005\-2013 Paul Marquess. All rights reserved.
.PP
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
                                                                                                                                                                                                                                                                                                                                                 osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/IO::Uncompress::AnyInflate5.16.3pm           0100644 0001750 0001750 00000100720 12566207435 026526  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "IO::Uncompress::AnyInflate 3pm"
.TH IO::Uncompress::AnyInflate 3pm "2013-03-04" "perl v5.16.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
IO::Uncompress::AnyInflate \- Uncompress zlib\-based (zip, gzip) file/buffer
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use IO::Uncompress::AnyInflate qw(anyinflate $AnyInflateError) ;
\&
\&    my $status = anyinflate $input => $output [,OPTS]
\&        or die "anyinflate failed: $AnyInflateError\en";
\&
\&    my $z = new IO::Uncompress::AnyInflate $input [OPTS] 
\&        or die "anyinflate failed: $AnyInflateError\en";
\&
\&    $status = $z\->read($buffer)
\&    $status = $z\->read($buffer, $length)
\&    $status = $z\->read($buffer, $length, $offset)
\&    $line = $z\->getline()
\&    $char = $z\->getc()
\&    $char = $z\->ungetc()
\&    $char = $z\->opened()
\&
\&    $status = $z\->inflateSync()
\&
\&    $data = $z\->trailingData()
\&    $status = $z\->nextStream()
\&    $data = $z\->getHeaderInfo()
\&    $z\->tell()
\&    $z\->seek($position, $whence)
\&    $z\->binmode()
\&    $z\->fileno()
\&    $z\->eof()
\&    $z\->close()
\&
\&    $AnyInflateError ;
\&
\&    # IO::File mode
\&
\&    <$z>
\&    read($z, $buffer);
\&    read($z, $buffer, $length);
\&    read($z, $buffer, $length, $offset);
\&    tell($z)
\&    seek($z, $position, $whence)
\&    binmode($z)
\&    fileno($z)
\&    eof($z)
\&    close($z)
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides a Perl interface that allows the reading of
files/buffers that have been compressed in a number of formats that use the
zlib compression library.
.PP
The formats supported are
.IP "\s-1RFC\s0 1950" 5
.IX Item "RFC 1950"
.PD 0
.IP "\s-1RFC\s0 1951 (optionally)" 5
.IX Item "RFC 1951 (optionally)"
.IP "gzip (\s-1RFC\s0 1952)" 5
.IX Item "gzip (RFC 1952)"
.IP "zip" 5
.IX Item "zip"
.PD
.PP
The module will auto-detect which, if any, of the supported
compression formats is being used.
.SH "Functional Interface"
.IX Header "Functional Interface"
A top-level function, \f(CW\*(C`anyinflate\*(C'\fR, is provided to carry out
\&\*(L"one-shot\*(R" uncompression between buffers and/or files. For finer
control over the uncompression process, see the \*(L"\s-1OO\s0 Interface\*(R"
section.
.PP
.Vb 1
\&    use IO::Uncompress::AnyInflate qw(anyinflate $AnyInflateError) ;
\&
\&    anyinflate $input => $output [,OPTS] 
\&        or die "anyinflate failed: $AnyInflateError\en";
.Ve
.PP
The functional interface needs Perl5.005 or better.
.ie n .SS "anyinflate $input => $output [, \s-1OPTS\s0]"
.el .SS "anyinflate \f(CW$input\fP => \f(CW$output\fP [, \s-1OPTS\s0]"
.IX Subsection "anyinflate $input => $output [, OPTS]"
\&\f(CW\*(C`anyinflate\*(C'\fR expects at least two parameters, \f(CW$input\fR and \f(CW$output\fR.
.PP
\fIThe \f(CI$input\fI parameter\fR
.IX Subsection "The $input parameter"
.PP
The parameter, \f(CW$input\fR, is used to define the source of
the compressed data.
.PP
It can take one of the following forms:
.IP "A filename" 5
.IX Item "A filename"
If the \f(CW$input\fR parameter is a simple scalar, it is assumed to be a
filename. This file will be opened for reading and the input data
will be read from it.
.IP "A filehandle" 5
.IX Item "A filehandle"
If the \f(CW$input\fR parameter is a filehandle, the input data will be
read from it.
The string '\-' can be used as an alias for standard input.
.IP "A scalar reference" 5
.IX Item "A scalar reference"
If \f(CW$input\fR is a scalar reference, the input data will be read
from \f(CW$$input\fR.
.IP "An array reference" 5
.IX Item "An array reference"
If \f(CW$input\fR is an array reference, each element in the array must be a
filename.
.Sp
The input data will be read from each file in turn.
.Sp
The complete array will be walked to ensure that it only
contains valid filenames before any data is uncompressed.
.IP "An Input FileGlob string" 5
.IX Item "An Input FileGlob string"
If \f(CW$input\fR is a string that is delimited by the characters \*(L"<\*(R" and \*(L">\*(R"
\&\f(CW\*(C`anyinflate\*(C'\fR will assume that it is an \fIinput fileglob string\fR. The
input is the list of files that match the fileglob.
.Sp
See File::GlobMapper for more details.
.PP
If the \f(CW$input\fR parameter is any other type, \f(CW\*(C`undef\*(C'\fR will be returned.
.PP
\fIThe \f(CI$output\fI parameter\fR
.IX Subsection "The $output parameter"
.PP
The parameter \f(CW$output\fR is used to control the destination of the
uncompressed data. This parameter can take one of these forms.
.IP "A filename" 5
.IX Item "A filename"
If the \f(CW$output\fR parameter is a simple scalar, it is assumed to be a
filename.  This file will be opened for writing and the uncompressed
data will be written to it.
.IP "A filehandle" 5
.IX Item "A filehandle"
If the \f(CW$output\fR parameter is a filehandle, the uncompressed data
will be written to it.
The string '\-' can be used as an alias for standard output.
.IP "A scalar reference" 5
.IX Item "A scalar reference"
If \f(CW$output\fR is a scalar reference, the uncompressed data will be
stored in \f(CW$$output\fR.
.IP "An Array Reference" 5
.IX Item "An Array Reference"
If \f(CW$output\fR is an array reference, the uncompressed data will be
pushed onto the array.
.IP "An Output FileGlob" 5
.IX Item "An Output FileGlob"
If \f(CW$output\fR is a string that is delimited by the characters \*(L"<\*(R" and \*(L">\*(R"
\&\f(CW\*(C`anyinflate\*(C'\fR will assume that it is an \fIoutput fileglob string\fR. The
output is the list of files that match the fileglob.
.Sp
When \f(CW$output\fR is an fileglob string, \f(CW$input\fR must also be a fileglob
string. Anything else is an error.
.Sp
See File::GlobMapper for more details.
.PP
If the \f(CW$output\fR parameter is any other type, \f(CW\*(C`undef\*(C'\fR will be returned.
.SS "Notes"
.IX Subsection "Notes"
When \f(CW$input\fR maps to multiple compressed files/buffers and \f(CW$output\fR is
a single file/buffer, after uncompression \f(CW$output\fR will contain a
concatenation of all the uncompressed data from each of the input
files/buffers.
.SS "Optional Parameters"
.IX Subsection "Optional Parameters"
Unless specified below, the optional parameters for \f(CW\*(C`anyinflate\*(C'\fR,
\&\f(CW\*(C`OPTS\*(C'\fR, are the same as those used with the \s-1OO\s0 interface defined in the
\&\*(L"Constructor Options\*(R" section below.
.ie n .IP """AutoClose => 0|1""" 5
.el .IP "\f(CWAutoClose => 0|1\fR" 5
.IX Item "AutoClose => 0|1"
This option applies to any input or output data streams to 
\&\f(CW\*(C`anyinflate\*(C'\fR that are filehandles.
.Sp
If \f(CW\*(C`AutoClose\*(C'\fR is specified, and the value is true, it will result in all
input and/or output filehandles being closed once \f(CW\*(C`anyinflate\*(C'\fR has
completed.
.Sp
This parameter defaults to 0.
.ie n .IP """BinModeOut => 0|1""" 5
.el .IP "\f(CWBinModeOut => 0|1\fR" 5
.IX Item "BinModeOut => 0|1"
When writing to a file or filehandle, set \f(CW\*(C`binmode\*(C'\fR before writing to the
file.
.Sp
Defaults to 0.
.ie n .IP """Append => 0|1""" 5
.el .IP "\f(CWAppend => 0|1\fR" 5
.IX Item "Append => 0|1"
The behaviour of this option is dependent on the type of output data
stream.
.RS 5
.IP "\(bu" 5
A Buffer
.Sp
If \f(CW\*(C`Append\*(C'\fR is enabled, all uncompressed data will be append to the end of
the output buffer. Otherwise the output buffer will be cleared before any
uncompressed data is written to it.
.IP "\(bu" 5
A Filename
.Sp
If \f(CW\*(C`Append\*(C'\fR is enabled, the file will be opened in append mode. Otherwise
the contents of the file, if any, will be truncated before any uncompressed
data is written to it.
.IP "\(bu" 5
A Filehandle
.Sp
If \f(CW\*(C`Append\*(C'\fR is enabled, the filehandle will be positioned to the end of
the file via a call to \f(CW\*(C`seek\*(C'\fR before any uncompressed data is
written to it.  Otherwise the file pointer will not be moved.
.RE
.RS 5
.Sp
When \f(CW\*(C`Append\*(C'\fR is specified, and set to true, it will \fIappend\fR all uncompressed 
data to the output data stream.
.Sp
So when the output is a filehandle it will carry out a seek to the eof
before writing any uncompressed data. If the output is a filename, it will be opened for
appending. If the output is a buffer, all uncompressed data will be
appended to the existing buffer.
.Sp
Conversely when \f(CW\*(C`Append\*(C'\fR is not specified, or it is present and is set to
false, it will operate as follows.
.Sp
When the output is a filename, it will truncate the contents of the file
before writing any uncompressed data. If the output is a filehandle
its position will not be changed. If the output is a buffer, it will be
wiped before any uncompressed data is output.
.Sp
Defaults to 0.
.RE
.ie n .IP """MultiStream => 0|1""" 5
.el .IP "\f(CWMultiStream => 0|1\fR" 5
.IX Item "MultiStream => 0|1"
If the input file/buffer contains multiple compressed data streams, this
option will uncompress the whole lot as a single data stream.
.Sp
Defaults to 0.
.ie n .IP """TrailingData => $scalar""" 5
.el .IP "\f(CWTrailingData => $scalar\fR" 5
.IX Item "TrailingData => $scalar"
Returns the data, if any, that is present immediately after the compressed
data stream once uncompression is complete.
.Sp
This option can be used when there is useful information immediately
following the compressed data stream, and you don't know the length of the
compressed data stream.
.Sp
If the input is a buffer, \f(CW\*(C`trailingData\*(C'\fR will return everything from the
end of the compressed data stream to the end of the buffer.
.Sp
If the input is a filehandle, \f(CW\*(C`trailingData\*(C'\fR will return the data that is
left in the filehandle input buffer once the end of the compressed data
stream has been reached. You can then use the filehandle to read the rest
of the input file.
.Sp
Don't bother using \f(CW\*(C`trailingData\*(C'\fR if the input is a filename.
.Sp
If you know the length of the compressed data stream before you start
uncompressing, you can avoid having to use \f(CW\*(C`trailingData\*(C'\fR by setting the
\&\f(CW\*(C`InputLength\*(C'\fR option.
.SS "Examples"
.IX Subsection "Examples"
To read the contents of the file \f(CW\*(C`file1.txt.Compressed\*(C'\fR and write the
uncompressed data to the file \f(CW\*(C`file1.txt\*(C'\fR.
.PP
.Vb 3
\&    use strict ;
\&    use warnings ;
\&    use IO::Uncompress::AnyInflate qw(anyinflate $AnyInflateError) ;
\&
\&    my $input = "file1.txt.Compressed";
\&    my $output = "file1.txt";
\&    anyinflate $input => $output
\&        or die "anyinflate failed: $AnyInflateError\en";
.Ve
.PP
To read from an existing Perl filehandle, \f(CW$input\fR, and write the
uncompressed data to a buffer, \f(CW$buffer\fR.
.PP
.Vb 4
\&    use strict ;
\&    use warnings ;
\&    use IO::Uncompress::AnyInflate qw(anyinflate $AnyInflateError) ;
\&    use IO::File ;
\&
\&    my $input = new IO::File "<file1.txt.Compressed"
\&        or die "Cannot open \*(Aqfile1.txt.Compressed\*(Aq: $!\en" ;
\&    my $buffer ;
\&    anyinflate $input => \e$buffer 
\&        or die "anyinflate failed: $AnyInflateError\en";
.Ve
.PP
To uncompress all files in the directory \*(L"/my/home\*(R" that match \*(L"*.txt.Compressed\*(R" and store the compressed data in the same directory
.PP
.Vb 3
\&    use strict ;
\&    use warnings ;
\&    use IO::Uncompress::AnyInflate qw(anyinflate $AnyInflateError) ;
\&
\&    anyinflate \*(Aq</my/home/*.txt.Compressed>\*(Aq => \*(Aq</my/home/#1.txt>\*(Aq
\&        or die "anyinflate failed: $AnyInflateError\en";
.Ve
.PP
and if you want to compress each file one at a time, this will do the trick
.PP
.Vb 3
\&    use strict ;
\&    use warnings ;
\&    use IO::Uncompress::AnyInflate qw(anyinflate $AnyInflateError) ;
\&
\&    for my $input ( glob "/my/home/*.txt.Compressed" )
\&    {
\&        my $output = $input;
\&        $output =~ s/.Compressed// ;
\&        anyinflate $input => $output 
\&            or die "Error compressing \*(Aq$input\*(Aq: $AnyInflateError\en";
\&    }
.Ve
.SH "OO Interface"
.IX Header "OO Interface"
.SS "Constructor"
.IX Subsection "Constructor"
The format of the constructor for IO::Uncompress::AnyInflate is shown below
.PP
.Vb 2
\&    my $z = new IO::Uncompress::AnyInflate $input [OPTS]
\&        or die "IO::Uncompress::AnyInflate failed: $AnyInflateError\en";
.Ve
.PP
Returns an \f(CW\*(C`IO::Uncompress::AnyInflate\*(C'\fR object on success and undef on failure.
The variable \f(CW$AnyInflateError\fR will contain an error message on failure.
.PP
If you are running Perl 5.005 or better the object, \f(CW$z\fR, returned from
IO::Uncompress::AnyInflate can be used exactly like an IO::File filehandle.
This means that all normal input file operations can be carried out with
\&\f(CW$z\fR.  For example, to read a line from a compressed file/buffer you can
use either of these forms
.PP
.Vb 2
\&    $line = $z\->getline();
\&    $line = <$z>;
.Ve
.PP
The mandatory parameter \f(CW$input\fR is used to determine the source of the
compressed data. This parameter can take one of three forms.
.IP "A filename" 5
.IX Item "A filename"
If the \f(CW$input\fR parameter is a scalar, it is assumed to be a filename. This
file will be opened for reading and the compressed data will be read from it.
.IP "A filehandle" 5
.IX Item "A filehandle"
If the \f(CW$input\fR parameter is a filehandle, the compressed data will be
read from it.
The string '\-' can be used as an alias for standard input.
.IP "A scalar reference" 5
.IX Item "A scalar reference"
If \f(CW$input\fR is a scalar reference, the compressed data will be read from
\&\f(CW$$output\fR.
.SS "Constructor Options"
.IX Subsection "Constructor Options"
The option names defined below are case insensitive and can be optionally
prefixed by a '\-'.  So all of the following are valid
.PP
.Vb 4
\&    \-AutoClose
\&    \-autoclose
\&    AUTOCLOSE
\&    autoclose
.Ve
.PP
\&\s-1OPTS\s0 is a combination of the following options:
.ie n .IP """AutoClose => 0|1""" 5
.el .IP "\f(CWAutoClose => 0|1\fR" 5
.IX Item "AutoClose => 0|1"
This option is only valid when the \f(CW$input\fR parameter is a filehandle. If
specified, and the value is true, it will result in the file being closed once
either the \f(CW\*(C`close\*(C'\fR method is called or the IO::Uncompress::AnyInflate object is
destroyed.
.Sp
This parameter defaults to 0.
.ie n .IP """MultiStream => 0|1""" 5
.el .IP "\f(CWMultiStream => 0|1\fR" 5
.IX Item "MultiStream => 0|1"
Allows multiple concatenated compressed streams to be treated as a single
compressed stream. Decompression will stop once either the end of the
file/buffer is reached, an error is encountered (premature eof, corrupt
compressed data) or the end of a stream is not immediately followed by the
start of another stream.
.Sp
This parameter defaults to 0.
.ie n .IP """Prime => $string""" 5
.el .IP "\f(CWPrime => $string\fR" 5
.IX Item "Prime => $string"
This option will uncompress the contents of \f(CW$string\fR before processing the
input file/buffer.
.Sp
This option can be useful when the compressed data is embedded in another
file/data structure and it is not possible to work out where the compressed
data begins without having to read the first few bytes. If this is the
case, the uncompression can be \fIprimed\fR with these bytes using this
option.
.ie n .IP """Transparent => 0|1""" 5
.el .IP "\f(CWTransparent => 0|1\fR" 5
.IX Item "Transparent => 0|1"
If this option is set and the input file/buffer is not compressed data,
the module will allow reading of it anyway.
.Sp
In addition, if the input file/buffer does contain compressed data and
there is non-compressed data immediately following it, setting this option
will make this module treat the whole file/buffer as a single data stream.
.Sp
This option defaults to 1.
.ie n .IP """BlockSize => $num""" 5
.el .IP "\f(CWBlockSize => $num\fR" 5
.IX Item "BlockSize => $num"
When reading the compressed input data, IO::Uncompress::AnyInflate will read it in
blocks of \f(CW$num\fR bytes.
.Sp
This option defaults to 4096.
.ie n .IP """InputLength => $size""" 5
.el .IP "\f(CWInputLength => $size\fR" 5
.IX Item "InputLength => $size"
When present this option will limit the number of compressed bytes read
from the input file/buffer to \f(CW$size\fR. This option can be used in the
situation where there is useful data directly after the compressed data
stream and you know beforehand the exact length of the compressed data
stream.
.Sp
This option is mostly used when reading from a filehandle, in which case
the file pointer will be left pointing to the first byte directly after the
compressed data stream.
.Sp
This option defaults to off.
.ie n .IP """Append => 0|1""" 5
.el .IP "\f(CWAppend => 0|1\fR" 5
.IX Item "Append => 0|1"
This option controls what the \f(CW\*(C`read\*(C'\fR method does with uncompressed data.
.Sp
If set to 1, all uncompressed data will be appended to the output parameter
of the \f(CW\*(C`read\*(C'\fR method.
.Sp
If set to 0, the contents of the output parameter of the \f(CW\*(C`read\*(C'\fR method
will be overwritten by the uncompressed data.
.Sp
Defaults to 0.
.ie n .IP """Strict => 0|1""" 5
.el .IP "\f(CWStrict => 0|1\fR" 5
.IX Item "Strict => 0|1"
This option controls whether the extra checks defined below are used when
carrying out the decompression. When Strict is on, the extra tests are
carried out, when Strict is off they are not.
.Sp
The default for this option is off.
.Sp
If the input is an \s-1RFC\s0 1950 data stream, the following will be checked:
.RS 5
.IP "1." 5
The \s-1ADLER32\s0 checksum field must be present.
.IP "2." 5
The value of the \s-1ADLER32\s0 field read must match the adler32 value of the
uncompressed data actually contained in the file.
.RE
.RS 5
.Sp
If the input is a gzip (\s-1RFC\s0 1952) data stream, the following will be checked:
.IP "1." 5
If the \s-1FHCRC\s0 bit is set in the gzip \s-1FLG\s0 header byte, the \s-1CRC16\s0 bytes in the
header must match the crc16 value of the gzip header actually read.
.IP "2." 5
If the gzip header contains a name field (\s-1FNAME\s0) it consists solely of \s-1ISO\s0
8859\-1 characters.
.IP "3." 5
If the gzip header contains a comment field (\s-1FCOMMENT\s0) it consists solely
of \s-1ISO\s0 8859\-1 characters plus line-feed.
.IP "4." 5
If the gzip \s-1FEXTRA\s0 header field is present it must conform to the sub-field
structure as defined in \s-1RFC\s0 1952.
.IP "5." 5
The \s-1CRC32\s0 and \s-1ISIZE\s0 trailer fields must be present.
.IP "6." 5
The value of the \s-1CRC32\s0 field read must match the crc32 value of the
uncompressed data actually contained in the gzip file.
.IP "7." 5
The value of the \s-1ISIZE\s0 fields read must match the length of the
uncompressed data actually read from the file.
.RE
.RS 5
.RE
.ie n .IP """RawInflate => 0|1""" 5
.el .IP "\f(CWRawInflate => 0|1\fR" 5
.IX Item "RawInflate => 0|1"
When auto-detecting the compressed format, try to test for raw-deflate (\s-1RFC\s0
1951) content using the \f(CW\*(C`IO::Uncompress::RawInflate\*(C'\fR module.
.Sp
The reason this is not default behaviour is because \s-1RFC\s0 1951 content can
only be detected by attempting to uncompress it. This process is error
prone and can result is false positives.
.Sp
Defaults to 0.
.ie n .IP """ParseExtra => 0|1"" If the gzip \s-1FEXTRA\s0 header field is present and this option is set, it will force the module to check that it conforms to the sub-field structure as defined in \s-1RFC\s0 1952." 5
.el .IP "\f(CWParseExtra => 0|1\fR If the gzip \s-1FEXTRA\s0 header field is present and this option is set, it will force the module to check that it conforms to the sub-field structure as defined in \s-1RFC\s0 1952." 5
.IX Item "ParseExtra => 0|1 If the gzip FEXTRA header field is present and this option is set, it will force the module to check that it conforms to the sub-field structure as defined in RFC 1952."
If the \f(CW\*(C`Strict\*(C'\fR is on it will automatically enable this option.
.Sp
Defaults to 0.
.SS "Examples"
.IX Subsection "Examples"
\&\s-1TODO\s0
.SH "Methods"
.IX Header "Methods"
.SS "read"
.IX Subsection "read"
Usage is
.PP
.Vb 1
\&    $status = $z\->read($buffer)
.Ve
.PP
Reads a block of compressed data (the size the the compressed block is
determined by the \f(CW\*(C`Buffer\*(C'\fR option in the constructor), uncompresses it and
writes any uncompressed data into \f(CW$buffer\fR. If the \f(CW\*(C`Append\*(C'\fR parameter is
set in the constructor, the uncompressed data will be appended to the
\&\f(CW$buffer\fR parameter. Otherwise \f(CW$buffer\fR will be overwritten.
.PP
Returns the number of uncompressed bytes written to \f(CW$buffer\fR, zero if eof
or a negative number on error.
.SS "read"
.IX Subsection "read"
Usage is
.PP
.Vb 2
\&    $status = $z\->read($buffer, $length)
\&    $status = $z\->read($buffer, $length, $offset)
\&
\&    $status = read($z, $buffer, $length)
\&    $status = read($z, $buffer, $length, $offset)
.Ve
.PP
Attempt to read \f(CW$length\fR bytes of uncompressed data into \f(CW$buffer\fR.
.PP
The main difference between this form of the \f(CW\*(C`read\*(C'\fR method and the
previous one, is that this one will attempt to return \fIexactly\fR \f(CW$length\fR
bytes. The only circumstances that this function will not is if end-of-file
or an \s-1IO\s0 error is encountered.
.PP
Returns the number of uncompressed bytes written to \f(CW$buffer\fR, zero if eof
or a negative number on error.
.SS "getline"
.IX Subsection "getline"
Usage is
.PP
.Vb 2
\&    $line = $z\->getline()
\&    $line = <$z>
.Ve
.PP
Reads a single line.
.PP
This method fully supports the use of of the variable \f(CW$/\fR (or
\&\f(CW$INPUT_RECORD_SEPARATOR\fR or \f(CW$RS\fR when \f(CW\*(C`English\*(C'\fR is in use) to
determine what constitutes an end of line. Paragraph mode, record mode and
file slurp mode are all supported.
.SS "getc"
.IX Subsection "getc"
Usage is
.PP
.Vb 1
\&    $char = $z\->getc()
.Ve
.PP
Read a single character.
.SS "ungetc"
.IX Subsection "ungetc"
Usage is
.PP
.Vb 1
\&    $char = $z\->ungetc($string)
.Ve
.SS "inflateSync"
.IX Subsection "inflateSync"
Usage is
.PP
.Vb 1
\&    $status = $z\->inflateSync()
.Ve
.PP
\&\s-1TODO\s0
.SS "getHeaderInfo"
.IX Subsection "getHeaderInfo"
Usage is
.PP
.Vb 2
\&    $hdr  = $z\->getHeaderInfo();
\&    @hdrs = $z\->getHeaderInfo();
.Ve
.PP
This method returns either a hash reference (in scalar context) or a list
or hash references (in array context) that contains information about each
of the header fields in the compressed data stream(s).
.SS "tell"
.IX Subsection "tell"
Usage is
.PP
.Vb 2
\&    $z\->tell()
\&    tell $z
.Ve
.PP
Returns the uncompressed file offset.
.SS "eof"
.IX Subsection "eof"
Usage is
.PP
.Vb 2
\&    $z\->eof();
\&    eof($z);
.Ve
.PP
Returns true if the end of the compressed input stream has been reached.
.SS "seek"
.IX Subsection "seek"
.Vb 2
\&    $z\->seek($position, $whence);
\&    seek($z, $position, $whence);
.Ve
.PP
Provides a sub-set of the \f(CW\*(C`seek\*(C'\fR functionality, with the restriction
that it is only legal to seek forward in the input file/buffer.
It is a fatal error to attempt to seek backward.
.PP
The \f(CW$whence\fR parameter takes one the usual values, namely \s-1SEEK_SET\s0,
\&\s-1SEEK_CUR\s0 or \s-1SEEK_END\s0.
.PP
Returns 1 on success, 0 on failure.
.SS "binmode"
.IX Subsection "binmode"
Usage is
.PP
.Vb 2
\&    $z\->binmode
\&    binmode $z ;
.Ve
.PP
This is a noop provided for completeness.
.SS "opened"
.IX Subsection "opened"
.Vb 1
\&    $z\->opened()
.Ve
.PP
Returns true if the object currently refers to a opened file/buffer.
.SS "autoflush"
.IX Subsection "autoflush"
.Vb 2
\&    my $prev = $z\->autoflush()
\&    my $prev = $z\->autoflush(EXPR)
.Ve
.PP
If the \f(CW$z\fR object is associated with a file or a filehandle, this method
returns the current autoflush setting for the underlying filehandle. If
\&\f(CW\*(C`EXPR\*(C'\fR is present, and is non-zero, it will enable flushing after every
write/print operation.
.PP
If \f(CW$z\fR is associated with a buffer, this method has no effect and always
returns \f(CW\*(C`undef\*(C'\fR.
.PP
\&\fBNote\fR that the special variable \f(CW$|\fR \fBcannot\fR be used to set or
retrieve the autoflush setting.
.SS "input_line_number"
.IX Subsection "input_line_number"
.Vb 2
\&    $z\->input_line_number()
\&    $z\->input_line_number(EXPR)
.Ve
.PP
Returns the current uncompressed line number. If \f(CW\*(C`EXPR\*(C'\fR is present it has
the effect of setting the line number. Note that setting the line number
does not change the current position within the file/buffer being read.
.PP
The contents of \f(CW$/\fR are used to to determine what constitutes a line
terminator.
.SS "fileno"
.IX Subsection "fileno"
.Vb 2
\&    $z\->fileno()
\&    fileno($z)
.Ve
.PP
If the \f(CW$z\fR object is associated with a file or a filehandle, \f(CW\*(C`fileno\*(C'\fR
will return the underlying file descriptor. Once the \f(CW\*(C`close\*(C'\fR method is
called \f(CW\*(C`fileno\*(C'\fR will return \f(CW\*(C`undef\*(C'\fR.
.PP
If the \f(CW$z\fR object is associated with a buffer, this method will return
\&\f(CW\*(C`undef\*(C'\fR.
.SS "close"
.IX Subsection "close"
.Vb 2
\&    $z\->close() ;
\&    close $z ;
.Ve
.PP
Closes the output file/buffer.
.PP
For most versions of Perl this method will be automatically invoked if
the IO::Uncompress::AnyInflate object is destroyed (either explicitly or by the
variable with the reference to the object going out of scope). The
exceptions are Perl versions 5.005 through 5.00504 and 5.8.0. In
these cases, the \f(CW\*(C`close\*(C'\fR method will be called automatically, but
not until global destruction of all live objects when the program is
terminating.
.PP
Therefore, if you want your scripts to be able to run on all versions
of Perl, you should call \f(CW\*(C`close\*(C'\fR explicitly and not rely on automatic
closing.
.PP
Returns true on success, otherwise 0.
.PP
If the \f(CW\*(C`AutoClose\*(C'\fR option has been enabled when the IO::Uncompress::AnyInflate
object was created, and the object is associated with a file, the
underlying file will also be closed.
.SS "nextStream"
.IX Subsection "nextStream"
Usage is
.PP
.Vb 1
\&    my $status = $z\->nextStream();
.Ve
.PP
Skips to the next compressed data stream in the input file/buffer. If a new
compressed data stream is found, the eof marker will be cleared and \f(CW$.\fR
will be reset to 0.
.PP
Returns 1 if a new stream was found, 0 if none was found, and \-1 if an
error was encountered.
.SS "trailingData"
.IX Subsection "trailingData"
Usage is
.PP
.Vb 1
\&    my $data = $z\->trailingData();
.Ve
.PP
Returns the data, if any, that is present immediately after the compressed
data stream once uncompression is complete. It only makes sense to call
this method once the end of the compressed data stream has been
encountered.
.PP
This option can be used when there is useful information immediately
following the compressed data stream, and you don't know the length of the
compressed data stream.
.PP
If the input is a buffer, \f(CW\*(C`trailingData\*(C'\fR will return everything from the
end of the compressed data stream to the end of the buffer.
.PP
If the input is a filehandle, \f(CW\*(C`trailingData\*(C'\fR will return the data that is
left in the filehandle input buffer once the end of the compressed data
stream has been reached. You can then use the filehandle to read the rest
of the input file.
.PP
Don't bother using \f(CW\*(C`trailingData\*(C'\fR if the input is a filename.
.PP
If you know the length of the compressed data stream before you start
uncompressing, you can avoid having to use \f(CW\*(C`trailingData\*(C'\fR by setting the
\&\f(CW\*(C`InputLength\*(C'\fR option in the constructor.
.SH "Importing"
.IX Header "Importing"
No symbolic constants are required by this IO::Uncompress::AnyInflate at present.
.IP ":all" 5
.IX Item ":all"
Imports \f(CW\*(C`anyinflate\*(C'\fR and \f(CW$AnyInflateError\fR.
Same as doing this
.Sp
.Vb 1
\&    use IO::Uncompress::AnyInflate qw(anyinflate $AnyInflateError) ;
.Ve
.SH "EXAMPLES"
.IX Header "EXAMPLES"
.SS "Working with Net::FTP"
.IX Subsection "Working with Net::FTP"
See IO::Uncompress::AnyInflate::FAQ
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Compress::Zlib, IO::Compress::Gzip, IO::Uncompress::Gunzip, IO::Compress::Deflate, IO::Uncompress::Inflate, IO::Compress::RawDeflate, IO::Uncompress::RawInflate, IO::Compress::Bzip2, IO::Uncompress::Bunzip2, IO::Compress::Lzma, IO::Uncompress::UnLzma, IO::Compress::Xz, IO::Uncompress::UnXz, IO::Compress::Lzop, IO::Uncompress::UnLzop, IO::Compress::Lzf, IO::Uncompress::UnLzf, IO::Uncompress::AnyUncompress
.PP
IO::Compress::FAQ
.PP
File::GlobMapper, Archive::Zip,
Archive::Tar,
IO::Zlib
.PP
For \s-1RFC\s0 1950, 1951 and 1952 see 
\&\fIhttp://www.faqs.org/rfcs/rfc1950.html\fR,
\&\fIhttp://www.faqs.org/rfcs/rfc1951.html\fR and
\&\fIhttp://www.faqs.org/rfcs/rfc1952.html\fR
.PP
The \fIzlib\fR compression library was written by Jean-loup Gailly
\&\fIgzip@prep.ai.mit.edu\fR and Mark Adler \fImadler@alumni.caltech.edu\fR.
.PP
The primary site for the \fIzlib\fR compression library is
\&\fIhttp://www.zlib.org\fR.
.PP
The primary site for gzip is \fIhttp://www.gzip.org\fR.
.SH "AUTHOR"
.IX Header "AUTHOR"
This module was written by Paul Marquess, \fIpmqs@cpan.org\fR.
.SH "MODIFICATION HISTORY"
.IX Header "MODIFICATION HISTORY"
See the Changes file.
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (c) 2005\-2012 Paul Marquess. All rights reserved.
.PP
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
                                                osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/IO::Uncompress::AnyInflate5.18.3pm           0100644 0001750 0001750 00000103257 12566207456 026543  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "IO::Uncompress::AnyInflate 3pm"
.TH IO::Uncompress::AnyInflate 3pm "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
IO::Uncompress::AnyInflate \- Uncompress zlib\-based (zip, gzip) file/buffer
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use IO::Uncompress::AnyInflate qw(anyinflate $AnyInflateError) ;
\&
\&    my $status = anyinflate $input => $output [,OPTS]
\&        or die "anyinflate failed: $AnyInflateError\en";
\&
\&    my $z = new IO::Uncompress::AnyInflate $input [OPTS] 
\&        or die "anyinflate failed: $AnyInflateError\en";
\&
\&    $status = $z\->read($buffer)
\&    $status = $z\->read($buffer, $length)
\&    $status = $z\->read($buffer, $length, $offset)
\&    $line = $z\->getline()
\&    $char = $z\->getc()
\&    $char = $z\->ungetc()
\&    $char = $z\->opened()
\&
\&    $status = $z\->inflateSync()
\&
\&    $data = $z\->trailingData()
\&    $status = $z\->nextStream()
\&    $data = $z\->getHeaderInfo()
\&    $z\->tell()
\&    $z\->seek($position, $whence)
\&    $z\->binmode()
\&    $z\->fileno()
\&    $z\->eof()
\&    $z\->close()
\&
\&    $AnyInflateError ;
\&
\&    # IO::File mode
\&
\&    <$z>
\&    read($z, $buffer);
\&    read($z, $buffer, $length);
\&    read($z, $buffer, $length, $offset);
\&    tell($z)
\&    seek($z, $position, $whence)
\&    binmode($z)
\&    fileno($z)
\&    eof($z)
\&    close($z)
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides a Perl interface that allows the reading of
files/buffers that have been compressed in a number of formats that use the
zlib compression library.
.PP
The formats supported are
.IP "\s-1RFC 1950\s0" 5
.IX Item "RFC 1950"
.PD 0
.IP "\s-1RFC 1951 \s0(optionally)" 5
.IX Item "RFC 1951 (optionally)"
.IP "gzip (\s-1RFC 1952\s0)" 5
.IX Item "gzip (RFC 1952)"
.IP "zip" 5
.IX Item "zip"
.PD
.PP
The module will auto-detect which, if any, of the supported
compression formats is being used.
.SH "Functional Interface"
.IX Header "Functional Interface"
A top-level function, \f(CW\*(C`anyinflate\*(C'\fR, is provided to carry out
\&\*(L"one-shot\*(R" uncompression between buffers and/or files. For finer
control over the uncompression process, see the \*(L"\s-1OO\s0 Interface\*(R"
section.
.PP
.Vb 1
\&    use IO::Uncompress::AnyInflate qw(anyinflate $AnyInflateError) ;
\&
\&    anyinflate $input_filename_or_reference => $output_filename_or_reference [,OPTS] 
\&        or die "anyinflate failed: $AnyInflateError\en";
.Ve
.PP
The functional interface needs Perl5.005 or better.
.ie n .SS "anyinflate $input => $output [, \s-1OPTS\s0]"
.el .SS "anyinflate \f(CW$input\fP => \f(CW$output\fP [, \s-1OPTS\s0]"
.IX Subsection "anyinflate $input => $output [, OPTS]"
\&\f(CW\*(C`anyinflate\*(C'\fR expects at least two parameters,
\&\f(CW$input_filename_or_reference\fR and \f(CW$output_filename_or_reference\fR.
.PP
\fIThe \f(CI$input_filename_or_reference\fI parameter\fR
.IX Subsection "The $input_filename_or_reference parameter"
.PP
The parameter, \f(CW$input_filename_or_reference\fR, is used to define the
source of the compressed data.
.PP
It can take one of the following forms:
.IP "A filename" 5
.IX Item "A filename"
If the <$input_filename_or_reference> parameter is a simple scalar, it is
assumed to be a filename. This file will be opened for reading and the
input data will be read from it.
.IP "A filehandle" 5
.IX Item "A filehandle"
If the \f(CW$input_filename_or_reference\fR parameter is a filehandle, the input
data will be read from it.  The string '\-' can be used as an alias for
standard input.
.IP "A scalar reference" 5
.IX Item "A scalar reference"
If \f(CW$input_filename_or_reference\fR is a scalar reference, the input data
will be read from \f(CW$$input_filename_or_reference\fR.
.IP "An array reference" 5
.IX Item "An array reference"
If \f(CW$input_filename_or_reference\fR is an array reference, each element in
the array must be a filename.
.Sp
The input data will be read from each file in turn.
.Sp
The complete array will be walked to ensure that it only
contains valid filenames before any data is uncompressed.
.IP "An Input FileGlob string" 5
.IX Item "An Input FileGlob string"
If \f(CW$input_filename_or_reference\fR is a string that is delimited by the
characters \*(L"<\*(R" and \*(L">\*(R" \f(CW\*(C`anyinflate\*(C'\fR will assume that it is an 
\&\fIinput fileglob string\fR. The input is the list of files that match the 
fileglob.
.Sp
See File::GlobMapper for more details.
.PP
If the \f(CW$input_filename_or_reference\fR parameter is any other type,
\&\f(CW\*(C`undef\*(C'\fR will be returned.
.PP
\fIThe \f(CI$output_filename_or_reference\fI parameter\fR
.IX Subsection "The $output_filename_or_reference parameter"
.PP
The parameter \f(CW$output_filename_or_reference\fR is used to control the
destination of the uncompressed data. This parameter can take one of
these forms.
.IP "A filename" 5
.IX Item "A filename"
If the \f(CW$output_filename_or_reference\fR parameter is a simple scalar, it is
assumed to be a filename.  This file will be opened for writing and the 
uncompressed data will be written to it.
.IP "A filehandle" 5
.IX Item "A filehandle"
If the \f(CW$output_filename_or_reference\fR parameter is a filehandle, the
uncompressed data will be written to it.  The string '\-' can be used as
an alias for standard output.
.IP "A scalar reference" 5
.IX Item "A scalar reference"
If \f(CW$output_filename_or_reference\fR is a scalar reference, the
uncompressed data will be stored in \f(CW$$output_filename_or_reference\fR.
.IP "An Array Reference" 5
.IX Item "An Array Reference"
If \f(CW$output_filename_or_reference\fR is an array reference, 
the uncompressed data will be pushed onto the array.
.IP "An Output FileGlob" 5
.IX Item "An Output FileGlob"
If \f(CW$output_filename_or_reference\fR is a string that is delimited by the
characters \*(L"<\*(R" and \*(L">\*(R" \f(CW\*(C`anyinflate\*(C'\fR will assume that it is an
\&\fIoutput fileglob string\fR. The output is the list of files that match the
fileglob.
.Sp
When \f(CW$output_filename_or_reference\fR is an fileglob string,
\&\f(CW$input_filename_or_reference\fR must also be a fileglob string. Anything
else is an error.
.Sp
See File::GlobMapper for more details.
.PP
If the \f(CW$output_filename_or_reference\fR parameter is any other type,
\&\f(CW\*(C`undef\*(C'\fR will be returned.
.SS "Notes"
.IX Subsection "Notes"
When \f(CW$input_filename_or_reference\fR maps to multiple compressed
files/buffers and \f(CW$output_filename_or_reference\fR is
a single file/buffer, after uncompression \f(CW$output_filename_or_reference\fR will contain a
concatenation of all the uncompressed data from each of the input
files/buffers.
.SS "Optional Parameters"
.IX Subsection "Optional Parameters"
Unless specified below, the optional parameters for \f(CW\*(C`anyinflate\*(C'\fR,
\&\f(CW\*(C`OPTS\*(C'\fR, are the same as those used with the \s-1OO\s0 interface defined in the
\&\*(L"Constructor Options\*(R" section below.
.ie n .IP """AutoClose => 0|1""" 5
.el .IP "\f(CWAutoClose => 0|1\fR" 5
.IX Item "AutoClose => 0|1"
This option applies to any input or output data streams to 
\&\f(CW\*(C`anyinflate\*(C'\fR that are filehandles.
.Sp
If \f(CW\*(C`AutoClose\*(C'\fR is specified, and the value is true, it will result in all
input and/or output filehandles being closed once \f(CW\*(C`anyinflate\*(C'\fR has
completed.
.Sp
This parameter defaults to 0.
.ie n .IP """BinModeOut => 0|1""" 5
.el .IP "\f(CWBinModeOut => 0|1\fR" 5
.IX Item "BinModeOut => 0|1"
When writing to a file or filehandle, set \f(CW\*(C`binmode\*(C'\fR before writing to the
file.
.Sp
Defaults to 0.
.ie n .IP """Append => 0|1""" 5
.el .IP "\f(CWAppend => 0|1\fR" 5
.IX Item "Append => 0|1"
The behaviour of this option is dependent on the type of output data
stream.
.RS 5
.IP "\(bu" 5
A Buffer
.Sp
If \f(CW\*(C`Append\*(C'\fR is enabled, all uncompressed data will be append to the end of
the output buffer. Otherwise the output buffer will be cleared before any
uncompressed data is written to it.
.IP "\(bu" 5
A Filename
.Sp
If \f(CW\*(C`Append\*(C'\fR is enabled, the file will be opened in append mode. Otherwise
the contents of the file, if any, will be truncated before any uncompressed
data is written to it.
.IP "\(bu" 5
A Filehandle
.Sp
If \f(CW\*(C`Append\*(C'\fR is enabled, the filehandle will be positioned to the end of
the file via a call to \f(CW\*(C`seek\*(C'\fR before any uncompressed data is
written to it.  Otherwise the file pointer will not be moved.
.RE
.RS 5
.Sp
When \f(CW\*(C`Append\*(C'\fR is specified, and set to true, it will \fIappend\fR all uncompressed 
data to the output data stream.
.Sp
So when the output is a filehandle it will carry out a seek to the eof
before writing any uncompressed data. If the output is a filename, it will be opened for
appending. If the output is a buffer, all uncompressed data will be
appended to the existing buffer.
.Sp
Conversely when \f(CW\*(C`Append\*(C'\fR is not specified, or it is present and is set to
false, it will operate as follows.
.Sp
When the output is a filename, it will truncate the contents of the file
before writing any uncompressed data. If the output is a filehandle
its position will not be changed. If the output is a buffer, it will be
wiped before any uncompressed data is output.
.Sp
Defaults to 0.
.RE
.ie n .IP """MultiStream => 0|1""" 5
.el .IP "\f(CWMultiStream => 0|1\fR" 5
.IX Item "MultiStream => 0|1"
If the input file/buffer contains multiple compressed data streams, this
option will uncompress the whole lot as a single data stream.
.Sp
Defaults to 0.
.ie n .IP """TrailingData => $scalar""" 5
.el .IP "\f(CWTrailingData => $scalar\fR" 5
.IX Item "TrailingData => $scalar"
Returns the data, if any, that is present immediately after the compressed
data stream once uncompression is complete.
.Sp
This option can be used when there is useful information immediately
following the compressed data stream, and you don't know the length of the
compressed data stream.
.Sp
If the input is a buffer, \f(CW\*(C`trailingData\*(C'\fR will return everything from the
end of the compressed data stream to the end of the buffer.
.Sp
If the input is a filehandle, \f(CW\*(C`trailingData\*(C'\fR will return the data that is
left in the filehandle input buffer once the end of the compressed data
stream has been reached. You can then use the filehandle to read the rest
of the input file.
.Sp
Don't bother using \f(CW\*(C`trailingData\*(C'\fR if the input is a filename.
.Sp
If you know the length of the compressed data stream before you start
uncompressing, you can avoid having to use \f(CW\*(C`trailingData\*(C'\fR by setting the
\&\f(CW\*(C`InputLength\*(C'\fR option.
.SS "Examples"
.IX Subsection "Examples"
To read the contents of the file \f(CW\*(C`file1.txt.Compressed\*(C'\fR and write the
uncompressed data to the file \f(CW\*(C`file1.txt\*(C'\fR.
.PP
.Vb 3
\&    use strict ;
\&    use warnings ;
\&    use IO::Uncompress::AnyInflate qw(anyinflate $AnyInflateError) ;
\&
\&    my $input = "file1.txt.Compressed";
\&    my $output = "file1.txt";
\&    anyinflate $input => $output
\&        or die "anyinflate failed: $AnyInflateError\en";
.Ve
.PP
To read from an existing Perl filehandle, \f(CW$input\fR, and write the
uncompressed data to a buffer, \f(CW$buffer\fR.
.PP
.Vb 4
\&    use strict ;
\&    use warnings ;
\&    use IO::Uncompress::AnyInflate qw(anyinflate $AnyInflateError) ;
\&    use IO::File ;
\&
\&    my $input = new IO::File "<file1.txt.Compressed"
\&        or die "Cannot open \*(Aqfile1.txt.Compressed\*(Aq: $!\en" ;
\&    my $buffer ;
\&    anyinflate $input => \e$buffer 
\&        or die "anyinflate failed: $AnyInflateError\en";
.Ve
.PP
To uncompress all files in the directory \*(L"/my/home\*(R" that match \*(L"*.txt.Compressed\*(R" and store the compressed data in the same directory
.PP
.Vb 3
\&    use strict ;
\&    use warnings ;
\&    use IO::Uncompress::AnyInflate qw(anyinflate $AnyInflateError) ;
\&
\&    anyinflate \*(Aq</my/home/*.txt.Compressed>\*(Aq => \*(Aq</my/home/#1.txt>\*(Aq
\&        or die "anyinflate failed: $AnyInflateError\en";
.Ve
.PP
and if you want to compress each file one at a time, this will do the trick
.PP
.Vb 3
\&    use strict ;
\&    use warnings ;
\&    use IO::Uncompress::AnyInflate qw(anyinflate $AnyInflateError) ;
\&
\&    for my $input ( glob "/my/home/*.txt.Compressed" )
\&    {
\&        my $output = $input;
\&        $output =~ s/.Compressed// ;
\&        anyinflate $input => $output 
\&            or die "Error compressing \*(Aq$input\*(Aq: $AnyInflateError\en";
\&    }
.Ve
.SH "OO Interface"
.IX Header "OO Interface"
.SS "Constructor"
.IX Subsection "Constructor"
The format of the constructor for IO::Uncompress::AnyInflate is shown below
.PP
.Vb 2
\&    my $z = new IO::Uncompress::AnyInflate $input [OPTS]
\&        or die "IO::Uncompress::AnyInflate failed: $AnyInflateError\en";
.Ve
.PP
Returns an \f(CW\*(C`IO::Uncompress::AnyInflate\*(C'\fR object on success and undef on failure.
The variable \f(CW$AnyInflateError\fR will contain an error message on failure.
.PP
If you are running Perl 5.005 or better the object, \f(CW$z\fR, returned from
IO::Uncompress::AnyInflate can be used exactly like an IO::File filehandle.
This means that all normal input file operations can be carried out with
\&\f(CW$z\fR.  For example, to read a line from a compressed file/buffer you can
use either of these forms
.PP
.Vb 2
\&    $line = $z\->getline();
\&    $line = <$z>;
.Ve
.PP
The mandatory parameter \f(CW$input\fR is used to determine the source of the
compressed data. This parameter can take one of three forms.
.IP "A filename" 5
.IX Item "A filename"
If the \f(CW$input\fR parameter is a scalar, it is assumed to be a filename. This
file will be opened for reading and the compressed data will be read from it.
.IP "A filehandle" 5
.IX Item "A filehandle"
If the \f(CW$input\fR parameter is a filehandle, the compressed data will be
read from it.
The string '\-' can be used as an alias for standard input.
.IP "A scalar reference" 5
.IX Item "A scalar reference"
If \f(CW$input\fR is a scalar reference, the compressed data will be read from
\&\f(CW$$input\fR.
.SS "Constructor Options"
.IX Subsection "Constructor Options"
The option names defined below are case insensitive and can be optionally
prefixed by a '\-'.  So all of the following are valid
.PP
.Vb 4
\&    \-AutoClose
\&    \-autoclose
\&    AUTOCLOSE
\&    autoclose
.Ve
.PP
\&\s-1OPTS\s0 is a combination of the following options:
.ie n .IP """AutoClose => 0|1""" 5
.el .IP "\f(CWAutoClose => 0|1\fR" 5
.IX Item "AutoClose => 0|1"
This option is only valid when the \f(CW$input\fR parameter is a filehandle. If
specified, and the value is true, it will result in the file being closed once
either the \f(CW\*(C`close\*(C'\fR method is called or the IO::Uncompress::AnyInflate object is
destroyed.
.Sp
This parameter defaults to 0.
.ie n .IP """MultiStream => 0|1""" 5
.el .IP "\f(CWMultiStream => 0|1\fR" 5
.IX Item "MultiStream => 0|1"
Allows multiple concatenated compressed streams to be treated as a single
compressed stream. Decompression will stop once either the end of the
file/buffer is reached, an error is encountered (premature eof, corrupt
compressed data) or the end of a stream is not immediately followed by the
start of another stream.
.Sp
This parameter defaults to 0.
.ie n .IP """Prime => $string""" 5
.el .IP "\f(CWPrime => $string\fR" 5
.IX Item "Prime => $string"
This option will uncompress the contents of \f(CW$string\fR before processing the
input file/buffer.
.Sp
This option can be useful when the compressed data is embedded in another
file/data structure and it is not possible to work out where the compressed
data begins without having to read the first few bytes. If this is the
case, the uncompression can be \fIprimed\fR with these bytes using this
option.
.ie n .IP """Transparent => 0|1""" 5
.el .IP "\f(CWTransparent => 0|1\fR" 5
.IX Item "Transparent => 0|1"
If this option is set and the input file/buffer is not compressed data,
the module will allow reading of it anyway.
.Sp
In addition, if the input file/buffer does contain compressed data and
there is non-compressed data immediately following it, setting this option
will make this module treat the whole file/buffer as a single data stream.
.Sp
This option defaults to 1.
.ie n .IP """BlockSize => $num""" 5
.el .IP "\f(CWBlockSize => $num\fR" 5
.IX Item "BlockSize => $num"
When reading the compressed input data, IO::Uncompress::AnyInflate will read it in
blocks of \f(CW$num\fR bytes.
.Sp
This option defaults to 4096.
.ie n .IP """InputLength => $size""" 5
.el .IP "\f(CWInputLength => $size\fR" 5
.IX Item "InputLength => $size"
When present this option will limit the number of compressed bytes read
from the input file/buffer to \f(CW$size\fR. This option can be used in the
situation where there is useful data directly after the compressed data
stream and you know beforehand the exact length of the compressed data
stream.
.Sp
This option is mostly used when reading from a filehandle, in which case
the file pointer will be left pointing to the first byte directly after the
compressed data stream.
.Sp
This option defaults to off.
.ie n .IP """Append => 0|1""" 5
.el .IP "\f(CWAppend => 0|1\fR" 5
.IX Item "Append => 0|1"
This option controls what the \f(CW\*(C`read\*(C'\fR method does with uncompressed data.
.Sp
If set to 1, all uncompressed data will be appended to the output parameter
of the \f(CW\*(C`read\*(C'\fR method.
.Sp
If set to 0, the contents of the output parameter of the \f(CW\*(C`read\*(C'\fR method
will be overwritten by the uncompressed data.
.Sp
Defaults to 0.
.ie n .IP """Strict => 0|1""" 5
.el .IP "\f(CWStrict => 0|1\fR" 5
.IX Item "Strict => 0|1"
This option controls whether the extra checks defined below are used when
carrying out the decompression. When Strict is on, the extra tests are
carried out, when Strict is off they are not.
.Sp
The default for this option is off.
.Sp
If the input is an \s-1RFC 1950\s0 data stream, the following will be checked:
.RS 5
.IP "1." 5
The \s-1ADLER32\s0 checksum field must be present.
.IP "2." 5
The value of the \s-1ADLER32\s0 field read must match the adler32 value of the
uncompressed data actually contained in the file.
.RE
.RS 5
.Sp
If the input is a gzip (\s-1RFC 1952\s0) data stream, the following will be checked:
.IP "1." 5
If the \s-1FHCRC\s0 bit is set in the gzip \s-1FLG\s0 header byte, the \s-1CRC16\s0 bytes in the
header must match the crc16 value of the gzip header actually read.
.IP "2." 5
If the gzip header contains a name field (\s-1FNAME\s0) it consists solely of \s-1ISO
8859\-1\s0 characters.
.IP "3." 5
If the gzip header contains a comment field (\s-1FCOMMENT\s0) it consists solely
of \s-1ISO 8859\-1\s0 characters plus line-feed.
.IP "4." 5
If the gzip \s-1FEXTRA\s0 header field is present it must conform to the sub-field
structure as defined in \s-1RFC 1952.\s0
.IP "5." 5
The \s-1CRC32\s0 and \s-1ISIZE\s0 trailer fields must be present.
.IP "6." 5
The value of the \s-1CRC32\s0 field read must match the crc32 value of the
uncompressed data actually contained in the gzip file.
.IP "7." 5
The value of the \s-1ISIZE\s0 fields read must match the length of the
uncompressed data actually read from the file.
.RE
.RS 5
.RE
.ie n .IP """RawInflate => 0|1""" 5
.el .IP "\f(CWRawInflate => 0|1\fR" 5
.IX Item "RawInflate => 0|1"
When auto-detecting the compressed format, try to test for raw-deflate (\s-1RFC
1951\s0) content using the \f(CW\*(C`IO::Uncompress::RawInflate\*(C'\fR module.
.Sp
The reason this is not default behaviour is because \s-1RFC 1951\s0 content can
only be detected by attempting to uncompress it. This process is error
prone and can result is false positives.
.Sp
Defaults to 0.
.ie n .IP """ParseExtra => 0|1"" If the gzip \s-1FEXTRA\s0 header field is present and this option is set, it will force the module to check that it conforms to the sub-field structure as defined in \s-1RFC 1952.\s0" 5
.el .IP "\f(CWParseExtra => 0|1\fR If the gzip \s-1FEXTRA\s0 header field is present and this option is set, it will force the module to check that it conforms to the sub-field structure as defined in \s-1RFC 1952.\s0" 5
.IX Item "ParseExtra => 0|1 If the gzip FEXTRA header field is present and this option is set, it will force the module to check that it conforms to the sub-field structure as defined in RFC 1952."
If the \f(CW\*(C`Strict\*(C'\fR is on it will automatically enable this option.
.Sp
Defaults to 0.
.SS "Examples"
.IX Subsection "Examples"
\&\s-1TODO\s0
.SH "Methods"
.IX Header "Methods"
.SS "read"
.IX Subsection "read"
Usage is
.PP
.Vb 1
\&    $status = $z\->read($buffer)
.Ve
.PP
Reads a block of compressed data (the size the the compressed block is
determined by the \f(CW\*(C`Buffer\*(C'\fR option in the constructor), uncompresses it and
writes any uncompressed data into \f(CW$buffer\fR. If the \f(CW\*(C`Append\*(C'\fR parameter is
set in the constructor, the uncompressed data will be appended to the
\&\f(CW$buffer\fR parameter. Otherwise \f(CW$buffer\fR will be overwritten.
.PP
Returns the number of uncompressed bytes written to \f(CW$buffer\fR, zero if eof
or a negative number on error.
.SS "read"
.IX Subsection "read"
Usage is
.PP
.Vb 2
\&    $status = $z\->read($buffer, $length)
\&    $status = $z\->read($buffer, $length, $offset)
\&
\&    $status = read($z, $buffer, $length)
\&    $status = read($z, $buffer, $length, $offset)
.Ve
.PP
Attempt to read \f(CW$length\fR bytes of uncompressed data into \f(CW$buffer\fR.
.PP
The main difference between this form of the \f(CW\*(C`read\*(C'\fR method and the
previous one, is that this one will attempt to return \fIexactly\fR \f(CW$length\fR
bytes. The only circumstances that this function will not is if end-of-file
or an \s-1IO\s0 error is encountered.
.PP
Returns the number of uncompressed bytes written to \f(CW$buffer\fR, zero if eof
or a negative number on error.
.SS "getline"
.IX Subsection "getline"
Usage is
.PP
.Vb 2
\&    $line = $z\->getline()
\&    $line = <$z>
.Ve
.PP
Reads a single line.
.PP
This method fully supports the use of of the variable \f(CW$/\fR (or
\&\f(CW$INPUT_RECORD_SEPARATOR\fR or \f(CW$RS\fR when \f(CW\*(C`English\*(C'\fR is in use) to
determine what constitutes an end of line. Paragraph mode, record mode and
file slurp mode are all supported.
.SS "getc"
.IX Subsection "getc"
Usage is
.PP
.Vb 1
\&    $char = $z\->getc()
.Ve
.PP
Read a single character.
.SS "ungetc"
.IX Subsection "ungetc"
Usage is
.PP
.Vb 1
\&    $char = $z\->ungetc($string)
.Ve
.SS "inflateSync"
.IX Subsection "inflateSync"
Usage is
.PP
.Vb 1
\&    $status = $z\->inflateSync()
.Ve
.PP
\&\s-1TODO\s0
.SS "getHeaderInfo"
.IX Subsection "getHeaderInfo"
Usage is
.PP
.Vb 2
\&    $hdr  = $z\->getHeaderInfo();
\&    @hdrs = $z\->getHeaderInfo();
.Ve
.PP
This method returns either a hash reference (in scalar context) or a list
or hash references (in array context) that contains information about each
of the header fields in the compressed data stream(s).
.SS "tell"
.IX Subsection "tell"
Usage is
.PP
.Vb 2
\&    $z\->tell()
\&    tell $z
.Ve
.PP
Returns the uncompressed file offset.
.SS "eof"
.IX Subsection "eof"
Usage is
.PP
.Vb 2
\&    $z\->eof();
\&    eof($z);
.Ve
.PP
Returns true if the end of the compressed input stream has been reached.
.SS "seek"
.IX Subsection "seek"
.Vb 2
\&    $z\->seek($position, $whence);
\&    seek($z, $position, $whence);
.Ve
.PP
Provides a sub-set of the \f(CW\*(C`seek\*(C'\fR functionality, with the restriction
that it is only legal to seek forward in the input file/buffer.
It is a fatal error to attempt to seek backward.
.PP
Note that the implementation of \f(CW\*(C`seek\*(C'\fR in this module does not provide
true random access to a compressed file/buffer. It  works by uncompressing
data from the current offset in the file/buffer until it reaches the
ucompressed offset specified in the parameters to \f(CW\*(C`seek\*(C'\fR. For very small
files this may be acceptable behaviour. For large files it may cause an
unacceptable delay.
.PP
The \f(CW$whence\fR parameter takes one the usual values, namely \s-1SEEK_SET,
SEEK_CUR\s0 or \s-1SEEK_END.\s0
.PP
Returns 1 on success, 0 on failure.
.SS "binmode"
.IX Subsection "binmode"
Usage is
.PP
.Vb 2
\&    $z\->binmode
\&    binmode $z ;
.Ve
.PP
This is a noop provided for completeness.
.SS "opened"
.IX Subsection "opened"
.Vb 1
\&    $z\->opened()
.Ve
.PP
Returns true if the object currently refers to a opened file/buffer.
.SS "autoflush"
.IX Subsection "autoflush"
.Vb 2
\&    my $prev = $z\->autoflush()
\&    my $prev = $z\->autoflush(EXPR)
.Ve
.PP
If the \f(CW$z\fR object is associated with a file or a filehandle, this method
returns the current autoflush setting for the underlying filehandle. If
\&\f(CW\*(C`EXPR\*(C'\fR is present, and is non-zero, it will enable flushing after every
write/print operation.
.PP
If \f(CW$z\fR is associated with a buffer, this method has no effect and always
returns \f(CW\*(C`undef\*(C'\fR.
.PP
\&\fBNote\fR that the special variable \f(CW$|\fR \fBcannot\fR be used to set or
retrieve the autoflush setting.
.SS "input_line_number"
.IX Subsection "input_line_number"
.Vb 2
\&    $z\->input_line_number()
\&    $z\->input_line_number(EXPR)
.Ve
.PP
Returns the current uncompressed line number. If \f(CW\*(C`EXPR\*(C'\fR is present it has
the effect of setting the line number. Note that setting the line number
does not change the current position within the file/buffer being read.
.PP
The contents of \f(CW$/\fR are used to to determine what constitutes a line
terminator.
.SS "fileno"
.IX Subsection "fileno"
.Vb 2
\&    $z\->fileno()
\&    fileno($z)
.Ve
.PP
If the \f(CW$z\fR object is associated with a file or a filehandle, \f(CW\*(C`fileno\*(C'\fR
will return the underlying file descriptor. Once the \f(CW\*(C`close\*(C'\fR method is
called \f(CW\*(C`fileno\*(C'\fR will return \f(CW\*(C`undef\*(C'\fR.
.PP
If the \f(CW$z\fR object is associated with a buffer, this method will return
\&\f(CW\*(C`undef\*(C'\fR.
.SS "close"
.IX Subsection "close"
.Vb 2
\&    $z\->close() ;
\&    close $z ;
.Ve
.PP
Closes the output file/buffer.
.PP
For most versions of Perl this method will be automatically invoked if
the IO::Uncompress::AnyInflate object is destroyed (either explicitly or by the
variable with the reference to the object going out of scope). The
exceptions are Perl versions 5.005 through 5.00504 and 5.8.0. In
these cases, the \f(CW\*(C`close\*(C'\fR method will be called automatically, but
not until global destruction of all live objects when the program is
terminating.
.PP
Therefore, if you want your scripts to be able to run on all versions
of Perl, you should call \f(CW\*(C`close\*(C'\fR explicitly and not rely on automatic
closing.
.PP
Returns true on success, otherwise 0.
.PP
If the \f(CW\*(C`AutoClose\*(C'\fR option has been enabled when the IO::Uncompress::AnyInflate
object was created, and the object is associated with a file, the
underlying file will also be closed.
.SS "nextStream"
.IX Subsection "nextStream"
Usage is
.PP
.Vb 1
\&    my $status = $z\->nextStream();
.Ve
.PP
Skips to the next compressed data stream in the input file/buffer. If a new
compressed data stream is found, the eof marker will be cleared and \f(CW$.\fR
will be reset to 0.
.PP
Returns 1 if a new stream was found, 0 if none was found, and \-1 if an
error was encountered.
.SS "trailingData"
.IX Subsection "trailingData"
Usage is
.PP
.Vb 1
\&    my $data = $z\->trailingData();
.Ve
.PP
Returns the data, if any, that is present immediately after the compressed
data stream once uncompression is complete. It only makes sense to call
this method once the end of the compressed data stream has been
encountered.
.PP
This option can be used when there is useful information immediately
following the compressed data stream, and you don't know the length of the
compressed data stream.
.PP
If the input is a buffer, \f(CW\*(C`trailingData\*(C'\fR will return everything from the
end of the compressed data stream to the end of the buffer.
.PP
If the input is a filehandle, \f(CW\*(C`trailingData\*(C'\fR will return the data that is
left in the filehandle input buffer once the end of the compressed data
stream has been reached. You can then use the filehandle to read the rest
of the input file.
.PP
Don't bother using \f(CW\*(C`trailingData\*(C'\fR if the input is a filename.
.PP
If you know the length of the compressed data stream before you start
uncompressing, you can avoid having to use \f(CW\*(C`trailingData\*(C'\fR by setting the
\&\f(CW\*(C`InputLength\*(C'\fR option in the constructor.
.SH "Importing"
.IX Header "Importing"
No symbolic constants are required by this IO::Uncompress::AnyInflate at present.
.IP ":all" 5
.IX Item ":all"
Imports \f(CW\*(C`anyinflate\*(C'\fR and \f(CW$AnyInflateError\fR.
Same as doing this
.Sp
.Vb 1
\&    use IO::Uncompress::AnyInflate qw(anyinflate $AnyInflateError) ;
.Ve
.SH "EXAMPLES"
.IX Header "EXAMPLES"
.SS "Working with Net::FTP"
.IX Subsection "Working with Net::FTP"
See IO::Compress::FAQ
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Compress::Zlib, IO::Compress::Gzip, IO::Uncompress::Gunzip, IO::Compress::Deflate, IO::Uncompress::Inflate, IO::Compress::RawDeflate, IO::Uncompress::RawInflate, IO::Compress::Bzip2, IO::Uncompress::Bunzip2, IO::Compress::Lzma, IO::Uncompress::UnLzma, IO::Compress::Xz, IO::Uncompress::UnXz, IO::Compress::Lzop, IO::Uncompress::UnLzop, IO::Compress::Lzf, IO::Uncompress::UnLzf, IO::Uncompress::AnyUncompress
.PP
IO::Compress::FAQ
.PP
File::GlobMapper, Archive::Zip,
Archive::Tar,
IO::Zlib
.PP
For \s-1RFC 1950, 1951\s0 and 1952 see 
\&\fIhttp://www.faqs.org/rfcs/rfc1950.html\fR,
\&\fIhttp://www.faqs.org/rfcs/rfc1951.html\fR and
\&\fIhttp://www.faqs.org/rfcs/rfc1952.html\fR
.PP
The \fIzlib\fR compression library was written by Jean-loup Gailly
\&\fIgzip@prep.ai.mit.edu\fR and Mark Adler \fImadler@alumni.caltech.edu\fR.
.PP
The primary site for the \fIzlib\fR compression library is
\&\fIhttp://www.zlib.org\fR.
.PP
The primary site for gzip is \fIhttp://www.gzip.org\fR.
.SH "AUTHOR"
.IX Header "AUTHOR"
This module was written by Paul Marquess, \fIpmqs@cpan.org\fR.
.SH "MODIFICATION HISTORY"
.IX Header "MODIFICATION HISTORY"
See the Changes file.
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (c) 2005\-2013 Paul Marquess. All rights reserved.
.PP
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
                                                                                                                                                                                                                                                                                                                                                 osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/IO::Uncompress::AnyUncompress.3pm            0100644 0001750 0001750 00000077276 12566207456 027016  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "IO::Uncompress::AnyUncompress 3pm"
.TH IO::Uncompress::AnyUncompress 3pm "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
IO::Uncompress::AnyUncompress \- Uncompress gzip, zip, bzip2 or lzop file/buffer
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use IO::Uncompress::AnyUncompress qw(anyuncompress $AnyUncompressError) ;
\&
\&    my $status = anyuncompress $input => $output [,OPTS]
\&        or die "anyuncompress failed: $AnyUncompressError\en";
\&
\&    my $z = new IO::Uncompress::AnyUncompress $input [OPTS] 
\&        or die "anyuncompress failed: $AnyUncompressError\en";
\&
\&    $status = $z\->read($buffer)
\&    $status = $z\->read($buffer, $length)
\&    $status = $z\->read($buffer, $length, $offset)
\&    $line = $z\->getline()
\&    $char = $z\->getc()
\&    $char = $z\->ungetc()
\&    $char = $z\->opened()
\&
\&    $data = $z\->trailingData()
\&    $status = $z\->nextStream()
\&    $data = $z\->getHeaderInfo()
\&    $z\->tell()
\&    $z\->seek($position, $whence)
\&    $z\->binmode()
\&    $z\->fileno()
\&    $z\->eof()
\&    $z\->close()
\&
\&    $AnyUncompressError ;
\&
\&    # IO::File mode
\&
\&    <$z>
\&    read($z, $buffer);
\&    read($z, $buffer, $length);
\&    read($z, $buffer, $length, $offset);
\&    tell($z)
\&    seek($z, $position, $whence)
\&    binmode($z)
\&    fileno($z)
\&    eof($z)
\&    close($z)
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides a Perl interface that allows the reading of
files/buffers that have been compressed with a variety of compression
libraries.
.PP
The formats supported are:
.IP "\s-1RFC 1950\s0" 5
.IX Item "RFC 1950"
.PD 0
.IP "\s-1RFC 1951 \s0(optionally)" 5
.IX Item "RFC 1951 (optionally)"
.IP "gzip (\s-1RFC 1952\s0)" 5
.IX Item "gzip (RFC 1952)"
.IP "zip" 5
.IX Item "zip"
.IP "bzip2" 5
.IX Item "bzip2"
.IP "lzop" 5
.IX Item "lzop"
.IP "lzf" 5
.IX Item "lzf"
.IP "lzma" 5
.IX Item "lzma"
.IP "xz" 5
.IX Item "xz"
.PD
.PP
The module will auto-detect which, if any, of the supported
compression formats is being used.
.SH "Functional Interface"
.IX Header "Functional Interface"
A top-level function, \f(CW\*(C`anyuncompress\*(C'\fR, is provided to carry out
\&\*(L"one-shot\*(R" uncompression between buffers and/or files. For finer
control over the uncompression process, see the \*(L"\s-1OO\s0 Interface\*(R"
section.
.PP
.Vb 1
\&    use IO::Uncompress::AnyUncompress qw(anyuncompress $AnyUncompressError) ;
\&
\&    anyuncompress $input_filename_or_reference => $output_filename_or_reference [,OPTS] 
\&        or die "anyuncompress failed: $AnyUncompressError\en";
.Ve
.PP
The functional interface needs Perl5.005 or better.
.ie n .SS "anyuncompress $input => $output [, \s-1OPTS\s0]"
.el .SS "anyuncompress \f(CW$input\fP => \f(CW$output\fP [, \s-1OPTS\s0]"
.IX Subsection "anyuncompress $input => $output [, OPTS]"
\&\f(CW\*(C`anyuncompress\*(C'\fR expects at least two parameters,
\&\f(CW$input_filename_or_reference\fR and \f(CW$output_filename_or_reference\fR.
.PP
\fIThe \f(CI$input_filename_or_reference\fI parameter\fR
.IX Subsection "The $input_filename_or_reference parameter"
.PP
The parameter, \f(CW$input_filename_or_reference\fR, is used to define the
source of the compressed data.
.PP
It can take one of the following forms:
.IP "A filename" 5
.IX Item "A filename"
If the <$input_filename_or_reference> parameter is a simple scalar, it is
assumed to be a filename. This file will be opened for reading and the
input data will be read from it.
.IP "A filehandle" 5
.IX Item "A filehandle"
If the \f(CW$input_filename_or_reference\fR parameter is a filehandle, the input
data will be read from it.  The string '\-' can be used as an alias for
standard input.
.IP "A scalar reference" 5
.IX Item "A scalar reference"
If \f(CW$input_filename_or_reference\fR is a scalar reference, the input data
will be read from \f(CW$$input_filename_or_reference\fR.
.IP "An array reference" 5
.IX Item "An array reference"
If \f(CW$input_filename_or_reference\fR is an array reference, each element in
the array must be a filename.
.Sp
The input data will be read from each file in turn.
.Sp
The complete array will be walked to ensure that it only
contains valid filenames before any data is uncompressed.
.IP "An Input FileGlob string" 5
.IX Item "An Input FileGlob string"
If \f(CW$input_filename_or_reference\fR is a string that is delimited by the
characters \*(L"<\*(R" and \*(L">\*(R" \f(CW\*(C`anyuncompress\*(C'\fR will assume that it is an 
\&\fIinput fileglob string\fR. The input is the list of files that match the 
fileglob.
.Sp
See File::GlobMapper for more details.
.PP
If the \f(CW$input_filename_or_reference\fR parameter is any other type,
\&\f(CW\*(C`undef\*(C'\fR will be returned.
.PP
\fIThe \f(CI$output_filename_or_reference\fI parameter\fR
.IX Subsection "The $output_filename_or_reference parameter"
.PP
The parameter \f(CW$output_filename_or_reference\fR is used to control the
destination of the uncompressed data. This parameter can take one of
these forms.
.IP "A filename" 5
.IX Item "A filename"
If the \f(CW$output_filename_or_reference\fR parameter is a simple scalar, it is
assumed to be a filename.  This file will be opened for writing and the 
uncompressed data will be written to it.
.IP "A filehandle" 5
.IX Item "A filehandle"
If the \f(CW$output_filename_or_reference\fR parameter is a filehandle, the
uncompressed data will be written to it.  The string '\-' can be used as
an alias for standard output.
.IP "A scalar reference" 5
.IX Item "A scalar reference"
If \f(CW$output_filename_or_reference\fR is a scalar reference, the
uncompressed data will be stored in \f(CW$$output_filename_or_reference\fR.
.IP "An Array Reference" 5
.IX Item "An Array Reference"
If \f(CW$output_filename_or_reference\fR is an array reference, 
the uncompressed data will be pushed onto the array.
.IP "An Output FileGlob" 5
.IX Item "An Output FileGlob"
If \f(CW$output_filename_or_reference\fR is a string that is delimited by the
characters \*(L"<\*(R" and \*(L">\*(R" \f(CW\*(C`anyuncompress\*(C'\fR will assume that it is an
\&\fIoutput fileglob string\fR. The output is the list of files that match the
fileglob.
.Sp
When \f(CW$output_filename_or_reference\fR is an fileglob string,
\&\f(CW$input_filename_or_reference\fR must also be a fileglob string. Anything
else is an error.
.Sp
See File::GlobMapper for more details.
.PP
If the \f(CW$output_filename_or_reference\fR parameter is any other type,
\&\f(CW\*(C`undef\*(C'\fR will be returned.
.SS "Notes"
.IX Subsection "Notes"
When \f(CW$input_filename_or_reference\fR maps to multiple compressed
files/buffers and \f(CW$output_filename_or_reference\fR is
a single file/buffer, after uncompression \f(CW$output_filename_or_reference\fR will contain a
concatenation of all the uncompressed data from each of the input
files/buffers.
.SS "Optional Parameters"
.IX Subsection "Optional Parameters"
Unless specified below, the optional parameters for \f(CW\*(C`anyuncompress\*(C'\fR,
\&\f(CW\*(C`OPTS\*(C'\fR, are the same as those used with the \s-1OO\s0 interface defined in the
\&\*(L"Constructor Options\*(R" section below.
.ie n .IP """AutoClose => 0|1""" 5
.el .IP "\f(CWAutoClose => 0|1\fR" 5
.IX Item "AutoClose => 0|1"
This option applies to any input or output data streams to 
\&\f(CW\*(C`anyuncompress\*(C'\fR that are filehandles.
.Sp
If \f(CW\*(C`AutoClose\*(C'\fR is specified, and the value is true, it will result in all
input and/or output filehandles being closed once \f(CW\*(C`anyuncompress\*(C'\fR has
completed.
.Sp
This parameter defaults to 0.
.ie n .IP """BinModeOut => 0|1""" 5
.el .IP "\f(CWBinModeOut => 0|1\fR" 5
.IX Item "BinModeOut => 0|1"
When writing to a file or filehandle, set \f(CW\*(C`binmode\*(C'\fR before writing to the
file.
.Sp
Defaults to 0.
.ie n .IP """Append => 0|1""" 5
.el .IP "\f(CWAppend => 0|1\fR" 5
.IX Item "Append => 0|1"
The behaviour of this option is dependent on the type of output data
stream.
.RS 5
.IP "\(bu" 5
A Buffer
.Sp
If \f(CW\*(C`Append\*(C'\fR is enabled, all uncompressed data will be append to the end of
the output buffer. Otherwise the output buffer will be cleared before any
uncompressed data is written to it.
.IP "\(bu" 5
A Filename
.Sp
If \f(CW\*(C`Append\*(C'\fR is enabled, the file will be opened in append mode. Otherwise
the contents of the file, if any, will be truncated before any uncompressed
data is written to it.
.IP "\(bu" 5
A Filehandle
.Sp
If \f(CW\*(C`Append\*(C'\fR is enabled, the filehandle will be positioned to the end of
the file via a call to \f(CW\*(C`seek\*(C'\fR before any uncompressed data is
written to it.  Otherwise the file pointer will not be moved.
.RE
.RS 5
.Sp
When \f(CW\*(C`Append\*(C'\fR is specified, and set to true, it will \fIappend\fR all uncompressed 
data to the output data stream.
.Sp
So when the output is a filehandle it will carry out a seek to the eof
before writing any uncompressed data. If the output is a filename, it will be opened for
appending. If the output is a buffer, all uncompressed data will be
appended to the existing buffer.
.Sp
Conversely when \f(CW\*(C`Append\*(C'\fR is not specified, or it is present and is set to
false, it will operate as follows.
.Sp
When the output is a filename, it will truncate the contents of the file
before writing any uncompressed data. If the output is a filehandle
its position will not be changed. If the output is a buffer, it will be
wiped before any uncompressed data is output.
.Sp
Defaults to 0.
.RE
.ie n .IP """MultiStream => 0|1""" 5
.el .IP "\f(CWMultiStream => 0|1\fR" 5
.IX Item "MultiStream => 0|1"
If the input file/buffer contains multiple compressed data streams, this
option will uncompress the whole lot as a single data stream.
.Sp
Defaults to 0.
.ie n .IP """TrailingData => $scalar""" 5
.el .IP "\f(CWTrailingData => $scalar\fR" 5
.IX Item "TrailingData => $scalar"
Returns the data, if any, that is present immediately after the compressed
data stream once uncompression is complete.
.Sp
This option can be used when there is useful information immediately
following the compressed data stream, and you don't know the length of the
compressed data stream.
.Sp
If the input is a buffer, \f(CW\*(C`trailingData\*(C'\fR will return everything from the
end of the compressed data stream to the end of the buffer.
.Sp
If the input is a filehandle, \f(CW\*(C`trailingData\*(C'\fR will return the data that is
left in the filehandle input buffer once the end of the compressed data
stream has been reached. You can then use the filehandle to read the rest
of the input file.
.Sp
Don't bother using \f(CW\*(C`trailingData\*(C'\fR if the input is a filename.
.Sp
If you know the length of the compressed data stream before you start
uncompressing, you can avoid having to use \f(CW\*(C`trailingData\*(C'\fR by setting the
\&\f(CW\*(C`InputLength\*(C'\fR option.
.SS "Examples"
.IX Subsection "Examples"
To read the contents of the file \f(CW\*(C`file1.txt.Compressed\*(C'\fR and write the
uncompressed data to the file \f(CW\*(C`file1.txt\*(C'\fR.
.PP
.Vb 3
\&    use strict ;
\&    use warnings ;
\&    use IO::Uncompress::AnyUncompress qw(anyuncompress $AnyUncompressError) ;
\&
\&    my $input = "file1.txt.Compressed";
\&    my $output = "file1.txt";
\&    anyuncompress $input => $output
\&        or die "anyuncompress failed: $AnyUncompressError\en";
.Ve
.PP
To read from an existing Perl filehandle, \f(CW$input\fR, and write the
uncompressed data to a buffer, \f(CW$buffer\fR.
.PP
.Vb 4
\&    use strict ;
\&    use warnings ;
\&    use IO::Uncompress::AnyUncompress qw(anyuncompress $AnyUncompressError) ;
\&    use IO::File ;
\&
\&    my $input = new IO::File "<file1.txt.Compressed"
\&        or die "Cannot open \*(Aqfile1.txt.Compressed\*(Aq: $!\en" ;
\&    my $buffer ;
\&    anyuncompress $input => \e$buffer 
\&        or die "anyuncompress failed: $AnyUncompressError\en";
.Ve
.PP
To uncompress all files in the directory \*(L"/my/home\*(R" that match \*(L"*.txt.Compressed\*(R" and store the compressed data in the same directory
.PP
.Vb 3
\&    use strict ;
\&    use warnings ;
\&    use IO::Uncompress::AnyUncompress qw(anyuncompress $AnyUncompressError) ;
\&
\&    anyuncompress \*(Aq</my/home/*.txt.Compressed>\*(Aq => \*(Aq</my/home/#1.txt>\*(Aq
\&        or die "anyuncompress failed: $AnyUncompressError\en";
.Ve
.PP
and if you want to compress each file one at a time, this will do the trick
.PP
.Vb 3
\&    use strict ;
\&    use warnings ;
\&    use IO::Uncompress::AnyUncompress qw(anyuncompress $AnyUncompressError) ;
\&
\&    for my $input ( glob "/my/home/*.txt.Compressed" )
\&    {
\&        my $output = $input;
\&        $output =~ s/.Compressed// ;
\&        anyuncompress $input => $output 
\&            or die "Error compressing \*(Aq$input\*(Aq: $AnyUncompressError\en";
\&    }
.Ve
.SH "OO Interface"
.IX Header "OO Interface"
.SS "Constructor"
.IX Subsection "Constructor"
The format of the constructor for IO::Uncompress::AnyUncompress is shown below
.PP
.Vb 2
\&    my $z = new IO::Uncompress::AnyUncompress $input [OPTS]
\&        or die "IO::Uncompress::AnyUncompress failed: $AnyUncompressError\en";
.Ve
.PP
Returns an \f(CW\*(C`IO::Uncompress::AnyUncompress\*(C'\fR object on success and undef on failure.
The variable \f(CW$AnyUncompressError\fR will contain an error message on failure.
.PP
If you are running Perl 5.005 or better the object, \f(CW$z\fR, returned from
IO::Uncompress::AnyUncompress can be used exactly like an IO::File filehandle.
This means that all normal input file operations can be carried out with
\&\f(CW$z\fR.  For example, to read a line from a compressed file/buffer you can
use either of these forms
.PP
.Vb 2
\&    $line = $z\->getline();
\&    $line = <$z>;
.Ve
.PP
The mandatory parameter \f(CW$input\fR is used to determine the source of the
compressed data. This parameter can take one of three forms.
.IP "A filename" 5
.IX Item "A filename"
If the \f(CW$input\fR parameter is a scalar, it is assumed to be a filename. This
file will be opened for reading and the compressed data will be read from it.
.IP "A filehandle" 5
.IX Item "A filehandle"
If the \f(CW$input\fR parameter is a filehandle, the compressed data will be
read from it.
The string '\-' can be used as an alias for standard input.
.IP "A scalar reference" 5
.IX Item "A scalar reference"
If \f(CW$input\fR is a scalar reference, the compressed data will be read from
\&\f(CW$$input\fR.
.SS "Constructor Options"
.IX Subsection "Constructor Options"
The option names defined below are case insensitive and can be optionally
prefixed by a '\-'.  So all of the following are valid
.PP
.Vb 4
\&    \-AutoClose
\&    \-autoclose
\&    AUTOCLOSE
\&    autoclose
.Ve
.PP
\&\s-1OPTS\s0 is a combination of the following options:
.ie n .IP """AutoClose => 0|1""" 5
.el .IP "\f(CWAutoClose => 0|1\fR" 5
.IX Item "AutoClose => 0|1"
This option is only valid when the \f(CW$input\fR parameter is a filehandle. If
specified, and the value is true, it will result in the file being closed once
either the \f(CW\*(C`close\*(C'\fR method is called or the IO::Uncompress::AnyUncompress object is
destroyed.
.Sp
This parameter defaults to 0.
.ie n .IP """MultiStream => 0|1""" 5
.el .IP "\f(CWMultiStream => 0|1\fR" 5
.IX Item "MultiStream => 0|1"
Allows multiple concatenated compressed streams to be treated as a single
compressed stream. Decompression will stop once either the end of the
file/buffer is reached, an error is encountered (premature eof, corrupt
compressed data) or the end of a stream is not immediately followed by the
start of another stream.
.Sp
This parameter defaults to 0.
.ie n .IP """Prime => $string""" 5
.el .IP "\f(CWPrime => $string\fR" 5
.IX Item "Prime => $string"
This option will uncompress the contents of \f(CW$string\fR before processing the
input file/buffer.
.Sp
This option can be useful when the compressed data is embedded in another
file/data structure and it is not possible to work out where the compressed
data begins without having to read the first few bytes. If this is the
case, the uncompression can be \fIprimed\fR with these bytes using this
option.
.ie n .IP """Transparent => 0|1""" 5
.el .IP "\f(CWTransparent => 0|1\fR" 5
.IX Item "Transparent => 0|1"
If this option is set and the input file/buffer is not compressed data,
the module will allow reading of it anyway.
.Sp
In addition, if the input file/buffer does contain compressed data and
there is non-compressed data immediately following it, setting this option
will make this module treat the whole file/buffer as a single data stream.
.Sp
This option defaults to 1.
.ie n .IP """BlockSize => $num""" 5
.el .IP "\f(CWBlockSize => $num\fR" 5
.IX Item "BlockSize => $num"
When reading the compressed input data, IO::Uncompress::AnyUncompress will read it in
blocks of \f(CW$num\fR bytes.
.Sp
This option defaults to 4096.
.ie n .IP """InputLength => $size""" 5
.el .IP "\f(CWInputLength => $size\fR" 5
.IX Item "InputLength => $size"
When present this option will limit the number of compressed bytes read
from the input file/buffer to \f(CW$size\fR. This option can be used in the
situation where there is useful data directly after the compressed data
stream and you know beforehand the exact length of the compressed data
stream.
.Sp
This option is mostly used when reading from a filehandle, in which case
the file pointer will be left pointing to the first byte directly after the
compressed data stream.
.Sp
This option defaults to off.
.ie n .IP """Append => 0|1""" 5
.el .IP "\f(CWAppend => 0|1\fR" 5
.IX Item "Append => 0|1"
This option controls what the \f(CW\*(C`read\*(C'\fR method does with uncompressed data.
.Sp
If set to 1, all uncompressed data will be appended to the output parameter
of the \f(CW\*(C`read\*(C'\fR method.
.Sp
If set to 0, the contents of the output parameter of the \f(CW\*(C`read\*(C'\fR method
will be overwritten by the uncompressed data.
.Sp
Defaults to 0.
.ie n .IP """Strict => 0|1""" 5
.el .IP "\f(CWStrict => 0|1\fR" 5
.IX Item "Strict => 0|1"
This option controls whether the extra checks defined below are used when
carrying out the decompression. When Strict is on, the extra tests are
carried out, when Strict is off they are not.
.Sp
The default for this option is off.
.ie n .IP """RawInflate => 0|1""" 5
.el .IP "\f(CWRawInflate => 0|1\fR" 5
.IX Item "RawInflate => 0|1"
When auto-detecting the compressed format, try to test for raw-deflate (\s-1RFC
1951\s0) content using the \f(CW\*(C`IO::Uncompress::RawInflate\*(C'\fR module.
.Sp
The reason this is not default behaviour is because \s-1RFC 1951\s0 content can
only be detected by attempting to uncompress it. This process is error
prone and can result is false positives.
.Sp
Defaults to 0.
.ie n .IP """UnLzma => 0|1""" 5
.el .IP "\f(CWUnLzma => 0|1\fR" 5
.IX Item "UnLzma => 0|1"
When auto-detecting the compressed format, try to test for lzma_alone
content using the \f(CW\*(C`IO::Uncompress::UnLzma\*(C'\fR module.
.Sp
The reason this is not default behaviour is because lzma_alone content can
only be detected by attempting to uncompress it. This process is error
prone and can result is false positives.
.Sp
Defaults to 0.
.SS "Examples"
.IX Subsection "Examples"
\&\s-1TODO\s0
.SH "Methods"
.IX Header "Methods"
.SS "read"
.IX Subsection "read"
Usage is
.PP
.Vb 1
\&    $status = $z\->read($buffer)
.Ve
.PP
Reads a block of compressed data (the size the the compressed block is
determined by the \f(CW\*(C`Buffer\*(C'\fR option in the constructor), uncompresses it and
writes any uncompressed data into \f(CW$buffer\fR. If the \f(CW\*(C`Append\*(C'\fR parameter is
set in the constructor, the uncompressed data will be appended to the
\&\f(CW$buffer\fR parameter. Otherwise \f(CW$buffer\fR will be overwritten.
.PP
Returns the number of uncompressed bytes written to \f(CW$buffer\fR, zero if eof
or a negative number on error.
.SS "read"
.IX Subsection "read"
Usage is
.PP
.Vb 2
\&    $status = $z\->read($buffer, $length)
\&    $status = $z\->read($buffer, $length, $offset)
\&
\&    $status = read($z, $buffer, $length)
\&    $status = read($z, $buffer, $length, $offset)
.Ve
.PP
Attempt to read \f(CW$length\fR bytes of uncompressed data into \f(CW$buffer\fR.
.PP
The main difference between this form of the \f(CW\*(C`read\*(C'\fR method and the
previous one, is that this one will attempt to return \fIexactly\fR \f(CW$length\fR
bytes. The only circumstances that this function will not is if end-of-file
or an \s-1IO\s0 error is encountered.
.PP
Returns the number of uncompressed bytes written to \f(CW$buffer\fR, zero if eof
or a negative number on error.
.SS "getline"
.IX Subsection "getline"
Usage is
.PP
.Vb 2
\&    $line = $z\->getline()
\&    $line = <$z>
.Ve
.PP
Reads a single line.
.PP
This method fully supports the use of of the variable \f(CW$/\fR (or
\&\f(CW$INPUT_RECORD_SEPARATOR\fR or \f(CW$RS\fR when \f(CW\*(C`English\*(C'\fR is in use) to
determine what constitutes an end of line. Paragraph mode, record mode and
file slurp mode are all supported.
.SS "getc"
.IX Subsection "getc"
Usage is
.PP
.Vb 1
\&    $char = $z\->getc()
.Ve
.PP
Read a single character.
.SS "ungetc"
.IX Subsection "ungetc"
Usage is
.PP
.Vb 1
\&    $char = $z\->ungetc($string)
.Ve
.SS "getHeaderInfo"
.IX Subsection "getHeaderInfo"
Usage is
.PP
.Vb 2
\&    $hdr  = $z\->getHeaderInfo();
\&    @hdrs = $z\->getHeaderInfo();
.Ve
.PP
This method returns either a hash reference (in scalar context) or a list
or hash references (in array context) that contains information about each
of the header fields in the compressed data stream(s).
.SS "tell"
.IX Subsection "tell"
Usage is
.PP
.Vb 2
\&    $z\->tell()
\&    tell $z
.Ve
.PP
Returns the uncompressed file offset.
.SS "eof"
.IX Subsection "eof"
Usage is
.PP
.Vb 2
\&    $z\->eof();
\&    eof($z);
.Ve
.PP
Returns true if the end of the compressed input stream has been reached.
.SS "seek"
.IX Subsection "seek"
.Vb 2
\&    $z\->seek($position, $whence);
\&    seek($z, $position, $whence);
.Ve
.PP
Provides a sub-set of the \f(CW\*(C`seek\*(C'\fR functionality, with the restriction
that it is only legal to seek forward in the input file/buffer.
It is a fatal error to attempt to seek backward.
.PP
Note that the implementation of \f(CW\*(C`seek\*(C'\fR in this module does not provide
true random access to a compressed file/buffer. It  works by uncompressing
data from the current offset in the file/buffer until it reaches the
ucompressed offset specified in the parameters to \f(CW\*(C`seek\*(C'\fR. For very small
files this may be acceptable behaviour. For large files it may cause an
unacceptable delay.
.PP
The \f(CW$whence\fR parameter takes one the usual values, namely \s-1SEEK_SET,
SEEK_CUR\s0 or \s-1SEEK_END.\s0
.PP
Returns 1 on success, 0 on failure.
.SS "binmode"
.IX Subsection "binmode"
Usage is
.PP
.Vb 2
\&    $z\->binmode
\&    binmode $z ;
.Ve
.PP
This is a noop provided for completeness.
.SS "opened"
.IX Subsection "opened"
.Vb 1
\&    $z\->opened()
.Ve
.PP
Returns true if the object currently refers to a opened file/buffer.
.SS "autoflush"
.IX Subsection "autoflush"
.Vb 2
\&    my $prev = $z\->autoflush()
\&    my $prev = $z\->autoflush(EXPR)
.Ve
.PP
If the \f(CW$z\fR object is associated with a file or a filehandle, this method
returns the current autoflush setting for the underlying filehandle. If
\&\f(CW\*(C`EXPR\*(C'\fR is present, and is non-zero, it will enable flushing after every
write/print operation.
.PP
If \f(CW$z\fR is associated with a buffer, this method has no effect and always
returns \f(CW\*(C`undef\*(C'\fR.
.PP
\&\fBNote\fR that the special variable \f(CW$|\fR \fBcannot\fR be used to set or
retrieve the autoflush setting.
.SS "input_line_number"
.IX Subsection "input_line_number"
.Vb 2
\&    $z\->input_line_number()
\&    $z\->input_line_number(EXPR)
.Ve
.PP
Returns the current uncompressed line number. If \f(CW\*(C`EXPR\*(C'\fR is present it has
the effect of setting the line number. Note that setting the line number
does not change the current position within the file/buffer being read.
.PP
The contents of \f(CW$/\fR are used to to determine what constitutes a line
terminator.
.SS "fileno"
.IX Subsection "fileno"
.Vb 2
\&    $z\->fileno()
\&    fileno($z)
.Ve
.PP
If the \f(CW$z\fR object is associated with a file or a filehandle, \f(CW\*(C`fileno\*(C'\fR
will return the underlying file descriptor. Once the \f(CW\*(C`close\*(C'\fR method is
called \f(CW\*(C`fileno\*(C'\fR will return \f(CW\*(C`undef\*(C'\fR.
.PP
If the \f(CW$z\fR object is associated with a buffer, this method will return
\&\f(CW\*(C`undef\*(C'\fR.
.SS "close"
.IX Subsection "close"
.Vb 2
\&    $z\->close() ;
\&    close $z ;
.Ve
.PP
Closes the output file/buffer.
.PP
For most versions of Perl this method will be automatically invoked if
the IO::Uncompress::AnyUncompress object is destroyed (either explicitly or by the
variable with the reference to the object going out of scope). The
exceptions are Perl versions 5.005 through 5.00504 and 5.8.0. In
these cases, the \f(CW\*(C`close\*(C'\fR method will be called automatically, but
not until global destruction of all live objects when the program is
terminating.
.PP
Therefore, if you want your scripts to be able to run on all versions
of Perl, you should call \f(CW\*(C`close\*(C'\fR explicitly and not rely on automatic
closing.
.PP
Returns true on success, otherwise 0.
.PP
If the \f(CW\*(C`AutoClose\*(C'\fR option has been enabled when the IO::Uncompress::AnyUncompress
object was created, and the object is associated with a file, the
underlying file will also be closed.
.SS "nextStream"
.IX Subsection "nextStream"
Usage is
.PP
.Vb 1
\&    my $status = $z\->nextStream();
.Ve
.PP
Skips to the next compressed data stream in the input file/buffer. If a new
compressed data stream is found, the eof marker will be cleared and \f(CW$.\fR
will be reset to 0.
.PP
Returns 1 if a new stream was found, 0 if none was found, and \-1 if an
error was encountered.
.SS "trailingData"
.IX Subsection "trailingData"
Usage is
.PP
.Vb 1
\&    my $data = $z\->trailingData();
.Ve
.PP
Returns the data, if any, that is present immediately after the compressed
data stream once uncompression is complete. It only makes sense to call
this method once the end of the compressed data stream has been
encountered.
.PP
This option can be used when there is useful information immediately
following the compressed data stream, and you don't know the length of the
compressed data stream.
.PP
If the input is a buffer, \f(CW\*(C`trailingData\*(C'\fR will return everything from the
end of the compressed data stream to the end of the buffer.
.PP
If the input is a filehandle, \f(CW\*(C`trailingData\*(C'\fR will return the data that is
left in the filehandle input buffer once the end of the compressed data
stream has been reached. You can then use the filehandle to read the rest
of the input file.
.PP
Don't bother using \f(CW\*(C`trailingData\*(C'\fR if the input is a filename.
.PP
If you know the length of the compressed data stream before you start
uncompressing, you can avoid having to use \f(CW\*(C`trailingData\*(C'\fR by setting the
\&\f(CW\*(C`InputLength\*(C'\fR option in the constructor.
.SH "Importing"
.IX Header "Importing"
No symbolic constants are required by this IO::Uncompress::AnyUncompress at present.
.IP ":all" 5
.IX Item ":all"
Imports \f(CW\*(C`anyuncompress\*(C'\fR and \f(CW$AnyUncompressError\fR.
Same as doing this
.Sp
.Vb 1
\&    use IO::Uncompress::AnyUncompress qw(anyuncompress $AnyUncompressError) ;
.Ve
.SH "EXAMPLES"
.IX Header "EXAMPLES"
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Compress::Zlib, IO::Compress::Gzip, IO::Uncompress::Gunzip, IO::Compress::Deflate, IO::Uncompress::Inflate, IO::Compress::RawDeflate, IO::Uncompress::RawInflate, IO::Compress::Bzip2, IO::Uncompress::Bunzip2, IO::Compress::Lzma, IO::Uncompress::UnLzma, IO::Compress::Xz, IO::Uncompress::UnXz, IO::Compress::Lzop, IO::Uncompress::UnLzop, IO::Compress::Lzf, IO::Uncompress::UnLzf, IO::Uncompress::AnyInflate
.PP
IO::Compress::FAQ
.PP
File::GlobMapper, Archive::Zip,
Archive::Tar,
IO::Zlib
.SH "AUTHOR"
.IX Header "AUTHOR"
This module was written by Paul Marquess, \fIpmqs@cpan.org\fR.
.SH "MODIFICATION HISTORY"
.IX Header "MODIFICATION HISTORY"
See the Changes file.
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (c) 2005\-2013 Paul Marquess. All rights reserved.
.PP
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
                                                                                                                                                                                                                                                                                                                                  osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/IO::Uncompress::AnyUncompress5.16.3pm        0100644 0001750 0001750 00000074721 12566207435 027315  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "IO::Uncompress::AnyUncompress 3pm"
.TH IO::Uncompress::AnyUncompress 3pm "2013-03-04" "perl v5.16.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
IO::Uncompress::AnyUncompress \- Uncompress gzip, zip, bzip2 or lzop file/buffer
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use IO::Uncompress::AnyUncompress qw(anyuncompress $AnyUncompressError) ;
\&
\&    my $status = anyuncompress $input => $output [,OPTS]
\&        or die "anyuncompress failed: $AnyUncompressError\en";
\&
\&    my $z = new IO::Uncompress::AnyUncompress $input [OPTS] 
\&        or die "anyuncompress failed: $AnyUncompressError\en";
\&
\&    $status = $z\->read($buffer)
\&    $status = $z\->read($buffer, $length)
\&    $status = $z\->read($buffer, $length, $offset)
\&    $line = $z\->getline()
\&    $char = $z\->getc()
\&    $char = $z\->ungetc()
\&    $char = $z\->opened()
\&
\&    $data = $z\->trailingData()
\&    $status = $z\->nextStream()
\&    $data = $z\->getHeaderInfo()
\&    $z\->tell()
\&    $z\->seek($position, $whence)
\&    $z\->binmode()
\&    $z\->fileno()
\&    $z\->eof()
\&    $z\->close()
\&
\&    $AnyUncompressError ;
\&
\&    # IO::File mode
\&
\&    <$z>
\&    read($z, $buffer);
\&    read($z, $buffer, $length);
\&    read($z, $buffer, $length, $offset);
\&    tell($z)
\&    seek($z, $position, $whence)
\&    binmode($z)
\&    fileno($z)
\&    eof($z)
\&    close($z)
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides a Perl interface that allows the reading of
files/buffers that have been compressed with a variety of compression
libraries.
.PP
The formats supported are:
.IP "\s-1RFC\s0 1950" 5
.IX Item "RFC 1950"
.PD 0
.IP "\s-1RFC\s0 1951 (optionally)" 5
.IX Item "RFC 1951 (optionally)"
.IP "gzip (\s-1RFC\s0 1952)" 5
.IX Item "gzip (RFC 1952)"
.IP "zip" 5
.IX Item "zip"
.IP "bzip2" 5
.IX Item "bzip2"
.IP "lzop" 5
.IX Item "lzop"
.IP "lzf" 5
.IX Item "lzf"
.IP "lzma" 5
.IX Item "lzma"
.IP "xz" 5
.IX Item "xz"
.PD
.PP
The module will auto-detect which, if any, of the supported
compression formats is being used.
.SH "Functional Interface"
.IX Header "Functional Interface"
A top-level function, \f(CW\*(C`anyuncompress\*(C'\fR, is provided to carry out
\&\*(L"one-shot\*(R" uncompression between buffers and/or files. For finer
control over the uncompression process, see the \*(L"\s-1OO\s0 Interface\*(R"
section.
.PP
.Vb 1
\&    use IO::Uncompress::AnyUncompress qw(anyuncompress $AnyUncompressError) ;
\&
\&    anyuncompress $input => $output [,OPTS] 
\&        or die "anyuncompress failed: $AnyUncompressError\en";
.Ve
.PP
The functional interface needs Perl5.005 or better.
.ie n .SS "anyuncompress $input => $output [, \s-1OPTS\s0]"
.el .SS "anyuncompress \f(CW$input\fP => \f(CW$output\fP [, \s-1OPTS\s0]"
.IX Subsection "anyuncompress $input => $output [, OPTS]"
\&\f(CW\*(C`anyuncompress\*(C'\fR expects at least two parameters, \f(CW$input\fR and \f(CW$output\fR.
.PP
\fIThe \f(CI$input\fI parameter\fR
.IX Subsection "The $input parameter"
.PP
The parameter, \f(CW$input\fR, is used to define the source of
the compressed data.
.PP
It can take one of the following forms:
.IP "A filename" 5
.IX Item "A filename"
If the \f(CW$input\fR parameter is a simple scalar, it is assumed to be a
filename. This file will be opened for reading and the input data
will be read from it.
.IP "A filehandle" 5
.IX Item "A filehandle"
If the \f(CW$input\fR parameter is a filehandle, the input data will be
read from it.
The string '\-' can be used as an alias for standard input.
.IP "A scalar reference" 5
.IX Item "A scalar reference"
If \f(CW$input\fR is a scalar reference, the input data will be read
from \f(CW$$input\fR.
.IP "An array reference" 5
.IX Item "An array reference"
If \f(CW$input\fR is an array reference, each element in the array must be a
filename.
.Sp
The input data will be read from each file in turn.
.Sp
The complete array will be walked to ensure that it only
contains valid filenames before any data is uncompressed.
.IP "An Input FileGlob string" 5
.IX Item "An Input FileGlob string"
If \f(CW$input\fR is a string that is delimited by the characters \*(L"<\*(R" and \*(L">\*(R"
\&\f(CW\*(C`anyuncompress\*(C'\fR will assume that it is an \fIinput fileglob string\fR. The
input is the list of files that match the fileglob.
.Sp
See File::GlobMapper for more details.
.PP
If the \f(CW$input\fR parameter is any other type, \f(CW\*(C`undef\*(C'\fR will be returned.
.PP
\fIThe \f(CI$output\fI parameter\fR
.IX Subsection "The $output parameter"
.PP
The parameter \f(CW$output\fR is used to control the destination of the
uncompressed data. This parameter can take one of these forms.
.IP "A filename" 5
.IX Item "A filename"
If the \f(CW$output\fR parameter is a simple scalar, it is assumed to be a
filename.  This file will be opened for writing and the uncompressed
data will be written to it.
.IP "A filehandle" 5
.IX Item "A filehandle"
If the \f(CW$output\fR parameter is a filehandle, the uncompressed data
will be written to it.
The string '\-' can be used as an alias for standard output.
.IP "A scalar reference" 5
.IX Item "A scalar reference"
If \f(CW$output\fR is a scalar reference, the uncompressed data will be
stored in \f(CW$$output\fR.
.IP "An Array Reference" 5
.IX Item "An Array Reference"
If \f(CW$output\fR is an array reference, the uncompressed data will be
pushed onto the array.
.IP "An Output FileGlob" 5
.IX Item "An Output FileGlob"
If \f(CW$output\fR is a string that is delimited by the characters \*(L"<\*(R" and \*(L">\*(R"
\&\f(CW\*(C`anyuncompress\*(C'\fR will assume that it is an \fIoutput fileglob string\fR. The
output is the list of files that match the fileglob.
.Sp
When \f(CW$output\fR is an fileglob string, \f(CW$input\fR must also be a fileglob
string. Anything else is an error.
.Sp
See File::GlobMapper for more details.
.PP
If the \f(CW$output\fR parameter is any other type, \f(CW\*(C`undef\*(C'\fR will be returned.
.SS "Notes"
.IX Subsection "Notes"
When \f(CW$input\fR maps to multiple compressed files/buffers and \f(CW$output\fR is
a single file/buffer, after uncompression \f(CW$output\fR will contain a
concatenation of all the uncompressed data from each of the input
files/buffers.
.SS "Optional Parameters"
.IX Subsection "Optional Parameters"
Unless specified below, the optional parameters for \f(CW\*(C`anyuncompress\*(C'\fR,
\&\f(CW\*(C`OPTS\*(C'\fR, are the same as those used with the \s-1OO\s0 interface defined in the
\&\*(L"Constructor Options\*(R" section below.
.ie n .IP """AutoClose => 0|1""" 5
.el .IP "\f(CWAutoClose => 0|1\fR" 5
.IX Item "AutoClose => 0|1"
This option applies to any input or output data streams to 
\&\f(CW\*(C`anyuncompress\*(C'\fR that are filehandles.
.Sp
If \f(CW\*(C`AutoClose\*(C'\fR is specified, and the value is true, it will result in all
input and/or output filehandles being closed once \f(CW\*(C`anyuncompress\*(C'\fR has
completed.
.Sp
This parameter defaults to 0.
.ie n .IP """BinModeOut => 0|1""" 5
.el .IP "\f(CWBinModeOut => 0|1\fR" 5
.IX Item "BinModeOut => 0|1"
When writing to a file or filehandle, set \f(CW\*(C`binmode\*(C'\fR before writing to the
file.
.Sp
Defaults to 0.
.ie n .IP """Append => 0|1""" 5
.el .IP "\f(CWAppend => 0|1\fR" 5
.IX Item "Append => 0|1"
The behaviour of this option is dependent on the type of output data
stream.
.RS 5
.IP "\(bu" 5
A Buffer
.Sp
If \f(CW\*(C`Append\*(C'\fR is enabled, all uncompressed data will be append to the end of
the output buffer. Otherwise the output buffer will be cleared before any
uncompressed data is written to it.
.IP "\(bu" 5
A Filename
.Sp
If \f(CW\*(C`Append\*(C'\fR is enabled, the file will be opened in append mode. Otherwise
the contents of the file, if any, will be truncated before any uncompressed
data is written to it.
.IP "\(bu" 5
A Filehandle
.Sp
If \f(CW\*(C`Append\*(C'\fR is enabled, the filehandle will be positioned to the end of
the file via a call to \f(CW\*(C`seek\*(C'\fR before any uncompressed data is
written to it.  Otherwise the file pointer will not be moved.
.RE
.RS 5
.Sp
When \f(CW\*(C`Append\*(C'\fR is specified, and set to true, it will \fIappend\fR all uncompressed 
data to the output data stream.
.Sp
So when the output is a filehandle it will carry out a seek to the eof
before writing any uncompressed data. If the output is a filename, it will be opened for
appending. If the output is a buffer, all uncompressed data will be
appended to the existing buffer.
.Sp
Conversely when \f(CW\*(C`Append\*(C'\fR is not specified, or it is present and is set to
false, it will operate as follows.
.Sp
When the output is a filename, it will truncate the contents of the file
before writing any uncompressed data. If the output is a filehandle
its position will not be changed. If the output is a buffer, it will be
wiped before any uncompressed data is output.
.Sp
Defaults to 0.
.RE
.ie n .IP """MultiStream => 0|1""" 5
.el .IP "\f(CWMultiStream => 0|1\fR" 5
.IX Item "MultiStream => 0|1"
If the input file/buffer contains multiple compressed data streams, this
option will uncompress the whole lot as a single data stream.
.Sp
Defaults to 0.
.ie n .IP """TrailingData => $scalar""" 5
.el .IP "\f(CWTrailingData => $scalar\fR" 5
.IX Item "TrailingData => $scalar"
Returns the data, if any, that is present immediately after the compressed
data stream once uncompression is complete.
.Sp
This option can be used when there is useful information immediately
following the compressed data stream, and you don't know the length of the
compressed data stream.
.Sp
If the input is a buffer, \f(CW\*(C`trailingData\*(C'\fR will return everything from the
end of the compressed data stream to the end of the buffer.
.Sp
If the input is a filehandle, \f(CW\*(C`trailingData\*(C'\fR will return the data that is
left in the filehandle input buffer once the end of the compressed data
stream has been reached. You can then use the filehandle to read the rest
of the input file.
.Sp
Don't bother using \f(CW\*(C`trailingData\*(C'\fR if the input is a filename.
.Sp
If you know the length of the compressed data stream before you start
uncompressing, you can avoid having to use \f(CW\*(C`trailingData\*(C'\fR by setting the
\&\f(CW\*(C`InputLength\*(C'\fR option.
.SS "Examples"
.IX Subsection "Examples"
To read the contents of the file \f(CW\*(C`file1.txt.Compressed\*(C'\fR and write the
uncompressed data to the file \f(CW\*(C`file1.txt\*(C'\fR.
.PP
.Vb 3
\&    use strict ;
\&    use warnings ;
\&    use IO::Uncompress::AnyUncompress qw(anyuncompress $AnyUncompressError) ;
\&
\&    my $input = "file1.txt.Compressed";
\&    my $output = "file1.txt";
\&    anyuncompress $input => $output
\&        or die "anyuncompress failed: $AnyUncompressError\en";
.Ve
.PP
To read from an existing Perl filehandle, \f(CW$input\fR, and write the
uncompressed data to a buffer, \f(CW$buffer\fR.
.PP
.Vb 4
\&    use strict ;
\&    use warnings ;
\&    use IO::Uncompress::AnyUncompress qw(anyuncompress $AnyUncompressError) ;
\&    use IO::File ;
\&
\&    my $input = new IO::File "<file1.txt.Compressed"
\&        or die "Cannot open \*(Aqfile1.txt.Compressed\*(Aq: $!\en" ;
\&    my $buffer ;
\&    anyuncompress $input => \e$buffer 
\&        or die "anyuncompress failed: $AnyUncompressError\en";
.Ve
.PP
To uncompress all files in the directory \*(L"/my/home\*(R" that match \*(L"*.txt.Compressed\*(R" and store the compressed data in the same directory
.PP
.Vb 3
\&    use strict ;
\&    use warnings ;
\&    use IO::Uncompress::AnyUncompress qw(anyuncompress $AnyUncompressError) ;
\&
\&    anyuncompress \*(Aq</my/home/*.txt.Compressed>\*(Aq => \*(Aq</my/home/#1.txt>\*(Aq
\&        or die "anyuncompress failed: $AnyUncompressError\en";
.Ve
.PP
and if you want to compress each file one at a time, this will do the trick
.PP
.Vb 3
\&    use strict ;
\&    use warnings ;
\&    use IO::Uncompress::AnyUncompress qw(anyuncompress $AnyUncompressError) ;
\&
\&    for my $input ( glob "/my/home/*.txt.Compressed" )
\&    {
\&        my $output = $input;
\&        $output =~ s/.Compressed// ;
\&        anyuncompress $input => $output 
\&            or die "Error compressing \*(Aq$input\*(Aq: $AnyUncompressError\en";
\&    }
.Ve
.SH "OO Interface"
.IX Header "OO Interface"
.SS "Constructor"
.IX Subsection "Constructor"
The format of the constructor for IO::Uncompress::AnyUncompress is shown below
.PP
.Vb 2
\&    my $z = new IO::Uncompress::AnyUncompress $input [OPTS]
\&        or die "IO::Uncompress::AnyUncompress failed: $AnyUncompressError\en";
.Ve
.PP
Returns an \f(CW\*(C`IO::Uncompress::AnyUncompress\*(C'\fR object on success and undef on failure.
The variable \f(CW$AnyUncompressError\fR will contain an error message on failure.
.PP
If you are running Perl 5.005 or better the object, \f(CW$z\fR, returned from
IO::Uncompress::AnyUncompress can be used exactly like an IO::File filehandle.
This means that all normal input file operations can be carried out with
\&\f(CW$z\fR.  For example, to read a line from a compressed file/buffer you can
use either of these forms
.PP
.Vb 2
\&    $line = $z\->getline();
\&    $line = <$z>;
.Ve
.PP
The mandatory parameter \f(CW$input\fR is used to determine the source of the
compressed data. This parameter can take one of three forms.
.IP "A filename" 5
.IX Item "A filename"
If the \f(CW$input\fR parameter is a scalar, it is assumed to be a filename. This
file will be opened for reading and the compressed data will be read from it.
.IP "A filehandle" 5
.IX Item "A filehandle"
If the \f(CW$input\fR parameter is a filehandle, the compressed data will be
read from it.
The string '\-' can be used as an alias for standard input.
.IP "A scalar reference" 5
.IX Item "A scalar reference"
If \f(CW$input\fR is a scalar reference, the compressed data will be read from
\&\f(CW$$output\fR.
.SS "Constructor Options"
.IX Subsection "Constructor Options"
The option names defined below are case insensitive and can be optionally
prefixed by a '\-'.  So all of the following are valid
.PP
.Vb 4
\&    \-AutoClose
\&    \-autoclose
\&    AUTOCLOSE
\&    autoclose
.Ve
.PP
\&\s-1OPTS\s0 is a combination of the following options:
.ie n .IP """AutoClose => 0|1""" 5
.el .IP "\f(CWAutoClose => 0|1\fR" 5
.IX Item "AutoClose => 0|1"
This option is only valid when the \f(CW$input\fR parameter is a filehandle. If
specified, and the value is true, it will result in the file being closed once
either the \f(CW\*(C`close\*(C'\fR method is called or the IO::Uncompress::AnyUncompress object is
destroyed.
.Sp
This parameter defaults to 0.
.ie n .IP """MultiStream => 0|1""" 5
.el .IP "\f(CWMultiStream => 0|1\fR" 5
.IX Item "MultiStream => 0|1"
Allows multiple concatenated compressed streams to be treated as a single
compressed stream. Decompression will stop once either the end of the
file/buffer is reached, an error is encountered (premature eof, corrupt
compressed data) or the end of a stream is not immediately followed by the
start of another stream.
.Sp
This parameter defaults to 0.
.ie n .IP """Prime => $string""" 5
.el .IP "\f(CWPrime => $string\fR" 5
.IX Item "Prime => $string"
This option will uncompress the contents of \f(CW$string\fR before processing the
input file/buffer.
.Sp
This option can be useful when the compressed data is embedded in another
file/data structure and it is not possible to work out where the compressed
data begins without having to read the first few bytes. If this is the
case, the uncompression can be \fIprimed\fR with these bytes using this
option.
.ie n .IP """Transparent => 0|1""" 5
.el .IP "\f(CWTransparent => 0|1\fR" 5
.IX Item "Transparent => 0|1"
If this option is set and the input file/buffer is not compressed data,
the module will allow reading of it anyway.
.Sp
In addition, if the input file/buffer does contain compressed data and
there is non-compressed data immediately following it, setting this option
will make this module treat the whole file/buffer as a single data stream.
.Sp
This option defaults to 1.
.ie n .IP """BlockSize => $num""" 5
.el .IP "\f(CWBlockSize => $num\fR" 5
.IX Item "BlockSize => $num"
When reading the compressed input data, IO::Uncompress::AnyUncompress will read it in
blocks of \f(CW$num\fR bytes.
.Sp
This option defaults to 4096.
.ie n .IP """InputLength => $size""" 5
.el .IP "\f(CWInputLength => $size\fR" 5
.IX Item "InputLength => $size"
When present this option will limit the number of compressed bytes read
from the input file/buffer to \f(CW$size\fR. This option can be used in the
situation where there is useful data directly after the compressed data
stream and you know beforehand the exact length of the compressed data
stream.
.Sp
This option is mostly used when reading from a filehandle, in which case
the file pointer will be left pointing to the first byte directly after the
compressed data stream.
.Sp
This option defaults to off.
.ie n .IP """Append => 0|1""" 5
.el .IP "\f(CWAppend => 0|1\fR" 5
.IX Item "Append => 0|1"
This option controls what the \f(CW\*(C`read\*(C'\fR method does with uncompressed data.
.Sp
If set to 1, all uncompressed data will be appended to the output parameter
of the \f(CW\*(C`read\*(C'\fR method.
.Sp
If set to 0, the contents of the output parameter of the \f(CW\*(C`read\*(C'\fR method
will be overwritten by the uncompressed data.
.Sp
Defaults to 0.
.ie n .IP """Strict => 0|1""" 5
.el .IP "\f(CWStrict => 0|1\fR" 5
.IX Item "Strict => 0|1"
This option controls whether the extra checks defined below are used when
carrying out the decompression. When Strict is on, the extra tests are
carried out, when Strict is off they are not.
.Sp
The default for this option is off.
.ie n .IP """RawInflate => 0|1""" 5
.el .IP "\f(CWRawInflate => 0|1\fR" 5
.IX Item "RawInflate => 0|1"
When auto-detecting the compressed format, try to test for raw-deflate (\s-1RFC\s0
1951) content using the \f(CW\*(C`IO::Uncompress::RawInflate\*(C'\fR module.
.Sp
The reason this is not default behaviour is because \s-1RFC\s0 1951 content can
only be detected by attempting to uncompress it. This process is error
prone and can result is false positives.
.Sp
Defaults to 0.
.ie n .IP """UnLzma => 0|1""" 5
.el .IP "\f(CWUnLzma => 0|1\fR" 5
.IX Item "UnLzma => 0|1"
When auto-detecting the compressed format, try to test for lzma_alone
content using the \f(CW\*(C`IO::Uncompress::UnLzma\*(C'\fR module.
.Sp
The reason this is not default behaviour is because lzma_alone content can
only be detected by attempting to uncompress it. This process is error
prone and can result is false positives.
.Sp
Defaults to 0.
.SS "Examples"
.IX Subsection "Examples"
\&\s-1TODO\s0
.SH "Methods"
.IX Header "Methods"
.SS "read"
.IX Subsection "read"
Usage is
.PP
.Vb 1
\&    $status = $z\->read($buffer)
.Ve
.PP
Reads a block of compressed data (the size the the compressed block is
determined by the \f(CW\*(C`Buffer\*(C'\fR option in the constructor), uncompresses it and
writes any uncompressed data into \f(CW$buffer\fR. If the \f(CW\*(C`Append\*(C'\fR parameter is
set in the constructor, the uncompressed data will be appended to the
\&\f(CW$buffer\fR parameter. Otherwise \f(CW$buffer\fR will be overwritten.
.PP
Returns the number of uncompressed bytes written to \f(CW$buffer\fR, zero if eof
or a negative number on error.
.SS "read"
.IX Subsection "read"
Usage is
.PP
.Vb 2
\&    $status = $z\->read($buffer, $length)
\&    $status = $z\->read($buffer, $length, $offset)
\&
\&    $status = read($z, $buffer, $length)
\&    $status = read($z, $buffer, $length, $offset)
.Ve
.PP
Attempt to read \f(CW$length\fR bytes of uncompressed data into \f(CW$buffer\fR.
.PP
The main difference between this form of the \f(CW\*(C`read\*(C'\fR method and the
previous one, is that this one will attempt to return \fIexactly\fR \f(CW$length\fR
bytes. The only circumstances that this function will not is if end-of-file
or an \s-1IO\s0 error is encountered.
.PP
Returns the number of uncompressed bytes written to \f(CW$buffer\fR, zero if eof
or a negative number on error.
.SS "getline"
.IX Subsection "getline"
Usage is
.PP
.Vb 2
\&    $line = $z\->getline()
\&    $line = <$z>
.Ve
.PP
Reads a single line.
.PP
This method fully supports the use of of the variable \f(CW$/\fR (or
\&\f(CW$INPUT_RECORD_SEPARATOR\fR or \f(CW$RS\fR when \f(CW\*(C`English\*(C'\fR is in use) to
determine what constitutes an end of line. Paragraph mode, record mode and
file slurp mode are all supported.
.SS "getc"
.IX Subsection "getc"
Usage is
.PP
.Vb 1
\&    $char = $z\->getc()
.Ve
.PP
Read a single character.
.SS "ungetc"
.IX Subsection "ungetc"
Usage is
.PP
.Vb 1
\&    $char = $z\->ungetc($string)
.Ve
.SS "getHeaderInfo"
.IX Subsection "getHeaderInfo"
Usage is
.PP
.Vb 2
\&    $hdr  = $z\->getHeaderInfo();
\&    @hdrs = $z\->getHeaderInfo();
.Ve
.PP
This method returns either a hash reference (in scalar context) or a list
or hash references (in array context) that contains information about each
of the header fields in the compressed data stream(s).
.SS "tell"
.IX Subsection "tell"
Usage is
.PP
.Vb 2
\&    $z\->tell()
\&    tell $z
.Ve
.PP
Returns the uncompressed file offset.
.SS "eof"
.IX Subsection "eof"
Usage is
.PP
.Vb 2
\&    $z\->eof();
\&    eof($z);
.Ve
.PP
Returns true if the end of the compressed input stream has been reached.
.SS "seek"
.IX Subsection "seek"
.Vb 2
\&    $z\->seek($position, $whence);
\&    seek($z, $position, $whence);
.Ve
.PP
Provides a sub-set of the \f(CW\*(C`seek\*(C'\fR functionality, with the restriction
that it is only legal to seek forward in the input file/buffer.
It is a fatal error to attempt to seek backward.
.PP
The \f(CW$whence\fR parameter takes one the usual values, namely \s-1SEEK_SET\s0,
\&\s-1SEEK_CUR\s0 or \s-1SEEK_END\s0.
.PP
Returns 1 on success, 0 on failure.
.SS "binmode"
.IX Subsection "binmode"
Usage is
.PP
.Vb 2
\&    $z\->binmode
\&    binmode $z ;
.Ve
.PP
This is a noop provided for completeness.
.SS "opened"
.IX Subsection "opened"
.Vb 1
\&    $z\->opened()
.Ve
.PP
Returns true if the object currently refers to a opened file/buffer.
.SS "autoflush"
.IX Subsection "autoflush"
.Vb 2
\&    my $prev = $z\->autoflush()
\&    my $prev = $z\->autoflush(EXPR)
.Ve
.PP
If the \f(CW$z\fR object is associated with a file or a filehandle, this method
returns the current autoflush setting for the underlying filehandle. If
\&\f(CW\*(C`EXPR\*(C'\fR is present, and is non-zero, it will enable flushing after every
write/print operation.
.PP
If \f(CW$z\fR is associated with a buffer, this method has no effect and always
returns \f(CW\*(C`undef\*(C'\fR.
.PP
\&\fBNote\fR that the special variable \f(CW$|\fR \fBcannot\fR be used to set or
retrieve the autoflush setting.
.SS "input_line_number"
.IX Subsection "input_line_number"
.Vb 2
\&    $z\->input_line_number()
\&    $z\->input_line_number(EXPR)
.Ve
.PP
Returns the current uncompressed line number. If \f(CW\*(C`EXPR\*(C'\fR is present it has
the effect of setting the line number. Note that setting the line number
does not change the current position within the file/buffer being read.
.PP
The contents of \f(CW$/\fR are used to to determine what constitutes a line
terminator.
.SS "fileno"
.IX Subsection "fileno"
.Vb 2
\&    $z\->fileno()
\&    fileno($z)
.Ve
.PP
If the \f(CW$z\fR object is associated with a file or a filehandle, \f(CW\*(C`fileno\*(C'\fR
will return the underlying file descriptor. Once the \f(CW\*(C`close\*(C'\fR method is
called \f(CW\*(C`fileno\*(C'\fR will return \f(CW\*(C`undef\*(C'\fR.
.PP
If the \f(CW$z\fR object is associated with a buffer, this method will return
\&\f(CW\*(C`undef\*(C'\fR.
.SS "close"
.IX Subsection "close"
.Vb 2
\&    $z\->close() ;
\&    close $z ;
.Ve
.PP
Closes the output file/buffer.
.PP
For most versions of Perl this method will be automatically invoked if
the IO::Uncompress::AnyUncompress object is destroyed (either explicitly or by the
variable with the reference to the object going out of scope). The
exceptions are Perl versions 5.005 through 5.00504 and 5.8.0. In
these cases, the \f(CW\*(C`close\*(C'\fR method will be called automatically, but
not until global destruction of all live objects when the program is
terminating.
.PP
Therefore, if you want your scripts to be able to run on all versions
of Perl, you should call \f(CW\*(C`close\*(C'\fR explicitly and not rely on automatic
closing.
.PP
Returns true on success, otherwise 0.
.PP
If the \f(CW\*(C`AutoClose\*(C'\fR option has been enabled when the IO::Uncompress::AnyUncompress
object was created, and the object is associated with a file, the
underlying file will also be closed.
.SS "nextStream"
.IX Subsection "nextStream"
Usage is
.PP
.Vb 1
\&    my $status = $z\->nextStream();
.Ve
.PP
Skips to the next compressed data stream in the input file/buffer. If a new
compressed data stream is found, the eof marker will be cleared and \f(CW$.\fR
will be reset to 0.
.PP
Returns 1 if a new stream was found, 0 if none was found, and \-1 if an
error was encountered.
.SS "trailingData"
.IX Subsection "trailingData"
Usage is
.PP
.Vb 1
\&    my $data = $z\->trailingData();
.Ve
.PP
Returns the data, if any, that is present immediately after the compressed
data stream once uncompression is complete. It only makes sense to call
this method once the end of the compressed data stream has been
encountered.
.PP
This option can be used when there is useful information immediately
following the compressed data stream, and you don't know the length of the
compressed data stream.
.PP
If the input is a buffer, \f(CW\*(C`trailingData\*(C'\fR will return everything from the
end of the compressed data stream to the end of the buffer.
.PP
If the input is a filehandle, \f(CW\*(C`trailingData\*(C'\fR will return the data that is
left in the filehandle input buffer once the end of the compressed data
stream has been reached. You can then use the filehandle to read the rest
of the input file.
.PP
Don't bother using \f(CW\*(C`trailingData\*(C'\fR if the input is a filename.
.PP
If you know the length of the compressed data stream before you start
uncompressing, you can avoid having to use \f(CW\*(C`trailingData\*(C'\fR by setting the
\&\f(CW\*(C`InputLength\*(C'\fR option in the constructor.
.SH "Importing"
.IX Header "Importing"
No symbolic constants are required by this IO::Uncompress::AnyUncompress at present.
.IP ":all" 5
.IX Item ":all"
Imports \f(CW\*(C`anyuncompress\*(C'\fR and \f(CW$AnyUncompressError\fR.
Same as doing this
.Sp
.Vb 1
\&    use IO::Uncompress::AnyUncompress qw(anyuncompress $AnyUncompressError) ;
.Ve
.SH "EXAMPLES"
.IX Header "EXAMPLES"
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Compress::Zlib, IO::Compress::Gzip, IO::Uncompress::Gunzip, IO::Compress::Deflate, IO::Uncompress::Inflate, IO::Compress::RawDeflate, IO::Uncompress::RawInflate, IO::Compress::Bzip2, IO::Uncompress::Bunzip2, IO::Compress::Lzma, IO::Uncompress::UnLzma, IO::Compress::Xz, IO::Uncompress::UnXz, IO::Compress::Lzop, IO::Uncompress::UnLzop, IO::Compress::Lzf, IO::Uncompress::UnLzf, IO::Uncompress::AnyInflate
.PP
IO::Compress::FAQ
.PP
File::GlobMapper, Archive::Zip,
Archive::Tar,
IO::Zlib
.SH "AUTHOR"
.IX Header "AUTHOR"
This module was written by Paul Marquess, \fIpmqs@cpan.org\fR.
.SH "MODIFICATION HISTORY"
.IX Header "MODIFICATION HISTORY"
See the Changes file.
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (c) 2005\-2012 Paul Marquess. All rights reserved.
.PP
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
                                               osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/IO::Uncompress::AnyUncompress5.18.3pm        0100644 0001750 0001750 00000077276 12566207456 027332  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "IO::Uncompress::AnyUncompress 3pm"
.TH IO::Uncompress::AnyUncompress 3pm "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
IO::Uncompress::AnyUncompress \- Uncompress gzip, zip, bzip2 or lzop file/buffer
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use IO::Uncompress::AnyUncompress qw(anyuncompress $AnyUncompressError) ;
\&
\&    my $status = anyuncompress $input => $output [,OPTS]
\&        or die "anyuncompress failed: $AnyUncompressError\en";
\&
\&    my $z = new IO::Uncompress::AnyUncompress $input [OPTS] 
\&        or die "anyuncompress failed: $AnyUncompressError\en";
\&
\&    $status = $z\->read($buffer)
\&    $status = $z\->read($buffer, $length)
\&    $status = $z\->read($buffer, $length, $offset)
\&    $line = $z\->getline()
\&    $char = $z\->getc()
\&    $char = $z\->ungetc()
\&    $char = $z\->opened()
\&
\&    $data = $z\->trailingData()
\&    $status = $z\->nextStream()
\&    $data = $z\->getHeaderInfo()
\&    $z\->tell()
\&    $z\->seek($position, $whence)
\&    $z\->binmode()
\&    $z\->fileno()
\&    $z\->eof()
\&    $z\->close()
\&
\&    $AnyUncompressError ;
\&
\&    # IO::File mode
\&
\&    <$z>
\&    read($z, $buffer);
\&    read($z, $buffer, $length);
\&    read($z, $buffer, $length, $offset);
\&    tell($z)
\&    seek($z, $position, $whence)
\&    binmode($z)
\&    fileno($z)
\&    eof($z)
\&    close($z)
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides a Perl interface that allows the reading of
files/buffers that have been compressed with a variety of compression
libraries.
.PP
The formats supported are:
.IP "\s-1RFC 1950\s0" 5
.IX Item "RFC 1950"
.PD 0
.IP "\s-1RFC 1951 \s0(optionally)" 5
.IX Item "RFC 1951 (optionally)"
.IP "gzip (\s-1RFC 1952\s0)" 5
.IX Item "gzip (RFC 1952)"
.IP "zip" 5
.IX Item "zip"
.IP "bzip2" 5
.IX Item "bzip2"
.IP "lzop" 5
.IX Item "lzop"
.IP "lzf" 5
.IX Item "lzf"
.IP "lzma" 5
.IX Item "lzma"
.IP "xz" 5
.IX Item "xz"
.PD
.PP
The module will auto-detect which, if any, of the supported
compression formats is being used.
.SH "Functional Interface"
.IX Header "Functional Interface"
A top-level function, \f(CW\*(C`anyuncompress\*(C'\fR, is provided to carry out
\&\*(L"one-shot\*(R" uncompression between buffers and/or files. For finer
control over the uncompression process, see the \*(L"\s-1OO\s0 Interface\*(R"
section.
.PP
.Vb 1
\&    use IO::Uncompress::AnyUncompress qw(anyuncompress $AnyUncompressError) ;
\&
\&    anyuncompress $input_filename_or_reference => $output_filename_or_reference [,OPTS] 
\&        or die "anyuncompress failed: $AnyUncompressError\en";
.Ve
.PP
The functional interface needs Perl5.005 or better.
.ie n .SS "anyuncompress $input => $output [, \s-1OPTS\s0]"
.el .SS "anyuncompress \f(CW$input\fP => \f(CW$output\fP [, \s-1OPTS\s0]"
.IX Subsection "anyuncompress $input => $output [, OPTS]"
\&\f(CW\*(C`anyuncompress\*(C'\fR expects at least two parameters,
\&\f(CW$input_filename_or_reference\fR and \f(CW$output_filename_or_reference\fR.
.PP
\fIThe \f(CI$input_filename_or_reference\fI parameter\fR
.IX Subsection "The $input_filename_or_reference parameter"
.PP
The parameter, \f(CW$input_filename_or_reference\fR, is used to define the
source of the compressed data.
.PP
It can take one of the following forms:
.IP "A filename" 5
.IX Item "A filename"
If the <$input_filename_or_reference> parameter is a simple scalar, it is
assumed to be a filename. This file will be opened for reading and the
input data will be read from it.
.IP "A filehandle" 5
.IX Item "A filehandle"
If the \f(CW$input_filename_or_reference\fR parameter is a filehandle, the input
data will be read from it.  The string '\-' can be used as an alias for
standard input.
.IP "A scalar reference" 5
.IX Item "A scalar reference"
If \f(CW$input_filename_or_reference\fR is a scalar reference, the input data
will be read from \f(CW$$input_filename_or_reference\fR.
.IP "An array reference" 5
.IX Item "An array reference"
If \f(CW$input_filename_or_reference\fR is an array reference, each element in
the array must be a filename.
.Sp
The input data will be read from each file in turn.
.Sp
The complete array will be walked to ensure that it only
contains valid filenames before any data is uncompressed.
.IP "An Input FileGlob string" 5
.IX Item "An Input FileGlob string"
If \f(CW$input_filename_or_reference\fR is a string that is delimited by the
characters \*(L"<\*(R" and \*(L">\*(R" \f(CW\*(C`anyuncompress\*(C'\fR will assume that it is an 
\&\fIinput fileglob string\fR. The input is the list of files that match the 
fileglob.
.Sp
See File::GlobMapper for more details.
.PP
If the \f(CW$input_filename_or_reference\fR parameter is any other type,
\&\f(CW\*(C`undef\*(C'\fR will be returned.
.PP
\fIThe \f(CI$output_filename_or_reference\fI parameter\fR
.IX Subsection "The $output_filename_or_reference parameter"
.PP
The parameter \f(CW$output_filename_or_reference\fR is used to control the
destination of the uncompressed data. This parameter can take one of
these forms.
.IP "A filename" 5
.IX Item "A filename"
If the \f(CW$output_filename_or_reference\fR parameter is a simple scalar, it is
assumed to be a filename.  This file will be opened for writing and the 
uncompressed data will be written to it.
.IP "A filehandle" 5
.IX Item "A filehandle"
If the \f(CW$output_filename_or_reference\fR parameter is a filehandle, the
uncompressed data will be written to it.  The string '\-' can be used as
an alias for standard output.
.IP "A scalar reference" 5
.IX Item "A scalar reference"
If \f(CW$output_filename_or_reference\fR is a scalar reference, the
uncompressed data will be stored in \f(CW$$output_filename_or_reference\fR.
.IP "An Array Reference" 5
.IX Item "An Array Reference"
If \f(CW$output_filename_or_reference\fR is an array reference, 
the uncompressed data will be pushed onto the array.
.IP "An Output FileGlob" 5
.IX Item "An Output FileGlob"
If \f(CW$output_filename_or_reference\fR is a string that is delimited by the
characters \*(L"<\*(R" and \*(L">\*(R" \f(CW\*(C`anyuncompress\*(C'\fR will assume that it is an
\&\fIoutput fileglob string\fR. The output is the list of files that match the
fileglob.
.Sp
When \f(CW$output_filename_or_reference\fR is an fileglob string,
\&\f(CW$input_filename_or_reference\fR must also be a fileglob string. Anything
else is an error.
.Sp
See File::GlobMapper for more details.
.PP
If the \f(CW$output_filename_or_reference\fR parameter is any other type,
\&\f(CW\*(C`undef\*(C'\fR will be returned.
.SS "Notes"
.IX Subsection "Notes"
When \f(CW$input_filename_or_reference\fR maps to multiple compressed
files/buffers and \f(CW$output_filename_or_reference\fR is
a single file/buffer, after uncompression \f(CW$output_filename_or_reference\fR will contain a
concatenation of all the uncompressed data from each of the input
files/buffers.
.SS "Optional Parameters"
.IX Subsection "Optional Parameters"
Unless specified below, the optional parameters for \f(CW\*(C`anyuncompress\*(C'\fR,
\&\f(CW\*(C`OPTS\*(C'\fR, are the same as those used with the \s-1OO\s0 interface defined in the
\&\*(L"Constructor Options\*(R" section below.
.ie n .IP """AutoClose => 0|1""" 5
.el .IP "\f(CWAutoClose => 0|1\fR" 5
.IX Item "AutoClose => 0|1"
This option applies to any input or output data streams to 
\&\f(CW\*(C`anyuncompress\*(C'\fR that are filehandles.
.Sp
If \f(CW\*(C`AutoClose\*(C'\fR is specified, and the value is true, it will result in all
input and/or output filehandles being closed once \f(CW\*(C`anyuncompress\*(C'\fR has
completed.
.Sp
This parameter defaults to 0.
.ie n .IP """BinModeOut => 0|1""" 5
.el .IP "\f(CWBinModeOut => 0|1\fR" 5
.IX Item "BinModeOut => 0|1"
When writing to a file or filehandle, set \f(CW\*(C`binmode\*(C'\fR before writing to the
file.
.Sp
Defaults to 0.
.ie n .IP """Append => 0|1""" 5
.el .IP "\f(CWAppend => 0|1\fR" 5
.IX Item "Append => 0|1"
The behaviour of this option is dependent on the type of output data
stream.
.RS 5
.IP "\(bu" 5
A Buffer
.Sp
If \f(CW\*(C`Append\*(C'\fR is enabled, all uncompressed data will be append to the end of
the output buffer. Otherwise the output buffer will be cleared before any
uncompressed data is written to it.
.IP "\(bu" 5
A Filename
.Sp
If \f(CW\*(C`Append\*(C'\fR is enabled, the file will be opened in append mode. Otherwise
the contents of the file, if any, will be truncated before any uncompressed
data is written to it.
.IP "\(bu" 5
A Filehandle
.Sp
If \f(CW\*(C`Append\*(C'\fR is enabled, the filehandle will be positioned to the end of
the file via a call to \f(CW\*(C`seek\*(C'\fR before any uncompressed data is
written to it.  Otherwise the file pointer will not be moved.
.RE
.RS 5
.Sp
When \f(CW\*(C`Append\*(C'\fR is specified, and set to true, it will \fIappend\fR all uncompressed 
data to the output data stream.
.Sp
So when the output is a filehandle it will carry out a seek to the eof
before writing any uncompressed data. If the output is a filename, it will be opened for
appending. If the output is a buffer, all uncompressed data will be
appended to the existing buffer.
.Sp
Conversely when \f(CW\*(C`Append\*(C'\fR is not specified, or it is present and is set to
false, it will operate as follows.
.Sp
When the output is a filename, it will truncate the contents of the file
before writing any uncompressed data. If the output is a filehandle
its position will not be changed. If the output is a buffer, it will be
wiped before any uncompressed data is output.
.Sp
Defaults to 0.
.RE
.ie n .IP """MultiStream => 0|1""" 5
.el .IP "\f(CWMultiStream => 0|1\fR" 5
.IX Item "MultiStream => 0|1"
If the input file/buffer contains multiple compressed data streams, this
option will uncompress the whole lot as a single data stream.
.Sp
Defaults to 0.
.ie n .IP """TrailingData => $scalar""" 5
.el .IP "\f(CWTrailingData => $scalar\fR" 5
.IX Item "TrailingData => $scalar"
Returns the data, if any, that is present immediately after the compressed
data stream once uncompression is complete.
.Sp
This option can be used when there is useful information immediately
following the compressed data stream, and you don't know the length of the
compressed data stream.
.Sp
If the input is a buffer, \f(CW\*(C`trailingData\*(C'\fR will return everything from the
end of the compressed data stream to the end of the buffer.
.Sp
If the input is a filehandle, \f(CW\*(C`trailingData\*(C'\fR will return the data that is
left in the filehandle input buffer once the end of the compressed data
stream has been reached. You can then use the filehandle to read the rest
of the input file.
.Sp
Don't bother using \f(CW\*(C`trailingData\*(C'\fR if the input is a filename.
.Sp
If you know the length of the compressed data stream before you start
uncompressing, you can avoid having to use \f(CW\*(C`trailingData\*(C'\fR by setting the
\&\f(CW\*(C`InputLength\*(C'\fR option.
.SS "Examples"
.IX Subsection "Examples"
To read the contents of the file \f(CW\*(C`file1.txt.Compressed\*(C'\fR and write the
uncompressed data to the file \f(CW\*(C`file1.txt\*(C'\fR.
.PP
.Vb 3
\&    use strict ;
\&    use warnings ;
\&    use IO::Uncompress::AnyUncompress qw(anyuncompress $AnyUncompressError) ;
\&
\&    my $input = "file1.txt.Compressed";
\&    my $output = "file1.txt";
\&    anyuncompress $input => $output
\&        or die "anyuncompress failed: $AnyUncompressError\en";
.Ve
.PP
To read from an existing Perl filehandle, \f(CW$input\fR, and write the
uncompressed data to a buffer, \f(CW$buffer\fR.
.PP
.Vb 4
\&    use strict ;
\&    use warnings ;
\&    use IO::Uncompress::AnyUncompress qw(anyuncompress $AnyUncompressError) ;
\&    use IO::File ;
\&
\&    my $input = new IO::File "<file1.txt.Compressed"
\&        or die "Cannot open \*(Aqfile1.txt.Compressed\*(Aq: $!\en" ;
\&    my $buffer ;
\&    anyuncompress $input => \e$buffer 
\&        or die "anyuncompress failed: $AnyUncompressError\en";
.Ve
.PP
To uncompress all files in the directory \*(L"/my/home\*(R" that match \*(L"*.txt.Compressed\*(R" and store the compressed data in the same directory
.PP
.Vb 3
\&    use strict ;
\&    use warnings ;
\&    use IO::Uncompress::AnyUncompress qw(anyuncompress $AnyUncompressError) ;
\&
\&    anyuncompress \*(Aq</my/home/*.txt.Compressed>\*(Aq => \*(Aq</my/home/#1.txt>\*(Aq
\&        or die "anyuncompress failed: $AnyUncompressError\en";
.Ve
.PP
and if you want to compress each file one at a time, this will do the trick
.PP
.Vb 3
\&    use strict ;
\&    use warnings ;
\&    use IO::Uncompress::AnyUncompress qw(anyuncompress $AnyUncompressError) ;
\&
\&    for my $input ( glob "/my/home/*.txt.Compressed" )
\&    {
\&        my $output = $input;
\&        $output =~ s/.Compressed// ;
\&        anyuncompress $input => $output 
\&            or die "Error compressing \*(Aq$input\*(Aq: $AnyUncompressError\en";
\&    }
.Ve
.SH "OO Interface"
.IX Header "OO Interface"
.SS "Constructor"
.IX Subsection "Constructor"
The format of the constructor for IO::Uncompress::AnyUncompress is shown below
.PP
.Vb 2
\&    my $z = new IO::Uncompress::AnyUncompress $input [OPTS]
\&        or die "IO::Uncompress::AnyUncompress failed: $AnyUncompressError\en";
.Ve
.PP
Returns an \f(CW\*(C`IO::Uncompress::AnyUncompress\*(C'\fR object on success and undef on failure.
The variable \f(CW$AnyUncompressError\fR will contain an error message on failure.
.PP
If you are running Perl 5.005 or better the object, \f(CW$z\fR, returned from
IO::Uncompress::AnyUncompress can be used exactly like an IO::File filehandle.
This means that all normal input file operations can be carried out with
\&\f(CW$z\fR.  For example, to read a line from a compressed file/buffer you can
use either of these forms
.PP
.Vb 2
\&    $line = $z\->getline();
\&    $line = <$z>;
.Ve
.PP
The mandatory parameter \f(CW$input\fR is used to determine the source of the
compressed data. This parameter can take one of three forms.
.IP "A filename" 5
.IX Item "A filename"
If the \f(CW$input\fR parameter is a scalar, it is assumed to be a filename. This
file will be opened for reading and the compressed data will be read from it.
.IP "A filehandle" 5
.IX Item "A filehandle"
If the \f(CW$input\fR parameter is a filehandle, the compressed data will be
read from it.
The string '\-' can be used as an alias for standard input.
.IP "A scalar reference" 5
.IX Item "A scalar reference"
If \f(CW$input\fR is a scalar reference, the compressed data will be read from
\&\f(CW$$input\fR.
.SS "Constructor Options"
.IX Subsection "Constructor Options"
The option names defined below are case insensitive and can be optionally
prefixed by a '\-'.  So all of the following are valid
.PP
.Vb 4
\&    \-AutoClose
\&    \-autoclose
\&    AUTOCLOSE
\&    autoclose
.Ve
.PP
\&\s-1OPTS\s0 is a combination of the following options:
.ie n .IP """AutoClose => 0|1""" 5
.el .IP "\f(CWAutoClose => 0|1\fR" 5
.IX Item "AutoClose => 0|1"
This option is only valid when the \f(CW$input\fR parameter is a filehandle. If
specified, and the value is true, it will result in the file being closed once
either the \f(CW\*(C`close\*(C'\fR method is called or the IO::Uncompress::AnyUncompress object is
destroyed.
.Sp
This parameter defaults to 0.
.ie n .IP """MultiStream => 0|1""" 5
.el .IP "\f(CWMultiStream => 0|1\fR" 5
.IX Item "MultiStream => 0|1"
Allows multiple concatenated compressed streams to be treated as a single
compressed stream. Decompression will stop once either the end of the
file/buffer is reached, an error is encountered (premature eof, corrupt
compressed data) or the end of a stream is not immediately followed by the
start of another stream.
.Sp
This parameter defaults to 0.
.ie n .IP """Prime => $string""" 5
.el .IP "\f(CWPrime => $string\fR" 5
.IX Item "Prime => $string"
This option will uncompress the contents of \f(CW$string\fR before processing the
input file/buffer.
.Sp
This option can be useful when the compressed data is embedded in another
file/data structure and it is not possible to work out where the compressed
data begins without having to read the first few bytes. If this is the
case, the uncompression can be \fIprimed\fR with these bytes using this
option.
.ie n .IP """Transparent => 0|1""" 5
.el .IP "\f(CWTransparent => 0|1\fR" 5
.IX Item "Transparent => 0|1"
If this option is set and the input file/buffer is not compressed data,
the module will allow reading of it anyway.
.Sp
In addition, if the input file/buffer does contain compressed data and
there is non-compressed data immediately following it, setting this option
will make this module treat the whole file/buffer as a single data stream.
.Sp
This option defaults to 1.
.ie n .IP """BlockSize => $num""" 5
.el .IP "\f(CWBlockSize => $num\fR" 5
.IX Item "BlockSize => $num"
When reading the compressed input data, IO::Uncompress::AnyUncompress will read it in
blocks of \f(CW$num\fR bytes.
.Sp
This option defaults to 4096.
.ie n .IP """InputLength => $size""" 5
.el .IP "\f(CWInputLength => $size\fR" 5
.IX Item "InputLength => $size"
When present this option will limit the number of compressed bytes read
from the input file/buffer to \f(CW$size\fR. This option can be used in the
situation where there is useful data directly after the compressed data
stream and you know beforehand the exact length of the compressed data
stream.
.Sp
This option is mostly used when reading from a filehandle, in which case
the file pointer will be left pointing to the first byte directly after the
compressed data stream.
.Sp
This option defaults to off.
.ie n .IP """Append => 0|1""" 5
.el .IP "\f(CWAppend => 0|1\fR" 5
.IX Item "Append => 0|1"
This option controls what the \f(CW\*(C`read\*(C'\fR method does with uncompressed data.
.Sp
If set to 1, all uncompressed data will be appended to the output parameter
of the \f(CW\*(C`read\*(C'\fR method.
.Sp
If set to 0, the contents of the output parameter of the \f(CW\*(C`read\*(C'\fR method
will be overwritten by the uncompressed data.
.Sp
Defaults to 0.
.ie n .IP """Strict => 0|1""" 5
.el .IP "\f(CWStrict => 0|1\fR" 5
.IX Item "Strict => 0|1"
This option controls whether the extra checks defined below are used when
carrying out the decompression. When Strict is on, the extra tests are
carried out, when Strict is off they are not.
.Sp
The default for this option is off.
.ie n .IP """RawInflate => 0|1""" 5
.el .IP "\f(CWRawInflate => 0|1\fR" 5
.IX Item "RawInflate => 0|1"
When auto-detecting the compressed format, try to test for raw-deflate (\s-1RFC
1951\s0) content using the \f(CW\*(C`IO::Uncompress::RawInflate\*(C'\fR module.
.Sp
The reason this is not default behaviour is because \s-1RFC 1951\s0 content can
only be detected by attempting to uncompress it. This process is error
prone and can result is false positives.
.Sp
Defaults to 0.
.ie n .IP """UnLzma => 0|1""" 5
.el .IP "\f(CWUnLzma => 0|1\fR" 5
.IX Item "UnLzma => 0|1"
When auto-detecting the compressed format, try to test for lzma_alone
content using the \f(CW\*(C`IO::Uncompress::UnLzma\*(C'\fR module.
.Sp
The reason this is not default behaviour is because lzma_alone content can
only be detected by attempting to uncompress it. This process is error
prone and can result is false positives.
.Sp
Defaults to 0.
.SS "Examples"
.IX Subsection "Examples"
\&\s-1TODO\s0
.SH "Methods"
.IX Header "Methods"
.SS "read"
.IX Subsection "read"
Usage is
.PP
.Vb 1
\&    $status = $z\->read($buffer)
.Ve
.PP
Reads a block of compressed data (the size the the compressed block is
determined by the \f(CW\*(C`Buffer\*(C'\fR option in the constructor), uncompresses it and
writes any uncompressed data into \f(CW$buffer\fR. If the \f(CW\*(C`Append\*(C'\fR parameter is
set in the constructor, the uncompressed data will be appended to the
\&\f(CW$buffer\fR parameter. Otherwise \f(CW$buffer\fR will be overwritten.
.PP
Returns the number of uncompressed bytes written to \f(CW$buffer\fR, zero if eof
or a negative number on error.
.SS "read"
.IX Subsection "read"
Usage is
.PP
.Vb 2
\&    $status = $z\->read($buffer, $length)
\&    $status = $z\->read($buffer, $length, $offset)
\&
\&    $status = read($z, $buffer, $length)
\&    $status = read($z, $buffer, $length, $offset)
.Ve
.PP
Attempt to read \f(CW$length\fR bytes of uncompressed data into \f(CW$buffer\fR.
.PP
The main difference between this form of the \f(CW\*(C`read\*(C'\fR method and the
previous one, is that this one will attempt to return \fIexactly\fR \f(CW$length\fR
bytes. The only circumstances that this function will not is if end-of-file
or an \s-1IO\s0 error is encountered.
.PP
Returns the number of uncompressed bytes written to \f(CW$buffer\fR, zero if eof
or a negative number on error.
.SS "getline"
.IX Subsection "getline"
Usage is
.PP
.Vb 2
\&    $line = $z\->getline()
\&    $line = <$z>
.Ve
.PP
Reads a single line.
.PP
This method fully supports the use of of the variable \f(CW$/\fR (or
\&\f(CW$INPUT_RECORD_SEPARATOR\fR or \f(CW$RS\fR when \f(CW\*(C`English\*(C'\fR is in use) to
determine what constitutes an end of line. Paragraph mode, record mode and
file slurp mode are all supported.
.SS "getc"
.IX Subsection "getc"
Usage is
.PP
.Vb 1
\&    $char = $z\->getc()
.Ve
.PP
Read a single character.
.SS "ungetc"
.IX Subsection "ungetc"
Usage is
.PP
.Vb 1
\&    $char = $z\->ungetc($string)
.Ve
.SS "getHeaderInfo"
.IX Subsection "getHeaderInfo"
Usage is
.PP
.Vb 2
\&    $hdr  = $z\->getHeaderInfo();
\&    @hdrs = $z\->getHeaderInfo();
.Ve
.PP
This method returns either a hash reference (in scalar context) or a list
or hash references (in array context) that contains information about each
of the header fields in the compressed data stream(s).
.SS "tell"
.IX Subsection "tell"
Usage is
.PP
.Vb 2
\&    $z\->tell()
\&    tell $z
.Ve
.PP
Returns the uncompressed file offset.
.SS "eof"
.IX Subsection "eof"
Usage is
.PP
.Vb 2
\&    $z\->eof();
\&    eof($z);
.Ve
.PP
Returns true if the end of the compressed input stream has been reached.
.SS "seek"
.IX Subsection "seek"
.Vb 2
\&    $z\->seek($position, $whence);
\&    seek($z, $position, $whence);
.Ve
.PP
Provides a sub-set of the \f(CW\*(C`seek\*(C'\fR functionality, with the restriction
that it is only legal to seek forward in the input file/buffer.
It is a fatal error to attempt to seek backward.
.PP
Note that the implementation of \f(CW\*(C`seek\*(C'\fR in this module does not provide
true random access to a compressed file/buffer. It  works by uncompressing
data from the current offset in the file/buffer until it reaches the
ucompressed offset specified in the parameters to \f(CW\*(C`seek\*(C'\fR. For very small
files this may be acceptable behaviour. For large files it may cause an
unacceptable delay.
.PP
The \f(CW$whence\fR parameter takes one the usual values, namely \s-1SEEK_SET,
SEEK_CUR\s0 or \s-1SEEK_END.\s0
.PP
Returns 1 on success, 0 on failure.
.SS "binmode"
.IX Subsection "binmode"
Usage is
.PP
.Vb 2
\&    $z\->binmode
\&    binmode $z ;
.Ve
.PP
This is a noop provided for completeness.
.SS "opened"
.IX Subsection "opened"
.Vb 1
\&    $z\->opened()
.Ve
.PP
Returns true if the object currently refers to a opened file/buffer.
.SS "autoflush"
.IX Subsection "autoflush"
.Vb 2
\&    my $prev = $z\->autoflush()
\&    my $prev = $z\->autoflush(EXPR)
.Ve
.PP
If the \f(CW$z\fR object is associated with a file or a filehandle, this method
returns the current autoflush setting for the underlying filehandle. If
\&\f(CW\*(C`EXPR\*(C'\fR is present, and is non-zero, it will enable flushing after every
write/print operation.
.PP
If \f(CW$z\fR is associated with a buffer, this method has no effect and always
returns \f(CW\*(C`undef\*(C'\fR.
.PP
\&\fBNote\fR that the special variable \f(CW$|\fR \fBcannot\fR be used to set or
retrieve the autoflush setting.
.SS "input_line_number"
.IX Subsection "input_line_number"
.Vb 2
\&    $z\->input_line_number()
\&    $z\->input_line_number(EXPR)
.Ve
.PP
Returns the current uncompressed line number. If \f(CW\*(C`EXPR\*(C'\fR is present it has
the effect of setting the line number. Note that setting the line number
does not change the current position within the file/buffer being read.
.PP
The contents of \f(CW$/\fR are used to to determine what constitutes a line
terminator.
.SS "fileno"
.IX Subsection "fileno"
.Vb 2
\&    $z\->fileno()
\&    fileno($z)
.Ve
.PP
If the \f(CW$z\fR object is associated with a file or a filehandle, \f(CW\*(C`fileno\*(C'\fR
will return the underlying file descriptor. Once the \f(CW\*(C`close\*(C'\fR method is
called \f(CW\*(C`fileno\*(C'\fR will return \f(CW\*(C`undef\*(C'\fR.
.PP
If the \f(CW$z\fR object is associated with a buffer, this method will return
\&\f(CW\*(C`undef\*(C'\fR.
.SS "close"
.IX Subsection "close"
.Vb 2
\&    $z\->close() ;
\&    close $z ;
.Ve
.PP
Closes the output file/buffer.
.PP
For most versions of Perl this method will be automatically invoked if
the IO::Uncompress::AnyUncompress object is destroyed (either explicitly or by the
variable with the reference to the object going out of scope). The
exceptions are Perl versions 5.005 through 5.00504 and 5.8.0. In
these cases, the \f(CW\*(C`close\*(C'\fR method will be called automatically, but
not until global destruction of all live objects when the program is
terminating.
.PP
Therefore, if you want your scripts to be able to run on all versions
of Perl, you should call \f(CW\*(C`close\*(C'\fR explicitly and not rely on automatic
closing.
.PP
Returns true on success, otherwise 0.
.PP
If the \f(CW\*(C`AutoClose\*(C'\fR option has been enabled when the IO::Uncompress::AnyUncompress
object was created, and the object is associated with a file, the
underlying file will also be closed.
.SS "nextStream"
.IX Subsection "nextStream"
Usage is
.PP
.Vb 1
\&    my $status = $z\->nextStream();
.Ve
.PP
Skips to the next compressed data stream in the input file/buffer. If a new
compressed data stream is found, the eof marker will be cleared and \f(CW$.\fR
will be reset to 0.
.PP
Returns 1 if a new stream was found, 0 if none was found, and \-1 if an
error was encountered.
.SS "trailingData"
.IX Subsection "trailingData"
Usage is
.PP
.Vb 1
\&    my $data = $z\->trailingData();
.Ve
.PP
Returns the data, if any, that is present immediately after the compressed
data stream once uncompression is complete. It only makes sense to call
this method once the end of the compressed data stream has been
encountered.
.PP
This option can be used when there is useful information immediately
following the compressed data stream, and you don't know the length of the
compressed data stream.
.PP
If the input is a buffer, \f(CW\*(C`trailingData\*(C'\fR will return everything from the
end of the compressed data stream to the end of the buffer.
.PP
If the input is a filehandle, \f(CW\*(C`trailingData\*(C'\fR will return the data that is
left in the filehandle input buffer once the end of the compressed data
stream has been reached. You can then use the filehandle to read the rest
of the input file.
.PP
Don't bother using \f(CW\*(C`trailingData\*(C'\fR if the input is a filename.
.PP
If you know the length of the compressed data stream before you start
uncompressing, you can avoid having to use \f(CW\*(C`trailingData\*(C'\fR by setting the
\&\f(CW\*(C`InputLength\*(C'\fR option in the constructor.
.SH "Importing"
.IX Header "Importing"
No symbolic constants are required by this IO::Uncompress::AnyUncompress at present.
.IP ":all" 5
.IX Item ":all"
Imports \f(CW\*(C`anyuncompress\*(C'\fR and \f(CW$AnyUncompressError\fR.
Same as doing this
.Sp
.Vb 1
\&    use IO::Uncompress::AnyUncompress qw(anyuncompress $AnyUncompressError) ;
.Ve
.SH "EXAMPLES"
.IX Header "EXAMPLES"
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Compress::Zlib, IO::Compress::Gzip, IO::Uncompress::Gunzip, IO::Compress::Deflate, IO::Uncompress::Inflate, IO::Compress::RawDeflate, IO::Uncompress::RawInflate, IO::Compress::Bzip2, IO::Uncompress::Bunzip2, IO::Compress::Lzma, IO::Uncompress::UnLzma, IO::Compress::Xz, IO::Uncompress::UnXz, IO::Compress::Lzop, IO::Uncompress::UnLzop, IO::Compress::Lzf, IO::Uncompress::UnLzf, IO::Uncompress::AnyInflate
.PP
IO::Compress::FAQ
.PP
File::GlobMapper, Archive::Zip,
Archive::Tar,
IO::Zlib
.SH "AUTHOR"
.IX Header "AUTHOR"
This module was written by Paul Marquess, \fIpmqs@cpan.org\fR.
.SH "MODIFICATION HISTORY"
.IX Header "MODIFICATION HISTORY"
See the Changes file.
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (c) 2005\-2013 Paul Marquess. All rights reserved.
.PP
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
                                                                                                                                                                                                                                                                                                                                  osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/IO::Uncompress::Base.3pm                     0100644 0001750 0001750 00000012316 12566207456 025042  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "IO::Uncompress::Base 3pm"
.TH IO::Uncompress::Base 3pm "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
IO::Uncompress::Base \- Base Class for IO::Uncompress modules
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use IO::Uncompress::Base ;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module is not intended for direct use in application code. Its sole
purpose if to to be sub-classed by IO::Uncompress modules.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Compress::Zlib, IO::Compress::Gzip, IO::Uncompress::Gunzip, IO::Compress::Deflate, IO::Uncompress::Inflate, IO::Compress::RawDeflate, IO::Uncompress::RawInflate, IO::Compress::Bzip2, IO::Uncompress::Bunzip2, IO::Compress::Lzma, IO::Uncompress::UnLzma, IO::Compress::Xz, IO::Uncompress::UnXz, IO::Compress::Lzop, IO::Uncompress::UnLzop, IO::Compress::Lzf, IO::Uncompress::UnLzf, IO::Uncompress::AnyInflate, IO::Uncompress::AnyUncompress
.PP
IO::Compress::FAQ
.PP
File::GlobMapper, Archive::Zip,
Archive::Tar,
IO::Zlib
.SH "AUTHOR"
.IX Header "AUTHOR"
This module was written by Paul Marquess, \fIpmqs@cpan.org\fR.
.SH "MODIFICATION HISTORY"
.IX Header "MODIFICATION HISTORY"
See the Changes file.
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (c) 2005\-2013 Paul Marquess. All rights reserved.
.PP
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
                                                                                                                                                                                                                                                                                                                  osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/IO::Uncompress::Base5.16.3pm                 0100644 0001750 0001750 00000011775 12566207435 025361  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "IO::Uncompress::Base 3pm"
.TH IO::Uncompress::Base 3pm "2013-03-04" "perl v5.16.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
IO::Uncompress::Base \- Base Class for IO::Uncompress modules
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use IO::Uncompress::Base ;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module is not intended for direct use in application code. Its sole
purpose if to to be sub-classed by IO::Uncompress modules.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Compress::Zlib, IO::Compress::Gzip, IO::Uncompress::Gunzip, IO::Compress::Deflate, IO::Uncompress::Inflate, IO::Compress::RawDeflate, IO::Uncompress::RawInflate, IO::Compress::Bzip2, IO::Uncompress::Bunzip2, IO::Compress::Lzma, IO::Uncompress::UnLzma, IO::Compress::Xz, IO::Uncompress::UnXz, IO::Compress::Lzop, IO::Uncompress::UnLzop, IO::Compress::Lzf, IO::Uncompress::UnLzf, IO::Uncompress::AnyInflate, IO::Uncompress::AnyUncompress
.PP
IO::Compress::FAQ
.PP
File::GlobMapper, Archive::Zip,
Archive::Tar,
IO::Zlib
.SH "AUTHOR"
.IX Header "AUTHOR"
This module was written by Paul Marquess, \fIpmqs@cpan.org\fR.
.SH "MODIFICATION HISTORY"
.IX Header "MODIFICATION HISTORY"
See the Changes file.
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (c) 2005\-2012 Paul Marquess. All rights reserved.
.PP
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
   osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/IO::Uncompress::Base5.18.3pm                 0100644 0001750 0001750 00000012316 12566207456 025356  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "IO::Uncompress::Base 3pm"
.TH IO::Uncompress::Base 3pm "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
IO::Uncompress::Base \- Base Class for IO::Uncompress modules
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use IO::Uncompress::Base ;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module is not intended for direct use in application code. Its sole
purpose if to to be sub-classed by IO::Uncompress modules.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Compress::Zlib, IO::Compress::Gzip, IO::Uncompress::Gunzip, IO::Compress::Deflate, IO::Uncompress::Inflate, IO::Compress::RawDeflate, IO::Uncompress::RawInflate, IO::Compress::Bzip2, IO::Uncompress::Bunzip2, IO::Compress::Lzma, IO::Uncompress::UnLzma, IO::Compress::Xz, IO::Uncompress::UnXz, IO::Compress::Lzop, IO::Uncompress::UnLzop, IO::Compress::Lzf, IO::Uncompress::UnLzf, IO::Uncompress::AnyInflate, IO::Uncompress::AnyUncompress
.PP
IO::Compress::FAQ
.PP
File::GlobMapper, Archive::Zip,
Archive::Tar,
IO::Zlib
.SH "AUTHOR"
.IX Header "AUTHOR"
This module was written by Paul Marquess, \fIpmqs@cpan.org\fR.
.SH "MODIFICATION HISTORY"
.IX Header "MODIFICATION HISTORY"
See the Changes file.
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (c) 2005\-2013 Paul Marquess. All rights reserved.
.PP
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
                                                                                                                                                                                                                                                                                                                  