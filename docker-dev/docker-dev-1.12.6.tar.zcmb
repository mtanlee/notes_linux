ixed are the places where the pattern contains the
multiple characters, but the characters are split up by other things,
such as in
.Sp
.Vb 1
\& "\eN{LATIN SMALL LIGATURE FFI}" =~ /(f)(f)i/ui
.Ve
.Sp
or
.Sp
.Vb 1
\& "\eN{LATIN SMALL LIGATURE FFI}" =~ /ffi*/ui
.Ve
.Sp
or
.Sp
.Vb 1
\& "\eN{LATIN SMALL LIGATURE FFI}" =~ /[a\-f][f\-m][g\-z]/ui
.Ve
.Sp
None of these match.
.Sp
Also, this matching doesn't fully conform to the current Unicode
Standard, which asks that the matching be made upon the \s-1NFD
\&\s0(Normalization Form Decomposed) of the text.  However, as of this
writing (April 2010), the Unicode Standard is currently in flux about
what they will recommend doing with regard in such scenarios.  It may be
that they will throw out the whole concept of multi-character matches.
[perl #71736].
.IP "\(bu" 4
Naming a deprecated character in \f(CW\*(C`\eN{\f(CINAME\f(CW}\*(C'\fR no longer leaks memory.
.IP "\(bu" 4
We fixed a bug that could cause \f(CW\*(C`\eN{\f(CINAME\f(CW}\*(C'\fR constructs followed by
a single \f(CW"."\fR to be parsed incorrectly [perl #74978] (5.12.1).
.IP "\(bu" 4
\&\f(CW\*(C`chop\*(C'\fR now correctly handles characters above \f(CW"\ex{7fffffff}"\fR
[perl #73246].
.IP "\(bu" 4
Passing to \f(CW\*(C`index\*(C'\fR an offset beyond the end of the string when the string
is encoded internally in \s-1UTF8\s0 no longer causes panics [perl #75898].
.IP "\(bu" 4
\&\fIwarn()\fR and \fIdie()\fR now respect utf8\-encoded scalars [perl #45549].
.IP "\(bu" 4
Sometimes the \s-1UTF8\s0 length cache would not be reset on a value
returned by substr, causing \f(CW\*(C`length(substr($uni_string, ...))\*(C'\fR to give
wrong answers.  With \f(CW\*(C`${^UTF8CACHE}\*(C'\fR set to \-1, it would also produce
a \*(L"panic\*(R" error message [perl #77692].
.SS "Ties, Overloading and Other Magic"
.IX Subsection "Ties, Overloading and Other Magic"
.IP "\(bu" 4
Overloading now works properly in conjunction with tied
variables.  What formerly happened was that most ops checked their
arguments for overloading \fIbefore\fR checking for magic, so for example
an overloaded object returned by a tied array access would usually be
treated as not overloaded [\s-1RT\s0 #57012].
.IP "\(bu" 4
Various instances of magic (like tie methods) being called on tied variables
too many or too few times have been fixed:
.RS 4
.IP "\(bu" 4
\&\f(CW\*(C`$tied\->()\*(C'\fR did not always call \s-1FETCH\s0 [perl #8438].
.IP "\(bu" 4
Filetest operators and \f(CW\*(C`y///\*(C'\fR and \f(CW\*(C`tr///\*(C'\fR were calling \s-1FETCH\s0 too
many times.
.IP "\(bu" 4
The \f(CW\*(C`=\*(C'\fR operator used to ignore magic on its right-hand side if the
scalar happened to hold a typeglob (if a typeglob was the last thing
returned from or assigned to a tied scalar) [perl #77498].
.IP "\(bu" 4
Dereference operators used to ignore magic if the argument was a
reference already (such as from a previous \s-1FETCH\s0) [perl #72144].
.IP "\(bu" 4
\&\f(CW\*(C`splice\*(C'\fR now calls set-magic (so changes made
by \f(CW\*(C`splice @ISA\*(C'\fR are respected by method calls) [perl #78400].
.IP "\(bu" 4
In-memory files created by \f(CW\*(C`open($fh, ">", \e$buffer)\*(C'\fR were not calling
\&\s-1FETCH/STORE\s0 at all [perl #43789] (5.12.2).
.IP "\(bu" 4
\&\fIutf8::is_utf8()\fR now respects get-magic (like \f(CW$1\fR) (5.12.1).
.RE
.RS 4
.RE
.IP "\(bu" 4
Non-commutative binary operators used to swap their operands if the same
tied scalar was used for both operands and returned a different value for
each \s-1FETCH. \s0 For instance, if \f(CW$t\fR returned 2 the first time and 3 the
second, then \f(CW\*(C`$t/$t\*(C'\fR would evaluate to 1.5.  This has been fixed
[perl #87708].
.IP "\(bu" 4
String \f(CW\*(C`eval\*(C'\fR now detects taintedness of overloaded or tied
arguments [perl #75716].
.IP "\(bu" 4
String \f(CW\*(C`eval\*(C'\fR and regular expression matches against objects with string
overloading no longer cause memory corruption or crashes [perl #77084].
.IP "\(bu" 4
readline now honors \f(CW\*(C`<>\*(C'\fR overloading on tied
arguments.
.IP "\(bu" 4
\&\f(CW\*(C`<expr>\*(C'\fR always respects overloading now if the expression is
overloaded.
.Sp
Because \*(L"<>\ as glob\*(R" was parsed differently from
\&\*(L"<>\ as filehandle\*(R" from 5.6 onwards, something like \f(CW\*(C`<$foo[0]>\*(C'\fR did
not handle overloading, even if \f(CW$foo[0]\fR was an overloaded object.  This
was contrary to the documentation for overload, and meant that \f(CW\*(C`<>\*(C'\fR
could not be used as a general overloaded iterator operator.
.IP "\(bu" 4
The fallback behaviour of overloading on binary operators was asymmetric
[perl #71286].
.IP "\(bu" 4
Magic applied to variables in the main package no longer affects other packages.
See \*(L"Magic variables outside the main package\*(R" above [perl #76138].
.IP "\(bu" 4
Sometimes magic (ties, taintedness, etc.) attached to variables could cause
an object to last longer than it should, or cause a crash if a tied
variable were freed from within a tie method.  These have been fixed
[perl #81230].
.IP "\(bu" 4
\&\s-1DESTROY\s0 methods of objects implementing ties are no longer able to crash by
accessing the tied variable through a weak reference [perl #86328].
.IP "\(bu" 4
Fixed a regression of \fIkill()\fR when a match variable is used for the
process \s-1ID\s0 to kill [perl #75812].
.IP "\(bu" 4
\&\f(CW$AUTOLOAD\fR used to remain tainted forever if it ever became tainted.  Now
it is correctly untainted if an autoloaded method is called and the method
name was not tainted.
.IP "\(bu" 4
\&\f(CW\*(C`sprintf\*(C'\fR now dies when passed a tainted scalar for the format.  It did
already die for arbitrary expressions, but not for simple scalars
[perl #82250].
.IP "\(bu" 4
\&\f(CW\*(C`lc\*(C'\fR, \f(CW\*(C`uc\*(C'\fR, \f(CW\*(C`lcfirst\*(C'\fR, and \f(CW\*(C`ucfirst\*(C'\fR no longer return untainted strings
when the argument is tainted.  This has been broken since perl 5.8.9
[perl #87336].
.SS "The Debugger"
.IX Subsection "The Debugger"
.IP "\(bu" 4
The Perl debugger now also works in taint mode [perl #76872].
.IP "\(bu" 4
Subroutine redefinition works once more in the debugger [perl #48332].
.IP "\(bu" 4
When \fB\-d\fR is used on the shebang (\f(CW\*(C`#!\*(C'\fR) line, the debugger now has access
to the lines of the main program.  In the past, this sometimes worked and
sometimes did not, depending on the order in which things happened to be
arranged in memory [perl #71806].
.IP "\(bu" 4
A possible memory leak when using \fIcaller()\fR to set
\&\f(CW@DB::args\fR has been fixed (5.12.2).
.IP "\(bu" 4
Perl no longer stomps on \f(CW$DB::single\fR, \f(CW$DB::trace\fR, and \f(CW$DB::signal\fR 
if these variables already have values when \f(CW$^P\fR is assigned to [perl #72422].
.IP "\(bu" 4
\&\f(CW\*(C`#line\*(C'\fR directives in string evals were not properly updating the arrays
of lines of code (\f(CW\*(C`@{"_< ..."}\*(C'\fR) that the debugger (or any debugging or
profiling module) uses.  In threaded builds, they were not being updated at
all.  In non-threaded builds, the line number was ignored, so any change to
the existing line number would cause the lines to be misnumbered
[perl #79442].
.SS "Threads"
.IX Subsection "Threads"
.IP "\(bu" 4
Perl no longer accidentally clones lexicals in scope within active stack
frames in the parent when creating a child thread [perl #73086].
.IP "\(bu" 4
Several memory leaks in cloning and freeing threaded Perl interpreters have been
fixed [perl #77352].
.IP "\(bu" 4
Creating a new thread when directory handles were open used to cause a
crash, because the handles were not cloned, but simply passed to the new
thread, resulting in a double free.
.Sp
Now directory handles are cloned properly on Windows
and on systems that have a \f(CW\*(C`fchdir\*(C'\fR function.  On other
systems, new threads simply do not inherit directory
handles from their parent threads [perl #75154].
.IP "\(bu" 4
The typeglob \f(CW\*(C`*,\*(C'\fR, which holds the scalar variable \f(CW$,\fR (output field
separator), had the wrong reference count in child threads.
.IP "\(bu" 4
[perl #78494] When pipes are shared between threads, the \f(CW\*(C`close\*(C'\fR function
(and any implicit close, such as on thread exit) no longer blocks.
.IP "\(bu" 4
Perl now does a timely cleanup of SVs that are cloned into a new
thread but then discovered to be orphaned (that is, their owners
are \fInot\fR cloned).  This eliminates several \*(L"scalars leaked\*(R"
warnings when joining threads.
.SS "Scoping and Subroutines"
.IX Subsection "Scoping and Subroutines"
.IP "\(bu" 4
Lvalue subroutines are again able to return copy-on-write scalars.  This
had been broken since version 5.10.0 [perl #75656] (5.12.3).
.IP "\(bu" 4
\&\f(CW\*(C`require\*(C'\fR no longer causes \f(CW\*(C`caller\*(C'\fR to return the wrong file name for
the scope that called \f(CW\*(C`require\*(C'\fR and other scopes higher up that had the
same file name [perl #68712].
.IP "\(bu" 4
\&\f(CW\*(C`sort\*(C'\fR with a \f(CW\*(C`($$)\*(C'\fR\-prototyped comparison routine used to cause the value
of \f(CW@_\fR to leak out of the sort.  Taking a reference to \f(CW@_\fR within the
sorting routine could cause a crash [perl #72334].
.IP "\(bu" 4
Match variables (like \f(CW$1\fR) no longer persist between calls to a sort
subroutine [perl #76026].
.IP "\(bu" 4
Iterating with \f(CW\*(C`foreach\*(C'\fR over an array returned by an lvalue sub now works
[perl #23790].
.IP "\(bu" 4
\&\f(CW$@\fR is now localised during calls to \f(CW\*(C`binmode\*(C'\fR to prevent action at a
distance [perl #78844].
.IP "\(bu" 4
Calling a closure prototype (what is passed to an attribute handler for a
closure) now results in a \*(L"Closure prototype called\*(R" error message instead
of a crash [perl #68560].
.IP "\(bu" 4
Mentioning a read-only lexical variable from the enclosing scope in a
string \f(CW\*(C`eval\*(C'\fR no longer causes the variable to become writable
[perl #19135].
.SS "Signals"
.IX Subsection "Signals"
.IP "\(bu" 4
Within signal handlers, \f(CW$!\fR is now implicitly localized.
.IP "\(bu" 4
\&\s-1CHLD\s0 signals are no longer unblocked after a signal handler is called if
they were blocked before by \f(CW\*(C`POSIX::sigprocmask\*(C'\fR [perl #82040].
.IP "\(bu" 4
A signal handler called within a signal handler could cause leaks or
double-frees.  Now fixed [perl #76248].
.SS "Miscellaneous Memory Leaks"
.IX Subsection "Miscellaneous Memory Leaks"
.IP "\(bu" 4
Several memory leaks when loading \s-1XS\s0 modules were fixed (5.12.2).
.IP "\(bu" 4
\&\fIsubstr()\fR,
\&\fIpos()\fR, \fIkeys()\fR,
and \fIvec()\fR could, when used in combination
with lvalues, result in leaking the scalar value they operate on, and cause its
destruction to happen too late.  This has now been fixed.
.IP "\(bu" 4
The postincrement and postdecrement operators, \f(CW\*(C`++\*(C'\fR and \f(CW\*(C`\-\-\*(C'\fR, used to cause
leaks when used on references.  This has now been fixed.
.IP "\(bu" 4
Nested \f(CW\*(C`map\*(C'\fR and \f(CW\*(C`grep\*(C'\fR blocks no longer leak memory when processing
large lists [perl #48004].
.IP "\(bu" 4
\&\f(CW\*(C`use \f(CIVERSION\f(CW\*(C'\fR and \f(CW\*(C`no \f(CIVERSION\f(CW\*(C'\fR no longer leak memory [perl #78436]
[perl #69050].
.IP "\(bu" 4
\&\f(CW\*(C`.=\*(C'\fR followed by \f(CW\*(C`<>\*(C'\fR or \f(CW\*(C`readline\*(C'\fR would leak memory if \f(CW$/\fR
contained characters beyond the octet range and the scalar assigned to
happened to be encoded as \s-1UTF8\s0 internally [perl #72246].
.IP "\(bu" 4
\&\f(CW\*(C`eval \*(AqBEGIN{die}\*(Aq\*(C'\fR no longer leaks memory on non-threaded builds.
.SS "Memory Corruption and Crashes"
.IX Subsection "Memory Corruption and Crashes"
.IP "\(bu" 4
\&\fIglob()\fR no longer crashes when \f(CW%File::Glob::\fR is empty and
\&\f(CW\*(C`CORE::GLOBAL::glob\*(C'\fR isn't present [perl #75464] (5.12.2).
.IP "\(bu" 4
\&\fIreadline()\fR has been fixed when interrupted by signals so it no longer
returns the \*(L"same thing\*(R" as before or random memory.
.IP "\(bu" 4
When assigning a list with duplicated keys to a hash, the assignment used to
return garbage and/or freed values:
.Sp
.Vb 1
\&    @a = %h = (list with some duplicate keys);
.Ve
.Sp
This has now been fixed [perl #31865].
.IP "\(bu" 4
The mechanism for freeing objects in globs used to leave dangling
pointers to freed SVs, meaning Perl users could see corrupted state
during destruction.
.Sp
Perl now frees only the affected slots of the \s-1GV,\s0 rather than freeing
the \s-1GV\s0 itself.  This makes sure that there are no dangling refs or
corrupted state during destruction.
.IP "\(bu" 4
The interpreter no longer crashes when freeing deeply-nested arrays of
arrays.  Hashes have not been fixed yet [perl #44225].
.IP "\(bu" 4
Concatenating long strings under \f(CW\*(C`use encoding\*(C'\fR no longer causes Perl to
crash [perl #78674].
.IP "\(bu" 4
Calling \f(CW\*(C`\->import\*(C'\fR on a class lacking an import method could corrupt
the stack, resulting in strange behaviour.  For instance,
.Sp
.Vb 1
\&  push @a, "foo", $b = bar\->import;
.Ve
.Sp
would assign \*(L"foo\*(R" to \f(CW$b\fR [perl #63790].
.IP "\(bu" 4
The \f(CW\*(C`recv\*(C'\fR function could crash when called with the \s-1MSG_TRUNC\s0 flag
[perl #75082].
.IP "\(bu" 4
\&\f(CW\*(C`formline\*(C'\fR no longer crashes when passed a tainted format picture.  It also
taints \f(CW$^A\fR now if its arguments are tainted [perl #79138].
.IP "\(bu" 4
A bug in how we process filetest operations could cause a segfault.
Filetests don't always expect an op on the stack, so we now use
TOPs only if we're sure that we're not \f(CW\*(C`stat\*(C'\fRing the \f(CW\*(C`_\*(C'\fR filehandle.
This is indicated by \f(CW\*(C`OPf_KIDS\*(C'\fR (as checked in ck_ftst) [perl #74542]
(5.12.1).
.IP "\(bu" 4
\&\fIunpack()\fR now handles scalar context correctly for \f(CW%32H\fR and \f(CW%32u\fR,
fixing a potential crash.  \fIsplit()\fR would crash because the third item
on the stack wasn't the regular expression it expected.  \f(CW\*(C`unpack("%2H",
\&...)\*(C'\fR would return both the unpacked result and the checksum on the stack,
as would \f(CW\*(C`unpack("%2u", ...)\*(C'\fR [perl #73814] (5.12.2).
.SS "Fixes to Various Perl Operators"
.IX Subsection "Fixes to Various Perl Operators"
.IP "\(bu" 4
The \f(CW\*(C`&\*(C'\fR, \f(CW\*(C`|\*(C'\fR, and \f(CW\*(C`^\*(C'\fR bitwise operators no longer coerce read-only arguments
[perl #20661].
.IP "\(bu" 4
Stringifying a scalar containing \*(L"\-0.0\*(R" no longer has the effect of turning
false into true [perl #45133].
.IP "\(bu" 4
Some numeric operators were converting integers to floating point,
resulting in loss of precision on 64\-bit platforms [perl #77456].
.IP "\(bu" 4
\&\fIsprintf()\fR was ignoring locales when called with constant arguments
[perl #78632].
.IP "\(bu" 4
Combining the vector (\f(CW%v\fR) flag and dynamic precision would
cause \f(CW\*(C`sprintf\*(C'\fR to confuse the order of its arguments, making it 
treat the string as the precision and vice-versa [perl #83194].
.SS "Bugs Relating to the C \s-1API\s0"
.IX Subsection "Bugs Relating to the C API"
.IP "\(bu" 4
The C\-level \f(CW\*(C`lex_stuff_pvn\*(C'\fR function would sometimes cause a spurious
syntax error on the last line of the file if it lacked a final semicolon
[perl #74006] (5.12.1).
.IP "\(bu" 4
The \f(CW\*(C`eval_sv\*(C'\fR and \f(CW\*(C`eval_pv\*(C'\fR C functions now set \f(CW$@\fR correctly when
there is a syntax error and no \f(CW\*(C`G_KEEPERR\*(C'\fR flag, and never set it if the
\&\f(CW\*(C`G_KEEPERR\*(C'\fR flag is present [perl #3719].
.IP "\(bu" 4
The \s-1XS\s0 multicall \s-1API\s0 no longer causes subroutines to lose reference counts
if called via the multicall interface from within those very subroutines.
This affects modules like List::Util.  Calling one of its functions with an
active subroutine as the first argument could cause a crash [perl #78070].
.IP "\(bu" 4
The \f(CW\*(C`SvPVbyte\*(C'\fR function available to \s-1XS\s0 modules now calls magic before
downgrading the \s-1SV,\s0 to avoid warnings about wide characters [perl #72398].
.IP "\(bu" 4
The ref types in the typemap for \s-1XS\s0 bindings now support magical variables
[perl #72684].
.IP "\(bu" 4
\&\f(CW\*(C`sv_catsv_flags\*(C'\fR no longer calls \f(CW\*(C`mg_get\*(C'\fR on its second argument (the
source string) if the flags passed to it do not include \s-1SV_GMAGIC. \s0 So it
now matches the documentation.
.IP "\(bu" 4
\&\f(CW\*(C`my_strftime\*(C'\fR no longer leaks memory.  This fixes a memory leak in
\&\f(CW\*(C`POSIX::strftime\*(C'\fR [perl #73520].
.IP "\(bu" 4
\&\fI\s-1XSUB\s0.h\fR now correctly redefines fgets under \s-1PERL_IMPLICIT_SYS\s0 [perl #55049]
(5.12.1).
.IP "\(bu" 4
\&\s-1XS\s0 code using \fIfputc()\fR or \fIfputs()\fR on Windows could cause an error
due to their arguments being swapped [perl #72704] (5.12.1).
.IP "\(bu" 4
A possible segfault in the \f(CW\*(C`T_PTROBJ\*(C'\fR default typemap has been fixed
(5.12.2).
.IP "\(bu" 4
A bug that could cause \*(L"Unknown error\*(R" messages when
\&\f(CW\*(C`call_sv(code, G_EVAL)\*(C'\fR is called from an \s-1XS\s0 destructor has been fixed
(5.12.2).
.SH "Known Problems"
.IX Header "Known Problems"
This is a list of significant unresolved issues which are regressions
from earlier versions of Perl or which affect widely-used \s-1CPAN\s0 modules.
.IP "\(bu" 4
\&\f(CW\*(C`List::Util::first\*(C'\fR misbehaves in the presence of a lexical \f(CW$_\fR
(typically introduced by \f(CW\*(C`my $_\*(C'\fR or implicitly by \f(CW\*(C`given\*(C'\fR).  The variable
that gets set for each iteration is the package variable \f(CW$_\fR, not the
lexical \f(CW$_\fR.
.Sp
A similar issue may occur in other modules that provide functions which
take a block as their first argument, like
.Sp
.Vb 1
\&    foo { ... $_ ...} list
.Ve
.Sp
See also: <http://rt.perl.org/rt3/Public/Bug/Display.html?id=67694>
.IP "\(bu" 4
\&\fIreadline()\fR returns an empty string instead of a cached previous value
when it is interrupted by a signal
.IP "\(bu" 4
The changes in prototype handling break Switch.  A patch has been sent
upstream and will hopefully appear on \s-1CPAN\s0 soon.
.IP "\(bu" 4
The upgrade to \fIExtUtils\-MakeMaker\-6.57_05\fR has caused
some tests in the \fIModule-Install\fR distribution on \s-1CPAN\s0 to
fail. (Specifically, \fI02_mymeta.t\fR tests 5 and 21; \fI18_all_from.t\fR
tests 6 and 15; \fI19_authors.t\fR tests 5, 13, 21, and 29; and
\&\fI20_authors_with_special_characters.t\fR tests 6, 15, and 23 in version
1.00 of that distribution now fail.)
.IP "\(bu" 4
On \s-1VMS, \s0\f(CW\*(C`Time::HiRes\*(C'\fR tests will fail due to a bug in the \s-1CRTL\s0's
implementation of \f(CW\*(C`setitimer\*(C'\fR: previous timer values would be cleared
if a timer expired but not if the timer was reset before expiring.  \s-1HP\s0
OpenVMS Engineering have corrected the problem and will release a patch
in due course (Quix case # \s-1QXCM1001115136\s0).
.IP "\(bu" 4
On \s-1VMS,\s0 there were a handful of \f(CW\*(C`Module::Build\*(C'\fR test failures we didn't
get to before the release; please watch \s-1CPAN\s0 for updates.
.SH "Errata"
.IX Header "Errata"
.SS "\fIkeys()\fP, \fIvalues()\fP, and \fIeach()\fP work on arrays"
.IX Subsection "keys(), values(), and each() work on arrays"
You can now use the \fIkeys()\fR, \fIvalues()\fR, and \fIeach()\fR builtins on arrays;
previously you could use them only on hashes.  See perlfunc for details.
This is actually a change introduced in perl 5.12.0, but it was missed from
that release's perl5120delta.
.ie n .SS "\fIsplit()\fP and @_"
.el .SS "\fIsplit()\fP and \f(CW@_\fP"
.IX Subsection "split() and @_"
\&\fIsplit()\fR no longer modifies \f(CW@_\fR when called in scalar or void context.
In void context it now produces a \*(L"Useless use of split\*(R" warning.
This was also a perl 5.12.0 change that missed the perldelta.
.SH "Obituary"
.IX Header "Obituary"
Randy Kobes, creator of http://kobesearch.cpan.org/ and
contributor/maintainer to several core Perl toolchain modules, passed
away on September 18, 2010 after a battle with lung cancer.  The community
was richer for his involvement.  He will be missed.
.SH "Acknowledgements"
.IX Header "Acknowledgements"
Perl 5.14.0 represents one year of development since
Perl 5.12.0 and contains nearly 550,000 lines of changes across nearly
3,000 files from 150 authors and committers.
.PP
Perl continues to flourish into its third decade thanks to a vibrant
community of users and developers.  The following people are known to
have contributed the improvements that became Perl 5.14.0:
.PP
Aaron Crane, Abhijit Menon-Sen, Abigail, \*(Aevar Arnfjo\*:r\*(d- Bjarmason,
Alastair Douglas, Alexander Alekseev, Alexander Hartmaier, Alexandr
Ciornii, Alex Davies, Alex Vandiver, Ali Polatel, Allen Smith, Andreas
Ko\*:nig, Andrew Rodland, Andy Armstrong, Andy Dougherty, Aristotle
Pagaltzis, Arkturuz, Arvan, A. Sinan Unur, Ben Morrow, Bo Lindbergh,
Boris Ratner, Brad Gilbert, Bram, brian d foy, Brian Phillips, Casey
West, Charles Bailey, Chas. Owens, Chip Salzenberg, Chris 'BinGOs'
Williams, chromatic, Craig A. Berry, Curtis Jewell, Dagfinn Ilmari
Mannsa\*oker, Dan Dascalescu, Dave Rolsky, David Caldwell, David Cantrell,
David Golden, David Leadbeater, David Mitchell, David Wheeler, Eric
Brine, Father Chrysostomos, Fingle Nark, Florian Ragwitz, Frank Wiegand,
Franz Fasching, Gene Sullivan, George Greer, Gerard Goossen, Gisle Aas,
Goro Fuji, Grant McLean, gregor herrmann, H.Merijn Brand, Hongwen Qiu,
Hugo van der Sanden, Ian Goodacre, James E Keenan, James Mastros, Jan
Dubois, Jay Hannah, Jerry D. Hedden, Jesse Vincent, Jim Cromie, Jirka
HruXka, John Peacock, Joshua ben Jore, Joshua Pritikin, Karl Williamson,
Kevin Ryde, kmx, Lars \s-1DXXXXXX XXX,\s0 Larwan Berke, Leon Brocard, Leon
Timmermans, Lubomir Rintel, Lukas Mai, Maik Hentsche, Marty Pauley,
Marvin Humphrey, Matt Johnson, Matt S Trout, Max Maischein, Michael
Breen, Michael Fig, Michael G Schwern, Michael Parker, Michael Stevens,
Michael Witten, Mike Kelly, Moritz Lenz, Nicholas Clark, Nick Cleaton,
Nick Johnston, Nicolas Kaiser, Niko Tyni, Noirin Shirley, Nuno Carvalho,
Paul Evans, Paul Green, Paul Johnson, Paul Marquess, Peter J. Holzer,
Peter John Acklam, Peter Martini, Philippe Bruhat (BooK), Piotr Fusik,
Rafael Garcia-Suarez, Rainer Tammer, Reini Urban, Renee Baecker, Ricardo
Signes, Richard Mo\*:hn, Richard Soderberg, Rob Hoelz, Robin Barker, Ruslan
Zakirov, Salvador Fandin\*~o, Salvador Ortiz Garcia, Shlomi Fish, Sinan
Unur, Sisyphus, Slaven Rezic, Steffen Mu\*:ller, Steve Hay, Steven
Schubiger, Steve Peters, Sullivan Beck, Tatsuhiko Miyagawa, Tim Bunce,
Todd Rinaldo, Tom Christiansen, Tom Hukins, Tony Cook, Tye McQueen,
Vadim Konovalov, Vernon Lyon, Vincent Pit, Walt Mankowski, Wolfram
Humann, Yves Orton, Zefram, and Zsba\*'n Ambrus.
.PP
This is woefully incomplete as it's automatically generated from version
control history.  In particular, it doesn't include the names of the
(very much appreciated) contributors who reported issues in previous
versions of Perl that helped make Perl 5.14.0 better. For a more complete
list of all of Perl's historical contributors, please see the \f(CW\*(C`AUTHORS\*(C'\fR
file in the Perl 5.14.0 distribution.
.PP
Many of the changes included in this version originated in the \s-1CPAN\s0
modules included in Perl's core. We're grateful to the entire \s-1CPAN\s0
community for helping Perl to flourish.
.SH "Reporting Bugs"
.IX Header "Reporting Bugs"
If you find what you think is a bug, you might check the articles
recently posted to the comp.lang.perl.misc newsgroup and the Perl
bug database at http://rt.perl.org/perlbug/ .  There may also be
information at http://www.perl.org/ , the Perl Home Page.
.PP
If you believe you have an unreported bug, please run the perlbug
program included with your release.  Be sure to trim your bug down
to a tiny but sufficient test case.  Your bug report, along with the
output of \f(CW\*(C`perl \-V\*(C'\fR, will be sent off to perlbug@perl.org to be
analysed by the Perl porting team.
.PP
If the bug you are reporting has security implications, which make it
inappropriate to send to a publicly archived mailing list, then please send
it to perl5\-security\-report@perl.org.  This points to a closed subscription
unarchived mailing list, which includes all the core committers, who are able
to help assess the impact of issues, figure out a resolution, and help
co-ordinate the release of patches to mitigate or fix the problem across all
platforms on which Perl is supported.  Please use this address for
security issues in the Perl core \fIonly\fR, not for modules independently
distributed on \s-1CPAN.\s0
.SH "SEE ALSO"
.IX Header "SEE ALSO"
The \fIChanges\fR file for an explanation of how to view exhaustive details
on what changed.
.PP
The \fI\s-1INSTALL\s0\fR file for how to build Perl.
.PP
The \fI\s-1README\s0\fR file for general stuff.
.PP
The \fIArtistic\fR and \fICopying\fR files for copyright information.
                                                                                                  osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perl5140delta5.16.1                          0100644 0001750 0001750 00000530641 12566207412 023546  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERL5140DELTA 1"
.TH PERL5140DELTA 1 "2013-03-04" "perl v5.16.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perl5140delta \- what is new for perl v5.14.0
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document describes differences between the 5.12.0 release and
the 5.14.0 release.
.PP
If you are upgrading from an earlier release such as 5.10.0, first read
perl5120delta, which describes differences between 5.10.0 and
5.12.0.
.PP
Some of the bug fixes in this release have been backported to subsequent
releases of 5.12.x.  Those are indicated with the 5.12.x version in
parentheses.
.SH "Notice"
.IX Header "Notice"
As described in perlpolicy, the release of Perl 5.14.0 marks the
official end of support for Perl 5.10.  Users of Perl 5.10 or earlier
should consider upgrading to a more recent release of Perl.
.SH "Core Enhancements"
.IX Header "Core Enhancements"
.SS "Unicode"
.IX Subsection "Unicode"
\fIUnicode Version 6.0 is now supported (mostly)\fR
.IX Subsection "Unicode Version 6.0 is now supported (mostly)"
.PP
Perl comes with the Unicode 6.0 data base updated with
Corrigendum #8 <http://www.unicode.org/versions/corrigendum8.html>,
with one exception noted below.
See <http://unicode.org/versions/Unicode6.0.0/> for details on the new
release.  Perl does not support any Unicode provisional properties,
including the new ones for this release.
.PP
Unicode 6.0 has chosen to use the name \f(CW\*(C`BELL\*(C'\fR for the character at U+1F514,
which is a symbol that looks like a bell, and is used in Japanese cell
phones.  This conflicts with the long-standing Perl usage of having
\&\f(CW\*(C`BELL\*(C'\fR mean the \s-1ASCII\s0 \f(CW\*(C`BEL\*(C'\fR character, U+0007.  In Perl 5.14,
\&\f(CW\*(C`\eN{BELL}\*(C'\fR continues to mean U+0007, but its use generates a
deprecation warning message unless such warnings are turned off.  The
new name for U+0007 in Perl is \f(CW\*(C`ALERT\*(C'\fR, which corresponds nicely
with the existing shorthand sequence for it, \f(CW"\ea"\fR.  \f(CW\*(C`\eN{BEL}\*(C'\fR
means U+0007, with no warning given.  The character at U+1F514 has no
name in 5.14, but can be referred to by \f(CW\*(C`\eN{U+1F514}\*(C'\fR. 
In Perl 5.16, \f(CW\*(C`\eN{BELL}\*(C'\fR will refer to U+1F514; all code
that uses \f(CW\*(C`\eN{BELL}\*(C'\fR should be converted to use \f(CW\*(C`\eN{ALERT}\*(C'\fR,
\&\f(CW\*(C`\eN{BEL}\*(C'\fR, or \f(CW"\ea"\fR before upgrading.
.PP
\fIFull functionality for \f(CI\*(C`use feature \*(Aqunicode_strings\*(Aq\*(C'\fI\fR
.IX Subsection "Full functionality for use feature unicode_strings"
.PP
This release provides full functionality for \f(CW\*(C`use feature
\&\*(Aqunicode_strings\*(Aq\*(C'\fR.  Under its scope, all string operations executed and
regular expressions compiled (even if executed outside its scope) have
Unicode semantics.  See \*(L"the 'unicode_strings' feature\*(R" in feature.
However, see \*(L"Inverted bracketed character classes and multi-character folds\*(R",
below.
.PP
This feature avoids most forms of the \*(L"Unicode Bug\*(R" (see
\&\*(L"The \*(R"Unicode Bug"" in perlunicode for details).  If there is any
possibility that your code will process Unicode strings, you are
\&\fIstrongly\fR encouraged to use this subpragma to avoid nasty surprises.
.PP
\fI\f(CI\*(C`\eN{\f(CINAME\f(CI}\*(C'\fI and \f(CI\*(C`charnames\*(C'\fI enhancements\fR
.IX Subsection "N{NAME} and charnames enhancements"
.IP "\(bu" 4
\&\f(CW\*(C`\eN{\f(CINAME\f(CW}\*(C'\fR and \f(CW\*(C`charnames::vianame\*(C'\fR now know about the abbreviated
character names listed by Unicode, such as \s-1NBSP\s0, \s-1SHY\s0, \s-1LRO\s0, \s-1ZWJ\s0, etc.; all
customary abbreviations for the C0 and C1 control characters (such as
\&\s-1ACK\s0, \s-1BEL\s0, \s-1CAN\s0, etc.); and a few new variants of some C1 full names that
are in common usage.
.IP "\(bu" 4
Unicode has several \fInamed character sequences\fR, in which particular sequences
of code points are given names.  \f(CW\*(C`\eN{\f(CINAME\f(CW}\*(C'\fR now recognizes these.
.IP "\(bu" 4
\&\f(CW\*(C`\eN{\f(CINAME\f(CW}\*(C'\fR, \f(CW\*(C`charnames::vianame\*(C'\fR, and \f(CW\*(C`charnames::viacode\*(C'\fR
now know about every character in Unicode.  In earlier releases of
Perl, they didn't know about the Hangul syllables nor several
\&\s-1CJK\s0 (Chinese/Japanese/Korean) characters.
.IP "\(bu" 4
It is now possible to override Perl's abbreviations with your own custom aliases.
.IP "\(bu" 4
You can now create a custom alias of the ordinal of a
character, known by \f(CW\*(C`\eN{\f(CINAME\f(CW}\*(C'\fR, \f(CW\*(C`charnames::vianame()\*(C'\fR, and
\&\f(CW\*(C`charnames::viacode()\*(C'\fR.  Previously, aliases had to be to official
Unicode character names.  This made it impossible to create an alias for
unnamed code points, such as those reserved for private
use.
.IP "\(bu" 4
The new function \fIcharnames::string_vianame()\fR is a run-time version
of \f(CW\*(C`\eN{\f(CINAME\f(CW}}\*(C'\fR, returning the string of characters whose Unicode
name is its parameter.  It can handle Unicode named character
sequences, whereas the pre-existing \fIcharnames::vianame()\fR cannot,
as the latter returns a single code point.
.PP
See charnames for details on all these changes.
.PP
\fINew warnings categories for problematic (non\-)Unicode code points.\fR
.IX Subsection "New warnings categories for problematic (non-)Unicode code points."
.PP
Three new warnings subcategories of \*(L"utf8\*(R" have been added.  These
allow you to turn off some \*(L"utf8\*(R" warnings, while allowing
other warnings to remain on.  The three categories are:
\&\f(CW\*(C`surrogate\*(C'\fR when \s-1UTF\-16\s0 surrogates are encountered;
\&\f(CW\*(C`nonchar\*(C'\fR when Unicode non-character code points are encountered;
and \f(CW\*(C`non_unicode\*(C'\fR when code points above the legal Unicode
maximum of 0x10FFFF are encountered.
.PP
\fIAny unsigned value can be encoded as a character\fR
.IX Subsection "Any unsigned value can be encoded as a character"
.PP
With this release, Perl is adopting a model that any unsigned value
can be treated as a code point and encoded internally (as utf8)
without warnings, not just the code points that are legal in Unicode.
However, unless utf8 or the corresponding sub-category (see previous
item) of lexical warnings have been explicitly turned off, outputting
or executing a Unicode-defined operation such as upper-casing
on such a code point generates a warning.  Attempting to input these
using strict rules (such as with the \f(CW\*(C`:encoding(UTF\-8)\*(C'\fR layer)
will continue to fail.  Prior to this release, handling was
inconsistent and in places, incorrect.
.PP
Unicode non-characters, some of which previously were erroneously
considered illegal in places by Perl, contrary to the Unicode Standard,
are now always legal internally.  Inputting or outputting them 
works the same as with the non-legal Unicode code points, because the Unicode
Standard says they are (only) illegal for \*(L"open interchange\*(R".
.PP
\fIUnicode database files not installed\fR
.IX Subsection "Unicode database files not installed"
.PP
The Unicode database files are no longer installed with Perl.  This
doesn't affect any functionality in Perl and saves significant disk
space.  If you need these files, you can download them from
<http://www.unicode.org/Public/zipped/6.0.0/>.
.SS "Regular Expressions"
.IX Subsection "Regular Expressions"
\fI\f(CI\*(C`(?^...)\*(C'\fI construct signifies default modifiers\fR
.IX Subsection "(?^...) construct signifies default modifiers"
.PP
An \s-1ASCII\s0 caret \f(CW"^"\fR immediately following a \f(CW"(?"\fR in a regular
expression now means that the subexpression does not inherit surrounding
modifiers such as \f(CW\*(C`/i\*(C'\fR, but reverts to the Perl defaults.  Any modifiers
following the caret override the defaults.
.PP
Stringification of regular expressions now uses this notation.  
For example, \f(CW\*(C`qr/hlagh/i\*(C'\fR would previously be stringified as
\&\f(CW\*(C`(?i\-xsm:hlagh)\*(C'\fR, but now it's stringified as \f(CW\*(C`(?^i:hlagh)\*(C'\fR.
.PP
The main purpose of this change is to allow tests that rely on the
stringification \fInot\fR to have to change whenever new modifiers are added.
See \*(L"Extended Patterns\*(R" in perlre.
.PP
This change is likely to break code that compares stringified regular
expressions with fixed strings containing \f(CW\*(C`?\-xism\*(C'\fR.
.PP
\fI\f(CI\*(C`/d\*(C'\fI, \f(CI\*(C`/l\*(C'\fI, \f(CI\*(C`/u\*(C'\fI, and \f(CI\*(C`/a\*(C'\fI modifiers\fR
.IX Subsection "/d, /l, /u, and /a modifiers"
.PP
Four new regular expression modifiers have been added.  These are mutually
exclusive: one only can be turned on at a time.
.IP "\(bu" 4
The \f(CW\*(C`/l\*(C'\fR modifier says to compile the regular expression as if it were
in the scope of \f(CW\*(C`use locale\*(C'\fR, even if it is not.
.IP "\(bu" 4
The \f(CW\*(C`/u\*(C'\fR modifier says to compile the regular expression as if it were
in the scope of a \f(CW\*(C`use feature \*(Aqunicode_strings\*(Aq\*(C'\fR pragma.
.IP "\(bu" 4
The \f(CW\*(C`/d\*(C'\fR (default) modifier is used to override any \f(CW\*(C`use locale\*(C'\fR and
\&\f(CW\*(C`use feature \*(Aqunicode_strings\*(Aq\*(C'\fR pragmas in effect at the time
of compiling the regular expression.
.IP "\(bu" 4
The \f(CW\*(C`/a\*(C'\fR regular expression modifier restricts \f(CW\*(C`\es\*(C'\fR, \f(CW\*(C`\ed\*(C'\fR and \f(CW\*(C`\ew\*(C'\fR and
the \s-1POSIX\s0 (\f(CW\*(C`[[:posix:]]\*(C'\fR) character classes to the \s-1ASCII\s0 range.  Their
complements and \f(CW\*(C`\eb\*(C'\fR and \f(CW\*(C`\eB\*(C'\fR are correspondingly
affected.  Otherwise, \f(CW\*(C`/a\*(C'\fR behaves like the \f(CW\*(C`/u\*(C'\fR modifier, in that
case-insensitive matching uses Unicode semantics.
.Sp
If the \f(CW\*(C`/a\*(C'\fR modifier is repeated, then additionally in case-insensitive
matching, no \s-1ASCII\s0 character can match a non-ASCII character.
For example,
.Sp
.Vb 2
\&    "k"     =~ /\eN{KELVIN SIGN}/ai
\&    "\exDF" =~ /ss/ai
.Ve
.Sp
match but
.Sp
.Vb 2
\&    "k"    =~ /\eN{KELVIN SIGN}/aai
\&    "\exDF" =~ /ss/aai
.Ve
.Sp
do not match.
.PP
See \*(L"Modifiers\*(R" in perlre for more detail.
.PP
\fINon-destructive substitution\fR
.IX Subsection "Non-destructive substitution"
.PP
The substitution (\f(CW\*(C`s///\*(C'\fR) and transliteration
(\f(CW\*(C`y///\*(C'\fR) operators now support an \f(CW\*(C`/r\*(C'\fR option that
copies the input variable, carries out the substitution on
the copy, and returns the result.  The original remains unmodified.
.PP
.Vb 3
\&  my $old = "cat";
\&  my $new = $old =~ s/cat/dog/r;
\&  # $old is "cat" and $new is "dog"
.Ve
.PP
This is particularly useful with \f(CW\*(C`map\*(C'\fR.  See perlop for more examples.
.PP
\fIRe-entrant regular expression engine\fR
.IX Subsection "Re-entrant regular expression engine"
.PP
It is now safe to use regular expressions within \f(CW\*(C`(?{...})\*(C'\fR and
\&\f(CW\*(C`(??{...})\*(C'\fR code blocks inside regular expressions.
.PP
These blocks are still experimental, however, and still have problems with
lexical (\f(CW\*(C`my\*(C'\fR) variables and abnormal exiting.
.PP
\fI\f(CI\*(C`use re \*(Aq/flags\*(Aq\*(C'\fI\fR
.IX Subsection "use re /flags"
.PP
The \f(CW\*(C`re\*(C'\fR pragma now has the ability to turn on regular expression flags
till the end of the lexical scope:
.PP
.Vb 2
\&    use re "/x";
\&    "foo" =~ / (.+) /;  # /x implied
.Ve
.PP
See \*(L"'/flags' mode\*(R" in re for details.
.PP
\fI\eo{...} for octals\fR
.IX Subsection "o{...} for octals"
.PP
There is a new octal escape sequence, \f(CW"\eo"\fR, in doublequote-like
contexts.  This construct allows large octal ordinals beyond the
current max of 0777 to be represented.  It also allows you to specify a
character in octal which can safely be concatenated with other regex
snippets and which won't be confused with being a backreference to
a regex capture group.  See \*(L"Capture groups\*(R" in perlre.
.PP
\fIAdd \f(CI\*(C`\ep{Titlecase}\*(C'\fI as a synonym for \f(CI\*(C`\ep{Title}\*(C'\fI\fR
.IX Subsection "Add p{Titlecase} as a synonym for p{Title}"
.PP
This synonym is added for symmetry with the Unicode property names
\&\f(CW\*(C`\ep{Uppercase}\*(C'\fR and \f(CW\*(C`\ep{Lowercase}\*(C'\fR.
.PP
\fIRegular expression debugging output improvement\fR
.IX Subsection "Regular expression debugging output improvement"
.PP
Regular expression debugging output (turned on by \f(CW\*(C`use re \*(Aqdebug\*(Aq\*(C'\fR) now
uses hexadecimal when escaping non-ASCII characters, instead of octal.
.PP
\fIReturn value of \f(CI\*(C`delete $+{...}\*(C'\fI\fR
.IX Subsection "Return value of delete $+{...}"
.PP
Custom regular expression engines can now determine the return value of
\&\f(CW\*(C`delete\*(C'\fR on an entry of \f(CW\*(C`%+\*(C'\fR or \f(CW\*(C`%\-\*(C'\fR.
.SS "Syntactical Enhancements"
.IX Subsection "Syntactical Enhancements"
\fIArray and hash container functions accept references\fR
.IX Subsection "Array and hash container functions accept references"
.PP
\&\fBWarning:\fR This feature is considered experimental, as the exact behaviour
may change in a future version of Perl.
.PP
All builtin functions that operate directly on array or hash
containers now also accept unblessed hard references to arrays
or hashes:
.PP
.Vb 10
\&  |\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-|
\&  | Traditional syntax         | Terse syntax              |
\&  |\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-|
\&  | push @$arrayref, @stuff    | push $arrayref, @stuff    |
\&  | unshift @$arrayref, @stuff | unshift $arrayref, @stuff |
\&  | pop @$arrayref             | pop $arrayref             |
\&  | shift @$arrayref           | shift $arrayref           |
\&  | splice @$arrayref, 0, 2    | splice $arrayref, 0, 2    |
\&  | keys %$hashref             | keys $hashref             |
\&  | keys @$arrayref            | keys $arrayref            |
\&  | values %$hashref           | values $hashref           |
\&  | values @$arrayref          | values $arrayref          |
\&  | ($k,$v) = each %$hashref   | ($k,$v) = each $hashref   |
\&  | ($k,$v) = each @$arrayref  | ($k,$v) = each $arrayref  |
\&  |\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-|
.Ve
.PP
This allows these builtin functions to act on long dereferencing chains
or on the return value of subroutines without needing to wrap them in
\&\f(CW\*(C`@{}\*(C'\fR or \f(CW\*(C`%{}\*(C'\fR:
.PP
.Vb 2
\&  push @{$obj\->tags}, $new_tag;  # old way
\&  push $obj\->tags,    $new_tag;  # new way
\&
\&  for ( keys %{$hoh\->{genres}{artists}} ) {...} # old way 
\&  for ( keys $hoh\->{genres}{artists}    ) {...} # new way
.Ve
.PP
\fISingle term prototype\fR
.IX Subsection "Single term prototype"
.PP
The \f(CW\*(C`+\*(C'\fR prototype is a special alternative to \f(CW\*(C`$\*(C'\fR that acts like
\&\f(CW\*(C`\e[@%]\*(C'\fR when given a literal array or hash variable, but will otherwise
force scalar context on the argument.  See \*(L"Prototypes\*(R" in perlsub.
.PP
\fI\f(CI\*(C`package\*(C'\fI block syntax\fR
.IX Subsection "package block syntax"
.PP
A package declaration can now contain a code block, in which case the
declaration is in scope inside that block only.  So \f(CW\*(C`package Foo { ... }\*(C'\fR
is precisely equivalent to \f(CW\*(C`{ package Foo; ... }\*(C'\fR.  It also works with
a version number in the declaration, as in \f(CW\*(C`package Foo 1.2 { ... }\*(C'\fR, 
which is its most attractive feature.  See perlfunc.
.PP
\fIStatement labels can appear in more places\fR
.IX Subsection "Statement labels can appear in more places"
.PP
Statement labels can now occur before any type of statement or declaration,
such as \f(CW\*(C`package\*(C'\fR.
.PP
\fIStacked labels\fR
.IX Subsection "Stacked labels"
.PP
Multiple statement labels can now appear before a single statement.
.PP
\fIUppercase X/B allowed in hexadecimal/binary literals\fR
.IX Subsection "Uppercase X/B allowed in hexadecimal/binary literals"
.PP
Literals may now use either upper case \f(CW\*(C`0X...\*(C'\fR or \f(CW\*(C`0B...\*(C'\fR prefixes,
in addition to the already supported \f(CW\*(C`0x...\*(C'\fR and \f(CW\*(C`0b...\*(C'\fR
syntax [perl #76296].
.PP
C, Ruby, Python, and \s-1PHP\s0 already support this syntax, and it makes
Perl more internally consistent: a round-trip with \f(CW\*(C`eval sprintf
"%#X", 0x10\*(C'\fR now returns \f(CW16\fR, just like \f(CW\*(C`eval sprintf "%#x", 0x10\*(C'\fR.
.PP
\fIOverridable tie functions\fR
.IX Subsection "Overridable tie functions"
.PP
\&\f(CW\*(C`tie\*(C'\fR, \f(CW\*(C`tied\*(C'\fR and \f(CW\*(C`untie\*(C'\fR can now be overridden [perl #75902].
.SS "Exception Handling"
.IX Subsection "Exception Handling"
To make them more reliable and consistent, several changes have been made
to how \f(CW\*(C`die\*(C'\fR, \f(CW\*(C`warn\*(C'\fR, and \f(CW$@\fR behave.
.IP "\(bu" 4
When an exception is thrown inside an \f(CW\*(C`eval\*(C'\fR, the exception is no
longer at risk of being clobbered by destructor code running during unwinding.
Previously, the exception was written into \f(CW$@\fR
early in the throwing process, and would be overwritten if \f(CW\*(C`eval\*(C'\fR was
used internally in the destructor for an object that had to be freed
while exiting from the outer \f(CW\*(C`eval\*(C'\fR.  Now the exception is written
into \f(CW$@\fR last thing before exiting the outer \f(CW\*(C`eval\*(C'\fR, so the code
running immediately thereafter can rely on the value in \f(CW$@\fR correctly
corresponding to that \f(CW\*(C`eval\*(C'\fR.  (\f(CW$@\fR is still also set before exiting the
\&\f(CW\*(C`eval\*(C'\fR, for the sake of destructors that rely on this.)
.Sp
Likewise, a \f(CW\*(C`local $@\*(C'\fR inside an \f(CW\*(C`eval\*(C'\fR no longer clobbers any
exception thrown in its scope.  Previously, the restoration of \f(CW$@\fR upon
unwinding would overwrite any exception being thrown.  Now the exception
gets to the \f(CW\*(C`eval\*(C'\fR anyway.  So \f(CW\*(C`local $@\*(C'\fR is safe before a \f(CW\*(C`die\*(C'\fR.
.Sp
Exceptions thrown from object destructors no longer modify the \f(CW$@\fR
of the surrounding context.  (If the surrounding context was exception
unwinding, this used to be another way to clobber the exception being
thrown.)  Previously such an exception was
sometimes emitted as a warning, and then either was
string-appended to the surrounding \f(CW$@\fR or completely replaced the
surrounding \f(CW$@\fR, depending on whether that exception and the surrounding
\&\f(CW$@\fR were strings or objects.  Now, an exception in this situation is
always emitted as a warning, leaving the surrounding \f(CW$@\fR untouched.
In addition to object destructors, this also affects any function call
run by \s-1XS\s0 code using the \f(CW\*(C`G_KEEPERR\*(C'\fR flag.
.IP "\(bu" 4
Warnings for \f(CW\*(C`warn\*(C'\fR can now be objects in the same way as exceptions
for \f(CW\*(C`die\*(C'\fR.  If an object-based warning gets the default handling
of writing to standard error, it is stringified as before with the
filename and line number appended.  But a \f(CW$SIG{_\|_WARN_\|_}\fR handler now
receives an object-based warning as an object, where previously it
was passed the result of stringifying the object.
.SS "Other Enhancements"
.IX Subsection "Other Enhancements"
\fIAssignment to \f(CI$0\fI sets the legacy process name with \fIprctl()\fI on Linux\fR
.IX Subsection "Assignment to $0 sets the legacy process name with prctl() on Linux"
.PP
On Linux the legacy process name is now set with \fIprctl\fR\|(2), in
addition to altering the \s-1POSIX\s0 name via \f(CW\*(C`argv[0]\*(C'\fR, as Perl has done
since version 4.000.  Now system utilities that read the legacy process
name such as \fIps\fR, \fItop\fR, and \fIkillall\fR recognize the name you set when
assigning to \f(CW$0\fR.  The string you supply is truncated at 16 bytes;
this limitation is imposed by Linux.
.PP
\fI\fIsrand()\fI now returns the seed\fR
.IX Subsection "srand() now returns the seed"
.PP
This allows programs that need to have repeatable results not to have to come
up with their own seed-generating mechanism.  Instead, they can use \fIsrand()\fR
and stash the return value for future use.  One example is a test program with
too many combinations to test comprehensively in the time available for
each run.  It can test a random subset each time and, should there be a failure,
log the seed used for that run so this can later be used to produce the same results.
.PP
\fIprintf-like functions understand post\-1980 size modifiers\fR
.IX Subsection "printf-like functions understand post-1980 size modifiers"
.PP
Perl's printf and sprintf operators, and Perl's internal printf replacement
function, now understand the C90 size modifiers \*(L"hh\*(R" (\f(CW\*(C`char\*(C'\fR), \*(L"z\*(R"
(\f(CW\*(C`size_t\*(C'\fR), and \*(L"t\*(R" (\f(CW\*(C`ptrdiff_t\*(C'\fR).  Also, when compiled with a C99
compiler, Perl now understands the size modifier \*(L"j\*(R" (\f(CW\*(C`intmax_t\*(C'\fR) 
(but this is not portable).
.PP
So, for example, on any modern machine, \f(CW\*(C`sprintf("%hhd", 257)\*(C'\fR returns \*(L"1\*(R".
.PP
\fINew global variable \f(CI\*(C`${^GLOBAL_PHASE}\*(C'\fI\fR
.IX Subsection "New global variable ${^GLOBAL_PHASE}"
.PP
A new global variable, \f(CW\*(C`${^GLOBAL_PHASE}\*(C'\fR, has been added to allow
introspection of the current phase of the Perl interpreter.  It's explained in
detail in \*(L"${^GLOBAL_PHASE}\*(R" in perlvar and in
\&\*(L"\s-1BEGIN\s0, \s-1UNITCHECK\s0, \s-1CHECK\s0, \s-1INIT\s0 and \s-1END\s0\*(R" in perlmod.
.PP
\fI\f(CI\*(C`\-d:\-foo\*(C'\fI calls \f(CI\*(C`Devel::foo::unimport\*(C'\fI\fR
.IX Subsection "-d:-foo calls Devel::foo::unimport"
.PP
The syntax \fB\-d:foo\fR was extended in 5.6.1 to make \fB\-d:foo=bar\fR
equivalent to \fB\-MDevel::foo=bar\fR, which expands
internally to \f(CW\*(C`use Devel::foo \*(Aqbar\*(Aq\*(C'\fR.
Perl now allows prefixing the module name with \fB\-\fR, with the same
semantics as \fB\-M\fR; that is:
.ie n .IP """\-d:\-foo""" 4
.el .IP "\f(CW\-d:\-foo\fR" 4
.IX Item "-d:-foo"
Equivalent to \fB\-M\-Devel::foo\fR: expands to
\&\f(CW\*(C`no Devel::foo\*(C'\fR and calls \f(CW\*(C`Devel::foo\->unimport()\*(C'\fR
if that method exists.
.ie n .IP """\-d:\-foo=bar""" 4
.el .IP "\f(CW\-d:\-foo=bar\fR" 4
.IX Item "-d:-foo=bar"
Equivalent to \fB\-M\-Devel::foo=bar\fR: expands to \f(CW\*(C`no Devel::foo \*(Aqbar\*(Aq\*(C'\fR,
and calls \f(CW\*(C`Devel::foo\->unimport("bar")\*(C'\fR if that method exists.
.PP
This is particularly useful for suppressing the default actions of a
\&\f(CW\*(C`Devel::*\*(C'\fR module's \f(CW\*(C`import\*(C'\fR method whilst still loading it for debugging.
.PP
\fIFilehandle method calls load IO::File on demand\fR
.IX Subsection "Filehandle method calls load IO::File on demand"
.PP
When a method call on a filehandle would die because the method cannot
be resolved and IO::File has not been loaded, Perl now loads IO::File
via \f(CW\*(C`require\*(C'\fR and attempts method resolution again:
.PP
.Vb 2
\&  open my $fh, ">", $file;
\&  $fh\->binmode(":raw");     # loads IO::File and succeeds
.Ve
.PP
This also works for globs like \f(CW\*(C`STDOUT\*(C'\fR, \f(CW\*(C`STDERR\*(C'\fR, and \f(CW\*(C`STDIN\*(C'\fR:
.PP
.Vb 1
\&  STDOUT\->autoflush(1);
.Ve
.PP
Because this on-demand load happens only if method resolution fails, the
legacy approach of manually loading an IO::File parent class for partial
method support still works as expected:
.PP
.Vb 3
\&  use IO::Handle;
\&  open my $fh, ">", $file;
\&  $fh\->autoflush(1);        # IO::File not loaded
.Ve
.PP
\fIImproved IPv6 support\fR
.IX Subsection "Improved IPv6 support"
.PP
The \f(CW\*(C`Socket\*(C'\fR module provides new affordances for IPv6,
including implementations of the \f(CW\*(C`Socket::getaddrinfo()\*(C'\fR and
\&\f(CW\*(C`Socket::getnameinfo()\*(C'\fR functions, along with related constants and a
handful of new functions.  See Socket.
.PP
\fIDTrace probes now include package name\fR
.IX Subsection "DTrace probes now include package name"
.PP
The \f(CW\*(C`DTrace\*(C'\fR probes now include an additional argument, \f(CW\*(C`arg3\*(C'\fR, which contains
the package the subroutine being entered or left was compiled in.
.PP
For example, using the following DTrace script:
.PP
.Vb 4
\&  perl$target:::sub\-entry
\&  {
\&      printf("%s::%s\en", copyinstr(arg0), copyinstr(arg3));
\&  }
.Ve
.PP
and then running:
.PP
.Vb 1
\&  $ perl \-e \*(Aqsub test { }; test\*(Aq
.Ve
.PP
\&\f(CW\*(C`DTrace\*(C'\fR will print:
.PP
.Vb 1
\&  main::test
.Ve
.SS "New C APIs"
.IX Subsection "New C APIs"
See \*(L"Internal Changes\*(R".
.SH "Security"
.IX Header "Security"
.SS "User-defined regular expression properties"
.IX Subsection "User-defined regular expression properties"
\&\*(L"User-Defined Character Properties\*(R" in perlunicode documented that you can
create custom properties by defining subroutines whose names begin with
\&\*(L"In\*(R" or \*(L"Is\*(R".  However, Perl did not actually enforce that naming
restriction, so \f(CW\*(C`\ep{foo::bar}\*(C'\fR could call \fIfoo::bar()\fR if it existed.  The documented
convention is now enforced.
.PP
Also, Perl no longer allows tainted regular expressions to invoke a
user-defined property.  It simply dies instead [perl #82616].
.SH "Incompatible Changes"
.IX Header "Incompatible Changes"
Perl 5.14.0 is not binary-compatible with any previous stable release.
.PP
In addition to the sections that follow, see \*(L"C \s-1API\s0 Changes\*(R".
.SS "Regular Expressions and String Escapes"
.IX Subsection "Regular Expressions and String Escapes"
\fIInverted bracketed character classes and multi-character folds\fR
.IX Subsection "Inverted bracketed character classes and multi-character folds"
.PP
Some characters match a sequence of two or three characters in \f(CW\*(C`/i\*(C'\fR
regular expression matching under Unicode rules.  One example is
\&\f(CW\*(C`LATIN SMALL LETTER SHARP S\*(C'\fR which matches the sequence \f(CW\*(C`ss\*(C'\fR.
.PP
.Vb 1
\& \*(Aqss\*(Aq =~ /\eA[\eN{LATIN SMALL LETTER SHARP S}]\ez/i  # Matches
.Ve
.PP
This, however, can lead to very counter-intuitive results, especially
when inverted.  Because of this, Perl 5.14 does not use multi-character \f(CW\*(C`/i\*(C'\fR
matching in inverted character classes.
.PP
.Vb 1
\& \*(Aqss\*(Aq =~ /\eA[^\eN{LATIN SMALL LETTER SHARP S}]+\ez/i  # ???
.Ve
.PP
This should match any sequences of characters that aren't the \f(CW\*(C`SHARP S\*(C'\fR
nor what \f(CW\*(C`SHARP S\*(C'\fR matches under \f(CW\*(C`/i\*(C'\fR.  \f(CW"s"\fR isn't \f(CW\*(C`SHARP S\*(C'\fR, but
Unicode says that \f(CW"ss"\fR is what \f(CW\*(C`SHARP S\*(C'\fR matches under \f(CW\*(C`/i\*(C'\fR.  So
which one \*(L"wins\*(R"? Do you fail the match because the string has \f(CW\*(C`ss\*(C'\fR or
accept it because it has an \f(CW\*(C`s\*(C'\fR followed by another \f(CW\*(C`s\*(C'\fR?
.PP
Earlier releases of Perl did allow this multi-character matching,
but due to bugs, it mostly did not work.
.PP
\fI\e400\-\e777\fR
.IX Subsection "400-777"
.PP
In certain circumstances, \f(CW\*(C`\e400\*(C'\fR\-\f(CW\*(C`\e777\*(C'\fR in regexes have behaved
differently than they behave in all other doublequote-like contexts.
Since 5.10.1, Perl has issued a deprecation warning when this happens.
Now, these literals behave the same in all doublequote-like contexts,
namely to be equivalent to \f(CW\*(C`\ex{100}\*(C'\fR\-\f(CW\*(C`\ex{1FF}\*(C'\fR, with no deprecation
warning.
.PP
Use of \f(CW\*(C`\e400\*(C'\fR\-\f(CW\*(C`\e777\*(C'\fR in the command-line option \fB\-0\fR retain their
conventional meaning.  They slurp whole input files; previously, this
was documented only for \fB\-0777\fR.
.PP
Because of various ambiguities, you should use the new
\&\f(CW\*(C`\eo{...}\*(C'\fR construct to represent characters in octal instead.
.PP
\fIMost \f(CI\*(C`\ep{}\*(C'\fI properties are now immune to case-insensitive matching\fR
.IX Subsection "Most p{} properties are now immune to case-insensitive matching"
.PP
For most Unicode properties, it doesn't make sense to have them match
differently under \f(CW\*(C`/i\*(C'\fR case-insensitive matching.  Doing so can lead
to unexpected results and potential security holes.  For example
.PP
.Vb 1
\& m/\ep{ASCII_Hex_Digit}+/i
.Ve
.PP
could previously match non-ASCII characters because of the Unicode
matching rules (although there were several bugs with this).  Now
matching under \f(CW\*(C`/i\*(C'\fR gives the same results as non\-\f(CW\*(C`/i\*(C'\fR matching except
for those few properties where people have come to expect differences,
namely the ones where casing is an integral part of their meaning, such
as \f(CW\*(C`m/\ep{Uppercase}/i\*(C'\fR and \f(CW\*(C`m/\ep{Lowercase}/i\*(C'\fR, both of which match
the same code points as matched by \f(CW\*(C`m/\ep{Cased}/i\*(C'\fR.
Details are in \*(L"Unicode Properties\*(R" in perlrecharclass.
.PP
User-defined property handlers that need to match differently under \f(CW\*(C`/i\*(C'\fR
must be changed to read the new boolean parameter passed to them, which
is non-zero if case-insensitive matching is in effect and 0 otherwise.
See \*(L"User-Defined Character Properties\*(R" in perlunicode.
.PP
\fI\ep{} implies Unicode semantics\fR
.IX Subsection "p{} implies Unicode semantics"
.PP
Specifying a Unicode property in the pattern indicates
that the pattern is meant for matching according to Unicode rules, the way
\&\f(CW\*(C`\eN{\f(CINAME\f(CW}\*(C'\fR does.
.PP
\fIRegular expressions retain their localeness when interpolated\fR
.IX Subsection "Regular expressions retain their localeness when interpolated"
.PP
Regular expressions compiled under \f(CW\*(C`use locale\*(C'\fR now retain this when
interpolated into a new regular expression compiled outside a
\&\f(CW\*(C`use locale\*(C'\fR, and vice-versa.
.PP
Previously, one regular expression interpolated into another inherited
the localeness of the surrounding regex, losing whatever state it
originally had.  This is considered a bug fix, but may trip up code that
has come to rely on the incorrect behaviour.
.PP
\fIStringification of regexes has changed\fR
.IX Subsection "Stringification of regexes has changed"
.PP
Default regular expression modifiers are now notated using
\&\f(CW\*(C`(?^...)\*(C'\fR.  Code relying on the old stringification will fail.  
This is so that when new modifiers are added, such code won't
have to keep changing each time this happens, because the stringification 
will automatically incorporate the new modifiers.
.PP
Code that needs to work properly with both old\- and new-style regexes
can avoid the whole issue by using (for perls since 5.9.5; see re):
.PP
.Vb 2
\& use re qw(regexp_pattern);
\& my ($pat, $mods) = regexp_pattern($re_ref);
.Ve
.PP
If the actual stringification is important or older Perls need to be
supported, you can use something like the following:
.PP
.Vb 2
\&    # Accept both old and new\-style stringification
\&    my $modifiers = (qr/foobar/ =~ /\eQ(?^/) ? "^" : "\-xism";
.Ve
.PP
And then use \f(CW$modifiers\fR instead of \f(CW\*(C`\-xism\*(C'\fR.
.PP
\fIRun-time code blocks in regular expressions inherit pragmata\fR
.IX Subsection "Run-time code blocks in regular expressions inherit pragmata"
.PP
Code blocks in regular expressions (\f(CW\*(C`(?{...})\*(C'\fR and \f(CW\*(C`(??{...})\*(C'\fR) previously
did not inherit pragmata (strict, warnings, etc.) if the regular expression
was compiled at run time as happens in cases like these two:
.PP
.Vb 3
\&  use re "eval";
\&  $foo =~ $bar; # when $bar contains (?{...})
\&  $foo =~ /$bar(?{ $finished = 1 })/;
.Ve
.PP
This bug has now been fixed, but code that relied on the buggy behaviour
may need to be fixed to account for the correct behaviour.
.SS "Stashes and Package Variables"
.IX Subsection "Stashes and Package Variables"
\fILocalised tied hashes and arrays are no longed tied\fR
.IX Subsection "Localised tied hashes and arrays are no longed tied"
.PP
In the following:
.PP
.Vb 6
\&    tie @a, ...;
\&    {
\&            local @a;
\&            # here, @a is a now a new, untied array
\&    }
\&    # here, @a refers again to the old, tied array
.Ve
.PP
Earlier versions of Perl incorrectly tied the new local array.  This has
now been fixed.  This fix could however potentially cause a change in
behaviour of some code.
.PP
\fIStashes are now always defined\fR
.IX Subsection "Stashes are now always defined"
.PP
\&\f(CW\*(C`defined %Foo::\*(C'\fR now always returns true, even when no symbols have yet been
defined in that package.
.PP
This is a side-effect of removing a special-case kludge in the tokeniser,
added for 5.10.0, to hide side-effects of changes to the internal storage of
hashes.  The fix drastically reduces hashes' memory overhead.
.PP
Calling defined on a stash has been deprecated since 5.6.0, warned on
lexicals since 5.6.0, and warned for stashes and other package
variables since 5.12.0.  \f(CW\*(C`defined %hash\*(C'\fR has always exposed an
implementation detail: emptying a hash by deleting all entries from it does
not make \f(CW\*(C`defined %hash\*(C'\fR false.  Hence \f(CW\*(C`defined %hash\*(C'\fR is not valid code to
determine whether an arbitrary hash is empty.  Instead, use the behaviour
of an empty \f(CW%hash\fR always returning false in scalar context.
.PP
\fIClearing stashes\fR
.IX Subsection "Clearing stashes"
.PP
Stash list assignment \f(CW\*(C`%foo:: = ()\*(C'\fR used to make the stash temporarily 
anonymous while it was being emptied.  Consequently, any of its
subroutines referenced elsewhere would become anonymous,  showing up as
\&\*(L"(unknown)\*(R" in \f(CW\*(C`caller\*(C'\fR.  They now retain their package names such that
\&\f(CW\*(C`caller\*(C'\fR returns the original sub name if there is still a reference
to its typeglob and \*(L"foo::_\|_ANON_\|_\*(R" otherwise [perl #79208].
.PP
\fIDereferencing typeglobs\fR
.IX Subsection "Dereferencing typeglobs"
.PP
If you assign a typeglob to a scalar variable:
.PP
.Vb 1
\&    $glob = *foo;
.Ve
.PP
the glob that is copied to \f(CW$glob\fR is marked with a special flag
indicating that the glob is just a copy.  This allows subsequent
assignments to \f(CW$glob\fR to overwrite the glob.  The original glob,
however, is immutable.
.PP
Some Perl operators did not distinguish between these two types of globs.
This would result in strange behaviour in edge cases: \f(CW\*(C`untie $scalar\*(C'\fR
would not untie the scalar if the last thing assigned to it was a glob
(because it treated it as \f(CW\*(C`untie *$scalar\*(C'\fR, which unties a handle).
Assignment to a glob slot (such as \f(CW\*(C`*$glob = \e@some_array\*(C'\fR) would simply
assign \f(CW\*(C`\e@some_array\*(C'\fR to \f(CW$glob\fR.
.PP
To fix this, the \f(CW\*(C`*{}\*(C'\fR operator (including its \f(CW*foo\fR and \f(CW*$foo\fR forms)
has been modified to make a new immutable glob if its operand is a glob
copy.  This allows operators that make a distinction between globs and
scalars to be modified to treat only immutable globs as globs.  (\f(CW\*(C`tie\*(C'\fR,
\&\f(CW\*(C`tied\*(C'\fR and \f(CW\*(C`untie\*(C'\fR have been left as they are for compatibility's sake,
but will warn.  See \*(L"Deprecations\*(R".)
.PP
This causes an incompatible change in code that assigns a glob to the
return value of \f(CW\*(C`*{}\*(C'\fR when that operator was passed a glob copy.  Take the
following code, for instance:
.PP
.Vb 2
\&    $glob = *foo;
\&    *$glob = *bar;
.Ve
.PP
The \f(CW*$glob\fR on the second line returns a new immutable glob.  That new
glob is made an alias to \f(CW*bar\fR.  Then it is discarded.  So the second
assignment has no effect.
.PP
See <http://rt.perl.org/rt3/Public/Bug/Display.html?id=77810> for
more detail.
.PP
\fIMagic variables outside the main package\fR
.IX Subsection "Magic variables outside the main package"
.PP
In previous versions of Perl, magic variables like \f(CW$!\fR, \f(CW%SIG\fR, etc. would
\&\*(L"leak\*(R" into other packages.  So \f(CW%foo::SIG\fR could be used to access signals,
\&\f(CW\*(C`${"foo::!"}\*(C'\fR (with strict mode off) to access C's \f(CW\*(C`errno\*(C'\fR, etc.
.PP
This was a bug, or an \*(L"unintentional\*(R" feature, which caused various ill effects,
such as signal handlers being wiped when modules were loaded, etc.
.PP
This has been fixed (or the feature has been removed, depending on how you see
it).
.PP
\fIlocal($_) strips all magic from \f(CI$_\fI\fR
.IX Subsection "local($_) strips all magic from $_"
.PP
\&\fIlocal()\fR on scalar variables gives them a new value but keeps all
their magic intact.  This has proven problematic for the default
scalar variable \f(CW$_\fR, where perlsub recommends that any subroutine
that assigns to \f(CW$_\fR should first localize it.  This would throw an
exception if \f(CW$_\fR is aliased to a read-only variable, and could in general have
various unintentional side-effects.
.PP
Therefore, as an exception to the general rule, local($_) will not
only assign a new value to \f(CW$_\fR, but also remove all existing magic from
it as well.
.PP
\fIParsing of package and variable names\fR
.IX Subsection "Parsing of package and variable names"
.PP
Parsing the names of packages and package variables has changed: 
multiple adjacent pairs of colons, as in \f(CW\*(C`foo::::bar\*(C'\fR, are now all 
treated as package separators.
.PP
Regardless of this change, the exact parsing of package separators has
never been guaranteed and is subject to change in future Perl versions.
.SS "Changes to Syntax or to Perl Operators"
.IX Subsection "Changes to Syntax or to Perl Operators"
\fI\f(CI\*(C`given\*(C'\fI return values\fR
.IX Subsection "given return values"
.PP
\&\f(CW\*(C`given\*(C'\fR blocks now return the last evaluated
expression, or an empty list if the block was exited by \f(CW\*(C`break\*(C'\fR.  Thus you
can now write:
.PP
.Vb 8
\&    my $type = do {
\&     given ($num) {
\&      break     when undef;
\&      "integer" when /^[+\-]?[0\-9]+$/;
\&      "float"   when /^[+\-]?[0\-9]+(?:\e.[0\-9]+)?$/;
\&      "unknown";
\&     }
\&    };
.Ve
.PP
See \*(L"Return value\*(R" in perlsyn for details.
.PP
\fIChange in parsing of certain prototypes\fR
.IX Subsection "Change in parsing of certain prototypes"
.PP
Functions declared with the following prototypes now behave correctly as unary
functions:
.PP
.Vb 6
\&  *
\&  \e$ \e% \e@ \e* \e&
\&  \e[...]
\&  ;$ ;*
\&  ;\e$ ;\e% etc.
\&  ;\e[...]
.Ve
.PP
Due to this bug fix [perl #75904], functions
using the \f(CW\*(C`(*)\*(C'\fR, \f(CW\*(C`(;$)\*(C'\fR and \f(CW\*(C`(;*)\*(C'\fR prototypes
are parsed with higher precedence than before.  So
in the following example:
.PP
.Vb 2
\&  sub foo(;$);
\&  foo $a < $b;
.Ve
.PP
the second line is now parsed correctly as \f(CW\*(C`foo($a) < $b\*(C'\fR, rather than
\&\f(CW\*(C`foo($a < $b)\*(C'\fR.  This happens when one of these operators is used in
an unparenthesised argument:
.PP
.Vb 10
\&  < > <= >= lt gt le ge
\&  == != <=> eq ne cmp ~~
\&  &
\&  | ^
\&  &&
\&  || //
\&  .. ...
\&  ?:
\&  = += \-= *= etc.
\&  , =>
.Ve
.PP
\fISmart-matching against array slices\fR
.IX Subsection "Smart-matching against array slices"
.PP
Previously, the following code resulted in a successful match:
.PP
.Vb 3
\&    my @a = qw(a y0 z);
\&    my @b = qw(a x0 z);
\&    @a[0 .. $#b] ~~ @b;
.Ve
.PP
This odd behaviour has now been fixed [perl #77468].
.PP
\fINegation treats strings differently from before\fR
.IX Subsection "Negation treats strings differently from before"
.PP
The unary negation operator, \f(CW\*(C`\-\*(C'\fR, now treats strings that look like numbers
as numbers [perl #57706].
.PP
\fINegative zero\fR
.IX Subsection "Negative zero"
.PP
Negative zero (\-0.0), when converted to a string, now becomes \*(L"0\*(R" on all
platforms.  It used to become \*(L"\-0\*(R" on some, but \*(L"0\*(R" on others.
.PP
If you still need to determine whether a zero is negative, use
\&\f(CW\*(C`sprintf("%g", $zero) =~ /^\-/\*(C'\fR or the Data::Float module on \s-1CPAN\s0.
.PP
\fI\f(CI\*(C`:=\*(C'\fI is now a syntax error\fR
.IX Subsection ":= is now a syntax error"
.PP
Previously \f(CW\*(C`my $pi := 4\*(C'\fR was exactly equivalent to \f(CW\*(C`my $pi : = 4\*(C'\fR,
with the \f(CW\*(C`:\*(C'\fR being treated as the start of an attribute list, ending before
the \f(CW\*(C`=\*(C'\fR.  The use of \f(CW\*(C`:=\*(C'\fR to mean \f(CW\*(C`: =\*(C'\fR was deprecated in 5.12.0, and is
now a syntax error.  This allows future use of \f(CW\*(C`:=\*(C'\fR as a new token.
.PP
Outside the core's tests for it, we find no Perl 5 code on \s-1CPAN\s0
using this construction, so we believe that this change will have
little impact on real-world codebases.
.PP
If it is absolutely necessary to have empty attribute lists (for example,
because of a code generator), simply avoid the error by adding a space before
the \f(CW\*(C`=\*(C'\fR.
.PP
\fIChange in the parsing of identifiers\fR
.IX Subsection "Change in the parsing of identifiers"
.PP
Characters outside the Unicode \*(L"XIDStart\*(R" set are no longer allowed at the
beginning of an identifier.  This means that certain accents and marks
that normally follow an alphabetic character may no longer be the first
character of an identifier.
.SS "Threads and Processes"
.IX Subsection "Threads and Processes"
\fIDirectory handles not copied to threads\fR
.IX Subsection "Directory handles not copied to threads"
.PP
On systems other than Windows that do not have
a \f(CW\*(C`fchdir\*(C'\fR function, newly-created threads no
longer inherit directory handles from their parent threads.  Such programs
would usually have crashed anyway [perl #75154].
.PP
\fI\f(CI\*(C`close\*(C'\fI on shared pipes\fR
.IX Subsection "close on shared pipes"
.PP
To avoid deadlocks, the \f(CW\*(C`close\*(C'\fR function no longer waits for the
child process to exit if the underlying file descriptor is still
in use by another thread.  It returns true in such cases.
.PP
\fI\fIfork()\fI emulation will not wait for signalled children\fR
.IX Subsection "fork() emulation will not wait for signalled children"
.PP
On Windows parent processes would not terminate until all forked
children had terminated first.  However, \f(CW\*(C`kill("KILL", ...)\*(C'\fR is
inherently unstable on pseudo-processes, and \f(CW\*(C`kill("TERM", ...)\*(C'\fR
might not get delivered if the child is blocked in a system call.
.PP
To avoid the deadlock and still provide a safe mechanism to terminate
the hosting process, Perl now no longer waits for children that
have been sent a \s-1SIGTERM\s0 signal.  It is up to the parent process to
\&\fIwaitpid()\fR for these children if child-cleanup processing must be
allowed to finish.  However, it is also then the responsibility of the
parent to avoid the deadlock by making sure the child process
can't be blocked on I/O.
.PP
See perlfork for more information about the \fIfork()\fR emulation on
Windows.
.SS "Configuration"
.IX Subsection "Configuration"
\fINaming fixes in Policy_sh.SH may invalidate Policy.sh\fR
.IX Subsection "Naming fixes in Policy_sh.SH may invalidate Policy.sh"
.PP
Several long-standing typos and naming confusions in \fIPolicy_sh.SH\fR have
been fixed, standardizing on the variable names used in \fIconfig.sh\fR.
.PP
This will change the behaviour of \fIPolicy.sh\fR if you happen to have been
accidentally relying on its incorrect behaviour.
.PP
\fIPerl source code is read in text mode on Windows\fR
.IX Subsection "Perl source code is read in text mode on Windows"
.PP
Perl scripts used to be read in binary mode on Windows for the benefit
of the ByteLoader module (which is no longer part of core Perl).  This
had the side-effect of breaking various operations on the \f(CW\*(C`DATA\*(C'\fR filehandle,
including \fIseek()\fR/\fItell()\fR, and even simply reading from \f(CW\*(C`DATA\*(C'\fR after filehandles
have been flushed by a call to \fIsystem()\fR, backticks, \fIfork()\fR etc.
.PP
The default build options for Windows have been changed to read Perl source
code on Windows in text mode now.  ByteLoader will (hopefully) be updated on
\&\s-1CPAN\s0 to automatically handle this situation [perl #28106].
.SH "Deprecations"
.IX Header "Deprecations"
See also \*(L"Deprecated C APIs\*(R".
.SS "Omitting a space between a regular expression and subsequent word"
.IX Subsection "Omitting a space between a regular expression and subsequent word"
Omitting the space between a regular expression operator or
its modifiers and the following word is deprecated.  For
example, \f(CW\*(C`m/foo/sand $bar\*(C'\fR is for now still parsed
as \f(CW\*(C`m/foo/s and $bar\*(C'\fR, but will now issue a warning.
.ie n .SS """\ec\fIX\fP"""
.el .SS "\f(CW\ec\fP\f(CIX\fP\f(CW\fP"
.IX Subsection "cX"
The backslash-c construct was designed as a way of specifying
non-printable characters, but there were no restrictions (on \s-1ASCII\s0
platforms) on what the character following the \f(CW\*(C`c\*(C'\fR could be.  Now,
a deprecation warning is raised if that character isn't an \s-1ASCII\s0 character.
Also, a deprecation warning is raised for \f(CW"\ec{"\fR (which is the same
as simply saying \f(CW";"\fR).
.ie n .SS """\eb{"" and ""\eB{"""
.el .SS "\f(CW``\eb{''\fP and \f(CW``\eB{''\fP"
.IX Subsection """b{"" and ""B{"""
In regular expressions, a literal \f(CW"{"\fR immediately following a \f(CW"\eb"\fR
(not in a bracketed character class) or a \f(CW"\eB{"\fR is now deprecated
to allow for its future use by Perl itself.
.SS "Perl 4\-era .pl libraries"
.IX Subsection "Perl 4-era .pl libraries"
Perl bundles a handful of library files that predate Perl 5.
This bundling is now deprecated for most of these files, which are now
available from \s-1CPAN\s0.  The affected files now warn when run, if they were
installed as part of the core.
.PP
This is a mandatory warning, not obeying \fB\-X\fR or lexical warning bits.
The warning is modelled on that supplied by \fIdeprecate.pm\fR for
deprecated-in-core \fI.pm\fR libraries.  It points to the specific \s-1CPAN\s0
distribution that contains the \fI.pl\fR libraries.  The \s-1CPAN\s0 versions, of
course, do not generate the warning.
.ie n .SS "List assignment to $["
.el .SS "List assignment to \f(CW$[\fP"
.IX Subsection "List assignment to $["
Assignment to \f(CW$[\fR was deprecated and started to give warnings in
Perl version 5.12.0.  This version of Perl (5.14) now also emits a warning 
when assigning to \f(CW$[\fR in list context.  This fixes an oversight in 5.12.0.
.SS "Use of qw(...) as parentheses"
.IX Subsection "Use of qw(...) as parentheses"
Historically the parser fooled itself into thinking that \f(CW\*(C`qw(...)\*(C'\fR literals
were always enclosed in parentheses, and as a result you could sometimes omit
parentheses around them:
.PP
.Vb 1
\&    for $x qw(a b c) { ... }
.Ve
.PP
The parser no longer lies to itself in this way.  Wrap the list literal in
parentheses like this:
.PP
.Vb 1
\&    for $x (qw(a b c)) { ... }
.Ve
.PP
This is being deprecated because the parentheses in \f(CW\*(C`for $i (1,2,3) { ... }\*(C'\fR
are not part of expression syntax.  They are part of the statement
syntax, with the \f(CW\*(C`for\*(C'\fR statement wanting literal parentheses.
The synthetic parentheses that a \f(CW\*(C`qw\*(C'\fR expression acquired were only
intended to be treated as part of expression syntax.
.PP
Note that this does not change the behaviour of cases like:
.PP
.Vb 2
\&    use POSIX qw(setlocale localeconv);
\&    our @EXPORT = qw(foo bar baz);
.Ve
.PP
where parentheses were never required around the expression.
.ie n .SS """\eN{BELL}"""
.el .SS "\f(CW\eN{BELL}\fP"
.IX Subsection "N{BELL}"
This is because Unicode is using that name for a different character.
See \*(L"Unicode Version 6.0 is now supported (mostly)\*(R" for more
explanation.
.ie n .SS """?PATTERN?"""
.el .SS "\f(CW?PATTERN?\fP"
.IX Subsection "?PATTERN?"
\&\f(CW\*(C`?PATTERN?\*(C'\fR (without the initial \f(CW\*(C`m\*(C'\fR) has been deprecated and now produces
a warning.  This is to allow future use of \f(CW\*(C`?\*(C'\fR in new operators.
The match-once functionality is still available as \f(CW\*(C`m?PATTERN?\*(C'\fR.
.SS "Tie functions on scalars holding typeglobs"
.IX Subsection "Tie functions on scalars holding typeglobs"
Calling a tie function (\f(CW\*(C`tie\*(C'\fR, \f(CW\*(C`tied\*(C'\fR, \f(CW\*(C`untie\*(C'\fR) with a scalar argument
acts on a filehandle if the scalar happens to hold a typeglob.
.PP
This is a long-standing bug that will be removed in Perl 5.16, as
there is currently no way to tie the scalar itself when it holds
a typeglob, and no way to untie a scalar that has had a typeglob
assigned to it.
.PP
Now there is a deprecation warning whenever a tie
function is used on a handle without an explicit \f(CW\*(C`*\*(C'\fR.
.SS "User-defined case-mapping"
.IX Subsection "User-defined case-mapping"
This feature is being deprecated due to its many issues, as documented in
\&\*(L"User-Defined Case Mappings (for serious hackers only)\*(R" in perlunicode.
This feature will be removed in Perl 5.16.  Instead use the \s-1CPAN\s0 module
Unicode::Casing, which provides improved functionality.
.SS "Deprecated modules"
.IX Subsection "Deprecated modules"
The following module will be removed from the core distribution in a
future release, and should be installed from \s-1CPAN\s0 instead.  Distributions
on \s-1CPAN\s0 that require this should add it to their prerequisites.  The
core version of these module now issues a deprecation warning.
.PP
If you ship a packaged version of Perl, either alone or as part of a
larger system, then you should carefully consider the repercussions of
core module deprecations.  You may want to consider shipping your default
build of Perl with a package for the deprecated module that
installs into \f(CW\*(C`vendor\*(C'\fR or \f(CW\*(C`site\*(C'\fR Perl library directories.  This will
inhibit the deprecation warnings.
.PP
Alternatively, you may want to consider patching \fIlib/deprecate.pm\fR
to provide deprecation warnings specific to your packaging system
or distribution of Perl, consistent with how your packaging system
or distribution manages a staged transition from a release where the
installation of a single package provides the given functionality, to
a later release where the system administrator needs to know to install
multiple packages to get that same functionality.
.PP
You can silence these deprecation warnings by installing the module
in question from \s-1CPAN\s0.  To install the latest version of it by role
rather than by name, just install \f(CW\*(C`Task::Deprecations::5_14\*(C'\fR.
.IP "Devel::DProf" 4
.IX Item "Devel::DProf"
We strongly recommend that you install and use Devel::NYTProf instead
of Devel::DProf, as Devel::NYTProf offers significantly
improved profiling and reporting.
.SH "Performance Enhancements"
.IX Header "Performance Enhancements"
.ie n .SS """Safe signals"" optimisation"
.el .SS "``Safe signals'' optimisation"
.IX Subsection "Safe signals optimisation"
Signal dispatch has been moved from the runloop into control ops.
This should give a few percent speed increase, and eliminates nearly
all the speed penalty caused by the introduction of \*(L"safe signals\*(R"
in 5.8.0.  Signals should still be dispatched within the same
statement as they were previously.  If this does \fInot\fR happen, or
if you find it possible to create uninterruptible loops, this is a
bug, and reports are encouraged of how to recreate such issues.
.SS "Optimisation of \fIshift()\fP and \fIpop()\fP calls without arguments"
.IX Subsection "Optimisation of shift() and pop() calls without arguments"
Two fewer OPs are used for \fIshift()\fR and \fIpop()\fR calls with no argument (with
implicit \f(CW@_\fR).  This change makes \fIshift()\fR 5% faster than \f(CW\*(C`shift @_\*(C'\fR
on non-threaded perls, and 25% faster on threaded ones.
.SS "Optimisation of regexp engine string comparison work"
.IX Subsection "Optimisation of regexp engine string comparison work"
The \f(CW\*(C`foldEQ_utf8\*(C'\fR \s-1API\s0 function for case-insensitive comparison of strings (which
is used heavily by the regexp engine) was substantially refactored and
optimised \*(-- and its documentation much improved as a free bonus.
.SS "Regular expression compilation speed-up"
.IX Subsection "Regular expression compilation speed-up"
Compiling regular expressions has been made faster when upgrading
the regex to utf8 is necessary but this isn't known when the compilation begins.
.SS "String appending is 100 times faster"
.IX Subsection "String appending is 100 times faster"
When doing a lot of string appending, perls built to use the system's
\&\f(CW\*(C`malloc\*(C'\fR could end up allocating a lot more memory than needed in a
inefficient way.
.PP
\&\f(CW\*(C`sv_grow\*(C'\fR, the function used to allocate more memory if necessary
when appending to a string, has been taught to round up the memory
it requests to a certain geometric progression, making it much faster on
certain platforms and configurations.  On Win32, it's now about 100 times
faster.
.ie n .SS "Eliminate ""PL_*"" accessor functions under ithreads"
.el .SS "Eliminate \f(CWPL_*\fP accessor functions under ithreads"
.IX Subsection "Eliminate PL_* accessor functions under ithreads"
When \f(CW\*(C`MULTIPLICITY\*(C'\fR was first developed, and interpreter state moved into
an interpreter struct, thread\- and interpreter-local \f(CW\*(C`PL_*\*(C'\fR variables
were defined as macros that called accessor functions (returning the
address of the value) outside the Perl core.  The intent was to allow
members within the interpreter struct to change size without breaking
binary compatibility, so that bug fixes could be merged to a maintenance
branch that necessitated such a size change.  This mechanism was redundant
and penalised well-behaved code.  It has been removed.
.SS "Freeing weak references"
.IX Subsection "Freeing weak references"
When there are many weak references to an object, freeing that object
can under some circumstances take O(\fIN*N\fR) time to free, where
\&\fIN\fR is the number of references.  The circumstances in which this can happen
have been reduced [perl #75254]
.SS "Lexical array and hash assignments"
.IX Subsection "Lexical array and hash assignments"
An earlier optimisation to speed up \f(CW\*(C`my @array = ...\*(C'\fR and
\&\f(CW\*(C`my %hash = ...\*(C'\fR assignments caused a bug and was disabled in Perl 5.12.0.
.PP
Now we have found another way to speed up these assignments [perl #82110].
.ie n .SS "@_ uses less memory"
.el .SS "\f(CW@_\fP uses less memory"
.IX Subsection "@_ uses less memory"
Previously, \f(CW@_\fR was allocated for every subroutine at compile time with
enough space for four entries.  Now this allocation is done on demand when
the subroutine is called [perl #72416].
.SS "Size optimisations to \s-1SV\s0 and \s-1HV\s0 structures"
.IX Subsection "Size optimisations to SV and HV structures"
\&\f(CW\*(C`xhv_fill\*(C'\fR has been eliminated from \f(CW\*(C`struct xpvhv\*(C'\fR, saving 1 \s-1IV\s0 per hash and
on some systems will cause \f(CW\*(C`struct xpvhv\*(C'\fR to become cache-aligned.  To avoid
this memory saving causing a slowdown elsewhere, boolean use of \f(CW\*(C`HvFILL\*(C'\fR
now calls \f(CW\*(C`HvTOTALKEYS\*(C'\fR instead (which is equivalent), so while the fill
data when actually required are now calculated on demand, cases when
this needs to be done should be rare.
.PP
The order of structure elements in \s-1SV\s0 bodies has changed.  Effectively,
the \s-1NV\s0 slot has swapped location with \s-1STASH\s0 and \s-1MAGIC\s0.  As all access to
\&\s-1SV\s0 members is via macros, this should be completely transparent.  This
change allows the space saving for PVHVs documented above, and may reduce
the memory allocation needed for PVIVs on some architectures.
.PP
\&\f(CW\*(C`XPV\*(C'\fR, \f(CW\*(C`XPVIV\*(C'\fR, and \f(CW\*(C`XPVNV\*(C'\fR now allocate only the parts of the \f(CW\*(C`SV\*(C'\fR body
they actually use, saving some space.
.PP
Scalars containing regular expressions now allocate only the part of the \f(CW\*(C`SV\*(C'\fR
body they actually use, saving some space.
.SS "Memory consumption improvements to Exporter"
.IX Subsection "Memory consumption improvements to Exporter"
The \f(CW@EXPORT_FAIL\fR \s-1AV\s0 is no longer created unless needed, hence neither is
the typeglob backing it.  This saves about 200 bytes for every package that
uses Exporter but doesn't use this functionality.
.SS "Memory savings for weak references"
.IX Subsection "Memory savings for weak references"
For weak references, the common case of just a single weak reference
per referent has been optimised to reduce the storage required.  In this
case it saves the equivalent of one small Perl array per referent.
.ie n .SS """%+"" and ""%\-"" use less memory"
.el .SS "\f(CW%+\fP and \f(CW%\-\fP use less memory"
.IX Subsection "%+ and %- use less memory"
The bulk of the \f(CW\*(C`Tie::Hash::NamedCapture\*(C'\fR module used to be in the Perl
core.  It has now been moved to an \s-1XS\s0 module to reduce overhead for
programs that do not use \f(CW\*(C`%+\*(C'\fR or \f(CW\*(C`%\-\*(C'\fR.
.SS "Multiple small improvements to threads"
.IX Subsection "Multiple small improvements to threads"
The internal structures of threading now make fewer \s-1API\s0 calls and fewer
allocations, resulting in noticeably smaller object code.  Additionally,
many thread context checks have been deferred so they're done only 
as needed (although this is only possible for non-debugging builds).
.SS "Adjacent pairs of nextstate opcodes are now optimized away"
.IX Subsection "Adjacent pairs of nextstate opcodes are now optimized away"
Previously, in code such as
.PP
.Vb 1
\&    use constant DEBUG => 0;
\&
\&    sub GAK {
\&        warn if DEBUG;
\&        print "stuff\en";
\&    }
.Ve
.PP
the ops for \f(CW\*(C`warn if DEBUG\*(C'\fR would be folded to a \f(CW\*(C`null\*(C'\fR op (\f(CW\*(C`ex\-const\*(C'\fR), but
the \f(CW\*(C`nextstate\*(C'\fR op would remain, resulting in a runtime op dispatch of
\&\f(CW\*(C`nextstate\*(C'\fR, \f(CW\*(C`nextstate\*(C'\fR, etc.
.PP
The execution of a sequence of \f(CW\*(C`nextstate\*(C'\fR ops is indistinguishable from just
the last \f(CW\*(C`nextstate\*(C'\fR op so the peephole optimizer now eliminates the first of
a pair of \f(CW\*(C`nextstate\*(C'\fR ops except when the first carries a label, since labels
must not be eliminated by the optimizer, and label usage isn't conclusively known
at compile time.
.SH "Modules and Pragmata"
.IX Header "Modules and Pragmata"
.SS "New Modules and Pragmata"
.IX Subsection "New Modules and Pragmata"
.IP "\(bu" 4
CPAN::Meta::YAML 0.003 has been added as a dual-life module.  It supports a
subset of \s-1YAML\s0 sufficient for reading and writing \fI\s-1META\s0.yml\fR and \fI\s-1MYMETA\s0.yml\fR files
included with \s-1CPAN\s0 distributions or generated by the module installation
toolchain.  It should not be used for any other general \s-1YAML\s0 parsing or
generation task.
.IP "\(bu" 4
CPAN::Meta version 2.110440 has been added as a dual-life module.  It
provides a standard library to read, interpret and write \s-1CPAN\s0 distribution
metadata files (like \fI\s-1META\s0.json\fR and \fI\s-1META\s0.yml)\fR that describe a
distribution, its contents, and the requirements for building it and
installing it.  The latest \s-1CPAN\s0 distribution metadata specification is
included as CPAN::Meta::Spec and notes on changes in the specification
over time are given in CPAN::Meta::History.
.IP "\(bu" 4
HTTP::Tiny 0.012 has been added as a dual-life module.  It is a very
small, simple \s-1HTTP/1\s0.1 client designed for simple \s-1GET\s0 requests and file
mirroring.  It has been added so that \fI\s-1CPAN\s0.pm\fR and \s-1CPANPLUS\s0 can
\&\*(L"bootstrap\*(R" \s-1HTTP\s0 access to \s-1CPAN\s0 using pure Perl without relying on external
binaries like \fIcurl\fR\|(1) or \fIwget\fR\|(1).
.IP "\(bu" 4
\&\s-1JSON::PP\s0 2.27105 has been added as a dual-life module to allow \s-1CPAN\s0
clients to read \fI\s-1META\s0.json\fR files in \s-1CPAN\s0 distributions.
.IP "\(bu" 4
Module::Metadata 1.000004 has been added as a dual-life module.  It gathers
package and \s-1POD\s0 information from Perl module files.  It is a standalone module
based on Module::Build::ModuleInfo for use by other module installation
toolchain components.  Module::Build::ModuleInfo has been deprecated in
favor of this module instead.
.IP "\(bu" 4
Perl::OSType 1.002 has been added as a dual-life module.  It maps Perl
operating system names (like \*(L"dragonfly\*(R" or \*(L"MSWin32\*(R") to more generic types
with standardized names (like \*(L"Unix\*(R" or \*(L"Windows\*(R").  It has been refactored
out of Module::Build and ExtUtils::CBuilder and consolidates such mappings into
a single location for easier maintenance.
.IP "\(bu" 4
The following modules were added by the Unicode::Collate 
upgrade.  See below for details.
.Sp
Unicode::Collate::CJK::Big5
.Sp
Unicode::Collate::CJK::GB2312
.Sp
Unicode::Collate::CJK::JISX0208
.Sp
Unicode::Collate::CJK::Korean
.Sp
Unicode::Collate::CJK::Pinyin
.Sp
Unicode::Collate::CJK::Stroke
.IP "\(bu" 4
Version::Requirements version 0.101020 has been added as a dual-life
module.  It provides a standard library to model and manipulates module
prerequisites and version constraints defined in CPAN::Meta::Spec.
.SS "Updated Modules and Pragma"
.IX Subsection "Updated Modules and Pragma"
.IP "\(bu" 4
attributes has been upgraded from version 0.12 to 0.14.
.IP "\(bu" 4
Archive::Extract has been upgraded from version 0.38 to 0.48.
.Sp
Updates since 0.38 include: a safe print method that guards
Archive::Extract from changes to \f(CW\*(C`$\e\*(C'\fR; a fix to the tests when run in core
Perl; support for \s-1TZ\s0 files; a modification for the lzma
logic to favour IO::Uncompress::Unlzma; and a fix
for an issue with NetBSD-current and its new \fIunzip\fR\|(1)
executable.
.IP "\(bu" 4
Archive::Tar has been upgraded from version 1.54 to 1.76.
.Sp
Important changes since 1.54 include the following:
.RS 4
.IP "\(bu" 4
Compatibility with busybox implementations of \fItar\fR\|(1).
.IP "\(bu" 4
A fix so that \fIwrite()\fR and \fIcreate_archive()\fR
close only filehandles they themselves opened.
.IP "\(bu" 4
A bug was fixed regarding the exit code of extract_archive.
.IP "\(bu" 4
The \fIptar\fR\|(1) utility has a new option to allow safe creation of
tarballs without world-writable files on Windows, allowing those
archives to be uploaded to \s-1CPAN\s0.
.IP "\(bu" 4
A new \fIptargrep\fR\|(1) utility for using regular expressions against 
the contents of files in a tar archive.
.IP "\(bu" 4
pax extended headers are now skipped.
.RE
.RS 4
.RE
.IP "\(bu" 4
Attribute::Handlers has been upgraded from version 0.87 to 0.89.
.IP "\(bu" 4
autodie has been upgraded from version 2.06_01 to 2.1001.
.IP "\(bu" 4
AutoLoader has been upgraded from version 5.70 to 5.71.
.IP "\(bu" 4
The B module has been upgraded from version 1.23 to 1.29.
.Sp
It no longer crashes when taking apart a \f(CW\*(C`y///\*(C'\fR containing characters
outside the octet range or compiled in a \f(CW\*(C`use utf8\*(C'\fR scope.
.Sp
The size of the shared object has been reduced by about 40%, with no
reduction in functionality.
.IP "\(bu" 4
B::Concise has been upgraded from version 0.78 to 0.83.
.Sp
B::Concise marks \fIrv2sv()\fR, \fIrv2av()\fR, and \fIrv2hv()\fR ops with the new
\&\f(CW\*(C`OPpDEREF\*(C'\fR flag as \*(L"DREFed\*(R".
.Sp
It no longer produces mangled output with the \fB\-tree\fR option
[perl #80632].
.IP "\(bu" 4
B::Debug has been upgraded from version 1.12 to 1.16.
.IP "\(bu" 4
B::Deparse has been upgraded from version 0.96 to 1.03.
.Sp
The deparsing of a \f(CW\*(C`nextstate\*(C'\fR op has changed when it has both a
change of package relative to the previous nextstate, or a change of
\&\f(CW\*(C`%^H\*(C'\fR or other state and a label.  The label was previously emitted
first, but is now emitted last (5.12.1).
.Sp
The \f(CW\*(C`no 5.13.2\*(C'\fR or similar form is now correctly handled by B::Deparse
(5.12.3).
.Sp
B::Deparse now properly handles the code that applies a conditional
pattern match against implicit \f(CW$_\fR as it was fixed in [perl #20444].
.Sp
Deparsing of \f(CW\*(C`our\*(C'\fR followed by a variable with funny characters
(as permitted under the \f(CW\*(C`use utf8\*(C'\fR pragma) has also been fixed [perl #33752].
.IP "\(bu" 4
B::Lint has been upgraded from version 1.11_01 to 1.13.
.IP "\(bu" 4
base has been upgraded from version 2.15 to 2.16.
.IP "\(bu" 4
Benchmark has been upgraded from version 1.11 to 1.12.
.IP "\(bu" 4
bignum has been upgraded from version 0.23 to 0.27.
.IP "\(bu" 4
Carp has been upgraded from version 1.15 to 1.20.
.Sp
Carp now detects incomplete \fIcaller()\fR
overrides and avoids using bogus \f(CW@DB::args\fR.  To provide backtraces,
Carp relies on particular behaviour of the \fIcaller()\fR builtin.
Carp now detects if other code has overridden this with an
incomplete implementation, and modifies its backtrace accordingly.
Previously incomplete overrides would cause incorrect values in
backtraces (best case), or obscure fatal errors (worst case).
.Sp
This fixes certain cases of \*(L"Bizarre copy of \s-1ARRAY\s0\*(R" caused by modules
overriding \fIcaller()\fR incorrectly (5.12.2).
.Sp
It now also avoids using regular expressions that cause Perl to
load its Unicode tables, so as to avoid the \*(L"\s-1BEGIN\s0 not safe after
errors\*(R" error that ensue if there has been a syntax error
[perl #82854].
.IP "\(bu" 4
\&\s-1CGI\s0 has been upgraded from version 3.48 to 3.52.
.Sp
This provides the following security fixes: the \s-1MIME\s0 boundary in 
\&\fImultipart_init()\fR is now random and the handling of 
newlines embedded in header values has been improved.
.IP "\(bu" 4
Compress::Raw::Bzip2 has been upgraded from version 2.024 to 2.033.
.Sp
It has been updated to use \fIbzip2\fR\|(1) 1.0.6.
.IP "\(bu" 4
Compress::Raw::Zlib has been upgraded from version 2.024 to 2.033.
.IP "\(bu" 4
constant has been upgraded from version 1.20 to 1.21.
.Sp
Unicode constants work once more.  They have been broken since Perl 5.10.0
[\s-1CPAN\s0 \s-1RT\s0 #67525].
.IP "\(bu" 4
\&\s-1CPAN\s0 has been upgraded from version 1.94_56 to 1.9600.
.Sp
Major highlights:
.RS 4
.IP "\(bu" 4
much less configuration dialog hassle
.IP "\(bu" 4
support for \fI\s-1META/MYMETA\s0.json\fR
.IP "\(bu" 4
support for local::lib
.IP "\(bu" 4
support for HTTP::Tiny to reduce the dependency on \s-1FTP\s0 sites
.IP "\(bu" 4
automatic mirror selection
.IP "\(bu" 4
iron out all known bugs in configure_requires
.IP "\(bu" 4
support for distributions compressed with \fIbzip2\fR\|(1)
.IP "\(bu" 4
allow \fIFoo/Bar.pm\fR on the command line to mean \f(CW\*(C`Foo::Bar\*(C'\fR
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\s-1CPANPLUS\s0 has been upgraded from version 0.90 to 0.9103.
.Sp
A change to \fIcpanp-run-perl\fR
resolves \s-1RT\s0 #55964 <http://rt.cpan.org/Public/Bug/Display.html?id=55964>
and \s-1RT\s0 #57106 <http://rt.cpan.org/Public/Bug/Display.html?id=57106>, both
of which related to failures to install distributions that use
\&\f(CW\*(C`Module::Install::DSL\*(C'\fR (5.12.2).
.Sp
A dependency on Config was not recognised as a
core module dependency.  This has been fixed.
.Sp
\&\s-1CPANPLUS\s0 now includes support for \fI\s-1META\s0.json\fR and \fI\s-1MYMETA\s0.json\fR.
.IP "\(bu" 4
CPANPLUS::Dist::Build has been upgraded from version 0.46 to 0.54.
.IP "\(bu" 4
Data::Dumper has been upgraded from version 2.125 to 2.130_02.
.Sp
The indentation used to be off when \f(CW$Data::Dumper::Terse\fR was set.  This
has been fixed [perl #73604].
.Sp
This upgrade also fixes a crash when using custom sort functions that might
cause the stack to change [perl #74170].
.Sp
Dumpxs no longer crashes with globs returned by \f(CW*$io_ref\fR
[perl #72332].
.IP "\(bu" 4
DB_File has been upgraded from version 1.820 to 1.821.
.IP "\(bu" 4
DBM_Filter has been upgraded from version 0.03 to 0.04.
.IP "\(bu" 4
Devel::DProf has been upgraded from version 20080331.00 to 20110228.00.
.Sp
Merely loading Devel::DProf now no longer triggers profiling to start.
Both \f(CW\*(C`use Devel::DProf\*(C'\fR and \f(CW\*(C`perl \-d:DProf ...\*(C'\fR behave as before and start
the profiler.
.Sp
\&\fB\s-1NOTE\s0\fR: Devel::DProf is deprecated and will be removed from a future
version of Perl.  We strongly recommend that you install and use
Devel::NYTProf instead, as it offers significantly improved
profiling and reporting.
.IP "\(bu" 4
Devel::Peek has been upgraded from version 1.04 to 1.07.
.IP "\(bu" 4
Devel::SelfStubber has been upgraded from version 1.03 to 1.05.
.IP "\(bu" 4
diagnostics has been upgraded from version 1.19 to 1.22.
.Sp
It now renders pod links slightly better, and has been taught to find
descriptions for messages that share their descriptions with other
messages.
.IP "\(bu" 4
Digest::MD5 has been upgraded from version 2.39 to 2.51.
.Sp
It is now safe to use this module in combination with threads.
.IP "\(bu" 4
Digest::SHA has been upgraded from version 5.47 to 5.61.
.Sp
\&\f(CW\*(C`shasum\*(C'\fR now more closely mimics \fIsha1sum\fR\|(1)/\fImd5sum\fR\|(1).
.Sp
\&\f(CW\*(C`addfile\*(C'\fR accepts all \s-1POSIX\s0 filenames.
.Sp
New \s-1SHA\-512/224\s0 and \s-1SHA\-512/256\s0 transforms (ref. \s-1NIST\s0 Draft \s-1FIPS\s0 180\-4
[February 2011])
.IP "\(bu" 4
DirHandle has been upgraded from version 1.03 to 1.04.
.IP "\(bu" 4
Dumpvalue has been upgraded from version 1.13 to 1.16.
.IP "\(bu" 4
DynaLoader has been upgraded from version 1.10 to 1.13.
.Sp
It fixes a buffer overflow when passed a very long file name.
.Sp
It no longer inherits from AutoLoader; hence it no longer
produces weird error messages for unsuccessful method calls on classes that
inherit from DynaLoader [perl #84358].
.IP "\(bu" 4
Encode has been upgraded from version 2.39 to 2.42.
.Sp
Now, all 66 Unicode non-characters are treated the same way U+FFFF has
always been treated: in cases when it was disallowed, all 66 are
disallowed, and in cases where it warned, all 66 warn.
.IP "\(bu" 4
Env has been upgraded from version 1.01 to 1.02.
.IP "\(bu" 4
Errno has been upgraded from version 1.11 to 1.13.
.Sp
The implementation of Errno has been refactored to use about 55% less memory.
.Sp
On some platforms with unusual header files, like Win32 \fIgcc\fR\|(1) using \f(CW\*(C`mingw64\*(C'\fR
headers, some constants that weren't actually error numbers have been exposed
by Errno.  This has been fixed [perl #77416].
.IP "\(bu" 4
Exporter has been upgraded from version 5.64_01 to 5.64_03.
.Sp
Exporter no longer overrides \f(CW$SIG{_\|_WARN_\|_}\fR [perl #74472]
.IP "\(bu" 4
ExtUtils::CBuilder has been upgraded from version 0.27 to 0.280203.
.IP "\(bu" 4
ExtUtils::Command has been upgraded from version 1.16 to 1.17.
.IP "\(bu" 4
ExtUtils::Constant has been upgraded from 0.22 to 0.23.
.Sp
The \s-1AUTOLOAD\s0 helper code generated by \f(CW\*(C`ExtUtils::Constant::ProxySubs\*(C'\fR
can now \fIcroak()\fR for missing constants, or generate a complete \f(CW\*(C`AUTOLOAD\*(C'\fR
subroutine in \s-1XS\s0, allowing simplification of many modules that use it
(Fcntl, File::Glob, GDBM_File, I18N::Langinfo, \s-1POSIX\s0,
Socket).
.Sp
ExtUtils::Constant::ProxySubs can now optionally push the names of all
constants onto the package's \f(CW@EXPORT_OK\fR.
.IP "\(bu" 4
ExtUtils::Install has been upgraded from version 1.55 to 1.56.
.IP "\(bu" 4
ExtUtils::MakeMaker has been upgraded from version 6.56 to 6.57_05.
.IP "\(bu" 4
ExtUtils::Manifest has been upgraded from version 1.57 to 1.58.
.IP "\(bu" 4
ExtUtils::ParseXS has been upgraded from version 2.21 to 2.2210.
.IP "\(bu" 4
Fcntl has been upgraded from version 1.06 to 1.11.
.IP "\(bu" 4
File::Basename has been upgraded from version 2.78 to 2.82.
.IP "\(bu" 4
File::CheckTree has been upgraded from version 4.4 to 4.41.
.IP "\(bu" 4
File::Copy has been upgraded from version 2.17 to 2.21.
.IP "\(bu" 4
File::DosGlob has been upgraded from version 1.01 to 1.04.
.Sp
It allows patterns containing literal parentheses: they no longer need to
be escaped.  On Windows, it no longer
adds an extra \fI./\fR to file names
returned when the pattern is a relative glob with a drive specification,
like \fIC:*.pl\fR [perl #71712].
.IP "\(bu" 4
File::Fetch has been upgraded from version 0.24 to 0.32.
.Sp
HTTP::Lite is now supported for the \*(L"http\*(R" scheme.
.Sp
The \fIfetch\fR\|(1) utility is supported on FreeBSD, NetBSD, and
Dragonfly \s-1BSD\s0 for the \f(CW\*(C`http\*(C'\fR and \f(CW\*(C`ftp\*(C'\fR schemes.
.IP "\(bu" 4
File::Find has been upgraded from version 1.15 to 1.19.
.Sp
It improves handling of backslashes on Windows, so that paths like
\&\fIC:\edir\e/file\fR are no longer generated [perl #71710].
.IP "\(bu" 4
File::Glob has been upgraded from version 1.07 to 1.12.
.IP "\(bu" 4
File::Spec has been upgraded from version 3.31 to 3.33.
.Sp
Several portability fixes were made in File::Spec::VMS: a colon is now
recognized as a delimiter in native filespecs; caret-escaped delimiters are
recognized for better handling of extended filespecs; \fIcatpath()\fR returns
an empty directory rather than the current directory if the input directory
name is empty; and \fIabs2rel()\fR properly handles Unix-style input (5.12.2).
.IP "\(bu" 4
File::stat has been upgraded from 1.02 to 1.05.
.Sp
The \f(CW\*(C`\-x\*(C'\fR and \f(CW\*(C`\-X\*(C'\fR file test operators now work correctly when run
by the superuser.
.IP "\(bu" 4
Filter::Simple has been upgraded from version 0.84 to 0.86.
.IP "\(bu" 4
GDBM_File has been upgraded from 1.10 to 1.14.
.Sp
This fixes a memory leak when \s-1DBM\s0 filters are used.
.IP "\(bu" 4
Hash::Util has been upgraded from 0.07 to 0.11.
.Sp
Hash::Util no longer emits spurious \*(L"uninitialized\*(R" warnings when
recursively locking hashes that have undefined values [perl #74280].
.IP "\(bu" 4
Hash::Util::FieldHash has been upgraded from version 1.04 to 1.09.
.IP "\(bu" 4
I18N::Collate has been upgraded from version 1.01 to 1.02.
.IP "\(bu" 4
I18N::Langinfo has been upgraded from version 0.03 to 0.08.
.Sp
\&\fIlanginfo()\fR now defaults to using \f(CW$_\fR if there is no argument given, just
as the documentation has always claimed.
.IP "\(bu" 4
I18N::LangTags has been upgraded from version 0.35 to 0.35_01.
.IP "\(bu" 4
if has been upgraded from version 0.05 to 0.0601.
.IP "\(bu" 4
\&\s-1IO\s0 has been upgraded from version 1.25_02 to 1.25_04.
.Sp
This version of \s-1IO\s0 includes a new IO::Select, which now allows IO::Handle
objects (and objects in derived classes) to be removed from an IO::Select set
even if the underlying file descriptor is closed or invalid.
.IP "\(bu" 4
IPC::Cmd has been upgraded from version 0.54 to 0.70.
.Sp
Resolves an issue with splitting Win32 command lines.  An argument
consisting of the single character \*(L"0\*(R" used to be omitted (\s-1CPAN\s0 \s-1RT\s0 #62961).
.IP "\(bu" 4
IPC::Open3 has been upgraded from 1.05 to 1.09.
.Sp
\&\fIopen3()\fR now produces an error if the \f(CW\*(C`exec\*(C'\fR call fails, allowing this
condition to be distinguished from a child process that exited with a
non-zero status [perl #72016].
.Sp
The internal \fIxclose()\fR routine now knows how to handle file descriptors as
documented, so duplicating \f(CW\*(C`STDIN\*(C'\fR in a child process using its file
descriptor now works [perl #76474].
.IP "\(bu" 4
IPC::SysV has been upgraded from version 2.01 to 2.03.
.IP "\(bu" 4
lib has been upgraded from version 0.62 to 0.63.
.IP "\(bu" 4
Locale::Maketext has been upgraded from version 1.14 to 1.19.
.Sp
Locale::Maketext now supports external caches.
.Sp
This upgrade also fixes an infinite loop in
\&\f(CW\*(C`Locale::Maketext::Guts::_compile()\*(C'\fR when
working with tainted values (\s-1CPAN\s0 \s-1RT\s0 #40727).
.Sp
\&\f(CW\*(C`\->maketext\*(C'\fR calls now back up and restore \f(CW$@\fR so error
messages are not suppressed (\s-1CPAN\s0 \s-1RT\s0 #34182).
.IP "\(bu" 4
Log::Message has been upgraded from version 0.02 to 0.04.
.IP "\(bu" 4
Log::Message::Simple has been upgraded from version 0.06 to 0.08.
.IP "\(bu" 4
Math::BigInt has been upgraded from version 1.89_01 to 1.994.
.Sp
This fixes, among other things, incorrect results when computing binomial
coefficients [perl #77640].
.Sp
It also prevents \f(CW\*(C`sqrt($int)\*(C'\fR from crashing under \f(CW\*(C`use bigrat\*(C'\fR.
[perl #73534].
.IP "\(bu" 4
Math::BigInt::FastCalc has been upgraded from version 0.19 to 0.28.
.IP "\(bu" 4
Math::BigRat has been upgraded from version 0.24 to 0.26_02.
.IP "\(bu" 4
Memoize has been upgraded from version 1.01_03 to 1.02.
.IP "\(bu" 4
MIME::Base64 has been upgraded from 3.08 to 3.13.
.Sp
Includes new functions to calculate the length of encoded and decoded
base64 strings.
.Sp
Now provides \fIencode_base64url()\fR and \fIdecode_base64url()\fR functions to process
the base64 scheme for \*(L"\s-1URL\s0 applications\*(R".
.IP "\(bu" 4
Module::Build has been upgraded from version 0.3603 to 0.3800.
.Sp
A notable change is the deprecation of several modules.
Module::Build::Version has been deprecated and Module::Build now
relies on the version pragma directly.  Module::Build::ModuleInfo has
been deprecated in favor of a standalone copy called Module::Metadata.
Module::Build::YAML has been deprecated in favor of CPAN::Meta::YAML.
.Sp
Module::Build now also generates \fI\s-1META\s0.json\fR and \fI\s-1MYMETA\s0.json\fR files
in accordance with version 2 of the \s-1CPAN\s0 distribution metadata specification,
CPAN::Meta::Spec.  The older format \fI\s-1META\s0.yml\fR and \fI\s-1MYMETA\s0.yml\fR files are
still generated.
.IP "\(bu" 4
Module::CoreList has been upgraded from version 2.29 to 2.47.
.Sp
Besides listing the updated core modules of this release, it also stops listing
the \f(CW\*(C`Filespec\*(C'\fR module.  That module never existed in core.  The scripts
generating Module::CoreList confused it with VMS::Filespec, which actually
is a core module as of Perl 5.8.7.
.IP "\(bu" 4
Module::Load has been upgraded from version 0.16 to 0.18.
.IP "\(bu" 4
Module::Load::Conditional has been upgraded from version 0.34 to 0.44.
.IP "\(bu" 4
The mro pragma has been upgraded from version 1.02 to 1.07.
.IP "\(bu" 4
NDBM_File has been upgraded from version 1.08 to 1.12.
.Sp
This fixes a memory leak when \s-1DBM\s0 filters are used.
.IP "\(bu" 4
Net::Ping has been upgraded from version 2.36 to 2.38.
.IP "\(bu" 4
\&\s-1NEXT\s0 has been upgraded from version 0.64 to 0.65.
.IP "\(bu" 4
Object::Accessor has been upgraded from version 0.36 to 0.38.
.IP "\(bu" 4
ODBM_File has been upgraded from version 1.07 to 1.10.
.Sp
This fixes a memory leak when \s-1DBM\s0 filters are used.
.IP "\(bu" 4
Opcode has been upgraded from version 1.15 to 1.18.
.IP "\(bu" 4
The overload pragma has been upgraded from 1.10 to 1.13.
.Sp
\&\f(CW\*(C`overload::Method\*(C'\fR can now handle subroutines that are themselves blessed
into overloaded classes [perl #71998].
.Sp
The documentation has greatly improved.  See \*(L"Documentation\*(R" below.
.IP "\(bu" 4
Params::Check has been upgraded from version 0.26 to 0.28.
.IP "\(bu" 4
The parent pragma has been upgraded from version 0.223 to 0.225.
.IP "\(bu" 4
Parse::CPAN::Meta has been upgraded from version 1.40 to 1.4401.
.Sp
The latest Parse::CPAN::Meta can now read \s-1YAML\s0 and \s-1JSON\s0 files using
CPAN::Meta::YAML and \s-1JSON::PP\s0, which are now part of the Perl core.
.IP "\(bu" 4
PerlIO::encoding has been upgraded from version 0.12 to 0.14.
.IP "\(bu" 4
PerlIO::scalar has been upgraded from 0.07 to 0.11.
.Sp
A \fIread()\fR after a \fIseek()\fR beyond the end of the string no longer thinks it
has data to read [perl #78716].
.IP "\(bu" 4
PerlIO::via has been upgraded from version 0.09 to 0.11.
.IP "\(bu" 4
Pod::Html has been upgraded from version 1.09 to 1.11.
.IP "\(bu" 4
Pod::LaTeX has been upgraded from version 0.58 to 0.59.
.IP "\(bu" 4
Pod::Perldoc has been upgraded from version 3.15_02 to 3.15_03.
.IP "\(bu" 4
Pod::Simple has been upgraded from version 3.13 to 3.16.
.IP "\(bu" 4
\&\s-1POSIX\s0 has been upgraded from 1.19 to 1.24.
.Sp
It now includes constants for \s-1POSIX\s0 signal constants.
.IP "\(bu" 4
The re pragma has been upgraded from version 0.11 to 0.18.
.Sp
The \f(CW\*(C`use re \*(Aq/flags\*(Aq\*(C'\fR subpragma is new.
.Sp
The \fIregmust()\fR function used to crash when called on a regular expression
belonging to a pluggable engine.  Now it croaks instead.
.Sp
\&\fIregmust()\fR no longer leaks memory.
.IP "\(bu" 4
Safe has been upgraded from version 2.25 to 2.29.
.Sp
Coderefs returned by \fIreval()\fR and \fIrdo()\fR are now wrapped via
\&\fIwrap_code_refs()\fR (5.12.1).
.Sp
This fixes a possible infinite loop when looking for coderefs.
.Sp
It adds several \f(CW\*(C`version::vxs::*\*(C'\fR routines to the default share.
.IP "\(bu" 4
SDBM_File has been upgraded from version 1.06 to 1.09.
.IP "\(bu" 4
SelfLoader has been upgraded from 1.17 to 1.18.
.Sp
It now works in taint mode [perl #72062].
.IP "\(bu" 4
The sigtrap pragma has been upgraded from version 1.04 to 1.05.
.Sp
It no longer tries to modify read-only arguments when generating a
backtrace [perl #72340].
.IP "\(bu" 4
Socket has been upgraded from version 1.87 to 1.94.
.Sp
See \*(L"Improved IPv6 support\*(R" above.
.IP "\(bu" 4
Storable has been upgraded from version 2.22 to 2.27.
.Sp
Includes performance improvement for overloaded classes.
.Sp
This adds support for serialising code references that contain \s-1UTF\-8\s0 strings
correctly.  The Storable minor version
number changed as a result, meaning that
Storable users who set \f(CW$Storable::accept_future_minor\fR to a \f(CW\*(C`FALSE\*(C'\fR value
will see errors (see \*(L"\s-1FORWARD\s0 \s-1COMPATIBILITY\s0\*(R" in Storable for more details).
.Sp
Freezing no longer gets confused if the Perl stack gets reallocated
during freezing [perl #80074].
.IP "\(bu" 4
Sys::Hostname has been upgraded from version 1.11 to 1.16.
.IP "\(bu" 4
Term::ANSIColor has been upgraded from version 2.02 to 3.00.
.IP "\(bu" 4
Term::UI has been upgraded from version 0.20 to 0.26.
.IP "\(bu" 4
Test::Harness has been upgraded from version 3.17 to 3.23.
.IP "\(bu" 4
Test::Simple has been upgraded from version 0.94 to 0.98.
.Sp
Among many other things, subtests without a \f(CW\*(C`plan\*(C'\fR or \f(CW\*(C`no_plan\*(C'\fR now have an
implicit \fIdone_testing()\fR added to them.
.IP "\(bu" 4
Thread::Semaphore has been upgraded from version 2.09 to 2.12.
.Sp
It provides two new methods that give more control over the decrementing of
semaphores: \f(CW\*(C`down_nb\*(C'\fR and \f(CW\*(C`down_force\*(C'\fR.
.IP "\(bu" 4
Thread::Queue has been upgraded from version 2.11 to 2.12.
.IP "\(bu" 4
The threads pragma has been upgraded from version 1.75 to 1.83.
.IP "\(bu" 4
The threads::shared pragma has been upgraded from version 1.32 to 1.37.
.IP "\(bu" 4
Tie::Hash has been upgraded from version 1.03 to 1.04.
.Sp
Calling \f(CW\*(C`Tie::Hash\->TIEHASH()\*(C'\fR used to loop forever.  Now it \f(CW\*(C`croak\*(C'\fRs.
.IP "\(bu" 4
Tie::Hash::NamedCapture has been upgraded from version 0.06 to 0.08.
.IP "\(bu" 4
Tie::RefHash has been upgraded from version 1.38 to 1.39.
.IP "\(bu" 4
Time::HiRes has been upgraded from version 1.9719 to 1.9721_01.
.IP "\(bu" 4
Time::Local has been upgraded from version 1.1901_01 to 1.2000.
.IP "\(bu" 4
Time::Piece has been upgraded from version 1.15_01 to 1.20_01.
.IP "\(bu" 4
Unicode::Collate has been upgraded from version 0.52_01 to 0.73.
.Sp
Unicode::Collate has been updated to use Unicode 6.0.0.
.Sp
Unicode::Collate::Locale now supports a plethora of new locales: \fIar, be,
bg, de_\|_phonebook, hu, hy, kk, mk, nso, om, tn, vi, hr, ig, ja, ko, ru, sq, 
se, sr, to, uk, zh, zh_\|_big5han, zh_\|_gb2312han, zh_\|_pinyin\fR, and \fIzh_\|_stroke\fR.
.Sp
The following modules have been added:
.Sp
Unicode::Collate::CJK::Big5 for \f(CW\*(C`zh_\|_big5han\*(C'\fR which makes 
tailoring of \s-1CJK\s0 Unified Ideographs in the order of \s-1CLDR\s0's big5han ordering.
.Sp
Unicode::Collate::CJK::GB2312 for \f(CW\*(C`zh_\|_gb2312han\*(C'\fR which makes
tailoring of \s-1CJK\s0 Unified Ideographs in the order of \s-1CLDR\s0's gb2312han ordering.
.Sp
Unicode::Collate::CJK::JISX0208 which makes tailoring of 6355 kanji 
(\s-1CJK\s0 Unified Ideographs) in the \s-1JIS\s0 X 0208 order.
.Sp
Unicode::Collate::CJK::Korean which makes tailoring of \s-1CJK\s0 Unified Ideographs 
in the order of \s-1CLDR\s0's Korean ordering.
.Sp
Unicode::Collate::CJK::Pinyin for \f(CW\*(C`zh_\|_pinyin\*(C'\fR which makes
tailoring of \s-1CJK\s0 Unified Ideographs in the order of \s-1CLDR\s0's pinyin ordering.
.Sp
Unicode::Collate::CJK::Stroke for \f(CW\*(C`zh_\|_stroke\*(C'\fR which makes
tailoring of \s-1CJK\s0 Unified Ideographs in the order of \s-1CLDR\s0's stroke ordering.
.Sp
This also sees the switch from using the pure-Perl version of this
module to the \s-1XS\s0 version.
.IP "\(bu" 4
Unicode::Normalize has been upgraded from version 1.03 to 1.10.
.IP "\(bu" 4
Unicode::UCD has been upgraded from version 0.27 to 0.32.
.Sp
A new function, \fIUnicode::UCD::num()\fR, has been added.  This function
returns the numeric value of the string passed it or \f(CW\*(C`undef\*(C'\fR if the string
in its entirety has no \*(L"safe\*(R" numeric value.  (For more detail, and for the
definition of \*(L"safe\*(R", see \*(L"\fInum()\fR\*(R" in Unicode::UCD.)
.Sp
This upgrade also includes several bug fixes:
.RS 4
.IP "\fIcharinfo()\fR" 4
.IX Item "charinfo()"
.RS 4
.PD 0
.IP "\(bu" 4
.PD
It is now updated to Unicode Version 6.0.0 with \fICorrigendum #8\fR, 
excepting that, just as with Perl 5.14, the code point at U+1F514 has no name.
.IP "\(bu" 4
Hangul syllable code points have the correct names, and their
decompositions are always output without requiring Lingua::KO::Hangul::Util
to be installed.
.IP "\(bu" 4
\&\s-1CJK\s0 (Chinese-Japanese-Korean) code points U+2A700 to U+2B734
and U+2B740 to U+2B81D are now properly handled.
.IP "\(bu" 4
Numeric values are now output for those \s-1CJK\s0 code points that have them.
.IP "\(bu" 4
Names output for code points with multiple aliases are now the
corrected ones.
.RE
.RS 4
.RE
.IP "\fIcharscript()\fR" 4
.IX Item "charscript()"
This now correctly returns \*(L"Unknown\*(R" instead of \f(CW\*(C`undef\*(C'\fR for the script
of a code point that hasn't been assigned another one.
.IP "\fIcharblock()\fR" 4
.IX Item "charblock()"
This now correctly returns \*(L"No_Block\*(R" instead of \f(CW\*(C`undef\*(C'\fR for the block
of a code point that hasn't been assigned to another one.
.RE
.RS 4
.RE
.IP "\(bu" 4
The version pragma has been upgraded from 0.82 to 0.88.
.Sp
Because of a bug, now fixed, the \fIis_strict()\fR and \fIis_lax()\fR functions did not
work when exported (5.12.1).
.IP "\(bu" 4
The warnings pragma has been upgraded from version 1.09 to 1.12.
.Sp
Calling \f(CW\*(C`use warnings\*(C'\fR without arguments is now significantly more efficient.
.IP "\(bu" 4
The warnings::register pragma has been upgraded from version 1.01 to 1.02.
.Sp
It is now possible to register warning categories other than the names of
packages using warnings::register.  See \fIperllexwarn\fR\|(1) for more information.
.IP "\(bu" 4
XSLoader has been upgraded from version 0.10 to 0.13.
.IP "\(bu" 4
VMS::DCLsym has been upgraded from version 1.03 to 1.05.
.Sp
Two bugs have been fixed [perl #84086]:
.Sp
The symbol table name was lost when tying a hash, due to a thinko in
\&\f(CW\*(C`TIEHASH\*(C'\fR.  The result was that all tied hashes interacted with the
local symbol table.
.Sp
Unless a symbol table name had been explicitly specified in the call
to the constructor, querying the special key \f(CW\*(C`:LOCAL\*(C'\fR failed to
identify objects connected to the local symbol table.
.IP "\(bu" 4
The Win32 module has been upgraded from version 0.39 to 0.44.
.Sp
This release has several new functions: \fIWin32::GetSystemMetrics()\fR,
\&\fIWin32::GetProductInfo()\fR, \fIWin32::GetOSDisplayName()\fR.
.Sp
The names returned by \fIWin32::GetOSName()\fR and \fIWin32::GetOSDisplayName()\fR
have been corrected.
.IP "\(bu" 4
XS::Typemap has been upgraded from version 0.03 to 0.05.
.SS "Removed Modules and Pragmata"
.IX Subsection "Removed Modules and Pragmata"
As promised in Perl 5.12.0's release notes, the following modules have
been removed from the core distribution, and if needed should be installed
from \s-1CPAN\s0 instead.
.IP "\(bu" 4
Class::ISA has been removed from the Perl core.  Prior version was 0.36.
.IP "\(bu" 4
Pod::Plainer has been removed from the Perl core.  Prior version was 1.02.
.IP "\(bu" 4
Switch has been removed from the Perl core.  Prior version was 2.16.
.PP
The removal of Shell has been deferred until after 5.14, as the
implementation of Shell shipped with 5.12.0 did not correctly issue the
warning that it was to be removed from core.
.SH "Documentation"
.IX Header "Documentation"
.SS "New Documentation"
.IX Subsection "New Documentation"
\fIperlgpl\fR
.IX Subsection "perlgpl"
.PP
perlgpl has been updated to contain \s-1GPL\s0 version 1, as is included in the
\&\fI\s-1README\s0\fR distributed with Perl (5.12.1).
.PP
\fIPerl 5.12.x delta files\fR
.IX Subsection "Perl 5.12.x delta files"
.PP
The perldelta files for Perl 5.12.1 to 5.12.3 have been added from the
maintenance branch: perl5121delta, perl5122delta, perl5123delta.
.PP
\fIperlpodstyle\fR
.IX Subsection "perlpodstyle"
.PP
New style guide for \s-1POD\s0 documentation,
split mostly from the \s-1NOTES\s0 section of the \fIpod2man\fR\|(1) manpage.
.PP
\fIperlsource, perlinterp, perlhacktut, and perlhacktips\fR
.IX Subsection "perlsource, perlinterp, perlhacktut, and perlhacktips"
.PP
See \*(L"perlhack and perlrepository revamp\*(R", below.
.SS "Changes to Existing Documentation"
.IX Subsection "Changes to Existing Documentation"
\fIperlmodlib is now complete\fR
.IX Subsection "perlmodlib is now complete"
.PP
The perlmodlib manpage that came with Perl 5.12.0 was missing several
modules due to a bug in the script that generates the list.  This has been
fixed [perl #74332] (5.12.1).
.PP
\fIReplace incorrect tr/// table in perlebcdic\fR
.IX Subsection "Replace incorrect tr/// table in perlebcdic"
.PP
perlebcdic contains a helpful table to use in \f(CW\*(C`tr///\*(C'\fR to convert
between \s-1EBCDIC\s0 and Latin1/ASCII.  The table was the inverse of the one
it describes, though the code that used the table worked correctly for
the specific example given.
.PP
The table has been corrected and the sample code changed to correspond.
.PP
The table has also been changed to hex from octal, and the recipes in the
pod have been altered to print out leading zeros to make all values
the same length.
.PP
\fITricks for user-defined casing\fR
.IX Subsection "Tricks for user-defined casing"
.PP
perlunicode now contains an explanation of how to override, mangle
and otherwise tweak the way Perl handles upper\-, lower\- and other-case
conversions on Unicode data, and how to provide scoped changes to alter
one's own code's behaviour without stomping on anybody else's.
.PP
\fI\s-1INSTALL\s0 explicitly states that Perl requires a C89 compiler\fR
.IX Subsection "INSTALL explicitly states that Perl requires a C89 compiler"
.PP
This was already true, but it's now Officially Stated For The Record
(5.12.2).
.PP
\fIExplanation of \f(CI\*(C`\ex\f(CIHH\f(CI\*(C'\fI and \f(CI\*(C`\eo\f(CIOOO\f(CI\*(C'\fI escapes\fR
.IX Subsection "Explanation of xHH and oOOO escapes"
.PP
perlop has been updated with more detailed explanation of these two
character escapes.
.PP
\fI\f(BI\-0\f(BI\s-1NNN\s0\f(BI\fI switch\fR
.IX Subsection "-0NNN switch"
.PP
In perlrun, the behaviour of the \fB\-0NNN\fR switch for \fB\-0400\fR or higher
has been clarified (5.12.2).
.PP
\fIMaintenance policy\fR
.IX Subsection "Maintenance policy"
.PP
perlpolicy now contains the policy on what patches are acceptable for
maintenance branches (5.12.1).
.PP
\fIDeprecation policy\fR
.IX Subsection "Deprecation policy"
.PP
perlpolicy now contains the policy on compatibility and deprecation
along with definitions of terms like \*(L"deprecation\*(R" (5.12.2).
.PP
\fINew descriptions in perldiag\fR
.IX Subsection "New descriptions in perldiag"
.PP
The following existing diagnostics are now documented:
.IP "\(bu" 4
Ambiguous use of \f(CW%c\fR resolved as operator \f(CW%c\fR
.IP "\(bu" 4
Ambiguous use of \f(CW%c\fR{%s} resolved to \f(CW%c\fR%s
.IP "\(bu" 4
Ambiguous use of \f(CW%c\fR{%s[...]} resolved to \f(CW%c\fR%s[...]
.IP "\(bu" 4
Ambiguous use of \f(CW%c\fR{%s{...}} resolved to \f(CW%c\fR%s{...}
.IP "\(bu" 4
Ambiguous use of \-%s resolved as \-&%s()
.IP "\(bu" 4
Invalid strict version format (%s)
.IP "\(bu" 4
Invalid version format (%s)
.IP "\(bu" 4
Invalid version object
.PP
\fIperlbook\fR
.IX Subsection "perlbook"
.PP
perlbook has been expanded to cover many more popular books.
.PP
\fI\f(CI\*(C`SvTRUE\*(C'\fI macro\fR
.IX Subsection "SvTRUE macro"
.PP
The documentation for the \f(CW\*(C`SvTRUE\*(C'\fR macro in
perlapi was simply wrong in stating that
get-magic is not processed.  It has been corrected.
.PP
\fIop manipulation functions\fR
.IX Subsection "op manipulation functions"
.PP
Several \s-1API\s0 functions that process optrees have been newly documented.
.PP
\fIperlvar revamp\fR
.IX Subsection "perlvar revamp"
.PP
perlvar reorders the variables and groups them by topic.  Each variable
introduced after Perl 5.000 notes the first version in which it is 
available.  perlvar also has a new section for deprecated variables to
note when they were removed.
.PP
\fIArray and hash slices in scalar context\fR
.IX Subsection "Array and hash slices in scalar context"
.PP
These are now documented in perldata.
.PP
\fI\f(CI\*(C`use locale\*(C'\fI and formats\fR
.IX Subsection "use locale and formats"
.PP
perlform and perllocale have been corrected to state that
\&\f(CW\*(C`use locale\*(C'\fR affects formats.
.PP
\fIoverload\fR
.IX Subsection "overload"
.PP
overload's documentation has practically undergone a rewrite.  It
is now much more straightforward and clear.
.PP
\fIperlhack and perlrepository revamp\fR
.IX Subsection "perlhack and perlrepository revamp"
.PP
The perlhack document is now much shorter, and focuses on the Perl 5
development process and submitting patches to Perl.  The technical content
has been moved to several new documents, perlsource, perlinterp,
perlhacktut, and perlhacktips.  This technical content has 
been only lightly edited.
.PP
The perlrepository document has been renamed to perlgit.  This new
document is just a how-to on using git with the Perl source code.
Any other content that used to be in perlrepository has been moved
to perlhack.
.PP
\fITime::Piece examples\fR
.IX Subsection "Time::Piece examples"
.PP
Examples in perlfaq4 have been updated to show the use of
Time::Piece.
.SH "Diagnostics"
.IX Header "Diagnostics"
The following additions or changes have been made to diagnostic output,
including warnings and fatal error messages.  For the complete list of
diagnostic messages, see perldiag.
.SS "New Diagnostics"
.IX Subsection "New Diagnostics"
\fINew Errors\fR
.IX Subsection "New Errors"
.IP "Closure prototype called" 4
.IX Item "Closure prototype called"
This error occurs when a subroutine reference passed to an attribute
handler is called, if the subroutine is a closure [perl #68560].
.ie n .IP "Insecure user-defined property %s" 4
.el .IP "Insecure user-defined property \f(CW%s\fR" 4
.IX Item "Insecure user-defined property %s"
Perl detected tainted data when trying to compile a regular
expression that contains a call to a user-defined character property
function, meaning \f(CW\*(C`\ep{IsFoo}\*(C'\fR or \f(CW\*(C`\ep{InFoo}\*(C'\fR.
See \*(L"User-Defined Character Properties\*(R" in perlunicode and perlsec.
.IP "panic: gp_free failed to free glob pointer \- something is repeatedly re-creating entries" 4
.IX Item "panic: gp_free failed to free glob pointer - something is repeatedly re-creating entries"
This new error is triggered if a destructor called on an object in a
typeglob that is being freed creates a new typeglob entry containing an
object with a destructor that creates a new entry containing an object etc.
.IP "Parsing code internal error (%s)" 4
.IX Item "Parsing code internal error (%s)"
This new fatal error is produced when parsing
code supplied by an extension violates the
parser's \s-1API\s0 in a detectable way.
.ie n .IP "refcnt: fd %d%s" 4
.el .IP "refcnt: fd \f(CW%d\fR%s" 4
.IX Item "refcnt: fd %d%s"
This new error only occurs if a internal consistency check fails when a
pipe is about to be closed.
.ie n .IP "Regexp modifier ""/%c"" may not appear twice" 4
.el .IP "Regexp modifier ``/%c'' may not appear twice" 4
.IX Item "Regexp modifier /%c may not appear twice"
The regular expression pattern has one of the
mutually exclusive modifiers repeated.
.ie n .IP "Regexp modifiers ""/%c"" and ""/%c"" are mutually exclusive" 4
.el .IP "Regexp modifiers ``/%c'' and ``/%c'' are mutually exclusive" 4
.IX Item "Regexp modifiers /%c and /%c are mutually exclusive"
The regular expression pattern has more than one of the mutually
exclusive modifiers.
.ie n .IP "Using !~ with %s doesn't make sense" 4
.el .IP "Using !~ with \f(CW%s\fR doesn't make sense" 4
.IX Item "Using !~ with %s doesn't make sense"
This error occurs when \f(CW\*(C`!~\*(C'\fR is used with \f(CW\*(C`s///r\*(C'\fR or \f(CW\*(C`y///r\*(C'\fR.
.PP
\fINew Warnings\fR
.IX Subsection "New Warnings"
.ie n .IP """\eb{"" is deprecated; use ""\eb\e{"" instead" 4
.el .IP "``\eb{'' is deprecated; use ``\eb\e{'' instead" 4
.IX Item "b{ is deprecated; use b{ instead"
.PD 0
.ie n .IP """\eB{"" is deprecated; use ""\eB\e{"" instead" 4
.el .IP "``\eB{'' is deprecated; use ``\eB\e{'' instead" 4
.IX Item "B{ is deprecated; use B{ instead"
.PD
Use of an unescaped \*(L"{\*(R" immediately following a \f(CW\*(C`\eb\*(C'\fR or \f(CW\*(C`\eB\*(C'\fR is now
deprecated in order to reserve its use for Perl itself in a future release.
.ie n .IP "Operation ""%s"" returns its argument for ..." 4
.el .IP "Operation ``%s'' returns its argument for ..." 4
.IX Item "Operation %s returns its argument for ..."
Performing an operation requiring Unicode semantics (such as case-folding)
on a Unicode surrogate or a non-Unicode character now triggers this
warning.
.IP "Use of qw(...) as parentheses is deprecated" 4
.IX Item "Use of qw(...) as parentheses is deprecated"
See \*(L"Use of qw(...) as parentheses\*(R", above, for details.
.SS "Changes to Existing Diagnostics"
.IX Subsection "Changes to Existing Diagnostics"
.IP "\(bu" 4
The \*(L"Variable \f(CW$foo\fR is not imported\*(R" warning that precedes a
\&\f(CW\*(C`strict \*(Aqvars\*(Aq\*(C'\fR error has now been assigned the \*(L"misc\*(R" category, so that
\&\f(CW\*(C`no warnings\*(C'\fR will suppress it [perl #73712].
.IP "\(bu" 4
\&\fIwarn()\fR and \fIdie()\fR now produce \*(L"Wide character\*(R" warnings when fed a
character outside the byte range if \f(CW\*(C`STDERR\*(C'\fR is a byte-sized handle.
.IP "\(bu" 4
The \*(L"Layer does not match this perl\*(R" error message has been replaced with
these more helpful messages [perl #73754]:
.RS 4
.IP "\(bu" 4
PerlIO layer function table size (%d) does not match size expected by this
perl (%d)
.IP "\(bu" 4
PerlIO layer instance size (%d) does not match size expected by this perl
(%d)
.RE
.RS 4
.RE
.IP "\(bu" 4
The \*(L"Found = in conditional\*(R" warning that is emitted when a constant is
assigned to a variable in a condition is now withheld if the constant is
actually a subroutine or one generated by \f(CW\*(C`use constant\*(C'\fR, since the value
of the constant may not be known at the time the program is written
[perl #77762].
.IP "\(bu" 4
Previously, if none of the \fIgethostbyaddr()\fR, \fIgethostbyname()\fR and
\&\fIgethostent()\fR functions were implemented on a given platform, they would
all die with the message \*(L"Unsupported socket function 'gethostent' called\*(R",
with analogous messages for getnet*() and getserv*().  This has been
corrected.
.IP "\(bu" 4
The warning message about unrecognized regular expression escapes passed
through has been changed to include any literal \*(L"{\*(R" following the
two-character escape.  For example, \*(L"\eq{\*(R" is now emitted instead of \*(L"\eq\*(R".
.SH "Utility Changes"
.IX Header "Utility Changes"
\fI\fIperlbug\fI\|(1)\fR
.IX Subsection "perlbug"
.IP "\(bu" 4
perlbug now looks in the \s-1EMAIL\s0 environment variable for a return address
if the REPLY-TO and \s-1REPLYTO\s0 variables are empty.
.IP "\(bu" 4
perlbug did not previously generate a \*(L"From:\*(R" header, potentially
resulting in dropped mail; it now includes that header.
.IP "\(bu" 4
The user's address is now used as the Return-Path.
.Sp
Many systems these days don't have a valid Internet domain name, and
perlbug@perl.org does not accept email with a return-path that does
not resolve.  So the user's address is now passed to sendmail so it's
less likely to get stuck in a mail queue somewhere [perl #82996].
.IP "\(bu" 4
perlbug now always gives the reporter a chance to change the email
address it guesses for them (5.12.2).
.IP "\(bu" 4
perlbug should no longer warn about uninitialized values when using the \fB\-d\fR
and \fB\-v\fR options (5.12.2).
.PP
\fIperl5db.pl\fR
.IX Subsection "perl5db.pl"
.IP "\(bu" 4
The remote terminal works after forking and spawns new sessions, one
per forked process.
.PP
\fIptargrep\fR
.IX Subsection "ptargrep"
.IP "\(bu" 4
ptargrep is a new utility to apply pattern matching to the contents of
files  in a tar archive.  It comes with \f(CW\*(C`Archive::Tar\*(C'\fR.
.SH "Configuration and Compilation"
.IX Header "Configuration and Compilation"
See also \*(L"Naming fixes in Policy_sh.SH may invalidate Policy.sh\*(R",
above.
.IP "\(bu" 4
\&\s-1CCINCDIR\s0 and \s-1CCLIBDIR\s0 for the mingw64 cross-compiler are now correctly
under \fI$(\s-1CCHOME\s0)\emingw\einclude\fR and \fI\elib\fR rather than immediately below
\&\fI$(\s-1CCHOME\s0)\fR.
.Sp
This means the \*(L"incpath\*(R", \*(L"libpth\*(R", \*(L"ldflags\*(R", \*(L"lddlflags\*(R" and
\&\*(L"ldflags_nolargefiles\*(R" values in \fIConfig.pm\fR and \fIConfig_heavy.pl\fR are now
set correctly.
.IP "\(bu" 4
\&\f(CW\*(C`make test.valgrind\*(C'\fR has been adjusted to account for \fIcpan/dist/ext\fR
separation.
.IP "\(bu" 4
On compilers that support it, \fB\-Wwrite\-strings\fR is now added to cflags by
default.
.IP "\(bu" 4
The Encode module can now (once again) be included in a static Perl
build.  The special-case handling for this situation got broken in Perl
5.11.0, and has now been repaired.
.IP "\(bu" 4
The previous default size of a PerlIO buffer (4096 bytes) has been increased
to the larger of 8192 bytes and your local \s-1BUFSIZ\s0.  Benchmarks show that doubling
this decade-old default increases read and write performance by around
25% to 50% when using the default layers of perlio on top of unix.  To choose
a non-default size, such as to get back the old value or to obtain an even
larger value, configure with:
.Sp
.Vb 1
\&     ./Configure \-Accflags=\-DPERLIOBUF_DEFAULT_BUFSIZ=N
.Ve
.Sp
where N is the desired size in bytes; it should probably be a multiple of
your page size.
.IP "\(bu" 4
An \*(L"incompatible operand types\*(R" error in ternary expressions when building
with \f(CW\*(C`clang\*(C'\fR has been fixed (5.12.2).
.IP "\(bu" 4
Perl now skips setuid File::Copy tests on partitions it detects mounted
as \f(CW\*(C`nosuid\*(C'\fR (5.12.2).
.SH "Platform Support"
.IX Header "Platform Support"
.SS "New Platforms"
.IX Subsection "New Platforms"
.IP "\s-1AIX\s0" 4
.IX Item "AIX"
Perl now builds on \s-1AIX\s0 4.2 (5.12.1).
.SS "Discontinued Platforms"
.IX Subsection "Discontinued Platforms"
.IP "Apollo DomainOS" 4
.IX Item "Apollo DomainOS"
The last vestiges of support for this platform have been excised from
the Perl distribution.  It was officially discontinued in version 5.12.0.
It had not worked for years before that.
.IP "MacOS Classic" 4
.IX Item "MacOS Classic"
The last vestiges of support for this platform have been excised from the
Perl distribution.  It was officially discontinued in an earlier version.
.SS "Platform-Specific Notes"
.IX Subsection "Platform-Specific Notes"
\fI\s-1AIX\s0\fR
.IX Subsection "AIX"
.IP "\(bu" 4
\&\fI\s-1README\s0.aix\fR has been updated with information about the \s-1XL\s0 C/\*(C+ V11 compiler
suite (5.12.2).
.PP
\fI\s-1ARM\s0\fR
.IX Subsection "ARM"
.IP "\(bu" 4
The \f(CW\*(C`d_u32align\*(C'\fR configuration probe on \s-1ARM\s0 has been fixed (5.12.2).
.PP
\fICygwin\fR
.IX Subsection "Cygwin"
.IP "\(bu" 4
MakeMaker has been updated to build manpages on cygwin.
.IP "\(bu" 4
Improved rebase behaviour
.Sp
If a \s-1DLL\s0 is updated on cygwin the old imagebase address is reused.
This solves most rebase errors, especially when updating on core \s-1DLL\s0's.
See http://www.tishler.net/jason/software/rebase/rebase\-2.4.2.README <http://www.tishler.net/jason/software/rebase/rebase-2.4.2.README> 
for more information.
.IP "\(bu" 4
Support for the standard cygwin dll prefix (needed for FFIs)
.IP "\(bu" 4
Updated build hints file
.PP
\fIFreeBSD 7\fR
.IX Subsection "FreeBSD 7"
.IP "\(bu" 4
FreeBSD 7 no longer contains \fI/usr/bin/objformat\fR.  At build time,
Perl now skips the \fIobjformat\fR check for versions 7 and higher and
assumes \s-1ELF\s0 (5.12.1).
.PP
\fIHP-UX\fR
.IX Subsection "HP-UX"
.IP "\(bu" 4
Perl now allows \fB\-Duse64bitint\fR without promoting to \f(CW\*(C`use64bitall\*(C'\fR on HP-UX
(5.12.1).
.PP
\fI\s-1IRIX\s0\fR
.IX Subsection "IRIX"
.IP "\(bu" 4
Conversion of strings to floating-point numbers is now more accurate on
\&\s-1IRIX\s0 systems [perl #32380].
.PP
\fIMac \s-1OS\s0 X\fR
.IX Subsection "Mac OS X"
.IP "\(bu" 4
Early versions of Mac \s-1OS\s0 X (Darwin) had buggy implementations of the
\&\fIsetregid()\fR, \fIsetreuid()\fR, setrgid(,) and \fIsetruid()\fR functions, so Perl
would pretend they did not exist.
.Sp
These functions are now recognised on Mac \s-1OS\s0 10.5 (Leopard; Darwin 9) and
higher, as they have been fixed [perl #72990].
.PP
\fIMirBSD\fR
.IX Subsection "MirBSD"
.IP "\(bu" 4
Previously if you built Perl with a shared \fIlibperl.so\fR on MirBSD (the
default config), it would work up to the installation; however, once
installed, it would be unable to find \fIlibperl\fR.  Path handling is now
treated as in the other \s-1BSD\s0 dialects.
.PP
\fINetBSD\fR
.IX Subsection "NetBSD"
.IP "\(bu" 4
The NetBSD hints file has been changed to make the system malloc the
default.
.PP
\fIOpenBSD\fR
.IX Subsection "OpenBSD"
.IP "\(bu" 4
OpenBSD > 3.7 has a new malloc implementation which is \fImmap\fR\-based,
and as such can release memory back to the \s-1OS\s0; however, Perl's use of
this malloc causes a substantial slowdown, so we now default to using
Perl's malloc instead [perl #75742].
.PP
\fIOpenVOS\fR
.IX Subsection "OpenVOS"
.IP "\(bu" 4
Perl now builds again with OpenVOS (formerly known as Stratus \s-1VOS\s0)
[perl #78132] (5.12.3).
.PP
\fISolaris\fR
.IX Subsection "Solaris"
.IP "\(bu" 4
DTrace is now supported on Solaris.  There used to be build failures, but
these have been fixed [perl #73630] (5.12.3).
.PP
\fI\s-1VMS\s0\fR
.IX Subsection "VMS"
.IP "\(bu" 4
Extension building on older (pre 7.3\-2) \s-1VMS\s0 systems was broken because
configure.com hit the \s-1DCL\s0 symbol length limit of 1K.  We now work within
this limit when assembling the list of extensions in the core build (5.12.1).
.IP "\(bu" 4
We fixed configuring and building Perl with \fB\-Uuseperlio\fR (5.12.1).
.IP "\(bu" 4
\&\f(CW\*(C`PerlIOUnix_open\*(C'\fR now honours the default permissions on \s-1VMS\s0.
.Sp
When \f(CW\*(C`perlio\*(C'\fR became the default and \f(CW\*(C`unix\*(C'\fR became the default bottom layer,
the most common path for creating files from Perl became \f(CW\*(C`PerlIOUnix_open\*(C'\fR,
which has always explicitly used \f(CW0666\fR as the permission mask.  This prevents
inheriting permissions from \s-1RMS\s0 defaults and ACLs, so to avoid that problem,
we now pass \f(CW0777\fR to \fIopen()\fR.  In the \s-1VMS\s0 \s-1CRTL\s0, \f(CW0777\fR has a special
meaning over and above intersecting with the current umask; specifically, it
allows Unix syscalls to preserve native default permissions (5.12.3).
.IP "\(bu" 4
The shortening of symbols longer than 31 characters in the core C sources
and in extensions is now by default done by the C compiler rather than by
xsubpp (which could only do so for generated symbols in \s-1XS\s0 code).  You can
reenable xsubpp's symbol shortening by configuring with \-Uuseshortenedsymbols,
but you'll have some work to do to get the core sources to compile.
.IP "\(bu" 4
Record-oriented files (record format variable or variable with fixed control)
opened for write by the \f(CW\*(C`perlio\*(C'\fR layer will now be line-buffered to prevent the
introduction of spurious line breaks whenever the perlio buffer fills up.
.IP "\(bu" 4
\&\fIgit_version.h\fR is now installed on \s-1VMS\s0.  This was an oversight in v5.12.0 which
caused some extensions to fail to build (5.12.2).
.IP "\(bu" 4
Several memory leaks in \fIstat()\fR have been fixed (5.12.2).
.IP "\(bu" 4
A memory leak in \fIPerl_rename()\fR due to a double allocation has been
fixed (5.12.2).
.IP "\(bu" 4
A memory leak in \fIvms_fid_to_name()\fR (used by \fIrealpath()\fR and
\&\fIrealname()\fR> has been fixed (5.12.2).
.PP
\fIWindows\fR
.IX Subsection "Windows"
.PP
See also \*(L"\fIfork()\fR emulation will not wait for signalled children\*(R" and
\&\*(L"Perl source code is read in text mode on Windows\*(R", above.
.IP "\(bu" 4
Fixed build process for \s-1SDK2003SP1\s0 compilers.
.IP "\(bu" 4
Compilation with Visual Studio 2010 is now supported.
.IP "\(bu" 4
When using old 32\-bit compilers, the define \f(CW\*(C`_USE_32BIT_TIME_T\*(C'\fR is now
set in \f(CW$Config{ccflags}\fR.  This improves portability when compiling
\&\s-1XS\s0 extensions using new compilers, but for a Perl compiled with old 32\-bit
compilers.
.IP "\(bu" 4
\&\f(CW$Config{gccversion}\fR is now set correctly when Perl is built using the
mingw64 compiler from <http://mingw64.org> [perl #73754].
.IP "\(bu" 4
When building Perl with the mingw64 x64 cross-compiler \f(CW\*(C`incpath\*(C'\fR,
\&\f(CW\*(C`libpth\*(C'\fR, \f(CW\*(C`ldflags\*(C'\fR, \f(CW\*(C`lddlflags\*(C'\fR and \f(CW\*(C`ldflags_nolargefiles\*(C'\fR values
in \fIConfig.pm\fR and \fIConfig_heavy.pl\fR were not previously being set
correctly because, with that compiler, the include and lib directories
are not immediately below \f(CW\*(C`$(CCHOME)\*(C'\fR (5.12.2).
.IP "\(bu" 4
The build process proceeds more smoothly with mingw and dmake when
\&\fIC:\eMSYS\ebin\fR is in the \s-1PATH\s0, due to a \f(CW\*(C`Cwd\*(C'\fR fix.
.IP "\(bu" 4
Support for building with Visual \*(C+ 2010 is now underway, but is not yet
complete.  See \fI\s-1README\s0.win32\fR or perlwin32 for more details.
.IP "\(bu" 4
The option to use an externally-supplied \fIcrypt()\fR, or to build with no
\&\fIcrypt()\fR at all, has been removed.  Perl supplies its own \fIcrypt()\fR
implementation for Windows, and the political situation that required
this part of the distribution to sometimes be omitted is long gone.
.SH "Internal Changes"
.IX Header "Internal Changes"
.SS "New APIs"
.IX Subsection "New APIs"
\fI\s-1CLONE_PARAMS\s0 structure added to ease correct thread creation\fR
.IX Subsection "CLONE_PARAMS structure added to ease correct thread creation"
.PP
Modules that create threads should now create \f(CW\*(C`CLONE_PARAMS\*(C'\fR structures
by calling the new function \fIPerl_clone_params_new()\fR, and free them with
\&\fIPerl_clone_params_del()\fR.  This will ensure compatibility with any future
changes to the internals of the \f(CW\*(C`CLONE_PARAMS\*(C'\fR structure layout, and that
it is correctly allocated and initialised.
.PP
\fINew parsing functions\fR
.IX Subsection "New parsing functions"
.PP
Several functions have been added for parsing Perl statements and
expressions.  These functions are meant to be used by \s-1XS\s0 code invoked
during Perl parsing, in a recursive-descent manner, to allow modules to
augment the standard Perl syntax.
.IP "\(bu" 4
\&\fIparse_stmtseq()\fR
parses a sequence of statements, up to closing brace or \s-1EOF\s0.
.IP "\(bu" 4
\&\fIparse_fullstmt()\fR
parses a complete Perl statement, including optional label.
.IP "\(bu" 4
\&\fIparse_barestmt()\fR
parses a statement without a label.
.IP "\(bu" 4
\&\fIparse_block()\fR
parses a code block.
.IP "\(bu" 4
\&\fIparse_label()\fR
parses a statement label, separate from statements.
.IP "\(bu" 4
\&\f(CW\*(C`parse_fullexpr()\*(C'\fR,
\&\f(CW\*(C`parse_listexpr()\*(C'\fR,
\&\f(CW\*(C`parse_termexpr()\*(C'\fR, and
\&\f(CW\*(C`parse_arithexpr()\*(C'\fR
parse expressions at various precedence levels.
.PP
\fIHints hash \s-1API\s0\fR
.IX Subsection "Hints hash API"
.PP
A new C \s-1API\s0 for introspecting the hinthash \f(CW\*(C`%^H\*(C'\fR at runtime has been
added.  See \f(CW\*(C`cop_hints_2hv\*(C'\fR, \f(CW\*(C`cop_hints_fetchpvn\*(C'\fR, \f(CW\*(C`cop_hints_fetchpvs\*(C'\fR,
\&\f(CW\*(C`cop_hints_fetchsv\*(C'\fR, and \f(CW\*(C`hv_copy_hints_hv\*(C'\fR in perlapi for details.
.PP
A new, experimental \s-1API\s0 has been added for accessing the internal
structure that Perl uses for \f(CW\*(C`%^H\*(C'\fR.  See the functions beginning with
\&\f(CW\*(C`cophh_\*(C'\fR in perlapi.
.PP
\fIC interface to \fIcaller()\fI\fR
.IX Subsection "C interface to caller()"
.PP
The \f(CW\*(C`caller_cx\*(C'\fR function has been added as an XSUB-writer's equivalent of
\&\fIcaller()\fR.  See perlapi for details.
.PP
\fICustom per-subroutine check hooks\fR
.IX Subsection "Custom per-subroutine check hooks"
.PP
\&\s-1XS\s0 code in an extension module can now annotate a subroutine (whether
implemented in \s-1XS\s0 or in Perl) so that nominated \s-1XS\s0 code will be called
at compile time (specifically as part of op checking) to change the op
tree of that subroutine.  The compile-time check function (supplied by
the extension module) can implement argument processing that can't be
expressed as a prototype, generate customised compile-time warnings,
perform constant folding for a pure function, inline a subroutine
consisting of sufficiently simple ops, replace the whole call with a
custom op, and so on.  This was previously all possible by hooking the
\&\f(CW\*(C`entersub\*(C'\fR op checker, but the new mechanism makes it easy to tie the
hook to a specific subroutine.  See \*(L"cv_set_call_checker\*(R" in perlapi.
.PP
To help in writing custom check hooks, several subtasks within standard
\&\f(CW\*(C`entersub\*(C'\fR op checking have been separated out and exposed in the \s-1API\s0.
.PP
\fIImproved support for custom OPs\fR
.IX Subsection "Improved support for custom OPs"
.PP
Custom ops can now be registered with the new \f(CW\*(C`custom_op_register\*(C'\fR C
function and the \f(CW\*(C`XOP\*(C'\fR structure.  This will make it easier to add new
properties of custom ops in the future.  Two new properties have been added
already, \f(CW\*(C`xop_class\*(C'\fR and \f(CW\*(C`xop_peep\*(C'\fR.
.PP
\&\f(CW\*(C`xop_class\*(C'\fR is one of the OA_*OP constants.  It allows B and other
introspection mechanisms to work with custom ops
that aren't BASEOPs.  \f(CW\*(C`xop_peep\*(C'\fR is a pointer to
a function that will be called for ops of this
type from \f(CW\*(C`Perl_rpeep\*(C'\fR.
.PP
See \*(L"Custom Operators\*(R" in perlguts and \*(L"Custom Operators\*(R" in perlapi for more
detail.
.PP
The old \f(CW\*(C`PL_custom_op_names\*(C'\fR/\f(CW\*(C`PL_custom_op_descs\*(C'\fR interface is still
supported but discouraged.
.PP
\fIScope hooks\fR
.IX Subsection "Scope hooks"
.PP
It is now possible for \s-1XS\s0 code to hook into Perl's lexical scope
mechanism at compile time, using the new \f(CW\*(C`Perl_blockhook_register\*(C'\fR
function.  See \*(L"Compile-time scope hooks\*(R" in perlguts.
.PP
\fIThe recursive part of the peephole optimizer is now hookable\fR
.IX Subsection "The recursive part of the peephole optimizer is now hookable"
.PP
In addition to \f(CW\*(C`PL_peepp\*(C'\fR, for hooking into the toplevel peephole optimizer, a
\&\f(CW\*(C`PL_rpeepp\*(C'\fR is now available to hook into the optimizer recursing into
side-chains of the optree.
.PP
\fINew non-magical variants of existing functions\fR
.IX Subsection "New non-magical variants of existing functions"
.PP
The following functions/macros have been added to the \s-1API\s0.  The \f(CW*_nomg\fR
macros are equivalent to their non\-\f(CW\*(C`_nomg\*(C'\fR variants, except that they ignore
get-magic.  Those ending in \f(CW\*(C`_flags\*(C'\fR allow one to specify whether
get-magic is processed.
.PP
.Vb 8
\&  sv_2bool_flags
\&  SvTRUE_nomg
\&  sv_2nv_flags
\&  SvNV_nomg
\&  sv_cmp_flags
\&  sv_cmp_locale_flags
\&  sv_eq_flags
\&  sv_collxfrm_flags
.Ve
.PP
In some of these cases, the non\-\f(CW\*(C`_flags\*(C'\fR functions have
been replaced with wrappers around the new functions.
.PP
\fIpv/pvs/sv versions of existing functions\fR
.IX Subsection "pv/pvs/sv versions of existing functions"
.PP
Many functions ending with pvn now have equivalent \f(CW\*(C`pv/pvs/sv\*(C'\fR versions.
.PP
\fIList op-building functions\fR
.IX Subsection "List op-building functions"
.PP
List op-building functions have been added to the
\&\s-1API\s0.  See op_append_elem,
op_append_list, and
op_prepend_elem in perlapi.
.PP
\fI\f(CI\*(C`LINKLIST\*(C'\fI\fR
.IX Subsection "LINKLIST"
.PP
The \s-1LINKLIST\s0 macro, part of op building that
constructs the execution-order op chain, has been added to the \s-1API\s0.
.PP
\fILocalisation functions\fR
.IX Subsection "Localisation functions"
.PP
The \f(CW\*(C`save_freeop\*(C'\fR, \f(CW\*(C`save_op\*(C'\fR, \f(CW\*(C`save_pushi32ptr\*(C'\fR and \f(CW\*(C`save_pushptrptr\*(C'\fR
functions have been added to the \s-1API\s0.
.PP
\fIStash names\fR
.IX Subsection "Stash names"
.PP
A stash can now have a list of effective names in addition to its usual
name.  The first effective name can be accessed via the \f(CW\*(C`HvENAME\*(C'\fR macro,
which is now the recommended name to use in \s-1MRO\s0 linearisations (\f(CW\*(C`HvNAME\*(C'\fR
being a fallback if there is no \f(CW\*(C`HvENAME\*(C'\fR).
.PP
These names are added and deleted via \f(CW\*(C`hv_ename_add\*(C'\fR and
\&\f(CW\*(C`hv_ename_delete\*(C'\fR.  These two functions are \fInot\fR part of the \s-1API\s0.
.PP
\fINew functions for finding and removing magic\fR
.IX Subsection "New functions for finding and removing magic"
.PP
The \f(CW\*(C`mg_findext()\*(C'\fR and
\&\f(CW\*(C`sv_unmagicext()\*(C'\fR
functions have been added to the \s-1API\s0.
They allow extension authors to find and remove magic attached to
scalars based on both the magic type and the magic virtual table, similar to how
\&\fIsv_magicext()\fR attaches magic of a certain type and with a given virtual table
to a scalar.  This eliminates the need for extensions to walk the list of
\&\f(CW\*(C`MAGIC\*(C'\fR pointers of an \f(CW\*(C`SV\*(C'\fR to find the magic that belongs to them.
.PP
\fI\f(CI\*(C`find_rundefsv\*(C'\fI\fR
.IX Subsection "find_rundefsv"
.PP
This function returns the \s-1SV\s0 representing \f(CW$_\fR, whether it's lexical
or dynamic.
.PP
\fI\f(CI\*(C`Perl_croak_no_modify\*(C'\fI\fR
.IX Subsection "Perl_croak_no_modify"
.PP
\&\fIPerl_croak_no_modify()\fR is short-hand for
\&\f(CW\*(C`Perl_croak("%s", PL_no_modify)\*(C'\fR.
.PP
\fI\f(CI\*(C`PERL_STATIC_INLINE\*(C'\fI define\fR
.IX Subsection "PERL_STATIC_INLINE define"
.PP
The \f(CW\*(C`PERL_STATIC_INLINE\*(C'\fR define has been added to provide the best-guess
incantation to use for static inline functions, if the C compiler supports
C99\-style static inline.  If it doesn't, it'll give a plain \f(CW\*(C`static\*(C'\fR.
.PP
\&\f(CW\*(C`HAS_STATIC_INLINE\*(C'\fR can be used to check if the compiler actually supports
inline functions.
.PP
\fINew \f(CI\*(C`pv_escape\*(C'\fI option for hexadecimal escapes\fR
.IX Subsection "New pv_escape option for hexadecimal escapes"
.PP
A new option, \f(CW\*(C`PERL_PV_ESCAPE_NONASCII\*(C'\fR, has been added to \f(CW\*(C`pv_escape\*(C'\fR to
dump all characters above \s-1ASCII\s0 in hexadecimal.  Before, one could get all
characters as hexadecimal or the Latin1 non-ASCII as octal.
.PP
\fI\f(CI\*(C`lex_start\*(C'\fI\fR
.IX Subsection "lex_start"
.PP
\&\f(CW\*(C`lex_start\*(C'\fR has been added to the \s-1API\s0, but is considered experimental.
.PP
\fI\fIop_scope()\fI and \fIop_lvalue()\fI\fR
.IX Subsection "op_scope() and op_lvalue()"
.PP
The \fIop_scope()\fR and \fIop_lvalue()\fR functions have been added to the \s-1API\s0,
but are considered experimental.
.SS "C \s-1API\s0 Changes"
.IX Subsection "C API Changes"
\fI\f(CI\*(C`PERL_POLLUTE\*(C'\fI has been removed\fR
.IX Subsection "PERL_POLLUTE has been removed"
.PP
The option to define \f(CW\*(C`PERL_POLLUTE\*(C'\fR to expose older 5.005 symbols for
backwards compatibility has been removed.  Its use was always discouraged,
and MakeMaker contains a more specific escape hatch:
.PP
.Vb 1
\&    perl Makefile.PL POLLUTE=1
.Ve
.PP
This can be used for modules that have not been upgraded to 5.6 naming
conventions (and really should be completely obsolete by now).
.PP
\fICheck \s-1API\s0 compatibility when loading \s-1XS\s0 modules\fR
.IX Subsection "Check API compatibility when loading XS modules"
.PP
When Perl's \s-1API\s0 changes in incompatible ways (which usually happens between
major releases), \s-1XS\s0 modules compiled for previous versions of Perl will no
longer work.  They need to be recompiled against the new Perl.
.PP
The \f(CW\*(C`XS_APIVERSION_BOOTCHECK\*(C'\fR macro has been added to ensure that modules
are recompiled and to prevent users from accidentally loading modules
compiled for old perls into newer perls.  That macro, which is called when
loading every newly compiled extension, compares the \s-1API\s0 version of the
running perl with the version a module has been compiled for and raises an
exception if they don't match.
.PP
\fIPerl_fetch_cop_label\fR
.IX Subsection "Perl_fetch_cop_label"
.PP
The first argument of the C \s-1API\s0 function \f(CW\*(C`Perl_fetch_cop_label\*(C'\fR has changed
from \f(CW\*(C`struct refcounted_he *\*(C'\fR to \f(CW\*(C`COP *\*(C'\fR, to insulate the user from
implementation details.
.PP
This \s-1API\s0 function was marked as \*(L"may change\*(R", and likely isn't in use outside
the core.  (Neither an unpacked \s-1CPAN\s0 nor Google's codesearch finds any other
references to it.)
.PP
\fI\fIGvCV()\fI and \fIGvGP()\fI are no longer lvalues\fR
.IX Subsection "GvCV() and GvGP() are no longer lvalues"
.PP
The new \fIGvCV_set()\fR and \fIGvGP_set()\fR macros are now provided to replace
assignment to those two macros.
.PP
This allows a future commit to eliminate some backref magic between \s-1GV\s0
and CVs, which will require complete control over assignment to the
\&\f(CW\*(C`gp_cv\*(C'\fR slot.
.PP
\fI\fICvGV()\fI is no longer an lvalue\fR
.IX Subsection "CvGV() is no longer an lvalue"
.PP
Under some circumstances, the \fICvGV()\fR field of a \s-1CV\s0 is now
reference-counted.  To ensure consistent behaviour, direct assignment to
it, for example \f(CW\*(C`CvGV(cv) = gv\*(C'\fR is now a compile-time error.  A new macro,
\&\f(CW\*(C`CvGV_set(cv,gv)\*(C'\fR has been introduced to run this operation
safely.  Note that modification of this field is not part of the public
\&\s-1API\s0, regardless of this new macro (and despite its being listed in this section).
.PP
\fI\fICvSTASH()\fI is no longer an lvalue\fR
.IX Subsection "CvSTASH() is no longer an lvalue"
.PP
The \fICvSTASH()\fR macro can now only be used as an rvalue.  \fICvSTASH_set()\fR
has been added to replace assignment to \fICvSTASH()\fR.  This is to ensure
that backreferences are handled properly.  These macros are not part of the
\&\s-1API\s0.
.PP
\fICalling conventions for \f(CI\*(C`newFOROP\*(C'\fI and \f(CI\*(C`newWHILEOP\*(C'\fI\fR
.IX Subsection "Calling conventions for newFOROP and newWHILEOP"
.PP
The way the parser handles labels has been cleaned up and refactored.  As a
result, the \fInewFOROP()\fR constructor function no longer takes a parameter
stating what label is to go in the state op.
.PP
The \fInewWHILEOP()\fR and \fInewFOROP()\fR functions no longer accept a line
number as a parameter.
.PP
\fIFlags passed to \f(CI\*(C`uvuni_to_utf8_flags\*(C'\fI and \f(CI\*(C`utf8n_to_uvuni\*(C'\fI\fR
.IX Subsection "Flags passed to uvuni_to_utf8_flags and utf8n_to_uvuni"
.PP
Some of the flags parameters to \fIuvuni_to_utf8_flags()\fR and
\&\fIutf8n_to_uvuni()\fR have changed.  This is a result of Perl's now allowing
internal storage and manipulation of code points that are problematic
in some situations.  Hence, the default actions for these functions has
been complemented to allow these code points.  The new flags are
documented in perlapi.  Code that requires the problematic code
points to be rejected needs to change to use the new flags.  Some flag
names are retained for backward source compatibility, though they do
nothing, as they are now the default.  However the flags
\&\f(CW\*(C`UNICODE_ALLOW_FDD0\*(C'\fR, \f(CW\*(C`UNICODE_ALLOW_FFFF\*(C'\fR, \f(CW\*(C`UNICODE_ILLEGAL\*(C'\fR, and
\&\f(CW\*(C`UNICODE_IS_ILLEGAL\*(C'\fR have been removed, as they stem from a
fundamentally broken model of how the Unicode non-character code points
should be handled, which is now described in
\&\*(L"Non-character code points\*(R" in perlunicode.  See also the Unicode section
under \*(L"Selected Bug Fixes\*(R".
.SS "Deprecated C APIs"
.IX Subsection "Deprecated C APIs"
.ie n .IP """Perl_ptr_table_clear""" 4
.el .IP "\f(CWPerl_ptr_table_clear\fR" 4
.IX Item "Perl_ptr_table_clear"
\&\f(CW\*(C`Perl_ptr_table_clear\*(C'\fR is no longer part of Perl's public \s-1API\s0.  Calling it
now generates a deprecation warning, and it will be removed in a future
release.
.ie n .IP """sv_compile_2op""" 4
.el .IP "\f(CWsv_compile_2op\fR" 4
.IX Item "sv_compile_2op"
The \fIsv_compile_2op()\fR \s-1API\s0 function is now deprecated.  Searches suggest
that nothing on \s-1CPAN\s0 is using it, so this should have zero impact.
.Sp
It attempted to provide an \s-1API\s0 to compile code down to an optree, but failed
to bind correctly to lexicals in the enclosing scope.  It's not possible to
fix this problem within the constraints of its parameters and return value.
.ie n .IP """find_rundefsvoffset""" 4
.el .IP "\f(CWfind_rundefsvoffset\fR" 4
.IX Item "find_rundefsvoffset"
The \f(CW\*(C`find_rundefsvoffset\*(C'\fR function has been deprecated.  It appeared that
its design was insufficient for reliably getting the lexical \f(CW$_\fR at
run-time.
.Sp
Use the new \f(CW\*(C`find_rundefsv\*(C'\fR function or the \f(CW\*(C`UNDERBAR\*(C'\fR macro
instead.  They directly return the right \s-1SV\s0
representing \f(CW$_\fR, whether it's
lexical or dynamic.
.ie n .IP """CALL_FPTR"" and ""CPERLscope""" 4
.el .IP "\f(CWCALL_FPTR\fR and \f(CWCPERLscope\fR" 4
.IX Item "CALL_FPTR and CPERLscope"
Those are left from an old implementation of \f(CW\*(C`MULTIPLICITY\*(C'\fR using \*(C+ objects,
which was removed in Perl 5.8.  Nowadays these macros do exactly nothing, so
they shouldn't be used anymore.
.Sp
For compatibility, they are still defined for external \f(CW\*(C`XS\*(C'\fR code.  Only
extensions defining \f(CW\*(C`PERL_CORE\*(C'\fR must be updated now.
.SS "Other Internal Changes"
.IX Subsection "Other Internal Changes"
\fIStack unwinding\fR
.IX Subsection "Stack unwinding"
.PP
The protocol for unwinding the C stack at the last stage of a \f(CW\*(C`die\*(C'\fR
has changed how it identifies the target stack frame.  This now uses
a separate variable \f(CW\*(C`PL_restartjmpenv\*(C'\fR, where previously it relied on
the \f(CW\*(C`blk_eval.cur_top_env\*(C'\fR pointer in the \f(CW\*(C`eval\*(C'\fR context frame that
has nominally just been discarded.  This change means that code running
during various stages of Perl-level unwinding no longer needs to take
care to avoid destroying the ghost frame.
.PP
\fIScope stack entries\fR
.IX Subsection "Scope stack entries"
.PP
The format of entries on the scope stack has been changed, resulting in a
reduction of memory usage of about 10%.  In particular, the memory used by
the scope stack to record each active lexical variable has been halved.
.PP
\fIMemory allocation for pointer tables\fR
.IX Subsection "Memory allocation for pointer tables"
.PP
Memory allocation for pointer tables has been changed.  Previously
\&\f(CW\*(C`Perl_ptr_table_store\*(C'\fR allocated memory from the same arena system as
\&\f(CW\*(C`SV\*(C'\fR bodies and \f(CW\*(C`HE\*(C'\fRs, with freed memory remaining bound to those arenas
until interpreter exit.  Now it allocates memory from arenas private to the
specific pointer table, and that memory is returned to the system when
\&\f(CW\*(C`Perl_ptr_table_free\*(C'\fR is called.  Additionally, allocation and release are
both less \s-1CPU\s0 intensive.
.PP
\fI\f(CI\*(C`UNDERBAR\*(C'\fI\fR
.IX Subsection "UNDERBAR"
.PP
The \f(CW\*(C`UNDERBAR\*(C'\fR macro now calls \f(CW\*(C`find_rundefsv\*(C'\fR.  \f(CW\*(C`dUNDERBAR\*(C'\fR is now a
noop but should still be used to ensure past and future compatibility.
.PP
\fIString comparison routines renamed\fR
.IX Subsection "String comparison routines renamed"
.PP
The \f(CW\*(C`ibcmp_*\*(C'\fR functions have been renamed and are now called \f(CW\*(C`foldEQ\*(C'\fR,
\&\f(CW\*(C`foldEQ_locale\*(C'\fR, and \f(CW\*(C`foldEQ_utf8\*(C'\fR.  The old names are still available as
macros.
.PP
\fI\f(CI\*(C`chop\*(C'\fI and \f(CI\*(C`chomp\*(C'\fI implementations merged\fR
.IX Subsection "chop and chomp implementations merged"
.PP
The opcode bodies for \f(CW\*(C`chop\*(C'\fR and \f(CW\*(C`chomp\*(C'\fR and for \f(CW\*(C`schop\*(C'\fR and \f(CW\*(C`schomp\*(C'\fR
have been merged.  The implementation functions \fIPerl_do_chop()\fR and
\&\fIPerl_do_chomp()\fR, never part of the public \s-1API\s0, have been merged and
moved to a static function in \fIpp.c\fR.  This shrinks the Perl binary
slightly, and should not affect any code outside the core (unless it is
relying on the order of side-effects when \f(CW\*(C`chomp\*(C'\fR is passed a \fIlist\fR of
values).
.SH "Selected Bug Fixes"
.IX Header "Selected Bug Fixes"
.SS "I/O"
.IX Subsection "I/O"
.IP "\(bu" 4
Perl no longer produces this warning:
.Sp
.Vb 2
\&    $ perl \-we \*(Aqopen(my $f, ">", \emy $x); binmode($f, "scalar")\*(Aq
\&    Use of uninitialized value in binmode at \-e line 1.
.Ve
.IP "\(bu" 4
Opening a glob reference via \f(CW\*(C`open($fh, ">", \e*glob)\*(C'\fR no longer
causes the glob to be corrupted when the filehandle is printed to.  This would
cause Perl to crash whenever the glob's contents were accessed
[perl #77492].
.IP "\(bu" 4
PerlIO no longer crashes when called recursively, such as from a signal
handler.  Now it just leaks memory [perl #75556].
.IP "\(bu" 4
Most I/O functions were not warning for unopened handles unless the
\&\*(L"closed\*(R" and \*(L"unopened\*(R" warnings categories were both enabled.  Now only
\&\f(CW\*(C`use warnings \*(Aqunopened\*(Aq\*(C'\fR is necessary to trigger these warnings, as
had always been the intention.
.IP "\(bu" 4
There have been several fixes to PerlIO layers:
.Sp
When \f(CW\*(C`binmode(FH, ":crlf")\*(C'\fR pushes the \f(CW\*(C`:crlf\*(C'\fR layer on top of the stack,
it no longer enables crlf layers lower in the stack so as to avoid
unexpected results [perl #38456].
.Sp
Opening a file in \f(CW\*(C`:raw\*(C'\fR mode now does what it advertises to do (first
open the file, then \f(CW\*(C`binmode\*(C'\fR it), instead of simply leaving off the top
layer [perl #80764].
.Sp
The three layers \f(CW\*(C`:pop\*(C'\fR, \f(CW\*(C`:utf8\*(C'\fR, and \f(CW\*(C`:bytes\*(C'\fR didn't allow stacking when
opening a file.  For example
this:
.Sp
.Vb 1
\&    open(FH, ">:pop:perlio", "some.file") or die $!;
.Ve
.Sp
would throw an \*(L"Invalid argument\*(R" error.  This has been fixed in this
release [perl #82484].
.SS "Regular Expression Bug Fixes"
.IX Subsection "Regular Expression Bug Fixes"
.IP "\(bu" 4
The regular expression engine no longer loops when matching
\&\f(CW\*(C`"\eN{LATIN SMALL LIGATURE FF}" =~ /f+/i\*(C'\fR and similar expressions
[perl #72998] (5.12.1).
.IP "\(bu" 4
The trie runtime code should no longer allocate massive amounts of memory,
fixing #74484.
.IP "\(bu" 4
Syntax errors in \f(CW\*(C`(?{...})\*(C'\fR blocks no longer cause panic messages
[perl #2353].
.IP "\(bu" 4
A pattern like \f(CW\*(C`(?:(o){2})?\*(C'\fR no longer causes a \*(L"panic\*(R" error
[perl #39233].
.IP "\(bu" 4
A fatal error in regular expressions containing \f(CW\*(C`(.*?)\*(C'\fR when processing
\&\s-1UTF\-8\s0 data has been fixed [perl #75680] (5.12.2).
.IP "\(bu" 4
An erroneous regular expression engine optimisation that caused regex verbs like
\&\f(CW*COMMIT\fR sometimes to be ignored has been removed.
.IP "\(bu" 4
The regular expression bracketed character class \f(CW\*(C`[\e8\e9]\*(C'\fR was effectively the
same as \f(CW\*(C`[89\e000]\*(C'\fR, incorrectly matching a \s-1NULL\s0 character.  It also gave
incorrect warnings that the \f(CW8\fR and \f(CW9\fR were ignored.  Now \f(CW\*(C`[\e8\e9]\*(C'\fR is the
same as \f(CW\*(C`[89]\*(C'\fR and gives legitimate warnings that \f(CW\*(C`\e8\*(C'\fR and \f(CW\*(C`\e9\*(C'\fR are
unrecognized escape sequences, passed-through.
.IP "\(bu" 4
A regular expression match in the right-hand side of a global substitution
(\f(CW\*(C`s///g\*(C'\fR) that is in the same scope will no longer cause match variables
to have the wrong values on subsequent iterations.  This can happen when an
array or hash subscript is interpolated in the right-hand side, as in
\&\f(CW\*(C`s|(.)|@a{ print($1), /./ }|g\*(C'\fR [perl #19078].
.IP "\(bu" 4
Several cases in which characters in the Latin\-1 non-ASCII range (0x80 to
0xFF) used not to match themselves, or used to match both a character class
and its complement, have been fixed.  For instance, U+00E2 could match both
\&\f(CW\*(C`\ew\*(C'\fR and \f(CW\*(C`\eW\*(C'\fR [perl #78464] [perl #18281] [perl #60156].
.IP "\(bu" 4
Matching a Unicode character against an alternation containing characters
that happened to match continuation bytes in the former's \s-1UTF8\s0
representation (like \f(CW\*(C`qq{\ex{30ab}} =~ /\exab|\exa9/\*(C'\fR) would cause erroneous
warnings [perl #70998].
.IP "\(bu" 4
The trie optimisation was not taking empty groups into account, preventing
\&\*(L"foo\*(R" from matching \f(CW\*(C`/\eA(?:(?:)foo|bar|zot)\ez/\*(C'\fR [perl #78356].
.IP "\(bu" 4
A pattern containing a \f(CW\*(C`+\*(C'\fR inside a lookahead would sometimes cause an
incorrect match failure in a global match (for example, \f(CW\*(C`/(?=(\eS+))/g\*(C'\fR)
[perl #68564].
.IP "\(bu" 4
A regular expression optimisation would sometimes cause a match with a
\&\f(CW\*(C`{n,m}\*(C'\fR quantifier to fail when it should have matched [perl #79152].
.IP "\(bu" 4
Case-insensitive matching in regular expressions compiled under
\&\f(CW\*(C`use locale\*(C'\fR now works much more sanely when the pattern or target
string is internally encoded in \s-1UTF8\s0.  Previously, under these
conditions the localeness was completely lost.  Now, code points
above 255 are treated as Unicode, but code points between 0 and 255
are treated using the current locale rules, regardless of whether
the pattern or the string is encoded in \s-1UTF8\s0.  The few case-insensitive
matches that cross the 255/256 boundary are not allowed.  For
example, 0xFF does not caselessly match the character at 0x178,
\&\s-1LATIN\s0 \s-1CAPITAL\s0 \s-1LETTER\s0 Y \s-1WITH\s0 \s-1DIAERESIS\s0, because 0xFF may not be \s-1LATIN\s0
\&\s-1SMALL\s0 \s-1LETTER\s0 Y in the current locale, and Perl has no way of knowing
if that character even exists in the locale, much less what code
point it is.
.IP "\(bu" 4
The \f(CW\*(C`(?|...)\*(C'\fR regular expression construct no longer crashes if the final
branch has more sets of capturing parentheses than any other branch.  This
was fixed in Perl 5.10.1 for the case of a single branch, but that fix did
not take multiple branches into account [perl #84746].
.IP "\(bu" 4
A bug has been fixed in the implementation of \f(CW\*(C`{...}\*(C'\fR quantifiers in
regular expressions that prevented the code block in
\&\f(CW\*(C`/((\ew+)(?{ print $2 })){2}/\*(C'\fR from seeing the \f(CW$2\fR sometimes
[perl #84294].
.SS "Syntax/Parsing Bugs"
.IX Subsection "Syntax/Parsing Bugs"
.IP "\(bu" 4
\&\f(CW\*(C`when (scalar) {...}\*(C'\fR no longer crashes, but produces a syntax error
[perl #74114] (5.12.1).
.IP "\(bu" 4
A label right before a string eval (\f(CW\*(C`foo: eval $string\*(C'\fR) no longer causes
the label to be associated also with the first statement inside the eval
[perl #74290] (5.12.1).
.IP "\(bu" 4
The \f(CW\*(C`no 5.13.2\*(C'\fR form of \f(CW\*(C`no\*(C'\fR no longer tries to turn on features or
pragmata (like strict) [perl #70075] (5.12.2).
.IP "\(bu" 4
\&\f(CW\*(C`BEGIN {require 5.12.0}\*(C'\fR now behaves as documented, rather than behaving
identically to \f(CW\*(C`use 5.12.0\*(C'\fR.  Previously, \f(CW\*(C`require\*(C'\fR in a \f(CW\*(C`BEGIN\*(C'\fR block
was erroneously executing the \f(CW\*(C`use feature \*(Aq:5.12.0\*(Aq\*(C'\fR and
\&\f(CW\*(C`use strict\*(C'\fR behaviour, which only \f(CW\*(C`use\*(C'\fR was documented to
provide [perl #69050].
.IP "\(bu" 4
A regression introduced in Perl 5.12.0, making
\&\f(CW\*(C`my $x = 3; $x = length(undef)\*(C'\fR result in \f(CW$x\fR set to \f(CW3\fR has been
fixed.  \f(CW$x\fR will now be \f(CW\*(C`undef\*(C'\fR [perl #85508] (5.12.2).
.IP "\(bu" 4
When strict \*(L"refs\*(R" mode is off, \f(CW\*(C`%{...}\*(C'\fR in rvalue context returns
\&\f(CW\*(C`undef\*(C'\fR if its argument is undefined.  An optimisation introduced in Perl
5.12.0 to make \f(CW\*(C`keys %{...}\*(C'\fR faster when used as a boolean did not take
this into account, causing \f(CW\*(C`keys %{+undef}\*(C'\fR (and \f(CW\*(C`keys %$foo\*(C'\fR when
\&\f(CW$foo\fR is undefined) to be an error, which it should be so in strict
mode only [perl #81750].
.IP "\(bu" 4
Constant-folding used to cause
.Sp
.Vb 1
\&  $text =~ ( 1 ? /phoo/ : /bear/)
.Ve
.Sp
to turn into
.Sp
.Vb 1
\&  $text =~ /phoo/
.Ve
.Sp
at compile time.  Now it correctly matches against \f(CW$_\fR [perl #20444].
.IP "\(bu" 4
Parsing Perl code (either with string \f(CW\*(C`eval\*(C'\fR or by loading modules) from
within a \f(CW\*(C`UNITCHECK\*(C'\fR block no longer causes the interpreter to crash
[perl #70614].
.IP "\(bu" 4
String \f(CW\*(C`eval\*(C'\fRs no longer fail after 2 billion scopes have been
compiled [perl #83364].
.IP "\(bu" 4
The parser no longer hangs when encountering certain Unicode characters,
such as U+387 [perl #74022].
.IP "\(bu" 4
Defining a constant with the same name as one of Perl's special blocks
(like \f(CW\*(C`INIT\*(C'\fR) stopped working in 5.12.0, but has now been fixed
[perl #78634].
.IP "\(bu" 4
A reference to a literal value used as a hash key (\f(CW$hash{\e"foo"}\fR) used
to be stringified, even if the hash was tied [perl #79178].
.IP "\(bu" 4
A closure containing an \f(CW\*(C`if\*(C'\fR statement followed by a constant or variable
is no longer treated as a constant [perl #63540].
.IP "\(bu" 4
\&\f(CW\*(C`state\*(C'\fR can now be used with attributes.  It
used to mean the same thing as
\&\f(CW\*(C`my\*(C'\fR if any attributes were present [perl #68658].
.IP "\(bu" 4
Expressions like \f(CW\*(C`@$a > 3\*(C'\fR no longer cause \f(CW$a\fR to be mentioned in
the \*(L"Use of uninitialized value in numeric gt\*(R" warning when \f(CW$a\fR is
undefined (since it is not part of the \f(CW\*(C`>\*(C'\fR expression, but the operand
of the \f(CW\*(C`@\*(C'\fR) [perl #72090].
.IP "\(bu" 4
Accessing an element of a package array with a hard-coded number (as
opposed to an arbitrary expression) would crash if the array did not exist.
Usually the array would be autovivified during compilation, but typeglob
manipulation could remove it, as in these two cases which used to crash:
.Sp
.Vb 2
\&  *d = *a;  print $d[0];
\&  undef *d; print $d[0];
.Ve
.IP "\(bu" 4
The \fB\-C\fR command-line option, when used on the shebang line, can now be
followed by other options [perl #72434].
.IP "\(bu" 4
The \f(CW\*(C`B\*(C'\fR module was returning \f(CW\*(C`B::OP\*(C'\fRs instead of \f(CW\*(C`B::LOGOP\*(C'\fRs for
\&\f(CW\*(C`entertry\*(C'\fR [perl #80622].  This was due to a bug in the Perl core,
not in \f(CW\*(C`B\*(C'\fR itself.
.SS "Stashes, Globs and Method Lookup"
.IX Subsection "Stashes, Globs and Method Lookup"
Perl 5.10.0 introduced a new internal mechanism for caching MROs (method
resolution orders, or lists of parent classes; aka \*(L"isa\*(R" caches) to make
method lookup faster (so \f(CW@ISA\fR arrays would not have to be searched
repeatedly).  Unfortunately, this brought with it quite a few bugs.  Almost
all of these have been fixed now, along with a few MRO-related bugs that
existed before 5.10.0:
.IP "\(bu" 4
The following used to have erratic effects on method resolution, because
the \*(L"isa\*(R" caches were not reset or otherwise ended up listing the wrong
classes.  These have been fixed.
.RS 4
.IP "Aliasing packages by assigning to globs [perl #77358]" 4
.IX Item "Aliasing packages by assigning to globs [perl #77358]"
.PD 0
.IP "Deleting packages by deleting their containing stash elements" 4
.IX Item "Deleting packages by deleting their containing stash elements"
.ie n .IP "Undefining the glob containing a package (""undef *Foo::"")" 4
.el .IP "Undefining the glob containing a package (\f(CWundef *Foo::\fR)" 4
.IX Item "Undefining the glob containing a package (undef *Foo::)"
.ie n .IP "Undefining an \s-1ISA\s0 glob (""undef *Foo::ISA"")" 4
.el .IP "Undefining an \s-1ISA\s0 glob (\f(CWundef *Foo::ISA\fR)" 4
.IX Item "Undefining an ISA glob (undef *Foo::ISA)"
.ie n .IP "Deleting an \s-1ISA\s0 stash element (""delete $Foo::{ISA}"")" 4
.el .IP "Deleting an \s-1ISA\s0 stash element (\f(CWdelete $Foo::{ISA}\fR)" 4
.IX Item "Deleting an ISA stash element (delete $Foo::{ISA})"
.ie n .IP "Sharing @ISA arrays between classes (via ""*Foo::ISA = \e@Bar::ISA"" or ""*Foo::ISA = *Bar::ISA"") [perl #77238]" 4
.el .IP "Sharing \f(CW@ISA\fR arrays between classes (via \f(CW*Foo::ISA = \e@Bar::ISA\fR or \f(CW*Foo::ISA = *Bar::ISA\fR) [perl #77238]" 4
.IX Item "Sharing @ISA arrays between classes (via *Foo::ISA = @Bar::ISA or *Foo::ISA = *Bar::ISA) [perl #77238]"
.RE
.RS 4
.PD
.Sp
\&\f(CW\*(C`undef *Foo::ISA\*(C'\fR would even stop a new \f(CW@Foo::ISA\fR array from updating
caches.
.RE
.IP "\(bu" 4
Typeglob assignments would crash if the glob's stash no longer existed, so
long as the glob assigned to were named \f(CW\*(C`ISA\*(C'\fR or the glob on either side of
the assignment contained a subroutine.
.IP "\(bu" 4
\&\f(CW\*(C`PL_isarev\*(C'\fR, which is accessible to Perl via \f(CW\*(C`mro::get_isarev\*(C'\fR is now
updated properly when packages are deleted or removed from the \f(CW@ISA\fR of
other classes.  This allows many packages to be created and deleted without
causing a memory leak [perl #75176].
.PP
In addition, various other bugs related to typeglobs and stashes have been
fixed:
.IP "\(bu" 4
Some work has been done on the internal pointers that link between symbol
tables (stashes), typeglobs, and subroutines.  This has the effect that
various edge cases related to deleting stashes or stash entries (for example,
<%FOO:: = ()>), and complex typeglob or code-reference aliasing, will no
longer crash the interpreter.
.IP "\(bu" 4
Assigning a reference to a glob copy now assigns to a glob slot instead of
overwriting the glob with a scalar [perl #1804] [perl #77508].
.IP "\(bu" 4
A bug when replacing the glob of a loop variable within the loop has been fixed
[perl #21469].  This
means the following code will no longer crash:
.Sp
.Vb 3
\&    for $x (...) {
\&        *x = *y;
\&    }
.Ve
.IP "\(bu" 4
Assigning a glob to a \s-1PVLV\s0 used to convert it to a plain string.  Now it
works correctly, and a \s-1PVLV\s0 can hold a glob.  This would happen when a
nonexistent hash or array element was passed to a subroutine:
.Sp
.Vb 2
\&  sub { $_[0] = *foo }\->($hash{key});
\&  # $_[0] would have been the string "*main::foo"
.Ve
.Sp
It also happened when a glob was assigned to, or returned from, an element
of a tied array or hash [perl #36051].
.IP "\(bu" 4
When trying to report \f(CW\*(C`Use of uninitialized value $Foo::BAR\*(C'\fR, crashes could
occur if the glob holding the global variable in question had been detached
from its original stash by, for example, \f(CW\*(C`delete $::{"Foo::"}\*(C'\fR.  This has
been fixed by disabling the reporting of variable names in those
cases.
.IP "\(bu" 4
During the restoration of a localised typeglob on scope exit, any
destructors called as a result would be able to see the typeglob in an
inconsistent state, containing freed entries, which could result in a
crash.  This would affect code like this:
.Sp
.Vb 5
\&  local *@;
\&  eval { die bless [] }; # puts an object in $@
\&  sub DESTROY {
\&    local $@; # boom
\&  }
.Ve
.Sp
Now the glob entries are cleared before any destructors are called.  This
also means that destructors can vivify entries in the glob.  So Perl tries
again and, if the entries are re-created too many times, dies with a
\&\*(L"panic: gp_free ...\*(R" error message.
.IP "\(bu" 4
If a typeglob is freed while a subroutine attached to it is still
referenced elsewhere, the subroutine is renamed to \f(CW\*(C`_\|_ANON_\|_\*(C'\fR in the same
package, unless the package has been undefined, in which case the \f(CW\*(C`_\|_ANON_\|_\*(C'\fR
package is used.  This could cause packages to be sometimes autovivified,
such as if the package had been deleted.  Now this no longer occurs.
The \f(CW\*(C`_\|_ANON_\|_\*(C'\fR package is also now used when the original package is
no longer attached to the symbol table.  This avoids memory leaks in some
cases [perl #87664].
.IP "\(bu" 4
Subroutines and package variables inside a package whose name ends with
\&\f(CW\*(C`::\*(C'\fR can now be accessed with a fully qualified name.
.SS "Unicode"
.IX Subsection "Unicode"
.IP "\(bu" 4
What has become known as \*(L"the Unicode Bug\*(R" is almost completely resolved in
this release.  Under \f(CW\*(C`use feature \*(Aqunicode_strings\*(Aq\*(C'\fR (which is
automatically selected by \f(CW\*(C`use 5.012\*(C'\fR and above), the internal
storage format of a string no longer affects the external semantics.
[perl #58182].
.Sp
There are two known exceptions:
.RS 4
.IP "1." 4
The now-deprecated, user-defined case-changing
functions require utf8\-encoded strings to operate.  The \s-1CPAN\s0 module
Unicode::Casing has been written to replace this feature without its
drawbacks, and the feature is scheduled to be removed in 5.16.
.IP "2." 4
\&\fIquotemeta()\fR (and its in-line equivalent \f(CW\*(C`\eQ\*(C'\fR) can also give different
results depending on whether a string is encoded in \s-1UTF\-8\s0.  See
\&\*(L"The \*(R"Unicode Bug"" in perlunicode.
.RE
.RS 4
.RE
.IP "\(bu" 4
Handling of Unicode non-character code points has changed.
Previously they were mostly considered illegal, except that in some
place only one of the 66 of them was known.  The Unicode Standard
considers them all legal, but forbids their \*(L"open interchange\*(R".
This is part of the change to allow internal use of any code
point (see \*(L"Core Enhancements\*(R").  Together, these changes resolve
[perl #38722], [perl #51918], [perl #51936], and [perl #63446].
.IP "\(bu" 4
Case-insensitive \f(CW"/i"\fR regular expression matching of Unicode
characters that match multiple characters now works much more as
intended.  For example
.Sp
.Vb 1
\& "\eN{LATIN SMALL LIGATURE FFI}" =~ /ffi/ui
.Ve
.Sp
and
.Sp
.Vb 1
\& "ffi" =~ /\eN{LATIN SMALL LIGATURE FFI}/ui
.Ve
.Sp
are both true.  Previously, there were many bugs with this feature.
What hasn't been fixed are the places where the pattern contains the
multiple characters, but the characters are split up by other things,
such as in
.Sp
.Vb 1
\& "\eN{LATIN SMALL LIGATURE FFI}" =~ /(f)(f)i/ui
.Ve
.Sp
or
.Sp
.Vb 1
\& "\eN{LATIN SMALL LIGATURE FFI}" =~ /ffi*/ui
.Ve
.Sp
or
.Sp
.Vb 1
\& "\eN{LATIN SMALL LIGATURE FFI}" =~ /[a\-f][f\-m][g\-z]/ui
.Ve
.Sp
None of these match.
.Sp
Also, this matching doesn't fully conform to the current Unicode
Standard, which asks that the matching be made upon the \s-1NFD\s0
(Normalization Form Decomposed) of the text.  However, as of this
writing (April 2010), the Unicode Standard is currently in flux about
what they will recommend doing with regard in such scenarios.  It may be
that they will throw out the whole concept of multi-character matches.
[perl #71736].
.IP "\(bu" 4
Naming a deprecated character in \f(CW\*(C`\eN{\f(CINAME\f(CW}\*(C'\fR no longer leaks memory.
.IP "\(bu" 4
We fixed a bug that could cause \f(CW\*(C`\eN{\f(CINAME\f(CW}\*(C'\fR constructs followed by
a single \f(CW"."\fR to be parsed incorrectly [perl #74978] (5.12.1).
.IP "\(bu" 4
\&\f(CW\*(C`chop\*(C'\fR now correctly handles characters above \f(CW"\ex{7fffffff}"\fR
[perl #73246].
.IP "\(bu" 4
Passing to \f(CW\*(C`index\*(C'\fR an offset beyond the end of the string when the string
is encoded internally in \s-1UTF8\s0 no longer causes panics [perl #75898].
.IP "\(bu" 4
\&\fIwarn()\fR and \fIdie()\fR now respect utf8\-encoded scalars [perl #45549].
.IP "\(bu" 4
Sometimes the \s-1UTF8\s0 length cache would not be reset on a value
returned by substr, causing \f(CW\*(C`length(substr($uni_string, ...))\*(C'\fR to give
wrong answers.  With \f(CW\*(C`${^UTF8CACHE}\*(C'\fR set to \-1, it would also produce
a \*(L"panic\*(R" error message [perl #77692].
.SS "Ties, Overloading and Other Magic"
.IX Subsection "Ties, Overloading and Other Magic"
.IP "\(bu" 4
Overloading now works properly in conjunction with tied
variables.  What formerly happened was that most ops checked their
arguments for overloading \fIbefore\fR checking for magic, so for example
an overloaded object returned by a tied array access would usually be
treated as not overloaded [\s-1RT\s0 #57012].
.IP "\(bu" 4
Various instances of magic (like tie methods) being called on tied variables
too many or too few times have been fixed:
.RS 4
.IP "\(bu" 4
\&\f(CW\*(C`$tied\->()\*(C'\fR did not always call \s-1FETCH\s0 [perl #8438].
.IP "\(bu" 4
Filetest operators and \f(CW\*(C`y///\*(C'\fR and \f(CW\*(C`tr///\*(C'\fR were calling \s-1FETCH\s0 too
many times.
.IP "\(bu" 4
The \f(CW\*(C`=\*(C'\fR operator used to ignore magic on its right-hand side if the
scalar happened to hold a typeglob (if a typeglob was the last thing
returned from or assigned to a tied scalar) [perl #77498].
.IP "\(bu" 4
Dereference operators used to ignore magic if the argument was a
reference already (such as from a previous \s-1FETCH\s0) [perl #72144].
.IP "\(bu" 4
\&\f(CW\*(C`splice\*(C'\fR now calls set-magic (so changes made
by \f(CW\*(C`splice @ISA\*(C'\fR are respected by method calls) [perl #78400].
.IP "\(bu" 4
In-memory files created by \f(CW\*(C`open($fh, ">", \e$buffer)\*(C'\fR were not calling
\&\s-1FETCH/STORE\s0 at all [perl #43789] (5.12.2).
.IP "\(bu" 4
\&\fIutf8::is_utf8()\fR now respects get-magic (like \f(CW$1\fR) (5.12.1).
.RE
.RS 4
.RE
.IP "\(bu" 4
Non-commutative binary operators used to swap their operands if the same
tied scalar was used for both operands and returned a different value for
each \s-1FETCH\s0.  For instance, if \f(CW$t\fR returned 2 the first time and 3 the
second, then \f(CW\*(C`$t/$t\*(C'\fR would evaluate to 1.5.  This has been fixed
[perl #87708].
.IP "\(bu" 4
String \f(CW\*(C`eval\*(C'\fR now detects taintedness of overloaded or tied
arguments [perl #75716].
.IP "\(bu" 4
String \f(CW\*(C`eval\*(C'\fR and regular expression matches against objects with string
overloading no longer cause memory corruption or crashes [perl #77084].
.IP "\(bu" 4
readline now honors \f(CW\*(C`<>\*(C'\fR overloading on tied
arguments.
.IP "\(bu" 4
\&\f(CW\*(C`<expr>\*(C'\fR always respects overloading now if the expression is
overloaded.
.Sp
Because \*(L"<>\ as glob\*(R" was parsed differently from
\&\*(L"<>\ as filehandle\*(R" from 5.6 onwards, something like \f(CW\*(C`<$foo[0]>\*(C'\fR did
not handle overloading, even if \f(CW$foo[0]\fR was an overloaded object.  This
was contrary to the documentation for overload, and meant that \f(CW\*(C`<>\*(C'\fR
could not be used as a general overloaded iterator operator.
.IP "\(bu" 4
The fallback behaviour of overloading on binary operators was asymmetric
[perl #71286].
.IP "\(bu" 4
Magic applied to variables in the main package no longer affects other packages.
See \*(L"Magic variables outside the main package\*(R" above [perl #76138].
.IP "\(bu" 4
Sometimes magic (ties, taintedness, etc.) attached to variables could cause
an object to last longer than it should, or cause a crash if a tied
variable were freed from within a tie method.  These have been fixed
[perl #81230].
.IP "\(bu" 4
\&\s-1DESTROY\s0 methods of objects implementing ties are no longer able to crash by
accessing the tied variable through a weak reference [perl #86328].
.IP "\(bu" 4
Fixed a regression of \fIkill()\fR when a match variable is used for the
process \s-1ID\s0 to kill [perl #75812].
.IP "\(bu" 4
\&\f(CW$AUTOLOAD\fR used to remain tainted forever if it ever became tainted.  Now
it is correctly untainted if an autoloaded method is called and the method
name was not tainted.
.IP "\(bu" 4
\&\f(CW\*(C`sprintf\*(C'\fR now dies when passed a tainted scalar for the format.  It did
already die for arbitrary expressions, but not for simple scalars
[perl #82250].
.IP "\(bu" 4
\&\f(CW\*(C`lc\*(C'\fR, \f(CW\*(C`uc\*(C'\fR, \f(CW\*(C`lcfirst\*(C'\fR, and \f(CW\*(C`ucfirst\*(C'\fR no longer return untainted strings
when the argument is tainted.  This has been broken since perl 5.8.9
[perl #87336].
.SS "The Debugger"
.IX Subsection "The Debugger"
.IP "\(bu" 4
The Perl debugger now also works in taint mode [perl #76872].
.IP "\(bu" 4
Subroutine redefinition works once more in the debugger [perl #48332].
.IP "\(bu" 4
When \fB\-d\fR is used on the shebang (\f(CW\*(C`#!\*(C'\fR) line, the debugger now has access
to the lines of the main program.  In the past, this sometimes worked and
sometimes did not, depending on the order in which things happened to be
arranged in memory [perl #71806].
.IP "\(bu" 4
A possible memory leak when using \fIcaller()\fR to set
\&\f(CW@DB::args\fR has been fixed (5.12.2).
.IP "\(bu" 4
Perl no longer stomps on \f(CW$DB::single\fR, \f(CW$DB::trace\fR, and \f(CW$DB::signal\fR 
if these variables already have values when \f(CW$^P\fR is assigned to [perl #72422].
.IP "\(bu" 4
\&\f(CW\*(C`#line\*(C'\fR directives in string evals were not properly updating the arrays
of lines of code (\f(CW\*(C`@{"_< ..."}\*(C'\fR) that the debugger (or any debugging or
profiling module) uses.  In threaded builds, they were not being updated at
all.  In non-threaded builds, the line number was ignored, so any change to
the existing line number would cause the lines to be misnumbered
[perl #79442].
.SS "Threads"
.IX Subsection "Threads"
.IP "\(bu" 4
Perl no longer accidentally clones lexicals in scope within active stack
frames in the parent when creating a child thread [perl #73086].
.IP "\(bu" 4
Several memory leaks in cloning and freeing threaded Perl interpreters have been
fixed [perl #77352].
.IP "\(bu" 4
Creating a new thread when directory handles were open used to cause a
crash, because the handles were not cloned, but simply passed to the new
thread, resulting in a double free.
.Sp
Now directory handles are cloned properly on Windows
and on systems that have a \f(CW\*(C`fchdir\*(C'\fR function.  On other
systems, new threads simply do not inherit directory
handles from their parent threads [perl #75154].
.IP "\(bu" 4
The typeglob \f(CW\*(C`*,\*(C'\fR, which holds the scalar variable \f(CW$,\fR (output field
separator), had the wrong reference count in child threads.
.IP "\(bu" 4
[perl #78494] When pipes are shared between threads, the \f(CW\*(C`close\*(C'\fR function
(and any implicit close, such as on thread exit) no longer blocks.
.IP "\(bu" 4
Perl now does a timely cleanup of SVs that are cloned into a new
thread but then discovered to be orphaned (that is, their owners
are \fInot\fR cloned).  This eliminates several \*(L"scalars leaked\*(R"
warnings when joining threads.
.SS "Scoping and Subroutines"
.IX Subsection "Scoping and Subroutines"
.IP "\(bu" 4
Lvalue subroutines are again able to return copy-on-write scalars.  This
had been broken since version 5.10.0 [perl #75656] (5.12.3).
.IP "\(bu" 4
\&\f(CW\*(C`require\*(C'\fR no longer causes \f(CW\*(C`caller\*(C'\fR to return the wrong file name for
the scope that called \f(CW\*(C`require\*(C'\fR and other scopes higher up that had the
same file name [perl #68712].
.IP "\(bu" 4
\&\f(CW\*(C`sort\*(C'\fR with a \f(CW\*(C`($$)\*(C'\fR\-prototyped comparison routine used to cause the value
of \f(CW@_\fR to leak out of the sort.  Taking a reference to \f(CW@_\fR within the
sorting routine could cause a crash [perl #72334].
.IP "\(bu" 4
Match variables (like \f(CW$1\fR) no longer persist between calls to a sort
subroutine [perl #76026].
.IP "\(bu" 4
Iterating with \f(CW\*(C`foreach\*(C'\fR over an array returned by an lvalue sub now works
[perl #23790].
.IP "\(bu" 4
\&\f(CW$@\fR is now localised during calls to \f(CW\*(C`binmode\*(C'\fR to prevent action at a
distance [perl #78844].
.IP "\(bu" 4
Calling a closure prototype (what is passed to an attribute handler for a
closure) now results in a \*(L"Closure prototype called\*(R" error message instead
of a crash [perl #68560].
.IP "\(bu" 4
Mentioning a read-only lexical variable from the enclosing scope in a
string \f(CW\*(C`eval\*(C'\fR no longer causes the variable to become writable
[perl #19135].
.SS "Signals"
.IX Subsection "Signals"
.IP "\(bu" 4
Within signal handlers, \f(CW$!\fR is now implicitly localized.
.IP "\(bu" 4
\&\s-1CHLD\s0 signals are no longer unblocked after a signal handler is called if
they were blocked before by \f(CW\*(C`POSIX::sigprocmask\*(C'\fR [perl #82040].
.IP "\(bu" 4
A signal handler called within a signal handler could cause leaks or
double-frees.  Now fixed [perl #76248].
.SS "Miscellaneous Memory Leaks"
.IX Subsection "Miscellaneous Memory Leaks"
.IP "\(bu" 4
Several memory leaks when loading \s-1XS\s0 modules were fixed (5.12.2).
.IP "\(bu" 4
\&\fIsubstr()\fR,
\&\fIpos()\fR, \fIkeys()\fR,
and \fIvec()\fR could, when used in combination
with lvalues, result in leaking the scalar value they operate on, and cause its
destruction to happen too late.  This has now been fixed.
.IP "\(bu" 4
The postincrement and postdecrement operators, \f(CW\*(C`++\*(C'\fR and \f(CW\*(C`\-\-\*(C'\fR, used to cause
leaks when used on references.  This has now been fixed.
.IP "\(bu" 4
Nested \f(CW\*(C`map\*(C'\fR and \f(CW\*(C`grep\*(C'\fR blocks no longer leak memory when processing
large lists [perl #48004].
.IP "\(bu" 4
\&\f(CW\*(C`use \f(CIVERSION\f(CW\*(C'\fR and \f(CW\*(C`no \f(CIVERSION\f(CW\*(C'\fR no longer leak memory [perl #78436]
[perl #69050].
.IP "\(bu" 4
\&\f(CW\*(C`.=\*(C'\fR followed by \f(CW\*(C`<>\*(C'\fR or \f(CW\*(C`readline\*(C'\fR would leak memory if \f(CW$/\fR
contained characters beyond the octet range and the scalar assigned to
happened to be encoded as \s-1UTF8\s0 internally [perl #72246].
.IP "\(bu" 4
\&\f(CW\*(C`eval \*(AqBEGIN{die}\*(Aq\*(C'\fR no longer leaks memory on non-threaded builds.
.SS "Memory Corruption and Crashes"
.IX Subsection "Memory Corruption and Crashes"
.IP "\(bu" 4
\&\fIglob()\fR no longer crashes when \f(CW%File::Glob::\fR is empty and
\&\f(CW\*(C`CORE::GLOBAL::glob\*(C'\fR isn't present [perl #75464] (5.12.2).
.IP "\(bu" 4
\&\fIreadline()\fR has been fixed when interrupted by signals so it no longer
returns the \*(L"same thing\*(R" as before or random memory.
.IP "\(bu" 4
When assigning a list with duplicated keys to a hash, the assignment used to
return garbage and/or freed values:
.Sp
.Vb 1
\&    @a = %h = (list with some duplicate keys);
.Ve
.Sp
This has now been fixed [perl #31865].
.IP "\(bu" 4
The mechanism for freeing objects in globs used to leave dangling
pointers to freed SVs, meaning Perl users could see corrupted state
during destruction.
.Sp
Perl now frees only the affected slots of the \s-1GV\s0, rather than freeing
the \s-1GV\s0 itself.  This makes sure that there are no dangling refs or
corrupted state during destruction.
.IP "\(bu" 4
The interpreter no longer crashes when freeing deeply-nested arrays of
arrays.  Hashes have not been fixed yet [perl #44225].
.IP "\(bu" 4
Concatenating long strings under \f(CW\*(C`use encoding\*(C'\fR no longer causes Perl to
crash [perl #78674].
.IP "\(bu" 4
Calling \f(CW\*(C`\->import\*(C'\fR on a class lacking an import method could corrupt
the stack, resulting in strange behaviour.  For instance,
.Sp
.Vb 1
\&  push @a, "foo", $b = bar\->import;
.Ve
.Sp
would assign \*(L"foo\*(R" to \f(CW$b\fR [perl #63790].
.IP "\(bu" 4
The \f(CW\*(C`recv\*(C'\fR function could crash when called with the \s-1MSG_TRUNC\s0 flag
[perl #75082].
.IP "\(bu" 4
\&\f(CW\*(C`formline\*(C'\fR no longer crashes when passed a tainted format picture.  It also
taints \f(CW$^A\fR now if its arguments are tainted [perl #79138].
.IP "\(bu" 4
A bug in how we process filetest operations could cause a segfault.
Filetests don't always expect an op on the stack, so we now use
TOPs only if we're sure that we're not \f(CW\*(C`stat\*(C'\fRing the \f(CW\*(C`_\*(C'\fR filehandle.
This is indicated by \f(CW\*(C`OPf_KIDS\*(C'\fR (as checked in ck_ftst) [perl #74542]
(5.12.1).
.IP "\(bu" 4
\&\fIunpack()\fR now handles scalar context correctly for \f(CW%32H\fR and \f(CW%32u\fR,
fixing a potential crash.  \fIsplit()\fR would crash because the third item
on the stack wasn't the regular expression it expected.  \f(CW\*(C`unpack("%2H",
\&...)\*(C'\fR would return both the unpacked result and the checksum on the stack,
as would \f(CW\*(C`unpack("%2u", ...)\*(C'\fR [perl #73814] (5.12.2).
.SS "Fixes to Various Perl Operators"
.IX Subsection "Fixes to Various Perl Operators"
.IP "\(bu" 4
The \f(CW\*(C`&\*(C'\fR, \f(CW\*(C`|\*(C'\fR, and \f(CW\*(C`^\*(C'\fR bitwise operators no longer coerce read-only arguments
[perl #20661].
.IP "\(bu" 4
Stringifying a scalar containing \*(L"\-0.0\*(R" no longer has the effect of turning
false into true [perl #45133].
.IP "\(bu" 4
Some numeric operators were converting integers to floating point,
resulting in loss of precision on 64\-bit platforms [perl #77456].
.IP "\(bu" 4
\&\fIsprintf()\fR was ignoring locales when called with constant arguments
[perl #78632].
.IP "\(bu" 4
Combining the vector (\f(CW%v\fR) flag and dynamic precision would
cause \f(CW\*(C`sprintf\*(C'\fR to confuse the order of its arguments, making it 
treat the string as the precision and vice-versa [perl #83194].
.SS "Bugs Relating to the C \s-1API\s0"
.IX Subsection "Bugs Relating to the C API"
.IP "\(bu" 4
The C\-level \f(CW\*(C`lex_stuff_pvn\*(C'\fR function would sometimes cause a spurious
syntax error on the last line of the file if it lacked a final semicolon
[perl #74006] (5.12.1).
.IP "\(bu" 4
The \f(CW\*(C`eval_sv\*(C'\fR and \f(CW\*(C`eval_pv\*(C'\fR C functions now set \f(CW$@\fR correctly when
there is a syntax error and no \f(CW\*(C`G_KEEPERR\*(C'\fR flag, and never set it if the
\&\f(CW\*(C`G_KEEPERR\*(C'\fR flag is present [perl #3719].
.IP "\(bu" 4
The \s-1XS\s0 multicall \s-1API\s0 no longer causes subroutines to lose reference counts
if called via the multicall interface from within those very subroutines.
This affects modules like List::Util.  Calling one of its functions with an
active subroutine as the first argument could cause a crash [perl #78070].
.IP "\(bu" 4
The \f(CW\*(C`SvPVbyte\*(C'\fR function available to \s-1XS\s0 modules now calls magic before
downgrading the \s-1SV\s0, to avoid warnings about wide characters [perl #72398].
.IP "\(bu" 4
The ref types in the typemap for \s-1XS\s0 bindings now support magical variables
[perl #72684].
.IP "\(bu" 4
\&\f(CW\*(C`sv_catsv_flags\*(C'\fR no longer calls \f(CW\*(C`mg_get\*(C'\fR on its second argument (the
source string) if the flags passed to it do not include \s-1SV_GMAGIC\s0.  So it
now matches the documentation.
.IP "\(bu" 4
\&\f(CW\*(C`my_strftime\*(C'\fR no longer leaks memory.  This fixes a memory leak in
\&\f(CW\*(C`POSIX::strftime\*(C'\fR [perl #73520].
.IP "\(bu" 4
\&\fI\s-1XSUB\s0.h\fR now correctly redefines fgets under \s-1PERL_IMPLICIT_SYS\s0 [perl #55049]
(5.12.1).
.IP "\(bu" 4
\&\s-1XS\s0 code using \fIfputc()\fR or \fIfputs()\fR on Windows could cause an error
due to their arguments being swapped [perl #72704] (5.12.1).
.IP "\(bu" 4
A possible segfault in the \f(CW\*(C`T_PTROBJ\*(C'\fR default typemap has been fixed
(5.12.2).
.IP "\(bu" 4
A bug that could cause \*(L"Unknown error\*(R" messages when
\&\f(CW\*(C`call_sv(code, G_EVAL)\*(C'\fR is called from an \s-1XS\s0 destructor has been fixed
(5.12.2).
.SH "Known Problems"
.IX Header "Known Problems"
This is a list of significant unresolved issues which are regressions
from earlier versions of Perl or which affect widely-used \s-1CPAN\s0 modules.
.IP "\(bu" 4
\&\f(CW\*(C`List::Util::first\*(C'\fR misbehaves in the presence of a lexical \f(CW$_\fR
(typically introduced by \f(CW\*(C`my $_\*(C'\fR or implicitly by \f(CW\*(C`given\*(C'\fR).  The variable
that gets set for each iteration is the package variable \f(CW$_\fR, not the
lexical \f(CW$_\fR.
.Sp
A similar issue may occur in other modules that provide functions which
take a block as their first argument, like
.Sp
.Vb 1
\&    foo { ... $_ ...} list
.Ve
.Sp
See also: <http://rt.perl.org/rt3/Public/Bug/Display.html?id=67694>
.IP "\(bu" 4
\&\fIreadline()\fR returns an empty string instead of a cached previous value
when it is interrupted by a signal
.IP "\(bu" 4
The changes in prototype handling break Switch.  A patch has been sent
upstream and will hopefully appear on \s-1CPAN\s0 soon.
.IP "\(bu" 4
The upgrade to \fIExtUtils\-MakeMaker\-6.57_05\fR has caused
some tests in the \fIModule-Install\fR distribution on \s-1CPAN\s0 to
fail. (Specifically, \fI02_mymeta.t\fR tests 5 and 21; \fI18_all_from.t\fR
tests 6 and 15; \fI19_authors.t\fR tests 5, 13, 21, and 29; and
\&\fI20_authors_with_special_characters.t\fR tests 6, 15, and 23 in version
1.00 of that distribution now fail.)
.IP "\(bu" 4
On \s-1VMS\s0, \f(CW\*(C`Time::HiRes\*(C'\fR tests will fail due to a bug in the \s-1CRTL\s0's
implementation of \f(CW\*(C`setitimer\*(C'\fR: previous timer values would be cleared
if a timer expired but not if the timer was reset before expiring.  \s-1HP\s0
OpenVMS Engineering have corrected the problem and will release a patch
in due course (Quix case # \s-1QXCM1001115136\s0).
.IP "\(bu" 4
On \s-1VMS\s0, there were a handful of \f(CW\*(C`Module::Build\*(C'\fR test failures we didn't
get to before the release; please watch \s-1CPAN\s0 for updates.
.SH "Errata"
.IX Header "Errata"
.SS "\fIkeys()\fP, \fIvalues()\fP, and \fIeach()\fP work on arrays"
.IX Subsection "keys(), values(), and each() work on arrays"
You can now use the \fIkeys()\fR, \fIvalues()\fR, and \fIeach()\fR builtins on arrays;
previously you could use them only on hashes.  See perlfunc for details.
This is actually a change introduced in perl 5.12.0, but it was missed from
that release's perl5120delta.
.ie n .SS "\fIsplit()\fP and @_"
.el .SS "\fIsplit()\fP and \f(CW@_\fP"
.IX Subsection "split() and @_"
\&\fIsplit()\fR no longer modifies \f(CW@_\fR when called in scalar or void context.
In void context it now produces a \*(L"Useless use of split\*(R" warning.
This was also a perl 5.12.0 change that missed the perldelta.
.SH "Obituary"
.IX Header "Obituary"
Randy Kobes, creator of http://kobesearch.cpan.org/ and
contributor/maintainer to several core Perl toolchain modules, passed
away on September 18, 2010 after a battle with lung cancer.  The community
was richer for his involvement.  He will be missed.
.SH "Acknowledgements"
.IX Header "Acknowledgements"
Perl 5.14.0 represents one year of development since
Perl 5.12.0 and contains nearly 550,000 lines of changes across nearly
3,000 files from 150 authors and committers.
.PP
Perl continues to flourish into its third decade thanks to a vibrant
community of users and developers.  The following people are known to
have contributed the improvements that became Perl 5.14.0:
.PP
Aaron Crane, Abhijit Menon-Sen, Abigail, \*(AEvar Arnfjo\*:r\*(d- Bjarmason,
Alastair Douglas, Alexander Alekseev, Alexander Hartmaier, Alexandr
Ciornii, Alex Davies, Alex Vandiver, Ali Polatel, Allen Smith, Andreas
Ko\*:nig, Andrew Rodland, Andy Armstrong, Andy Dougherty, Aristotle
Pagaltzis, Arkturuz, Arvan, A. Sinan Unur, Ben Morrow, Bo Lindbergh,
Boris Ratner, Brad Gilbert, Bram, brian d foy, Brian Phillips, Casey
West, Charles Bailey, Chas. Owens, Chip Salzenberg, Chris 'BinGOs'
Williams, chromatic, Craig A. Berry, Curtis Jewell, Dagfinn Ilmari
Mannsa\*oker, Dan Dascalescu, Dave Rolsky, David Caldwell, David Cantrell,
David Golden, David Leadbeater, David Mitchell, David Wheeler, Eric
Brine, Father Chrysostomos, Fingle Nark, Florian Ragwitz, Frank Wiegand,
Franz Fasching, Gene Sullivan, George Greer, Gerard Goossen, Gisle Aas,
Goro Fuji, Grant McLean, gregor herrmann, H.Merijn Brand, Hongwen Qiu,
Hugo van der Sanden, Ian Goodacre, James E Keenan, James Mastros, Jan
Dubois, Jay Hannah, Jerry D. Hedden, Jesse Vincent, Jim Cromie, Jirka
HruXka, John Peacock, Joshua ben Jore, Joshua Pritikin, Karl Williamson,
Kevin Ryde, kmx, Lars \s-1DXXXXXX\s0 \s-1XXX\s0, Larwan Berke, Leon Brocard, Leon
Timmermans, Lubomir Rintel, Lukas Mai, Maik Hentsche, Marty Pauley,
Marvin Humphrey, Matt Johnson, Matt S Trout, Max Maischein, Michael
Breen, Michael Fig, Michael G Schwern, Michael Parker, Michael Stevens,
Michael Witten, Mike Kelly, Moritz Lenz, Nicholas Clark, Nick Cleaton,
Nick Johnston, Nicolas Kaiser, Niko Tyni, Noirin Shirley, Nuno Carvalho,
Paul Evans, Paul Green, Paul Johnson, Paul Marquess, Peter J. Holzer,
Peter John Acklam, Peter Martini, Philippe Bruhat (BooK), Piotr Fusik,
Rafael Garcia-Suarez, Rainer Tammer, Reini Urban, Renee Baecker, Ricardo
Signes, Richard Mo\*:hn, Richard Soderberg, Rob Hoelz, Robin Barker, Ruslan
Zakirov, Salvador Fandin\*~o, Salvador Ortiz Garcia, Shlomi Fish, Sinan
Unur, Sisyphus, Slaven Rezic, Steffen Mu\*:ller, Steve Hay, Steven
Schubiger, Steve Peters, Sullivan Beck, Tatsuhiko Miyagawa, Tim Bunce,
Todd Rinaldo, Tom Christiansen, Tom Hukins, Tony Cook, Tye McQueen,
Vadim Konovalov, Vernon Lyon, Vincent Pit, Walt Mankowski, Wolfram
Humann, Yves Orton, Zefram, and Zsba\*'n Ambrus.
.PP
This is woefully incomplete as it's automatically generated from version
control history.  In particular, it doesn't include the names of the
(very much appreciated) contributors who reported issues in previous
versions of Perl that helped make Perl 5.14.0 better. For a more complete
list of all of Perl's historical contributors, please see the \f(CW\*(C`AUTHORS\*(C'\fR
file in the Perl 5.14.0 distribution.
.PP
Many of the changes included in this version originated in the \s-1CPAN\s0
modules included in Perl's core. We're grateful to the entire \s-1CPAN\s0
community for helping Perl to flourish.
.SH "Reporting Bugs"
.IX Header "Reporting Bugs"
If you find what you think is a bug, you might check the articles
recently posted to the comp.lang.perl.misc newsgroup and the Perl
bug database at http://rt.perl.org/perlbug/ .  There may also be
information at http://www.perl.org/ , the Perl Home Page.
.PP
If you believe you have an unreported bug, please run the perlbug
program included with your release.  Be sure to trim your bug down
to a tiny but sufficient test case.  Your bug report, along with the
output of \f(CW\*(C`perl \-V\*(C'\fR, will be sent off to perlbug@perl.org to be
analysed by the Perl porting team.
.PP
If the bug you are reporting has security implications, which make it
inappropriate to send to a publicly archived mailing list, then please send
it to perl5\-security\-report@perl.org.  This points to a closed subscription
unarchived mailing list, which includes all the core committers, who are able
to help assess the impact of issues, figure out a resolution, and help
co-ordinate the release of patches to mitigate or fix the problem across all
platforms on which Perl is supported.  Please use this address for
security issues in the Perl core \fIonly\fR, not for modules independently
distributed on \s-1CPAN\s0.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
The \fIChanges\fR file for an explanation of how to view exhaustive details
on what changed.
.PP
The \fI\s-1INSTALL\s0\fR file for how to build Perl.
.PP
The \fI\s-1README\s0\fR file for general stuff.
.PP
The \fIArtistic\fR and \fICopying\fR files for copyright information.
                                                                                               osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perl5140delta5.18.1                          0100644 0001750 0001750 00000530636 12566207432 023556  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERL5140DELTA 1"
.TH PERL5140DELTA 1 "2013-11-04" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perl5140delta \- what is new for perl v5.14.0
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document describes differences between the 5.12.0 release and
the 5.14.0 release.
.PP
If you are upgrading from an earlier release such as 5.10.0, first read
perl5120delta, which describes differences between 5.10.0 and
5.12.0.
.PP
Some of the bug fixes in this release have been backported to subsequent
releases of 5.12.x.  Those are indicated with the 5.12.x version in
parentheses.
.SH "Notice"
.IX Header "Notice"
As described in perlpolicy, the release of Perl 5.14.0 marks the
official end of support for Perl 5.10.  Users of Perl 5.10 or earlier
should consider upgrading to a more recent release of Perl.
.SH "Core Enhancements"
.IX Header "Core Enhancements"
.SS "Unicode"
.IX Subsection "Unicode"
\fIUnicode Version 6.0 is now supported (mostly)\fR
.IX Subsection "Unicode Version 6.0 is now supported (mostly)"
.PP
Perl comes with the Unicode 6.0 data base updated with
Corrigendum #8 <http://www.unicode.org/versions/corrigendum8.html>,
with one exception noted below.
See <http://unicode.org/versions/Unicode6.0.0/> for details on the new
release.  Perl does not support any Unicode provisional properties,
including the new ones for this release.
.PP
Unicode 6.0 has chosen to use the name \f(CW\*(C`BELL\*(C'\fR for the character at U+1F514,
which is a symbol that looks like a bell, and is used in Japanese cell
phones.  This conflicts with the long-standing Perl usage of having
\&\f(CW\*(C`BELL\*(C'\fR mean the \s-1ASCII \s0\f(CW\*(C`BEL\*(C'\fR character, U+0007.  In Perl 5.14,
\&\f(CW\*(C`\eN{BELL}\*(C'\fR continues to mean U+0007, but its use generates a
deprecation warning message unless such warnings are turned off.  The
new name for U+0007 in Perl is \f(CW\*(C`ALERT\*(C'\fR, which corresponds nicely
with the existing shorthand sequence for it, \f(CW"\ea"\fR.  \f(CW\*(C`\eN{BEL}\*(C'\fR
means U+0007, with no warning given.  The character at U+1F514 has no
name in 5.14, but can be referred to by \f(CW\*(C`\eN{U+1F514}\*(C'\fR. 
In Perl 5.16, \f(CW\*(C`\eN{BELL}\*(C'\fR will refer to U+1F514; all code
that uses \f(CW\*(C`\eN{BELL}\*(C'\fR should be converted to use \f(CW\*(C`\eN{ALERT}\*(C'\fR,
\&\f(CW\*(C`\eN{BEL}\*(C'\fR, or \f(CW"\ea"\fR before upgrading.
.PP
\fIFull functionality for \f(CI\*(C`use feature \*(Aqunicode_strings\*(Aq\*(C'\fI\fR
.IX Subsection "Full functionality for use feature unicode_strings"
.PP
This release provides full functionality for \f(CW\*(C`use feature
\&\*(Aqunicode_strings\*(Aq\*(C'\fR.  Under its scope, all string operations executed and
regular expressions compiled (even if executed outside its scope) have
Unicode semantics.  See \*(L"the 'unicode_strings' feature\*(R" in feature.
However, see \*(L"Inverted bracketed character classes and multi-character folds\*(R",
below.
.PP
This feature avoids most forms of the \*(L"Unicode Bug\*(R" (see
\&\*(L"The \*(R"Unicode Bug"" in perlunicode for details).  If there is any
possibility that your code will process Unicode strings, you are
\&\fIstrongly\fR encouraged to use this subpragma to avoid nasty surprises.
.PP
\fI\f(CI\*(C`\eN{\f(CINAME\f(CI}\*(C'\fI and \f(CI\*(C`charnames\*(C'\fI enhancements\fR
.IX Subsection "N{NAME} and charnames enhancements"
.IP "\(bu" 4
\&\f(CW\*(C`\eN{\f(CINAME\f(CW}\*(C'\fR and \f(CW\*(C`charnames::vianame\*(C'\fR now know about the abbreviated
character names listed by Unicode, such as \s-1NBSP, SHY, LRO, ZWJ,\s0 etc.; all
customary abbreviations for the C0 and C1 control characters (such as
\&\s-1ACK, BEL, CAN,\s0 etc.); and a few new variants of some C1 full names that
are in common usage.
.IP "\(bu" 4
Unicode has several \fInamed character sequences\fR, in which particular sequences
of code points are given names.  \f(CW\*(C`\eN{\f(CINAME\f(CW}\*(C'\fR now recognizes these.
.IP "\(bu" 4
\&\f(CW\*(C`\eN{\f(CINAME\f(CW}\*(C'\fR, \f(CW\*(C`charnames::vianame\*(C'\fR, and \f(CW\*(C`charnames::viacode\*(C'\fR
now know about every character in Unicode.  In earlier releases of
Perl, they didn't know about the Hangul syllables nor several
\&\s-1CJK \s0(Chinese/Japanese/Korean) characters.
.IP "\(bu" 4
It is now possible to override Perl's abbreviations with your own custom aliases.
.IP "\(bu" 4
You can now create a custom alias of the ordinal of a
character, known by \f(CW\*(C`\eN{\f(CINAME\f(CW}\*(C'\fR, \f(CW\*(C`charnames::vianame()\*(C'\fR, and
\&\f(CW\*(C`charnames::viacode()\*(C'\fR.  Previously, aliases had to be to official
Unicode character names.  This made it impossible to create an alias for
unnamed code points, such as those reserved for private
use.
.IP "\(bu" 4
The new function \fIcharnames::string_vianame()\fR is a run-time version
of \f(CW\*(C`\eN{\f(CINAME\f(CW}}\*(C'\fR, returning the string of characters whose Unicode
name is its parameter.  It can handle Unicode named character
sequences, whereas the pre-existing \fIcharnames::vianame()\fR cannot,
as the latter returns a single code point.
.PP
See charnames for details on all these changes.
.PP
\fINew warnings categories for problematic (non\-)Unicode code points.\fR
.IX Subsection "New warnings categories for problematic (non-)Unicode code points."
.PP
Three new warnings subcategories of \*(L"utf8\*(R" have been added.  These
allow you to turn off some \*(L"utf8\*(R" warnings, while allowing
other warnings to remain on.  The three categories are:
\&\f(CW\*(C`surrogate\*(C'\fR when \s-1UTF\-16\s0 surrogates are encountered;
\&\f(CW\*(C`nonchar\*(C'\fR when Unicode non-character code points are encountered;
and \f(CW\*(C`non_unicode\*(C'\fR when code points above the legal Unicode
maximum of 0x10FFFF are encountered.
.PP
\fIAny unsigned value can be encoded as a character\fR
.IX Subsection "Any unsigned value can be encoded as a character"
.PP
With this release, Perl is adopting a model that any unsigned value
can be treated as a code point and encoded internally (as utf8)
without warnings, not just the code points that are legal in Unicode.
However, unless utf8 or the corresponding sub-category (see previous
item) of lexical warnings have been explicitly turned off, outputting
or executing a Unicode-defined operation such as upper-casing
on such a code point generates a warning.  Attempting to input these
using strict rules (such as with the \f(CW\*(C`:encoding(UTF\-8)\*(C'\fR layer)
will continue to fail.  Prior to this release, handling was
inconsistent and in places, incorrect.
.PP
Unicode non-characters, some of which previously were erroneously
considered illegal in places by Perl, contrary to the Unicode Standard,
are now always legal internally.  Inputting or outputting them 
works the same as with the non-legal Unicode code points, because the Unicode
Standard says they are (only) illegal for \*(L"open interchange\*(R".
.PP
\fIUnicode database files not installed\fR
.IX Subsection "Unicode database files not installed"
.PP
The Unicode database files are no longer installed with Perl.  This
doesn't affect any functionality in Perl and saves significant disk
space.  If you need these files, you can download them from
<http://www.unicode.org/Public/zipped/6.0.0/>.
.SS "Regular Expressions"
.IX Subsection "Regular Expressions"
\fI\f(CI\*(C`(?^...)\*(C'\fI construct signifies default modifiers\fR
.IX Subsection "(?^...) construct signifies default modifiers"
.PP
An \s-1ASCII\s0 caret \f(CW"^"\fR immediately following a \f(CW"(?"\fR in a regular
expression now means that the subexpression does not inherit surrounding
modifiers such as \f(CW\*(C`/i\*(C'\fR, but reverts to the Perl defaults.  Any modifiers
following the caret override the defaults.
.PP
Stringification of regular expressions now uses this notation.  
For example, \f(CW\*(C`qr/hlagh/i\*(C'\fR would previously be stringified as
\&\f(CW\*(C`(?i\-xsm:hlagh)\*(C'\fR, but now it's stringified as \f(CW\*(C`(?^i:hlagh)\*(C'\fR.
.PP
The main purpose of this change is to allow tests that rely on the
stringification \fInot\fR to have to change whenever new modifiers are added.
See \*(L"Extended Patterns\*(R" in perlre.
.PP
This change is likely to break code that compares stringified regular
expressions with fixed strings containing \f(CW\*(C`?\-xism\*(C'\fR.
.PP
\fI\f(CI\*(C`/d\*(C'\fI, \f(CI\*(C`/l\*(C'\fI, \f(CI\*(C`/u\*(C'\fI, and \f(CI\*(C`/a\*(C'\fI modifiers\fR
.IX Subsection "/d, /l, /u, and /a modifiers"
.PP
Four new regular expression modifiers have been added.  These are mutually
exclusive: one only can be turned on at a time.
.IP "\(bu" 4
The \f(CW\*(C`/l\*(C'\fR modifier says to compile the regular expression as if it were
in the scope of \f(CW\*(C`use locale\*(C'\fR, even if it is not.
.IP "\(bu" 4
The \f(CW\*(C`/u\*(C'\fR modifier says to compile the regular expression as if it were
in the scope of a \f(CW\*(C`use feature \*(Aqunicode_strings\*(Aq\*(C'\fR pragma.
.IP "\(bu" 4
The \f(CW\*(C`/d\*(C'\fR (default) modifier is used to override any \f(CW\*(C`use locale\*(C'\fR and
\&\f(CW\*(C`use feature \*(Aqunicode_strings\*(Aq\*(C'\fR pragmas in effect at the time
of compiling the regular expression.
.IP "\(bu" 4
The \f(CW\*(C`/a\*(C'\fR regular expression modifier restricts \f(CW\*(C`\es\*(C'\fR, \f(CW\*(C`\ed\*(C'\fR and \f(CW\*(C`\ew\*(C'\fR and
the \s-1POSIX \s0(\f(CW\*(C`[[:posix:]]\*(C'\fR) character classes to the \s-1ASCII\s0 range.  Their
complements and \f(CW\*(C`\eb\*(C'\fR and \f(CW\*(C`\eB\*(C'\fR are correspondingly
affected.  Otherwise, \f(CW\*(C`/a\*(C'\fR behaves like the \f(CW\*(C`/u\*(C'\fR modifier, in that
case-insensitive matching uses Unicode semantics.
.Sp
If the \f(CW\*(C`/a\*(C'\fR modifier is repeated, then additionally in case-insensitive
matching, no \s-1ASCII\s0 character can match a non-ASCII character.
For example,
.Sp
.Vb 2
\&    "k"     =~ /\eN{KELVIN SIGN}/ai
\&    "\exDF" =~ /ss/ai
.Ve
.Sp
match but
.Sp
.Vb 2
\&    "k"    =~ /\eN{KELVIN SIGN}/aai
\&    "\exDF" =~ /ss/aai
.Ve
.Sp
do not match.
.PP
See \*(L"Modifiers\*(R" in perlre for more detail.
.PP
\fINon-destructive substitution\fR
.IX Subsection "Non-destructive substitution"
.PP
The substitution (\f(CW\*(C`s///\*(C'\fR) and transliteration
(\f(CW\*(C`y///\*(C'\fR) operators now support an \f(CW\*(C`/r\*(C'\fR option that
copies the input variable, carries out the substitution on
the copy, and returns the result.  The original remains unmodified.
.PP
.Vb 3
\&  my $old = "cat";
\&  my $new = $old =~ s/cat/dog/r;
\&  # $old is "cat" and $new is "dog"
.Ve
.PP
This is particularly useful with \f(CW\*(C`map\*(C'\fR.  See perlop for more examples.
.PP
\fIRe-entrant regular expression engine\fR
.IX Subsection "Re-entrant regular expression engine"
.PP
It is now safe to use regular expressions within \f(CW\*(C`(?{...})\*(C'\fR and
\&\f(CW\*(C`(??{...})\*(C'\fR code blocks inside regular expressions.
.PP
These blocks are still experimental, however, and still have problems with
lexical (\f(CW\*(C`my\*(C'\fR) variables and abnormal exiting.
.PP
\fI\f(CI\*(C`use re \*(Aq/flags\*(Aq\*(C'\fI\fR
.IX Subsection "use re /flags"
.PP
The \f(CW\*(C`re\*(C'\fR pragma now has the ability to turn on regular expression flags
till the end of the lexical scope:
.PP
.Vb 2
\&    use re "/x";
\&    "foo" =~ / (.+) /;  # /x implied
.Ve
.PP
See \*(L"'/flags' mode\*(R" in re for details.
.PP
\fI\eo{...} for octals\fR
.IX Subsection "o{...} for octals"
.PP
There is a new octal escape sequence, \f(CW"\eo"\fR, in doublequote-like
contexts.  This construct allows large octal ordinals beyond the
current max of 0777 to be represented.  It also allows you to specify a
character in octal which can safely be concatenated with other regex
snippets and which won't be confused with being a backreference to
a regex capture group.  See \*(L"Capture groups\*(R" in perlre.
.PP
\fIAdd \f(CI\*(C`\ep{Titlecase}\*(C'\fI as a synonym for \f(CI\*(C`\ep{Title}\*(C'\fI\fR
.IX Subsection "Add p{Titlecase} as a synonym for p{Title}"
.PP
This synonym is added for symmetry with the Unicode property names
\&\f(CW\*(C`\ep{Uppercase}\*(C'\fR and \f(CW\*(C`\ep{Lowercase}\*(C'\fR.
.PP
\fIRegular expression debugging output improvement\fR
.IX Subsection "Regular expression debugging output improvement"
.PP
Regular expression debugging output (turned on by \f(CW\*(C`use re \*(Aqdebug\*(Aq\*(C'\fR) now
uses hexadecimal when escaping non-ASCII characters, instead of octal.
.PP
\fIReturn value of \f(CI\*(C`delete $+{...}\*(C'\fI\fR
.IX Subsection "Return value of delete $+{...}"
.PP
Custom regular expression engines can now determine the return value of
\&\f(CW\*(C`delete\*(C'\fR on an entry of \f(CW\*(C`%+\*(C'\fR or \f(CW\*(C`%\-\*(C'\fR.
.SS "Syntactical Enhancements"
.IX Subsection "Syntactical Enhancements"
\fIArray and hash container functions accept references\fR
.IX Subsection "Array and hash container functions accept references"
.PP
\&\fBWarning:\fR This feature is considered experimental, as the exact behaviour
may change in a future version of Perl.
.PP
All builtin functions that operate directly on array or hash
containers now also accept unblessed hard references to arrays
or hashes:
.PP
.Vb 10
\&  |\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-|
\&  | Traditional syntax         | Terse syntax              |
\&  |\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-|
\&  | push @$arrayref, @stuff    | push $arrayref, @stuff    |
\&  | unshift @$arrayref, @stuff | unshift $arrayref, @stuff |
\&  | pop @$arrayref             | pop $arrayref             |
\&  | shift @$arrayref           | shift $arrayref           |
\&  | splice @$arrayref, 0, 2    | splice $arrayref, 0, 2    |
\&  | keys %$hashref             | keys $hashref             |
\&  | keys @$arrayref            | keys $arrayref            |
\&  | values %$hashref           | values $hashref           |
\&  | values @$arrayref          | values $arrayref          |
\&  | ($k,$v) = each %$hashref   | ($k,$v) = each $hashref   |
\&  | ($k,$v) = each @$arrayref  | ($k,$v) = each $arrayref  |
\&  |\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-|
.Ve
.PP
This allows these builtin functions to act on long dereferencing chains
or on the return value of subroutines without needing to wrap them in
\&\f(CW\*(C`@{}\*(C'\fR or \f(CW\*(C`%{}\*(C'\fR:
.PP
.Vb 2
\&  push @{$obj\->tags}, $new_tag;  # old way
\&  push $obj\->tags,    $new_tag;  # new way
\&
\&  for ( keys %{$hoh\->{genres}{artists}} ) {...} # old way 
\&  for ( keys $hoh\->{genres}{artists}    ) {...} # new way
.Ve
.PP
\fISingle term prototype\fR
.IX Subsection "Single term prototype"
.PP
The \f(CW\*(C`+\*(C'\fR prototype is a special alternative to \f(CW\*(C`$\*(C'\fR that acts like
\&\f(CW\*(C`\e[@%]\*(C'\fR when given a literal array or hash variable, but will otherwise
force scalar context on the argument.  See \*(L"Prototypes\*(R" in perlsub.
.PP
\fI\f(CI\*(C`package\*(C'\fI block syntax\fR
.IX Subsection "package block syntax"
.PP
A package declaration can now contain a code block, in which case the
declaration is in scope inside that block only.  So \f(CW\*(C`package Foo { ... }\*(C'\fR
is precisely equivalent to \f(CW\*(C`{ package Foo; ... }\*(C'\fR.  It also works with
a version number in the declaration, as in \f(CW\*(C`package Foo 1.2 { ... }\*(C'\fR, 
which is its most attractive feature.  See perlfunc.
.PP
\fIStatement labels can appear in more places\fR
.IX Subsection "Statement labels can appear in more places"
.PP
Statement labels can now occur before any type of statement or declaration,
such as \f(CW\*(C`package\*(C'\fR.
.PP
\fIStacked labels\fR
.IX Subsection "Stacked labels"
.PP
Multiple statement labels can now appear before a single statement.
.PP
\fIUppercase X/B allowed in hexadecimal/binary literals\fR
.IX Subsection "Uppercase X/B allowed in hexadecimal/binary literals"
.PP
Literals may now use either upper case \f(CW\*(C`0X...\*(C'\fR or \f(CW\*(C`0B...\*(C'\fR prefixes,
in addition to the already supported \f(CW\*(C`0x...\*(C'\fR and \f(CW\*(C`0b...\*(C'\fR
syntax [perl #76296].
.PP
C, Ruby, Python, and \s-1PHP\s0 already support this syntax, and it makes
Perl more internally consistent: a round-trip with \f(CW\*(C`eval sprintf
"%#X", 0x10\*(C'\fR now returns \f(CW16\fR, just like \f(CW\*(C`eval sprintf "%#x", 0x10\*(C'\fR.
.PP
\fIOverridable tie functions\fR
.IX Subsection "Overridable tie functions"
.PP
\&\f(CW\*(C`tie\*(C'\fR, \f(CW\*(C`tied\*(C'\fR and \f(CW\*(C`untie\*(C'\fR can now be overridden [perl #75902].
.SS "Exception Handling"
.IX Subsection "Exception Handling"
To make them more reliable and consistent, several changes have been made
to how \f(CW\*(C`die\*(C'\fR, \f(CW\*(C`warn\*(C'\fR, and \f(CW$@\fR behave.
.IP "\(bu" 4
When an exception is thrown inside an \f(CW\*(C`eval\*(C'\fR, the exception is no
longer at risk of being clobbered by destructor code running during unwinding.
Previously, the exception was written into \f(CW$@\fR
early in the throwing process, and would be overwritten if \f(CW\*(C`eval\*(C'\fR was
used internally in the destructor for an object that had to be freed
while exiting from the outer \f(CW\*(C`eval\*(C'\fR.  Now the exception is written
into \f(CW$@\fR last thing before exiting the outer \f(CW\*(C`eval\*(C'\fR, so the code
running immediately thereafter can rely on the value in \f(CW$@\fR correctly
corresponding to that \f(CW\*(C`eval\*(C'\fR.  (\f(CW$@\fR is still also set before exiting the
\&\f(CW\*(C`eval\*(C'\fR, for the sake of destructors that rely on this.)
.Sp
Likewise, a \f(CW\*(C`local $@\*(C'\fR inside an \f(CW\*(C`eval\*(C'\fR no longer clobbers any
exception thrown in its scope.  Previously, the restoration of \f(CW$@\fR upon
unwinding would overwrite any exception being thrown.  Now the exception
gets to the \f(CW\*(C`eval\*(C'\fR anyway.  So \f(CW\*(C`local $@\*(C'\fR is safe before a \f(CW\*(C`die\*(C'\fR.
.Sp
Exceptions thrown from object destructors no longer modify the \f(CW$@\fR
of the surrounding context.  (If the surrounding context was exception
unwinding, this used to be another way to clobber the exception being
thrown.)  Previously such an exception was
sometimes emitted as a warning, and then either was
string-appended to the surrounding \f(CW$@\fR or completely replaced the
surrounding \f(CW$@\fR, depending on whether that exception and the surrounding
\&\f(CW$@\fR were strings or objects.  Now, an exception in this situation is
always emitted as a warning, leaving the surrounding \f(CW$@\fR untouched.
In addition to object destructors, this also affects any function call
run by \s-1XS\s0 code using the \f(CW\*(C`G_KEEPERR\*(C'\fR flag.
.IP "\(bu" 4
Warnings for \f(CW\*(C`warn\*(C'\fR can now be objects in the same way as exceptions
for \f(CW\*(C`die\*(C'\fR.  If an object-based warning gets the default handling
of writing to standard error, it is stringified as before with the
filename and line number appended.  But a \f(CW$SIG{_\|_WARN_\|_}\fR handler now
receives an object-based warning as an object, where previously it
was passed the result of stringifying the object.
.SS "Other Enhancements"
.IX Subsection "Other Enhancements"
\fIAssignment to \f(CI$0\fI sets the legacy process name with \fIprctl()\fI on Linux\fR
.IX Subsection "Assignment to $0 sets the legacy process name with prctl() on Linux"
.PP
On Linux the legacy process name is now set with \fIprctl\fR\|(2), in
addition to altering the \s-1POSIX\s0 name via \f(CW\*(C`argv[0]\*(C'\fR, as Perl has done
since version 4.000.  Now system utilities that read the legacy process
name such as \fIps\fR, \fItop\fR, and \fIkillall\fR recognize the name you set when
assigning to \f(CW$0\fR.  The string you supply is truncated at 16 bytes;
this limitation is imposed by Linux.
.PP
\fI\fIsrand()\fI now returns the seed\fR
.IX Subsection "srand() now returns the seed"
.PP
This allows programs that need to have repeatable results not to have to come
up with their own seed-generating mechanism.  Instead, they can use \fIsrand()\fR
and stash the return value for future use.  One example is a test program with
too many combinations to test comprehensively in the time available for
each run.  It can test a random subset each time and, should there be a failure,
log the seed used for that run so this can later be used to produce the same results.
.PP
\fIprintf-like functions understand post\-1980 size modifiers\fR
.IX Subsection "printf-like functions understand post-1980 size modifiers"
.PP
Perl's printf and sprintf operators, and Perl's internal printf replacement
function, now understand the C90 size modifiers \*(L"hh\*(R" (\f(CW\*(C`char\*(C'\fR), \*(L"z\*(R"
(\f(CW\*(C`size_t\*(C'\fR), and \*(L"t\*(R" (\f(CW\*(C`ptrdiff_t\*(C'\fR).  Also, when compiled with a C99
compiler, Perl now understands the size modifier \*(L"j\*(R" (\f(CW\*(C`intmax_t\*(C'\fR) 
(but this is not portable).
.PP
So, for example, on any modern machine, \f(CW\*(C`sprintf("%hhd", 257)\*(C'\fR returns \*(L"1\*(R".
.PP
\fINew global variable \f(CI\*(C`${^GLOBAL_PHASE}\*(C'\fI\fR
.IX Subsection "New global variable ${^GLOBAL_PHASE}"
.PP
A new global variable, \f(CW\*(C`${^GLOBAL_PHASE}\*(C'\fR, has been added to allow
introspection of the current phase of the Perl interpreter.  It's explained in
detail in \*(L"${^GLOBAL_PHASE}\*(R" in perlvar and in
\&\*(L"\s-1BEGIN, UNITCHECK, CHECK, INIT\s0 and \s-1END\*(R"\s0 in perlmod.
.PP
\fI\f(CI\*(C`\-d:\-foo\*(C'\fI calls \f(CI\*(C`Devel::foo::unimport\*(C'\fI\fR
.IX Subsection "-d:-foo calls Devel::foo::unimport"
.PP
The syntax \fB\-d:foo\fR was extended in 5.6.1 to make \fB\-d:foo=bar\fR
equivalent to \fB\-MDevel::foo=bar\fR, which expands
internally to \f(CW\*(C`use Devel::foo \*(Aqbar\*(Aq\*(C'\fR.
Perl now allows prefixing the module name with \fB\-\fR, with the same
semantics as \fB\-M\fR; that is:
.ie n .IP """\-d:\-foo""" 4
.el .IP "\f(CW\-d:\-foo\fR" 4
.IX Item "-d:-foo"
Equivalent to \fB\-M\-Devel::foo\fR: expands to
\&\f(CW\*(C`no Devel::foo\*(C'\fR and calls \f(CW\*(C`Devel::foo\->unimport()\*(C'\fR
if that method exists.
.ie n .IP """\-d:\-foo=bar""" 4
.el .IP "\f(CW\-d:\-foo=bar\fR" 4
.IX Item "-d:-foo=bar"
Equivalent to \fB\-M\-Devel::foo=bar\fR: expands to \f(CW\*(C`no Devel::foo \*(Aqbar\*(Aq\*(C'\fR,
and calls \f(CW\*(C`Devel::foo\->unimport("bar")\*(C'\fR if that method exists.
.PP
This is particularly useful for suppressing the default actions of a
\&\f(CW\*(C`Devel::*\*(C'\fR module's \f(CW\*(C`import\*(C'\fR method whilst still loading it for debugging.
.PP
\fIFilehandle method calls load IO::File on demand\fR
.IX Subsection "Filehandle method calls load IO::File on demand"
.PP
When a method call on a filehandle would die because the method cannot
be resolved and IO::File has not been loaded, Perl now loads IO::File
via \f(CW\*(C`require\*(C'\fR and attempts method resolution again:
.PP
.Vb 2
\&  open my $fh, ">", $file;
\&  $fh\->binmode(":raw");     # loads IO::File and succeeds
.Ve
.PP
This also works for globs like \f(CW\*(C`STDOUT\*(C'\fR, \f(CW\*(C`STDERR\*(C'\fR, and \f(CW\*(C`STDIN\*(C'\fR:
.PP
.Vb 1
\&  STDOUT\->autoflush(1);
.Ve
.PP
Because this on-demand load happens only if method resolution fails, the
legacy approach of manually loading an IO::File parent class for partial
method support still works as expected:
.PP
.Vb 3
\&  use IO::Handle;
\&  open my $fh, ">", $file;
\&  $fh\->autoflush(1);        # IO::File not loaded
.Ve
.PP
\fIImproved IPv6 support\fR
.IX Subsection "Improved IPv6 support"
.PP
The \f(CW\*(C`Socket\*(C'\fR module provides new affordances for IPv6,
including implementations of the \f(CW\*(C`Socket::getaddrinfo()\*(C'\fR and
\&\f(CW\*(C`Socket::getnameinfo()\*(C'\fR functions, along with related constants and a
handful of new functions.  See Socket.
.PP
\fIDTrace probes now include package name\fR
.IX Subsection "DTrace probes now include package name"
.PP
The \f(CW\*(C`DTrace\*(C'\fR probes now include an additional argument, \f(CW\*(C`arg3\*(C'\fR, which contains
the package the subroutine being entered or left was compiled in.
.PP
For example, using the following DTrace script:
.PP
.Vb 4
\&  perl$target:::sub\-entry
\&  {
\&      printf("%s::%s\en", copyinstr(arg0), copyinstr(arg3));
\&  }
.Ve
.PP
and then running:
.PP
.Vb 1
\&  $ perl \-e \*(Aqsub test { }; test\*(Aq
.Ve
.PP
\&\f(CW\*(C`DTrace\*(C'\fR will print:
.PP
.Vb 1
\&  main::test
.Ve
.SS "New C APIs"
.IX Subsection "New C APIs"
See \*(L"Internal Changes\*(R".
.SH "Security"
.IX Header "Security"
.SS "User-defined regular expression properties"
.IX Subsection "User-defined regular expression properties"
\&\*(L"User-Defined Character Properties\*(R" in perlunicode documented that you can
create custom properties by defining subroutines whose names begin with
\&\*(L"In\*(R" or \*(L"Is\*(R".  However, Perl did not actually enforce that naming
restriction, so \f(CW\*(C`\ep{foo::bar}\*(C'\fR could call \fIfoo::bar()\fR if it existed.  The documented
convention is now enforced.
.PP
Also, Perl no longer allows tainted regular expressions to invoke a
user-defined property.  It simply dies instead [perl #82616].
.SH "Incompatible Changes"
.IX Header "Incompatible Changes"
Perl 5.14.0 is not binary-compatible with any previous stable release.
.PP
In addition to the sections that follow, see \*(L"C \s-1API\s0 Changes\*(R".
.SS "Regular Expressions and String Escapes"
.IX Subsection "Regular Expressions and String Escapes"
\fIInverted bracketed character classes and multi-character folds\fR
.IX Subsection "Inverted bracketed character classes and multi-character folds"
.PP
Some characters match a sequence of two or three characters in \f(CW\*(C`/i\*(C'\fR
regular expression matching under Unicode rules.  One example is
\&\f(CW\*(C`LATIN SMALL LETTER SHARP S\*(C'\fR which matches the sequence \f(CW\*(C`ss\*(C'\fR.
.PP
.Vb 1
\& \*(Aqss\*(Aq =~ /\eA[\eN{LATIN SMALL LETTER SHARP S}]\ez/i  # Matches
.Ve
.PP
This, however, can lead to very counter-intuitive results, especially
when inverted.  Because of this, Perl 5.14 does not use multi-character \f(CW\*(C`/i\*(C'\fR
matching in inverted character classes.
.PP
.Vb 1
\& \*(Aqss\*(Aq =~ /\eA[^\eN{LATIN SMALL LETTER SHARP S}]+\ez/i  # ???
.Ve
.PP
This should match any sequences of characters that aren't the \f(CW\*(C`SHARP S\*(C'\fR
nor what \f(CW\*(C`SHARP S\*(C'\fR matches under \f(CW\*(C`/i\*(C'\fR.  \f(CW"s"\fR isn't \f(CW\*(C`SHARP S\*(C'\fR, but
Unicode says that \f(CW"ss"\fR is what \f(CW\*(C`SHARP S\*(C'\fR matches under \f(CW\*(C`/i\*(C'\fR.  So
which one \*(L"wins\*(R"? Do you fail the match because the string has \f(CW\*(C`ss\*(C'\fR or
accept it because it has an \f(CW\*(C`s\*(C'\fR followed by another \f(CW\*(C`s\*(C'\fR?
.PP
Earlier releases of Perl did allow this multi-character matching,
but due to bugs, it mostly did not work.
.PP
\fI\e400\-\e777\fR
.IX Subsection "400-777"
.PP
In certain circumstances, \f(CW\*(C`\e400\*(C'\fR\-\f(CW\*(C`\e777\*(C'\fR in regexes have behaved
differently than they behave in all other doublequote-like contexts.
Since 5.10.1, Perl has issued a deprecation warning when this happens.
Now, these literals behave the same in all doublequote-like contexts,
namely to be equivalent to \f(CW\*(C`\ex{100}\*(C'\fR\-\f(CW\*(C`\ex{1FF}\*(C'\fR, with no deprecation
warning.
.PP
Use of \f(CW\*(C`\e400\*(C'\fR\-\f(CW\*(C`\e777\*(C'\fR in the command-line option \fB\-0\fR retain their
conventional meaning.  They slurp whole input files; previously, this
was documented only for \fB\-0777\fR.
.PP
Because of various ambiguities, you should use the new
\&\f(CW\*(C`\eo{...}\*(C'\fR construct to represent characters in octal instead.
.PP
\fIMost \f(CI\*(C`\ep{}\*(C'\fI properties are now immune to case-insensitive matching\fR
.IX Subsection "Most p{} properties are now immune to case-insensitive matching"
.PP
For most Unicode properties, it doesn't make sense to have them match
differently under \f(CW\*(C`/i\*(C'\fR case-insensitive matching.  Doing so can lead
to unexpected results and potential security holes.  For example
.PP
.Vb 1
\& m/\ep{ASCII_Hex_Digit}+/i
.Ve
.PP
could previously match non-ASCII characters because of the Unicode
matching rules (although there were several bugs with this).  Now
matching under \f(CW\*(C`/i\*(C'\fR gives the same results as non\-\f(CW\*(C`/i\*(C'\fR matching except
for those few properties where people have come to expect differences,
namely the ones where casing is an integral part of their meaning, such
as \f(CW\*(C`m/\ep{Uppercase}/i\*(C'\fR and \f(CW\*(C`m/\ep{Lowercase}/i\*(C'\fR, both of which match
the same code points as matched by \f(CW\*(C`m/\ep{Cased}/i\*(C'\fR.
Details are in \*(L"Unicode Properties\*(R" in perlrecharclass.
.PP
User-defined property handlers that need to match differently under \f(CW\*(C`/i\*(C'\fR
must be changed to read the new boolean parameter passed to them, which
is non-zero if case-insensitive matching is in effect and 0 otherwise.
See \*(L"User-Defined Character Properties\*(R" in perlunicode.
.PP
\fI\ep{} implies Unicode semantics\fR
.IX Subsection "p{} implies Unicode semantics"
.PP
Specifying a Unicode property in the pattern indicates
that the pattern is meant for matching according to Unicode rules, the way
\&\f(CW\*(C`\eN{\f(CINAME\f(CW}\*(C'\fR does.
.PP
\fIRegular expressions retain their localeness when interpolated\fR
.IX Subsection "Regular expressions retain their localeness when interpolated"
.PP
Regular expressions compiled under \f(CW\*(C`use locale\*(C'\fR now retain this when
interpolated into a new regular expression compiled outside a
\&\f(CW\*(C`use locale\*(C'\fR, and vice-versa.
.PP
Previously, one regular expression interpolated into another inherited
the localeness of the surrounding regex, losing whatever state it
originally had.  This is considered a bug fix, but may trip up code that
has come to rely on the incorrect behaviour.
.PP
\fIStringification of regexes has changed\fR
.IX Subsection "Stringification of regexes has changed"
.PP
Default regular expression modifiers are now notated using
\&\f(CW\*(C`(?^...)\*(C'\fR.  Code relying on the old stringification will fail.  
This is so that when new modifiers are added, such code won't
have to keep changing each time this happens, because the stringification 
will automatically incorporate the new modifiers.
.PP
Code that needs to work properly with both old\- and new-style regexes
can avoid the whole issue by using (for perls since 5.9.5; see re):
.PP
.Vb 2
\& use re qw(regexp_pattern);
\& my ($pat, $mods) = regexp_pattern($re_ref);
.Ve
.PP
If the actual stringification is important or older Perls need to be
supported, you can use something like the following:
.PP
.Vb 2
\&    # Accept both old and new\-style stringification
\&    my $modifiers = (qr/foobar/ =~ /\eQ(?^/) ? "^" : "\-xism";
.Ve
.PP
And then use \f(CW$modifiers\fR instead of \f(CW\*(C`\-xism\*(C'\fR.
.PP
\fIRun-time code blocks in regular expressions inherit pragmata\fR
.IX Subsection "Run-time code blocks in regular expressions inherit pragmata"
.PP
Code blocks in regular expressions (\f(CW\*(C`(?{...})\*(C'\fR and \f(CW\*(C`(??{...})\*(C'\fR) previously
did not inherit pragmata (strict, warnings, etc.) if the regular expression
was compiled at run time as happens in cases like these two:
.PP
.Vb 3
\&  use re "eval";
\&  $foo =~ $bar; # when $bar contains (?{...})
\&  $foo =~ /$bar(?{ $finished = 1 })/;
.Ve
.PP
This bug has now been fixed, but code that relied on the buggy behaviour
may need to be fixed to account for the correct behaviour.
.SS "Stashes and Package Variables"
.IX Subsection "Stashes and Package Variables"
\fILocalised tied hashes and arrays are no longed tied\fR
.IX Subsection "Localised tied hashes and arrays are no longed tied"
.PP
In the following:
.PP
.Vb 6
\&    tie @a, ...;
\&    {
\&            local @a;
\&            # here, @a is a now a new, untied array
\&    }
\&    # here, @a refers again to the old, tied array
.Ve
.PP
Earlier versions of Perl incorrectly tied the new local array.  This has
now been fixed.  This fix could however potentially cause a change in
behaviour of some code.
.PP
\fIStashes are now always defined\fR
.IX Subsection "Stashes are now always defined"
.PP
\&\f(CW\*(C`defined %Foo::\*(C'\fR now always returns true, even when no symbols have yet been
defined in that package.
.PP
This is a side-effect of removing a special-case kludge in the tokeniser,
added for 5.10.0, to hide side-effects of changes to the internal storage of
hashes.  The fix drastically reduces hashes' memory overhead.
.PP
Calling defined on a stash has been deprecated since 5.6.0, warned on
lexicals since 5.6.0, and warned for stashes and other package
variables since 5.12.0.  \f(CW\*(C`defined %hash\*(C'\fR has always exposed an
implementation detail: emptying a hash by deleting all entries from it does
not make \f(CW\*(C`defined %hash\*(C'\fR false.  Hence \f(CW\*(C`defined %hash\*(C'\fR is not valid code to
determine whether an arbitrary hash is empty.  Instead, use the behaviour
of an empty \f(CW%hash\fR always returning false in scalar context.
.PP
\fIClearing stashes\fR
.IX Subsection "Clearing stashes"
.PP
Stash list assignment \f(CW\*(C`%foo:: = ()\*(C'\fR used to make the stash temporarily 
anonymous while it was being emptied.  Consequently, any of its
subroutines referenced elsewhere would become anonymous,  showing up as
\&\*(L"(unknown)\*(R" in \f(CW\*(C`caller\*(C'\fR.  They now retain their package names such that
\&\f(CW\*(C`caller\*(C'\fR returns the original sub name if there is still a reference
to its typeglob and \*(L"foo::_\|_ANON_\|_\*(R" otherwise [perl #79208].
.PP
\fIDereferencing typeglobs\fR
.IX Subsection "Dereferencing typeglobs"
.PP
If you assign a typeglob to a scalar variable:
.PP
.Vb 1
\&    $glob = *foo;
.Ve
.PP
the glob that is copied to \f(CW$glob\fR is marked with a special flag
indicating that the glob is just a copy.  This allows subsequent
assignments to \f(CW$glob\fR to overwrite the glob.  The original glob,
however, is immutable.
.PP
Some Perl operators did not distinguish between these two types of globs.
This would result in strange behaviour in edge cases: \f(CW\*(C`untie $scalar\*(C'\fR
would not untie the scalar if the last thing assigned to it was a glob
(because it treated it as \f(CW\*(C`untie *$scalar\*(C'\fR, which unties a handle).
Assignment to a glob slot (such as \f(CW\*(C`*$glob = \e@some_array\*(C'\fR) would simply
assign \f(CW\*(C`\e@some_array\*(C'\fR to \f(CW$glob\fR.
.PP
To fix this, the \f(CW\*(C`*{}\*(C'\fR operator (including its \f(CW*foo\fR and \f(CW*$foo\fR forms)
has been modified to make a new immutable glob if its operand is a glob
copy.  This allows operators that make a distinction between globs and
scalars to be modified to treat only immutable globs as globs.  (\f(CW\*(C`tie\*(C'\fR,
\&\f(CW\*(C`tied\*(C'\fR and \f(CW\*(C`untie\*(C'\fR have been left as they are for compatibility's sake,
but will warn.  See \*(L"Deprecations\*(R".)
.PP
This causes an incompatible change in code that assigns a glob to the
return value of \f(CW\*(C`*{}\*(C'\fR when that operator was passed a glob copy.  Take the
following code, for instance:
.PP
.Vb 2
\&    $glob = *foo;
\&    *$glob = *bar;
.Ve
.PP
The \f(CW*$glob\fR on the second line returns a new immutable glob.  That new
glob is made an alias to \f(CW*bar\fR.  Then it is discarded.  So the second
assignment has no effect.
.PP
See <http://rt.perl.org/rt3/Public/Bug/Display.html?id=77810> for
more detail.
.PP
\fIMagic variables outside the main package\fR
.IX Subsection "Magic variables outside the main package"
.PP
In previous versions of Perl, magic variables like \f(CW$!\fR, \f(CW%SIG\fR, etc. would
\&\*(L"leak\*(R" into other packages.  So \f(CW%foo::SIG\fR could be used to access signals,
\&\f(CW\*(C`${"foo::!"}\*(C'\fR (with strict mode off) to access C's \f(CW\*(C`errno\*(C'\fR, etc.
.PP
This was a bug, or an \*(L"unintentional\*(R" feature, which caused various ill effects,
such as signal handlers being wiped when modules were loaded, etc.
.PP
This has been fixed (or the feature has been removed, depending on how you see
it).
.PP
\fIlocal($_) strips all magic from \f(CI$_\fI\fR
.IX Subsection "local($_) strips all magic from $_"
.PP
\&\fIlocal()\fR on scalar variables gives them a new value but keeps all
their magic intact.  This has proven problematic for the default
scalar variable \f(CW$_\fR, where perlsub recommends that any subroutine
that assigns to \f(CW$_\fR should first localize it.  This would throw an
exception if \f(CW$_\fR is aliased to a read-only variable, and could in general have
various unintentional side-effects.
.PP
Therefore, as an exception to the general rule, local($_) will not
only assign a new value to \f(CW$_\fR, but also remove all existing magic from
it as well.
.PP
\fIParsing of package and variable names\fR
.IX Subsection "Parsing of package and variable names"
.PP
Parsing the names of packages and package variables has changed: 
multiple adjacent pairs of colons, as in \f(CW\*(C`foo::::bar\*(C'\fR, are now all 
treated as package separators.
.PP
Regardless of this change, the exact parsing of package separators has
never been guaranteed and is subject to change in future Perl versions.
.SS "Changes to Syntax or to Perl Operators"
.IX Subsection "Changes to Syntax or to Perl Operators"
\fI\f(CI\*(C`given\*(C'\fI return values\fR
.IX Subsection "given return values"
.PP
\&\f(CW\*(C`given\*(C'\fR blocks now return the last evaluated
expression, or an empty list if the block was exited by \f(CW\*(C`break\*(C'\fR.  Thus you
can now write:
.PP
.Vb 8
\&    my $type = do {
\&     given ($num) {
\&      break     when undef;
\&      "integer" when /^[+\-]?[0\-9]+$/;
\&      "float"   when /^[+\-]?[0\-9]+(?:\e.[0\-9]+)?$/;
\&      "unknown";
\&     }
\&    };
.Ve
.PP
See \*(L"Return value\*(R" in perlsyn for details.
.PP
\fIChange in parsing of certain prototypes\fR
.IX Subsection "Change in parsing of certain prototypes"
.PP
Functions declared with the following prototypes now behave correctly as unary
functions:
.PP
.Vb 6
\&  *
\&  \e$ \e% \e@ \e* \e&
\&  \e[...]
\&  ;$ ;*
\&  ;\e$ ;\e% etc.
\&  ;\e[...]
.Ve
.PP
Due to this bug fix [perl #75904], functions
using the \f(CW\*(C`(*)\*(C'\fR, \f(CW\*(C`(;$)\*(C'\fR and \f(CW\*(C`(;*)\*(C'\fR prototypes
are parsed with higher precedence than before.  So
in the following example:
.PP
.Vb 2
\&  sub foo(;$);
\&  foo $a < $b;
.Ve
.PP
the second line is now parsed correctly as \f(CW\*(C`foo($a) < $b\*(C'\fR, rather than
\&\f(CW\*(C`foo($a < $b)\*(C'\fR.  This happens when one of these operators is used in
an unparenthesised argument:
.PP
.Vb 10
\&  < > <= >= lt gt le ge
\&  == != <=> eq ne cmp ~~
\&  &
\&  | ^
\&  &&
\&  || //
\&  .. ...
\&  ?:
\&  = += \-= *= etc.
\&  , =>
.Ve
.PP
\fISmart-matching against array slices\fR
.IX Subsection "Smart-matching against array slices"
.PP
Previously, the following code resulted in a successful match:
.PP
.Vb 3
\&    my @a = qw(a y0 z);
\&    my @b = qw(a x0 z);
\&    @a[0 .. $#b] ~~ @b;
.Ve
.PP
This odd behaviour has now been fixed [perl #77468].
.PP
\fINegation treats strings differently from before\fR
.IX Subsection "Negation treats strings differently from before"
.PP
The unary negation operator, \f(CW\*(C`\-\*(C'\fR, now treats strings that look like numbers
as numbers [perl #57706].
.PP
\fINegative zero\fR
.IX Subsection "Negative zero"
.PP
Negative zero (\-0.0), when converted to a string, now becomes \*(L"0\*(R" on all
platforms.  It used to become \*(L"\-0\*(R" on some, but \*(L"0\*(R" on others.
.PP
If you still need to determine whether a zero is negative, use
\&\f(CW\*(C`sprintf("%g", $zero) =~ /^\-/\*(C'\fR or the Data::Float module on \s-1CPAN.\s0
.PP
\fI\f(CI\*(C`:=\*(C'\fI is now a syntax error\fR
.IX Subsection ":= is now a syntax error"
.PP
Previously \f(CW\*(C`my $pi := 4\*(C'\fR was exactly equivalent to \f(CW\*(C`my $pi : = 4\*(C'\fR,
with the \f(CW\*(C`:\*(C'\fR being treated as the start of an attribute list, ending before
the \f(CW\*(C`=\*(C'\fR.  The use of \f(CW\*(C`:=\*(C'\fR to mean \f(CW\*(C`: =\*(C'\fR was deprecated in 5.12.0, and is
now a syntax error.  This allows future use of \f(CW\*(C`:=\*(C'\fR as a new token.
.PP
Outside the core's tests for it, we find no Perl 5 code on \s-1CPAN\s0
using this construction, so we believe that this change will have
little impact on real-world codebases.
.PP
If it is absolutely necessary to have empty attribute lists (for example,
because of a code generator), simply avoid the error by adding a space before
the \f(CW\*(C`=\*(C'\fR.
.PP
\fIChange in the parsing of identifiers\fR
.IX Subsection "Change in the parsing of identifiers"
.PP
Characters outside the Unicode \*(L"XIDStart\*(R" set are no longer allowed at the
beginning of an identifier.  This means that certain accents and marks
that normally follow an alphabetic character may no longer be the first
character of an identifier.
.SS "Threads and Processes"
.IX Subsection "Threads and Processes"
\fIDirectory handles not copied to threads\fR
.IX Subsection "Directory handles not copied to threads"
.PP
On systems other than Windows that do not have
a \f(CW\*(C`fchdir\*(C'\fR function, newly-created threads no
longer inherit directory handles from their parent threads.  Such programs
would usually have crashed anyway [perl #75154].
.PP
\fI\f(CI\*(C`close\*(C'\fI on shared pipes\fR
.IX Subsection "close on shared pipes"
.PP
To avoid deadlocks, the \f(CW\*(C`close\*(C'\fR function no longer waits for the
child process to exit if the underlying file descriptor is still
in use by another thread.  It returns true in such cases.
.PP
\fI\fIfork()\fI emulation will not wait for signalled children\fR
.IX Subsection "fork() emulation will not wait for signalled children"
.PP
On Windows parent processes would not terminate until all forked
children had terminated first.  However, \f(CW\*(C`kill("KILL", ...)\*(C'\fR is
inherently unstable on pseudo-processes, and \f(CW\*(C`kill("TERM", ...)\*(C'\fR
might not get delivered if the child is blocked in a system call.
.PP
To avoid the deadlock and still provide a safe mechanism to terminate
the hosting process, Perl now no longer waits for children that
have been sent a \s-1SIGTERM\s0 signal.  It is up to the parent process to
\&\fIwaitpid()\fR for these children if child-cleanup processing must be
allowed to finish.  However, it is also then the responsibility of the
parent to avoid the deadlock by making sure the child process
can't be blocked on I/O.
.PP
See perlfork for more information about the \fIfork()\fR emulation on
Windows.
.SS "Configuration"
.IX Subsection "Configuration"
\fINaming fixes in Policy_sh.SH may invalidate Policy.sh\fR
.IX Subsection "Naming fixes in Policy_sh.SH may invalidate Policy.sh"
.PP
Several long-standing typos and naming confusions in \fIPolicy_sh.SH\fR have
been fixed, standardizing on the variable names used in \fIconfig.sh\fR.
.PP
This will change the behaviour of \fIPolicy.sh\fR if you happen to have been
accidentally relying on its incorrect behaviour.
.PP
\fIPerl source code is read in text mode on Windows\fR
.IX Subsection "Perl source code is read in text mode on Windows"
.PP
Perl scripts used to be read in binary mode on Windows for the benefit
of the ByteLoader module (which is no longer part of core Perl).  This
had the side-effect of breaking various operations on the \f(CW\*(C`DATA\*(C'\fR filehandle,
including \fIseek()\fR/\fItell()\fR, and even simply reading from \f(CW\*(C`DATA\*(C'\fR after filehandles
have been flushed by a call to \fIsystem()\fR, backticks, \fIfork()\fR etc.
.PP
The default build options for Windows have been changed to read Perl source
code on Windows in text mode now.  ByteLoader will (hopefully) be updated on
\&\s-1CPAN\s0 to automatically handle this situation [perl #28106].
.SH "Deprecations"
.IX Header "Deprecations"
See also \*(L"Deprecated C APIs\*(R".
.SS "Omitting a space between a regular expression and subsequent word"
.IX Subsection "Omitting a space between a regular expression and subsequent word"
Omitting the space between a regular expression operator or
its modifiers and the following word is deprecated.  For
example, \f(CW\*(C`m/foo/sand $bar\*(C'\fR is for now still parsed
as \f(CW\*(C`m/foo/s and $bar\*(C'\fR, but will now issue a warning.
.ie n .SS """\ec\fIX\fP"""
.el .SS "\f(CW\ec\fP\f(CIX\fP\f(CW\fP"
.IX Subsection "cX"
The backslash-c construct was designed as a way of specifying
non-printable characters, but there were no restrictions (on \s-1ASCII\s0
platforms) on what the character following the \f(CW\*(C`c\*(C'\fR could be.  Now,
a deprecation warning is raised if that character isn't an \s-1ASCII\s0 character.
Also, a deprecation warning is raised for \f(CW"\ec{"\fR (which is the same
as simply saying \f(CW";"\fR).
.ie n .SS """\eb{"" and ""\eB{"""
.el .SS "\f(CW``\eb{''\fP and \f(CW``\eB{''\fP"
.IX Subsection """b{"" and ""B{"""
In regular expressions, a literal \f(CW"{"\fR immediately following a \f(CW"\eb"\fR
(not in a bracketed character class) or a \f(CW"\eB{"\fR is now deprecated
to allow for its future use by Perl itself.
.SS "Perl 4\-era .pl libraries"
.IX Subsection "Perl 4-era .pl libraries"
Perl bundles a handful of library files that predate Perl 5.
This bundling is now deprecated for most of these files, which are now
available from \s-1CPAN. \s0 The affected files now warn when run, if they were
installed as part of the core.
.PP
This is a mandatory warning, not obeying \fB\-X\fR or lexical warning bits.
The warning is modelled on that supplied by \fIdeprecate.pm\fR for
deprecated-in-core \fI.pm\fR libraries.  It points to the specific \s-1CPAN\s0
distribution that contains the \fI.pl\fR libraries.  The \s-1CPAN\s0 versions, of
course, do not generate the warning.
.ie n .SS "List assignment to $["
.el .SS "List assignment to \f(CW$[\fP"
.IX Subsection "List assignment to $["
Assignment to \f(CW$[\fR was deprecated and started to give warnings in
Perl version 5.12.0.  This version of Perl (5.14) now also emits a warning 
when assigning to \f(CW$[\fR in list context.  This fixes an oversight in 5.12.0.
.SS "Use of qw(...) as parentheses"
.IX Subsection "Use of qw(...) as parentheses"
Historically the parser fooled itself into thinking that \f(CW\*(C`qw(...)\*(C'\fR literals
were always enclosed in parentheses, and as a result you could sometimes omit
parentheses around them:
.PP
.Vb 1
\&    for $x qw(a b c) { ... }
.Ve
.PP
The parser no longer lies to itself in this way.  Wrap the list literal in
parentheses like this:
.PP
.Vb 1
\&    for $x (qw(a b c)) { ... }
.Ve
.PP
This is being deprecated because the parentheses in \f(CW\*(C`for $i (1,2,3) { ... }\*(C'\fR
are not part of expression syntax.  They are part of the statement
syntax, with the \f(CW\*(C`for\*(C'\fR statement wanting literal parentheses.
The synthetic parentheses that a \f(CW\*(C`qw\*(C'\fR expression acquired were only
intended to be treated as part of expression syntax.
.PP
Note that this does not change the behaviour of cases like:
.PP
.Vb 2
\&    use POSIX qw(setlocale localeconv);
\&    our @EXPORT = qw(foo bar baz);
.Ve
.PP
where parentheses were never required around the expression.
.ie n .SS """\eN{BELL}"""
.el .SS "\f(CW\eN{BELL}\fP"
.IX Subsection "N{BELL}"
This is because Unicode is using that name for a different character.
See \*(L"Unicode Version 6.0 is now supported (mostly)\*(R" for more
explanation.
.ie n .SS """?PATTERN?"""
.el .SS "\f(CW?PATTERN?\fP"
.IX Subsection "?PATTERN?"
\&\f(CW\*(C`?PATTERN?\*(C'\fR (without the initial \f(CW\*(C`m\*(C'\fR) has been deprecated and now produces
a warning.  This is to allow future use of \f(CW\*(C`?\*(C'\fR in new operators.
The match-once functionality is still available as \f(CW\*(C`m?PATTERN?\*(C'\fR.
.SS "Tie functions on scalars holding typeglobs"
.IX Subsection "Tie functions on scalars holding typeglobs"
Calling a tie function (\f(CW\*(C`tie\*(C'\fR, \f(CW\*(C`tied\*(C'\fR, \f(CW\*(C`untie\*(C'\fR) with a scalar argument
acts on a filehandle if the scalar happens to hold a typeglob.
.PP
This is a long-standing bug that will be removed in Perl 5.16, as
there is currently no way to tie the scalar itself when it holds
a typeglob, and no way to untie a scalar that has had a typeglob
assigned to it.
.PP
Now there is a deprecation warning whenever a tie
function is used on a handle without an explicit \f(CW\*(C`*\*(C'\fR.
.SS "User-defined case-mapping"
.IX Subsection "User-defined case-mapping"
This feature is being deprecated due to its many issues, as documented in
\&\*(L"User-Defined Case Mappings (for serious hackers only)\*(R" in perlunicode.
This feature will be removed in Perl 5.16.  Instead use the \s-1CPAN\s0 module
Unicode::Casing, which provides improved functionality.
.SS "Deprecated modules"
.IX Subsection "Deprecated modules"
The following module will be removed from the core distribution in a
future release, and should be installed from \s-1CPAN\s0 instead.  Distributions
on \s-1CPAN\s0 that require this should add it to their prerequisites.  The
core version of these module now issues a deprecation warning.
.PP
If you ship a packaged version of Perl, either alone or as part of a
larger system, then you should carefully consider the repercussions of
core module deprecations.  You may want to consider shipping your default
build of Perl with a package for the deprecated module that
installs into \f(CW\*(C`vendor\*(C'\fR or \f(CW\*(C`site\*(C'\fR Perl library directories.  This will
inhibit the deprecation warnings.
.PP
Alternatively, you may want to consider patching \fIlib/deprecate.pm\fR
to provide deprecation warnings specific to your packaging system
or distribution of Perl, consistent with how your packaging system
or distribution manages a staged transition from a release where the
installation of a single package provides the given functionality, to
a later release where the system administrator needs to know to install
multiple packages to get that same functionality.
.PP
You can silence these deprecation warnings by installing the module
in question from \s-1CPAN. \s0 To install the latest version of it by role
rather than by name, just install \f(CW\*(C`Task::Deprecations::5_14\*(C'\fR.
.IP "Devel::DProf" 4
.IX Item "Devel::DProf"
We strongly recommend that you install and use Devel::NYTProf instead
of Devel::DProf, as Devel::NYTProf offers significantly
improved profiling and reporting.
.SH "Performance Enhancements"
.IX Header "Performance Enhancements"
.ie n .SS """Safe signals"" optimisation"
.el .SS "``Safe signals'' optimisation"
.IX Subsection "Safe signals optimisation"
Signal dispatch has been moved from the runloop into control ops.
This should give a few percent speed increase, and eliminates nearly
all the speed penalty caused by the introduction of \*(L"safe signals\*(R"
in 5.8.0.  Signals should still be dispatched within the same
statement as they were previously.  If this does \fInot\fR happen, or
if you find it possible to create uninterruptible loops, this is a
bug, and reports are encouraged of how to recreate such issues.
.SS "Optimisation of \fIshift()\fP and \fIpop()\fP calls without arguments"
.IX Subsection "Optimisation of shift() and pop() calls without arguments"
Two fewer OPs are used for \fIshift()\fR and \fIpop()\fR calls with no argument (with
implicit \f(CW@_\fR).  This change makes \fIshift()\fR 5% faster than \f(CW\*(C`shift @_\*(C'\fR
on non-threaded perls, and 25% faster on threaded ones.
.SS "Optimisation of regexp engine string comparison work"
.IX Subsection "Optimisation of regexp engine string comparison work"
The \f(CW\*(C`foldEQ_utf8\*(C'\fR \s-1API\s0 function for case-insensitive comparison of strings (which
is used heavily by the regexp engine) was substantially refactored and
optimised \*(-- and its documentation much improved as a free bonus.
.SS "Regular expression compilation speed-up"
.IX Subsection "Regular expression compilation speed-up"
Compiling regular expressions has been made faster when upgrading
the regex to utf8 is necessary but this isn't known when the compilation begins.
.SS "String appending is 100 times faster"
.IX Subsection "String appending is 100 times faster"
When doing a lot of string appending, perls built to use the system's
\&\f(CW\*(C`malloc\*(C'\fR could end up allocating a lot more memory than needed in a
inefficient way.
.PP
\&\f(CW\*(C`sv_grow\*(C'\fR, the function used to allocate more memory if necessary
when appending to a string, has been taught to round up the memory
it requests to a certain geometric progression, making it much faster on
certain platforms and configurations.  On Win32, it's now about 100 times
faster.
.ie n .SS "Eliminate ""PL_*"" accessor functions under ithreads"
.el .SS "Eliminate \f(CWPL_*\fP accessor functions under ithreads"
.IX Subsection "Eliminate PL_* accessor functions under ithreads"
When \f(CW\*(C`MULTIPLICITY\*(C'\fR was first developed, and interpreter state moved into
an interpreter struct, thread\- and interpreter-local \f(CW\*(C`PL_*\*(C'\fR variables
were defined as macros that called accessor functions (returning the
address of the value) outside the Perl core.  The intent was to allow
members within the interpreter struct to change size without breaking
binary compatibility, so that bug fixes could be merged to a maintenance
branch that necessitated such a size change.  This mechanism was redundant
and penalised well-behaved code.  It has been removed.
.SS "Freeing weak references"
.IX Subsection "Freeing weak references"
When there are many weak references to an object, freeing that object
can under some circumstances take O(\fIN*N\fR) time to free, where
\&\fIN\fR is the number of references.  The circumstances in which this can happen
have been reduced [perl #75254]
.SS "Lexical array and hash assignments"
.IX Subsection "Lexical array and hash assignments"
An earlier optimisation to speed up \f(CW\*(C`my @array = ...\*(C'\fR and
\&\f(CW\*(C`my %hash = ...\*(C'\fR assignments caused a bug and was disabled in Perl 5.12.0.
.PP
Now we have found another way to speed up these assignments [perl #82110].
.ie n .SS "@_ uses less memory"
.el .SS "\f(CW@_\fP uses less memory"
.IX Subsection "@_ uses less memory"
Previously, \f(CW@_\fR was allocated for every subroutine at compile time with
enough space for four entries.  Now this allocation is done on demand when
the subroutine is called [perl #72416].
.SS "Size optimisations to \s-1SV\s0 and \s-1HV\s0 structures"
.IX Subsection "Size optimisations to SV and HV structures"
\&\f(CW\*(C`xhv_fill\*(C'\fR has been eliminated from \f(CW\*(C`struct xpvhv\*(C'\fR, saving 1 \s-1IV\s0 per hash and
on some systems will cause \f(CW\*(C`struct xpvhv\*(C'\fR to become cache-aligned.  To avoid
this memory saving causing a slowdown elsewhere, boolean use of \f(CW\*(C`HvFILL\*(C'\fR
now calls \f(CW\*(C`HvTOTALKEYS\*(C'\fR instead (which is equivalent), so while the fill
data when actually required are now calculated on demand, cases when
this needs to be done should be rare.
.PP
The order of structure elements in \s-1SV\s0 bodies has changed.  Effectively,
the \s-1NV\s0 slot has swapped location with \s-1STASH\s0 and \s-1MAGIC. \s0 As all access to
\&\s-1SV\s0 members is via macros, this should be completely transparent.  This
change allows the space saving for PVHVs documented above, and may reduce
the memory allocation needed for PVIVs on some architectures.
.PP
\&\f(CW\*(C`XPV\*(C'\fR, \f(CW\*(C`XPVIV\*(C'\fR, and \f(CW\*(C`XPVNV\*(C'\fR now allocate only the parts of the \f(CW\*(C`SV\*(C'\fR body
they actually use, saving some space.
.PP
Scalars containing regular expressions now allocate only the part of the \f(CW\*(C`SV\*(C'\fR
body they actually use, saving some space.
.SS "Memory consumption improvements to Exporter"
.IX Subsection "Memory consumption improvements to Exporter"
The \f(CW@EXPORT_FAIL\fR \s-1AV\s0 is no longer created unless needed, hence neither is
the typeglob backing it.  This saves about 200 bytes for every package that
uses Exporter but doesn't use this functionality.
.SS "Memory savings for weak references"
.IX Subsection "Memory savings for weak references"
For weak references, the common case of just a single weak reference
per referent has been optimised to reduce the storage required.  In this
case it saves the equivalent of one small Perl array per referent.
.ie n .SS """%+"" and ""%\-"" use less memory"
.el .SS "\f(CW%+\fP and \f(CW%\-\fP use less memory"
.IX Subsection "%+ and %- use less memory"
The bulk of the \f(CW\*(C`Tie::Hash::NamedCapture\*(C'\fR module used to be in the Perl
core.  It has now been moved to an \s-1XS\s0 module to reduce overhead for
programs that do not use \f(CW\*(C`%+\*(C'\fR or \f(CW\*(C`%\-\*(C'\fR.
.SS "Multiple small improvements to threads"
.IX Subsection "Multiple small improvements to threads"
The internal structures of threading now make fewer \s-1API\s0 calls and fewer
allocations, resulting in noticeably smaller object code.  Additionally,
many thread context checks have been deferred so they're done only 
as needed (although this is only possible for non-debugging builds).
.SS "Adjacent pairs of nextstate opcodes are now optimized away"
.IX Subsection "Adjacent pairs of nextstate opcodes are now optimized away"
Previously, in code such as
.PP
.Vb 1
\&    use constant DEBUG => 0;
\&
\&    sub GAK {
\&        warn if DEBUG;
\&        print "stuff\en";
\&    }
.Ve
.PP
the ops for \f(CW\*(C`warn if DEBUG\*(C'\fR would be folded to a \f(CW\*(C`null\*(C'\fR op (\f(CW\*(C`ex\-const\*(C'\fR), but
the \f(CW\*(C`nextstate\*(C'\fR op would remain, resulting in a runtime op dispatch of
\&\f(CW\*(C`nextstate\*(C'\fR, \f(CW\*(C`nextstate\*(C'\fR, etc.
.PP
The execution of a sequence of \f(CW\*(C`nextstate\*(C'\fR ops is indistinguishable from just
the last \f(CW\*(C`nextstate\*(C'\fR op so the peephole optimizer now eliminates the first of
a pair of \f(CW\*(C`nextstate\*(C'\fR ops except when the first carries a label, since labels
must not be eliminated by the optimizer, and label usage isn't conclusively known
at compile time.
.SH "Modules and Pragmata"
.IX Header "Modules and Pragmata"
.SS "New Modules and Pragmata"
.IX Subsection "New Modules and Pragmata"
.IP "\(bu" 4
CPAN::Meta::YAML 0.003 has been added as a dual-life module.  It supports a
subset of \s-1YAML\s0 sufficient for reading and writing \fI\s-1META\s0.yml\fR and \fI\s-1MYMETA\s0.yml\fR files
included with \s-1CPAN\s0 distributions or generated by the module installation
toolchain.  It should not be used for any other general \s-1YAML\s0 parsing or
generation task.
.IP "\(bu" 4
CPAN::Meta version 2.110440 has been added as a dual-life module.  It
provides a standard library to read, interpret and write \s-1CPAN\s0 distribution
metadata files (like \fI\s-1META\s0.json\fR and \fI\s-1META\s0.yml\fR) that describe a
distribution, its contents, and the requirements for building it and
installing it.  The latest \s-1CPAN\s0 distribution metadata specification is
included as CPAN::Meta::Spec and notes on changes in the specification
over time are given in CPAN::Meta::History.
.IP "\(bu" 4
HTTP::Tiny 0.012 has been added as a dual-life module.  It is a very
small, simple \s-1HTTP/1.1\s0 client designed for simple \s-1GET\s0 requests and file
mirroring.  It has been added so that \fI\s-1CPAN\s0.pm\fR and \s-1CPANPLUS\s0 can
\&\*(L"bootstrap\*(R" \s-1HTTP\s0 access to \s-1CPAN\s0 using pure Perl without relying on external
binaries like \fIcurl\fR\|(1) or \fIwget\fR\|(1).
.IP "\(bu" 4
\&\s-1JSON::PP\s0 2.27105 has been added as a dual-life module to allow \s-1CPAN\s0
clients to read \fI\s-1META\s0.json\fR files in \s-1CPAN\s0 distributions.
.IP "\(bu" 4
Module::Metadata 1.000004 has been added as a dual-life module.  It gathers
package and \s-1POD\s0 information from Perl module files.  It is a standalone module
based on Module::Build::ModuleInfo for use by other module installation
toolchain components.  Module::Build::ModuleInfo has been deprecated in
favor of this module instead.
.IP "\(bu" 4
Perl::OSType 1.002 has been added as a dual-life module.  It maps Perl
operating system names (like \*(L"dragonfly\*(R" or \*(L"MSWin32\*(R") to more generic types
with standardized names (like \*(L"Unix\*(R" or \*(L"Windows\*(R").  It has been refactored
out of Module::Build and ExtUtils::CBuilder and consolidates such mappings into
a single location for easier maintenance.
.IP "\(bu" 4
The following modules were added by the Unicode::Collate 
upgrade.  See below for details.
.Sp
Unicode::Collate::CJK::Big5
.Sp
Unicode::Collate::CJK::GB2312
.Sp
Unicode::Collate::CJK::JISX0208
.Sp
Unicode::Collate::CJK::Korean
.Sp
Unicode::Collate::CJK::Pinyin
.Sp
Unicode::Collate::CJK::Stroke
.IP "\(bu" 4
Version::Requirements version 0.101020 has been added as a dual-life
module.  It provides a standard library to model and manipulates module
prerequisites and version constraints defined in CPAN::Meta::Spec.
.SS "Updated Modules and Pragma"
.IX Subsection "Updated Modules and Pragma"
.IP "\(bu" 4
attributes has been upgraded from version 0.12 to 0.14.
.IP "\(bu" 4
Archive::Extract has been upgraded from version 0.38 to 0.48.
.Sp
Updates since 0.38 include: a safe print method that guards
Archive::Extract from changes to \f(CW\*(C`$\e\*(C'\fR; a fix to the tests when run in core
Perl; support for \s-1TZ\s0 files; a modification for the lzma
logic to favour IO::Uncompress::Unlzma; and a fix
for an issue with NetBSD-current and its new \fIunzip\fR\|(1)
executable.
.IP "\(bu" 4
Archive::Tar has been upgraded from version 1.54 to 1.76.
.Sp
Important changes since 1.54 include the following:
.RS 4
.IP "\(bu" 4
Compatibility with busybox implementations of \fItar\fR\|(1).
.IP "\(bu" 4
A fix so that \fIwrite()\fR and \fIcreate_archive()\fR
close only filehandles they themselves opened.
.IP "\(bu" 4
A bug was fixed regarding the exit code of extract_archive.
.IP "\(bu" 4
The \fIptar\fR\|(1) utility has a new option to allow safe creation of
tarballs without world-writable files on Windows, allowing those
archives to be uploaded to \s-1CPAN.\s0
.IP "\(bu" 4
A new \fIptargrep\fR\|(1) utility for using regular expressions against 
the contents of files in a tar archive.
.IP "\(bu" 4
pax extended headers are now skipped.
.RE
.RS 4
.RE
.IP "\(bu" 4
Attribute::Handlers has been upgraded from version 0.87 to 0.89.
.IP "\(bu" 4
autodie has been upgraded from version 2.06_01 to 2.1001.
.IP "\(bu" 4
AutoLoader has been upgraded from version 5.70 to 5.71.
.IP "\(bu" 4
The B module has been upgraded from version 1.23 to 1.29.
.Sp
It no longer crashes when taking apart a \f(CW\*(C`y///\*(C'\fR containing characters
outside the octet range or compiled in a \f(CW\*(C`use utf8\*(C'\fR scope.
.Sp
The size of the shared object has been reduced by about 40%, with no
reduction in functionality.
.IP "\(bu" 4
B::Concise has been upgraded from version 0.78 to 0.83.
.Sp
B::Concise marks \fIrv2sv()\fR, \fIrv2av()\fR, and \fIrv2hv()\fR ops with the new
\&\f(CW\*(C`OPpDEREF\*(C'\fR flag as \*(L"DREFed\*(R".
.Sp
It no longer produces mangled output with the \fB\-tree\fR option
[perl #80632].
.IP "\(bu" 4
B::Debug has been upgraded from version 1.12 to 1.16.
.IP "\(bu" 4
B::Deparse has been upgraded from version 0.96 to 1.03.
.Sp
The deparsing of a \f(CW\*(C`nextstate\*(C'\fR op has changed when it has both a
change of package relative to the previous nextstate, or a change of
\&\f(CW\*(C`%^H\*(C'\fR or other state and a label.  The label was previously emitted
first, but is now emitted last (5.12.1).
.Sp
The \f(CW\*(C`no 5.13.2\*(C'\fR or similar form is now correctly handled by B::Deparse
(5.12.3).
.Sp
B::Deparse now properly handles the code that applies a conditional
pattern match against implicit \f(CW$_\fR as it was fixed in [perl #20444].
.Sp
Deparsing of \f(CW\*(C`our\*(C'\fR followed by a variable with funny characters
(as permitted under the \f(CW\*(C`use utf8\*(C'\fR pragma) has also been fixed [perl #33752].
.IP "\(bu" 4
B::Lint has been upgraded from version 1.11_01 to 1.13.
.IP "\(bu" 4
base has been upgraded from version 2.15 to 2.16.
.IP "\(bu" 4
Benchmark has been upgraded from version 1.11 to 1.12.
.IP "\(bu" 4
bignum has been upgraded from version 0.23 to 0.27.
.IP "\(bu" 4
Carp has been upgraded from version 1.15 to 1.20.
.Sp
Carp now detects incomplete \fIcaller()\fR
overrides and avoids using bogus \f(CW@DB::args\fR.  To provide backtraces,
Carp relies on particular behaviour of the \fIcaller()\fR builtin.
Carp now detects if other code has overridden this with an
incomplete implementation, and modifies its backtrace accordingly.
Previously incomplete overrides would cause incorrect values in
backtraces (best case), or obscure fatal errors (worst case).
.Sp
This fixes certain cases of \*(L"Bizarre copy of \s-1ARRAY\*(R"\s0 caused by modules
overriding \fIcaller()\fR incorrectly (5.12.2).
.Sp
It now also avoids using regular expressions that cause Perl to
load its Unicode tables, so as to avoid the \*(L"\s-1BEGIN\s0 not safe after
errors\*(R" error that ensue if there has been a syntax error
[perl #82854].
.IP "\(bu" 4
\&\s-1CGI\s0 has been upgraded from version 3.48 to 3.52.
.Sp
This provides the following security fixes: the \s-1MIME\s0 boundary in 
\&\fImultipart_init()\fR is now random and the handling of 
newlines embedded in header values has been improved.
.IP "\(bu" 4
Compress::Raw::Bzip2 has been upgraded from version 2.024 to 2.033.
.Sp
It has been updated to use \fIbzip2\fR\|(1) 1.0.6.
.IP "\(bu" 4
Compress::Raw::Zlib has been upgraded from version 2.024 to 2.033.
.IP "\(bu" 4
constant has been upgraded from version 1.20 to 1.21.
.Sp
Unicode constants work once more.  They have been broken since Perl 5.10.0
[\s-1CPAN RT\s0 #67525].
.IP "\(bu" 4
\&\s-1CPAN\s0 has been upgraded from version 1.94_56 to 1.9600.
.Sp
Major highlights:
.RS 4
.IP "\(bu" 4
much less configuration dialog hassle
.IP "\(bu" 4
support for \fI\s-1META/MYMETA\s0.json\fR
.IP "\(bu" 4
support for local::lib
.IP "\(bu" 4
support for HTTP::Tiny to reduce the dependency on \s-1FTP\s0 sites
.IP "\(bu" 4
automatic mirror selection
.IP "\(bu" 4
iron out all known bugs in configure_requires
.IP "\(bu" 4
support for distributions compressed with \fIbzip2\fR\|(1)
.IP "\(bu" 4
allow \fIFoo/Bar.pm\fR on the command line to mean \f(CW\*(C`Foo::Bar\*(C'\fR
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\s-1CPANPLUS\s0 has been upgraded from version 0.90 to 0.9103.
.Sp
A change to \fIcpanp-run-perl\fR
resolves \s-1RT\s0 #55964 <http://rt.cpan.org/Public/Bug/Display.html?id=55964>
and \s-1RT\s0 #57106 <http://rt.cpan.org/Public/Bug/Display.html?id=57106>, both
of which related to failures to install distributions that use
\&\f(CW\*(C`Module::Install::DSL\*(C'\fR (5.12.2).
.Sp
A dependency on Config was not recognised as a
core module dependency.  This has been fixed.
.Sp
\&\s-1CPANPLUS\s0 now includes support for \fI\s-1META\s0.json\fR and \fI\s-1MYMETA\s0.json\fR.
.IP "\(bu" 4
CPANPLUS::Dist::Build has been upgraded from version 0.46 to 0.54.
.IP "\(bu" 4
Data::Dumper has been upgraded from version 2.125 to 2.130_02.
.Sp
The indentation used to be off when \f(CW$Data::Dumper::Terse\fR was set.  This
has been fixed [perl #73604].
.Sp
This upgrade also fixes a crash when using custom sort functions that might
cause the stack to change [perl #74170].
.Sp
Dumpxs no longer crashes with globs returned by \f(CW*$io_ref\fR
[perl #72332].
.IP "\(bu" 4
DB_File has been upgraded from version 1.820 to 1.821.
.IP "\(bu" 4
DBM_Filter has been upgraded from version 0.03 to 0.04.
.IP "\(bu" 4
Devel::DProf has been upgraded from version 20080331.00 to 20110228.00.
.Sp
Merely loading Devel::DProf now no longer triggers profiling to start.
Both \f(CW\*(C`use Devel::DProf\*(C'\fR and \f(CW\*(C`perl \-d:DProf ...\*(C'\fR behave as before and start
the profiler.
.Sp
\&\fB\s-1NOTE\s0\fR: Devel::DProf is deprecated and will be removed from a future
version of Perl.  We strongly recommend that you install and use
Devel::NYTProf instead, as it offers significantly improved
profiling and reporting.
.IP "\(bu" 4
Devel::Peek has been upgraded from version 1.04 to 1.07.
.IP "\(bu" 4
Devel::SelfStubber has been upgraded from version 1.03 to 1.05.
.IP "\(bu" 4
diagnostics has been upgraded from version 1.19 to 1.22.
.Sp
It now renders pod links slightly better, and has been taught to find
descriptions for messages that share their descriptions with other
messages.
.IP "\(bu" 4
Digest::MD5 has been upgraded from version 2.39 to 2.51.
.Sp
It is now safe to use this module in combination with threads.
.IP "\(bu" 4
Digest::SHA has been upgraded from version 5.47 to 5.61.
.Sp
\&\f(CW\*(C`shasum\*(C'\fR now more closely mimics \fIsha1sum\fR\|(1)/\fImd5sum\fR\|(1).
.Sp
\&\f(CW\*(C`addfile\*(C'\fR accepts all \s-1POSIX\s0 filenames.
.Sp
New \s-1SHA\-512/224\s0 and \s-1SHA\-512/256\s0 transforms (ref. \s-1NIST\s0 Draft \s-1FIPS 180\-4\s0
[February 2011])
.IP "\(bu" 4
DirHandle has been upgraded from version 1.03 to 1.04.
.IP "\(bu" 4
Dumpvalue has been upgraded from version 1.13 to 1.16.
.IP "\(bu" 4
DynaLoader has been upgraded from version 1.10 to 1.13.
.Sp
It fixes a buffer overflow when passed a very long file name.
.Sp
It no longer inherits from AutoLoader; hence it no longer
produces weird error messages for unsuccessful method calls on classes that
inherit from DynaLoader [perl #84358].
.IP "\(bu" 4
Encode has been upgraded from version 2.39 to 2.42.
.Sp
Now, all 66 Unicode non-characters are treated the same way U+FFFF has
always been treated: in cases when it was disallowed, all 66 are
disallowed, and in cases where it warned, all 66 warn.
.IP "\(bu" 4
Env has been upgraded from version 1.01 to 1.02.
.IP "\(bu" 4
Errno has been upgraded from version 1.11 to 1.13.
.Sp
The implementation of Errno has been refactored to use about 55% less memory.
.Sp
On some platforms with unusual header files, like Win32 \fIgcc\fR\|(1) using \f(CW\*(C`mingw64\*(C'\fR
headers, some constants that weren't actually error numbers have been exposed
by Errno.  This has been fixed [perl #77416].
.IP "\(bu" 4
Exporter has been upgraded from version 5.64_01 to 5.64_03.
.Sp
Exporter no longer overrides \f(CW$SIG{_\|_WARN_\|_}\fR [perl #74472]
.IP "\(bu" 4
ExtUtils::CBuilder has been upgraded from version 0.27 to 0.280203.
.IP "\(bu" 4
ExtUtils::Command has been upgraded from version 1.16 to 1.17.
.IP "\(bu" 4
ExtUtils::Constant has been upgraded from 0.22 to 0.23.
.Sp
The \s-1AUTOLOAD\s0 helper code generated by \f(CW\*(C`ExtUtils::Constant::ProxySubs\*(C'\fR
can now \fIcroak()\fR for missing constants, or generate a complete \f(CW\*(C`AUTOLOAD\*(C'\fR
subroutine in \s-1XS,\s0 allowing simplification of many modules that use it
(Fcntl, File::Glob, GDBM_File, I18N::Langinfo, \s-1POSIX\s0,
Socket).
.Sp
ExtUtils::Constant::ProxySubs can now optionally push the names of all
constants onto the package's \f(CW@EXPORT_OK\fR.
.IP "\(bu" 4
ExtUtils::Install has been upgraded from version 1.55 to 1.56.
.IP "\(bu" 4
ExtUtils::MakeMaker has been upgraded from version 6.56 to 6.57_05.
.IP "\(bu" 4
ExtUtils::Manifest has been upgraded from version 1.57 to 1.58.
.IP "\(bu" 4
ExtUtils::ParseXS has been upgraded from version 2.21 to 2.2210.
.IP "\(bu" 4
Fcntl has been upgraded from version 1.06 to 1.11.
.IP "\(bu" 4
File::Basename has been upgraded from version 2.78 to 2.82.
.IP "\(bu" 4
File::CheckTree has been upgraded from version 4.4 to 4.41.
.IP "\(bu" 4
File::Copy has been upgraded from version 2.17 to 2.21.
.IP "\(bu" 4
File::DosGlob has been upgraded from version 1.01 to 1.04.
.Sp
It allows patterns containing literal parentheses: they no longer need to
be escaped.  On Windows, it no longer
adds an extra \fI./\fR to file names
returned when the pattern is a relative glob with a drive specification,
like \fIC:*.pl\fR [perl #71712].
.IP "\(bu" 4
File::Fetch has been upgraded from version 0.24 to 0.32.
.Sp
HTTP::Lite is now supported for the \*(L"http\*(R" scheme.
.Sp
The \fIfetch\fR\|(1) utility is supported on FreeBSD, NetBSD, and
Dragonfly \s-1BSD\s0 for the \f(CW\*(C`http\*(C'\fR and \f(CW\*(C`ftp\*(C'\fR schemes.
.IP "\(bu" 4
File::Find has been upgraded from version 1.15 to 1.19.
.Sp
It improves handling of backslashes on Windows, so that paths like
\&\fIC:\edir\e/file\fR are no longer generated [perl #71710].
.IP "\(bu" 4
File::Glob has been upgraded from version 1.07 to 1.12.
.IP "\(bu" 4
File::Spec has been upgraded from version 3.31 to 3.33.
.Sp
Several portability fixes were made in File::Spec::VMS: a colon is now
recognized as a delimiter in native filespecs; caret-escaped delimiters are
recognized for better handling of extended filespecs; \fIcatpath()\fR returns
an empty directory rather than the current directory if the input directory
name is empty; and \fIabs2rel()\fR properly handles Unix-style input (5.12.2).
.IP "\(bu" 4
File::stat has been upgraded from 1.02 to 1.05.
.Sp
The \f(CW\*(C`\-x\*(C'\fR and \f(CW\*(C`\-X\*(C'\fR file test operators now work correctly when run
by the superuser.
.IP "\(bu" 4
Filter::Simple has been upgraded from version 0.84 to 0.86.
.IP "\(bu" 4
GDBM_File has been upgraded from 1.10 to 1.14.
.Sp
This fixes a memory leak when \s-1DBM\s0 filters are used.
.IP "\(bu" 4
Hash::Util has been upgraded from 0.07 to 0.11.
.Sp
Hash::Util no longer emits spurious \*(L"uninitialized\*(R" warnings when
recursively locking hashes that have undefined values [perl #74280].
.IP "\(bu" 4
Hash::Util::FieldHash has been upgraded from version 1.04 to 1.09.
.IP "\(bu" 4
I18N::Collate has been upgraded from version 1.01 to 1.02.
.IP "\(bu" 4
I18N::Langinfo has been upgraded from version 0.03 to 0.08.
.Sp
\&\fIlanginfo()\fR now defaults to using \f(CW$_\fR if there is no argument given, just
as the documentation has always claimed.
.IP "\(bu" 4
I18N::LangTags has been upgraded from version 0.35 to 0.35_01.
.IP "\(bu" 4
if has been upgraded from version 0.05 to 0.0601.
.IP "\(bu" 4
\&\s-1IO\s0 has been upgraded from version 1.25_02 to 1.25_04.
.Sp
This version of \s-1IO\s0 includes a new IO::Select, which now allows IO::Handle
objects (and objects in derived classes) to be removed from an IO::Select set
even if the underlying file descriptor is closed or invalid.
.IP "\(bu" 4
IPC::Cmd has been upgraded from version 0.54 to 0.70.
.Sp
Resolves an issue with splitting Win32 command lines.  An argument
consisting of the single character \*(L"0\*(R" used to be omitted (\s-1CPAN RT\s0 #62961).
.IP "\(bu" 4
IPC::Open3 has been upgraded from 1.05 to 1.09.
.Sp
\&\fIopen3()\fR now produces an error if the \f(CW\*(C`exec\*(C'\fR call fails, allowing this
condition to be distinguished from a child process that exited with a
non-zero status [perl #72016].
.Sp
The internal \fIxclose()\fR routine now knows how to handle file descriptors as
documented, so duplicating \f(CW\*(C`STDIN\*(C'\fR in a child process using its file
descriptor now works [perl #76474].
.IP "\(bu" 4
IPC::SysV has been upgraded from version 2.01 to 2.03.
.IP "\(bu" 4
lib has been upgraded from version 0.62 to 0.63.
.IP "\(bu" 4
Locale::Maketext has been upgraded from version 1.14 to 1.19.
.Sp
Locale::Maketext now supports external caches.
.Sp
This upgrade also fixes an infinite loop in
\&\f(CW\*(C`Locale::Maketext::Guts::_compile()\*(C'\fR when
working with tainted values (\s-1CPAN RT\s0 #40727).
.Sp
\&\f(CW\*(C`\->maketext\*(C'\fR calls now back up and restore \f(CW$@\fR so error
messages are not suppressed (\s-1CPAN RT\s0 #34182).
.IP "\(bu" 4
Log::Message has been upgraded from version 0.02 to 0.04.
.IP "\(bu" 4
Log::Message::Simple has been upgraded from version 0.06 to 0.08.
.IP "\(bu" 4
Math::BigInt has been upgraded from version 1.89_01 to 1.994.
.Sp
This fixes, among other things, incorrect results when computing binomial
coefficients [perl #77640].
.Sp
It also prevents \f(CW\*(C`sqrt($int)\*(C'\fR from crashing under \f(CW\*(C`use bigrat\*(C'\fR.
[perl #73534].
.IP "\(bu" 4
Math::BigInt::FastCalc has been upgraded from version 0.19 to 0.28.
.IP "\(bu" 4
Math::BigRat has been upgraded from version 0.24 to 0.26_02.
.IP "\(bu" 4
Memoize has been upgraded from version 1.01_03 to 1.02.
.IP "\(bu" 4
MIME::Base64 has been upgraded from 3.08 to 3.13.
.Sp
Includes new functions to calculate the length of encoded and decoded
base64 strings.
.Sp
Now provides \fIencode_base64url()\fR and \fIdecode_base64url()\fR functions to process
the base64 scheme for \*(L"\s-1URL\s0 applications\*(R".
.IP "\(bu" 4
Module::Build has been upgraded from version 0.3603 to 0.3800.
.Sp
A notable change is the deprecation of several modules.
Module::Build::Version has been deprecated and Module::Build now
relies on the version pragma directly.  Module::Build::ModuleInfo has
been deprecated in favor of a standalone copy called Module::Metadata.
Module::Build::YAML has been deprecated in favor of CPAN::Meta::YAML.
.Sp
Module::Build now also generates \fI\s-1META\s0.json\fR and \fI\s-1MYMETA\s0.json\fR files
in accordance with version 2 of the \s-1CPAN\s0 distribution metadata specification,
CPAN::Meta::Spec.  The older format \fI\s-1META\s0.yml\fR and \fI\s-1MYMETA\s0.yml\fR files are
still generated.
.IP "\(bu" 4
Module::CoreList has been upgraded from version 2.29 to 2.47.
.Sp
Besides listing the updated core modules of this release, it also stops listing
the \f(CW\*(C`Filespec\*(C'\fR module.  That module never existed in core.  The scripts
generating Module::CoreList confused it with VMS::Filespec, which actually
is a core module as of Perl 5.8.7.
.IP "\(bu" 4
Module::Load has been upgraded from version 0.16 to 0.18.
.IP "\(bu" 4
Module::Load::Conditional has been upgraded from version 0.34 to 0.44.
.IP "\(bu" 4
The mro pragma has been upgraded from version 1.02 to 1.07.
.IP "\(bu" 4
NDBM_File has been upgraded from version 1.08 to 1.12.
.Sp
This fixes a memory leak when \s-1DBM\s0 filters are used.
.IP "\(bu" 4
Net::Ping has been upgraded from version 2.36 to 2.38.
.IP "\(bu" 4
\&\s-1NEXT\s0 has been upgraded from version 0.64 to 0.65.
.IP "\(bu" 4
Object::Accessor has been upgraded from version 0.36 to 0.38.
.IP "\(bu" 4
ODBM_File has been upgraded from version 1.07 to 1.10.
.Sp
This fixes a memory leak when \s-1DBM\s0 filters are used.
.IP "\(bu" 4
Opcode has been upgraded from version 1.15 to 1.18.
.IP "\(bu" 4
The overload pragma has been upgraded from 1.10 to 1.13.
.Sp
\&\f(CW\*(C`overload::Method\*(C'\fR can now handle subroutines that are themselves blessed
into overloaded classes [perl #71998].
.Sp
The documentation has greatly improved.  See \*(L"Documentation\*(R" below.
.IP "\(bu" 4
Params::Check has been upgraded from version 0.26 to 0.28.
.IP "\(bu" 4
The parent pragma has been upgraded from version 0.223 to 0.225.
.IP "\(bu" 4
Parse::CPAN::Meta has been upgraded from version 1.40 to 1.4401.
.Sp
The latest Parse::CPAN::Meta can now read \s-1YAML\s0 and \s-1JSON\s0 files using
CPAN::Meta::YAML and \s-1JSON::PP\s0, which are now part of the Perl core.
.IP "\(bu" 4
PerlIO::encoding has been upgraded from version 0.12 to 0.14.
.IP "\(bu" 4
PerlIO::scalar has been upgraded from 0.07 to 0.11.
.Sp
A \fIread()\fR after a \fIseek()\fR beyond the end of the string no longer thinks it
has data to read [perl #78716].
.IP "\(bu" 4
PerlIO::via has been upgraded from version 0.09 to 0.11.
.IP "\(bu" 4
Pod::Html has been upgraded from version 1.09 to 1.11.
.IP "\(bu" 4
Pod::LaTeX has been upgraded from version 0.58 to 0.59.
.IP "\(bu" 4
Pod::Perldoc has been upgraded from version 3.15_02 to 3.15_03.
.IP "\(bu" 4
Pod::Simple has been upgraded from version 3.13 to 3.16.
.IP "\(bu" 4
\&\s-1POSIX\s0 has been upgraded from 1.19 to 1.24.
.Sp
It now includes constants for \s-1POSIX\s0 signal constants.
.IP "\(bu" 4
The re pragma has been upgraded from version 0.11 to 0.18.
.Sp
The \f(CW\*(C`use re \*(Aq/flags\*(Aq\*(C'\fR subpragma is new.
.Sp
The \fIregmust()\fR function used to crash when called on a regular expression
belonging to a pluggable engine.  Now it croaks instead.
.Sp
\&\fIregmust()\fR no longer leaks memory.
.IP "\(bu" 4
Safe has been upgraded from version 2.25 to 2.29.
.Sp
Coderefs returned by \fIreval()\fR and \fIrdo()\fR are now wrapped via
\&\fIwrap_code_refs()\fR (5.12.1).
.Sp
This fixes a possible infinite loop when looking for coderefs.
.Sp
It adds several \f(CW\*(C`version::vxs::*\*(C'\fR routines to the default share.
.IP "\(bu" 4
SDBM_File has been upgraded from version 1.06 to 1.09.
.IP "\(bu" 4
SelfLoader has been upgraded from 1.17 to 1.18.
.Sp
It now works in taint mode [perl #72062].
.IP "\(bu" 4
The sigtrap pragma has been upgraded from version 1.04 to 1.05.
.Sp
It no longer tries to modify read-only arguments when generating a
backtrace [perl #72340].
.IP "\(bu" 4
Socket has been upgraded from version 1.87 to 1.94.
.Sp
See \*(L"Improved IPv6 support\*(R" above.
.IP "\(bu" 4
Storable has been upgraded from version 2.22 to 2.27.
.Sp
Includes performance improvement for overloaded classes.
.Sp
This adds support for serialising code references that contain \s-1UTF\-8\s0 strings
correctly.  The Storable minor version
number changed as a result, meaning that
Storable users who set \f(CW$Storable::accept_future_minor\fR to a \f(CW\*(C`FALSE\*(C'\fR value
will see errors (see \*(L"\s-1FORWARD COMPATIBILITY\*(R"\s0 in Storable for more details).
.Sp
Freezing no longer gets confused if the Perl stack gets reallocated
during freezing [perl #80074].
.IP "\(bu" 4
Sys::Hostname has been upgraded from version 1.11 to 1.16.
.IP "\(bu" 4
Term::ANSIColor has been upgraded from version 2.02 to 3.00.
.IP "\(bu" 4
Term::UI has been upgraded from version 0.20 to 0.26.
.IP "\(bu" 4
Test::Harness has been upgraded from version 3.17 to 3.23.
.IP "\(bu" 4
Test::Simple has been upgraded from version 0.94 to 0.98.
.Sp
Among many other things, subtests without a \f(CW\*(C`plan\*(C'\fR or \f(CW\*(C`no_plan\*(C'\fR now have an
implicit \fIdone_testing()\fR added to them.
.IP "\(bu" 4
Thread::Semaphore has been upgraded from version 2.09 to 2.12.
.Sp
It provides two new methods that give more control over the decrementing of
semaphores: \f(CW\*(C`down_nb\*(C'\fR and \f(CW\*(C`down_force\*(C'\fR.
.IP "\(bu" 4
Thread::Queue has been upgraded from version 2.11 to 2.12.
.IP "\(bu" 4
The threads pragma has been upgraded from version 1.75 to 1.83.
.IP "\(bu" 4
The threads::shared pragma has been upgraded from version 1.32 to 1.37.
.IP "\(bu" 4
Tie::Hash has been upgraded from version 1.03 to 1.04.
.Sp
Calling \f(CW\*(C`Tie::Hash\->TIEHASH()\*(C'\fR used to loop forever.  Now it \f(CW\*(C`croak\*(C'\fRs.
.IP "\(bu" 4
Tie::Hash::NamedCapture has been upgraded from version 0.06 to 0.08.
.IP "\(bu" 4
Tie::RefHash has been upgraded from version 1.38 to 1.39.
.IP "\(bu" 4
Time::HiRes has been upgraded from version 1.9719 to 1.9721_01.
.IP "\(bu" 4
Time::Local has been upgraded from version 1.1901_01 to 1.2000.
.IP "\(bu" 4
Time::Piece has been upgraded from version 1.15_01 to 1.20_01.
.IP "\(bu" 4
Unicode::Collate has been upgraded from version 0.52_01 to 0.73.
.Sp
Unicode::Collate has been updated to use Unicode 6.0.0.
.Sp
Unicode::Collate::Locale now supports a plethora of new locales: \fIar, be,
bg, de_\|_phonebook, hu, hy, kk, mk, nso, om, tn, vi, hr, ig, ja, ko, ru, sq, 
se, sr, to, uk, zh, zh_\|_big5han, zh_\|_gb2312han, zh_\|_pinyin\fR, and \fIzh_\|_stroke\fR.
.Sp
The following modules have been added:
.Sp
Unicode::Collate::CJK::Big5 for \f(CW\*(C`zh_\|_big5han\*(C'\fR which makes 
tailoring of \s-1CJK\s0 Unified Ideographs in the order of \s-1CLDR\s0's big5han ordering.
.Sp
Unicode::Collate::CJK::GB2312 for \f(CW\*(C`zh_\|_gb2312han\*(C'\fR which makes
tailoring of \s-1CJK\s0 Unified Ideographs in the order of \s-1CLDR\s0's gb2312han ordering.
.Sp
Unicode::Collate::CJK::JISX0208 which makes tailoring of 6355 kanji 
(\s-1CJK\s0 Unified Ideographs) in the \s-1JIS X 0208\s0 order.
.Sp
Unicode::Collate::CJK::Korean which makes tailoring of \s-1CJK\s0 Unified Ideographs 
in the order of \s-1CLDR\s0's Korean ordering.
.Sp
Unicode::Collate::CJK::Pinyin for \f(CW\*(C`zh_\|_pinyin\*(C'\fR which makes
tailoring of \s-1CJK\s0 Unified Ideographs in the order of \s-1CLDR\s0's pinyin ordering.
.Sp
Unicode::Collate::CJK::Stroke for \f(CW\*(C`zh_\|_stroke\*(C'\fR which makes
tailoring of \s-1CJK\s0 Unified Ideographs in the order of \s-1CLDR\s0's stroke ordering.
.Sp
This also sees the switch from using the pure-Perl version of this
module to the \s-1XS\s0 version.
.IP "\(bu" 4
Unicode::Normalize has been upgraded from version 1.03 to 1.10.
.IP "\(bu" 4
Unicode::UCD has been upgraded from version 0.27 to 0.32.
.Sp
A new function, \fIUnicode::UCD::num()\fR, has been added.  This function
returns the numeric value of the string passed it or \f(CW\*(C`undef\*(C'\fR if the string
in its entirety has no \*(L"safe\*(R" numeric value.  (For more detail, and for the
definition of \*(L"safe\*(R", see \*(L"\fInum()\fR\*(R" in Unicode::UCD.)
.Sp
This upgrade also includes several bug fixes:
.RS 4
.IP "\fIcharinfo()\fR" 4
.IX Item "charinfo()"
.RS 4
.PD 0
.IP "\(bu" 4
.PD
It is now updated to Unicode Version 6.0.0 with \fICorrigendum #8\fR, 
excepting that, just as with Perl 5.14, the code point at U+1F514 has no name.
.IP "\(bu" 4
Hangul syllable code points have the correct names, and their
decompositions are always output without requiring Lingua::KO::Hangul::Util
to be installed.
.IP "\(bu" 4
\&\s-1CJK \s0(Chinese-Japanese-Korean) code points U+2A700 to U+2B734
and U+2B740 to U+2B81D are now properly handled.
.IP "\(bu" 4
Numeric values are now output for those \s-1CJK\s0 code points that have them.
.IP "\(bu" 4
Names output for code points with multiple aliases are now the
corrected ones.
.RE
.RS 4
.RE
.IP "\fIcharscript()\fR" 4
.IX Item "charscript()"
This now correctly returns \*(L"Unknown\*(R" instead of \f(CW\*(C`undef\*(C'\fR for the script
of a code point that hasn't been assigned another one.
.IP "\fIcharblock()\fR" 4
.IX Item "charblock()"
This now correctly returns \*(L"No_Block\*(R" instead of \f(CW\*(C`undef\*(C'\fR for the block
of a code point that hasn't been assigned to another one.
.RE
.RS 4
.RE
.IP "\(bu" 4
The version pragma has been upgraded from 0.82 to 0.88.
.Sp
Because of a bug, now fixed, the \fIis_strict()\fR and \fIis_lax()\fR functions did not
work when exported (5.12.1).
.IP "\(bu" 4
The warnings pragma has been upgraded from version 1.09 to 1.12.
.Sp
Calling \f(CW\*(C`use warnings\*(C'\fR without arguments is now significantly more efficient.
.IP "\(bu" 4
The warnings::register pragma has been upgraded from version 1.01 to 1.02.
.Sp
It is now possible to register warning categories other than the names of
packages using warnings::register.  See \fIperllexwarn\fR\|(1) for more information.
.IP "\(bu" 4
XSLoader has been upgraded from version 0.10 to 0.13.
.IP "\(bu" 4
VMS::DCLsym has been upgraded from version 1.03 to 1.05.
.Sp
Two bugs have been fixed [perl #84086]:
.Sp
The symbol table name was lost when tying a hash, due to a thinko in
\&\f(CW\*(C`TIEHASH\*(C'\fR.  The result was that all tied hashes interacted with the
local symbol table.
.Sp
Unless a symbol table name had been explicitly specified in the call
to the constructor, querying the special key \f(CW\*(C`:LOCAL\*(C'\fR failed to
identify objects connected to the local symbol table.
.IP "\(bu" 4
The Win32 module has been upgraded from version 0.39 to 0.44.
.Sp
This release has several new functions: \fIWin32::GetSystemMetrics()\fR,
\&\fIWin32::GetProductInfo()\fR, \fIWin32::GetOSDisplayName()\fR.
.Sp
The names returned by \fIWin32::GetOSName()\fR and \fIWin32::GetOSDisplayName()\fR
have been corrected.
.IP "\(bu" 4
XS::Typemap has been upgraded from version 0.03 to 0.05.
.SS "Removed Modules and Pragmata"
.IX Subsection "Removed Modules and Pragmata"
As promised in Perl 5.12.0's release notes, the following modules have
been removed from the core distribution, and if needed should be installed
from \s-1CPAN\s0 instead.
.IP "\(bu" 4
Class::ISA has been removed from the Perl core.  Prior version was 0.36.
.IP "\(bu" 4
Pod::Plainer has been removed from the Perl core.  Prior version was 1.02.
.IP "\(bu" 4
Switch has been removed from the Perl core.  Prior version was 2.16.
.PP
The removal of Shell has been deferred until after 5.14, as the
implementation of Shell shipped with 5.12.0 did not correctly issue the
warning that it was to be removed from core.
.SH "Documentation"
.IX Header "Documentation"
.SS "New Documentation"
.IX Subsection "New Documentation"
\fIperlgpl\fR
.IX Subsection "perlgpl"
.PP
perlgpl has been updated to contain \s-1GPL\s0 version 1, as is included in the
\&\fI\s-1README\s0\fR distributed with Perl (5.12.1).
.PP
\fIPerl 5.12.x delta files\fR
.IX Subsection "Perl 5.12.x delta files"
.PP
The perldelta files for Perl 5.12.1 to 5.12.3 have been added from the
maintenance branch: perl5121delta, perl5122delta, perl5123delta.
.PP
\fIperlpodstyle\fR
.IX Subsection "perlpodstyle"
.PP
New style guide for \s-1POD\s0 documentation,
split mostly from the \s-1NOTES\s0 section of the \fIpod2man\fR\|(1) manpage.
.PP
\fIperlsource, perlinterp, perlhacktut, and perlhacktips\fR
.IX Subsection "perlsource, perlinterp, perlhacktut, and perlhacktips"
.PP
See \*(L"perlhack and perlrepository revamp\*(R", below.
.SS "Changes to Existing Documentation"
.IX Subsection "Changes to Existing Documentation"
\fIperlmodlib is now complete\fR
.IX Subsection "perlmodlib is now complete"
.PP
The perlmodlib manpage that came with Perl 5.12.0 was missing several
modules due to a bug in the script that generates the list.  This has been
fixed [perl #74332] (5.12.1).
.PP
\fIReplace incorrect tr/// table in perlebcdic\fR
.IX Subsection "Replace incorrect tr/// table in perlebcdic"
.PP
perlebcdic contains a helpful table to use in \f(CW\*(C`tr///\*(C'\fR to convert
between \s-1EBCDIC\s0 and Latin1/ASCII.  The table was the inverse of the one
it describes, though the code that used the table worked correctly for
the specific example given.
.PP
The table has been corrected and the sample code changed to correspond.
.PP
The table has also been changed to hex from octal, and the recipes in the
pod have been altered to print out leading zeros to make all values
the same length.
.PP
\fITricks for user-defined casing\fR
.IX Subsection "Tricks for user-defined casing"
.PP
perlunicode now contains an explanation of how to override, mangle
and otherwise tweak the way Perl handles upper\-, lower\- and other-case
conversions on Unicode data, and how to provide scoped changes to alter
one's own code's behaviour without stomping on anybody else's.
.PP
\fI\s-1INSTALL\s0 explicitly states that Perl requires a C89 compiler\fR
.IX Subsection "INSTALL explicitly states that Perl requires a C89 compiler"
.PP
This was already true, but it's now Officially Stated For The Record
(5.12.2).
.PP
\fIExplanation of \f(CI\*(C`\ex\f(CIHH\f(CI\*(C'\fI and \f(CI\*(C`\eo\f(CIOOO\f(CI\*(C'\fI escapes\fR
.IX Subsection "Explanation of xHH and oOOO escapes"
.PP
perlop has been updated with more detailed explanation of these two
character escapes.
.PP
\fI\f(BI\-0\f(BI\s-1NNN\s0\f(BI\fI switch\fR
.IX Subsection "-0NNN switch"
.PP
In perlrun, the behaviour of the \fB\-0NNN\fR switch for \fB\-0400\fR or higher
has been clarified (5.12.2).
.PP
\fIMaintenance policy\fR
.IX Subsection "Maintenance policy"
.PP
perlpolicy now contains the policy on what patches are acceptable for
maintenance branches (5.12.1).
.PP
\fIDeprecation policy\fR
.IX Subsection "Deprecation policy"
.PP
perlpolicy now contains the policy on compatibility and deprecation
along with definitions of terms like \*(L"deprecation\*(R" (5.12.2).
.PP
\fINew descriptions in perldiag\fR
.IX Subsection "New descriptions in perldiag"
.PP
The following existing diagnostics are now documented:
.IP "\(bu" 4
Ambiguous use of \f(CW%c\fR resolved as operator \f(CW%c\fR
.IP "\(bu" 4
Ambiguous use of \f(CW%c\fR{%s} resolved to \f(CW%c\fR%s
.IP "\(bu" 4
Ambiguous use of \f(CW%c\fR{%s[...]} resolved to \f(CW%c\fR%s[...]
.IP "\(bu" 4
Ambiguous use of \f(CW%c\fR{%s{...}} resolved to \f(CW%c\fR%s{...}
.IP "\(bu" 4
Ambiguous use of \-%s resolved as \-&%s()
.IP "\(bu" 4
Invalid strict version format (%s)
.IP "\(bu" 4
Invalid version format (%s)
.IP "\(bu" 4
Invalid version object
.PP
\fIperlbook\fR
.IX Subsection "perlbook"
.PP
perlbook has been expanded to cover many more popular books.
.PP
\fI\f(CI\*(C`SvTRUE\*(C'\fI macro\fR
.IX Subsection "SvTRUE macro"
.PP
The documentation for the \f(CW\*(C`SvTRUE\*(C'\fR macro in
perlapi was simply wrong in stating that
get-magic is not processed.  It has been corrected.
.PP
\fIop manipulation functions\fR
.IX Subsection "op manipulation functions"
.PP
Several \s-1API\s0 functions that process optrees have been newly documented.
.PP
\fIperlvar revamp\fR
.IX Subsection "perlvar revamp"
.PP
perlvar reorders the variables and groups them by topic.  Each variable
introduced after Perl 5.000 notes the first version in which it is 
available.  perlvar also has a new section for deprecated variables to
note when they were removed.
.PP
\fIArray and hash slices in scalar context\fR
.IX Subsection "Array and hash slices in scalar context"
.PP
These are now documented in perldata.
.PP
\fI\f(CI\*(C`use locale\*(C'\fI and formats\fR
.IX Subsection "use locale and formats"
.PP
perlform and perllocale have been corrected to state that
\&\f(CW\*(C`use locale\*(C'\fR affects formats.
.PP
\fIoverload\fR
.IX Subsection "overload"
.PP
overload's documentation has practically undergone a rewrite.  It
is now much more straightforward and clear.
.PP
\fIperlhack and perlrepository revamp\fR
.IX Subsection "perlhack and perlrepository revamp"
.PP
The perlhack document is now much shorter, and focuses on the Perl 5
development process and submitting patches to Perl.  The technical content
has been moved to several new documents, perlsource, perlinterp,
perlhacktut, and perlhacktips.  This technical content has 
been only lightly edited.
.PP
The perlrepository document has been renamed to perlgit.  This new
document is just a how-to on using git with the Perl source code.
Any other content that used to be in perlrepository has been moved
to perlhack.
.PP
\fITime::Piece examples\fR
.IX Subsection "Time::Piece examples"
.PP
Examples in perlfaq4 have been updated to show the use of
Time::Piece.
.SH "Diagnostics"
.IX Header "Diagnostics"
The following additions or changes have been made to diagnostic output,
including warnings and fatal error messages.  For the complete list of
diagnostic messages, see perldiag.
.SS "New Diagnostics"
.IX Subsection "New Diagnostics"
\fINew Errors\fR
.IX Subsection "New Errors"
.IP "Closure prototype called" 4
.IX Item "Closure prototype called"
This error occurs when a subroutine reference passed to an attribute
handler is called, if the subroutine is a closure [perl #68560].
.ie n .IP "Insecure user-defined property %s" 4
.el .IP "Insecure user-defined property \f(CW%s\fR" 4
.IX Item "Insecure user-defined property %s"
Perl detected tainted data when trying to compile a regular
expression that contains a call to a user-defined character property
function, meaning \f(CW\*(C`\ep{IsFoo}\*(C'\fR or \f(CW\*(C`\ep{InFoo}\*(C'\fR.
See \*(L"User-Defined Character Properties\*(R" in perlunicode and perlsec.
.IP "panic: gp_free failed to free glob pointer \- something is repeatedly re-creating entries" 4
.IX Item "panic: gp_free failed to free glob pointer - something is repeatedly re-creating entries"
This new error is triggered if a destructor called on an object in a
typeglob that is being freed creates a new typeglob entry containing an
object with a destructor that creates a new entry containing an object etc.
.IP "Parsing code internal error (%s)" 4
.IX Item "Parsing code internal error (%s)"
This new fatal error is produced when parsing
code supplied by an extension violates the
parser's \s-1API\s0 in a detectable way.
.ie n .IP "refcnt: fd %d%s" 4
.el .IP "refcnt: fd \f(CW%d\fR%s" 4
.IX Item "refcnt: fd %d%s"
This new error only occurs if a internal consistency check fails when a
pipe is about to be closed.
.ie n .IP "Regexp modifier ""/%c"" may not appear twice" 4
.el .IP "Regexp modifier ``/%c'' may not appear twice" 4
.IX Item "Regexp modifier /%c may not appear twice"
The regular expression pattern has one of the
mutually exclusive modifiers repeated.
.ie n .IP "Regexp modifiers ""/%c"" and ""/%c"" are mutually exclusive" 4
.el .IP "Regexp modifiers ``/%c'' and ``/%c'' are mutually exclusive" 4
.IX Item "Regexp modifiers /%c and /%c are mutually exclusive"
The regular expression pattern has more than one of the mutually
exclusive modifiers.
.ie n .IP "Using !~ with %s doesn't make sense" 4
.el .IP "Using !~ with \f(CW%s\fR doesn't make sense" 4
.IX Item "Using !~ with %s doesn't make sense"
This error occurs when \f(CW\*(C`!~\*(C'\fR is used with \f(CW\*(C`s///r\*(C'\fR or \f(CW\*(C`y///r\*(C'\fR.
.PP
\fINew Warnings\fR
.IX Subsection "New Warnings"
.ie n .IP """\eb{"" is deprecated; use ""\eb\e{"" instead" 4
.el .IP "``\eb{'' is deprecated; use ``\eb\e{'' instead" 4
.IX Item "b{ is deprecated; use b{ instead"
.PD 0
.ie n .IP """\eB{"" is deprecated; use ""\eB\e{"" instead" 4
.el .IP "``\eB{'' is deprecated; use ``\eB\e{'' instead" 4
.IX Item "B{ is deprecated; use B{ instead"
.PD
Use of an unescaped \*(L"{\*(R" immediately following a \f(CW\*(C`\eb\*(C'\fR or \f(CW\*(C`\eB\*(C'\fR is now
deprecated in order to reserve its use for Perl itself in a future release.
.ie n .IP "Operation ""%s"" returns its argument for ..." 4
.el .IP "Operation ``%s'' returns its argument for ..." 4
.IX Item "Operation %s returns its argument for ..."
Performing an operation requiring Unicode semantics (such as case-folding)
on a Unicode surrogate or a non-Unicode character now triggers this
warning.
.IP "Use of qw(...) as parentheses is deprecated" 4
.IX Item "Use of qw(...) as parentheses is deprecated"
See \*(L"Use of qw(...) as parentheses\*(R", above, for details.
.SS "Changes to Existing Diagnostics"
.IX Subsection "Changes to Existing Diagnostics"
.IP "\(bu" 4
The \*(L"Variable \f(CW$foo\fR is not imported\*(R" warning that precedes a
\&\f(CW\*(C`strict \*(Aqvars\*(Aq\*(C'\fR error has now been assigned the \*(L"misc\*(R" category, so that
\&\f(CW\*(C`no warnings\*(C'\fR will suppress it [perl #73712].
.IP "\(bu" 4
\&\fIwarn()\fR and \fIdie()\fR now produce \*(L"Wide character\*(R" warnings when fed a
character outside the byte range if \f(CW\*(C`STDERR\*(C'\fR is a byte-sized handle.
.IP "\(bu" 4
The \*(L"Layer does not match this perl\*(R" error message has been replaced with
these more helpful messages [perl #73754]:
.RS 4
.IP "\(bu" 4
PerlIO layer function table size (%d) does not match size expected by this
perl (%d)
.IP "\(bu" 4
PerlIO layer instance size (%d) does not match size expected by this perl
(%d)
.RE
.RS 4
.RE
.IP "\(bu" 4
The \*(L"Found = in conditional\*(R" warning that is emitted when a constant is
assigned to a variable in a condition is now withheld if the constant is
actually a subroutine or one generated by \f(CW\*(C`use constant\*(C'\fR, since the value
of the constant may not be known at the time the program is written
[perl #77762].
.IP "\(bu" 4
Previously, if none of the \fIgethostbyaddr()\fR, \fIgethostbyname()\fR and
\&\fIgethostent()\fR functions were implemented on a given platform, they would
all die with the message \*(L"Unsupported socket function 'gethostent' called\*(R",
with analogous messages for getnet*() and getserv*().  This has been
corrected.
.IP "\(bu" 4
The warning message about unrecognized regular expression escapes passed
through has been changed to include any literal \*(L"{\*(R" following the
two-character escape.  For example, \*(L"\eq{\*(R" is now emitted instead of \*(L"\eq\*(R".
.SH "Utility Changes"
.IX Header "Utility Changes"
\fI\fIperlbug\fI\|(1)\fR
.IX Subsection "perlbug"
.IP "\(bu" 4
perlbug now looks in the \s-1EMAIL\s0 environment variable for a return address
if the REPLY-TO and \s-1REPLYTO\s0 variables are empty.
.IP "\(bu" 4
perlbug did not previously generate a \*(L"From:\*(R" header, potentially
resulting in dropped mail; it now includes that header.
.IP "\(bu" 4
The user's address is now used as the Return-Path.
.Sp
Many systems these days don't have a valid Internet domain name, and
perlbug@perl.org does not accept email with a return-path that does
not resolve.  So the user's address is now passed to sendmail so it's
less likely to get stuck in a mail queue somewhere [perl #82996].
.IP "\(bu" 4
perlbug now always gives the reporter a chance to change the email
address it guesses for them (5.12.2).
.IP "\(bu" 4
perlbug should no longer warn about uninitialized values when using the \fB\-d\fR
and \fB\-v\fR options (5.12.2).
.PP
\fIperl5db.pl\fR
.IX Subsection "perl5db.pl"
.IP "\(bu" 4
The remote terminal works after forking and spawns new sessions, one
per forked process.
.PP
\fIptargrep\fR
.IX Subsection "ptargrep"
.IP "\(bu" 4
ptargrep is a new utility to apply pattern matching to the contents of
files  in a tar archive.  It comes with \f(CW\*(C`Archive::Tar\*(C'\fR.
.SH "Configuration and Compilation"
.IX Header "Configuration and Compilation"
See also \*(L"Naming fixes in Policy_sh.SH may invalidate Policy.sh\*(R",
above.
.IP "\(bu" 4
\&\s-1CCINCDIR\s0 and \s-1CCLIBDIR\s0 for the mingw64 cross-compiler are now correctly
under \fI$(\s-1CCHOME\s0)\emingw\einclude\fR and \fI\elib\fR rather than immediately below
\&\fI$(\s-1CCHOME\s0)\fR.
.Sp
This means the \*(L"incpath\*(R", \*(L"libpth\*(R", \*(L"ldflags\*(R", \*(L"lddlflags\*(R" and
\&\*(L"ldflags_nolargefiles\*(R" values in \fIConfig.pm\fR and \fIConfig_heavy.pl\fR are now
set correctly.
.IP "\(bu" 4
\&\f(CW\*(C`make test.valgrind\*(C'\fR has been adjusted to account for \fIcpan/dist/ext\fR
separation.
.IP "\(bu" 4
On compilers that support it, \fB\-Wwrite\-strings\fR is now added to cflags by
default.
.IP "\(bu" 4
The Encode module can now (once again) be included in a static Perl
build.  The special-case handling for this situation got broken in Perl
5.11.0, and has now been repaired.
.IP "\(bu" 4
The previous default size of a PerlIO buffer (4096 bytes) has been increased
to the larger of 8192 bytes and your local \s-1BUFSIZ. \s0 Benchmarks show that doubling
this decade-old default increases read and write performance by around
25% to 50% when using the default layers of perlio on top of unix.  To choose
a non-default size, such as to get back the old value or to obtain an even
larger value, configure with:
.Sp
.Vb 1
\&     ./Configure \-Accflags=\-DPERLIOBUF_DEFAULT_BUFSIZ=N
.Ve
.Sp
where N is the desired size in bytes; it should probably be a multiple of
your page size.
.IP "\(bu" 4
An \*(L"incompatible operand types\*(R" error in ternary expressions when building
with \f(CW\*(C`clang\*(C'\fR has been fixed (5.12.2).
.IP "\(bu" 4
Perl now skips setuid File::Copy tests on partitions it detects mounted
as \f(CW\*(C`nosuid\*(C'\fR (5.12.2).
.SH "Platform Support"
.IX Header "Platform Support"
.SS "New Platforms"
.IX Subsection "New Platforms"
.IP "\s-1AIX\s0" 4
.IX Item "AIX"
Perl now builds on \s-1AIX 4.2 \s0(5.12.1).
.SS "Discontinued Platforms"
.IX Subsection "Discontinued Platforms"
.IP "Apollo DomainOS" 4
.IX Item "Apollo DomainOS"
The last vestiges of support for this platform have been excised from
the Perl distribution.  It was officially discontinued in version 5.12.0.
It had not worked for years before that.
.IP "MacOS Classic" 4
.IX Item "MacOS Classic"
The last vestiges of support for this platform have been excised from the
Perl distribution.  It was officially discontinued in an earlier version.
.SS "Platform-Specific Notes"
.IX Subsection "Platform-Specific Notes"
\fI\s-1AIX\s0\fR
.IX Subsection "AIX"
.IP "\(bu" 4
\&\fI\s-1README\s0.aix\fR has been updated with information about the \s-1XL C/\*(C+ V11\s0 compiler
suite (5.12.2).
.PP
\fI\s-1ARM\s0\fR
.IX Subsection "ARM"
.IP "\(bu" 4
The \f(CW\*(C`d_u32align\*(C'\fR configuration probe on \s-1ARM\s0 has been fixed (5.12.2).
.PP
\fICygwin\fR
.IX Subsection "Cygwin"
.IP "\(bu" 4
MakeMaker has been updated to build manpages on cygwin.
.IP "\(bu" 4
Improved rebase behaviour
.Sp
If a \s-1DLL\s0 is updated on cygwin the old imagebase address is reused.
This solves most rebase errors, especially when updating on core \s-1DLL\s0's.
See <http://www.tishler.net/jason/software/rebase/rebase\-2.4.2.README> 
for more information.
.IP "\(bu" 4
Support for the standard cygwin dll prefix (needed for FFIs)
.IP "\(bu" 4
Updated build hints file
.PP
\fIFreeBSD 7\fR
.IX Subsection "FreeBSD 7"
.IP "\(bu" 4
FreeBSD 7 no longer contains \fI/usr/bin/objformat\fR.  At build time,
Perl now skips the \fIobjformat\fR check for versions 7 and higher and
assumes \s-1ELF \s0(5.12.1).
.PP
\fIHP-UX\fR
.IX Subsection "HP-UX"
.IP "\(bu" 4
Perl now allows \fB\-Duse64bitint\fR without promoting to \f(CW\*(C`use64bitall\*(C'\fR on HP-UX
(5.12.1).
.PP
\fI\s-1IRIX\s0\fR
.IX Subsection "IRIX"
.IP "\(bu" 4
Conversion of strings to floating-point numbers is now more accurate on
\&\s-1IRIX\s0 systems [perl #32380].
.PP
\fIMac \s-1OS X\s0\fR
.IX Subsection "Mac OS X"
.IP "\(bu" 4
Early versions of Mac \s-1OS X \s0(Darwin) had buggy implementations of the
\&\fIsetregid()\fR, \fIsetreuid()\fR, setrgid(,) and \fIsetruid()\fR functions, so Perl
would pretend they did not exist.
.Sp
These functions are now recognised on Mac \s-1OS 10.5 \s0(Leopard; Darwin 9) and
higher, as they have been fixed [perl #72990].
.PP
\fIMirBSD\fR
.IX Subsection "MirBSD"
.IP "\(bu" 4
Previously if you built Perl with a shared \fIlibperl.so\fR on MirBSD (the
default config), it would work up to the installation; however, once
installed, it would be unable to find \fIlibperl\fR.  Path handling is now
treated as in the other \s-1BSD\s0 dialects.
.PP
\fINetBSD\fR
.IX Subsection "NetBSD"
.IP "\(bu" 4
The NetBSD hints file has been changed to make the system malloc the
default.
.PP
\fIOpenBSD\fR
.IX Subsection "OpenBSD"
.IP "\(bu" 4
OpenBSD > 3.7 has a new malloc implementation which is \fImmap\fR\-based,
and as such can release memory back to the \s-1OS\s0; however, Perl's use of
this malloc causes a substantial slowdown, so we now default to using
Perl's malloc instead [perl #75742].
.PP
\fIOpenVOS\fR
.IX Subsection "OpenVOS"
.IP "\(bu" 4
Perl now builds again with OpenVOS (formerly known as Stratus \s-1VOS\s0)
[perl #78132] (5.12.3).
.PP
\fISolaris\fR
.IX Subsection "Solaris"
.IP "\(bu" 4
DTrace is now supported on Solaris.  There used to be build failures, but
these have been fixed [perl #73630] (5.12.3).
.PP
\fI\s-1VMS\s0\fR
.IX Subsection "VMS"
.IP "\(bu" 4
Extension building on older (pre 7.3\-2) \s-1VMS\s0 systems was broken because
configure.com hit the \s-1DCL\s0 symbol length limit of 1K.  We now work within
this limit when assembling the list of extensions in the core build (5.12.1).
.IP "\(bu" 4
We fixed configuring and building Perl with \fB\-Uuseperlio\fR (5.12.1).
.IP "\(bu" 4
\&\f(CW\*(C`PerlIOUnix_open\*(C'\fR now honours the default permissions on \s-1VMS.\s0
.Sp
When \f(CW\*(C`perlio\*(C'\fR became the default and \f(CW\*(C`unix\*(C'\fR became the default bottom layer,
the most common path for creating files from Perl became \f(CW\*(C`PerlIOUnix_open\*(C'\fR,
which has always explicitly used \f(CW0666\fR as the permission mask.  This prevents
inheriting permissions from \s-1RMS\s0 defaults and ACLs, so to avoid that problem,
we now pass \f(CW0777\fR to \fIopen()\fR.  In the \s-1VMS CRTL, \s0\f(CW0777\fR has a special
meaning over and above intersecting with the current umask; specifically, it
allows Unix syscalls to preserve native default permissions (5.12.3).
.IP "\(bu" 4
The shortening of symbols longer than 31 characters in the core C sources
and in extensions is now by default done by the C compiler rather than by
xsubpp (which could only do so for generated symbols in \s-1XS\s0 code).  You can
reenable xsubpp's symbol shortening by configuring with \-Uuseshortenedsymbols,
but you'll have some work to do to get the core sources to compile.
.IP "\(bu" 4
Record-oriented files (record format variable or variable with fixed control)
opened for write by the \f(CW\*(C`perlio\*(C'\fR layer will now be line-buffered to prevent the
introduction of spurious line breaks whenever the perlio buffer fills up.
.IP "\(bu" 4
\&\fIgit_version.h\fR is now installed on \s-1VMS. \s0 This was an oversight in v5.12.0 which
caused some extensions to fail to build (5.12.2).
.IP "\(bu" 4
Several memory leaks in \fIstat()\fR have been fixed (5.12.2).
.IP "\(bu" 4
A memory leak in \fIPerl_rename()\fR due to a double allocation has been
fixed (5.12.2).
.IP "\(bu" 4
A memory leak in \fIvms_fid_to_name()\fR (used by \fIrealpath()\fR and
\&\fIrealname()\fR> has been fixed (5.12.2).
.PP
\fIWindows\fR
.IX Subsection "Windows"
.PP
See also \*(L"\fIfork()\fR emulation will not wait for signalled children\*(R" and
\&\*(L"Perl source code is read in text mode on Windows\*(R", above.
.IP "\(bu" 4
Fixed build process for \s-1SDK2003SP1\s0 compilers.
.IP "\(bu" 4
Compilation with Visual Studio 2010 is now supported.
.IP "\(bu" 4
When using old 32\-bit compilers, the define \f(CW\*(C`_USE_32BIT_TIME_T\*(C'\fR is now
set in \f(CW$Config{ccflags}\fR.  This improves portability when compiling
\&\s-1XS\s0 extensions using new compilers, but for a Perl compiled with old 32\-bit
compilers.
.IP "\(bu" 4
\&\f(CW$Config{gccversion}\fR is now set correctly when Perl is built using the
mingw64 compiler from <http://mingw64.org> [perl #73754].
.IP "\(bu" 4
When building Perl with the mingw64 x64 cross-compiler \f(CW\*(C`incpath\*(C'\fR,
\&\f(CW\*(C`libpth\*(C'\fR, \f(CW\*(C`ldflags\*(C'\fR, \f(CW\*(C`lddlflags\*(C'\fR and \f(CW\*(C`ldflags_nolargefiles\*(C'\fR values
in \fIConfig.pm\fR and \fIConfig_heavy.pl\fR were not previously being set
correctly because, with that compiler, the include and lib directories
are not immediately below \f(CW\*(C`$(CCHOME)\*(C'\fR (5.12.2).
.IP "\(bu" 4
The build process proceeds more smoothly with mingw and dmake when
\&\fIC:\eMSYS\ebin\fR is in the \s-1PATH,\s0 due to a \f(CW\*(C`Cwd\*(C'\fR fix.
.IP "\(bu" 4
Support for building with Visual \*(C+ 2010 is now underway, but is not yet
complete.  See \fI\s-1README\s0.win32\fR or perlwin32 for more details.
.IP "\(bu" 4
The option to use an externally-supplied \fIcrypt()\fR, or to build with no
\&\fIcrypt()\fR at all, has been removed.  Perl supplies its own \fIcrypt()\fR
implementation for Windows, and the political situation that required
this part of the distribution to sometimes be omitted is long gone.
.SH "Internal Changes"
.IX Header "Internal Changes"
.SS "New APIs"
.IX Subsection "New APIs"
\fI\s-1CLONE_PARAMS\s0 structure added to ease correct thread creation\fR
.IX Subsection "CLONE_PARAMS structure added to ease correct thread creation"
.PP
Modules that create threads should now create \f(CW\*(C`CLONE_PARAMS\*(C'\fR structures
by calling the new function \fIPerl_clone_params_new()\fR, and free them with
\&\fIPerl_clone_params_del()\fR.  This will ensure compatibility with any future
changes to the internals of the \f(CW\*(C`CLONE_PARAMS\*(C'\fR structure layout, and that
it is correctly allocated and initialised.
.PP
\fINew parsing functions\fR
.IX Subsection "New parsing functions"
.PP
Several functions have been added for parsing Perl statements and
expressions.  These functions are meant to be used by \s-1XS\s0 code invoked
during Perl parsing, in a recursive-descent manner, to allow modules to
augment the standard Perl syntax.
.IP "\(bu" 4
\&\fIparse_stmtseq()\fR
parses a sequence of statements, up to closing brace or \s-1EOF.\s0
.IP "\(bu" 4
\&\fIparse_fullstmt()\fR
parses a complete Perl statement, including optional label.
.IP "\(bu" 4
\&\fIparse_barestmt()\fR
parses a statement without a label.
.IP "\(bu" 4
\&\fIparse_block()\fR
parses a code block.
.IP "\(bu" 4
\&\fIparse_label()\fR
parses a statement label, separate from statements.
.IP "\(bu" 4
\&\f(CW\*(C`parse_fullexpr()\*(C'\fR,
\&\f(CW\*(C`parse_listexpr()\*(C'\fR,
\&\f(CW\*(C`parse_termexpr()\*(C'\fR, and
\&\f(CW\*(C`parse_arithexpr()\*(C'\fR
parse expressions at various precedence levels.
.PP
\fIHints hash \s-1API\s0\fR
.IX Subsection "Hints hash API"
.PP
A new C \s-1API\s0 for introspecting the hinthash \f(CW\*(C`%^H\*(C'\fR at runtime has been
added.  See \f(CW\*(C`cop_hints_2hv\*(C'\fR, \f(CW\*(C`cop_hints_fetchpvn\*(C'\fR, \f(CW\*(C`cop_hints_fetchpvs\*(C'\fR,
\&\f(CW\*(C`cop_hints_fetchsv\*(C'\fR, and \f(CW\*(C`hv_copy_hints_hv\*(C'\fR in perlapi for details.
.PP
A new, experimental \s-1API\s0 has been added for accessing the internal
structure that Perl uses for \f(CW\*(C`%^H\*(C'\fR.  See the functions beginning with
\&\f(CW\*(C`cophh_\*(C'\fR in perlapi.
.PP
\fIC interface to \fIcaller()\fI\fR
.IX Subsection "C interface to caller()"
.PP
The \f(CW\*(C`caller_cx\*(C'\fR function has been added as an XSUB-writer's equivalent of
\&\fIcaller()\fR.  See perlapi for details.
.PP
\fICustom per-subroutine check hooks\fR
.IX Subsection "Custom per-subroutine check hooks"
.PP
\&\s-1XS\s0 code in an extension module can now annotate a subroutine (whether
implemented in \s-1XS\s0 or in Perl) so that nominated \s-1XS\s0 code will be called
at compile time (specifically as part of op checking) to change the op
tree of that subroutine.  The compile-time check function (supplied by
the extension module) can implement argument processing that can't be
expressed as a prototype, generate customised compile-time warnings,
perform constant folding for a pure function, inline a subroutine
consisting of sufficiently simple ops, replace the whole call with a
custom op, and so on.  This was previously all possible by hooking the
\&\f(CW\*(C`entersub\*(C'\fR op checker, but the new mechanism makes it easy to tie the
hook to a specific subroutine.  See \*(L"cv_set_call_checker\*(R" in perlapi.
.PP
To help in writing custom check hooks, several subtasks within standard
\&\f(CW\*(C`entersub\*(C'\fR op checking have been separated out and exposed in the \s-1API.\s0
.PP
\fIImproved support for custom OPs\fR
.IX Subsection "Improved support for custom OPs"
.PP
Custom ops can now be registered with the new \f(CW\*(C`custom_op_register\*(C'\fR C
function and the \f(CW\*(C`XOP\*(C'\fR structure.  This will make it easier to add new
properties of custom ops in the future.  Two new properties have been added
already, \f(CW\*(C`xop_class\*(C'\fR and \f(CW\*(C`xop_peep\*(C'\fR.
.PP
\&\f(CW\*(C`xop_class\*(C'\fR is one of the OA_*OP constants.  It allows B and other
introspection mechanisms to work with custom ops
that aren't BASEOPs.  \f(CW\*(C`xop_peep\*(C'\fR is a pointer to
a function that will be called for ops of this
type from \f(CW\*(C`Perl_rpeep\*(C'\fR.
.PP
See \*(L"Custom Operators\*(R" in perlguts and \*(L"Custom Operators\*(R" in perlapi for more
detail.
.PP
The old \f(CW\*(C`PL_custom_op_names\*(C'\fR/\f(CW\*(C`PL_custom_op_descs\*(C'\fR interface is still
supported but discouraged.
.PP
\fIScope hooks\fR
.IX Subsection "Scope hooks"
.PP
It is now possible for \s-1XS\s0 code to hook into Perl's lexical scope
mechanism at compile time, using the new \f(CW\*(C`Perl_blockhook_register\*(C'\fR
function.  See \*(L"Compile-time scope hooks\*(R" in perlguts.
.PP
\fIThe recursive part of the peephole optimizer is now hookable\fR
.IX Subsection "The recursive part of the peephole optimizer is now hookable"
.PP
In addition to \f(CW\*(C`PL_peepp\*(C'\fR, for hooking into the toplevel peephole optimizer, a
\&\f(CW\*(C`PL_rpeepp\*(C'\fR is now available to hook into the optimizer recursing into
side-chains of the optree.
.PP
\fINew non-magical variants of existing functions\fR
.IX Subsection "New non-magical variants of existing functions"
.PP
The following functions/macros have been added to the \s-1API. \s0 The \f(CW*_nomg\fR
macros are equivalent to their non\-\f(CW\*(C`_nomg\*(C'\fR variants, except that they ignore
get-magic.  Those ending in \f(CW\*(C`_flags\*(C'\fR allow one to specify whether
get-magic is processed.
.PP
.Vb 8
\&  sv_2bool_flags
\&  SvTRUE_nomg
\&  sv_2nv_flags
\&  SvNV_nomg
\&  sv_cmp_flags
\&  sv_cmp_locale_flags
\&  sv_eq_flags
\&  sv_collxfrm_flags
.Ve
.PP
In some of these cases, the non\-\f(CW\*(C`_flags\*(C'\fR functions have
been replaced with wrappers around the new functions.
.PP
\fIpv/pvs/sv versions of existing functions\fR
.IX Subsection "pv/pvs/sv versions of existing functions"
.PP
Many functions ending with pvn now have equivalent \f(CW\*(C`pv/pvs/sv\*(C'\fR versions.
.PP
\fIList op-building functions\fR
.IX Subsection "List op-building functions"
.PP
List op-building functions have been added to the
\&\s-1API. \s0 See op_append_elem,
op_append_list, and
op_prepend_elem in perlapi.
.PP
\fI\f(CI\*(C`LINKLIST\*(C'\fI\fR
.IX Subsection "LINKLIST"
.PP
The \s-1LINKLIST\s0 macro, part of op building that
constructs the execution-order op chain, has been added to the \s-1API.\s0
.PP
\fILocalisation functions\fR
.IX Subsection "Localisation functions"
.PP
The \f(CW\*(C`save_freeop\*(C'\fR, \f(CW\*(C`save_op\*(C'\fR, \f(CW\*(C`save_pushi32ptr\*(C'\fR and \f(CW\*(C`save_pushptrptr\*(C'\fR
functions have been added to the \s-1API.\s0
.PP
\fIStash names\fR
.IX Subsection "Stash names"
.PP
A stash can now have a list of effective names in addition to its usual
name.  The first effective name can be accessed via the \f(CW\*(C`HvENAME\*(C'\fR macro,
which is now the recommended name to use in \s-1MRO\s0 linearisations (\f(CW\*(C`HvNAME\*(C'\fR
being a fallback if there is no \f(CW\*(C`HvENAME\*(C'\fR).
.PP
These names are added and deleted via \f(CW\*(C`hv_ename_add\*(C'\fR and
\&\f(CW\*(C`hv_ename_delete\*(C'\fR.  These two functions are \fInot\fR part of the \s-1API.\s0
.PP
\fINew functions for finding and removing magic\fR
.IX Subsection "New functions for finding and removing magic"
.PP
The \f(CW\*(C`mg_findext()\*(C'\fR and
\&\f(CW\*(C`sv_unmagicext()\*(C'\fR
functions have been added to the \s-1API.\s0
They allow extension authors to find and remove magic attached to
scalars based on both the magic type and the magic virtual table, similar to how
\&\fIsv_magicext()\fR attaches magic of a certain type and with a given virtual table
to a scalar.  This eliminates the need for extensions to walk the list of
\&\f(CW\*(C`MAGIC\*(C'\fR pointers of an \f(CW\*(C`SV\*(C'\fR to find the magic that belongs to them.
.PP
\fI\f(CI\*(C`find_rundefsv\*(C'\fI\fR
.IX Subsection "find_rundefsv"
.PP
This function returns the \s-1SV\s0 representing \f(CW$_\fR, whether it's lexical
or dynamic.
.PP
\fI\f(CI\*(C`Perl_croak_no_modify\*(C'\fI\fR
.IX Subsection "Perl_croak_no_modify"
.PP
\&\fIPerl_croak_no_modify()\fR is short-hand for
\&\f(CW\*(C`Perl_croak("%s", PL_no_modify)\*(C'\fR.
.PP
\fI\f(CI\*(C`PERL_STATIC_INLINE\*(C'\fI define\fR
.IX Subsection "PERL_STATIC_INLINE define"
.PP
The \f(CW\*(C`PERL_STATIC_INLINE\*(C'\fR define has been added to provide the best-guess
incantation to use for static inline functions, if the C compiler supports
C99\-style static inline.  If it doesn't, it'll give a plain \f(CW\*(C`static\*(C'\fR.
.PP
\&\f(CW\*(C`HAS_STATIC_INLINE\*(C'\fR can be used to check if the compiler actually supports
inline functions.
.PP
\fINew \f(CI\*(C`pv_escape\*(C'\fI option for hexadecimal escapes\fR
.IX Subsection "New pv_escape option for hexadecimal escapes"
.PP
A new option, \f(CW\*(C`PERL_PV_ESCAPE_NONASCII\*(C'\fR, has been added to \f(CW\*(C`pv_escape\*(C'\fR to
dump all characters above \s-1ASCII\s0 in hexadecimal.  Before, one could get all
characters as hexadecimal or the Latin1 non-ASCII as octal.
.PP
\fI\f(CI\*(C`lex_start\*(C'\fI\fR
.IX Subsection "lex_start"
.PP
\&\f(CW\*(C`lex_start\*(C'\fR has been added to the \s-1API,\s0 but is considered experimental.
.PP
\fI\fIop_scope()\fI and \fIop_lvalue()\fI\fR
.IX Subsection "op_scope() and op_lvalue()"
.PP
The \fIop_scope()\fR and \fIop_lvalue()\fR functions have been added to the \s-1API,\s0
but are considered experimental.
.SS "C \s-1API\s0 Changes"
.IX Subsection "C API Changes"
\fI\f(CI\*(C`PERL_POLLUTE\*(C'\fI has been removed\fR
.IX Subsection "PERL_POLLUTE has been removed"
.PP
The option to define \f(CW\*(C`PERL_POLLUTE\*(C'\fR to expose older 5.005 symbols for
backwards compatibility has been removed.  Its use was always discouraged,
and MakeMaker contains a more specific escape hatch:
.PP
.Vb 1
\&    perl Makefile.PL POLLUTE=1
.Ve
.PP
This can be used for modules that have not been upgraded to 5.6 naming
conventions (and really should be completely obsolete by now).
.PP
\fICheck \s-1API\s0 compatibility when loading \s-1XS\s0 modules\fR
.IX Subsection "Check API compatibility when loading XS modules"
.PP
When Perl's \s-1API\s0 changes in incompatible ways (which usually happens between
major releases), \s-1XS\s0 modules compiled for previous versions of Perl will no
longer work.  They need to be recompiled against the new Perl.
.PP
The \f(CW\*(C`XS_APIVERSION_BOOTCHECK\*(C'\fR macro has been added to ensure that modules
are recompiled and to prevent users from accidentally loading modules
compiled for old perls into newer perls.  That macro, which is called when
loading every newly compiled extension, compares the \s-1API\s0 version of the
running perl with the version a module has been compiled for and raises an
exception if they don't match.
.PP
\fIPerl_fetch_cop_label\fR
.IX Subsection "Perl_fetch_cop_label"
.PP
The first argument of the C \s-1API\s0 function \f(CW\*(C`Perl_fetch_cop_label\*(C'\fR has changed
from \f(CW\*(C`struct refcounted_he *\*(C'\fR to \f(CW\*(C`COP *\*(C'\fR, to insulate the user from
implementation details.
.PP
This \s-1API\s0 function was marked as \*(L"may change\*(R", and likely isn't in use outside
the core.  (Neither an unpacked \s-1CPAN\s0 nor Google's codesearch finds any other
references to it.)
.PP
\fI\fIGvCV()\fI and \fIGvGP()\fI are no longer lvalues\fR
.IX Subsection "GvCV() and GvGP() are no longer lvalues"
.PP
The new \fIGvCV_set()\fR and \fIGvGP_set()\fR macros are now provided to replace
assignment to those two macros.
.PP
This allows a future commit to eliminate some backref magic between \s-1GV\s0
and CVs, which will require complete control over assignment to the
\&\f(CW\*(C`gp_cv\*(C'\fR slot.
.PP
\fI\fICvGV()\fI is no longer an lvalue\fR
.IX Subsection "CvGV() is no longer an lvalue"
.PP
Under some circumstances, the \fICvGV()\fR field of a \s-1CV\s0 is now
reference-counted.  To ensure consistent behaviour, direct assignment to
it, for example \f(CW\*(C`CvGV(cv) = gv\*(C'\fR is now a compile-time error.  A new macro,
\&\f(CW\*(C`CvGV_set(cv,gv)\*(C'\fR has been introduced to run this operation
safely.  Note that modification of this field is not part of the public
\&\s-1API,\s0 regardless of this new macro (and despite its being listed in this section).
.PP
\fI\fICvSTASH()\fI is no longer an lvalue\fR
.IX Subsection "CvSTASH() is no longer an lvalue"
.PP
The \fICvSTASH()\fR macro can now only be used as an rvalue.  \fICvSTASH_set()\fR
has been added to replace assignment to \fICvSTASH()\fR.  This is to ensure
that backreferences are handled properly.  These macros are not part of the
\&\s-1API.\s0
.PP
\fICalling conventions for \f(CI\*(C`newFOROP\*(C'\fI and \f(CI\*(C`newWHILEOP\*(C'\fI\fR
.IX Subsection "Calling conventions for newFOROP and newWHILEOP"
.PP
The way the parser handles labels has been cleaned up and refactored.  As a
result, the \fInewFOROP()\fR constructor function no longer takes a parameter
stating what label is to go in the state op.
.PP
The \fInewWHILEOP()\fR and \fInewFOROP()\fR functions no longer accept a line
number as a parameter.
.PP
\fIFlags passed to \f(CI\*(C`uvuni_to_utf8_flags\*(C'\fI and \f(CI\*(C`utf8n_to_uvuni\*(C'\fI\fR
.IX Subsection "Flags passed to uvuni_to_utf8_flags and utf8n_to_uvuni"
.PP
Some of the flags parameters to \fIuvuni_to_utf8_flags()\fR and
\&\fIutf8n_to_uvuni()\fR have changed.  This is a result of Perl's now allowing
internal storage and manipulation of code points that are problematic
in some situations.  Hence, the default actions for these functions has
been complemented to allow these code points.  The new flags are
documented in perlapi.  Code that requires the problematic code
points to be rejected needs to change to use the new flags.  Some flag
names are retained for backward source compatibility, though they do
nothing, as they are now the default.  However the flags
\&\f(CW\*(C`UNICODE_ALLOW_FDD0\*(C'\fR, \f(CW\*(C`UNICODE_ALLOW_FFFF\*(C'\fR, \f(CW\*(C`UNICODE_ILLEGAL\*(C'\fR, and
\&\f(CW\*(C`UNICODE_IS_ILLEGAL\*(C'\fR have been removed, as they stem from a
fundamentally broken model of how the Unicode non-character code points
should be handled, which is now described in
\&\*(L"Non-character code points\*(R" in perlunicode.  See also the Unicode section
under \*(L"Selected Bug Fixes\*(R".
.SS "Deprecated C APIs"
.IX Subsection "Deprecated C APIs"
.ie n .IP """Perl_ptr_table_clear""" 4
.el .IP "\f(CWPerl_ptr_table_clear\fR" 4
.IX Item "Perl_ptr_table_clear"
\&\f(CW\*(C`Perl_ptr_table_clear\*(C'\fR is no longer part of Perl's public \s-1API. \s0 Calling it
now generates a deprecation warning, and it will be removed in a future
release.
.ie n .IP """sv_compile_2op""" 4
.el .IP "\f(CWsv_compile_2op\fR" 4
.IX Item "sv_compile_2op"
The \fIsv_compile_2op()\fR \s-1API\s0 function is now deprecated.  Searches suggest
that nothing on \s-1CPAN\s0 is using it, so this should have zero impact.
.Sp
It attempted to provide an \s-1API\s0 to compile code down to an optree, but failed
to bind correctly to lexicals in the enclosing scope.  It's not possible to
fix this problem within the constraints of its parameters and return value.
.ie n .IP """find_rundefsvoffset""" 4
.el .IP "\f(CWfind_rundefsvoffset\fR" 4
.IX Item "find_rundefsvoffset"
The \f(CW\*(C`find_rundefsvoffset\*(C'\fR function has been deprecated.  It appeared that
its design was insufficient for reliably getting the lexical \f(CW$_\fR at
run-time.
.Sp
Use the new \f(CW\*(C`find_rundefsv\*(C'\fR function or the \f(CW\*(C`UNDERBAR\*(C'\fR macro
instead.  They directly return the right \s-1SV\s0
representing \f(CW$_\fR, whether it's
lexical or dynamic.
.ie n .IP """CALL_FPTR"" and ""CPERLscope""" 4
.el .IP "\f(CWCALL_FPTR\fR and \f(CWCPERLscope\fR" 4
.IX Item "CALL_FPTR and CPERLscope"
Those are left from an old implementation of \f(CW\*(C`MULTIPLICITY\*(C'\fR using \*(C+ objects,
which was removed in Perl 5.8.  Nowadays these macros do exactly nothing, so
they shouldn't be used anymore.
.Sp
For compatibility, they are still defined for external \f(CW\*(C`XS\*(C'\fR code.  Only
extensions defining \f(CW\*(C`PERL_CORE\*(C'\fR must be updated now.
.SS "Other Internal Changes"
.IX Subsection "Other Internal Changes"
\fIStack unwinding\fR
.IX Subsection "Stack unwinding"
.PP
The protocol for unwinding the C stack at the last stage of a \f(CW\*(C`die\*(C'\fR
has changed how it identifies the target stack frame.  This now uses
a separate variable \f(CW\*(C`PL_restartjmpenv\*(C'\fR, where previously it relied on
the \f(CW\*(C`blk_eval.cur_top_env\*(C'\fR pointer in the \f(CW\*(C`eval\*(C'\fR context frame that
has nominally just been discarded.  This change means that code running
during various stages of Perl-level unwinding no longer needs to take
care to avoid destroying the ghost frame.
.PP
\fIScope stack entries\fR
.IX Subsection "Scope stack entries"
.PP
The format of entries on the scope stack has been changed, resulting in a
reduction of memory usage of about 10%.  In particular, the memory used by
the scope stack to record each active lexical variable has been halved.
.PP
\fIMemory allocation for pointer tables\fR
.IX Subsection "Memory allocation for pointer tables"
.PP
Memory allocation for pointer tables has been changed.  Previously
\&\f(CW\*(C`Perl_ptr_table_store\*(C'\fR allocated memory from the same arena system as
\&\f(CW\*(C`SV\*(C'\fR bodies and \f(CW\*(C`HE\*(C'\fRs, with freed memory remaining bound to those arenas
until interpreter exit.  Now it allocates memory from arenas private to the
specific pointer table, and that memory is returned to the system when
\&\f(CW\*(C`Perl_ptr_table_free\*(C'\fR is called.  Additionally, allocation and release are
both less \s-1CPU\s0 intensive.
.PP
\fI\f(CI\*(C`UNDERBAR\*(C'\fI\fR
.IX Subsection "UNDERBAR"
.PP
The \f(CW\*(C`UNDERBAR\*(C'\fR macro now calls \f(CW\*(C`find_rundefsv\*(C'\fR.  \f(CW\*(C`dUNDERBAR\*(C'\fR is now a
noop but should still be used to ensure past and future compatibility.
.PP
\fIString comparison routines renamed\fR
.IX Subsection "String comparison routines renamed"
.PP
The \f(CW\*(C`ibcmp_*\*(C'\fR functions have been renamed and are now called \f(CW\*(C`foldEQ\*(C'\fR,
\&\f(CW\*(C`foldEQ_locale\*(C'\fR, and \f(CW\*(C`foldEQ_utf8\*(C'\fR.  The old names are still available as
macros.
.PP
\fI\f(CI\*(C`chop\*(C'\fI and \f(CI\*(C`chomp\*(C'\fI implementations merged\fR
.IX Subsection "chop and chomp implementations merged"
.PP
The opcode bodies for \f(CW\*(C`chop\*(C'\fR and \f(CW\*(C`chomp\*(C'\fR and for \f(CW\*(C`schop\*(C'\fR and \f(CW\*(C`schomp\*(C'\fR
have been merged.  The implementation functions \fIPerl_do_chop()\fR and
\&\fIPerl_do_chomp()\fR, never part of the public \s-1API,\s0 have been merged and
moved to a static function in \fIpp.c\fR.  This shrinks the Perl binary
slightly, and should not affect any code outside the core (unless it is
relying on the order of side-effects when \f(CW\*(C`chomp\*(C'\fR is passed a \fIlist\fR of
values).
.SH "Selected Bug Fixes"
.IX Header "Selected Bug Fixes"
.SS "I/O"
.IX Subsection "I/O"
.IP "\(bu" 4
Perl no longer produces this warning:
.Sp
.Vb 2
\&    $ perl \-we \*(Aqopen(my $f, ">", \emy $x); binmode($f, "scalar")\*(Aq
\&    Use of uninitialized value in binmode at \-e line 1.
.Ve
.IP "\(bu" 4
Opening a glob reference via \f(CW\*(C`open($fh, ">", \e*glob)\*(C'\fR no longer
causes the glob to be corrupted when the filehandle is printed to.  This would
cause Perl to crash whenever the glob's contents were accessed
[perl #77492].
.IP "\(bu" 4
PerlIO no longer crashes when called recursively, such as from a signal
handler.  Now it just leaks memory [perl #75556].
.IP "\(bu" 4
Most I/O functions were not warning for unopened handles unless the
\&\*(L"closed\*(R" and \*(L"unopened\*(R" warnings categories were both enabled.  Now only
\&\f(CW\*(C`use warnings \*(Aqunopened\*(Aq\*(C'\fR is necessary to trigger these warnings, as
had always been the intention.
.IP "\(bu" 4
There have been several fixes to PerlIO layers:
.Sp
When \f(CW\*(C`binmode(FH, ":crlf")\*(C'\fR pushes the \f(CW\*(C`:crlf\*(C'\fR layer on top of the stack,
it no longer enables crlf layers lower in the stack so as to avoid
unexpected results [perl #38456].
.Sp
Opening a file in \f(CW\*(C`:raw\*(C'\fR mode now does what it advertises to do (first
open the file, then \f(CW\*(C`binmode\*(C'\fR it), instead of simply leaving off the top
layer [perl #80764].
.Sp
The three layers \f(CW\*(C`:pop\*(C'\fR, \f(CW\*(C`:utf8\*(C'\fR, and \f(CW\*(C`:bytes\*(C'\fR didn't allow stacking when
opening a file.  For example
this:
.Sp
.Vb 1
\&    open(FH, ">:pop:perlio", "some.file") or die $!;
.Ve
.Sp
would throw an \*(L"Invalid argument\*(R" error.  This has been fixed in this
release [perl #82484].
.SS "Regular Expression Bug Fixes"
.IX Subsection "Regular Expression Bug Fixes"
.IP "\(bu" 4
The regular expression engine no longer loops when matching
\&\f(CW\*(C`"\eN{LATIN SMALL LIGATURE FF}" =~ /f+/i\*(C'\fR and similar expressions
[perl #72998] (5.12.1).
.IP "\(bu" 4
The trie runtime code should no longer allocate massive amounts of memory,
fixing #74484.
.IP "\(bu" 4
Syntax errors in \f(CW\*(C`(?{...})\*(C'\fR blocks no longer cause panic messages
[perl #2353].
.IP "\(bu" 4
A pattern like \f(CW\*(C`(?:(o){2})?\*(C'\fR no longer causes a \*(L"panic\*(R" error
[perl #39233].
.IP "\(bu" 4
A fatal error in regular expressions containing \f(CW\*(C`(.*?)\*(C'\fR when processing
\&\s-1UTF\-8\s0 data has been fixed [perl #75680] (5.12.2).
.IP "\(bu" 4
An erroneous regular expression engine optimisation that caused regex verbs like
\&\f(CW*COMMIT\fR sometimes to be ignored has been removed.
.IP "\(bu" 4
The regular expression bracketed character class \f(CW\*(C`[\e8\e9]\*(C'\fR was effectively the
same as \f(CW\*(C`[89\e000]\*(C'\fR, incorrectly matching a \s-1NULL\s0 character.  It also gave
incorrect warnings that the \f(CW8\fR and \f(CW9\fR were ignored.  Now \f(CW\*(C`[\e8\e9]\*(C'\fR is the
same as \f(CW\*(C`[89]\*(C'\fR and gives legitimate warnings that \f(CW\*(C`\e8\*(C'\fR and \f(CW\*(C`\e9\*(C'\fR are
unrecognized escape sequences, passed-through.
.IP "\(bu" 4
A regular expression match in the right-hand side of a global substitution
(\f(CW\*(C`s///g\*(C'\fR) that is in the same scope will no longer cause match variables
to have the wrong values on subsequent iterations.  This can happen when an
array or hash subscript is interpolated in the right-hand side, as in
\&\f(CW\*(C`s|(.)|@a{ print($1), /./ }|g\*(C'\fR [perl #19078].
.IP "\(bu" 4
Several cases in which characters in the Latin\-1 non-ASCII range (0x80 to
0xFF) used not to match themselves, or used to match both a character class
and its complement, have been fixed.  For instance, U+00E2 could match both
\&\f(CW\*(C`\ew\*(C'\fR and \f(CW\*(C`\eW\*(C'\fR [perl #78464] [perl #18281] [perl #60156].
.IP "\(bu" 4
Matching a Unicode character against an alternation containing characters
that happened to match continuation bytes in the former's \s-1UTF8\s0
representation (like \f(CW\*(C`qq{\ex{30ab}} =~ /\exab|\exa9/\*(C'\fR) would cause erroneous
warnings [perl #70998].
.IP "\(bu" 4
The trie optimisation was not taking empty groups into account, preventing
\&\*(L"foo\*(R" from matching \f(CW\*(C`/\eA(?:(?:)foo|bar|zot)\ez/\*(C'\fR [perl #78356].
.IP "\(bu" 4
A pattern containing a \f(CW\*(C`+\*(C'\fR inside a lookahead would sometimes cause an
incorrect match failure in a global match (for example, \f(CW\*(C`/(?=(\eS+))/g\*(C'\fR)
[perl #68564].
.IP "\(bu" 4
A regular expression optimisation would sometimes cause a match with a
\&\f(CW\*(C`{n,m}\*(C'\fR quantifier to fail when it should have matched [perl #79152].
.IP "\(bu" 4
Case-insensitive matching in regular expressions compiled under
\&\f(CW\*(C`use locale\*(C'\fR now works much more sanely when the pattern or target
string is internally encoded in \s-1UTF8. \s0 Previously, under these
conditions the localeness was completely lost.  Now, code points
above 255 are treated as Unicode, but code points between 0 and 255
are treated using the current locale rules, regardless of whether
the pattern or the string is encoded in \s-1UTF8. \s0 The few case-insensitive
matches that cross the 255/256 boundary are not allowed.  For
example, 0xFF does not caselessly match the character at 0x178,
\&\s-1LATIN CAPITAL LETTER Y WITH DIAERESIS,\s0 because 0xFF may not be \s-1LATIN
SMALL LETTER Y\s0 in the current locale, and Perl has no way of knowing
if that character even exists in the locale, much less what code
point it is.
.IP "\(bu" 4
The \f(CW\*(C`(?|...)\*(C'\fR regular expression construct no longer crashes if the final
branch has more sets of capturing parentheses than any other branch.  This
was fixed in Perl 5.10.1 for the case of a single branch, but that fix did
not take multiple branches into account [perl #84746].
.IP "\(bu" 4
A bug has been fixed in the implementation of \f(CW\*(C`{...}\*(C'\fR quantifiers in
regular expressions that prevented the code block in
\&\f(CW\*(C`/((\ew+)(?{ print $2 })){2}/\*(C'\fR from seeing the \f(CW$2\fR sometimes
[perl #84294].
.SS "Syntax/Parsing Bugs"
.IX Subsection "Syntax/Parsing Bugs"
.IP "\(bu" 4
\&\f(CW\*(C`when (scalar) {...}\*(C'\fR no longer crashes, but produces a syntax error
[perl #74114] (5.12.1).
.IP "\(bu" 4
A label right before a string eval (\f(CW\*(C`foo: eval $string\*(C'\fR) no longer causes
the label to be associated also with the first statement inside the eval
[perl #74290] (5.12.1).
.IP "\(bu" 4
The \f(CW\*(C`no 5.13.2\*(C'\fR form of \f(CW\*(C`no\*(C'\fR no longer tries to turn on features or
pragmata (like strict) [perl #70075] (5.12.2).
.IP "\(bu" 4
\&\f(CW\*(C`BEGIN {require 5.12.0}\*(C'\fR now behaves as documented, rather than behaving
identically to \f(CW\*(C`use 5.12.0\*(C'\fR.  Previously, \f(CW\*(C`require\*(C'\fR in a \f(CW\*(C`BEGIN\*(C'\fR block
was erroneously executing the \f(CW\*(C`use feature \*(Aq:5.12.0\*(Aq\*(C'\fR and
\&\f(CW\*(C`use strict\*(C'\fR behaviour, which only \f(CW\*(C`use\*(C'\fR was documented to
provide [perl #69050].
.IP "\(bu" 4
A regression introduced in Perl 5.12.0, making
\&\f(CW\*(C`my $x = 3; $x = length(undef)\*(C'\fR result in \f(CW$x\fR set to \f(CW3\fR has been
fixed.  \f(CW$x\fR will now be \f(CW\*(C`undef\*(C'\fR [perl #85508] (5.12.2).
.IP "\(bu" 4
When strict \*(L"refs\*(R" mode is off, \f(CW\*(C`%{...}\*(C'\fR in rvalue context returns
\&\f(CW\*(C`undef\*(C'\fR if its argument is undefined.  An optimisation introduced in Perl
5.12.0 to make \f(CW\*(C`keys %{...}\*(C'\fR faster when used as a boolean did not take
this into account, causing \f(CW\*(C`keys %{+undef}\*(C'\fR (and \f(CW\*(C`keys %$foo\*(C'\fR when
\&\f(CW$foo\fR is undefined) to be an error, which it should be so in strict
mode only [perl #81750].
.IP "\(bu" 4
Constant-folding used to cause
.Sp
.Vb 1
\&  $text =~ ( 1 ? /phoo/ : /bear/)
.Ve
.Sp
to turn into
.Sp
.Vb 1
\&  $text =~ /phoo/
.Ve
.Sp
at compile time.  Now it correctly matches against \f(CW$_\fR [perl #20444].
.IP "\(bu" 4
Parsing Perl code (either with string \f(CW\*(C`eval\*(C'\fR or by loading modules) from
within a \f(CW\*(C`UNITCHECK\*(C'\fR block no longer causes the interpreter to crash
[perl #70614].
.IP "\(bu" 4
String \f(CW\*(C`eval\*(C'\fRs no longer fail after 2 billion scopes have been
compiled [perl #83364].
.IP "\(bu" 4
The parser no longer hangs when encountering certain Unicode characters,
such as U+387 [perl #74022].
.IP "\(bu" 4
Defining a constant with the same name as one of Perl's special blocks
(like \f(CW\*(C`INIT\*(C'\fR) stopped working in 5.12.0, but has now been fixed
[perl #78634].
.IP "\(bu" 4
A reference to a literal value used as a hash key (\f(CW$hash{\e"foo"}\fR) used
to be stringified, even if the hash was tied [perl #79178].
.IP "\(bu" 4
A closure containing an \f(CW\*(C`if\*(C'\fR statement followed by a constant or variable
is no longer treated as a constant [perl #63540].
.IP "\(bu" 4
\&\f(CW\*(C`state\*(C'\fR can now be used with attributes.  It
used to mean the same thing as
\&\f(CW\*(C`my\*(C'\fR if any attributes were present [perl #68658].
.IP "\(bu" 4
Expressions like \f(CW\*(C`@$a > 3\*(C'\fR no longer cause \f(CW$a\fR to be mentioned in
the \*(L"Use of uninitialized value in numeric gt\*(R" warning when \f(CW$a\fR is
undefined (since it is not part of the \f(CW\*(C`>\*(C'\fR expression, but the operand
of the \f(CW\*(C`@\*(C'\fR) [perl #72090].
.IP "\(bu" 4
Accessing an element of a package array with a hard-coded number (as
opposed to an arbitrary expression) would crash if the array did not exist.
Usually the array would be autovivified during compilation, but typeglob
manipulation could remove it, as in these two cases which used to crash:
.Sp
.Vb 2
\&  *d = *a;  print $d[0];
\&  undef *d; print $d[0];
.Ve
.IP "\(bu" 4
The \fB\-C\fR command-line option, when used on the shebang line, can now be
followed by other options [perl #72434].
.IP "\(bu" 4
The \f(CW\*(C`B\*(C'\fR module was returning \f(CW\*(C`B::OP\*(C'\fRs instead of \f(CW\*(C`B::LOGOP\*(C'\fRs for
\&\f(CW\*(C`entertry\*(C'\fR [perl #80622].  This was due to a bug in the Perl core,
not in \f(CW\*(C`B\*(C'\fR itself.
.SS "Stashes, Globs and Method Lookup"
.IX Subsection "Stashes, Globs and Method Lookup"
Perl 5.10.0 introduced a new internal mechanism for caching MROs (method
resolution orders, or lists of parent classes; aka \*(L"isa\*(R" caches) to make
method lookup faster (so \f(CW@ISA\fR arrays would not have to be searched
repeatedly).  Unfortunately, this brought with it quite a few bugs.  Almost
all of these have been fixed now, along with a few MRO-related bugs that
existed before 5.10.0:
.IP "\(bu" 4
The following used to have erratic effects on method resolution, because
the \*(L"isa\*(R" caches were not reset or otherwise ended up listing the wrong
classes.  These have been fixed.
.RS 4
.IP "Aliasing packages by assigning to globs [perl #77358]" 4
.IX Item "Aliasing packages by assigning to globs [perl #77358]"
.PD 0
.IP "Deleting packages by deleting their containing stash elements" 4
.IX Item "Deleting packages by deleting their containing stash elements"
.ie n .IP "Undefining the glob containing a package (""undef *Foo::"")" 4
.el .IP "Undefining the glob containing a package (\f(CWundef *Foo::\fR)" 4
.IX Item "Undefining the glob containing a package (undef *Foo::)"
.ie n .IP "Undefining an \s-1ISA\s0 glob (""undef *Foo::ISA"")" 4
.el .IP "Undefining an \s-1ISA\s0 glob (\f(CWundef *Foo::ISA\fR)" 4
.IX Item "Undefining an ISA glob (undef *Foo::ISA)"
.ie n .IP "Deleting an \s-1ISA\s0 stash element (""delete $Foo::{ISA}"")" 4
.el .IP "Deleting an \s-1ISA\s0 stash element (\f(CWdelete $Foo::{ISA}\fR)" 4
.IX Item "Deleting an ISA stash element (delete $Foo::{ISA})"
.ie n .IP "Sharing @ISA arrays between classes (via ""*Foo::ISA = \e@Bar::ISA"" or ""*Foo::ISA = *Bar::ISA"") [perl #77238]" 4
.el .IP "Sharing \f(CW@ISA\fR arrays between classes (via \f(CW*Foo::ISA = \e@Bar::ISA\fR or \f(CW*Foo::ISA = *Bar::ISA\fR) [perl #77238]" 4
.IX Item "Sharing @ISA arrays between classes (via *Foo::ISA = @Bar::ISA or *Foo::ISA = *Bar::ISA) [perl #77238]"
.RE
.RS 4
.PD
.Sp
\&\f(CW\*(C`undef *Foo::ISA\*(C'\fR would even stop a new \f(CW@Foo::ISA\fR array from updating
caches.
.RE
.IP "\(bu" 4
Typeglob assignments would crash if the glob's stash no longer existed, so
long as the glob assigned to were named \f(CW\*(C`ISA\*(C'\fR or the glob on either side of
the assignment contained a subroutine.
.IP "\(bu" 4
\&\f(CW\*(C`PL_isarev\*(C'\fR, which is accessible to Perl via \f(CW\*(C`mro::get_isarev\*(C'\fR is now
updated properly when packages are deleted or removed from the \f(CW@ISA\fR of
other classes.  This allows many packages to be created and deleted without
causing a memory leak [perl #75176].
.PP
In addition, various other bugs related to typeglobs and stashes have been
fixed:
.IP "\(bu" 4
Some work has been done on the internal pointers that link between symbol
tables (stashes), typeglobs, and subroutines.  This has the effect that
various edge cases related to deleting stashes or stash entries (for example,
<%FOO:: = ()>), and complex typeglob or code-reference aliasing, will no
longer crash the interpreter.
.IP "\(bu" 4
Assigning a reference to a glob copy now assigns to a glob slot instead of
overwriting the glob with a scalar [perl #1804] [perl #77508].
.IP "\(bu" 4
A bug when replacing the glob of a loop variable within the loop has been fixed
[perl #21469].  This
means the following code will no longer crash:
.Sp
.Vb 3
\&    for $x (...) {
\&        *x = *y;
\&    }
.Ve
.IP "\(bu" 4
Assigning a glob to a \s-1PVLV\s0 used to convert it to a plain string.  Now it
works correctly, and a \s-1PVLV\s0 can hold a glob.  This would happen when a
nonexistent hash or array element was passed to a subroutine:
.Sp
.Vb 2
\&  sub { $_[0] = *foo }\->($hash{key});
\&  # $_[0] would have been the string "*main::foo"
.Ve
.Sp
It also happened when a glob was assigned to, or returned from, an element
of a tied array or hash [perl #36051].
.IP "\(bu" 4
When trying to report \f(CW\*(C`Use of uninitialized value $Foo::BAR\*(C'\fR, crashes could
occur if the glob holding the global variable in question had been detached
from its original stash by, for example, \f(CW\*(C`delete $::{"Foo::"}\*(C'\fR.  This has
been fixed by disabling the reporting of variable names in those
cases.
.IP "\(bu" 4
During the restoration of a localised typeglob on scope exit, any
destructors called as a result would be able to see the typeglob in an
inconsistent state, containing freed entries, which could result in a
crash.  This would affect code like this:
.Sp
.Vb 5
\&  local *@;
\&  eval { die bless [] }; # puts an object in $@
\&  sub DESTROY {
\&    local $@; # boom
\&  }
.Ve
.Sp
Now the glob entries are cleared before any destructors are called.  This
also means that destructors can vivify entries in the glob.  So Perl tries
again and, if the entries are re-created too many times, dies with a
\&\*(L"panic: gp_free ...\*(R" error message.
.IP "\(bu" 4
If a typeglob is freed while a subroutine attached to it is still
referenced elsewhere, the subroutine is renamed to \f(CW\*(C`_\|_ANON_\|_\*(C'\fR in the same
package, unless the package has been undefined, in which case the \f(CW\*(C`_\|_ANON_\|_\*(C'\fR
package is used.  This could cause packages to be sometimes autovivified,
such as if the package had been deleted.  Now this no longer occurs.
The \f(CW\*(C`_\|_ANON_\|_\*(C'\fR package is also now used when the original package is
no longer attached to the symbol table.  This avoids memory leaks in some
cases [perl #87664].
.IP "\(bu" 4
Subroutines and package variables inside a package whose name ends with
\&\f(CW\*(C`::\*(C'\fR can now be accessed with a fully qualified name.
.SS "Unicode"
.IX Subsection "Unicode"
.IP "\(bu" 4
What has become known as \*(L"the Unicode Bug\*(R" is almost completely resolved in
this release.  Under \f(CW\*(C`use feature \*(Aqunicode_strings\*(Aq\*(C'\fR (which is
automatically selected by \f(CW\*(C`use 5.012\*(C'\fR and above), the internal
storage format of a string no longer affects the external semantics.
[perl #58182].
.Sp
There are two known exceptions:
.RS 4
.IP "1." 4
The now-deprecated, user-defined case-changing
functions require utf8\-encoded strings to operate.  The \s-1CPAN\s0 module
Unicode::Casing has been written to replace this feature without its
drawbacks, and the feature is scheduled to be removed in 5.16.
.IP "2." 4
\&\fIquotemeta()\fR (and its in-line equivalent \f(CW\*(C`\eQ\*(C'\fR) can also give different
results depending on whether a string is encoded in \s-1UTF\-8. \s0 See
\&\*(L"The \*(R"Unicode Bug"" in perlunicode.
.RE
.RS 4
.RE
.IP "\(bu" 4
Handling of Unicode non-character code points has changed.
Previously they were mostly considered illegal, except that in some
place only one of the 66 of them was known.  The Unicode Standard
considers them all legal, but forbids their \*(L"open interchange\*(R".
This is part of the change to allow internal use of any code
point (see \*(L"Core Enhancements\*(R").  Together, these changes resolve
[perl #38722], [perl #51918], [perl #51936], and [perl #63446].
.IP "\(bu" 4
Case-insensitive \f(CW"/i"\fR regular expression matching of Unicode
characters that match multiple characters now works much more as
intended.  For example
.Sp
.Vb 1
\& "\eN{LATIN SMALL LIGATURE FFI}" =~ /ffi/ui
.Ve
.Sp
and
.Sp
.Vb 1
\& "ffi" =~ /\eN{LATIN SMALL LIGATURE FFI}/ui
.Ve
.Sp
are both true.  Previously, there were many bugs with this feature.
What hasn't been fixed are the places where the pattern contains the
multiple characters, but the characters are split up by other things,
such as in
.Sp
.Vb 1
\& "\eN{LATIN SMALL LIGATURE FFI}" =~ /(f)(f)i/ui
.Ve
.Sp
or
.Sp
.Vb 1
\& "\eN{LATIN SMALL LIGATURE FFI}" =~ /ffi*/ui
.Ve
.Sp
or
.Sp
.Vb 1
\& "\eN{LATIN SMALL LIGATURE FFI}" =~ /[a\-f][f\-m][g\-z]/ui
.Ve
.Sp
None of these match.
.Sp
Also, this matching doesn't fully conform to the current Unicode
Standard, which asks that the matching be made upon the \s-1NFD
\&\s0(Normalization Form Decomposed) of the text.  However, as of this
writing (April 2010), the Unicode Standard is currently in flux about
what they will recommend doing with regard in such scenarios.  It may be
that they will throw out the whole concept of multi-character matches.
[perl #71736].
.IP "\(bu" 4
Naming a deprecated character in \f(CW\*(C`\eN{\f(CINAME\f(CW}\*(C'\fR no longer leaks memory.
.IP "\(bu" 4
We fixed a bug that could cause \f(CW\*(C`\eN{\f(CINAME\f(CW}\*(C'\fR constructs followed by
a single \f(CW"."\fR to be parsed incorrectly [perl #74978] (5.12.1).
.IP "\(bu" 4
\&\f(CW\*(C`chop\*(C'\fR now correctly handles characters above \f(CW"\ex{7fffffff}"\fR
[perl #73246].
.IP "\(bu" 4
Passing to \f(CW\*(C`index\*(C'\fR an offset beyond the end of the string when the string
is encoded internally in \s-1UTF8\s0 no longer causes panics [perl #75898].
.IP "\(bu" 4
\&\fIwarn()\fR and \fIdie()\fR now respect utf8\-encoded scalars [perl #45549].
.IP "\(bu" 4
Sometimes the \s-1UTF8\s0 length cache would not be reset on a value
returned by substr, causing \f(CW\*(C`length(substr($uni_string, ...))\*(C'\fR to give
wrong answers.  With \f(CW\*(C`${^UTF8CACHE}\*(C'\fR set to \-1, it would also produce
a \*(L"panic\*(R" error message [perl #77692].
.SS "Ties, Overloading and Other Magic"
.IX Subsection "Ties, Overloading and Other Magic"
.IP "\(bu" 4
Overloading now works properly in conjunction with tied
variables.  What formerly happened was that most ops checked their
arguments for overloading \fIbefore\fR checking for magic, so for example
an overloaded object returned by a tied array access would usually be
treated as not overloaded [\s-1RT\s0 #57012].
.IP "\(bu" 4
Various instances of magic (like tie methods) being called on tied variables
too many or too few times have been fixed:
.RS 4
.IP "\(bu" 4
\&\f(CW\*(C`$tied\->()\*(C'\fR did not always call \s-1FETCH\s0 [perl #8438].
.IP "\(bu" 4
Filetest operators and \f(CW\*(C`y///\*(C'\fR and \f(CW\*(C`tr///\*(C'\fR were calling \s-1FETCH\s0 too
many times.
.IP "\(bu" 4
The \f(CW\*(C`=\*(C'\fR operator used to ignore magic on its right-hand side if the
scalar happened to hold a typeglob (if a typeglob was the last thing
returned from or assigned to a tied scalar) [perl #77498].
.IP "\(bu" 4
Dereference operators used to ignore magic if the argument was a
reference already (such as from a previous \s-1FETCH\s0) [perl #72144].
.IP "\(bu" 4
\&\f(CW\*(C`splice\*(C'\fR now calls set-magic (so changes made
by \f(CW\*(C`splice @ISA\*(C'\fR are respected by method calls) [perl #78400].
.IP "\(bu" 4
In-memory files created by \f(CW\*(C`open($fh, ">", \e$buffer)\*(C'\fR were not calling
\&\s-1FETCH/STORE\s0 at all [perl #43789] (5.12.2).
.IP "\(bu" 4
\&\fIutf8::is_utf8()\fR now respects get-magic (like \f(CW$1\fR) (5.12.1).
.RE
.RS 4
.RE
.IP "\(bu" 4
Non-commutative binary operators used to swap their operands if the same
tied scalar was used for both operands and returned a different value for
each \s-1FETCH. \s0 For instance, if \f(CW$t\fR returned 2 the first time and 3 the
second, then \f(CW\*(C`$t/$t\*(C'\fR would evaluate to 1.5.  This has been fixed
[perl #87708].
.IP "\(bu" 4
String \f(CW\*(C`eval\*(C'\fR now detects taintedness of overloaded or tied
arguments [perl #75716].
.IP "\(bu" 4
String \f(CW\*(C`eval\*(C'\fR and regular expression matches against objects with string
overloading no longer cause memory corruption or crashes [perl #77084].
.IP "\(bu" 4
readline now honors \f(CW\*(C`<>\*(C'\fR overloading on tied
arguments.
.IP "\(bu" 4
\&\f(CW\*(C`<expr>\*(C'\fR always respects overloading now if the expression is
overloaded.
.Sp
Because \*(L"<>\ as glob\*(R" was parsed differently from
\&\*(L"<>\ as filehandle\*(R" from 5.6 onwards, something like \f(CW\*(C`<$foo[0]>\*(C'\fR did
not handle overloading, even if \f(CW$foo[0]\fR was an overloaded object.  This
was contrary to the documentation for overload, and meant that \f(CW\*(C`<>\*(C'\fR
could not be used as a general overloaded iterator operator.
.IP "\(bu" 4
The fallback behaviour of overloading on binary operators was asymmetric
[perl #71286].
.IP "\(bu" 4
Magic applied to variables in the main package no longer affects other packages.
See \*(L"Magic variables outside the main package\*(R" above [perl #76138].
.IP "\(bu" 4
Sometimes magic (ties, taintedness, etc.) attached to variables could cause
an object to last longer than it should, or cause a crash if a tied
variable were freed from within a tie method.  These have been fixed
[perl #81230].
.IP "\(bu" 4
\&\s-1DESTROY\s0 methods of objects implementing ties are no longer able to crash by
accessing the tied variable through a weak reference [perl #86328].
.IP "\(bu" 4
Fixed a regression of \fIkill()\fR when a match variable is used for the
process \s-1ID\s0 to kill [perl #75812].
.IP "\(bu" 4
\&\f(CW$AUTOLOAD\fR used to remain tainted forever if it ever became tainted.  Now
it is correctly untainted if an autoloaded method is called and the method
name was not tainted.
.IP "\(bu" 4
\&\f(CW\*(C`sprintf\*(C'\fR now dies when passed a tainted scalar for the format.  It did
already die for arbitrary expressions, but not for simple scalars
[perl #82250].
.IP "\(bu" 4
\&\f(CW\*(C`lc\*(C'\fR, \f(CW\*(C`uc\*(C'\fR, \f(CW\*(C`lcfirst\*(C'\fR, and \f(CW\*(C`ucfirst\*(C'\fR no longer return untainted strings
when the argument is tainted.  This has been broken since perl 5.8.9
[perl #87336].
.SS "The Debugger"
.IX Subsection "The Debugger"
.IP "\(bu" 4
The Perl debugger now also works in taint mode [perl #76872].
.IP "\(bu" 4
Subroutine redefinition works once more in the debugger [perl #48332].
.IP "\(bu" 4
When \fB\-d\fR is used on the shebang (\f(CW\*(C`#!\*(C'\fR) line, the debugger now has access
to the lines of the main program.  In the past, this sometimes worked and
sometimes did not, depending on the order in which things happened to be
arranged in memory [perl #71806].
.IP "\(bu" 4
A possible memory leak when using \fIcaller()\fR to set
\&\f(CW@DB::args\fR has been fixed (5.12.2).
.IP "\(bu" 4
Perl no longer stomps on \f(CW$DB::single\fR, \f(CW$DB::trace\fR, and \f(CW$DB::signal\fR 
if these variables already have values when \f(CW$^P\fR is assigned to [perl #72422].
.IP "\(bu" 4
\&\f(CW\*(C`#line\*(C'\fR directives in string evals were not properly updating the arrays
of lines of code (\f(CW\*(C`@{"_< ..."}\*(C'\fR) that the debugger (or any debugging or
profiling module) uses.  In threaded builds, they were not being updated at
all.  In non-threaded builds, the line number was ignored, so any change to
the existing line number would cause the lines to be misnumbered
[perl #79442].
.SS "Threads"
.IX Subsection "Threads"
.IP "\(bu" 4
Perl no longer accidentally clones lexicals in scope within active stack
frames in the parent when creating a child thread [perl #73086].
.IP "\(bu" 4
Several memory leaks in cloning and freeing threaded Perl interpreters have been
fixed [perl #77352].
.IP "\(bu" 4
Creating a new thread when directory handles were open used to cause a
crash, because the handles were not cloned, but simply passed to the new
thread, resulting in a double free.
.Sp
Now directory handles are cloned properly on Windows
and on systems that have a \f(CW\*(C`fchdir\*(C'\fR function.  On other
systems, new threads simply do not inherit directory
handles from their parent threads [perl #75154].
.IP "\(bu" 4
The typeglob \f(CW\*(C`*,\*(C'\fR, which holds the scalar variable \f(CW$,\fR (output field
separator), had the wrong reference count in child threads.
.IP "\(bu" 4
[perl #78494] When pipes are shared between threads, the \f(CW\*(C`close\*(C'\fR function
(and any implicit close, such as on thread exit) no longer blocks.
.IP "\(bu" 4
Perl now does a timely cleanup of SVs that are cloned into a new
thread but then discovered to be orphaned (that is, their owners
are \fInot\fR cloned).  This eliminates several \*(L"scalars leaked\*(R"
warnings when joining threads.
.SS "Scoping and Subroutines"
.IX Subsection "Scoping and Subroutines"
.IP "\(bu" 4
Lvalue subroutines are again able to return copy-on-write scalars.  This
had been broken since version 5.10.0 [perl #75656] (5.12.3).
.IP "\(bu" 4
\&\f(CW\*(C`require\*(C'\fR no longer causes \f(CW\*(C`caller\*(C'\fR to return the wrong file name for
the scope that called \f(CW\*(C`require\*(C'\fR and other scopes higher up that had the
same file name [perl #68712].
.IP "\(bu" 4
\&\f(CW\*(C`sort\*(C'\fR with a \f(CW\*(C`($$)\*(C'\fR\-prototyped comparison routine used to cause the value
of \f(CW@_\fR to leak out of the sort.  Taking a reference to \f(CW@_\fR within the
sorting routine could cause a crash [perl #72334].
.IP "\(bu" 4
Match variables (like \f(CW$1\fR) no longer persist between calls to a sort
subroutine [perl #76026].
.IP "\(bu" 4
Iterating with \f(CW\*(C`foreach\*(C'\fR over an array returned by an lvalue sub now works
[perl #23790].
.IP "\(bu" 4
\&\f(CW$@\fR is now localised during calls to \f(CW\*(C`binmode\*(C'\fR to prevent action at a
distance [perl #78844].
.IP "\(bu" 4
Calling a closure prototype (what is passed to an attribute handler for a
closure) now results in a \*(L"Closure prototype called\*(R" error message instead
of a crash [perl #68560].
.IP "\(bu" 4
Mentioning a read-only lexical variable from the enclosing scope in a
string \f(CW\*(C`eval\*(C'\fR no longer causes the variable to become writable
[perl #19135].
.SS "Signals"
.IX Subsection "Signals"
.IP "\(bu" 4
Within signal handlers, \f(CW$!\fR is now implicitly localized.
.IP "\(bu" 4
\&\s-1CHLD\s0 signals are no longer unblocked after a signal handler is called if
they were blocked before by \f(CW\*(C`POSIX::sigprocmask\*(C'\fR [perl #82040].
.IP "\(bu" 4
A signal handler called within a signal handler could cause leaks or
double-frees.  Now fixed [perl #76248].
.SS "Miscellaneous Memory Leaks"
.IX Subsection "Miscellaneous Memory Leaks"
.IP "\(bu" 4
Several memory leaks when loading \s-1XS\s0 modules were fixed (5.12.2).
.IP "\(bu" 4
\&\fIsubstr()\fR,
\&\fIpos()\fR, \fIkeys()\fR,
and \fIvec()\fR could, when used in combination
with lvalues, result in leaking the scalar value they operate on, and cause its
destruction to happen too late.  This has now been fixed.
.IP "\(bu" 4
The postincrement and postdecrement operators, \f(CW\*(C`++\*(C'\fR and \f(CW\*(C`\-\-\*(C'\fR, used to cause
leaks when used on references.  This has now been fixed.
.IP "\(bu" 4
Nested \f(CW\*(C`map\*(C'\fR and \f(CW\*(C`grep\*(C'\fR blocks no longer leak memory when processing
large lists [perl #48004].
.IP "\(bu" 4
\&\f(CW\*(C`use \f(CIVERSION\f(CW\*(C'\fR and \f(CW\*(C`no \f(CIVERSION\f(CW\*(C'\fR no longer leak memory [perl #78436]
[perl #69050].
.IP "\(bu" 4
\&\f(CW\*(C`.=\*(C'\fR followed by \f(CW\*(C`<>\*(C'\fR or \f(CW\*(C`readline\*(C'\fR would leak memory if \f(CW$/\fR
contained characters beyond the octet range and the scalar assigned to
happened to be encoded as \s-1UTF8\s0 internally [perl #72246].
.IP "\(bu" 4
\&\f(CW\*(C`eval \*(AqBEGIN{die}\*(Aq\*(C'\fR no longer leaks memory on non-threaded builds.
.SS "Memory Corruption and Crashes"
.IX Subsection "Memory Corruption and Crashes"
.IP "\(bu" 4
\&\fIglob()\fR no longer crashes when \f(CW%File::Glob::\fR is empty and
\&\f(CW\*(C`CORE::GLOBAL::glob\*(C'\fR isn't present [perl #75464] (5.12.2).
.IP "\(bu" 4
\&\fIreadline()\fR has been fixed when interrupted by signals so it no longer
returns the \*(L"same thing\*(R" as before or random memory.
.IP "\(bu" 4
When assigning a list with duplicated keys to a hash, the assignment used to
return garbage and/or freed values:
.Sp
.Vb 1
\&    @a = %h = (list with some duplicate keys);
.Ve
.Sp
This has now been fixed [perl #31865].
.IP "\(bu" 4
The mechanism for freeing objects in globs used to leave dangling
pointers to freed SVs, meaning Perl users could see corrupted state
during destruction.
.Sp
Perl now frees only the affected slots of the \s-1GV,\s0 rather than freeing
the \s-1GV\s0 itself.  This makes sure that there are no dangling refs or
corrupted state during destruction.
.IP "\(bu" 4
The interpreter no longer crashes when freeing deeply-nested arrays of
arrays.  Hashes have not been fixed yet [perl #44225].
.IP "\(bu" 4
Concatenating long strings under \f(CW\*(C`use encoding\*(C'\fR no longer causes Perl to
crash [perl #78674].
.IP "\(bu" 4
Calling \f(CW\*(C`\->import\*(C'\fR on a class lacking an import method could corrupt
the stack, resulting in strange behaviour.  For instance,
.Sp
.Vb 1
\&  push @a, "foo", $b = bar\->import;
.Ve
.Sp
would assign \*(L"foo\*(R" to \f(CW$b\fR [perl #63790].
.IP "\(bu" 4
The \f(CW\*(C`recv\*(C'\fR function could crash when called with the \s-1MSG_TRUNC\s0 flag
[perl #75082].
.IP "\(bu" 4
\&\f(CW\*(C`formline\*(C'\fR no longer crashes when passed a tainted format picture.  It also
taints \f(CW$^A\fR now if its arguments are tainted [perl #79138].
.IP "\(bu" 4
A bug in how we process filetest operations could cause a segfault.
Filetests don't always expect an op on the stack, so we now use
TOPs only if we're sure that we're not \f(CW\*(C`stat\*(C'\fRing the \f(CW\*(C`_\*(C'\fR filehandle.
This is indicated by \f(CW\*(C`OPf_KIDS\*(C'\fR (as checked in ck_ftst) [perl #74542]
(5.12.1).
.IP "\(bu" 4
\&\fIunpack()\fR now handles scalar context correctly for \f(CW%32H\fR and \f(CW%32u\fR,
fixing a potential crash.  \fIsplit()\fR would crash because the third item
on the stack wasn't the regular expression it expected.  \f(CW\*(C`unpack("%2H",
\&...)\*(C'\fR would return both the unpacked result and the checksum on the stack,
as would \f(CW\*(C`unpack("%2u", ...)\*(C'\fR [perl #73814] (5.12.2).
.SS "Fixes to Various Perl Operators"
.IX Subsection "Fixes to Various Perl Operators"
.IP "\(bu" 4
The \f(CW\*(C`&\*(C'\fR, \f(CW\*(C`|\*(C'\fR, and \f(CW\*(C`^\*(C'\fR bitwise operators no longer coerce read-only arguments
[perl #20661].
.IP "\(bu" 4
Stringifying a scalar containing \*(L"\-0.0\*(R" no longer has the effect of turning
false into true [perl #45133].
.IP "\(bu" 4
Some numeric operators were converting integers to floating point,
resulting in loss of precision on 64\-bit platforms [perl #77456].
.IP "\(bu" 4
\&\fIsprintf()\fR was ignoring locales when called with constant arguments
[perl #78632].
.IP "\(bu" 4
Combining the vector (\f(CW%v\fR) flag and dynamic precision would
cause \f(CW\*(C`sprintf\*(C'\fR to confuse the order of its arguments, making it 
treat the string as the precision and vice-versa [perl #83194].
.SS "Bugs Relating to the C \s-1API\s0"
.IX Subsection "Bugs Relating to the C API"
.IP "\(bu" 4
The C\-level \f(CW\*(C`lex_stuff_pvn\*(C'\fR function would sometimes cause a spurious
syntax error on the last line of the file if it lacked a final semicolon
[perl #74006] (5.12.1).
.IP "\(bu" 4
The \f(CW\*(C`eval_sv\*(C'\fR and \f(CW\*(C`eval_pv\*(C'\fR C functions now set \f(CW$@\fR correctly when
there is a syntax error and no \f(CW\*(C`G_KEEPERR\*(C'\fR flag, and never set it if the
\&\f(CW\*(C`G_KEEPERR\*(C'\fR flag is present [perl #3719].
.IP "\(bu" 4
The \s-1XS\s0 multicall \s-1API\s0 no longer causes subroutines to lose reference counts
if called via the multicall interface from within those very subroutines.
This affects modules like List::Util.  Calling one of its functions with an
active subroutine as the first argument could cause a crash [perl #78070].
.IP "\(bu" 4
The \f(CW\*(C`SvPVbyte\*(C'\fR function available to \s-1XS\s0 modules now calls magic before
downgrading the \s-1SV,\s0 to avoid warnings about wide characters [perl #72398].
.IP "\(bu" 4
The ref types in the typemap for \s-1XS\s0 bindings now support magical variables
[perl #72684].
.IP "\(bu" 4
\&\f(CW\*(C`sv_catsv_flags\*(C'\fR no longer calls \f(CW\*(C`mg_get\*(C'\fR on its second argument (the
source string) if the flags passed to it do not include \s-1SV_GMAGIC. \s0 So it
now matches the documentation.
.IP "\(bu" 4
\&\f(CW\*(C`my_strftime\*(C'\fR no longer leaks memory.  This fixes a memory leak in
\&\f(CW\*(C`POSIX::strftime\*(C'\fR [perl #73520].
.IP "\(bu" 4
\&\fI\s-1XSUB\s0.h\fR now correctly redefines fgets under \s-1PERL_IMPLICIT_SYS\s0 [perl #55049]
(5.12.1).
.IP "\(bu" 4
\&\s-1XS\s0 code using \fIfputc()\fR or \fIfputs()\fR on Windows could cause an error
due to their arguments being swapped [perl #72704] (5.12.1).
.IP "\(bu" 4
A possible segfault in the \f(CW\*(C`T_PTROBJ\*(C'\fR default typemap has been fixed
(5.12.2).
.IP "\(bu" 4
A bug that could cause \*(L"Unknown error\*(R" messages when
\&\f(CW\*(C`call_sv(code, G_EVAL)\*(C'\fR is called from an \s-1XS\s0 destructor has been fixed
(5.12.2).
.SH "Known Problems"
.IX Header "Known Problems"
This is a list of significant unresolved issues which are regressions
from earlier versions of Perl or which affect widely-used \s-1CPAN\s0 modules.
.IP "\(bu" 4
\&\f(CW\*(C`List::Util::first\*(C'\fR misbehaves in the presence of a lexical \f(CW$_\fR
(typically introduced by \f(CW\*(C`my $_\*(C'\fR or implicitly by \f(CW\*(C`given\*(C'\fR).  The variable
that gets set for each iteration is the package variable \f(CW$_\fR, not the
lexical \f(CW$_\fR.
.Sp
A similar issue may occur in other modules that provide functions which
take a block as their first argument, like
.Sp
.Vb 1
\&    foo { ... $_ ...} list
.Ve
.Sp
See also: <http://rt.perl.org/rt3/Public/Bug/Display.html?id=67694>
.IP "\(bu" 4
\&\fIreadline()\fR returns an empty string instead of a cached previous value
when it is interrupted by a signal
.IP "\(bu" 4
The changes in prototype handling break Switch.  A patch has been sent
upstream and will hopefully appear on \s-1CPAN\s0 soon.
.IP "\(bu" 4
The upgrade to \fIExtUtils\-MakeMaker\-6.57_05\fR has caused
some tests in the \fIModule-Install\fR distribution on \s-1CPAN\s0 to
fail. (Specifically, \fI02_mymeta.t\fR tests 5 and 21; \fI18_all_from.t\fR
tests 6 and 15; \fI19_authors.t\fR tests 5, 13, 21, and 29; and
\&\fI20_authors_with_special_characters.t\fR tests 6, 15, and 23 in version
1.00 of that distribution now fail.)
.IP "\(bu" 4
On \s-1VMS, \s0\f(CW\*(C`Time::HiRes\*(C'\fR tests will fail due to a bug in the \s-1CRTL\s0's
implementation of \f(CW\*(C`setitimer\*(C'\fR: previous timer values would be cleared
if a timer expired but not if the timer was reset before expiring.  \s-1HP\s0
OpenVMS Engineering have corrected the problem and will release a patch
in due course (Quix case # \s-1QXCM1001115136\s0).
.IP "\(bu" 4
On \s-1VMS,\s0 there were a handful of \f(CW\*(C`Module::Build\*(C'\fR test failures we didn't
get to before the release; please watch \s-1CPAN\s0 for updates.
.SH "Errata"
.IX Header "Errata"
.SS "\fIkeys()\fP, \fIvalues()\fP, and \fIeach()\fP work on arrays"
.IX Subsection "keys(), values(), and each() work on arrays"
You can now use the \fIkeys()\fR, \fIvalues()\fR, and \fIeach()\fR builtins on arrays;
previously you could use them only on hashes.  See perlfunc for details.
This is actually a change introduced in perl 5.12.0, but it was missed from
that release's perl5120delta.
.ie n .SS "\fIsplit()\fP and @_"
.el .SS "\fIsplit()\fP and \f(CW@_\fP"
.IX Subsection "split() and @_"
\&\fIsplit()\fR no longer modifies \f(CW@_\fR when called in scalar or void context.
In void context it now produces a \*(L"Useless use of split\*(R" warning.
This was also a perl 5.12.0 change that missed the perldelta.
.SH "Obituary"
.IX Header "Obituary"
Randy Kobes, creator of http://kobesearch.cpan.org/ and
contributor/maintainer to several core Perl toolchain modules, passed
away on September 18, 2010 after a battle with lung cancer.  The community
was richer for his involvement.  He will be missed.
.SH "Acknowledgements"
.IX Header "Acknowledgements"
Perl 5.14.0 represents one year of development since
Perl 5.12.0 and contains nearly 550,000 lines of changes across nearly
3,000 files from 150 authors and committers.
.PP
Perl continues to flourish into its third decade thanks to a vibrant
community of users and developers.  The following people are known to
have contributed the improvements that became Perl 5.14.0:
.PP
Aaron Crane, Abhijit Menon-Sen, Abigail, \*(Aevar Arnfjo\*:r\*(d- Bjarmason,
Alastair Douglas, Alexander Alekseev, Alexander Hartmaier, Alexandr
Ciornii, Alex Davies, Alex Vandiver, Ali Polatel, Allen Smith, Andreas
Ko\*:nig, Andrew Rodland, Andy Armstrong, Andy Dougherty, Aristotle
Pagaltzis, Arkturuz, Arvan, A. Sinan Unur, Ben Morrow, Bo Lindbergh,
Boris Ratner, Brad Gilbert, Bram, brian d foy, Brian Phillips, Casey
West, Charles Bailey, Chas. Owens, Chip Salzenberg, Chris 'BinGOs'
Williams, chromatic, Craig A. Berry, Curtis Jewell, Dagfinn Ilmari
Mannsa\*oker, Dan Dascalescu, Dave Rolsky, David Caldwell, David Cantrell,
David Golden, David Leadbeater, David Mitchell, David Wheeler, Eric
Brine, Father Chrysostomos, Fingle Nark, Florian Ragwitz, Frank Wiegand,
Franz Fasching, Gene Sullivan, George Greer, Gerard Goossen, Gisle Aas,
Goro Fuji, Grant McLean, gregor herrmann, H.Merijn Brand, Hongwen Qiu,
Hugo van der Sanden, Ian Goodacre, James E Keenan, James Mastros, Jan
Dubois, Jay Hannah, Jerry D. Hedden, Jesse Vincent, Jim Cromie, Jirka
HruXka, John Peacock, Joshua ben Jore, Joshua Pritikin, Karl Williamson,
Kevin Ryde, kmx, Lars \s-1DXXXXXX XXX,\s0 Larwan Berke, Leon Brocard, Leon
Timmermans, Lubomir Rintel, Lukas Mai, Maik Hentsche, Marty Pauley,
Marvin Humphrey, Matt Johnson, Matt S Trout, Max Maischein, Michael
Breen, Michael Fig, Michael G Schwern, Michael Parker, Michael Stevens,
Michael Witten, Mike Kelly, Moritz Lenz, Nicholas Clark, Nick Cleaton,
Nick Johnston, Nicolas Kaiser, Niko Tyni, Noirin Shirley, Nuno Carvalho,
Paul Evans, Paul Green, Paul Johnson, Paul Marquess, Peter J. Holzer,
Peter John Acklam, Peter Martini, Philippe Bruhat (BooK), Piotr Fusik,
Rafael Garcia-Suarez, Rainer Tammer, Reini Urban, Renee Baecker, Ricardo
Signes, Richard Mo\*:hn, Richard Soderberg, Rob Hoelz, Robin Barker, Ruslan
Zakirov, Salvador Fandin\*~o, Salvador Ortiz Garcia, Shlomi Fish, Sinan
Unur, Sisyphus, Slaven Rezic, Steffen Mu\*:ller, Steve Hay, Steven
Schubiger, Steve Peters, Sullivan Beck, Tatsuhiko Miyagawa, Tim Bunce,
Todd Rinaldo, Tom Christiansen, Tom Hukins, Tony Cook, Tye McQueen,
Vadim Konovalov, Vernon Lyon, Vincent Pit, Walt Mankowski, Wolfram
Humann, Yves Orton, Zefram, and Zsba\*'n Ambrus.
.PP
This is woefully incomplete as it's automatically generated from version
control history.  In particular, it doesn't include the names of the
(very much appreciated) contributors who reported issues in previous
versions of Perl that helped make Perl 5.14.0 better. For a more complete
list of all of Perl's historical contributors, please see the \f(CW\*(C`AUTHORS\*(C'\fR
file in the Perl 5.14.0 distribution.
.PP
Many of the changes included in this version originated in the \s-1CPAN\s0
modules included in Perl's core. We're grateful to the entire \s-1CPAN\s0
community for helping Perl to flourish.
.SH "Reporting Bugs"
.IX Header "Reporting Bugs"
If you find what you think is a bug, you might check the articles
recently posted to the comp.lang.perl.misc newsgroup and the Perl
bug database at http://rt.perl.org/perlbug/ .  There may also be
information at http://www.perl.org/ , the Perl Home Page.
.PP
If you believe you have an unreported bug, please run the perlbug
program included with your release.  Be sure to trim your bug down
to a tiny but sufficient test case.  Your bug report, along with the
output of \f(CW\*(C`perl \-V\*(C'\fR, will be sent off to perlbug@perl.org to be
analysed by the Perl porting team.
.PP
If the bug you are reporting has security implications, which make it
inappropriate to send to a publicly archived mailing list, then please send
it to perl5\-security\-report@perl.org.  This points to a closed subscription
unarchived mailing list, which includes all the core committers, who are able
to help assess the impact of issues, figure out a resolution, and help
co-ordinate the release of patches to mitigate or fix the problem across all
platforms on which Perl is supported.  Please use this address for
security issues in the Perl core \fIonly\fR, not for modules independently
distributed on \s-1CPAN.\s0
.SH "SEE ALSO"
.IX Header "SEE ALSO"
The \fIChanges\fR file for an explanation of how to view exhaustive details
on what changed.
.PP
The \fI\s-1INSTALL\s0\fR file for how to build Perl.
.PP
The \fI\s-1README\s0\fR file for general stuff.
.PP
The \fIArtistic\fR and \fICopying\fR files for copyright information.
                                                                                                  osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perl5141delta.1                              0100644 0001750 0001750 00000032212 12566207432 023226  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERL5141DELTA 1"
.TH PERL5141DELTA 1 "2013-11-04" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perl5141delta \- what is new for perl v5.14.1
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document describes differences between the 5.14.0 release and
the 5.14.1 release.
.PP
If you are upgrading from an earlier release such as 5.12.0, first read
perl5140delta, which describes differences between 5.12.0 and
5.14.0.
.SH "Core Enhancements"
.IX Header "Core Enhancements"
No changes since 5.14.0.
.SH "Security"
.IX Header "Security"
No changes since 5.14.0.
.SH "Incompatible Changes"
.IX Header "Incompatible Changes"
There are no changes intentionally incompatible with 5.14.0. If any
exist, they are bugs and reports are welcome.
.SH "Deprecations"
.IX Header "Deprecations"
There have been no deprecations since 5.14.0.
.SH "Modules and Pragmata"
.IX Header "Modules and Pragmata"
.SS "New Modules and Pragmata"
.IX Subsection "New Modules and Pragmata"
None
.SS "Updated Modules and Pragmata"
.IX Subsection "Updated Modules and Pragmata"
.IP "\(bu" 4
B::Deparse has been upgraded from version 1.03 to 1.04, to address two
regressions in Perl 5.14.0:
.Sp
Deparsing of the \f(CW\*(C`glob\*(C'\fR operator and its diamond (\f(CW\*(C`<>\*(C'\fR) form now
works again. [perl #90898]
.Sp
The presence of subroutines named \f(CW\*(C`::::\*(C'\fR or \f(CW\*(C`::::::\*(C'\fR no longer causes
B::Deparse to hang.
.IP "\(bu" 4
Pod::Perldoc has been upgraded from version 3.15_03 to 3.15_04.
.Sp
It corrects the search paths on \s-1VMS.\s0 [perl #90640]
.SS "Removed Modules and Pragmata"
.IX Subsection "Removed Modules and Pragmata"
None
.SH "Documentation"
.IX Header "Documentation"
.SS "New Documentation"
.IX Subsection "New Documentation"
None
.SS "Changes to Existing Documentation"
.IX Subsection "Changes to Existing Documentation"
\fIperlfunc\fR
.IX Subsection "perlfunc"
.IP "\(bu" 4
\&\f(CW\*(C`given\*(C'\fR, \f(CW\*(C`when\*(C'\fR and \f(CW\*(C`default\*(C'\fR are now listed in perlfunc.
.IP "\(bu" 4
Documentation for \f(CW\*(C`use\*(C'\fR now includes a pointer to \fIif.pm\fR.
.PP
\fIperllol\fR
.IX Subsection "perllol"
.IP "\(bu" 4
perllol has been expanded with examples using the new \f(CW\*(C`push $scalar\*(C'\fR
syntax introduced in Perl 5.14.0.
.PP
\fIperlop\fR
.IX Subsection "perlop"
.IP "\(bu" 4
The explanation of bitwise operators has been expanded to explain how they
work on Unicode strings.
.IP "\(bu" 4
The section on the triple-dot or yada-yada operator has been moved up, as
it used to separate two closely related sections about the comma operator.
.IP "\(bu" 4
More examples for \f(CW\*(C`m//g\*(C'\fR have been added.
.IP "\(bu" 4
The \f(CW\*(C`<<\eFOO\*(C'\fR here-doc syntax has been documented.
.PP
\fIperlrun\fR
.IX Subsection "perlrun"
.IP "\(bu" 4
perlrun has undergone a significant clean-up.  Most notably, the
\&\fB\-0x...\fR form of the \fB\-0\fR flag has been clarified, and the final section
on environment variables has been corrected and expanded.
.PP
\fI\s-1POSIX\s0\fR
.IX Subsection "POSIX"
.IP "\(bu" 4
The invocation documentation for \f(CW\*(C`WIFEXITED\*(C'\fR, \f(CW\*(C`WEXITSTATUS\*(C'\fR,
\&\f(CW\*(C`WIFSIGNALED\*(C'\fR, \f(CW\*(C`WTERMSIG\*(C'\fR, \f(CW\*(C`WIFSTOPPED\*(C'\fR, and \f(CW\*(C`WSTOPSIG\*(C'\fR was corrected.
.SH "Diagnostics"
.IX Header "Diagnostics"
The following additions or changes have been made to diagnostic output,
including warnings and fatal error messages.  For the complete list of
diagnostic messages, see perldiag.
.SS "New Diagnostics"
.IX Subsection "New Diagnostics"
None
.SS "Changes to Existing Diagnostics"
.IX Subsection "Changes to Existing Diagnostics"
None
.SH "Utility Changes"
.IX Header "Utility Changes"
None
.SH "Configuration and Compilation"
.IX Header "Configuration and Compilation"
.IP "\(bu" 4
\&\fIregexp.h\fR has been modified for compatibility with \s-1GCC\s0's \f(CW\*(C`\-Werror\*(C'\fR
option, as used by some projects that include perl's header files.
.SH "Testing"
.IX Header "Testing"
.IP "\(bu" 4
Some test failures in \fIdist/Locale\-Maketext/t/09_compile.t\fR that could
occur depending on the environment have been fixed. [perl #89896]
.IP "\(bu" 4
A watchdog timer for \fIt/re/re.t\fR was lengthened to accommodate \s-1SH\-4\s0 systems
which were unable to complete the tests before the previous timer ran out.
.SH "Platform Support"
.IX Header "Platform Support"
.SS "New Platforms"
.IX Subsection "New Platforms"
None
.SS "Discontinued Platforms"
.IX Subsection "Discontinued Platforms"
None
.SS "Platform-Specific Notes"
.IX Subsection "Platform-Specific Notes"
\fISolaris\fR
.IX Subsection "Solaris"
.IP "\(bu" 4
Documentation listing the Solaris packages required to build Perl on
Solaris 9 and Solaris 10 has been corrected.
.PP
\fIMac \s-1OS X\s0\fR
.IX Subsection "Mac OS X"
.IP "\(bu" 4
The \fIlib/locale.t\fR test script has been updated to work on the upcoming
Lion release.
.IP "\(bu" 4
Mac \s-1OS X\s0 specific compilation instructions have been clarified.
.PP
\fIUbuntu Linux\fR
.IX Subsection "Ubuntu Linux"
.IP "\(bu" 4
The ODBM_File installation process has been updated with the new library
paths on Ubuntu natty.
.SH "Internal Changes"
.IX Header "Internal Changes"
.IP "\(bu" 4
The compiled representation of formats is now stored via the mg_ptr of
their PERL_MAGIC_fm. Previously it was stored in the string buffer,
beyond \fISvLEN()\fR, the regular end of the string. \fISvCOMPILED()\fR and
SvCOMPILED_{on,off}() now exist solely for compatibility for \s-1XS\s0 code.
The first is always 0, the other two now no-ops.
.SH "Bug Fixes"
.IX Header "Bug Fixes"
.IP "\(bu" 4
A bug has been fixed that would cause a \*(L"Use of freed value in iteration\*(R"
error if the next two hash elements that would be iterated over are
deleted. [perl #85026]
.IP "\(bu" 4
Passing the same constant subroutine to both \f(CW\*(C`index\*(C'\fR and \f(CW\*(C`formline\*(C'\fR no
longer causes one or the other to fail. [perl #89218]
.IP "\(bu" 4
5.14.0 introduced some memory leaks in regular expression character
classes such as \f(CW\*(C`[\ew\es]\*(C'\fR, which have now been fixed.
.IP "\(bu" 4
An edge case in regular expression matching could potentially loop.
This happened only under \f(CW\*(C`/i\*(C'\fR in bracketed character classes that have
characters with multi-character folds, and the target string to match
against includes the first portion of the fold, followed by another
character that has a multi-character fold that begins with the remaining
portion of the fold, plus some more.
.Sp
.Vb 1
\& "s\eN{U+DF}" =~ /[\ex{DF}foo]/i
.Ve
.Sp
is one such case.  \f(CW\*(C`\exDF\*(C'\fR folds to \f(CW"ss"\fR.
.IP "\(bu" 4
Several Unicode case-folding bugs have been fixed.
.IP "\(bu" 4
The new (in 5.14.0) regular expression modifier \f(CW\*(C`/a\*(C'\fR when repeated like
\&\f(CW\*(C`/aa\*(C'\fR forbids the characters outside the \s-1ASCII\s0 range that match
characters inside that range from matching under \f(CW\*(C`/i\*(C'\fR.  This did not
work under some circumstances, all involving alternation, such as:
.Sp
.Vb 1
\& "\eN{KELVIN SIGN}" =~ /k|foo/iaa;
.Ve
.Sp
succeeded inappropriately.  This is now fixed.
.IP "\(bu" 4
Fixed a case where it was possible that a freed buffer may have been read
from when parsing a here document.
.SH "Acknowledgements"
.IX Header "Acknowledgements"
Perl 5.14.1 represents approximately four weeks of development since
Perl 5.14.0 and contains approximately 3500 lines of changes
across 38 files from 17 authors.
.PP
Perl continues to flourish into its third decade thanks to a vibrant
community of users and developers.  The following people are known to
have contributed the improvements that became Perl 5.14.1:
.PP
Bo Lindbergh, Claudio Ramirez, Craig A. Berry, David Leadbeater, Father
Chrysostomos, Jesse Vincent, Jim Cromie, Justin Case, Karl Williamson,
Leo Lapworth, Nicholas Clark, Nobuhiro Iwamatsu, smash, Tom Christiansen,
Ton Hospel, Vladimir Timofeev, and Zsba\*'n Ambrus.
.SH "Reporting Bugs"
.IX Header "Reporting Bugs"
If you find what you think is a bug, you might check the articles
recently posted to the comp.lang.perl.misc newsgroup and the perl
bug database at http://rt.perl.org/perlbug/ .  There may also be
information at http://www.perl.org/ , the Perl Home Page.
.PP
If you believe you have an unreported bug, please run the perlbug
program included with your release.  Be sure to trim your bug down
to a tiny but sufficient test case.  Your bug report, along with the
output of \f(CW\*(C`perl \-V\*(C'\fR, will be sent off to perlbug@perl.org to be
analysed by the Perl porting team.
.PP
If the bug you are reporting has security implications, which make it
inappropriate to send to a publicly archived mailing list, then please send
it to perl5\-security\-report@perl.org. This points to a closed subscription
unarchived mailing list, which includes all the core committers, who be able
to help assess the impact of issues, figure out a resolution, and help
co-ordinate the release of patches to mitigate or fix the problem across all
platforms on which Perl is supported. Please only use this address for
security issues in the Perl core, not for modules independently
distributed on \s-1CPAN.\s0
.SH "SEE ALSO"
.IX Header "SEE ALSO"
The \fIChanges\fR file for an explanation of how to view exhaustive details
on what changed.
.PP
The \fI\s-1INSTALL\s0\fR file for how to build Perl.
.PP
The \fI\s-1README\s0\fR file for general stuff.
.PP
The \fIArtistic\fR and \fICopying\fR files for copyright information.
                                                                                                                                                                                                                                                                                                                                                                                      osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perl5141delta5.16.1                          0100644 0001750 0001750 00000031671 12566207412 023546  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERL5141DELTA 1"
.TH PERL5141DELTA 1 "2013-03-04" "perl v5.16.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perl5141delta \- what is new for perl v5.14.1
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document describes differences between the 5.14.0 release and
the 5.14.1 release.
.PP
If you are upgrading from an earlier release such as 5.12.0, first read
perl5140delta, which describes differences between 5.12.0 and
5.14.0.
.SH "Core Enhancements"
.IX Header "Core Enhancements"
No changes since 5.14.0.
.SH "Security"
.IX Header "Security"
No changes since 5.14.0.
.SH "Incompatible Changes"
.IX Header "Incompatible Changes"
There are no changes intentionally incompatible with 5.14.0. If any
exist, they are bugs and reports are welcome.
.SH "Deprecations"
.IX Header "Deprecations"
There have been no deprecations since 5.14.0.
.SH "Modules and Pragmata"
.IX Header "Modules and Pragmata"
.SS "New Modules and Pragmata"
.IX Subsection "New Modules and Pragmata"
None
.SS "Updated Modules and Pragmata"
.IX Subsection "Updated Modules and Pragmata"
.IP "\(bu" 4
B::Deparse has been upgraded from version 1.03 to 1.04, to address two
regressions in Perl 5.14.0:
.Sp
Deparsing of the \f(CW\*(C`glob\*(C'\fR operator and its diamond (\f(CW\*(C`<>\*(C'\fR) form now
works again. [perl #90898]
.Sp
The presence of subroutines named \f(CW\*(C`::::\*(C'\fR or \f(CW\*(C`::::::\*(C'\fR no longer causes
B::Deparse to hang.
.IP "\(bu" 4
Pod::Perldoc has been upgraded from version 3.15_03 to 3.15_04.
.Sp
It corrects the search paths on \s-1VMS\s0. [perl #90640]
.SS "Removed Modules and Pragmata"
.IX Subsection "Removed Modules and Pragmata"
None
.SH "Documentation"
.IX Header "Documentation"
.SS "New Documentation"
.IX Subsection "New Documentation"
None
.SS "Changes to Existing Documentation"
.IX Subsection "Changes to Existing Documentation"
\fIperlfunc\fR
.IX Subsection "perlfunc"
.IP "\(bu" 4
\&\f(CW\*(C`given\*(C'\fR, \f(CW\*(C`when\*(C'\fR and \f(CW\*(C`default\*(C'\fR are now listed in perlfunc.
.IP "\(bu" 4
Documentation for \f(CW\*(C`use\*(C'\fR now includes a pointer to \fIif.pm\fR.
.PP
\fIperllol\fR
.IX Subsection "perllol"
.IP "\(bu" 4
perllol has been expanded with examples using the new \f(CW\*(C`push $scalar\*(C'\fR
syntax introduced in Perl 5.14.0.
.PP
\fIperlop\fR
.IX Subsection "perlop"
.IP "\(bu" 4
The explanation of bitwise operators has been expanded to explain how they
work on Unicode strings.
.IP "\(bu" 4
The section on the triple-dot or yada-yada operator has been moved up, as
it used to separate two closely related sections about the comma operator.
.IP "\(bu" 4
More examples for \f(CW\*(C`m//g\*(C'\fR have been added.
.IP "\(bu" 4
The \f(CW\*(C`<<\eFOO\*(C'\fR here-doc syntax has been documented.
.PP
\fIperlrun\fR
.IX Subsection "perlrun"
.IP "\(bu" 4
perlrun has undergone a significant clean-up.  Most notably, the
\&\fB\-0x...\fR form of the \fB\-0\fR flag has been clarified, and the final section
on environment variables has been corrected and expanded.
.PP
\fI\s-1POSIX\s0\fR
.IX Subsection "POSIX"
.IP "\(bu" 4
The invocation documentation for \f(CW\*(C`WIFEXITED\*(C'\fR, \f(CW\*(C`WEXITSTATUS\*(C'\fR,
\&\f(CW\*(C`WIFSIGNALED\*(C'\fR, \f(CW\*(C`WTERMSIG\*(C'\fR, \f(CW\*(C`WIFSTOPPED\*(C'\fR, and \f(CW\*(C`WSTOPSIG\*(C'\fR was corrected.
.SH "Diagnostics"
.IX Header "Diagnostics"
The following additions or changes have been made to diagnostic output,
including warnings and fatal error messages.  For the complete list of
diagnostic messages, see perldiag.
.SS "New Diagnostics"
.IX Subsection "New Diagnostics"
None
.SS "Changes to Existing Diagnostics"
.IX Subsection "Changes to Existing Diagnostics"
None
.SH "Utility Changes"
.IX Header "Utility Changes"
None
.SH "Configuration and Compilation"
.IX Header "Configuration and Compilation"
.IP "\(bu" 4
\&\fIregexp.h\fR has been modified for compatibility with \s-1GCC\s0's \f(CW\*(C`\-Werror\*(C'\fR
option, as used by some projects that include perl's header files.
.SH "Testing"
.IX Header "Testing"
.IP "\(bu" 4
Some test failures in \fIdist/Locale\-Maketext/t/09_compile.t\fR that could
occur depending on the environment have been fixed. [perl #89896]
.IP "\(bu" 4
A watchdog timer for \fIt/re/re.t\fR was lengthened to accommodate \s-1SH\-4\s0 systems
which were unable to complete the tests before the previous timer ran out.
.SH "Platform Support"
.IX Header "Platform Support"
.SS "New Platforms"
.IX Subsection "New Platforms"
None
.SS "Discontinued Platforms"
.IX Subsection "Discontinued Platforms"
None
.SS "Platform-Specific Notes"
.IX Subsection "Platform-Specific Notes"
\fISolaris\fR
.IX Subsection "Solaris"
.IP "\(bu" 4
Documentation listing the Solaris packages required to build Perl on
Solaris 9 and Solaris 10 has been corrected.
.PP
\fIMac \s-1OS\s0 X\fR
.IX Subsection "Mac OS X"
.IP "\(bu" 4
The \fIlib/locale.t\fR test script has been updated to work on the upcoming
Lion release.
.IP "\(bu" 4
Mac \s-1OS\s0 X specific compilation instructions have been clarified.
.PP
\fIUbuntu Linux\fR
.IX Subsection "Ubuntu Linux"
.IP "\(bu" 4
The ODBM_File installation process has been updated with the new library
paths on Ubuntu natty.
.SH "Internal Changes"
.IX Header "Internal Changes"
.IP "\(bu" 4
The compiled representation of formats is now stored via the mg_ptr of
their PERL_MAGIC_fm. Previously it was stored in the string buffer,
beyond \fISvLEN()\fR, the regular end of the string. \fISvCOMPILED()\fR and
SvCOMPILED_{on,off}() now exist solely for compatibility for \s-1XS\s0 code.
The first is always 0, the other two now no-ops.
.SH "Bug Fixes"
.IX Header "Bug Fixes"
.IP "\(bu" 4
A bug has been fixed that would cause a \*(L"Use of freed value in iteration\*(R"
error if the next two hash elements that would be iterated over are
deleted. [perl #85026]
.IP "\(bu" 4
Passing the same constant subroutine to both \f(CW\*(C`index\*(C'\fR and \f(CW\*(C`formline\*(C'\fR no
longer causes one or the other to fail. [perl #89218]
.IP "\(bu" 4
5.14.0 introduced some memory leaks in regular expression character
classes such as \f(CW\*(C`[\ew\es]\*(C'\fR, which have now been fixed.
.IP "\(bu" 4
An edge case in regular expression matching could potentially loop.
This happened only under \f(CW\*(C`/i\*(C'\fR in bracketed character classes that have
characters with multi-character folds, and the target string to match
against includes the first portion of the fold, followed by another
character that has a multi-character fold that begins with the remaining
portion of the fold, plus some more.
.Sp
.Vb 1
\& "s\eN{U+DF}" =~ /[\ex{DF}foo]/i
.Ve
.Sp
is one such case.  \f(CW\*(C`\exDF\*(C'\fR folds to \f(CW"ss"\fR.
.IP "\(bu" 4
Several Unicode case-folding bugs have been fixed.
.IP "\(bu" 4
The new (in 5.14.0) regular expression modifier \f(CW\*(C`/a\*(C'\fR when repeated like
\&\f(CW\*(C`/aa\*(C'\fR forbids the characters outside the \s-1ASCII\s0 range that match
characters inside that range from matching under \f(CW\*(C`/i\*(C'\fR.  This did not
work under some circumstances, all involving alternation, such as:
.Sp
.Vb 1
\& "\eN{KELVIN SIGN}" =~ /k|foo/iaa;
.Ve
.Sp
succeeded inappropriately.  This is now fixed.
.IP "\(bu" 4
Fixed a case where it was possible that a freed buffer may have been read
from when parsing a here document.
.SH "Acknowledgements"
.IX Header "Acknowledgements"
Perl 5.14.1 represents approximately four weeks of development since
Perl 5.14.0 and contains approximately 3500 lines of changes
across 38 files from 17 authors.
.PP
Perl continues to flourish into its third decade thanks to a vibrant
community of users and developers.  The following people are known to
have contributed the improvements that became Perl 5.14.1:
.PP
Bo Lindbergh, Claudio Ramirez, Craig A. Berry, David Leadbeater, Father
Chrysostomos, Jesse Vincent, Jim Cromie, Justin Case, Karl Williamson,
Leo Lapworth, Nicholas Clark, Nobuhiro Iwamatsu, smash, Tom Christiansen,
Ton Hospel, Vladimir Timofeev, and Zsba\*'n Ambrus.
.SH "Reporting Bugs"
.IX Header "Reporting Bugs"
If you find what you think is a bug, you might check the articles
recently posted to the comp.lang.perl.misc newsgroup and the perl
bug database at http://rt.perl.org/perlbug/ .  There may also be
information at http://www.perl.org/ , the Perl Home Page.
.PP
If you believe you have an unreported bug, please run the perlbug
program included with your release.  Be sure to trim your bug down
to a tiny but sufficient test case.  Your bug report, along with the
output of \f(CW\*(C`perl \-V\*(C'\fR, will be sent off to perlbug@perl.org to be
analysed by the Perl porting team.
.PP
If the bug you are reporting has security implications, which make it
inappropriate to send to a publicly archived mailing list, then please send
it to perl5\-security\-report@perl.org. This points to a closed subscription
unarchived mailing list, which includes all the core committers, who be able
to help assess the impact of issues, figure out a resolution, and help
co-ordinate the release of patches to mitigate or fix the problem across all
platforms on which Perl is supported. Please only use this address for
security issues in the Perl core, not for modules independently
distributed on \s-1CPAN\s0.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
The \fIChanges\fR file for an explanation of how to view exhaustive details
on what changed.
.PP
The \fI\s-1INSTALL\s0\fR file for how to build Perl.
.PP
The \fI\s-1README\s0\fR file for general stuff.
.PP
The \fIArtistic\fR and \fICopying\fR files for copyright information.
                                                                       osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perl5141delta5.18.1                          0100644 0001750 0001750 00000032212 12566207432 023542  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERL5141DELTA 1"
.TH PERL5141DELTA 1 "2013-11-04" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perl5141delta \- what is new for perl v5.14.1
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document describes differences between the 5.14.0 release and
the 5.14.1 release.
.PP
If you are upgrading from an earlier release such as 5.12.0, first read
perl5140delta, which describes differences between 5.12.0 and
5.14.0.
.SH "Core Enhancements"
.IX Header "Core Enhancements"
No changes since 5.14.0.
.SH "Security"
.IX Header "Security"
No changes since 5.14.0.
.SH "Incompatible Changes"
.IX Header "Incompatible Changes"
There are no changes intentionally incompatible with 5.14.0. If any
exist, they are bugs and reports are welcome.
.SH "Deprecations"
.IX Header "Deprecations"
There have been no deprecations since 5.14.0.
.SH "Modules and Pragmata"
.IX Header "Modules and Pragmata"
.SS "New Modules and Pragmata"
.IX Subsection "New Modules and Pragmata"
None
.SS "Updated Modules and Pragmata"
.IX Subsection "Updated Modules and Pragmata"
.IP "\(bu" 4
B::Deparse has been upgraded from version 1.03 to 1.04, to address two
regressions in Perl 5.14.0:
.Sp
Deparsing of the \f(CW\*(C`glob\*(C'\fR operator and its diamond (\f(CW\*(C`<>\*(C'\fR) form now
works again. [perl #90898]
.Sp
The presence of subroutines named \f(CW\*(C`::::\*(C'\fR or \f(CW\*(C`::::::\*(C'\fR no longer causes
B::Deparse to hang.
.IP "\(bu" 4
Pod::Perldoc has been upgraded from version 3.15_03 to 3.15_04.
.Sp
It corrects the search paths on \s-1VMS.\s0 [perl #90640]
.SS "Removed Modules and Pragmata"
.IX Subsection "Removed Modules and Pragmata"
None
.SH "Documentation"
.IX Header "Documentation"
.SS "New Documentation"
.IX Subsection "New Documentation"
None
.SS "Changes to Existing Documentation"
.IX Subsection "Changes to Existing Documentation"
\fIperlfunc\fR
.IX Subsection "perlfunc"
.IP "\(bu" 4
\&\f(CW\*(C`given\*(C'\fR, \f(CW\*(C`when\*(C'\fR and \f(CW\*(C`default\*(C'\fR are now listed in perlfunc.
.IP "\(bu" 4
Documentation for \f(CW\*(C`use\*(C'\fR now includes a pointer to \fIif.pm\fR.
.PP
\fIperllol\fR
.IX Subsection "perllol"
.IP "\(bu" 4
perllol has been expanded with examples using the new \f(CW\*(C`push $scalar\*(C'\fR
syntax introduced in Perl 5.14.0.
.PP
\fIperlop\fR
.IX Subsection "perlop"
.IP "\(bu" 4
The explanation of bitwise operators has been expanded to explain how they
work on Unicode strings.
.IP "\(bu" 4
The section on the triple-dot or yada-yada operator has been moved up, as
it used to separate two closely related sections about the comma operator.
.IP "\(bu" 4
More examples for \f(CW\*(C`m//g\*(C'\fR have been added.
.IP "\(bu" 4
The \f(CW\*(C`<<\eFOO\*(C'\fR here-doc syntax has been documented.
.PP
\fIperlrun\fR
.IX Subsection "perlrun"
.IP "\(bu" 4
perlrun has undergone a significant clean-up.  Most notably, the
\&\fB\-0x...\fR form of the \fB\-0\fR flag has been clarified, and the final section
on environment variables has been corrected and expanded.
.PP
\fI\s-1POSIX\s0\fR
.IX Subsection "POSIX"
.IP "\(bu" 4
The invocation documentation for \f(CW\*(C`WIFEXITED\*(C'\fR, \f(CW\*(C`WEXITSTATUS\*(C'\fR,
\&\f(CW\*(C`WIFSIGNALED\*(C'\fR, \f(CW\*(C`WTERMSIG\*(C'\fR, \f(CW\*(C`WIFSTOPPED\*(C'\fR, and \f(CW\*(C`WSTOPSIG\*(C'\fR was corrected.
.SH "Diagnostics"
.IX Header "Diagnostics"
The following additions or changes have been made to diagnostic output,
including warnings and fatal error messages.  For the complete list of
diagnostic messages, see perldiag.
.SS "New Diagnostics"
.IX Subsection "New Diagnostics"
None
.SS "Changes to Existing Diagnostics"
.IX Subsection "Changes to Existing Diagnostics"
None
.SH "Utility Changes"
.IX Header "Utility Changes"
None
.SH "Configuration and Compilation"
.IX Header "Configuration and Compilation"
.IP "\(bu" 4
\&\fIregexp.h\fR has been modified for compatibility with \s-1GCC\s0's \f(CW\*(C`\-Werror\*(C'\fR
option, as used by some projects that include perl's header files.
.SH "Testing"
.IX Header "Testing"
.IP "\(bu" 4
Some test failures in \fIdist/Locale\-Maketext/t/09_compile.t\fR that could
occur depending on the environment have been fixed. [perl #89896]
.IP "\(bu" 4
A watchdog timer for \fIt/re/re.t\fR was lengthened to accommodate \s-1SH\-4\s0 systems
which were unable to complete the tests before the previous timer ran out.
.SH "Platform Support"
.IX Header "Platform Support"
.SS "New Platforms"
.IX Subsection "New Platforms"
None
.SS "Discontinued Platforms"
.IX Subsection "Discontinued Platforms"
None
.SS "Platform-Specific Notes"
.IX Subsection "Platform-Specific Notes"
\fISolaris\fR
.IX Subsection "Solaris"
.IP "\(bu" 4
Documentation listing the Solaris packages required to build Perl on
Solaris 9 and Solaris 10 has been corrected.
.PP
\fIMac \s-1OS X\s0\fR
.IX Subsection "Mac OS X"
.IP "\(bu" 4
The \fIlib/locale.t\fR test script has been updated to work on the upcoming
Lion release.
.IP "\(bu" 4
Mac \s-1OS X\s0 specific compilation instructions have been clarified.
.PP
\fIUbuntu Linux\fR
.IX Subsection "Ubuntu Linux"
.IP "\(bu" 4
The ODBM_File installation process has been updated with the new library
paths on Ubuntu natty.
.SH "Internal Changes"
.IX Header "Internal Changes"
.IP "\(bu" 4
The compiled representation of formats is now stored via the mg_ptr of
their PERL_MAGIC_fm. Previously it was stored in the string buffer,
beyond \fISvLEN()\fR, the regular end of the string. \fISvCOMPILED()\fR and
SvCOMPILED_{on,off}() now exist solely for compatibility for \s-1XS\s0 code.
The first is always 0, the other two now no-ops.
.SH "Bug Fixes"
.IX Header "Bug Fixes"
.IP "\(bu" 4
A bug has been fixed that would cause a \*(L"Use of freed value in iteration\*(R"
error if the next two hash elements that would be iterated over are
deleted. [perl #85026]
.IP "\(bu" 4
Passing the same constant subroutine to both \f(CW\*(C`index\*(C'\fR and \f(CW\*(C`formline\*(C'\fR no
longer causes one or the other to fail. [perl #89218]
.IP "\(bu" 4
5.14.0 introduced some memory leaks in regular expression character
classes such as \f(CW\*(C`[\ew\es]\*(C'\fR, which have now been fixed.
.IP "\(bu" 4
An edge case in regular expression matching could potentially loop.
This happened only under \f(CW\*(C`/i\*(C'\fR in bracketed character classes that have
characters with multi-character folds, and the target string to match
against includes the first portion of the fold, followed by another
character that has a multi-character fold that begins with the remaining
portion of the fold, plus some more.
.Sp
.Vb 1
\& "s\eN{U+DF}" =~ /[\ex{DF}foo]/i
.Ve
.Sp
is one such case.  \f(CW\*(C`\exDF\*(C'\fR folds to \f(CW"ss"\fR.
.IP "\(bu" 4
Several Unicode case-folding bugs have been fixed.
.IP "\(bu" 4
The new (in 5.14.0) regular expression modifier \f(CW\*(C`/a\*(C'\fR when repeated like
\&\f(CW\*(C`/aa\*(C'\fR forbids the characters outside the \s-1ASCII\s0 range that match
characters inside that range from matching under \f(CW\*(C`/i\*(C'\fR.  This did not
work under some circumstances, all involving alternation, such as:
.Sp
.Vb 1
\& "\eN{KELVIN SIGN}" =~ /k|foo/iaa;
.Ve
.Sp
succeeded inappropriately.  This is now fixed.
.IP "\(bu" 4
Fixed a case where it was possible that a freed buffer may have been read
from when parsing a here document.
.SH "Acknowledgements"
.IX Header "Acknowledgements"
Perl 5.14.1 represents approximately four weeks of development since
Perl 5.14.0 and contains approximately 3500 lines of changes
across 38 files from 17 authors.
.PP
Perl continues to flourish into its third decade thanks to a vibrant
community of users and developers.  The following people are known to
have contributed the improvements that became Perl 5.14.1:
.PP
Bo Lindbergh, Claudio Ramirez, Craig A. Berry, David Leadbeater, Father
Chrysostomos, Jesse Vincent, Jim Cromie, Justin Case, Karl Williamson,
Leo Lapworth, Nicholas Clark, Nobuhiro Iwamatsu, smash, Tom Christiansen,
Ton Hospel, Vladimir Timofeev, and Zsba\*'n Ambrus.
.SH "Reporting Bugs"
.IX Header "Reporting Bugs"
If you find what you think is a bug, you might check the articles
recently posted to the comp.lang.perl.misc newsgroup and the perl
bug database at http://rt.perl.org/perlbug/ .  There may also be
information at http://www.perl.org/ , the Perl Home Page.
.PP
If you believe you have an unreported bug, please run the perlbug
program included with your release.  Be sure to trim your bug down
to a tiny but sufficient test case.  Your bug report, along with the
output of \f(CW\*(C`perl \-V\*(C'\fR, will be sent off to perlbug@perl.org to be
analysed by the Perl porting team.
.PP
If the bug you are reporting has security implications, which make it
inappropriate to send to a publicly archived mailing list, then please send
it to perl5\-security\-report@perl.org. This points to a closed subscription
unarchived mailing list, which includes all the core committers, who be able
to help assess the impact of issues, figure out a resolution, and help
co-ordinate the release of patches to mitigate or fix the problem across all
platforms on which Perl is supported. Please only use this address for
security issues in the Perl core, not for modules independently
distributed on \s-1CPAN.\s0
.SH "SEE ALSO"
.IX Header "SEE ALSO"
The \fIChanges\fR file for an explanation of how to view exhaustive details
on what changed.
.PP
The \fI\s-1INSTALL\s0\fR file for how to build Perl.
.PP
The \fI\s-1README\s0\fR file for general stuff.
.PP
The \fIArtistic\fR and \fICopying\fR files for copyright information.
                                                                                                                                                                                                                                                                                                                                                                                      osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perl5142delta.1                              0100644 0001750 0001750 00000030135 12566207432 023231  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERL5142DELTA 1"
.TH PERL5142DELTA 1 "2013-11-04" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perl5142delta \- what is new for perl v5.14.2
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document describes differences between the 5.14.1 release and
the 5.14.2 release.
.PP
If you are upgrading from an earlier release such as 5.14.0, first read
perl5141delta, which describes differences between 5.14.0 and
5.14.1.
.SH "Core Enhancements"
.IX Header "Core Enhancements"
No changes since 5.14.0.
.SH "Security"
.IX Header "Security"
.ie n .SS """File::Glob::bsd_glob()"" memory error with \s-1GLOB_ALTDIRFUNC \s0(\s-1CVE\-2011\-2728\s0)."
.el .SS "\f(CWFile::Glob::bsd_glob()\fP memory error with \s-1GLOB_ALTDIRFUNC \s0(\s-1CVE\-2011\-2728\s0)."
.IX Subsection "File::Glob::bsd_glob() memory error with GLOB_ALTDIRFUNC (CVE-2011-2728)."
Calling \f(CW\*(C`File::Glob::bsd_glob\*(C'\fR with the unsupported flag \s-1GLOB_ALTDIRFUNC\s0 would
cause an access violation / segfault.  A Perl program that accepts a flags value from
an external source could expose itself to denial of service or arbitrary code
execution attacks.  There are no known exploits in the wild.  The problem has been
corrected by explicitly disabling all unsupported flags and setting unused function
pointers to null.  Bug reported by Cle\*'ment Lecigne.
.ie n .SS """Encode"" decode_xs n\-byte heap-overflow (\s-1CVE\-2011\-2939\s0)"
.el .SS "\f(CWEncode\fP decode_xs n\-byte heap-overflow (\s-1CVE\-2011\-2939\s0)"
.IX Subsection "Encode decode_xs n-byte heap-overflow (CVE-2011-2939)"
A bug in \f(CW\*(C`Encode\*(C'\fR could, on certain inputs, cause the heap to overflow.
This problem has been corrected.  Bug reported by Robert Zacek.
.SH "Incompatible Changes"
.IX Header "Incompatible Changes"
There are no changes intentionally incompatible with 5.14.0. If any
exist, they are bugs and reports are welcome.
.SH "Deprecations"
.IX Header "Deprecations"
There have been no deprecations since 5.14.0.
.SH "Modules and Pragmata"
.IX Header "Modules and Pragmata"
.SS "New Modules and Pragmata"
.IX Subsection "New Modules and Pragmata"
None
.SS "Updated Modules and Pragmata"
.IX Subsection "Updated Modules and Pragmata"
.IP "\(bu" 4
\&\s-1CPAN\s0 has been upgraded from version 1.9600 to version 1.9600_01.
.Sp
CPAN::Distribution has been upgraded from version 1.9602 to 1.9602_01.
.Sp
Backported bugfixes from \s-1CPAN\s0 version 1.9800.  Ensures proper
detection of \f(CW\*(C`configure_requires\*(C'\fR prerequisites from \s-1CPAN\s0 Meta files
in the case where \f(CW\*(C`dynamic_config\*(C'\fR is true.  [rt.cpan.org #68835]
.Sp
Also ensures that \f(CW\*(C`configure_requires\*(C'\fR is only checked in \s-1META\s0 files,
not \s-1MYMETA\s0 files, so protect against \s-1MYMETA\s0 generation that drops
\&\f(CW\*(C`configure_requires\*(C'\fR.
.IP "\(bu" 4
Encode has been upgraded from version 2.42 to 2.42_01.
.Sp
See \*(L"Security\*(R".
.IP "\(bu" 4
File::Glob has been upgraded from version 1.12 to version 1.13.
.Sp
See \*(L"Security\*(R".
.IP "\(bu" 4
PerlIO::scalar has been upgraded from version 0.11 to 0.11_01.
.Sp
It fixes a problem with \f(CW\*(C`open my $fh, ">", \e$scalar\*(C'\fR not working if
\&\f(CW$scalar\fR is a copy-on-write scalar.
.SS "Removed Modules and Pragmata"
.IX Subsection "Removed Modules and Pragmata"
None
.SH "Platform Support"
.IX Header "Platform Support"
.SS "New Platforms"
.IX Subsection "New Platforms"
None
.SS "Discontinued Platforms"
.IX Subsection "Discontinued Platforms"
None
.SS "Platform-Specific Notes"
.IX Subsection "Platform-Specific Notes"
.IP "HP-UX \s-1PA\-RISC/64\s0 now supports gcc\-4.x" 4
.IX Item "HP-UX PA-RISC/64 now supports gcc-4.x"
A fix to correct the socketsize now makes the test suite pass on HP-UX
PA-RISC for 64bitall builds.
.IP "Building on \s-1OS X 10.7\s0 Lion and Xcode 4 works again" 4
.IX Item "Building on OS X 10.7 Lion and Xcode 4 works again"
The build system has been updated to work with the build tools under Mac \s-1OS X
10.7.\s0
.SH "Bug Fixes"
.IX Header "Bug Fixes"
.IP "\(bu" 4
In \f(CW@INC\fR filters (subroutines returned by subroutines in \f(CW@INC\fR), \f(CW$_\fR used to
misbehave: If returned from a subroutine, it would not be copied, but the
variable itself would be returned; and freeing \f(CW$_\fR (e.g., with \f(CW\*(C`undef *_\*(C'\fR)
would cause perl to crash.  This has been fixed [perl #91880].
.IP "\(bu" 4
Perl 5.10.0 introduced some faulty logic that made \*(L"U*\*(R" in the middle of
a pack template equivalent to \*(L"U0\*(R" if the input string was empty.  This has
been fixed [perl #90160].
.IP "\(bu" 4
\&\f(CW\*(C`caller\*(C'\fR no longer leaks memory when called from the \s-1DB\s0 package if
\&\f(CW@DB::args\fR was assigned to after the first call to \f(CW\*(C`caller\*(C'\fR.  Carp
was triggering this bug [perl #97010].
.IP "\(bu" 4
\&\f(CW\*(C`utf8::decode\*(C'\fR had a nasty bug that would modify copy-on-write scalars'
string buffers in place (i.e., skipping the copy).  This could result in
hashes having two elements with the same key [perl #91834].
.IP "\(bu" 4
Localising a tied variable used to make it read-only if it contained a
copy-on-write string.
.IP "\(bu" 4
Elements of restricted hashes (see the fields pragma) containing
copy-on-write values couldn't be deleted, nor could such hashes be cleared
(\f(CW\*(C`%hash = ()\*(C'\fR).
.IP "\(bu" 4
Locking a hash element that is a glob copy no longer causes subsequent
assignment to it to corrupt the glob.
.IP "\(bu" 4
A panic involving the combination of the regular expression modifiers
\&\f(CW\*(C`/aa\*(C'\fR introduced in 5.14.0 and the \f(CW\*(C`\eb\*(C'\fR escape sequence has been
fixed [perl #95964].
.SH "Known Problems"
.IX Header "Known Problems"
This is a list of some significant unfixed bugs, which are regressions
from 5.12.0.
.IP "\(bu" 4
\&\f(CW\*(C`PERL_GLOBAL_STRUCT\*(C'\fR is broken.
.Sp
Since perl 5.14.0, building with \f(CW\*(C`\-DPERL_GLOBAL_STRUCT\*(C'\fR hasn't been
possible. This means that perl currently doesn't work on any platforms that
require it to be built this way, including Symbian.
.Sp
While \f(CW\*(C`PERL_GLOBAL_STRUCT\*(C'\fR now works again on recent development versions of
perl, it actually working on Symbian again hasn't been verified.
.Sp
We'd be very interested in hearing from anyone working with Perl on Symbian.
.SH "Acknowledgements"
.IX Header "Acknowledgements"
Perl 5.14.2 represents approximately three months of development since
Perl 5.14.1 and contains approximately 1200 lines of changes
across 61 files from 9 authors.
.PP
Perl continues to flourish into its third decade thanks to a vibrant
community of users and developers.  The following people are known to
have contributed the improvements that became Perl 5.14.2:
.PP
Craig A. Berry, David Golden, Father Chrysostomos, Florian Ragwitz, H.Merijn
Brand, Karl Williamson, Nicholas Clark, Pau Amma and Ricardo Signes.
.SH "Reporting Bugs"
.IX Header "Reporting Bugs"
If you find what you think is a bug, you might check the articles
recently posted to the comp.lang.perl.misc newsgroup and the perl
bug database at http://rt.perl.org/perlbug/ .  There may also be
information at http://www.perl.org/ , the Perl Home Page.
.PP
If you believe you have an unreported bug, please run the perlbug
program included with your release.  Be sure to trim your bug down
to a tiny but sufficient test case.  Your bug report, along with the
output of \f(CW\*(C`perl \-V\*(C'\fR, will be sent off to perlbug@perl.org to be
analysed by the Perl porting team.
.PP
If the bug you are reporting has security implications, which make it
inappropriate to send to a publicly archived mailing list, then please send
it to perl5\-security\-report@perl.org. This points to a closed subscription
unarchived mailing list, which includes all the core committers, who be able
to help assess the impact of issues, figure out a resolution, and help
co-ordinate the release of patches to mitigate or fix the problem across all
platforms on which Perl is supported. Please only use this address for
security issues in the Perl core, not for modules independently
distributed on \s-1CPAN.\s0
.SH "SEE ALSO"
.IX Header "SEE ALSO"
The \fIChanges\fR file for an explanation of how to view exhaustive details
on what changed.
.PP
The \fI\s-1INSTALL\s0\fR file for how to build Perl.
.PP
The \fI\s-1README\s0\fR file for general stuff.
.PP
The \fIArtistic\fR and \fICopying\fR files for copyright information.
                                                                                                                                                                                                                                                                                                                                                                                                                                   osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perl5142delta5.16.1                          0100644 0001750 0001750 00000027614 12566207412 023551  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERL5142DELTA 1"
.TH PERL5142DELTA 1 "2013-03-04" "perl v5.16.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perl5142delta \- what is new for perl v5.14.2
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document describes differences between the 5.14.1 release and
the 5.14.2 release.
.PP
If you are upgrading from an earlier release such as 5.14.0, first read
perl5141delta, which describes differences between 5.14.0 and
5.14.1.
.SH "Core Enhancements"
.IX Header "Core Enhancements"
No changes since 5.14.0.
.SH "Security"
.IX Header "Security"
.ie n .SS """File::Glob::bsd_glob()"" memory error with \s-1GLOB_ALTDIRFUNC\s0 (\s-1CVE\-2011\-2728\s0)."
.el .SS "\f(CWFile::Glob::bsd_glob()\fP memory error with \s-1GLOB_ALTDIRFUNC\s0 (\s-1CVE\-2011\-2728\s0)."
.IX Subsection "File::Glob::bsd_glob() memory error with GLOB_ALTDIRFUNC (CVE-2011-2728)."
Calling \f(CW\*(C`File::Glob::bsd_glob\*(C'\fR with the unsupported flag \s-1GLOB_ALTDIRFUNC\s0 would
cause an access violation / segfault.  A Perl program that accepts a flags value from
an external source could expose itself to denial of service or arbitrary code
execution attacks.  There are no known exploits in the wild.  The problem has been
corrected by explicitly disabling all unsupported flags and setting unused function
pointers to null.  Bug reported by Cle\*'ment Lecigne.
.ie n .SS """Encode"" decode_xs n\-byte heap-overflow (\s-1CVE\-2011\-2939\s0)"
.el .SS "\f(CWEncode\fP decode_xs n\-byte heap-overflow (\s-1CVE\-2011\-2939\s0)"
.IX Subsection "Encode decode_xs n-byte heap-overflow (CVE-2011-2939)"
A bug in \f(CW\*(C`Encode\*(C'\fR could, on certain inputs, cause the heap to overflow.
This problem has been corrected.  Bug reported by Robert Zacek.
.SH "Incompatible Changes"
.IX Header "Incompatible Changes"
There are no changes intentionally incompatible with 5.14.0. If any
exist, they are bugs and reports are welcome.
.SH "Deprecations"
.IX Header "Deprecations"
There have been no deprecations since 5.14.0.
.SH "Modules and Pragmata"
.IX Header "Modules and Pragmata"
.SS "New Modules and Pragmata"
.IX Subsection "New Modules and Pragmata"
None
.SS "Updated Modules and Pragmata"
.IX Subsection "Updated Modules and Pragmata"
.IP "\(bu" 4
\&\s-1CPAN\s0 has been upgraded from version 1.9600 to version 1.9600_01.
.Sp
CPAN::Distribution has been upgraded from version 1.9602 to 1.9602_01.
.Sp
Backported bugfixes from \s-1CPAN\s0 version 1.9800.  Ensures proper
detection of \f(CW\*(C`configure_requires\*(C'\fR prerequisites from \s-1CPAN\s0 Meta files
in the case where \f(CW\*(C`dynamic_config\*(C'\fR is true.  [rt.cpan.org #68835]
.Sp
Also ensures that \f(CW\*(C`configure_requires\*(C'\fR is only checked in \s-1META\s0 files,
not \s-1MYMETA\s0 files, so protect against \s-1MYMETA\s0 generation that drops
\&\f(CW\*(C`configure_requires\*(C'\fR.
.IP "\(bu" 4
Encode has been upgraded from version 2.42 to 2.42_01.
.Sp
See \*(L"Security\*(R".
.IP "\(bu" 4
File::Glob has been upgraded from version 1.12 to version 1.13.
.Sp
See \*(L"Security\*(R".
.IP "\(bu" 4
PerlIO::scalar has been upgraded from version 0.11 to 0.11_01.
.Sp
It fixes a problem with \f(CW\*(C`open my $fh, ">", \e$scalar\*(C'\fR not working if
\&\f(CW$scalar\fR is a copy-on-write scalar.
.SS "Removed Modules and Pragmata"
.IX Subsection "Removed Modules and Pragmata"
None
.SH "Platform Support"
.IX Header "Platform Support"
.SS "New Platforms"
.IX Subsection "New Platforms"
None
.SS "Discontinued Platforms"
.IX Subsection "Discontinued Platforms"
None
.SS "Platform-Specific Notes"
.IX Subsection "Platform-Specific Notes"
.IP "HP-UX \s-1PA\-RISC/64\s0 now supports gcc\-4.x" 4
.IX Item "HP-UX PA-RISC/64 now supports gcc-4.x"
A fix to correct the socketsize now makes the test suite pass on HP-UX
PA-RISC for 64bitall builds.
.IP "Building on \s-1OS\s0 X 10.7 Lion and Xcode 4 works again" 4
.IX Item "Building on OS X 10.7 Lion and Xcode 4 works again"
The build system has been updated to work with the build tools under Mac \s-1OS\s0 X
10.7.
.SH "Bug Fixes"
.IX Header "Bug Fixes"
.IP "\(bu" 4
In \f(CW@INC\fR filters (subroutines returned by subroutines in \f(CW@INC\fR), \f(CW$_\fR used to
misbehave: If returned from a subroutine, it would not be copied, but the
variable itself would be returned; and freeing \f(CW$_\fR (e.g., with \f(CW\*(C`undef *_\*(C'\fR)
would cause perl to crash.  This has been fixed [perl #91880].
.IP "\(bu" 4
Perl 5.10.0 introduced some faulty logic that made \*(L"U*\*(R" in the middle of
a pack template equivalent to \*(L"U0\*(R" if the input string was empty.  This has
been fixed [perl #90160].
.IP "\(bu" 4
\&\f(CW\*(C`caller\*(C'\fR no longer leaks memory when called from the \s-1DB\s0 package if
\&\f(CW@DB::args\fR was assigned to after the first call to \f(CW\*(C`caller\*(C'\fR.  Carp
was triggering this bug [perl #97010].
.IP "\(bu" 4
\&\f(CW\*(C`utf8::decode\*(C'\fR had a nasty bug that would modify copy-on-write scalars'
string buffers in place (i.e., skipping the copy).  This could result in
hashes having two elements with the same key [perl #91834].
.IP "\(bu" 4
Localising a tied variable used to make it read-only if it contained a
copy-on-write string.
.IP "\(bu" 4
Elements of restricted hashes (see the fields pragma) containing
copy-on-write values couldn't be deleted, nor could such hashes be cleared
(\f(CW\*(C`%hash = ()\*(C'\fR).
.IP "\(bu" 4
Locking a hash element that is a glob copy no longer causes subsequent
assignment to it to corrupt the glob.
.IP "\(bu" 4
A panic involving the combination of the regular expression modifiers
\&\f(CW\*(C`/aa\*(C'\fR introduced in 5.14.0 and the \f(CW\*(C`\eb\*(C'\fR escape sequence has been
fixed [perl #95964].
.SH "Known Problems"
.IX Header "Known Problems"
This is a list of some significant unfixed bugs, which are regressions
from 5.12.0.
.IP "\(bu" 4
\&\f(CW\*(C`PERL_GLOBAL_STRUCT\*(C'\fR is broken.
.Sp
Since perl 5.14.0, building with \f(CW\*(C`\-DPERL_GLOBAL_STRUCT\*(C'\fR hasn't been
possible. This means that perl currently doesn't work on any platforms that
require it to be built this way, including Symbian.
.Sp
While \f(CW\*(C`PERL_GLOBAL_STRUCT\*(C'\fR now works again on recent development versions of
perl, it actually working on Symbian again hasn't been verified.
.Sp
We'd be very interested in hearing from anyone working with Perl on Symbian.
.SH "Acknowledgements"
.IX Header "Acknowledgements"
Perl 5.14.2 represents approximately three months of development since
Perl 5.14.1 and contains approximately 1200 lines of changes
across 61 files from 9 authors.
.PP
Perl continues to flourish into its third decade thanks to a vibrant
community of users and developers.  The following people are known to
have contributed the improvements that became Perl 5.14.2:
.PP
Craig A. Berry, David Golden, Father Chrysostomos, Florian Ragwitz, H.Merijn
Brand, Karl Williamson, Nicholas Clark, Pau Amma and Ricardo Signes.
.SH "Reporting Bugs"
.IX Header "Reporting Bugs"
If you find what you think is a bug, you might check the articles
recently posted to the comp.lang.perl.misc newsgroup and the perl
bug database at http://rt.perl.org/perlbug/ .  There may also be
information at http://www.perl.org/ , the Perl Home Page.
.PP
If you believe you have an unreported bug, please run the perlbug
program included with your release.  Be sure to trim your bug down
to a tiny but sufficient test case.  Your bug report, along with the
output of \f(CW\*(C`perl \-V\*(C'\fR, will be sent off to perlbug@perl.org to be
analysed by the Perl porting team.
.PP
If the bug you are reporting has security implications, which make it
inappropriate to send to a publicly archived mailing list, then please send
it to perl5\-security\-report@perl.org. This points to a closed subscription
unarchived mailing list, which includes all the core committers, who be able
to help assess the impact of issues, figure out a resolution, and help
co-ordinate the release of patches to mitigate or fix the problem across all
platforms on which Perl is supported. Please only use this address for
security issues in the Perl core, not for modules independently
distributed on \s-1CPAN\s0.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
The \fIChanges\fR file for an explanation of how to view exhaustive details
on what changed.
.PP
The \fI\s-1INSTALL\s0\fR file for how to build Perl.
.PP
The \fI\s-1README\s0\fR file for general stuff.
.PP
The \fIArtistic\fR and \fICopying\fR files for copyright information.
                                                                                                                    osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perl5142delta5.18.1                          0100644 0001750 0001750 00000030135 12566207432 023545  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERL5142DELTA 1"
.TH PERL5142DELTA 1 "2013-11-04" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perl5142delta \- what is new for perl v5.14.2
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document describes differences between the 5.14.1 release and
the 5.14.2 release.
.PP
If you are upgrading from an earlier release such as 5.14.0, first read
perl5141delta, which describes differences between 5.14.0 and
5.14.1.
.SH "Core Enhancements"
.IX Header "Core Enhancements"
No changes since 5.14.0.
.SH "Security"
.IX Header "Security"
.ie n .SS """File::Glob::bsd_glob()"" memory error with \s-1GLOB_ALTDIRFUNC \s0(\s-1CVE\-2011\-2728\s0)."
.el .SS "\f(CWFile::Glob::bsd_glob()\fP memory error with \s-1GLOB_ALTDIRFUNC \s0(\s-1CVE\-2011\-2728\s0)."
.IX Subsection "File::Glob::bsd_glob() memory error with GLOB_ALTDIRFUNC (CVE-2011-2728)."
Calling \f(CW\*(C`File::Glob::bsd_glob\*(C'\fR with the unsupported flag \s-1GLOB_ALTDIRFUNC\s0 would
cause an access violation / segfault.  A Perl program that accepts a flags value from
an external source could expose itself to denial of service or arbitrary code
execution attacks.  There are no known exploits in the wild.  The problem has been
corrected by explicitly disabling all unsupported flags and setting unused function
pointers to null.  Bug reported by Cle\*'ment Lecigne.
.ie n .SS """Encode"" decode_xs n\-byte heap-overflow (\s-1CVE\-2011\-2939\s0)"
.el .SS "\f(CWEncode\fP decode_xs n\-byte heap-overflow (\s-1CVE\-2011\-2939\s0)"
.IX Subsection "Encode decode_xs n-byte heap-overflow (CVE-2011-2939)"
A bug in \f(CW\*(C`Encode\*(C'\fR could, on certain inputs, cause the heap to overflow.
This problem has been corrected.  Bug reported by Robert Zacek.
.SH "Incompatible Changes"
.IX Header "Incompatible Changes"
There are no changes intentionally incompatible with 5.14.0. If any
exist, they are bugs and reports are welcome.
.SH "Deprecations"
.IX Header "Deprecations"
There have been no deprecations since 5.14.0.
.SH "Modules and Pragmata"
.IX Header "Modules and Pragmata"
.SS "New Modules and Pragmata"
.IX Subsection "New Modules and Pragmata"
None
.SS "Updated Modules and Pragmata"
.IX Subsection "Updated Modules and Pragmata"
.IP "\(bu" 4
\&\s-1CPAN\s0 has been upgraded from version 1.9600 to version 1.9600_01.
.Sp
CPAN::Distribution has been upgraded from version 1.9602 to 1.9602_01.
.Sp
Backported bugfixes from \s-1CPAN\s0 version 1.9800.  Ensures proper
detection of \f(CW\*(C`configure_requires\*(C'\fR prerequisites from \s-1CPAN\s0 Meta files
in the case where \f(CW\*(C`dynamic_config\*(C'\fR is true.  [rt.cpan.org #68835]
.Sp
Also ensures that \f(CW\*(C`configure_requires\*(C'\fR is only checked in \s-1META\s0 files,
not \s-1MYMETA\s0 files, so protect against \s-1MYMETA\s0 generation that drops
\&\f(CW\*(C`configure_requires\*(C'\fR.
.IP "\(bu" 4
Encode has been upgraded from version 2.42 to 2.42_01.
.Sp
See \*(L"Security\*(R".
.IP "\(bu" 4
File::Glob has been upgraded from version 1.12 to version 1.13.
.Sp
See \*(L"Security\*(R".
.IP "\(bu" 4
PerlIO::scalar has been upgraded from version 0.11 to 0.11_01.
.Sp
It fixes a problem with \f(CW\*(C`open my $fh, ">", \e$scalar\*(C'\fR not working if
\&\f(CW$scalar\fR is a copy-on-write scalar.
.SS "Removed Modules and Pragmata"
.IX Subsection "Removed Modules and Pragmata"
None
.SH "Platform Support"
.IX Header "Platform Support"
.SS "New Platforms"
.IX Subsection "New Platforms"
None
.SS "Discontinued Platforms"
.IX Subsection "Discontinued Platforms"
None
.SS "Platform-Specific Notes"
.IX Subsection "Platform-Specific Notes"
.IP "HP-UX \s-1PA\-RISC/64\s0 now supports gcc\-4.x" 4
.IX Item "HP-UX PA-RISC/64 now supports gcc-4.x"
A fix to correct the socketsize now makes the test suite pass on HP-UX
PA-RISC for 64bitall builds.
.IP "Building on \s-1OS X 10.7\s0 Lion and Xcode 4 works again" 4
.IX Item "Building on OS X 10.7 Lion and Xcode 4 works again"
The build system has been updated to work with the build tools under Mac \s-1OS X
10.7.\s0
.SH "Bug Fixes"
.IX Header "Bug Fixes"
.IP "\(bu" 4
In \f(CW@INC\fR filters (subroutines returned by subroutines in \f(CW@INC\fR), \f(CW$_\fR used to
misbehave: If returned from a subroutine, it would not be copied, but the
variable itself would be returned; and freeing \f(CW$_\fR (e.g., with \f(CW\*(C`undef *_\*(C'\fR)
would cause perl to crash.  This has been fixed [perl #91880].
.IP "\(bu" 4
Perl 5.10.0 introduced some faulty logic that made \*(L"U*\*(R" in the middle of
a pack template equivalent to \*(L"U0\*(R" if the input string was empty.  This has
been fixed [perl #90160].
.IP "\(bu" 4
\&\f(CW\*(C`caller\*(C'\fR no longer leaks memory when called from the \s-1DB\s0 package if
\&\f(CW@DB::args\fR was assigned to after the first call to \f(CW\*(C`caller\*(C'\fR.  Carp
was triggering this bug [perl #97010].
.IP "\(bu" 4
\&\f(CW\*(C`utf8::decode\*(C'\fR had a nasty bug that would modify copy-on-write scalars'
string buffers in place (i.e., skipping the copy).  This could result in
hashes having two elements with the same key [perl #91834].
.IP "\(bu" 4
Localising a tied variable used to make it read-only if it contained a
copy-on-write string.
.IP "\(bu" 4
Elements of restricted hashes (see the fields pragma) containing
copy-on-write values couldn't be deleted, nor could such hashes be cleared
(\f(CW\*(C`%hash = ()\*(C'\fR).
.IP "\(bu" 4
Locking a hash element that is a glob copy no longer causes subsequent
assignment to it to corrupt the glob.
.IP "\(bu" 4
A panic involving the combination of the regular expression modifiers
\&\f(CW\*(C`/aa\*(C'\fR introduced in 5.14.0 and the \f(CW\*(C`\eb\*(C'\fR escape sequence has been
fixed [perl #95964].
.SH "Known Problems"
.IX Header "Known Problems"
This is a list of some significant unfixed bugs, which are regressions
from 5.12.0.
.IP "\(bu" 4
\&\f(CW\*(C`PERL_GLOBAL_STRUCT\*(C'\fR is broken.
.Sp
Since perl 5.14.0, building with \f(CW\*(C`\-DPERL_GLOBAL_STRUCT\*(C'\fR hasn't been
possible. This means that perl currently doesn't work on any platforms that
require it to be built this way, including Symbian.
.Sp
While \f(CW\*(C`PERL_GLOBAL_STRUCT\*(C'\fR now works again on recent development versions of
perl, it actually working on Symbian again hasn't been verified.
.Sp
We'd be very interested in hearing from anyone working with Perl on Symbian.
.SH "Acknowledgements"
.IX Header "Acknowledgements"
Perl 5.14.2 represents approximately three months of development since
Perl 5.14.1 and contains approximately 1200 lines of changes
across 61 files from 9 authors.
.PP
Perl continues to flourish into its third decade thanks to a vibrant
community of users and developers.  The following people are known to
have contributed the improvements that became Perl 5.14.2:
.PP
Craig A. Berry, David Golden, Father Chrysostomos, Florian Ragwitz, H.Merijn
Brand, Karl Williamson, Nicholas Clark, Pau Amma and Ricardo Signes.
.SH "Reporting Bugs"
.IX Header "Reporting Bugs"
If you find what you think is a bug, you might check the articles
recently posted to the comp.lang.perl.misc newsgroup and the perl
bug database at http://rt.perl.org/perlbug/ .  There may also be
information at http://www.perl.org/ , the Perl Home Page.
.PP
If you believe you have an unreported bug, please run the perlbug
program included with your release.  Be sure to trim your bug down
to a tiny but sufficient test case.  Your bug report, along with the
output of \f(CW\*(C`perl \-V\*(C'\fR, will be sent off to perlbug@perl.org to be
analysed by the Perl porting team.
.PP
If the bug you are reporting has security implications, which make it
inappropriate to send to a publicly archived mailing list, then please send
it to perl5\-security\-report@perl.org. This points to a closed subscription
unarchived mailing list, which includes all the core committers, who be able
to help assess the impact of issues, figure out a resolution, and help
co-ordinate the release of patches to mitigate or fix the problem across all
platforms on which Perl is supported. Please only use this address for
security issues in the Perl core, not for modules independently
distributed on \s-1CPAN.\s0
.SH "SEE ALSO"
.IX Header "SEE ALSO"
The \fIChanges\fR file for an explanation of how to view exhaustive details
on what changed.
.PP
The \fI\s-1INSTALL\s0\fR file for how to build Perl.
.PP
The \fI\s-1README\s0\fR file for general stuff.
.PP
The \fIArtistic\fR and \fICopying\fR files for copyright information.
                                                                                                                                                                                                                                                                                                                                                                                                                                   osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perl5143delta.1                              0100644 0001750 0001750 00000031463 12566207432 023237  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERL5143DELTA 1"
.TH PERL5143DELTA 1 "2013-11-04" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perl5143delta \- what is new for perl v5.14.3
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document describes differences between the 5.14.2 release and
the 5.14.3 release.
.PP
If you are upgrading from an earlier release such as 5.12.0, first read
perl5140delta, which describes differences between 5.12.0 and
5.14.0.
.SH "Core Enhancements"
.IX Header "Core Enhancements"
No changes since 5.14.0.
.SH "Security"
.IX Header "Security"
.ie n .SS """Digest"" unsafe use of eval (\s-1CVE\-2011\-3597\s0)"
.el .SS "\f(CWDigest\fP unsafe use of eval (\s-1CVE\-2011\-3597\s0)"
.IX Subsection "Digest unsafe use of eval (CVE-2011-3597)"
The \f(CW\*(C`Digest\->new()\*(C'\fR function did not properly sanitize input before
using it in an \fIeval()\fR call, which could lead to the injection of arbitrary
Perl code.
.PP
In order to exploit this flaw, the attacker would need to be able to set
the algorithm name used, or be able to execute arbitrary Perl code already.
.PP
This problem has been fixed.
.SS "Heap buffer overrun in 'x' string repeat operator (\s-1CVE\-2012\-5195\s0)"
.IX Subsection "Heap buffer overrun in 'x' string repeat operator (CVE-2012-5195)"
Poorly written perl code that allows an attacker to specify the count to
perl's 'x' string repeat operator can already cause a memory exhaustion
denial-of-service attack. A flaw in versions of perl before 5.15.5 can
escalate that into a heap buffer overrun; coupled with versions of glibc
before 2.16, it possibly allows the execution of arbitrary code.
.PP
This problem has been fixed.
.SH "Incompatible Changes"
.IX Header "Incompatible Changes"
There are no changes intentionally incompatible with 5.14.0. If any
exist, they are bugs and reports are welcome.
.SH "Deprecations"
.IX Header "Deprecations"
There have been no deprecations since 5.14.0.
.SH "Modules and Pragmata"
.IX Header "Modules and Pragmata"
.SS "New Modules and Pragmata"
.IX Subsection "New Modules and Pragmata"
None
.SS "Updated Modules and Pragmata"
.IX Subsection "Updated Modules and Pragmata"
.IP "\(bu" 4
PerlIO::scalar was updated to fix a bug in which opening a filehandle to
a glob copy caused assertion failures (under debugging) or hangs or other
erratic behaviour without debugging.
.IP "\(bu" 4
ODBM_File and NDBM_File were updated to allow building on GNU/Hurd.
.IP "\(bu" 4
IPC::Open3 has been updated to fix a regression introduced in perl
5.12, which broke \f(CW\*(C`IPC::Open3::open3($in, $out, $err, \*(Aq\-\*(Aq)\*(C'\fR.
[perl #95748]
.IP "\(bu" 4
Digest has been upgraded from version 1.16 to 1.16_01.
.Sp
See \*(L"Security\*(R".
.IP "\(bu" 4
Module::CoreList has been updated to version 2.49_04 to add data for
this release.
.SS "Removed Modules and Pragmata"
.IX Subsection "Removed Modules and Pragmata"
None
.SH "Documentation"
.IX Header "Documentation"
.SS "New Documentation"
.IX Subsection "New Documentation"
None
.SS "Changes to Existing Documentation"
.IX Subsection "Changes to Existing Documentation"
\fIperlcheat\fR
.IX Subsection "perlcheat"
.IP "\(bu" 4
perlcheat was updated to 5.14.
.SH "Configuration and Compilation"
.IX Header "Configuration and Compilation"
.IP "\(bu" 4
h2ph was updated to search correctly gcc include directories on platforms
such as Debian with multi-architecture support.
.IP "\(bu" 4
In Configure, the test for procselfexe was refactored into a loop.
.SH "Platform Support"
.IX Header "Platform Support"
.SS "New Platforms"
.IX Subsection "New Platforms"
None
.SS "Discontinued Platforms"
.IX Subsection "Discontinued Platforms"
None
.SS "Platform-Specific Notes"
.IX Subsection "Platform-Specific Notes"
.IP "FreeBSD" 4
.IX Item "FreeBSD"
The FreeBSD hints file was corrected to be compatible with FreeBSD 10.0.
.IP "Solaris and NetBSD" 4
.IX Item "Solaris and NetBSD"
Configure was updated for \*(L"procselfexe\*(R" support on Solaris and NetBSD.
.IP "HP-UX" 4
.IX Item "HP-UX"
\&\s-1README\s0.hpux was updated to note the existence of a broken header in
HP-UX 11.00.
.IP "Linux" 4
.IX Item "Linux"
libutil is no longer used when compiling on Linux platforms, which avoids
warnings being emitted.
.Sp
The system gcc (rather than any other gcc which might be in the compiling
user's path) is now used when searching for libraries such as \f(CW\*(C`\-lm\*(C'\fR.
.IP "Mac \s-1OS X\s0" 4
.IX Item "Mac OS X"
The locale tests were updated to reflect the behaviour of locales in
Mountain Lion.
.IP "GNU/Hurd" 4
.IX Item "GNU/Hurd"
Various build and test fixes were included for GNU/Hurd.
.Sp
\&\s-1LFS\s0 support was enabled in GNU/Hurd.
.IP "NetBSD" 4
.IX Item "NetBSD"
The NetBSD hints file was corrected to be compatible with NetBSD 6.*
.SH "Bug Fixes"
.IX Header "Bug Fixes"
.IP "\(bu" 4
A regression has been fixed that was introduced in 5.14, in \f(CW\*(C`/i\*(C'\fR
regular expression matching, in which a match improperly fails if the
pattern is in \s-1UTF\-8,\s0 the target string is not, and a Latin\-1 character
precedes a character in the string that should match the pattern.  [perl
#101710]
.IP "\(bu" 4
In case-insensitive regular expression pattern matching, no longer on
\&\s-1UTF\-8\s0 encoded strings does the scan for the start of match only look at
the first possible position.  This caused matches such as
\&\f(CW\*(C`"f\ex{FB00}" =~ /ff/i\*(C'\fR to fail.
.IP "\(bu" 4
The sitecustomize support was made relocatableinc aware, so that
\&\-Dusesitecustomize and \-Duserelocatableinc may be used together.
.IP "\(bu" 4
The smartmatch operator (\f(CW\*(C`~~\*(C'\fR) was changed so that the right-hand side
takes precedence during \f(CW\*(C`Any ~~ Object\*(C'\fR operations.
.IP "\(bu" 4
A bug has been fixed in the tainting support, in which an \f(CW\*(C`index()\*(C'\fR
operation on a tainted constant would cause all other constants to become
tainted.  [perl #64804]
.IP "\(bu" 4
A regression has been fixed that was introduced in perl 5.12, whereby
tainting errors were not correctly propagated through \f(CW\*(C`die()\*(C'\fR.
[perl #111654]
.IP "\(bu" 4
A regression has been fixed that was introduced in perl 5.14, in which
\&\f(CW\*(C`/[[:lower:]]/i\*(C'\fR and \f(CW\*(C`/[[:upper:]]/i\*(C'\fR no longer matched the opposite case.
[perl #101970]
.SH "Acknowledgements"
.IX Header "Acknowledgements"
Perl 5.14.3 represents approximately 12 months of development since Perl 5.14.2
and contains approximately 2,300 lines of changes across 64 files from 22
authors.
.PP
Perl continues to flourish into its third decade thanks to a vibrant community
of users and developers. The following people are known to have contributed the
improvements that became Perl 5.14.3:
.PP
Abigail, Andy Dougherty, Carl Hayter, Chris 'BinGOs' Williams, Dave Rolsky,
David Mitchell, Dominic Hargreaves, Father Chrysostomos, Florian Ragwitz,
H.Merijn Brand, Jilles Tjoelker, Karl Williamson, Leon Timmermans, Michael G
Schwern, Nicholas Clark, Niko Tyni, Pino Toscano, Ricardo Signes, Salvador
Fandin\*~o, Samuel Thibault, Steve Hay, Tony Cook.
.PP
The list above is almost certainly incomplete as it is automatically generated
from version control history. In particular, it does not include the names of
the (very much appreciated) contributors who reported issues to the Perl bug
tracker.
.PP
Many of the changes included in this version originated in the \s-1CPAN\s0 modules
included in Perl's core. We're grateful to the entire \s-1CPAN\s0 community for
helping Perl to flourish.
.PP
For a more complete list of all of Perl's historical contributors, please see
the \fI\s-1AUTHORS\s0\fR file in the Perl source distribution.
.SH "Reporting Bugs"
.IX Header "Reporting Bugs"
If you find what you think is a bug, you might check the articles
recently posted to the comp.lang.perl.misc newsgroup and the perl
bug database at http://rt.perl.org/perlbug/ .  There may also be
information at http://www.perl.org/ , the Perl Home Page.
.PP
If you believe you have an unreported bug, please run the perlbug
program included with your release.  Be sure to trim your bug down
to a tiny but sufficient test case.  Your bug report, along with the
output of \f(CW\*(C`perl \-V\*(C'\fR, will be sent off to perlbug@perl.org to be
analysed by the Perl porting team.
.PP
If the bug you are reporting has security implications, which make it
inappropriate to send to a publicly archived mailing list, then please send
it to perl5\-security\-report@perl.org. This points to a closed subscription
unarchived mailing list, which includes all the core committers, who be able
to help assess the impact of issues, figure out a resolution, and help
co-ordinate the release of patches to mitigate or fix the problem across all
platforms on which Perl is supported. Please only use this address for
security issues in the Perl core, not for modules independently
distributed on \s-1CPAN.\s0
.SH "SEE ALSO"
.IX Header "SEE ALSO"
The \fIChanges\fR file for an explanation of how to view exhaustive details
on what changed.
.PP
The \fI\s-1INSTALL\s0\fR file for how to build Perl.
.PP
The \fI\s-1README\s0\fR file for general stuff.
.PP
The \fIArtistic\fR and \fICopying\fR files for copyright information.
                                                                                                                                                                                                             osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perl5143delta5.16.1                          0100644 0001750 0001750 00000031142 12566207412 023541  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERL5143DELTA 1"
.TH PERL5143DELTA 1 "2013-03-04" "perl v5.16.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perl5143delta \- what is new for perl v5.14.3
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document describes differences between the 5.14.2 release and
the 5.14.3 release.
.PP
If you are upgrading from an earlier release such as 5.12.0, first read
perl5140delta, which describes differences between 5.12.0 and
5.14.0.
.SH "Core Enhancements"
.IX Header "Core Enhancements"
No changes since 5.14.0.
.SH "Security"
.IX Header "Security"
.ie n .SS """Digest"" unsafe use of eval (\s-1CVE\-2011\-3597\s0)"
.el .SS "\f(CWDigest\fP unsafe use of eval (\s-1CVE\-2011\-3597\s0)"
.IX Subsection "Digest unsafe use of eval (CVE-2011-3597)"
The \f(CW\*(C`Digest\->new()\*(C'\fR function did not properly sanitize input before
using it in an \fIeval()\fR call, which could lead to the injection of arbitrary
Perl code.
.PP
In order to exploit this flaw, the attacker would need to be able to set
the algorithm name used, or be able to execute arbitrary Perl code already.
.PP
This problem has been fixed.
.SS "Heap buffer overrun in 'x' string repeat operator (\s-1CVE\-2012\-5195\s0)"
.IX Subsection "Heap buffer overrun in 'x' string repeat operator (CVE-2012-5195)"
Poorly written perl code that allows an attacker to specify the count to
perl's 'x' string repeat operator can already cause a memory exhaustion
denial-of-service attack. A flaw in versions of perl before 5.15.5 can
escalate that into a heap buffer overrun; coupled with versions of glibc
before 2.16, it possibly allows the execution of arbitrary code.
.PP
This problem has been fixed.
.SH "Incompatible Changes"
.IX Header "Incompatible Changes"
There are no changes intentionally incompatible with 5.14.0. If any
exist, they are bugs and reports are welcome.
.SH "Deprecations"
.IX Header "Deprecations"
There have been no deprecations since 5.14.0.
.SH "Modules and Pragmata"
.IX Header "Modules and Pragmata"
.SS "New Modules and Pragmata"
.IX Subsection "New Modules and Pragmata"
None
.SS "Updated Modules and Pragmata"
.IX Subsection "Updated Modules and Pragmata"
.IP "\(bu" 4
PerlIO::scalar was updated to fix a bug in which opening a filehandle to
a glob copy caused assertion failures (under debugging) or hangs or other
erratic behaviour without debugging.
.IP "\(bu" 4
ODBM_File and NDBM_File were updated to allow building on GNU/Hurd.
.IP "\(bu" 4
IPC::Open3 has been updated to fix a regression introduced in perl
5.12, which broke \f(CW\*(C`IPC::Open3::open3($in, $out, $err, \*(Aq\-\*(Aq)\*(C'\fR.
[perl #95748]
.IP "\(bu" 4
Digest has been upgraded from version 1.16 to 1.16_01.
.Sp
See \*(L"Security\*(R".
.IP "\(bu" 4
Module::CoreList has been updated to version 2.49_04 to add data for
this release.
.SS "Removed Modules and Pragmata"
.IX Subsection "Removed Modules and Pragmata"
None
.SH "Documentation"
.IX Header "Documentation"
.SS "New Documentation"
.IX Subsection "New Documentation"
None
.SS "Changes to Existing Documentation"
.IX Subsection "Changes to Existing Documentation"
\fIperlcheat\fR
.IX Subsection "perlcheat"
.IP "\(bu" 4
perlcheat was updated to 5.14.
.SH "Configuration and Compilation"
.IX Header "Configuration and Compilation"
.IP "\(bu" 4
h2ph was updated to search correctly gcc include directories on platforms
such as Debian with multi-architecture support.
.IP "\(bu" 4
In Configure, the test for procselfexe was refactored into a loop.
.SH "Platform Support"
.IX Header "Platform Support"
.SS "New Platforms"
.IX Subsection "New Platforms"
None
.SS "Discontinued Platforms"
.IX Subsection "Discontinued Platforms"
None
.SS "Platform-Specific Notes"
.IX Subsection "Platform-Specific Notes"
.IP "FreeBSD" 4
.IX Item "FreeBSD"
The FreeBSD hints file was corrected to be compatible with FreeBSD 10.0.
.IP "Solaris and NetBSD" 4
.IX Item "Solaris and NetBSD"
Configure was updated for \*(L"procselfexe\*(R" support on Solaris and NetBSD.
.IP "HP-UX" 4
.IX Item "HP-UX"
\&\s-1README\s0.hpux was updated to note the existence of a broken header in
HP-UX 11.00.
.IP "Linux" 4
.IX Item "Linux"
libutil is no longer used when compiling on Linux platforms, which avoids
warnings being emitted.
.Sp
The system gcc (rather than any other gcc which might be in the compiling
user's path) is now used when searching for libraries such as \f(CW\*(C`\-lm\*(C'\fR.
.IP "Mac \s-1OS\s0 X" 4
.IX Item "Mac OS X"
The locale tests were updated to reflect the behaviour of locales in
Mountain Lion.
.IP "GNU/Hurd" 4
.IX Item "GNU/Hurd"
Various build and test fixes were included for GNU/Hurd.
.Sp
\&\s-1LFS\s0 support was enabled in GNU/Hurd.
.IP "NetBSD" 4
.IX Item "NetBSD"
The NetBSD hints file was corrected to be compatible with NetBSD 6.*
.SH "Bug Fixes"
.IX Header "Bug Fixes"
.IP "\(bu" 4
A regression has been fixed that was introduced in 5.14, in \f(CW\*(C`/i\*(C'\fR
regular expression matching, in which a match improperly fails if the
pattern is in \s-1UTF\-8\s0, the target string is not, and a Latin\-1 character
precedes a character in the string that should match the pattern.  [perl
#101710]
.IP "\(bu" 4
In case-insensitive regular expression pattern matching, no longer on
\&\s-1UTF\-8\s0 encoded strings does the scan for the start of match only look at
the first possible position.  This caused matches such as
\&\f(CW\*(C`"f\ex{FB00}" =~ /ff/i\*(C'\fR to fail.
.IP "\(bu" 4
The sitecustomize support was made relocatableinc aware, so that
\&\-Dusesitecustomize and \-Duserelocatableinc may be used together.
.IP "\(bu" 4
The smartmatch operator (\f(CW\*(C`~~\*(C'\fR) was changed so that the right-hand side
takes precedence during \f(CW\*(C`Any ~~ Object\*(C'\fR operations.
.IP "\(bu" 4
A bug has been fixed in the tainting support, in which an \f(CW\*(C`index()\*(C'\fR
operation on a tainted constant would cause all other constants to become
tainted.  [perl #64804]
.IP "\(bu" 4
A regression has been fixed that was introduced in perl 5.12, whereby
tainting errors were not correctly propagated through \f(CW\*(C`die()\*(C'\fR.
[perl #111654]
.IP "\(bu" 4
A regression has been fixed that was introduced in perl 5.14, in which
\&\f(CW\*(C`/[[:lower:]]/i\*(C'\fR and \f(CW\*(C`/[[:upper:]]/i\*(C'\fR no longer matched the opposite case.
[perl #101970]
.SH "Acknowledgements"
.IX Header "Acknowledgements"
Perl 5.14.3 represents approximately 12 months of development since Perl 5.14.2
and contains approximately 2,300 lines of changes across 64 files from 22
authors.
.PP
Perl continues to flourish into its third decade thanks to a vibrant community
of users and developers. The following people are known to have contributed the
improvements that became Perl 5.14.3:
.PP
Abigail, Andy Dougherty, Carl Hayter, Chris 'BinGOs' Williams, Dave Rolsky,
David Mitchell, Dominic Hargreaves, Father Chrysostomos, Florian Ragwitz,
H.Merijn Brand, Jilles Tjoelker, Karl Williamson, Leon Timmermans, Michael G
Schwern, Nicholas Clark, Niko Tyni, Pino Toscano, Ricardo Signes, Salvador
Fandin\*~o, Samuel Thibault, Steve Hay, Tony Cook.
.PP
The list above is almost certainly incomplete as it is automatically generated
from version control history. In particular, it does not include the names of
the (very much appreciated) contributors who reported issues to the Perl bug
tracker.
.PP
Many of the changes included in this version originated in the \s-1CPAN\s0 modules
included in Perl's core. We're grateful to the entire \s-1CPAN\s0 community for
helping Perl to flourish.
.PP
For a more complete list of all of Perl's historical contributors, please see
the \fI\s-1AUTHORS\s0\fR file in the Perl source distribution.
.SH "Reporting Bugs"
.IX Header "Reporting Bugs"
If you find what you think is a bug, you might check the articles
recently posted to the comp.lang.perl.misc newsgroup and the perl
bug database at http://rt.perl.org/perlbug/ .  There may also be
information at http://www.perl.org/ , the Perl Home Page.
.PP
If you believe you have an unreported bug, please run the perlbug
program included with your release.  Be sure to trim your bug down
to a tiny but sufficient test case.  Your bug report, along with the
output of \f(CW\*(C`perl \-V\*(C'\fR, will be sent off to perlbug@perl.org to be
analysed by the Perl porting team.
.PP
If the bug you are reporting has security implications, which make it
inappropriate to send to a publicly archived mailing list, then please send
it to perl5\-security\-report@perl.org. This points to a closed subscription
unarchived mailing list, which includes all the core committers, who be able
to help assess the impact of issues, figure out a resolution, and help
co-ordinate the release of patches to mitigate or fix the problem across all
platforms on which Perl is supported. Please only use this address for
security issues in the Perl core, not for modules independently
distributed on \s-1CPAN\s0.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
The \fIChanges\fR file for an explanation of how to view exhaustive details
on what changed.
.PP
The \fI\s-1INSTALL\s0\fR file for how to build Perl.
.PP
The \fI\s-1README\s0\fR file for general stuff.
.PP
The \fIArtistic\fR and \fICopying\fR files for copyright information.
                                                                                                                                                                                                                                                                                                                                                                                                                              osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perl5143delta5.18.1                          0100644 0001750 0001750 00000031463 12566207432 023553  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERL5143DELTA 1"
.TH PERL5143DELTA 1 "2013-11-04" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perl5143delta \- what is new for perl v5.14.3
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document describes differences between the 5.14.2 release and
the 5.14.3 release.
.PP
If you are upgrading from an earlier release such as 5.12.0, first read
perl5140delta, which describes differences between 5.12.0 and
5.14.0.
.SH "Core Enhancements"
.IX Header "Core Enhancements"
No changes since 5.14.0.
.SH "Security"
.IX Header "Security"
.ie n .SS """Digest"" unsafe use of eval (\s-1CVE\-2011\-3597\s0)"
.el .SS "\f(CWDigest\fP unsafe use of eval (\s-1CVE\-2011\-3597\s0)"
.IX Subsection "Digest unsafe use of eval (CVE-2011-3597)"
The \f(CW\*(C`Digest\->new()\*(C'\fR function did not properly sanitize input before
using it in an \fIeval()\fR call, which could lead to the injection of arbitrary
Perl code.
.PP
In order to exploit this flaw, the attacker would need to be able to set
the algorithm name used, or be able to execute arbitrary Perl code already.
.PP
This problem has been fixed.
.SS "Heap buffer overrun in 'x' string repeat operator (\s-1CVE\-2012\-5195\s0)"
.IX Subsection "Heap buffer overrun in 'x' string repeat operator (CVE-2012-5195)"
Poorly written perl code that allows an attacker to specify the count to
perl's 'x' string repeat operator can already cause a memory exhaustion
denial-of-service attack. A flaw in versions of perl before 5.15.5 can
escalate that into a heap buffer overrun; coupled with versions of glibc
before 2.16, it possibly allows the execution of arbitrary code.
.PP
This problem has been fixed.
.SH "Incompatible Changes"
.IX Header "Incompatible Changes"
There are no changes intentionally incompatible with 5.14.0. If any
exist, they are bugs and reports are welcome.
.SH "Deprecations"
.IX Header "Deprecations"
There have been no deprecations since 5.14.0.
.SH "Modules and Pragmata"
.IX Header "Modules and Pragmata"
.SS "New Modules and Pragmata"
.IX Subsection "New Modules and Pragmata"
None
.SS "Updated Modules and Pragmata"
.IX Subsection "Updated Modules and Pragmata"
.IP "\(bu" 4
PerlIO::scalar was updated to fix a bug in which opening a filehandle to
a glob copy caused assertion failures (under debugging) or hangs or other
erratic behaviour without debugging.
.IP "\(bu" 4
ODBM_File and NDBM_File were updated to allow building on GNU/Hurd.
.IP "\(bu" 4
IPC::Open3 has been updated to fix a regression introduced in perl
5.12, which broke \f(CW\*(C`IPC::Open3::open3($in, $out, $err, \*(Aq\-\*(Aq)\*(C'\fR.
[perl #95748]
.IP "\(bu" 4
Digest has been upgraded from version 1.16 to 1.16_01.
.Sp
See \*(L"Security\*(R".
.IP "\(bu" 4
Module::CoreList has been updated to version 2.49_04 to add data for
this release.
.SS "Removed Modules and Pragmata"
.IX Subsection "Removed Modules and Pragmata"
None
.SH "Documentation"
.IX Header "Documentation"
.SS "New Documentation"
.IX Subsection "New Documentation"
None
.SS "Changes to Existing Documentation"
.IX Subsection "Changes to Existing Documentation"
\fIperlcheat\fR
.IX Subsection "perlcheat"
.IP "\(bu" 4
perlcheat was updated to 5.14.
.SH "Configuration and Compilation"
.IX Header "Configuration and Compilation"
.IP "\(bu" 4
h2ph was updated to search correctly gcc include directories on platforms
such as Debian with multi-architecture support.
.IP "\(bu" 4
In Configure, the test for procselfexe was refactored into a loop.
.SH "Platform Support"
.IX Header "Platform Support"
.SS "New Platforms"
.IX Subsection "New Platforms"
None
.SS "Discontinued Platforms"
.IX Subsection "Discontinued Platforms"
None
.SS "Platform-Specific Notes"
.IX Subsection "Platform-Specific Notes"
.IP "FreeBSD" 4
.IX Item "FreeBSD"
The FreeBSD hints file was corrected to be compatible with FreeBSD 10.0.
.IP "Solaris and NetBSD" 4
.IX Item "Solaris and NetBSD"
Configure was updated for \*(L"procselfexe\*(R" support on Solaris and NetBSD.
.IP "HP-UX" 4
.IX Item "HP-UX"
\&\s-1README\s0.hpux was updated to note the existence of a broken header in
HP-UX 11.00.
.IP "Linux" 4
.IX Item "Linux"
libutil is no longer used when compiling on Linux platforms, which avoids
warnings being emitted.
.Sp
The system gcc (rather than any other gcc which might be in the compiling
user's path) is now used when searching for libraries such as \f(CW\*(C`\-lm\*(C'\fR.
.IP "Mac \s-1OS X\s0" 4
.IX Item "Mac OS X"
The locale tests were updated to reflect the behaviour of locales in
Mountain Lion.
.IP "GNU/Hurd" 4
.IX Item "GNU/Hurd"
Various build and test fixes were included for GNU/Hurd.
.Sp
\&\s-1LFS\s0 support was enabled in GNU/Hurd.
.IP "NetBSD" 4
.IX Item "NetBSD"
The NetBSD hints file was corrected to be compatible with NetBSD 6.*
.SH "Bug Fixes"
.IX Header "Bug Fixes"
.IP "\(bu" 4
A regression has been fixed that was introduced in 5.14, in \f(CW\*(C`/i\*(C'\fR
regular expression matching, in which a match improperly fails if the
pattern is in \s-1UTF\-8,\s0 the target string is not, and a Latin\-1 character
precedes a character in the string that should match the pattern.  [perl
#101710]
.IP "\(bu" 4
In case-insensitive regular expression pattern matching, no longer on
\&\s-1UTF\-8\s0 encoded strings does the scan for the start of match only look at
the first possible position.  This caused matches such as
\&\f(CW\*(C`"f\ex{FB00}" =~ /ff/i\*(C'\fR to fail.
.IP "\(bu" 4
The sitecustomize support was made relocatableinc aware, so that
\&\-Dusesitecustomize and \-Duserelocatableinc may be used together.
.IP "\(bu" 4
The smartmatch operator (\f(CW\*(C`~~\*(C'\fR) was changed so that the right-hand side
takes precedence during \f(CW\*(C`Any ~~ Object\*(C'\fR operations.
.IP "\(bu" 4
A bug has been fixed in the tainting support, in which an \f(CW\*(C`index()\*(C'\fR
operation on a tainted constant would cause all other constants to become
tainted.  [perl #64804]
.IP "\(bu" 4
A regression has been fixed that was introduced in perl 5.12, whereby
tainting errors were not correctly propagated through \f(CW\*(C`die()\*(C'\fR.
[perl #111654]
.IP "\(bu" 4
A regression has been fixed that was introduced in perl 5.14, in which
\&\f(CW\*(C`/[[:lower:]]/i\*(C'\fR and \f(CW\*(C`/[[:upper:]]/i\*(C'\fR no longer matched the opposite case.
[perl #101970]
.SH "Acknowledgements"
.IX Header "Acknowledgements"
Perl 5.14.3 represents approximately 12 months of development since Perl 5.14.2
and contains approximately 2,300 lines of changes across 64 files from 22
authors.
.PP
Perl continues to flourish into its third decade thanks to a vibrant community
of users and developers. The following people are known to have contributed the
improvements that became Perl 5.14.3:
.PP
Abigail, Andy Dougherty, Carl Hayter, Chris 'BinGOs' Williams, Dave Rolsky,
David Mitchell, Dominic Hargreaves, Father Chrysostomos, Florian Ragwitz,
H.Merijn Brand, Jilles Tjoelker, Karl Williamson, Leon Timmermans, Michael G
Schwern, Nicholas Clark, Niko Tyni, Pino Toscano, Ricardo Signes, Salvador
Fandin\*~o, Samuel Thibault, Steve Hay, Tony Cook.
.PP
The list above is almost certainly incomplete as it is automatically generated
from version control history. In particular, it does not include the names of
the (very much appreciated) contributors who reported issues to the Perl bug
tracker.
.PP
Many of the changes included in this version originated in the \s-1CPAN\s0 modules
included in Perl's core. We're grateful to the entire \s-1CPAN\s0 community for
helping Perl to flourish.
.PP
For a more complete list of all of Perl's historical contributors, please see
the \fI\s-1AUTHORS\s0\fR file in the Perl source distribution.
.SH "Reporting Bugs"
.IX Header "Reporting Bugs"
If you find what you think is a bug, you might check the articles
recently posted to the comp.lang.perl.misc newsgroup and the perl
bug database at http://rt.perl.org/perlbug/ .  There may also be
information at http://www.perl.org/ , the Perl Home Page.
.PP
If you believe you have an unreported bug, please run the perlbug
program included with your release.  Be sure to trim your bug down
to a tiny but sufficient test case.  Your bug report, along with the
output of \f(CW\*(C`perl \-V\*(C'\fR, will be sent off to perlbug@perl.org to be
analysed by the Perl porting team.
.PP
If the bug you are reporting has security implications, which make it
inappropriate to send to a publicly archived mailing list, then please send
it to perl5\-security\-report@perl.org. This points to a closed subscription
unarchived mailing list, which includes all the core committers, who be able
to help assess the impact of issues, figure out a resolution, and help
co-ordinate the release of patches to mitigate or fix the problem across all
platforms on which Perl is supported. Please only use this address for
security issues in the Perl core, not for modules independently
distributed on \s-1CPAN.\s0
.SH "SEE ALSO"
.IX Header "SEE ALSO"
The \fIChanges\fR file for an explanation of how to view exhaustive details
on what changed.
.PP
The \fI\s-1INSTALL\s0\fR file for how to build Perl.
.PP
The \fI\s-1README\s0\fR file for general stuff.
.PP
The \fIArtistic\fR and \fICopying\fR files for copyright information.
                                                                                                                                                                                                             osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perl5144delta.1                              0100644 0001750 0001750 00000027301 12566207432 023234  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERL5144DELTA 1"
.TH PERL5144DELTA 1 "2013-11-04" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perl5144delta \- what is new for perl v5.14.4
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document describes differences between the 5.14.3 release and
the 5.14.4 release.
.PP
If you are upgrading from an earlier release such as 5.12.0, first read
perl5140delta, which describes differences between 5.12.0 and
5.14.0.
.SH "Core Enhancements"
.IX Header "Core Enhancements"
No changes since 5.14.0.
.SH "Security"
.IX Header "Security"
This release contains one major, and medium, and a number of minor
security fixes.  The latter are included mainly to allow the test suite to
pass cleanly with the clang compiler's address sanitizer facility.
.SS "\s-1CVE\-2013\-1667:\s0 memory exhaustion with arbitrary hash keys"
.IX Subsection "CVE-2013-1667: memory exhaustion with arbitrary hash keys"
With a carefully crafted set of hash keys (for example arguments on a
\&\s-1URL\s0), it is possible to cause a hash to consume a large amount of memory
and \s-1CPU,\s0 and thus possibly to achieve a Denial-of-Service.
.PP
This problem has been fixed.
.SS "memory leak in Encode"
.IX Subsection "memory leak in Encode"
The \s-1UTF\-8\s0 encoding implementation in Encode.xs had a memory leak which has been
fixed.
.SS "[perl #111594] Socket::unpack_sockaddr_un heap-buffer-overflow"
.IX Subsection "[perl #111594] Socket::unpack_sockaddr_un heap-buffer-overflow"
A read buffer overflow could occur when copying \f(CW\*(C`sockaddr\*(C'\fR buffers.
Fairly harmless.
.PP
This problem has been fixed.
.ie n .SS "[perl #111586] SDBM_File: fix off-by-one access to global "".dir"""
.el .SS "[perl #111586] SDBM_File: fix off-by-one access to global ``.dir''"
.IX Subsection "[perl #111586] SDBM_File: fix off-by-one access to global .dir"
An extra byte was being copied for some string literals. Fairly harmless.
.PP
This problem has been fixed.
.SS "off-by-two error in List::Util"
.IX Subsection "off-by-two error in List::Util"
A string literal was being used that included two bytes beyond the
end of the string. Fairly harmless.
.PP
This problem has been fixed.
.SS "[perl #115994] fix segv in regcomp.\fIc:S_join_exact()\fP"
.IX Subsection "[perl #115994] fix segv in regcomp.c:S_join_exact()"
Under debugging builds, while marking optimised-out regex nodes as type
\&\f(CW\*(C`OPTIMIZED\*(C'\fR, it could treat blocks of exact text as if they were nodes,
and thus \s-1SEGV.\s0 Fairly harmless.
.PP
This problem has been fixed.
.SS "[perl #115992] PL_eval_start use-after-free"
.IX Subsection "[perl #115992] PL_eval_start use-after-free"
The statement \f(CW\*(C`local $[;\*(C'\fR, when preceded by an \f(CW\*(C`eval\*(C'\fR, and when not part
of an assignment, could crash. Fairly harmless.
.PP
This problem has been fixed.
.SS "wrap-around with \s-1IO\s0 on long strings"
.IX Subsection "wrap-around with IO on long strings"
Reading or writing strings greater than 2**31 bytes in size could segfault
due to integer wraparound.
.PP
This problem has been fixed.
.SH "Incompatible Changes"
.IX Header "Incompatible Changes"
There are no changes intentionally incompatible with 5.14.0. If any
exist, they are bugs and reports are welcome.
.SH "Deprecations"
.IX Header "Deprecations"
There have been no deprecations since 5.14.0.
.SH "Modules and Pragmata"
.IX Header "Modules and Pragmata"
.SS "New Modules and Pragmata"
.IX Subsection "New Modules and Pragmata"
None
.SS "Updated Modules and Pragmata"
.IX Subsection "Updated Modules and Pragmata"
The following modules have just the minor code fixes as listed above in
\&\*(L"Security\*(R" (version numbers have not changed):
.IP "Socket" 4
.IX Item "Socket"
.PD 0
.IP "SDBM_File" 4
.IX Item "SDBM_File"
.IP "List::Util" 4
.IX Item "List::Util"
.PD
.PP
Encode has been upgraded from version 2.42_01 to version 2.42_02.
.PP
Module::CoreList has been updated to version 2.49_06 to add data for
this release.
.SS "Removed Modules and Pragmata"
.IX Subsection "Removed Modules and Pragmata"
None.
.SH "Documentation"
.IX Header "Documentation"
.SS "New Documentation"
.IX Subsection "New Documentation"
None.
.SS "Changes to Existing Documentation"
.IX Subsection "Changes to Existing Documentation"
None.
.SH "Diagnostics"
.IX Header "Diagnostics"
No new or changed diagnostics.
.SH "Utility Changes"
.IX Header "Utility Changes"
None
.SH "Configuration and Compilation"
.IX Header "Configuration and Compilation"
No changes.
.SH "Platform Support"
.IX Header "Platform Support"
.SS "New Platforms"
.IX Subsection "New Platforms"
None.
.SS "Discontinued Platforms"
.IX Subsection "Discontinued Platforms"
None.
.SS "Platform-Specific Notes"
.IX Subsection "Platform-Specific Notes"
.IP "\s-1VMS\s0" 4
.IX Item "VMS"
5.14.3 failed to compile on \s-1VMS\s0 due to incomplete application of a patch
series that allowed \f(CW\*(C`userelocatableinc\*(C'\fR and \f(CW\*(C`usesitecustomize\*(C'\fR to be
used simultaneously.  Other platforms were not affected and the problem
has now been corrected.
.SH "Selected Bug Fixes"
.IX Header "Selected Bug Fixes"
.IP "\(bu" 4
In Perl 5.14.0, \f(CW\*(C`$tainted ~~ @array\*(C'\fR stopped working properly.  Sometimes
it would erroneously fail (when \f(CW$tainted\fR contained a string that occurs
in the array \fIafter\fR the first element) or erroneously succeed (when
\&\f(CW\*(C`undef\*(C'\fR occurred after the first element) [perl #93590].
.SH "Known Problems"
.IX Header "Known Problems"
None.
.SH "Acknowledgements"
.IX Header "Acknowledgements"
Perl 5.14.4 represents approximately 5 months of development since Perl 5.14.3
and contains approximately 1,700 lines of changes across 49 files from 12
authors.
.PP
Perl continues to flourish into its third decade thanks to a vibrant community
of users and developers. The following people are known to have contributed the
improvements that became Perl 5.14.4:
.PP
Andy Dougherty, Chris 'BinGOs' Williams, Christian Hansen, Craig A. Berry,
Dave Rolsky, David Mitchell, Dominic Hargreaves, Father Chrysostomos,
Florian Ragwitz, Reini Urban, Ricardo Signes, Yves Orton.
.PP
The list above is almost certainly incomplete as it is automatically generated
from version control history. In particular, it does not include the names of
the (very much appreciated) contributors who reported issues to the Perl bug
tracker.
.PP
For a more complete list of all of Perl's historical contributors, please see
the \fI\s-1AUTHORS\s0\fR file in the Perl source distribution.
.SH "Reporting Bugs"
.IX Header "Reporting Bugs"
If you find what you think is a bug, you might check the articles
recently posted to the comp.lang.perl.misc newsgroup and the perl
bug database at http://rt.perl.org/perlbug/ .  There may also be
information at http://www.perl.org/ , the Perl Home Page.
.PP
If you believe you have an unreported bug, please run the perlbug
program included with your release.  Be sure to trim your bug down
to a tiny but sufficient test case.  Your bug report, along with the
output of \f(CW\*(C`perl \-V\*(C'\fR, will be sent off to perlbug@perl.org to be
analysed by the Perl porting team.
.PP
If the bug you are reporting has security implications, which make it
inappropriate to send to a publicly archived mailing list, then please send
it to perl5\-security\-report@perl.org. This points to a closed subscription
unarchived mailing list, which includes all the core committers, who be able
to help assess the impact of issues, figure out a resolution, and help
co-ordinate the release of patches to mitigate or fix the problem across all
platforms on which Perl is supported. Please only use this address for
security issues in the Perl core, not for modules independently
distributed on \s-1CPAN.\s0
.SH "SEE ALSO"
.IX Header "SEE ALSO"
The \fIChanges\fR file for an explanation of how to view exhaustive details
on what changed.
.PP
The \fI\s-1INSTALL\s0\fR file for how to build Perl.
.PP
The \fI\s-1README\s0\fR file for general stuff.
.PP
The \fIArtistic\fR and \fICopying\fR files for copyright information.
                                                                                                                                                                                                                                                                                                                               osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perl5144delta5.18.1                          0100644 0001750 0001750 00000027301 12566207432 023550  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERL5144DELTA 1"
.TH PERL5144DELTA 1 "2013-11-04" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perl5144delta \- what is new for perl v5.14.4
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document describes differences between the 5.14.3 release and
the 5.14.4 release.
.PP
If you are upgrading from an earlier release such as 5.12.0, first read
perl5140delta, which describes differences between 5.12.0 and
5.14.0.
.SH "Core Enhancements"
.IX Header "Core Enhancements"
No changes since 5.14.0.
.SH "Security"
.IX Header "Security"
This release contains one major, and medium, and a number of minor
security fixes.  The latter are included mainly to allow the test suite to
pass cleanly with the clang compiler's address sanitizer facility.
.SS "\s-1CVE\-2013\-1667:\s0 memory exhaustion with arbitrary hash keys"
.IX Subsection "CVE-2013-1667: memory exhaustion with arbitrary hash keys"
With a carefully crafted set of hash keys (for example arguments on a
\&\s-1URL\s0), it is possible to cause a hash to consume a large amount of memory
and \s-1CPU,\s0 and thus possibly to achieve a Denial-of-Service.
.PP
This problem has been fixed.
.SS "memory leak in Encode"
.IX Subsection "memory leak in Encode"
The \s-1UTF\-8\s0 encoding implementation in Encode.xs had a memory leak which has been
fixed.
.SS "[perl #111594] Socket::unpack_sockaddr_un heap-buffer-overflow"
.IX Subsection "[perl #111594] Socket::unpack_sockaddr_un heap-buffer-overflow"
A read buffer overflow could occur when copying \f(CW\*(C`sockaddr\*(C'\fR buffers.
Fairly harmless.
.PP
This problem has been fixed.
.ie n .SS "[perl #111586] SDBM_File: fix off-by-one access to global "".dir"""
.el .SS "[perl #111586] SDBM_File: fix off-by-one access to global ``.dir''"
.IX Subsection "[perl #111586] SDBM_File: fix off-by-one access to global .dir"
An extra byte was being copied for some string literals. Fairly harmless.
.PP
This problem has been fixed.
.SS "off-by-two error in List::Util"
.IX Subsection "off-by-two error in List::Util"
A string literal was being used that included two bytes beyond the
end of the string. Fairly harmless.
.PP
This problem has been fixed.
.SS "[perl #115994] fix segv in regcomp.\fIc:S_join_exact()\fP"
.IX Subsection "[perl #115994] fix segv in regcomp.c:S_join_exact()"
Under debugging builds, while marking optimised-out regex nodes as type
\&\f(CW\*(C`OPTIMIZED\*(C'\fR, it could treat blocks of exact text as if they were nodes,
and thus \s-1SEGV.\s0 Fairly harmless.
.PP
This problem has been fixed.
.SS "[perl #115992] PL_eval_start use-after-free"
.IX Subsection "[perl #115992] PL_eval_start use-after-free"
The statement \f(CW\*(C`local $[;\*(C'\fR, when preceded by an \f(CW\*(C`eval\*(C'\fR, and when not part
of an assignment, could crash. Fairly harmless.
.PP
This problem has been fixed.
.SS "wrap-around with \s-1IO\s0 on long strings"
.IX Subsection "wrap-around with IO on long strings"
Reading or writing strings greater than 2**31 bytes in size could segfault
due to integer wraparound.
.PP
This problem has been fixed.
.SH "Incompatible Changes"
.IX Header "Incompatible Changes"
There are no changes intentionally incompatible with 5.14.0. If any
exist, they are bugs and reports are welcome.
.SH "Deprecations"
.IX Header "Deprecations"
There have been no deprecations since 5.14.0.
.SH "Modules and Pragmata"
.IX Header "Modules and Pragmata"
.SS "New Modules and Pragmata"
.IX Subsection "New Modules and Pragmata"
None
.SS "Updated Modules and Pragmata"
.IX Subsection "Updated Modules and Pragmata"
The following modules have just the minor code fixes as listed above in
\&\*(L"Security\*(R" (version numbers have not changed):
.IP "Socket" 4
.IX Item "Socket"
.PD 0
.IP "SDBM_File" 4
.IX Item "SDBM_File"
.IP "List::Util" 4
.IX Item "List::Util"
.PD
.PP
Encode has been upgraded from version 2.42_01 to version 2.42_02.
.PP
Module::CoreList has been updated to version 2.49_06 to add data for
this release.
.SS "Removed Modules and Pragmata"
.IX Subsection "Removed Modules and Pragmata"
None.
.SH "Documentation"
.IX Header "Documentation"
.SS "New Documentation"
.IX Subsection "New Documentation"
None.
.SS "Changes to Existing Documentation"
.IX Subsection "Changes to Existing Documentation"
None.
.SH "Diagnostics"
.IX Header "Diagnostics"
No new or changed diagnostics.
.SH "Utility Changes"
.IX Header "Utility Changes"
None
.SH "Configuration and Compilation"
.IX Header "Configuration and Compilation"
No changes.
.SH "Platform Support"
.IX Header "Platform Support"
.SS "New Platforms"
.IX Subsection "New Platforms"
None.
.SS "Discontinued Platforms"
.IX Subsection "Discontinued Platforms"
None.
.SS "Platform-Specific Notes"
.IX Subsection "Platform-Specific Notes"
.IP "\s-1VMS\s0" 4
.IX Item "VMS"
5.14.3 failed to compile on \s-1VMS\s0 due to incomplete application of a patch
series that allowed \f(CW\*(C`userelocatableinc\*(C'\fR and \f(CW\*(C`usesitecustomize\*(C'\fR to be
used simultaneously.  Other platforms were not affected and the problem
has now been corrected.
.SH "Selected Bug Fixes"
.IX Header "Selected Bug Fixes"
.IP "\(bu" 4
In Perl 5.14.0, \f(CW\*(C`$tainted ~~ @array\*(C'\fR stopped working properly.  Sometimes
it would erroneously fail (when \f(CW$tainted\fR contained a string that occurs
in the array \fIafter\fR the first element) or erroneously succeed (when
\&\f(CW\*(C`undef\*(C'\fR occurred after the first element) [perl #93590].
.SH "Known Problems"
.IX Header "Known Problems"
None.
.SH "Acknowledgements"
.IX Header "Acknowledgements"
Perl 5.14.4 represents approximately 5 months of development since Perl 5.14.3
and contains approximately 1,700 lines of changes across 49 files from 12
authors.
.PP
Perl continues to flourish into its third decade thanks to a vibrant community
of users and developers. The following people are known to have contributed the
improvements that became Perl 5.14.4:
.PP
Andy Dougherty, Chris 'BinGOs' Williams, Christian Hansen, Craig A. Berry,
Dave Rolsky, David Mitchell, Dominic Hargreaves, Father Chrysostomos,
Florian Ragwitz, Reini Urban, Ricardo Signes, Yves Orton.
.PP
The list above is almost certainly incomplete as it is automatically generated
from version control history. In particular, it does not include the names of
the (very much appreciated) contributors who reported issues to the Perl bug
tracker.
.PP
For a more complete list of all of Perl's historical contributors, please see
the \fI\s-1AUTHORS\s0\fR file in the Perl source distribution.
.SH "Reporting Bugs"
.IX Header "Reporting Bugs"
If you find what you think is a bug, you might check the articles
recently posted to the comp.lang.perl.misc newsgroup and the perl
bug database at http://rt.perl.org/perlbug/ .  There may also be
information at http://www.perl.org/ , the Perl Home Page.
.PP
If you believe you have an unreported bug, please run the perlbug
program included with your release.  Be sure to trim your bug down
to a tiny but sufficient test case.  Your bug report, along with the
output of \f(CW\*(C`perl \-V\*(C'\fR, will be sent off to perlbug@perl.org to be
analysed by the Perl porting team.
.PP
If the bug you are reporting has security implications, which make it
inappropriate to send to a publicly archived mailing list, then please send
it to perl5\-security\-report@perl.org. This points to a closed subscription
unarchived mailing list, which includes all the core committers, who be able
to help assess the impact of issues, figure out a resolution, and help
co-ordinate the release of patches to mitigate or fix the problem across all
platforms on which Perl is supported. Please only use this address for
security issues in the Perl core, not for modules independently
distributed on \s-1CPAN.\s0
.SH "SEE ALSO"
.IX Header "SEE ALSO"
The \fIChanges\fR file for an explanation of how to view exhaustive details
on what changed.
.PP
The \fI\s-1INSTALL\s0\fR file for how to build Perl.
.PP
The \fI\s-1README\s0\fR file for general stuff.
.PP
The \fIArtistic\fR and \fICopying\fR files for copyright information.
                                                                                                                                                                                                                                                                                                                               osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perl5160delta.1                              0100644 0001750 0001750 00000472011 12566207432 023234  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERL5160DELTA 1"
.TH PERL5160DELTA 1 "2013-11-04" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perl5160delta \- what is new for perl v5.16.0
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document describes differences between the 5.14.0 release and
the 5.16.0 release.
.PP
If you are upgrading from an earlier release such as 5.12.0, first read
perl5140delta, which describes differences between 5.12.0 and
5.14.0.
.PP
Some bug fixes in this release have been backported to later
releases of 5.14.x.  Those are indicated with the 5.14.x version in
parentheses.
.SH "Notice"
.IX Header "Notice"
With the release of Perl 5.16.0, the 5.12.x series of releases is now out of
its support period.  There may be future 5.12.x releases, but only in the
event of a critical security issue.  Users of Perl 5.12 or earlier should
consider upgrading to a more recent release of Perl.
.PP
This policy is described in greater detail in
perlpolicy.
.SH "Core Enhancements"
.IX Header "Core Enhancements"
.ie n .SS """use \fIVERSION\fP"""
.el .SS "\f(CWuse \fP\f(CIVERSION\fP\f(CW\fP"
.IX Subsection "use VERSION"
As of this release, version declarations like \f(CW\*(C`use v5.16\*(C'\fR now disable
all features before enabling the new feature bundle.  This means that
the following holds true:
.PP
.Vb 4
\&    use 5.016;
\&    # only 5.16 features enabled here
\&    use 5.014;
\&    # only 5.14 features enabled here (not 5.16)
.Ve
.PP
\&\f(CW\*(C`use v5.12\*(C'\fR and higher continue to enable strict, but explicit \f(CW\*(C`use
strict\*(C'\fR and \f(CW\*(C`no strict\*(C'\fR now override the version declaration, even
when they come first:
.PP
.Vb 3
\&    no strict;
\&    use 5.012;
\&    # no strict here
.Ve
.PP
There is a new \*(L":default\*(R" feature bundle that represents the set of
features enabled before any version declaration or \f(CW\*(C`use feature\*(C'\fR has
been seen.  Version declarations below 5.10 now enable the \*(L":default\*(R"
feature set.  This does not actually change the behavior of \f(CW\*(C`use
v5.8\*(C'\fR, because features added to the \*(L":default\*(R" set are those that were
traditionally enabled by default, before they could be turned off.
.PP
\&\f(CW\*(C`no feature\*(C'\fR now resets to the default feature set.  To disable all
features (which is likely to be a pretty special-purpose request, since
it presumably won't match any named set of semantics) you can now  
write \f(CW\*(C`no feature \*(Aq:all\*(Aq\*(C'\fR.
.PP
\&\f(CW$[\fR is now disabled under \f(CW\*(C`use v5.16\*(C'\fR.  It is part of the default
feature set and can be turned on or off explicitly with \f(CW\*(C`use feature
\&\*(Aqarray_base\*(Aq\*(C'\fR.
.ie n .SS """_\|_SUB_\|_"""
.el .SS "\f(CW_\|_SUB_\|_\fP"
.IX Subsection "__SUB__"
The new \f(CW\*(C`_\|_SUB_\|_\*(C'\fR token, available under the \f(CW\*(C`current_sub\*(C'\fR feature
(see feature) or \f(CW\*(C`use v5.16\*(C'\fR, returns a reference to the current
subroutine, making it easier to write recursive closures.
.SS "New and Improved Built-ins"
.IX Subsection "New and Improved Built-ins"
\fIMore consistent \f(CI\*(C`eval\*(C'\fI\fR
.IX Subsection "More consistent eval"
.PP
The \f(CW\*(C`eval\*(C'\fR operator sometimes treats a string argument as a sequence of
characters and sometimes as a sequence of bytes, depending on the
internal encoding.  The internal encoding is not supposed to make any
difference, but there is code that relies on this inconsistency.
.PP
The new \f(CW\*(C`unicode_eval\*(C'\fR and \f(CW\*(C`evalbytes\*(C'\fR features (enabled under \f(CW\*(C`use
5.16.0\*(C'\fR) resolve this.  The \f(CW\*(C`unicode_eval\*(C'\fR feature causes \f(CW\*(C`eval
$string\*(C'\fR to treat the string always as Unicode.  The \f(CW\*(C`evalbytes\*(C'\fR
features provides a function, itself called \f(CW\*(C`evalbytes\*(C'\fR, which
evaluates its argument always as a string of bytes.
.PP
These features also fix oddities with source filters leaking to outer
dynamic scopes.
.PP
See feature for more detail.
.PP
\fI\f(CI\*(C`substr\*(C'\fI lvalue revamp\fR
.IX Subsection "substr lvalue revamp"
.PP
When \f(CW\*(C`substr\*(C'\fR is called in lvalue or potential lvalue context with two
or three arguments, a special lvalue scalar is returned that modifies
the original string (the first argument) when assigned to.
.PP
Previously, the offsets (the second and third arguments) passed to
\&\f(CW\*(C`substr\*(C'\fR would be converted immediately to match the string, negative
offsets being translated to positive and offsets beyond the end of the
string being truncated.
.PP
Now, the offsets are recorded without modification in the special
lvalue scalar that is returned, and the original string is not even
looked at by \f(CW\*(C`substr\*(C'\fR itself, but only when the returned lvalue is
read or modified.
.PP
These changes result in an incompatible change:
.PP
If the original string changes length after the call to \f(CW\*(C`substr\*(C'\fR but
before assignment to its return value, negative offsets will remember
their position from the end of the string, affecting code like this:
.PP
.Vb 5
\&    my $string = "string";
\&    my $lvalue = \esubstr $string, \-4, 2;
\&    print $$lvalue, "\en"; # prints "ri"
\&    $string = "bailing twine";
\&    print $$lvalue, "\en"; # prints "wi"; used to print "il"
.Ve
.PP
The same thing happens with an omitted third argument.  The returned
lvalue will always extend to the end of the string, even if the string
becomes longer.
.PP
Since this change also allowed many bugs to be fixed (see
"The \f(CW\*(C`substr\*(C'\fR operator"), and since the behavior
of negative offsets has never been specified, the
change was deemed acceptable.
.PP
\fIReturn value of \f(CI\*(C`tied\*(C'\fI\fR
.IX Subsection "Return value of tied"
.PP
The value returned by \f(CW\*(C`tied\*(C'\fR on a tied variable is now the actual
scalar that holds the object to which the variable is tied.  This
lets ties be weakened with \f(CW\*(C`Scalar::Util::weaken(tied
$tied_variable)\*(C'\fR.
.SS "Unicode Support"
.IX Subsection "Unicode Support"
\fISupports (\fIalmost\fI) Unicode 6.1\fR
.IX Subsection "Supports (almost) Unicode 6.1"
.PP
Besides the addition of whole new scripts, and new characters in
existing scripts, this new version of Unicode, as always, makes some
changes to existing characters.  One change that may trip up some
applications is that the General Category of two characters in the
Latin\-1 range, \s-1PILCROW SIGN\s0 and \s-1SECTION SIGN,\s0 has been changed from
Other_Symbol to Other_Punctuation.  The same change has been made for
a character in each of Tibetan, Ethiopic, and Aegean.
The code points U+3248..U+324F (\s-1CIRCLED NUMBER TEN ON BLACK SQUARE\s0
through \s-1CIRCLED NUMBER EIGHTY ON BLACK SQUARE\s0) have had their General
Category changed from Other_Symbol to Other_Numeric.  The Line Break
property has changes for Hebrew and Japanese; and because of
other changes in 6.1, the Perl regular expression construct \f(CW\*(C`\eX\*(C'\fR now
works differently for some characters in Thai and Lao.
.PP
New aliases (synonyms) have been defined for many property values;
these, along with the previously existing ones, are all cross-indexed in
perluniprops.
.PP
The return value of \f(CW\*(C`charnames::viacode()\*(C'\fR is affected by other
changes:
.PP
.Vb 10
\& Code point      Old Name             New Name
\&   U+000A    LINE FEED (LF)        LINE FEED
\&   U+000C    FORM FEED (FF)        FORM FEED
\&   U+000D    CARRIAGE RETURN (CR)  CARRIAGE RETURN
\&   U+0085    NEXT LINE (NEL)       NEXT LINE
\&   U+008E    SINGLE\-SHIFT 2        SINGLE\-SHIFT\-2
\&   U+008F    SINGLE\-SHIFT 3        SINGLE\-SHIFT\-3
\&   U+0091    PRIVATE USE 1         PRIVATE USE\-1
\&   U+0092    PRIVATE USE 2         PRIVATE USE\-2
\&   U+2118    SCRIPT CAPITAL P      WEIERSTRASS ELLIPTIC FUNCTION
.Ve
.PP
Perl will accept any of these names as input, but
\&\f(CW\*(C`charnames::viacode()\*(C'\fR now returns the new name of each pair.  The
change for U+2118 is considered by Unicode to be a correction, that is
the original name was a mistake (but again, it will remain forever valid
to use it to refer to U+2118).  But most of these changes are the
fallout of the mistake Unicode 6.0 made in naming a character used in
Japanese cell phones to be \*(L"\s-1BELL\*(R",\s0 which conflicts with the longstanding
industry use of (and Unicode's recommendation to use) that name
to mean the \s-1ASCII\s0 control character at U+0007.  Therefore, that name
has been deprecated in Perl since v5.14, and any use of it will raise a
warning message (unless turned off).  The name \*(L"\s-1ALERT\*(R"\s0 is now the
preferred name for this code point, with \*(L"\s-1BEL\*(R"\s0 an acceptable short
form.  The name for the new cell phone character, at code point U+1F514,
remains undefined in this version of Perl (hence we don't 
implement quite all of Unicode 6.1), but starting in v5.18, \s-1BELL\s0 will mean
this character, and not U+0007.
.PP
Unicode has taken steps to make sure that this sort of mistake does not
happen again.  The Standard now includes all generally accepted
names and abbreviations for control characters, whereas previously it
didn't (though there were recommended names for most of them, which Perl
used).  This means that most of those recommended names are now
officially in the Standard.  Unicode did not recommend names for the
four code points listed above between U+008E and U+008F, and in
standardizing them Unicode subtly changed the names that Perl had
previously given them, by replacing the final blank in each name by a
hyphen.  Unicode also officially accepts names that Perl had deprecated,
such as \s-1FILE SEPARATOR. \s0 Now the only deprecated name is \s-1BELL.\s0
Finally, Perl now uses the new official names instead of the old
(now considered obsolete) names for the first four code points in the
list above (the ones which have the parentheses in them).
.PP
Now that the names have been placed in the Unicode standard, these kinds
of changes should not happen again, though corrections, such as to
U+2118, are still possible.
.PP
Unicode also added some name abbreviations, which Perl now accepts:
\&\s-1SP\s0 for \s-1SPACE\s0;
\&\s-1TAB\s0 for \s-1CHARACTER TABULATION\s0;
\&\s-1NEW LINE, END OF LINE, NL,\s0 and \s-1EOL\s0 for \s-1LINE FEED\s0;
LOCKING-SHIFT \s-1ONE\s0 for \s-1SHIFT OUT\s0;
LOCKING-SHIFT \s-1ZERO\s0 for \s-1SHIFT IN\s0;
and \s-1ZWNBSP\s0 for \s-1ZERO WIDTH\s0 NO-BREAK \s-1SPACE.\s0
.PP
More details on this version of Unicode are provided in
<http://www.unicode.org/versions/Unicode6.1.0/>.
.PP
\fI\f(CI\*(C`use charnames\*(C'\fI is no longer needed for \f(CI\*(C`\eN{\f(CIname\f(CI}\*(C'\fI\fR
.IX Subsection "use charnames is no longer needed for N{name}"
.PP
When \f(CW\*(C`\eN{\f(CIname\f(CW}\*(C'\fR is encountered, the \f(CW\*(C`charnames\*(C'\fR module is now
automatically loaded when needed as if the \f(CW\*(C`:full\*(C'\fR and \f(CW\*(C`:short\*(C'\fR
options had been specified.  See charnames for more information.
.PP
\fI\f(CI\*(C`\eN{...}\*(C'\fI can now have Unicode loose name matching\fR
.IX Subsection "N{...} can now have Unicode loose name matching"
.PP
This is described in the \f(CW\*(C`charnames\*(C'\fR item in
\&\*(L"Updated Modules and Pragmata\*(R" below.
.PP
\fIUnicode Symbol Names\fR
.IX Subsection "Unicode Symbol Names"
.PP
Perl now has proper support for Unicode in symbol names.  It used to be
that \f(CW\*(C`*{$foo}\*(C'\fR would ignore the internal \s-1UTF8\s0 flag and use the bytes of
the underlying representation to look up the symbol.  That meant that
\&\f(CW\*(C`*{"\ex{100}"}\*(C'\fR and \f(CW\*(C`*{"\exc4\ex80"}\*(C'\fR would return the same thing.  All
these parts of Perl have been fixed to account for Unicode:
.IP "\(bu" 4
Method names (including those passed to \f(CW\*(C`use overload\*(C'\fR)
.IP "\(bu" 4
Typeglob names (including names of variables, subroutines, and filehandles)
.IP "\(bu" 4
Package names
.IP "\(bu" 4
\&\f(CW\*(C`goto\*(C'\fR
.IP "\(bu" 4
Symbolic dereferencing
.IP "\(bu" 4
Second argument to \f(CW\*(C`bless()\*(C'\fR and \f(CW\*(C`tie()\*(C'\fR
.IP "\(bu" 4
Return value of \f(CW\*(C`ref()\*(C'\fR
.IP "\(bu" 4
Subroutine prototypes
.IP "\(bu" 4
Attributes
.IP "\(bu" 4
Various warnings and error messages that mention variable names or values,
methods, etc.
.PP
In addition, a parsing bug has been fixed that prevented \f(CW\*(C`*{e\*'}\*(C'\fR from
implicitly quoting the name, but instead interpreted it as \f(CW\*(C`*{+e\*'}\*(C'\fR, which
would cause a strict violation.
.PP
\&\f(CW\*(C`*{"*a::b"}\*(C'\fR automatically strips off the * if it is followed by an \s-1ASCII\s0
letter.  That has been extended to all Unicode identifier characters.
.PP
One-character non-ASCII non-punctuation variables (like \f(CW\*(C`$e\*'\*(C'\fR) are now
subject to \*(L"Used only once\*(R" warnings.  They used to be exempt, as they
were treated as punctuation variables.
.PP
Also, single-character Unicode punctuation variables (like \f(CW$X\fR) are now
supported [perl #69032].
.PP
\fIImproved ability to mix locales and Unicode, including \s-1UTF\-8\s0 locales\fR
.IX Subsection "Improved ability to mix locales and Unicode, including UTF-8 locales"
.PP
An optional parameter has been added to \f(CW\*(C`use locale\*(C'\fR
.PP
.Vb 1
\& use locale \*(Aq:not_characters\*(Aq;
.Ve
.PP
which tells Perl to use all but the \f(CW\*(C`LC_CTYPE\*(C'\fR and \f(CW\*(C`LC_COLLATE\*(C'\fR
portions of the current locale.  Instead, the character set is assumed
to be Unicode.  This lets locales and Unicode be seamlessly mixed,
including the increasingly frequent \s-1UTF\-8\s0 locales.  When using this
hybrid form of locales, the \f(CW\*(C`:locale\*(C'\fR layer to the open pragma can
be used to interface with the file system, and there are \s-1CPAN\s0 modules
available for \s-1ARGV\s0 and environment variable conversions.
.PP
Full details are in perllocale.
.PP
\fINew function \f(CI\*(C`fc\*(C'\fI and corresponding escape sequence \f(CI\*(C`\eF\*(C'\fI for Unicode foldcase\fR
.IX Subsection "New function fc and corresponding escape sequence F for Unicode foldcase"
.PP
Unicode foldcase is an extension to lowercase that gives better results
when comparing two strings case-insensitively.  It has long been used
internally in regular expression \f(CW\*(C`/i\*(C'\fR matching.  Now it is available
explicitly through the new \f(CW\*(C`fc\*(C'\fR function call (enabled by
\&\f(CW"use\ feature\ \*(Aqfc\*(Aq"\fR, or \f(CW\*(C`use v5.16\*(C'\fR, or explicitly callable via
\&\f(CW\*(C`CORE::fc\*(C'\fR) or through the new \f(CW\*(C`\eF\*(C'\fR sequence in double-quotish
strings.
.PP
Full details are in \*(L"fc\*(R" in perlfunc.
.PP
\fIThe Unicode \f(CI\*(C`Script_Extensions\*(C'\fI property is now supported.\fR
.IX Subsection "The Unicode Script_Extensions property is now supported."
.PP
New in Unicode 6.0, this is an improved \f(CW\*(C`Script\*(C'\fR property.  Details
are in \*(L"Scripts\*(R" in perlunicode.
.SS "\s-1XS\s0 Changes"
.IX Subsection "XS Changes"
\fIImproved typemaps for Some Builtin Types\fR
.IX Subsection "Improved typemaps for Some Builtin Types"
.PP
Most \s-1XS\s0 authors will know there is a longstanding bug in the
\&\s-1OUTPUT\s0 typemap for T_AVREF (\f(CW\*(C`AV*\*(C'\fR), T_HVREF (\f(CW\*(C`HV*\*(C'\fR), T_CVREF (\f(CW\*(C`CV*\*(C'\fR),
and T_SVREF (\f(CW\*(C`SVREF\*(C'\fR or \f(CW\*(C`\e$foo\*(C'\fR) that requires manually decrementing
the reference count of the return value instead of the typemap taking
care of this.  For backwards-compatibility, this cannot be changed in the
default typemaps.  But we now provide additional typemaps
\&\f(CW\*(C`T_AVREF_REFCOUNT_FIXED\*(C'\fR, etc. that do not exhibit this bug.  Using
them in your extension is as simple as having one line in your
\&\f(CW\*(C`TYPEMAP\*(C'\fR section:
.PP
.Vb 1
\&  HV*   T_HVREF_REFCOUNT_FIXED
.Ve
.PP
\fI\f(CI\*(C`is_utf8_char()\*(C'\fI\fR
.IX Subsection "is_utf8_char()"
.PP
The XS-callable function \f(CW\*(C`is_utf8_char()\*(C'\fR, when presented with
malformed \s-1UTF\-8\s0 input, can read up to 12 bytes beyond the end of the
string.  This cannot be fixed without changing its \s-1API,\s0 and so its
use is now deprecated.  Use \f(CW\*(C`is_utf8_char_buf()\*(C'\fR (described just below)
instead.
.PP
\fIAdded \f(CI\*(C`is_utf8_char_buf()\*(C'\fI\fR
.IX Subsection "Added is_utf8_char_buf()"
.PP
This function is designed to replace the deprecated \*(L"\fIis_utf8_char()\fR\*(R"
function.  It includes an extra parameter to make sure it doesn't read
past the end of the input buffer.
.PP
\fIOther \f(CI\*(C`is_utf8_foo()\*(C'\fI functions, as well as \f(CI\*(C`utf8_to_foo()\*(C'\fI, etc.\fR
.IX Subsection "Other is_utf8_foo() functions, as well as utf8_to_foo(), etc."
.PP
Most other XS-callable functions that take \s-1UTF\-8\s0 encoded input
implicitly assume that the \s-1UTF\-8\s0 is valid (not malformed) with respect to
buffer length.  Do not do things such as change a character's case or
see if it is alphanumeric without first being sure that it is valid
\&\s-1UTF\-8. \s0 This can be safely done for a whole string by using one of the
functions \f(CW\*(C`is_utf8_string()\*(C'\fR, \f(CW\*(C`is_utf8_string_loc()\*(C'\fR, and
\&\f(CW\*(C`is_utf8_string_loclen()\*(C'\fR.
.PP
\fINew Pad \s-1API\s0\fR
.IX Subsection "New Pad API"
.PP
Many new functions have been added to the \s-1API\s0 for manipulating lexical
pads.  See \*(L"Pad Data Structures\*(R" in perlapi for more information.
.SS "Changes to Special Variables"
.IX Subsection "Changes to Special Variables"
\fI\f(CI$$\fI can be assigned to\fR
.IX Subsection "$$ can be assigned to"
.PP
\&\f(CW$$\fR was made read-only in Perl 5.8.0.  But only sometimes: \f(CW\*(C`local $$\*(C'\fR
would make it writable again.  Some \s-1CPAN\s0 modules were using \f(CW\*(C`local $$\*(C'\fR or
\&\s-1XS\s0 code to bypass the read-only check, so there is no reason to keep \f(CW$$\fR
read-only.  (This change also allowed a bug to be fixed while maintaining
backward compatibility.)
.PP
\fI\f(CI$^X\fI converted to an absolute path on FreeBSD, \s-1OS X\s0 and Solaris\fR
.IX Subsection "$^X converted to an absolute path on FreeBSD, OS X and Solaris"
.PP
\&\f(CW$^X\fR is now converted to an absolute path on \s-1OS X,\s0 FreeBSD (without
needing \fI/proc\fR mounted) and Solaris 10 and 11.  This augments the
previous approach of using \fI/proc\fR on Linux, FreeBSD, and NetBSD
(in all cases, where mounted).
.PP
This makes relocatable perl installations more useful on these platforms.
(See \*(L"Relocatable \f(CW@INC\fR\*(R" in \fI\s-1INSTALL\s0\fR)
.SS "Debugger Changes"
.IX Subsection "Debugger Changes"
\fIFeatures inside the debugger\fR
.IX Subsection "Features inside the debugger"
.PP
The current Perl's feature bundle is now enabled for commands entered
in the interactive debugger.
.PP
\fINew option for the debugger's \f(BIt\fI command\fR
.IX Subsection "New option for the debugger's t command"
.PP
The \fBt\fR command in the debugger, which toggles tracing mode, now
accepts a numeric argument that determines how many levels of subroutine
calls to trace.
.PP
\fI\f(CI\*(C`enable\*(C'\fI and \f(CI\*(C`disable\*(C'\fI\fR
.IX Subsection "enable and disable"
.PP
The debugger now has \f(CW\*(C`disable\*(C'\fR and \f(CW\*(C`enable\*(C'\fR commands for disabling
existing breakpoints and re-enabling them.  See perldebug.
.PP
\fIBreakpoints with file names\fR
.IX Subsection "Breakpoints with file names"
.PP
The debugger's \*(L"b\*(R" command for setting breakpoints now lets a line
number be prefixed with a file name.  See
\&\*(L"b [file]:[line] [condition]\*(R" in perldebug.
.ie n .SS "The ""CORE"" Namespace"
.el .SS "The \f(CWCORE\fP Namespace"
.IX Subsection "The CORE Namespace"
\fIThe \f(CI\*(C`CORE::\*(C'\fI prefix\fR
.IX Subsection "The CORE:: prefix"
.PP
The \f(CW\*(C`CORE::\*(C'\fR prefix can now be used on keywords enabled by
feature.pm, even outside the scope of \f(CW\*(C`use feature\*(C'\fR.
.PP
\fISubroutines in the \f(CI\*(C`CORE\*(C'\fI namespace\fR
.IX Subsection "Subroutines in the CORE namespace"
.PP
Many Perl keywords are now available as subroutines in the \s-1CORE\s0 namespace.
This lets them be aliased:
.PP
.Vb 2
\&    BEGIN { *entangle = \e&CORE::tie }
\&    entangle $variable, $package, @args;
.Ve
.PP
And for prototypes to be bypassed:
.PP
.Vb 5
\&    sub mytie(\e[%$*@]$@) {
\&        my ($ref, $pack, @args) = @_;
\&        ... do something ...
\&        goto &CORE::tie;
\&    }
.Ve
.PP
Some of these cannot be called through references or via \f(CW&foo\fR syntax,
but must be called as barewords.
.PP
See \s-1CORE\s0 for details.
.SS "Other Changes"
.IX Subsection "Other Changes"
\fIAnonymous handles\fR
.IX Subsection "Anonymous handles"
.PP
Automatically generated file handles are now named _\|_ANONIO_\|_ when the
variable name cannot be determined, rather than \f(CW$_\fR\|_ANONIO_\|_.
.PP
\fIAutoloaded sort Subroutines\fR
.IX Subsection "Autoloaded sort Subroutines"
.PP
Custom sort subroutines can now be autoloaded [perl #30661]:
.PP
.Vb 2
\&    sub AUTOLOAD { ... }
\&    @sorted = sort foo @list; # uses AUTOLOAD
.Ve
.PP
\fI\f(CI\*(C`continue\*(C'\fI no longer requires the \*(L"switch\*(R" feature\fR
.IX Subsection "continue no longer requires the switch feature"
.PP
The \f(CW\*(C`continue\*(C'\fR keyword has two meanings.  It can introduce a \f(CW\*(C`continue\*(C'\fR
block after a loop, or it can exit the current \f(CW\*(C`when\*(C'\fR block.  Up to now,
the latter meaning was valid only with the \*(L"switch\*(R" feature enabled, and
was a syntax error otherwise.  Since the main purpose of feature.pm is to
avoid conflicts with user-defined subroutines, there is no reason for
\&\f(CW\*(C`continue\*(C'\fR to depend on it.
.PP
\fIDTrace probes for interpreter phase change\fR
.IX Subsection "DTrace probes for interpreter phase change"
.PP
The \f(CW\*(C`phase\-change\*(C'\fR probes will fire when the interpreter's phase
changes, which tracks the \f(CW\*(C`${^GLOBAL_PHASE}\*(C'\fR variable.  \f(CW\*(C`arg0\*(C'\fR is
the new phase name; \f(CW\*(C`arg1\*(C'\fR is the old one.  This is useful 
for limiting your instrumentation to one or more of: compile time,
run time, or destruct time.
.PP
\fI\f(CI\*(C`_\|_FILE_\|_()\*(C'\fI Syntax\fR
.IX Subsection "__FILE__() Syntax"
.PP
The \f(CW\*(C`_\|_FILE_\|_\*(C'\fR, \f(CW\*(C`_\|_LINE_\|_\*(C'\fR and \f(CW\*(C`_\|_PACKAGE_\|_\*(C'\fR tokens can now be written
with an empty pair of parentheses after them.  This makes them parse the
same way as \f(CW\*(C`time\*(C'\fR, \f(CW\*(C`fork\*(C'\fR and other built-in functions.
.PP
\fIThe \f(CI\*(C`\e$\*(C'\fI prototype accepts any scalar lvalue\fR
.IX Subsection "The $ prototype accepts any scalar lvalue"
.PP
The \f(CW\*(C`\e$\*(C'\fR and \f(CW\*(C`\e[$]\*(C'\fR subroutine prototypes now accept any scalar lvalue
argument.  Previously they accepted only scalars beginning with \f(CW\*(C`$\*(C'\fR and
hash and array elements.  This change makes them consistent with the way
the built-in \f(CW\*(C`read\*(C'\fR and \f(CW\*(C`recv\*(C'\fR functions (among others) parse their
arguments.  This means that one can override the built-in functions with
custom subroutines that parse their arguments the same way.
.PP
\fI\f(CI\*(C`_\*(C'\fI in subroutine prototypes\fR
.IX Subsection "_ in subroutine prototypes"
.PP
The \f(CW\*(C`_\*(C'\fR character in subroutine prototypes is now allowed before \f(CW\*(C`@\*(C'\fR or
\&\f(CW\*(C`%\*(C'\fR.
.SH "Security"
.IX Header "Security"
.ie n .SS "Use ""is_utf8_char_buf()"" and not ""is_utf8_char()"""
.el .SS "Use \f(CWis_utf8_char_buf()\fP and not \f(CWis_utf8_char()\fP"
.IX Subsection "Use is_utf8_char_buf() and not is_utf8_char()"
The latter function is now deprecated because its \s-1API\s0 is insufficient to
guarantee that it doesn't read (up to 12 bytes in the worst case) beyond
the end of its input string.  See
\&\fIis_utf8_char_buf()\fR.
.SS "Malformed \s-1UTF\-8\s0 input could cause attempts to read beyond the end of the buffer"
.IX Subsection "Malformed UTF-8 input could cause attempts to read beyond the end of the buffer"
Two new XS-accessible functions, \f(CW\*(C`utf8_to_uvchr_buf()\*(C'\fR and
\&\f(CW\*(C`utf8_to_uvuni_buf()\*(C'\fR are now available to prevent this, and the Perl
core has been converted to use them.
See \*(L"Internal Changes\*(R".
.ie n .SS """File::Glob::bsd_glob()"" memory error with \s-1GLOB_ALTDIRFUNC \s0(\s-1CVE\-2011\-2728\s0)."
.el .SS "\f(CWFile::Glob::bsd_glob()\fP memory error with \s-1GLOB_ALTDIRFUNC \s0(\s-1CVE\-2011\-2728\s0)."
.IX Subsection "File::Glob::bsd_glob() memory error with GLOB_ALTDIRFUNC (CVE-2011-2728)."
Calling \f(CW\*(C`File::Glob::bsd_glob\*(C'\fR with the unsupported flag
\&\s-1GLOB_ALTDIRFUNC\s0 would cause an access violation / segfault.  A Perl
program that accepts a flags value from an external source could expose
itself to denial of service or arbitrary code execution attacks.  There
are no known exploits in the wild.  The problem has been corrected by
explicitly disabling all unsupported flags and setting unused function
pointers to null.  Bug reported by Cle\*'ment Lecigne. (5.14.2)
.ie n .SS "Privileges are now set correctly when assigning to $("
.el .SS "Privileges are now set correctly when assigning to \f(CW$(\fP"
.IX Subsection "Privileges are now set correctly when assigning to $("
A hypothetical bug (probably unexploitable in practice) because the
incorrect setting of the effective group \s-1ID\s0 while setting \f(CW$(\fR has been
fixed.  The bug would have affected only systems that have \f(CW\*(C`setresgid()\*(C'\fR
but not \f(CW\*(C`setregid()\*(C'\fR, but no such systems are known to exist.
.SH "Deprecations"
.IX Header "Deprecations"
.SS "Don't read the Unicode data base files in \fIlib/unicore\fP"
.IX Subsection "Don't read the Unicode data base files in lib/unicore"
It is now deprecated to directly read the Unicode data base files.
These are stored in the \fIlib/unicore\fR directory.  Instead, you should
use the new functions in Unicode::UCD.  These provide a stable \s-1API,\s0
and give complete information.
.PP
Perl may at some point in the future change or remove these files.  The
file which applications were most likely to have used is
\&\fIlib/unicore/ToDigit.pl\fR.  \*(L"\fIprop_invmap()\fR\*(R" in Unicode::UCD can be used to
get at its data instead.
.ie n .SS "\s-1XS\s0 functions ""is_utf8_char()"", ""utf8_to_uvchr()"" and ""utf8_to_uvuni()"""
.el .SS "\s-1XS\s0 functions \f(CWis_utf8_char()\fP, \f(CWutf8_to_uvchr()\fP and \f(CWutf8_to_uvuni()\fP"
.IX Subsection "XS functions is_utf8_char(), utf8_to_uvchr() and utf8_to_uvuni()"
This function is deprecated because it could read beyond the end of the
input string.  Use the new \fIis_utf8_char_buf()\fR,
\&\f(CW\*(C`utf8_to_uvchr_buf()\*(C'\fR and \f(CW\*(C`utf8_to_uvuni_buf()\*(C'\fR instead.
.SH "Future Deprecations"
.IX Header "Future Deprecations"
This section serves as a notice of features that are \fIlikely\fR to be
removed or deprecated in the next release of
perl (5.18.0).  If your code depends on these features, you should
contact the Perl 5 Porters via the mailing
list <http://lists.perl.org/list/perl5-porters.html> or perlbug to
explain your use case and inform the deprecation process.
.SS "Core Modules"
.IX Subsection "Core Modules"
These modules may be marked as deprecated \fIfrom the core\fR.  This only
means that they will no longer be installed by default with the core
distribution, but will remain available on the \s-1CPAN.\s0
.IP "\(bu" 4
\&\s-1CPANPLUS\s0
.IP "\(bu" 4
Filter::Simple
.IP "\(bu" 4
PerlIO::mmap
.IP "\(bu" 4
Pod::LaTeX
.IP "\(bu" 4
Pod::Parser
.IP "\(bu" 4
SelfLoader
.IP "\(bu" 4
Text::Soundex
.IP "\(bu" 4
Thread.pm
.SS "Platforms with no supporting programmers"
.IX Subsection "Platforms with no supporting programmers"
These platforms will probably have their
special build support removed during the
5.17.0 development series.
.IP "\(bu" 4
BeOS
.IP "\(bu" 4
djgpp
.IP "\(bu" 4
dgux
.IP "\(bu" 4
\&\s-1EPOC\s0
.IP "\(bu" 4
MPE/iX
.IP "\(bu" 4
Rhapsody
.IP "\(bu" 4
\&\s-1UTS\s0
.IP "\(bu" 4
\&\s-1VM/ESA\s0
.SS "Other Future Deprecations"
.IX Subsection "Other Future Deprecations"
.IP "\(bu" 4
Swapping of $< and $>
.Sp
For more information about this future deprecation, see the relevant \s-1RT\s0
ticket <https://rt.perl.org/rt3/Ticket/Display.html?id=96212>.
.IP "\(bu" 4
sfio, stdio
.Sp
Perl supports being built without PerlIO proper, using a stdio or sfio
wrapper instead.  A perl build like this will not support \s-1IO\s0 layers and
thus Unicode \s-1IO,\s0 making it rather handicapped.
.Sp
PerlIO supports a \f(CW\*(C`stdio\*(C'\fR layer if stdio use is desired, and similarly a
sfio layer could be produced.
.IP "\(bu" 4
Unescaped literal \f(CW"{"\fR in regular expressions.
.Sp
Starting with v5.20, it is planned to require a literal \f(CW"{"\fR to be
escaped, for example by preceding it with a backslash.  In v5.18, a
deprecated warning message will be emitted for all such uses.  
This affects only patterns that are to match a literal \f(CW"{"\fR.  Other
uses of this character, such as part of a quantifier or sequence as in
those below, are completely unaffected:
.Sp
.Vb 3
\&    /foo{3,5}/
\&    /\ep{Alphabetic}/
\&    /\eN{DIGIT ZERO}
.Ve
.Sp
Removing this will permit extensions to Perl's pattern syntax and better
error checking for existing syntax.  See \*(L"Quantifiers\*(R" in perlre for an
example.
.IP "\(bu" 4
Revamping \f(CW"\eQ"\fR semantics in double-quotish strings when combined with other escapes.
.Sp
There are several bugs and inconsistencies involving combinations
of \f(CW\*(C`\eQ\*(C'\fR and escapes like \f(CW\*(C`\ex\*(C'\fR, \f(CW\*(C`\eL\*(C'\fR, etc., within a \f(CW\*(C`\eQ...\eE\*(C'\fR pair.
These need to be fixed, and doing so will necessarily change current
behavior.  The changes have not yet been settled.
.SH "Incompatible Changes"
.IX Header "Incompatible Changes"
.SS "Special blocks called in void context"
.IX Subsection "Special blocks called in void context"
Special blocks (\f(CW\*(C`BEGIN\*(C'\fR, \f(CW\*(C`CHECK\*(C'\fR, \f(CW\*(C`INIT\*(C'\fR, \f(CW\*(C`UNITCHECK\*(C'\fR, \f(CW\*(C`END\*(C'\fR) are now
called in void context.  This avoids wasteful copying of the result of the
last statement [perl #108794].
.ie n .SS "The ""overloading"" pragma and regexp objects"
.el .SS "The \f(CWoverloading\fP pragma and regexp objects"
.IX Subsection "The overloading pragma and regexp objects"
With \f(CW\*(C`no overloading\*(C'\fR, regular expression objects returned by \f(CW\*(C`qr//\*(C'\fR are
now stringified as \*(L"Regexp=REGEXP(0xbe600d)\*(R" instead of the regular
expression itself [perl #108780].
.SS "Two \s-1XS\s0 typemap Entries removed"
.IX Subsection "Two XS typemap Entries removed"
Two presumably unused \s-1XS\s0 typemap entries have been removed from the
core typemap: T_DATAUNIT and T_CALLBACK.  If you are, against all odds,
a user of these, please see the instructions on how to restore them
in perlxstypemap.
.SS "Unicode 6.1 has incompatibilities with Unicode 6.0"
.IX Subsection "Unicode 6.1 has incompatibilities with Unicode 6.0"
These are detailed in \*(L"Supports (almost) Unicode 6.1\*(R" above.
You can compile this version of Perl to use Unicode 6.0.  See
\&\*(L"Hacking Perl to work on earlier Unicode versions (for very serious hackers only)\*(R" in perlunicode.
.SS "Borland compiler"
.IX Subsection "Borland compiler"
All support for the Borland compiler has been dropped.  The code had not
worked for a long time anyway.
.SS "Certain deprecated Unicode properties are no longer supported by default"
.IX Subsection "Certain deprecated Unicode properties are no longer supported by default"
Perl should never have exposed certain Unicode properties that are used
by Unicode internally and not meant to be publicly available.  Use of
these has generated deprecated warning messages since Perl 5.12.  The
removed properties are Other_Alphabetic,
Other_Default_Ignorable_Code_Point, Other_Grapheme_Extend,
Other_ID_Continue, Other_ID_Start, Other_Lowercase, Other_Math, and
Other_Uppercase.
.PP
Perl may be recompiled to include any or all of them; instructions are
given in
\&\*(L"Unicode character properties that are \s-1NOT\s0 accepted by Perl\*(R" in perluniprops.
.SS "Dereferencing \s-1IO\s0 thingies as typeglobs"
.IX Subsection "Dereferencing IO thingies as typeglobs"
The \f(CW\*(C`*{...}\*(C'\fR operator, when passed a reference to an \s-1IO\s0 thingy (as in
\&\f(CW\*(C`*{*STDIN{IO}}\*(C'\fR), creates a new typeglob containing just that \s-1IO\s0 object.
Previously, it would stringify as an empty string, but some operators would
treat it as undefined, producing an \*(L"uninitialized\*(R" warning.
Now it stringifies as _\|_ANONIO_\|_ [perl #96326].
.SS "User-defined case-changing operations"
.IX Subsection "User-defined case-changing operations"
This feature was deprecated in Perl 5.14, and has now been removed.
The \s-1CPAN\s0 module Unicode::Casing provides better functionality without
the drawbacks that this feature had, as are detailed in the 5.14
documentation:
<http://perldoc.perl.org/5.14.0/perlunicode.html#User\-Defined\-Case\-Mappings\-%28for\-serious\-hackers\-only%29>
.SS "XSUBs are now 'static'"
.IX Subsection "XSUBs are now 'static'"
\&\s-1XSUB C\s0 functions are now 'static', that is, they are not visible from
outside the compilation unit.  Users can use the new \f(CW\*(C`XS_EXTERNAL(name)\*(C'\fR
and \f(CW\*(C`XS_INTERNAL(name)\*(C'\fR macros to pick the desired linking behavior.
The ordinary \f(CW\*(C`XS(name)\*(C'\fR declaration for XSUBs will continue to declare
non\-'static' XSUBs for compatibility, but the \s-1XS\s0 compiler,
ExtUtils::ParseXS (\f(CW\*(C`xsubpp\*(C'\fR) will emit 'static' XSUBs by default.
ExtUtils::ParseXS's behavior can be reconfigured from \s-1XS\s0 using the
\&\f(CW\*(C`EXPORT_XSUB_SYMBOLS\*(C'\fR keyword.  See perlxs for details.
.SS "Weakening read-only references"
.IX Subsection "Weakening read-only references"
Weakening read-only references is no longer permitted.  It should never
have worked anyway, and could sometimes result in crashes.
.SS "Tying scalars that hold typeglobs"
.IX Subsection "Tying scalars that hold typeglobs"
Attempting to tie a scalar after a typeglob was assigned to it would
instead tie the handle in the typeglob's \s-1IO\s0 slot.  This meant that it was
impossible to tie the scalar itself.  Similar problems affected \f(CW\*(C`tied\*(C'\fR and
\&\f(CW\*(C`untie\*(C'\fR: \f(CW\*(C`tied $scalar\*(C'\fR would return false on a tied scalar if the last
thing returned was a typeglob, and \f(CW\*(C`untie $scalar\*(C'\fR on such a tied scalar
would do nothing.
.PP
We fixed this problem before Perl 5.14.0, but it caused problems with some
\&\s-1CPAN\s0 modules, so we put in a deprecation cycle instead.
.PP
Now the deprecation has been removed and this bug has been fixed.  So
\&\f(CW\*(C`tie $scalar\*(C'\fR will always tie the scalar, not the handle it holds.  To tie
the handle, use \f(CW\*(C`tie *$scalar\*(C'\fR (with an explicit asterisk).  The same
applies to \f(CW\*(C`tied *$scalar\*(C'\fR and \f(CW\*(C`untie *$scalar\*(C'\fR.
.ie n .SS "IPC::Open3 no longer provides ""xfork()"", ""xclose_on_exec()"" and ""xpipe_anon()"""
.el .SS "IPC::Open3 no longer provides \f(CWxfork()\fP, \f(CWxclose_on_exec()\fP and \f(CWxpipe_anon()\fP"
.IX Subsection "IPC::Open3 no longer provides xfork(), xclose_on_exec() and xpipe_anon()"
All three functions were private, undocumented, and unexported.  They do
not appear to be used by any code on \s-1CPAN. \s0 Two have been inlined and one
deleted entirely.
.ie n .SS "$$ no longer caches \s-1PID\s0"
.el .SS "\f(CW$$\fP no longer caches \s-1PID\s0"
.IX Subsection "$$ no longer caches PID"
Previously, if one called \fIfork\fR\|(3) from C, Perl's
notion of \f(CW$$\fR could go out of sync with what \fIgetpid()\fR returns.  By always
fetching the value of \f(CW$$\fR via \fIgetpid()\fR, this potential bug is eliminated.
Code that depends on the caching behavior will break.  As described in
Core Enhancements,
\&\f(CW$$\fR is now writable, but it will be reset during a
fork.
.ie n .SS "$$ and ""getppid()"" no longer emulate \s-1POSIX\s0 semantics under LinuxThreads"
.el .SS "\f(CW$$\fP and \f(CWgetppid()\fP no longer emulate \s-1POSIX\s0 semantics under LinuxThreads"
.IX Subsection "$$ and getppid() no longer emulate POSIX semantics under LinuxThreads"
The \s-1POSIX\s0 emulation of \f(CW$$\fR and \f(CW\*(C`getppid()\*(C'\fR under the obsolete
LinuxThreads implementation has been removed.
This only impacts users of Linux 2.4 and
users of Debian GNU/kFreeBSD up to and including 6.0, not the vast
majority of Linux installations that use \s-1NPTL\s0 threads.
.PP
This means that \f(CW\*(C`getppid()\*(C'\fR, like \f(CW$$\fR, is now always guaranteed to
return the \s-1OS\s0's idea of the current state of the process, not perl's
cached version of it.
.PP
See the documentation for $$ for details.
.ie n .SS "$<, $>, $( and $) are no longer cached"
.el .SS "\f(CW$<\fP, \f(CW$>\fP, \f(CW$(\fP and \f(CW$)\fP are no longer cached"
.IX Subsection "$<, $>, $( and $) are no longer cached"
Similarly to the changes to \f(CW$$\fR and \f(CW\*(C`getppid()\*(C'\fR, the internal
caching of \f(CW$<\fR, \f(CW$>\fR, \f(CW$(\fR and \f(CW$)\fR has been removed.
.PP
When we cached these values our idea of what they were would drift out
of sync with reality if someone (e.g., someone embedding perl) called
\&\f(CW\*(C`sete?[ug]id()\*(C'\fR without updating \f(CW\*(C`PL_e?[ug]id\*(C'\fR.  Having to deal with
this complexity wasn't worth it given how cheap the \f(CW\*(C`gete?[ug]id()\*(C'\fR
system call is.
.PP
This change will break a handful of \s-1CPAN\s0 modules that use the XS-level
\&\f(CW\*(C`PL_uid\*(C'\fR, \f(CW\*(C`PL_gid\*(C'\fR, \f(CW\*(C`PL_euid\*(C'\fR or \f(CW\*(C`PL_egid\*(C'\fR variables.
.PP
The fix for those breakages is to use \f(CW\*(C`PerlProc_gete?[ug]id()\*(C'\fR to
retrieve them (e.g., \f(CW\*(C`PerlProc_getuid()\*(C'\fR), and not to assign to
\&\f(CW\*(C`PL_e?[ug]id\*(C'\fR if you change the \s-1UID/GID/EUID/EGID. \s0 There is no longer
any need to do so since perl will always retrieve the up-to-date
version of those values from the \s-1OS.\s0
.ie n .SS "Which Non-ASCII characters get quoted by ""quotemeta"" and ""\eQ"" has changed"
.el .SS "Which Non-ASCII characters get quoted by \f(CWquotemeta\fP and \f(CW\eQ\fP has changed"
.IX Subsection "Which Non-ASCII characters get quoted by quotemeta and Q has changed"
This is unlikely to result in a real problem, as Perl does not attach
special meaning to any non-ASCII character, so it is currently
irrelevant which are quoted or not.  This change fixes bug [perl #77654] and
brings Perl's behavior more into line with Unicode's recommendations.
See \*(L"quotemeta\*(R" in perlfunc.
.SH "Performance Enhancements"
.IX Header "Performance Enhancements"
.IP "\(bu" 4
Improved performance for Unicode properties in regular expressions
.Sp
Matching a code point against a Unicode property is now done via a
binary search instead of linear.  This means for example that the worst
case for a 1000 item property is 10 probes instead of 1000.  This
inefficiency has been compensated for in the past by permanently storing
in a hash the results of a given probe plus the results for the adjacent
64 code points, under the theory that near-by code points are likely to
be searched for.  A separate hash was used for each mention of a Unicode
property in each regular expression.  Thus, \f(CW\*(C`qr/\ep{foo}abc\ep{foo}/\*(C'\fR
would generate two hashes.  Any probes in one instance would be unknown
to the other, and the hashes could expand separately to be quite large
if the regular expression were used on many different widely-separated
code points.
Now, however, there is just one hash shared by all instances of a given
property.  This means that if \f(CW\*(C`\ep{foo}\*(C'\fR is matched against \*(L"A\*(R" in one
regular expression in a thread, the result will be known immediately to
all regular expressions, and the relentless march of using up memory is
slowed considerably.
.IP "\(bu" 4
Version declarations with the \f(CW\*(C`use\*(C'\fR keyword (e.g., \f(CW\*(C`use 5.012\*(C'\fR) are now
faster, as they enable features without loading \fIfeature.pm\fR.
.IP "\(bu" 4
\&\f(CW\*(C`local $_\*(C'\fR is faster now, as it no longer iterates through magic that it
is not going to copy anyway.
.IP "\(bu" 4
Perl 5.12.0 sped up the destruction of objects whose classes define
empty \f(CW\*(C`DESTROY\*(C'\fR methods (to prevent autoloading), by simply not
calling such empty methods.  This release takes this optimization a
step further, by not calling any \f(CW\*(C`DESTROY\*(C'\fR method that begins with a
\&\f(CW\*(C`return\*(C'\fR statement.  This can be useful for destructors that are only
used for debugging:
.Sp
.Vb 2
\&    use constant DEBUG => 1;
\&    sub DESTROY { return unless DEBUG; ... }
.Ve
.Sp
Constant-folding will reduce the first statement to \f(CW\*(C`return;\*(C'\fR if \s-1DEBUG\s0
is set to 0, triggering this optimization.
.IP "\(bu" 4
Assigning to a variable that holds a typeglob or copy-on-write scalar
is now much faster.  Previously the typeglob would be stringified or
the copy-on-write scalar would be copied before being clobbered.
.IP "\(bu" 4
Assignment to \f(CW\*(C`substr\*(C'\fR in void context is now more than twice its
previous speed.  Instead of creating and returning a special lvalue
scalar that is then assigned to, \f(CW\*(C`substr\*(C'\fR modifies the original string
itself.
.IP "\(bu" 4
\&\f(CW\*(C`substr\*(C'\fR no longer calculates a value to return when called in void
context.
.IP "\(bu" 4
Due to changes in File::Glob, Perl's \f(CW\*(C`glob\*(C'\fR function and its \f(CW\*(C`<...>\*(C'\fR equivalent are now much faster.  The splitting of the pattern
into words has been rewritten in C, resulting in speed-ups of 20% for
some cases.
.Sp
This does not affect \f(CW\*(C`glob\*(C'\fR on \s-1VMS,\s0 as it does not use File::Glob.
.IP "\(bu" 4
The short-circuiting operators \f(CW\*(C`&&\*(C'\fR, \f(CW\*(C`||\*(C'\fR, and \f(CW\*(C`//\*(C'\fR, when chained
(such as \f(CW\*(C`$a || $b || $c\*(C'\fR), are now considerably faster to short-circuit,
due to reduced optree traversal.
.IP "\(bu" 4
The implementation of \f(CW\*(C`s///r\*(C'\fR makes one fewer copy of the scalar's value.
.IP "\(bu" 4
Recursive calls to lvalue subroutines in lvalue scalar context use less
memory.
.SH "Modules and Pragmata"
.IX Header "Modules and Pragmata"
.SS "Deprecated Modules"
.IX Subsection "Deprecated Modules"
.IP "Version::Requirements" 4
.IX Item "Version::Requirements"
Version::Requirements is now \s-1DEPRECATED,\s0 use CPAN::Meta::Requirements,
which is a drop-in replacement.  It will be deleted from perl.git blead
in v5.17.0.
.SS "New Modules and Pragmata"
.IX Subsection "New Modules and Pragmata"
.IP "\(bu" 4
arybase \*(-- this new module implements the \f(CW$[\fR variable.
.IP "\(bu" 4
PerlIO::mmap 0.010 has been added to the Perl core.
.Sp
The \f(CW\*(C`mmap\*(C'\fR PerlIO layer is no longer implemented by perl itself, but has
been moved out into the new PerlIO::mmap module.
.SS "Updated Modules and Pragmata"
.IX Subsection "Updated Modules and Pragmata"
This is only an overview of selected module updates.  For a complete list of
updates, run:
.PP
.Vb 1
\&    $ corelist \-\-diff 5.14.0 5.16.0
.Ve
.PP
You can substitute your favorite version in place of 5.14.0, too.
.IP "\(bu" 4
Archive::Extract has been upgraded from version 0.48 to 0.58.
.Sp
Includes a fix for FreeBSD to only use \f(CW\*(C`unzip\*(C'\fR if it is located in
\&\f(CW\*(C`/usr/local/bin\*(C'\fR, as FreeBSD 9.0 will ship with a limited \f(CW\*(C`unzip\*(C'\fR in
\&\f(CW\*(C`/usr/bin\*(C'\fR.
.IP "\(bu" 4
Archive::Tar has been upgraded from version 1.76 to 1.82.
.Sp
Adjustments to handle files >8gb (>0777777777777 octal) and a feature
to return the \s-1MD5SUM\s0 of files in the archive.
.IP "\(bu" 4
base has been upgraded from version 2.16 to 2.18.
.Sp
\&\f(CW\*(C`base\*(C'\fR no longer sets a module's \f(CW$VERSION\fR to \*(L"\-1\*(R" when a module it
loads does not define a \f(CW$VERSION\fR.  This change has been made because
\&\*(L"\-1\*(R" is not a valid version number under the new \*(L"lax\*(R" criteria used
internally by \f(CW\*(C`UNIVERSAL::VERSION\*(C'\fR.  (See version for more on \*(L"lax\*(R"
version criteria.)
.Sp
\&\f(CW\*(C`base\*(C'\fR no longer internally skips loading modules it has already loaded
and instead relies on \f(CW\*(C`require\*(C'\fR to inspect \f(CW%INC\fR.  This fixes a bug
when \f(CW\*(C`base\*(C'\fR is used with code that clear \f(CW%INC\fR to force a module to
be reloaded.
.IP "\(bu" 4
Carp has been upgraded from version 1.20 to 1.26.
.Sp
It now includes last read filehandle info and puts a dot after the file
and line number, just like errors from \f(CW\*(C`die\*(C'\fR [perl #106538].
.IP "\(bu" 4
charnames has been updated from version 1.18 to 1.30.
.Sp
\&\f(CW\*(C`charnames\*(C'\fR can now be invoked with a new option, \f(CW\*(C`:loose\*(C'\fR,
which is like the existing \f(CW\*(C`:full\*(C'\fR option, but enables Unicode loose
name matching.  Details are in \*(L"\s-1LOOSE MATCHES\*(R"\s0 in charnames.
.IP "\(bu" 4
B::Deparse has been upgraded from version 1.03 to 1.14.  This fixes
numerous deparsing bugs.
.IP "\(bu" 4
\&\s-1CGI\s0 has been upgraded from version 3.52 to 3.59.
.Sp
It uses the public and documented \s-1FCGI\s0.pm \s-1API\s0 in CGI::Fast.  CGI::Fast was
using an \s-1FCGI API\s0 that was deprecated and removed from documentation
more than ten years ago.  Usage of this deprecated \s-1API\s0 with \s-1FCGI \s0>=
0.70 or \s-1FCGI\s0 <= 0.73 introduces a security issue.
<https://rt.cpan.org/Public/Bug/Display.html?id=68380>
<http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE\-2011\-2766>
.Sp
Things that may break your code:
.Sp
\&\f(CW\*(C`url()\*(C'\fR was fixed to return \f(CW\*(C`PATH_INFO\*(C'\fR when it is explicitly requested
with either the \f(CW\*(C`path=>1\*(C'\fR or \f(CW\*(C`path_info=>1\*(C'\fR flag.
.Sp
If your code is running under mod_rewrite (or compatible) and you are
calling \f(CW\*(C`self_url()\*(C'\fR or you are calling \f(CW\*(C`url()\*(C'\fR and passing
\&\f(CW\*(C`path_info=>1\*(C'\fR, these methods will actually be returning
\&\f(CW\*(C`PATH_INFO\*(C'\fR now, as you have explicitly requested or \f(CW\*(C`self_url()\*(C'\fR
has requested on your behalf.
.Sp
The \f(CW\*(C`PATH_INFO\*(C'\fR has been omitted in such URLs since the issue was
introduced in the 3.12 release in December, 2005.
.Sp
This bug is so old your application may have come to depend on it or
workaround it. Check for application before upgrading to this release.
.Sp
Examples of affected method calls:
.Sp
.Vb 5
\&  $q\->url(\-absolute => 1, \-query => 1, \-path_info => 1);
\&  $q\->url(\-path=>1);
\&  $q\->url(\-full=>1,\-path=>1);
\&  $q\->url(\-rewrite=>1,\-path=>1);
\&  $q\->self_url();
.Ve
.Sp
We no longer read from \s-1STDIN\s0 when the Content-Length is not set,
preventing requests with no Content-Length from sometimes freezing.
This is consistent with the \s-1CGI RFC 3875,\s0 and is also consistent with
CGI::Simple.  However, the old behavior may have been expected by some
command-line uses of \s-1CGI\s0.pm.
.Sp
In addition, the \s-1DELETE HTTP\s0 verb is now supported.
.IP "\(bu" 4
Compress::Zlib has been upgraded from version 2.035 to 2.048.
.Sp
IO::Compress::Zip and IO::Uncompress::Unzip now have support for \s-1LZMA
\&\s0(method 14).  There is a fix for a \s-1CRC\s0 issue in IO::Compress::Unzip and
it supports Streamed Stored context now.  And fixed a Zip64 issue in
IO::Compress::Zip when the content size was exactly 0xFFFFFFFF.
.IP "\(bu" 4
Digest::SHA has been upgraded from version 5.61 to 5.71.
.Sp
Added \s-1BITS\s0 mode to the addfile method and shasum.  This makes
partial-byte inputs possible via files/STDIN and lets shasum check
all 8074 \s-1NIST\s0 Msg vectors, where previously special programming was
required to do this.
.IP "\(bu" 4
Encode has been upgraded from version 2.42 to 2.44.
.Sp
Missing aliases added, a deep recursion error fixed and various
documentation updates.
.Sp
Addressed 'decode_xs n\-byte heap\-overflow' security bug in Unicode.xs
(\s-1CVE\-2011\-2939\s0). (5.14.2)
.IP "\(bu" 4
ExtUtils::CBuilder updated from version 0.280203 to 0.280206.
.Sp
The new version appends \s-1CFLAGS\s0 and \s-1LDFLAGS\s0 to their Config.pm
counterparts.
.IP "\(bu" 4
ExtUtils::ParseXS has been upgraded from version 2.2210 to 3.16.
.Sp
Much of ExtUtils::ParseXS, the module behind the \s-1XS\s0 compiler \f(CW\*(C`xsubpp\*(C'\fR,
was rewritten and cleaned up.  It has been made somewhat more extensible
and now finally uses strictures.
.Sp
The typemap logic has been moved into a separate module,
ExtUtils::Typemaps.  See \*(L"New Modules and Pragmata\*(R", above.
.Sp
For a complete set of changes, please see the ExtUtils::ParseXS
changelog, available on the \s-1CPAN.\s0
.IP "\(bu" 4
File::Glob has been upgraded from version 1.12 to 1.17.
.Sp
On Windows, tilde (~) expansion now checks the \f(CW\*(C`USERPROFILE\*(C'\fR environment
variable, after checking \f(CW\*(C`HOME\*(C'\fR.
.Sp
It has a new \f(CW\*(C`:bsd_glob\*(C'\fR export tag, intended to replace \f(CW\*(C`:glob\*(C'\fR.  Like
\&\f(CW\*(C`:glob\*(C'\fR it overrides \f(CW\*(C`glob\*(C'\fR with a function that does not split the glob
pattern into words, but, unlike \f(CW\*(C`:glob\*(C'\fR, it iterates properly in scalar
context, instead of returning the last file.
.Sp
There are other changes affecting Perl's own \f(CW\*(C`glob\*(C'\fR operator (which uses
File::Glob internally, except on \s-1VMS\s0).  See \*(L"Performance Enhancements\*(R"
and \*(L"Selected Bug Fixes\*(R".
.IP "\(bu" 4
FindBin updated from version 1.50 to 1.51.
.Sp
It no longer returns a wrong result if a script of the same name as the
current one exists in the path and is executable.
.IP "\(bu" 4
HTTP::Tiny has been upgraded from version 0.012 to 0.017.
.Sp
Added support for using \f(CW$ENV{http_proxy}\fR to set the default proxy host.
.Sp
Adds additional shorthand methods for all common \s-1HTTP\s0 verbs,
a \f(CW\*(C`post_form()\*(C'\fR method for POST-ing x\-www-form-urlencoded data and
a \f(CW\*(C`www_form_urlencode()\*(C'\fR utility method.
.IP "\(bu" 4
\&\s-1IO\s0 has been upgraded from version 1.25_04 to 1.25_06, and IO::Handle
from version 1.31 to 1.33.
.Sp
Together, these upgrades fix a problem with IO::Handle's \f(CW\*(C`getline\*(C'\fR and
\&\f(CW\*(C`getlines\*(C'\fR methods.  When these methods are called on the special \s-1ARGV\s0
handle, the next file is automatically opened, as happens with the built-in
\&\f(CW\*(C`<>\*(C'\fR and \f(CW\*(C`readline\*(C'\fR functions.  But, unlike the built-ins, these
methods were not respecting the caller's use of the open pragma and
applying the appropriate I/O layers to the newly-opened file
[rt.cpan.org #66474].
.IP "\(bu" 4
IPC::Cmd has been upgraded from version 0.70 to 0.76.
.Sp
Capturing of command output (both \f(CW\*(C`STDOUT\*(C'\fR and \f(CW\*(C`STDERR\*(C'\fR) is now supported
using IPC::Open3 on MSWin32 without requiring IPC::Run.
.IP "\(bu" 4
IPC::Open3 has been upgraded from version 1.09 to 1.12.
.Sp
Fixes a bug which prevented use of \f(CW\*(C`open3\*(C'\fR on Windows when \f(CW*STDIN\fR,
\&\f(CW*STDOUT\fR or \f(CW*STDERR\fR had been localized.
.Sp
Fixes a bug which prevented duplicating numeric file descriptors on Windows.
.Sp
\&\f(CW\*(C`open3\*(C'\fR with \*(L"\-\*(R" for the program name works once more.  This was broken in
version 1.06 (and hence in Perl 5.14.0) [perl #95748].
.IP "\(bu" 4
Locale::Codes has been upgraded from version 3.16 to 3.21.
.Sp
Added Language Extension codes (langext) and Language Variation codes (langvar)
as defined in the \s-1IANA\s0 language registry.
.Sp
Added language codes from \s-1ISO 639\-5\s0
.Sp
Added language/script codes from the \s-1IANA\s0 language subtag registry
.Sp
Fixed an uninitialized value warning [rt.cpan.org #67438].
.Sp
Fixed the return value for the all_XXX_codes and all_XXX_names functions
[rt.cpan.org #69100].
.Sp
Reorganized modules to move Locale::MODULE to Locale::Codes::MODULE to allow
for cleaner future additions.  The original four modules (Locale::Language,
Locale::Currency, Locale::Country, Locale::Script) will continue to work, but
all new sets of codes will be added in the Locale::Codes namespace.
.Sp
The code2XXX, XXX2code, all_XXX_codes, and all_XXX_names functions now
support retired codes.  All codesets may be specified by a constant or
by their name now.  Previously, they were specified only by a constant.
.Sp
The alias_code function exists for backward compatibility.  It has been
replaced by rename_country_code.  The alias_code function will be
removed some time after September, 2013.
.Sp
All work is now done in the central module (Locale::Codes).  Previously,
some was still done in the wrapper modules (Locale::Codes::*).  Added
Language Family codes (langfam) as defined in \s-1ISO 639\-5.\s0
.IP "\(bu" 4
Math::BigFloat has been upgraded from version 1.993 to 1.997.
.Sp
The \f(CW\*(C`numify\*(C'\fR method has been corrected to return a normalized Perl number
(the result of \f(CW\*(C`0 + $thing\*(C'\fR), instead of a string [rt.cpan.org #66732].
.IP "\(bu" 4
Math::BigInt has been upgraded from version 1.994 to 1.998.
.Sp
It provides a new \f(CW\*(C`bsgn\*(C'\fR method that complements the \f(CW\*(C`babs\*(C'\fR method.
.Sp
It fixes the internal \f(CW\*(C`objectify\*(C'\fR function's handling of \*(L"foreign objects\*(R"
so they are converted to the appropriate class (Math::BigInt or
Math::BigFloat).
.IP "\(bu" 4
Math::BigRat has been upgraded from version 0.2602 to 0.2603.
.Sp
\&\f(CW\*(C`int()\*(C'\fR on a Math::BigRat object containing \-1/2 now creates a
Math::BigInt containing 0, rather than \-0.  Math::BigInt does not even
support negative zero, so the resulting object was actually malformed
[perl #95530].
.IP "\(bu" 4
Math::Complex has been upgraded from version 1.56 to 1.59
and Math::Trig from version 1.2 to 1.22.
.Sp
Fixes include: correct copy constructor usage; fix polarwise formatting with
numeric format specifier; and more stable \f(CW\*(C`great_circle_direction\*(C'\fR algorithm.
.IP "\(bu" 4
Module::CoreList has been upgraded from version 2.51 to 2.66.
.Sp
The \f(CW\*(C`corelist\*(C'\fR utility now understands the \f(CW\*(C`\-r\*(C'\fR option for displaying
Perl release dates and the \f(CW\*(C`\-\-diff\*(C'\fR option to print the set of modlib
changes between two perl distributions.
.IP "\(bu" 4
Module::Metadata has been upgraded from version 1.000004 to 1.000009.
.Sp
Adds \f(CW\*(C`provides\*(C'\fR method to generate a \s-1CPAN META\s0 provides data structure
correctly; use of \f(CW\*(C`package_versions_from_directory\*(C'\fR is discouraged.
.IP "\(bu" 4
ODBM_File has been upgraded from version 1.10 to 1.12.
.Sp
The \s-1XS\s0 code is now compiled with \f(CW\*(C`PERL_NO_GET_CONTEXT\*(C'\fR, which will aid
performance under ithreads.
.IP "\(bu" 4
open has been upgraded from version 1.08 to 1.10.
.Sp
It no longer turns off layers on standard handles when invoked without the
\&\*(L":std\*(R" directive.  Similarly, when invoked \fIwith\fR the \*(L":std\*(R" directive, it
now clears layers on \s-1STDERR\s0 before applying the new ones, and not just on
\&\s-1STDIN\s0 and \s-1STDOUT\s0 [perl #92728].
.IP "\(bu" 4
overload has been upgraded from version 1.13 to 1.18.
.Sp
\&\f(CW\*(C`overload::Overloaded\*(C'\fR no longer calls \f(CW\*(C`can\*(C'\fR on the class, but uses
another means to determine whether the object has overloading.  It was
never correct for it to call \f(CW\*(C`can\*(C'\fR, as overloading does not respect
\&\s-1AUTOLOAD. \s0 So classes that autoload methods and implement \f(CW\*(C`can\*(C'\fR no longer
have to account for overloading [perl #40333].
.Sp
A warning is now produced for invalid arguments.  See \*(L"New Diagnostics\*(R".
.IP "\(bu" 4
PerlIO::scalar has been upgraded from version 0.11 to 0.14.
.Sp
(This is the module that implements \f(CW\*(C`open $fh, \*(Aq>\*(Aq, \e$scalar\*(C'\fR.)
.Sp
It fixes a problem with \f(CW\*(C`open my $fh, ">", \e$scalar\*(C'\fR not working if
\&\f(CW$scalar\fR is a copy-on-write scalar. (5.14.2)
.Sp
It also fixes a hang that occurs with \f(CW\*(C`readline\*(C'\fR or \f(CW\*(C`<$fh>\*(C'\fR if a
typeglob has been assigned to \f(CW$scalar\fR [perl #92258].
.Sp
It no longer assumes during \f(CW\*(C`seek\*(C'\fR that \f(CW$scalar\fR is a string internally.
If it didn't crash, it was close to doing so [perl #92706].  Also, the
internal print routine no longer assumes that the position set by \f(CW\*(C`seek\*(C'\fR
is valid, but extends the string to that position, filling the intervening
bytes (between the old length and the seek position) with nulls
[perl #78980].
.Sp
Printing to an in-memory handle now works if the \f(CW$scalar\fR holds a reference,
stringifying the reference before modifying it.  References used to be
treated as empty strings.
.Sp
Printing to an in-memory handle no longer crashes if the \f(CW$scalar\fR happens to
hold a number internally, but no string buffer.
.Sp
Printing to an in-memory handle no longer creates scalars that confuse
the regular expression engine [perl #108398].
.IP "\(bu" 4
Pod::Functions has been upgraded from version 1.04 to 1.05.
.Sp
\&\fIFunctions.pm\fR is now generated at perl build time from annotations in
\&\fIperlfunc.pod\fR.  This will ensure that Pod::Functions and perlfunc
remain in synchronisation.
.IP "\(bu" 4
Pod::Html has been upgraded from version 1.11 to 1.1502.
.Sp
This is an extensive rewrite of Pod::Html to use Pod::Simple under
the hood.  The output has changed significantly.
.IP "\(bu" 4
Pod::Perldoc has been upgraded from version 3.15_03 to 3.17.
.Sp
It corrects the search paths on \s-1VMS\s0 [perl #90640]. (5.14.1)
.Sp
The \fB\-v\fR option now fetches the right section for \f(CW$0\fR.
.Sp
This upgrade has numerous significant fixes.  Consult its changelog on
the \s-1CPAN\s0 for more information.
.IP "\(bu" 4
\&\s-1POSIX\s0 has been upgraded from version 1.24 to 1.30.
.Sp
\&\s-1POSIX\s0 no longer uses AutoLoader.  Any code which was relying on this
implementation detail was buggy, and may fail because of this change.
The module's Perl code has been considerably simplified, roughly halving
the number of lines, with no change in functionality.  The \s-1XS\s0 code has
been refactored to reduce the size of the shared object by about 12%,
with no change in functionality.  More \s-1POSIX\s0 functions now have tests.
.Sp
\&\f(CW\*(C`sigsuspend\*(C'\fR and \f(CW\*(C`pause\*(C'\fR now run signal handlers before returning, as the
whole point of these two functions is to wait until a signal has
arrived, and then return \fIafter\fR it has been triggered.  Delayed, or
\&\*(L"safe\*(R", signals were preventing that from happening, possibly resulting in
race conditions [perl #107216].
.Sp
\&\f(CW\*(C`POSIX::sleep\*(C'\fR is now a direct call into the underlying \s-1OS \s0\f(CW\*(C`sleep\*(C'\fR
function, instead of being a Perl wrapper on \f(CW\*(C`CORE::sleep\*(C'\fR.
\&\f(CW\*(C`POSIX::dup2\*(C'\fR now returns the correct value on Win32 (\fIi.e.\fR, the file
descriptor).  \f(CW\*(C`POSIX::SigSet\*(C'\fR \f(CW\*(C`sigsuspend\*(C'\fR and \f(CW\*(C`sigpending\*(C'\fR and
\&\f(CW\*(C`POSIX::pause\*(C'\fR now dispatch safe signals immediately before returning to
their caller.
.Sp
\&\f(CW\*(C`POSIX::Termios::setattr\*(C'\fR now defaults the third argument to \f(CW\*(C`TCSANOW\*(C'\fR,
instead of 0. On most platforms \f(CW\*(C`TCSANOW\*(C'\fR is defined to be 0, but on some
0 is not a valid parameter, which caused a call with defaults to fail.
.IP "\(bu" 4
Socket has been upgraded from version 1.94 to 2.001.
.Sp
It has new functions and constants for handling IPv6 sockets:
.Sp
.Vb 11
\&    pack_ipv6_mreq
\&    unpack_ipv6_mreq
\&    IPV6_ADD_MEMBERSHIP
\&    IPV6_DROP_MEMBERSHIP
\&    IPV6_MTU
\&    IPV6_MTU_DISCOVER
\&    IPV6_MULTICAST_HOPS
\&    IPV6_MULTICAST_IF
\&    IPV6_MULTICAST_LOOP
\&    IPV6_UNICAST_HOPS
\&    IPV6_V6ONLY
.Ve
.IP "\(bu" 4
Storable has been upgraded from version 2.27 to 2.34.
.Sp
It no longer turns copy-on-write scalars into read-only scalars when
freezing and thawing.
.IP "\(bu" 4
Sys::Syslog has been upgraded from version 0.27 to 0.29.
.Sp
This upgrade closes many outstanding bugs.
.IP "\(bu" 4
Term::ANSIColor has been upgraded from version 3.00 to 3.01.
.Sp
Only interpret an initial array reference as a list of colors, not any initial
reference, allowing the colored function to work properly on objects with
stringification defined.
.IP "\(bu" 4
Term::ReadLine has been upgraded from version 1.07 to 1.09.
.Sp
Term::ReadLine now supports any event loop, including unpublished ones and
simple IO::Select, loops without the need to rewrite existing code for
any particular framework [perl #108470].
.IP "\(bu" 4
threads::shared has been upgraded from version 1.37 to 1.40.
.Sp
Destructors on shared objects used to be ignored sometimes if the objects
were referenced only by shared data structures.  This has been mostly
fixed, but destructors may still be ignored if the objects still exist at
global destruction time [perl #98204].
.IP "\(bu" 4
Unicode::Collate has been upgraded from version 0.73 to 0.89.
.Sp
Updated to \s-1CLDR 1.9.1\s0
.Sp
Locales updated to \s-1CLDR 2.0:\s0 mk, mt, nb, nn, ro, ru, sk, sr, sv, uk,
zh_\|_pinyin, zh_\|_stroke
.Sp
Newly supported locales: bn, fa, ml, mr, or, pa, sa, si, si_\|_dictionary,
sr_Latn, sv_\|_reformed, ta, te, th, ur, wae.
.Sp
Tailored compatibility ideographs as well as unified ideographs for the
locales: ja, ko, zh_\|_big5han, zh_\|_gb2312han, zh_\|_pinyin, zh_\|_stroke.
.Sp
Locale/*.pl files are now searched for in \f(CW@INC\fR.
.IP "\(bu" 4
Unicode::Normalize has been upgraded from version 1.10 to 1.14.
.Sp
Fixes for the removal of \fIunicore/CompositionExclusions.txt\fR from core.
.IP "\(bu" 4
Unicode::UCD has been upgraded from version 0.32 to 0.43.
.Sp
This adds four new functions:  \f(CW\*(C`prop_aliases()\*(C'\fR and
\&\f(CW\*(C`prop_value_aliases()\*(C'\fR, which are used to find all Unicode-approved
synonyms for property names, or to convert from one name to another;
\&\f(CW\*(C`prop_invlist\*(C'\fR which returns all code points matching a given
Unicode binary property; and \f(CW\*(C`prop_invmap\*(C'\fR which returns the complete
specification of a given Unicode property.
.IP "\(bu" 4
Win32API::File has been upgraded from version 0.1101 to 0.1200.
.Sp
Added SetStdHandle and GetStdHandle functions
.SS "Removed Modules and Pragmata"
.IX Subsection "Removed Modules and Pragmata"
As promised in Perl 5.14.0's release notes, the following modules have
been removed from the core distribution, and if needed should be installed
from \s-1CPAN\s0 instead.
.IP "\(bu" 4
Devel::DProf has been removed from the Perl core.  Prior version was
20110228.00.
.IP "\(bu" 4
Shell has been removed from the Perl core.  Prior version was 0.72_01.
.IP "\(bu" 4
Several old perl4\-style libraries which have been deprecated with 5.14
are now removed:
.Sp
.Vb 5
\&    abbrev.pl assert.pl bigfloat.pl bigint.pl bigrat.pl cacheout.pl
\&    complete.pl ctime.pl dotsh.pl exceptions.pl fastcwd.pl flush.pl
\&    getcwd.pl getopt.pl getopts.pl hostname.pl importenv.pl
\&    lib/find{,depth}.pl look.pl newgetopt.pl open2.pl open3.pl
\&    pwd.pl shellwords.pl stat.pl tainted.pl termcap.pl timelocal.pl
.Ve
.Sp
They can be found on \s-1CPAN\s0 as Perl4::CoreLibs.
.SH "Documentation"
.IX Header "Documentation"
.SS "New Documentation"
.IX Subsection "New Documentation"
\fIperldtrace\fR
.IX Subsection "perldtrace"
.PP
perldtrace describes Perl's DTrace support, listing the provided probes
and gives examples of their use.
.PP
\fIperlexperiment\fR
.IX Subsection "perlexperiment"
.PP
This document is intended to provide a list of experimental features in
Perl.  It is still a work in progress.
.PP
\fIperlootut\fR
.IX Subsection "perlootut"
.PP
This a new \s-1OO\s0 tutorial.  It focuses on basic \s-1OO\s0 concepts, and then recommends
that readers choose an \s-1OO\s0 framework from \s-1CPAN.\s0
.PP
\fIperlxstypemap\fR
.IX Subsection "perlxstypemap"
.PP
The new manual describes the \s-1XS\s0 typemapping mechanism in unprecedented
detail and combines new documentation with information extracted from
perlxs and the previously unofficial list of all core typemaps.
.SS "Changes to Existing Documentation"
.IX Subsection "Changes to Existing Documentation"
\fIperlapi\fR
.IX Subsection "perlapi"
.IP "\(bu" 4
The \s-1HV API\s0 has long accepted negative lengths to show that the key is
in \s-1UTF8. \s0 This is now documented.
.IP "\(bu" 4
The \f(CW\*(C`boolSV()\*(C'\fR macro is now documented.
.PP
\fIperlfunc\fR
.IX Subsection "perlfunc"
.IP "\(bu" 4
\&\f(CW\*(C`dbmopen\*(C'\fR treats a 0 mode as a special case, that prevents a nonexistent
file from being created.  This has been the case since Perl 5.000, but was
never documented anywhere.  Now the perlfunc entry mentions it
[perl #90064].
.IP "\(bu" 4
As an accident of history, \f(CW\*(C`open $fh, \*(Aq<:\*(Aq, ...\*(C'\fR applies the default
layers for the platform (\f(CW\*(C`:raw\*(C'\fR on Unix, \f(CW\*(C`:crlf\*(C'\fR on Windows), ignoring
whatever is declared by open.pm.  This seems such a useful feature
it has been documented in perlfunc and open.
.IP "\(bu" 4
The entry for \f(CW\*(C`split\*(C'\fR has been rewritten.  It is now far clearer than
before.
.PP
\fIperlguts\fR
.IX Subsection "perlguts"
.IP "\(bu" 4
A new section, Autoloading with XSUBs,
has been added, which explains the two APIs for accessing the name of the
autoloaded sub.
.IP "\(bu" 4
Some function descriptions in perlguts were confusing, as it was
not clear whether they referred to the function above or below the
description.  This has been clarified [perl #91790].
.PP
\fIperlobj\fR
.IX Subsection "perlobj"
.IP "\(bu" 4
This document has been rewritten from scratch, and its coverage of various \s-1OO\s0
concepts has been expanded.
.PP
\fIperlop\fR
.IX Subsection "perlop"
.IP "\(bu" 4
Documentation of the smartmatch operator has been reworked and moved from
perlsyn to perlop where it belongs.
.Sp
It has also been corrected for the case of \f(CW\*(C`undef\*(C'\fR on the left-hand
side.  The list of different smart match behaviors had an item in the
wrong place.
.IP "\(bu" 4
Documentation of the ellipsis statement (\f(CW\*(C`...\*(C'\fR) has been reworked and
moved from perlop to perlsyn.
.IP "\(bu" 4
The explanation of bitwise operators has been expanded to explain how they
work on Unicode strings (5.14.1).
.IP "\(bu" 4
More examples for \f(CW\*(C`m//g\*(C'\fR have been added (5.14.1).
.IP "\(bu" 4
The \f(CW\*(C`<<\eFOO\*(C'\fR here-doc syntax has been documented (5.14.1).
.PP
\fIperlpragma\fR
.IX Subsection "perlpragma"
.IP "\(bu" 4
There is now a standard convention for naming keys in the \f(CW\*(C`%^H\*(C'\fR,
documented under Key naming.
.PP
\fI\*(L"Laundering and Detecting Tainted Data\*(R" in perlsec\fR
.IX Subsection "Laundering and Detecting Tainted Data in perlsec"
.IP "\(bu" 4
The example function for checking for taintedness contained a subtle
error.  \f(CW$@\fR needs to be localized to prevent its changing this
global's value outside the function.  The preferred method to check for
this remains \*(L"tainted\*(R" in Scalar::Util.
.PP
\fIperllol\fR
.IX Subsection "perllol"
.IP "\(bu" 4
perllol has been expanded with examples using the new \f(CW\*(C`push $scalar\*(C'\fR
syntax introduced in Perl 5.14.0 (5.14.1).
.PP
\fIperlmod\fR
.IX Subsection "perlmod"
.IP "\(bu" 4
perlmod now states explicitly that some types of explicit symbol table
manipulation are not supported.  This codifies what was effectively already
the case [perl #78074].
.PP
\fIperlpodstyle\fR
.IX Subsection "perlpodstyle"
.IP "\(bu" 4
The tips on which formatting codes to use have been corrected and greatly
expanded.
.IP "\(bu" 4
There are now a couple of example one-liners for previewing \s-1POD\s0 files after
they have been edited.
.PP
\fIperlre\fR
.IX Subsection "perlre"
.IP "\(bu" 4
The \f(CW\*(C`(*COMMIT)\*(C'\fR directive is now listed in the right section
(Verbs without an argument).
.PP
\fIperlrun\fR
.IX Subsection "perlrun"
.IP "\(bu" 4
perlrun has undergone a significant clean-up.  Most notably, the
\&\fB\-0x...\fR form of the \fB\-0\fR flag has been clarified, and the final section
on environment variables has been corrected and expanded (5.14.1).
.PP
\fIperlsub\fR
.IX Subsection "perlsub"
.IP "\(bu" 4
The ($;) prototype syntax, which has existed for rather a long time, is now
documented in perlsub.  It lets a unary function have the same
precedence as a list operator.
.PP
\fIperltie\fR
.IX Subsection "perltie"
.IP "\(bu" 4
The required syntax for tying handles has been documented.
.PP
\fIperlvar\fR
.IX Subsection "perlvar"
.IP "\(bu" 4
The documentation for $! has been corrected and clarified.
It used to state that $! could be \f(CW\*(C`undef\*(C'\fR, which is not the case.  It was
also unclear whether system calls set C's \f(CW\*(C`errno\*(C'\fR or Perl's \f(CW$!\fR
[perl #91614].
.IP "\(bu" 4
Documentation for $$ has been amended with additional
cautions regarding changing the process \s-1ID.\s0
.PP
\fIOther Changes\fR
.IX Subsection "Other Changes"
.IP "\(bu" 4
perlxs was extended with documentation on inline typemaps.
.IP "\(bu" 4
perlref has a new Circular References
section explaining how circularities may not be freed and how to solve that
with weak references.
.IP "\(bu" 4
Parts of perlapi were clarified, and Perl equivalents of some C
functions have been added as an additional mode of exposition.
.IP "\(bu" 4
A few parts of perlre and perlrecharclass were clarified.
.SS "Removed Documentation"
.IX Subsection "Removed Documentation"
\fIOld \s-1OO\s0 Documentation\fR
.IX Subsection "Old OO Documentation"
.PP
The old \s-1OO\s0 tutorials, perltoot, perltooc, and perlboot, have been
removed.  The perlbot (bag of object tricks) document has been removed
as well.
.PP
\fIDevelopment Deltas\fR
.IX Subsection "Development Deltas"
.PP
The perldelta files for development releases are no longer packaged with
perl.  These can still be found in the perl source code repository.
.SH "Diagnostics"
.IX Header "Diagnostics"
The following additions or changes have been made to diagnostic output,
including warnings and fatal error messages.  For the complete list of
diagnostic messages, see perldiag.
.SS "New Diagnostics"
.IX Subsection "New Diagnostics"
\fINew Errors\fR
.IX Subsection "New Errors"
.IP "\(bu" 4
Cannot set tied \f(CW@DB::args\fR
.Sp
This error occurs when \f(CW\*(C`caller\*(C'\fR tries to set \f(CW@DB::args\fR but finds it
tied.  Before this error was added, it used to crash instead.
.IP "\(bu" 4
Cannot tie unreifiable array
.Sp
This error is part of a safety check that the \f(CW\*(C`tie\*(C'\fR operator does before
tying a special array like \f(CW@_\fR.  You should never see this message.
.IP "\(bu" 4
&CORE::%s cannot be called directly
.Sp
This occurs when a subroutine in the \f(CW\*(C`CORE::\*(C'\fR namespace is called
with \f(CW&foo\fR syntax or through a reference.  Some subroutines
in this package cannot yet be called that way, but must be
called as barewords.  See "Subroutines in the \f(CW\*(C`CORE\*(C'\fR namespace", above.
.IP "\(bu" 4
Source filters apply only to byte streams
.Sp
This new error occurs when you try to activate a source filter (usually by
loading a source filter module) within a string passed to \f(CW\*(C`eval\*(C'\fR under the
\&\f(CW\*(C`unicode_eval\*(C'\fR feature.
.PP
\fINew Warnings\fR
.IX Subsection "New Warnings"
.IP "\(bu" 4
defined(@array) is deprecated
.Sp
The long-deprecated \f(CW\*(C`defined(@array)\*(C'\fR now also warns for package variables.
Previously it issued a warning for lexical variables only.
.IP "\(bu" 4
\&\fIlength()\fR used on \f(CW%s\fR
.Sp
This new warning occurs when \f(CW\*(C`length\*(C'\fR is used on an array or hash, instead
of \f(CW\*(C`scalar(@array)\*(C'\fR or \f(CW\*(C`scalar(keys %hash)\*(C'\fR.
.IP "\(bu" 4
lvalue attribute \f(CW%s\fR already-defined subroutine
.Sp
attributes.pm now emits this warning when the :lvalue
attribute is applied to a Perl subroutine that has already been defined, as
doing so can have unexpected side-effects.
.IP "\(bu" 4
overload arg '%s' is invalid
.Sp
This warning, in the \*(L"overload\*(R" category, is produced when the overload
pragma is given an argument it doesn't recognize, presumably a mistyped
operator.
.IP "\(bu" 4
$[ used in \f(CW%s\fR (did you mean $] ?)
.Sp
This new warning exists to catch the mistaken use of \f(CW$[\fR in version
checks.  \f(CW$]\fR, not \f(CW$[\fR, contains the version number.
.IP "\(bu" 4
Useless assignment to a temporary
.Sp
Assigning to a temporary scalar returned
from an lvalue subroutine now produces this
warning [perl #31946].
.IP "\(bu" 4
Useless use of \eE
.Sp
\&\f(CW\*(C`\eE\*(C'\fR does nothing unless preceded by \f(CW\*(C`\eQ\*(C'\fR, \f(CW\*(C`\eL\*(C'\fR or \f(CW\*(C`\eU\*(C'\fR.
.SS "Removed Errors"
.IX Subsection "Removed Errors"
.IP "\(bu" 4
\&\*(L"sort is now a reserved word\*(R"
.Sp
This error used to occur when \f(CW\*(C`sort\*(C'\fR was called without arguments,
followed by \f(CW\*(C`;\*(C'\fR or \f(CW\*(C`)\*(C'\fR.  (E.g., \f(CW\*(C`sort;\*(C'\fR would die, but \f(CW\*(C`{sort}\*(C'\fR was
\&\s-1OK.\s0)  This error message was added in Perl 3 to catch code like
\&\f(CW\*(C`close(sort)\*(C'\fR which would no longer work.  More than two decades later,
this message is no longer appropriate.  Now \f(CW\*(C`sort\*(C'\fR without arguments is
always allowed, and returns an empty list, as it did in those cases
where it was already allowed [perl #90030].
.SS "Changes to Existing Diagnostics"
.IX Subsection "Changes to Existing Diagnostics"
.IP "\(bu" 4
The \*(L"Applying pattern match...\*(R" or similar warning produced when an
array or hash is on the left-hand side of the \f(CW\*(C`=~\*(C'\fR operator now
mentions the name of the variable.
.IP "\(bu" 4
The \*(L"Attempt to free non-existent shared string\*(R" has had the spelling
of \*(L"non-existent\*(R" corrected to \*(L"nonexistent\*(R".  It was already listed
with the correct spelling in perldiag.
.IP "\(bu" 4
The error messages for using \f(CW\*(C`default\*(C'\fR and \f(CW\*(C`when\*(C'\fR outside a
topicalizer have been standardized to match the messages for \f(CW\*(C`continue\*(C'\fR
and loop controls.  They now read 'Can't \*(L"default\*(R" outside a
topicalizer' and 'Can't \*(L"when\*(R" outside a topicalizer'.  They both used
to be 'Can't use \fIwhen()\fR outside a topicalizer' [perl #91514].
.IP "\(bu" 4
The message, \*(L"Code point 0x%X is not Unicode, no properties match it;
all inverse properties do\*(R" has been changed to \*(L"Code point 0x%X is not
Unicode, all \ep{} matches fail; all \eP{} matches succeed\*(R".
.IP "\(bu" 4
Redefinition warnings for constant subroutines used to be mandatory,
even occurring under \f(CW\*(C`no warnings\*(C'\fR.  Now they respect the warnings
pragma.
.IP "\(bu" 4
The \*(L"glob failed\*(R" warning message is now suppressible via \f(CW\*(C`no warnings\*(C'\fR
[perl #111656].
.IP "\(bu" 4
The Invalid version format
error message now says \*(L"negative version number\*(R" within the parentheses,
rather than \*(L"non-numeric data\*(R", for negative numbers.
.IP "\(bu" 4
The two warnings
Possible attempt to put comments in \fIqw()\fR list
and
Possible attempt to separate words with commas
are no longer mutually exclusive: the same \f(CW\*(C`qw\*(C'\fR construct may produce
both.
.IP "\(bu" 4
The uninitialized warning for \f(CW\*(C`y///r\*(C'\fR when \f(CW$_\fR is implicit and
undefined now mentions the variable name, just like the non\-/r variation
of the operator.
.IP "\(bu" 4
The 'Use of \*(L"foo\*(R" without parentheses is ambiguous' warning has been
extended to apply also to user-defined subroutines with a (;$)
prototype, and not just to built-in functions.
.IP "\(bu" 4
Warnings that mention the names of lexical (\f(CW\*(C`my\*(C'\fR) variables with
Unicode characters in them now respect the presence or absence of the
\&\f(CW\*(C`:utf8\*(C'\fR layer on the output handle, instead of outputting \s-1UTF8\s0
regardless.  Also, the correct names are included in the strings passed
to \f(CW$SIG{_\|_WARN_\|_}\fR handlers, rather than the raw \s-1UTF8\s0 bytes.
.SH "Utility Changes"
.IX Header "Utility Changes"
\fIh2ph\fR
.IX Subsection "h2ph"
.IP "\(bu" 4
h2ph used to generate code of the form
.Sp
.Vb 3
\&  unless(defined(&FOO)) {
\&    sub FOO () {42;}
\&  }
.Ve
.Sp
But the subroutine is a compile-time declaration, and is hence unaffected
by the condition.  It has now been corrected to emit a string \f(CW\*(C`eval\*(C'\fR
around the subroutine [perl #99368].
.PP
\fIsplain\fR
.IX Subsection "splain"
.IP "\(bu" 4
\&\fIsplain\fR no longer emits backtraces with the first line number repeated.
.Sp
This:
.Sp
.Vb 6
\&    Uncaught exception from user code:
\&            Cannot fwiddle the fwuddle at \-e line 1.
\&     at \-e line 1
\&            main::baz() called at \-e line 1
\&            main::bar() called at \-e line 1
\&            main::foo() called at \-e line 1
.Ve
.Sp
has become this:
.Sp
.Vb 5
\&    Uncaught exception from user code:
\&            Cannot fwiddle the fwuddle at \-e line 1.
\&            main::baz() called at \-e line 1
\&            main::bar() called at \-e line 1
\&            main::foo() called at \-e line 1
.Ve
.IP "\(bu" 4
Some error messages consist of multiple lines that are listed as separate
entries in perldiag.  splain has been taught to find the separate
entries in these cases, instead of simply failing to find the message.
.PP
\fIzipdetails\fR
.IX Subsection "zipdetails"
.IP "\(bu" 4
This is a new utility, included as part of an
IO::Compress::Base upgrade.
.Sp
zipdetails displays information about the internal record structure
of the zip file.  It is not concerned with displaying any details of
the compressed data stored in the zip file.
.SH "Configuration and Compilation"
.IX Header "Configuration and Compilation"
.IP "\(bu" 4
\&\fIregexp.h\fR has been modified for compatibility with \s-1GCC\s0's \fB\-Werror\fR
option, as used by some projects that include perl's header files (5.14.1).
.IP "\(bu" 4
\&\f(CW\*(C`USE_LOCALE{,_COLLATE,_CTYPE,_NUMERIC}\*(C'\fR have been added the output of perl \-V
as they have affect the behavior of the interpreter binary (albeit
in only a small area).
.IP "\(bu" 4
The code and tests for IPC::Open2 have been moved from \fIext/IPC\-Open2\fR
into \fIext/IPC\-Open3\fR, as \f(CW\*(C`IPC::Open2::open2()\*(C'\fR is implemented as a thin
wrapper around \f(CW\*(C`IPC::Open3::_open3()\*(C'\fR, and hence is very tightly coupled to
it.
.IP "\(bu" 4
The magic types and magic vtables are now generated from data in a new script
\&\fIregen/mg_vtable.pl\fR, instead of being maintained by hand.  As different
\&\s-1EBCDIC\s0 variants can't agree on the code point for '~', the character to code
point conversion is done at build time by \fIgenerate_uudmap\fR to a new generated
header \fImg_data.h\fR.  \f(CW\*(C`PL_vtbl_bm\*(C'\fR and \f(CW\*(C`PL_vtbl_fm\*(C'\fR are now defined by the
pre-processor as \f(CW\*(C`PL_vtbl_regexp\*(C'\fR, instead of being distinct C variables.
\&\f(CW\*(C`PL_vtbl_sig\*(C'\fR has been removed.
.IP "\(bu" 4
Building with \f(CW\*(C`\-DPERL_GLOBAL_STRUCT\*(C'\fR works again.  This configuration is not
generally used.
.IP "\(bu" 4
Perl configured with \fI\s-1MAD\s0\fR now correctly frees \f(CW\*(C`MADPROP\*(C'\fR structures when
OPs are freed.  \f(CW\*(C`MADPROP\*(C'\fRs are now allocated with \f(CW\*(C`PerlMemShared_malloc()\*(C'\fR
.IP "\(bu" 4
\&\fImakedef.pl\fR has been refactored.  This should have no noticeable affect on
any of the platforms that use it as part of their build (\s-1AIX, VMS,\s0 Win32).
.IP "\(bu" 4
\&\f(CW\*(C`useperlio\*(C'\fR can no longer be disabled.
.IP "\(bu" 4
The file \fIglobal.sym\fR is no longer needed, and has been removed.  It
contained a list of all exported functions, one of the files generated by
\&\fIregen/embed.pl\fR from data in \fIembed.fnc\fR and \fIregen/opcodes\fR.  The code
has been refactored so that the only user of \fIglobal.sym\fR, \fImakedef.pl\fR,
now reads \fIembed.fnc\fR and \fIregen/opcodes\fR directly, removing the need to
store the list of exported functions in an intermediate file.
.Sp
As \fIglobal.sym\fR was never installed, this change should not be visible
outside the build process.
.IP "\(bu" 4
\&\fIpod/buildtoc\fR, used by the build process to build perltoc, has been
refactored and simplified.  It now contains only code to build perltoc;
the code to regenerate Makefiles has been moved to \fIPorting/pod_rules.pl\fR.
It's a bug if this change has any material effect on the build process.
.IP "\(bu" 4
\&\fIpod/roffitall\fR is now built by \fIpod/buildtoc\fR, instead of being
shipped with the distribution.  Its list of manpages is now generated
(and therefore current).  See also \s-1RT\s0 #103202 for an unresolved related
issue.
.IP "\(bu" 4
The man page for \f(CW\*(C`XS::Typemap\*(C'\fR is no longer installed.  \f(CW\*(C`XS::Typemap\*(C'\fR
is a test module which is not installed, hence installing its
documentation makes no sense.
.IP "\(bu" 4
The \-Dusesitecustomize and \-Duserelocatableinc options now work
together properly.
.SH "Platform Support"
.IX Header "Platform Support"
.SS "Platform-Specific Notes"
.IX Subsection "Platform-Specific Notes"
\fICygwin\fR
.IX Subsection "Cygwin"
.IP "\(bu" 4
Since version 1.7, Cygwin supports native \s-1UTF\-8\s0 paths.  If Perl is built
under that environment, directory and filenames will be \s-1UTF\-8\s0 encoded.
.IP "\(bu" 4
Cygwin does not initialize all original Win32 environment variables.  See
\&\fI\s-1README\s0.cygwin\fR for a discussion of the newly-added
\&\f(CW\*(C`Cygwin::sync_winenv()\*(C'\fR function [perl #110190] and for
further links.
.PP
\fIHP-UX\fR
.IX Subsection "HP-UX"
.IP "\(bu" 4
HP-UX \s-1PA\-RISC/64\s0 now supports gcc\-4.x
.Sp
A fix to correct the socketsize now makes the test suite pass on HP-UX
PA-RISC for 64bitall builds. (5.14.2)
.PP
\fI\s-1VMS\s0\fR
.IX Subsection "VMS"
.IP "\(bu" 4
Remove unnecessary includes, fix miscellaneous compiler warnings and
close some unclosed comments on \fIvms/vms.c\fR.
.IP "\(bu" 4
Remove sockadapt layer from the \s-1VMS\s0 build.
.IP "\(bu" 4
Explicit support for \s-1VMS\s0 versions before v7.0 and \s-1DEC C\s0 versions
before v6.0 has been removed.
.IP "\(bu" 4
Since Perl 5.10.1, the home-grown \f(CW\*(C`stat\*(C'\fR wrapper has been unable to
distinguish between a directory name containing an underscore and an
otherwise-identical filename containing a dot in the same position
(e.g., t/test_pl as a directory and t/test.pl as a file).  This problem
has been corrected.
.IP "\(bu" 4
The build on \s-1VMS\s0 now permits names of the resulting symbols in C code for
Perl longer than 31 characters.  Symbols like
\&\f(CW\*(C`Perl_\|_it_was_the_best_of_times_it_was_the_worst_of_times\*(C'\fR can now be
created freely without causing the \s-1VMS\s0 linker to seize up.
.PP
\fIGNU/Hurd\fR
.IX Subsection "GNU/Hurd"
.IP "\(bu" 4
Numerous build and test failures on GNU/Hurd have been resolved with hints
for building \s-1DBM\s0 modules, detection of the library search path, and enabling
of large file support.
.PP
\fIOpenVOS\fR
.IX Subsection "OpenVOS"
.IP "\(bu" 4
Perl is now built with dynamic linking on OpenVOS, the minimum supported
version of which is now Release 17.1.0.
.PP
\fISunOS\fR
.IX Subsection "SunOS"
.PP
The \s-1CC\s0 workshop \*(C+ compiler is now detected and used on systems that ship
without cc.
.SH "Internal Changes"
.IX Header "Internal Changes"
.IP "\(bu" 4
The compiled representation of formats is now stored via the \f(CW\*(C`mg_ptr\*(C'\fR of
their \f(CW\*(C`PERL_MAGIC_fm\*(C'\fR.  Previously it was stored in the string buffer,
beyond \f(CW\*(C`SvLEN()\*(C'\fR, the regular end of the string.  \f(CW\*(C`SvCOMPILED()\*(C'\fR and
\&\f(CW\*(C`SvCOMPILED_{on,off}()\*(C'\fR now exist solely for compatibility for \s-1XS\s0 code.
The first is always 0, the other two now no-ops. (5.14.1)
.IP "\(bu" 4
Some global variables have been marked \f(CW\*(C`const\*(C'\fR, members in the interpreter
structure have been re-ordered, and the opcodes have been re-ordered.  The
op \f(CW\*(C`OP_AELEMFAST\*(C'\fR has been split into \f(CW\*(C`OP_AELEMFAST\*(C'\fR and \f(CW\*(C`OP_AELEMFAST_LEX\*(C'\fR.
.IP "\(bu" 4
When empting a hash of its elements (e.g., via undef(%h), or \f(CW%h\fR=()), HvARRAY
field is no longer temporarily zeroed.  Any destructors called on the freed
elements see the remaining elements.  Thus, \f(CW%h\fR=() becomes more like
\&\f(CW\*(C`delete $h{$_} for keys %h\*(C'\fR.
.IP "\(bu" 4
Boyer-Moore compiled scalars are now PVMGs, and the Boyer-Moore tables are now
stored via the mg_ptr of their \f(CW\*(C`PERL_MAGIC_bm\*(C'\fR.
Previously they were PVGVs, with the tables stored in
the string buffer, beyond \f(CW\*(C`SvLEN()\*(C'\fR.  This eliminates
the last place where the core stores data beyond \f(CW\*(C`SvLEN()\*(C'\fR.
.IP "\(bu" 4
Simplified logic in \f(CW\*(C`Perl_sv_magic()\*(C'\fR introduces a small change of
behavior for error cases involving unknown magic types.  Previously, if
\&\f(CW\*(C`Perl_sv_magic()\*(C'\fR was passed a magic type unknown to it, it would
.RS 4
.IP "1." 4
Croak \*(L"Modification of a read-only value attempted\*(R" if read only
.IP "2." 4
Return without error if the \s-1SV\s0 happened to already have this magic
.IP "3." 4
otherwise croak \*(L"Don't know how to handle magic of type \e\e%o\*(R"
.RE
.RS 4
.Sp
Now it will always croak \*(L"Don't know how to handle magic of type \e\e%o\*(R", even
on read-only values, or SVs which already have the unknown magic type.
.RE
.IP "\(bu" 4
The experimental \f(CW\*(C`fetch_cop_label\*(C'\fR function has been renamed to
\&\f(CW\*(C`cop_fetch_label\*(C'\fR.
.IP "\(bu" 4
The \f(CW\*(C`cop_store_label\*(C'\fR function has been added to the \s-1API,\s0 but is
experimental.
.IP "\(bu" 4
\&\fIembedvar.h\fR has been simplified, and one level of macro indirection for
PL_* variables has been removed for the default (non-multiplicity)
configuration.  PERLVAR*() macros now directly expand their arguments to
tokens such as \f(CW\*(C`PL_defgv\*(C'\fR, instead of expanding to \f(CW\*(C`PL_Idefgv\*(C'\fR, with
\&\fIembedvar.h\fR defining a macro to map \f(CW\*(C`PL_Idefgv\*(C'\fR to \f(CW\*(C`PL_defgv\*(C'\fR.  \s-1XS\s0 code
which has unwarranted chumminess with the implementation may need updating.
.IP "\(bu" 4
An \s-1API\s0 has been added to explicitly choose whether to export \s-1XSUB\s0
symbols.  More detail can be found in the comments for commit e64345f8.
.IP "\(bu" 4
The \f(CW\*(C`is_gv_magical_sv\*(C'\fR function has been eliminated and merged with
\&\f(CW\*(C`gv_fetchpvn_flags\*(C'\fR.  It used to be called to determine whether a \s-1GV\s0
should be autovivified in rvalue context.  Now it has been replaced with a
new \f(CW\*(C`GV_ADDMG\*(C'\fR flag (not part of the \s-1API\s0).
.IP "\(bu" 4
The returned code point from the function \f(CW\*(C`utf8n_to_uvuni()\*(C'\fR
when the input is malformed \s-1UTF\-8,\s0 malformations are allowed, and
\&\f(CW\*(C`utf8\*(C'\fR warnings are off is now the Unicode \s-1REPLACEMENT CHARACTER\s0
whenever the malformation is such that no well-defined code point can be
computed.  Previously the returned value was essentially garbage.  The
only malformations that have well-defined values are a zero-length
string (0 is the return), and overlong \s-1UTF\-8\s0 sequences.
.IP "\(bu" 4
Padlists are now marked \f(CW\*(C`AvREAL\*(C'\fR; i.e., reference-counted.  They have
always been reference-counted, but were not marked real, because \fIpad.c\fR
did its own clean-up, instead of using the usual clean-up code in \fIsv.c\fR.
That caused problems in thread cloning, so now the \f(CW\*(C`AvREAL\*(C'\fR flag is on,
but is turned off in \fIpad.c\fR right before the padlist is freed (after
\&\fIpad.c\fR has done its custom freeing of the pads).
.IP "\(bu" 4
All C files that make up the Perl core have been converted to \s-1UTF\-8.\s0
.IP "\(bu" 4
These new functions have been added as part of the work on Unicode symbols:
.Sp
.Vb 10
\&    HvNAMELEN
\&    HvNAMEUTF8
\&    HvENAMELEN
\&    HvENAMEUTF8
\&    gv_init_pv
\&    gv_init_pvn
\&    gv_init_pvsv
\&    gv_fetchmeth_pv
\&    gv_fetchmeth_pvn
\&    gv_fetchmeth_sv
\&    gv_fetchmeth_pv_autoload
\&    gv_fetchmeth_pvn_autoload
\&    gv_fetchmeth_sv_autoload
\&    gv_fetchmethod_pv_flags
\&    gv_fetchmethod_pvn_flags
\&    gv_fetchmethod_sv_flags
\&    gv_autoload_pv
\&    gv_autoload_pvn
\&    gv_autoload_sv
\&    newGVgen_flags
\&    sv_derived_from_pv
\&    sv_derived_from_pvn
\&    sv_derived_from_sv
\&    sv_does_pv
\&    sv_does_pvn
\&    sv_does_sv
\&    whichsig_pv
\&    whichsig_pvn
\&    whichsig_sv
\&    newCONSTSUB_flags
.Ve
.Sp
The gv_fetchmethod_*_flags functions, like gv_fetchmethod_flags, are
experimental and may change in a future release.
.IP "\(bu" 4
The following functions were added.  These are \fInot\fR part of the \s-1API:\s0
.Sp
.Vb 9
\&    GvNAMEUTF8
\&    GvENAMELEN
\&    GvENAME_HEK
\&    CopSTASH_flags
\&    CopSTASH_flags_set
\&    PmopSTASH_flags
\&    PmopSTASH_flags_set
\&    sv_sethek
\&    HEKfARG
.Ve
.Sp
There is also a \f(CW\*(C`HEKf\*(C'\fR macro corresponding to \f(CW\*(C`SVf\*(C'\fR, for
interpolating HEKs in formatted strings.
.IP "\(bu" 4
\&\f(CW\*(C`sv_catpvn_flags\*(C'\fR takes a couple of new internal-only flags,
\&\f(CW\*(C`SV_CATBYTES\*(C'\fR and \f(CW\*(C`SV_CATUTF8\*(C'\fR, which tell it whether the char array to
be concatenated is \s-1UTF8. \s0 This allows for more efficient concatenation than
creating temporary SVs to pass to \f(CW\*(C`sv_catsv\*(C'\fR.
.IP "\(bu" 4
For \s-1XS AUTOLOAD\s0 subs, \f(CW$AUTOLOAD\fR is set once more, as it was in 5.6.0.  This
is in addition to setting \f(CW\*(C`SvPVX(cv)\*(C'\fR, for compatibility with 5.8 to 5.14.
See \*(L"Autoloading with XSUBs\*(R" in perlguts.
.IP "\(bu" 4
Perl now checks whether the array (the linearized isa) returned by a \s-1MRO\s0
plugin begins with the name of the class itself, for which the array was
created, instead of assuming that it does.  This prevents the first element
from being skipped during method lookup.  It also means that
\&\f(CW\*(C`mro::get_linear_isa\*(C'\fR may return an array with one more element than the
\&\s-1MRO\s0 plugin provided [perl #94306].
.IP "\(bu" 4
\&\f(CW\*(C`PL_curstash\*(C'\fR is now reference-counted.
.IP "\(bu" 4
There are now feature bundle hints in \f(CW\*(C`PL_hints\*(C'\fR (\f(CW$^H\fR) that version
declarations use, to avoid having to load \fIfeature.pm\fR.  One setting of
the hint bits indicates a \*(L"custom\*(R" feature bundle, which means that the
entries in \f(CW\*(C`%^H\*(C'\fR still apply.  \fIfeature.pm\fR uses that.
.Sp
The \f(CW\*(C`HINT_FEATURE_MASK\*(C'\fR macro is defined in \fIperl.h\fR along with other
hints.  Other macros for setting and testing features and bundles are in
the new \fIfeature.h\fR.  \f(CW\*(C`FEATURE_IS_ENABLED\*(C'\fR (which has moved to
\&\fIfeature.h\fR) is no longer used throughout the codebase, but more specific
macros, e.g., \f(CW\*(C`FEATURE_SAY_IS_ENABLED\*(C'\fR, that are defined in \fIfeature.h\fR.
.IP "\(bu" 4
\&\fIlib/feature.pm\fR is now a generated file, created by the new
\&\fIregen/feature.pl\fR script, which also generates \fIfeature.h\fR.
.IP "\(bu" 4
Tied arrays are now always \f(CW\*(C`AvREAL\*(C'\fR.  If \f(CW@_\fR or \f(CW\*(C`DB::args\*(C'\fR is tied, it
is reified first, to make sure this is always the case.
.IP "\(bu" 4
Two new functions \f(CW\*(C`utf8_to_uvchr_buf()\*(C'\fR and \f(CW\*(C`utf8_to_uvuni_buf()\*(C'\fR have
been added.  These are the same as \f(CW\*(C`utf8_to_uvchr\*(C'\fR and
\&\f(CW\*(C`utf8_to_uvuni\*(C'\fR (which are now deprecated), but take an extra parameter
that is used to guard against reading beyond the end of the input
string.
See \*(L"utf8_to_uvchr_buf\*(R" in perlapi and \*(L"utf8_to_uvuni_buf\*(R" in perlapi.
.IP "\(bu" 4
The regular expression engine now does \s-1TRIE\s0 case insensitive matches
under Unicode. This may change the output of \f(CW\*(C`use re \*(Aqdebug\*(Aq;\*(C'\fR,
and will speed up various things.
.IP "\(bu" 4
There is a new \f(CW\*(C`wrap_op_checker()\*(C'\fR function, which provides a thread-safe
alternative to writing to \f(CW\*(C`PL_check\*(C'\fR directly.
.SH "Selected Bug Fixes"
.IX Header "Selected Bug Fixes"
.SS "Array and hash"
.IX Subsection "Array and hash"
.IP "\(bu" 4
A bug has been fixed that would cause a \*(L"Use of freed value in iteration\*(R"
error if the next two hash elements that would be iterated over are
deleted [perl #85026]. (5.14.1)
.IP "\(bu" 4
Deleting the current hash iterator (the hash element that would be returned
by the next call to \f(CW\*(C`each\*(C'\fR) in void context used not to free it
[perl #85026].
.IP "\(bu" 4
Deletion of methods via \f(CW\*(C`delete $Class::{method}\*(C'\fR syntax used to update
method caches if called in void context, but not scalar or list context.
.IP "\(bu" 4
When hash elements are deleted in void context, the internal hash entry is
now freed before the value is freed, to prevent destructors called by that
latter freeing from seeing the hash in an inconsistent state.  It was
possible to cause double-frees if the destructor freed the hash itself
[perl #100340].
.IP "\(bu" 4
A \f(CW\*(C`keys\*(C'\fR optimization in Perl 5.12.0 to make it faster on empty hashes
caused \f(CW\*(C`each\*(C'\fR not to reset the iterator if called after the last element
was deleted.
.IP "\(bu" 4
Freeing deeply nested hashes no longer crashes [perl #44225].
.IP "\(bu" 4
It is possible from \s-1XS\s0 code to create hashes with elements that have no
values.  The hash element and slice operators used to crash
when handling these in lvalue context.  They now
produce a \*(L"Modification of non-creatable hash value attempted\*(R" error
message.
.IP "\(bu" 4
If list assignment to a hash or array triggered destructors that freed the
hash or array itself, a crash would ensue.  This is no longer the case
[perl #107440].
.IP "\(bu" 4
It used to be possible to free the typeglob of a localized array or hash
(e.g., \f(CW\*(C`local @{"x"}; delete $::{x}\*(C'\fR), resulting in a crash on scope exit.
.IP "\(bu" 4
Some core bugs affecting Hash::Util have been fixed: locking a hash
element that is a glob copy no longer causes the next assignment to it to
corrupt the glob (5.14.2), and unlocking a hash element that holds a
copy-on-write scalar no longer causes modifications to that scalar to
modify other scalars that were sharing the same string buffer.
.SS "C \s-1API\s0 fixes"
.IX Subsection "C API fixes"
.IP "\(bu" 4
The \f(CW\*(C`newHVhv\*(C'\fR \s-1XS\s0 function now works on tied hashes, instead of crashing or
returning an empty hash.
.IP "\(bu" 4
The \f(CW\*(C`SvIsCOW\*(C'\fR C macro now returns false for read-only copies of typeglobs,
such as those created by:
.Sp
.Vb 2
\&  $hash{elem} = *foo;
\&  Hash::Util::lock_value %hash, \*(Aqelem\*(Aq;
.Ve
.Sp
It used to return true.
.IP "\(bu" 4
The \f(CW\*(C`SvPVutf8\*(C'\fR C function no longer tries to modify its argument,
resulting in errors [perl #108994].
.IP "\(bu" 4
\&\f(CW\*(C`SvPVutf8\*(C'\fR now works properly with magical variables.
.IP "\(bu" 4
\&\f(CW\*(C`SvPVbyte\*(C'\fR now works properly non-PVs.
.IP "\(bu" 4
When presented with malformed \s-1UTF\-8\s0 input, the XS-callable functions
\&\f(CW\*(C`is_utf8_string()\*(C'\fR, \f(CW\*(C`is_utf8_string_loc()\*(C'\fR, and
\&\f(CW\*(C`is_utf8_string_loclen()\*(C'\fR could read beyond the end of the input
string by up to 12 bytes.  This no longer happens.  [perl #32080].
However, currently, \f(CW\*(C`is_utf8_char()\*(C'\fR still has this defect, see
\&\*(L"\fIis_utf8_char()\fR\*(R" above.
.IP "\(bu" 4
The C\-level \f(CW\*(C`pregcomp\*(C'\fR function could become confused about whether the
pattern was in \s-1UTF8\s0 if the pattern was an overloaded, tied, or otherwise
magical scalar [perl #101940].
.SS "Compile-time hints"
.IX Subsection "Compile-time hints"
.IP "\(bu" 4
Tying \f(CW\*(C`%^H\*(C'\fR no longer causes perl to crash or ignore the contents of
\&\f(CW\*(C`%^H\*(C'\fR when entering a compilation scope [perl #106282].
.IP "\(bu" 4
\&\f(CW\*(C`eval $string\*(C'\fR and \f(CW\*(C`require\*(C'\fR used not to
localize \f(CW\*(C`%^H\*(C'\fR during compilation if it
was empty at the time the \f(CW\*(C`eval\*(C'\fR call itself was compiled.  This could
lead to scary side effects, like \f(CW\*(C`use re "/m"\*(C'\fR enabling other flags that
the surrounding code was trying to enable for its caller [perl #68750].
.IP "\(bu" 4
\&\f(CW\*(C`eval $string\*(C'\fR and \f(CW\*(C`require\*(C'\fR no longer localize hints (\f(CW$^H\fR and \f(CW\*(C`%^H\*(C'\fR)
at run time, but only during compilation of the \f(CW$string\fR or required file.
This makes \f(CW\*(C`BEGIN { $^H{foo}=7 }\*(C'\fR equivalent to
\&\f(CW\*(C`BEGIN { eval \*(Aq$^H{foo}=7\*(Aq }\*(C'\fR [perl #70151].
.IP "\(bu" 4
Creating a \s-1BEGIN\s0 block from \s-1XS\s0 code (via \f(CW\*(C`newXS\*(C'\fR or \f(CW\*(C`newATTRSUB\*(C'\fR) would,
on completion, make the hints of the current compiling code the current
hints.  This could cause warnings to occur in a non-warning scope.
.SS "Copy-on-write scalars"
.IX Subsection "Copy-on-write scalars"
Copy-on-write or shared hash key scalars
were introduced in 5.8.0, but most Perl code
did not encounter them (they were used mostly internally).  Perl
5.10.0 extended them, such that assigning \f(CW\*(C`_\|_PACKAGE_\|_\*(C'\fR or a
hash key to a scalar would make it copy-on-write.  Several parts
of Perl were not updated to account for them, but have now been fixed.
.IP "\(bu" 4
\&\f(CW\*(C`utf8::decode\*(C'\fR had a nasty bug that would modify copy-on-write scalars'
string buffers in place (i.e., skipping the copy).  This could result in
hashes having two elements with the same key [perl #91834]. (5.14.2)
.IP "\(bu" 4
Lvalue subroutines were not allowing \s-1COW\s0 scalars to be returned.  This was
fixed for lvalue scalar context in Perl 5.12.3 and 5.14.0, but list context
was not fixed until this release.
.IP "\(bu" 4
Elements of restricted hashes (see the fields pragma) containing
copy-on-write values couldn't be deleted, nor could such hashes be cleared
(\f(CW\*(C`%hash = ()\*(C'\fR). (5.14.2)
.IP "\(bu" 4
Localizing a tied variable used to make it read-only if it contained a
copy-on-write string. (5.14.2)
.IP "\(bu" 4
Assigning a copy-on-write string to a stash
element no longer causes a double free.  Regardless of this change, the
results of such assignments are still undefined.
.IP "\(bu" 4
Assigning a copy-on-write string to a tied variable no longer stops that
variable from being tied if it happens to be a \s-1PVMG\s0 or \s-1PVLV\s0 internally.
.IP "\(bu" 4
Doing a substitution on a tied variable returning a copy-on-write
scalar used to cause an assertion failure or an \*(L"Attempt to free
nonexistent shared string\*(R" warning.
.IP "\(bu" 4
This one is a regression from 5.12: In 5.14.0, the bitwise assignment
operators \f(CW\*(C`|=\*(C'\fR, \f(CW\*(C`^=\*(C'\fR and \f(CW\*(C`&=\*(C'\fR started leaving the left-hand side
undefined if it happened to be a copy-on-write string [perl #108480].
.IP "\(bu" 4
Storable, Devel::Peek and PerlIO::scalar had similar problems.
See \*(L"Updated Modules and Pragmata\*(R", above.
.SS "The debugger"
.IX Subsection "The debugger"
.IP "\(bu" 4
\&\fIdumpvar.pl\fR, and therefore the \f(CW\*(C`x\*(C'\fR command in the debugger, have been
fixed to handle objects blessed into classes whose names contain \*(L"=\*(R".  The
contents of such objects used not to be dumped [perl #101814].
.IP "\(bu" 4
The \*(L"R\*(R" command for restarting a debugger session has been fixed to work on
Windows, or any other system lacking a \f(CW\*(C`POSIX::_SC_OPEN_MAX\*(C'\fR constant
[perl #87740].
.IP "\(bu" 4
The \f(CW\*(C`#line 42 foo\*(C'\fR directive used not to update the arrays of lines used
by the debugger if it occurred in a string eval.  This was partially fixed
in 5.14, but it worked only for a single \f(CW\*(C`#line 42 foo\*(C'\fR in each eval.  Now
it works for multiple.
.IP "\(bu" 4
When subroutine calls are intercepted by the debugger, the name of the
subroutine or a reference to it is stored in \f(CW$DB::sub\fR, for the debugger
to access.  Sometimes (such as \f(CW\*(C`$foo = *bar; undef *bar; &$foo\*(C'\fR)
\&\f(CW$DB::sub\fR would be set to a name that could not be used to find the
subroutine, and so the debugger's attempt to call it would fail.  Now the
check to see whether a reference is needed is more robust, so those
problems should not happen anymore [rt.cpan.org #69862].
.IP "\(bu" 4
Every subroutine has a filename associated with it that the debugger uses.
The one associated with constant subroutines used to be misallocated when
cloned under threads.  Consequently, debugging threaded applications could
result in memory corruption [perl #96126].
.SS "Dereferencing operators"
.IX Subsection "Dereferencing operators"
.IP "\(bu" 4
\&\f(CW\*(C`defined(${"..."})\*(C'\fR, \f(CW\*(C`defined(*{"..."})\*(C'\fR, etc., used to
return true for most, but not all built-in variables, if
they had not been used yet.  This bug affected \f(CW\*(C`${^GLOBAL_PHASE}\*(C'\fR and
\&\f(CW\*(C`${^UTF8CACHE}\*(C'\fR, among others.  It also used to return false if the
package name was given as well (\f(CW\*(C`${"::!"}\*(C'\fR) [perl #97978, #97492].
.IP "\(bu" 4
Perl 5.10.0 introduced a similar bug: \f(CW\*(C`defined(*{"foo"})\*(C'\fR where \*(L"foo\*(R"
represents the name of a built-in global variable used to return false if
the variable had never been used before, but only on the \fIfirst\fR call.
This, too, has been fixed.
.IP "\(bu" 4
Since 5.6.0, \f(CW\*(C`*{ ... }\*(C'\fR has been inconsistent in how it treats undefined
values.  It would die in strict mode or lvalue context for most undefined
values, but would be treated as the empty string (with a warning) for the
specific scalar return by \f(CW\*(C`undef()\*(C'\fR (\f(CW&PL_sv_undef\fR internally).  This
has been corrected.  \f(CW\*(C`undef()\*(C'\fR is now treated like other undefined
scalars, as in Perl 5.005.
.SS "Filehandle, last-accessed"
.IX Subsection "Filehandle, last-accessed"
Perl has an internal variable that stores the last filehandle to be
accessed.  It is used by \f(CW$.\fR and by \f(CW\*(C`tell\*(C'\fR and \f(CW\*(C`eof\*(C'\fR without
arguments.
.IP "\(bu" 4
It used to be possible to set this internal variable to a glob copy and
then modify that glob copy to be something other than a glob, and still
have the last-accessed filehandle associated with the variable after
assigning a glob to it again:
.Sp
.Vb 4
\&    my $foo = *STDOUT;  # $foo is a glob copy
\&    <$foo>;             # $foo is now the last\-accessed handle
\&    $foo = 3;           # no longer a glob
\&    $foo = *STDERR;     # still the last\-accessed handle
.Ve
.Sp
Now the \f(CW\*(C`$foo = 3\*(C'\fR assignment unsets that internal variable, so there
is no last-accessed filehandle, just as if \f(CW\*(C`<$foo>\*(C'\fR had never
happened.
.Sp
This also prevents some unrelated handle from becoming the last-accessed
handle if \f(CW$foo\fR falls out of scope and the same internal \s-1SV\s0 gets used for
another handle [perl #97988].
.IP "\(bu" 4
A regression in 5.14 caused these statements not to set that internal
variable:
.Sp
.Vb 8
\&    my $fh = *STDOUT;
\&    tell $fh;
\&    eof  $fh;
\&    seek $fh, 0,0;
\&    tell     *$fh;
\&    eof      *$fh;
\&    seek     *$fh, 0,0;
\&    readline *$fh;
.Ve
.Sp
This is now fixed, but \f(CW\*(C`tell *{ *$fh }\*(C'\fR still has the problem, and it
is not clear how to fix it [perl #106536].
.ie n .SS "Filetests and ""stat"""
.el .SS "Filetests and \f(CWstat\fP"
.IX Subsection "Filetests and stat"
The term \*(L"filetests\*(R" refers to the operators that consist of a hyphen
followed by a single letter: \f(CW\*(C`\-r\*(C'\fR, \f(CW\*(C`\-x\*(C'\fR, \f(CW\*(C`\-M\*(C'\fR, etc.  The term \*(L"stacked\*(R"
when applied to filetests means followed by another filetest operator
sharing the same operand, as in \f(CW\*(C`\-r \-x \-w $fooo\*(C'\fR.
.IP "\(bu" 4
\&\f(CW\*(C`stat\*(C'\fR produces more consistent warnings.  It no longer warns for \*(L"_\*(R"
[perl #71002] and no longer skips the warning at times for other unopened
handles.  It no longer warns about an unopened handle when the operating
system's \f(CW\*(C`fstat\*(C'\fR function fails.
.IP "\(bu" 4
\&\f(CW\*(C`stat\*(C'\fR would sometimes return negative numbers for large inode numbers,
because it was using the wrong internal C type. [perl #84590]
.IP "\(bu" 4
\&\f(CW\*(C`lstat\*(C'\fR is documented to fall back to \f(CW\*(C`stat\*(C'\fR (with a warning) when given
a filehandle.  When passed an \s-1IO\s0 reference, it was actually doing the
equivalent of \f(CW\*(C`stat\ _\*(C'\fR and ignoring the handle.
.IP "\(bu" 4
\&\f(CW\*(C`\-T _\*(C'\fR with no preceding \f(CW\*(C`stat\*(C'\fR used to produce a
confusing \*(L"uninitialized\*(R" warning, even though there
is no visible uninitialized value to speak of.
.IP "\(bu" 4
\&\f(CW\*(C`\-T\*(C'\fR, \f(CW\*(C`\-B\*(C'\fR, \f(CW\*(C`\-l\*(C'\fR and \f(CW\*(C`\-t\*(C'\fR now work
when stacked with other filetest operators
[perl #77388].
.IP "\(bu" 4
In 5.14.0, filetest ops (\f(CW\*(C`\-r\*(C'\fR, \f(CW\*(C`\-x\*(C'\fR, etc.) started calling \s-1FETCH\s0 on a
tied argument belonging to the previous argument to a list operator, if
called with a bareword argument or no argument at all.  This has been
fixed, so \f(CW\*(C`push @foo, $tied, \-r\*(C'\fR no longer calls \s-1FETCH\s0 on \f(CW$tied\fR.
.IP "\(bu" 4
In Perl 5.6, \f(CW\*(C`\-l\*(C'\fR followed by anything other than a bareword would treat
its argument as a file name.  That was changed in 5.8 for glob references
(\f(CW\*(C`\e*foo\*(C'\fR), but not for globs themselves (\f(CW*foo\fR).  \f(CW\*(C`\-l\*(C'\fR started
returning \f(CW\*(C`undef\*(C'\fR for glob references without setting the last
stat buffer that the \*(L"_\*(R" handle uses, but only if warnings
were turned on.  With warnings off, it was the same as 5.6.
In other words, it was simply buggy and inconsistent.  Now the 5.6
behavior has been restored.
.IP "\(bu" 4
\&\f(CW\*(C`\-l\*(C'\fR followed by a bareword no longer \*(L"eats\*(R" the previous argument to
the list operator in whose argument list it resides.  Hence,
\&\f(CW\*(C`print "bar", \-l foo\*(C'\fR now actually prints \*(L"bar\*(R", because \f(CW\*(C`\-l\*(C'\fR
on longer eats it.
.IP "\(bu" 4
Perl keeps several internal variables to keep track of the last stat
buffer, from which file(handle) it originated, what type it was, and
whether the last stat succeeded.
.Sp
There were various cases where these could get out of synch, resulting in
inconsistent or erratic behavior in edge cases (every mention of \f(CW\*(C`\-T\*(C'\fR
applies to \f(CW\*(C`\-B\*(C'\fR as well):
.RS 4
.IP "\(bu" 4
\&\f(CW\*(C`\-T \f(CIHANDLE\f(CW\*(C'\fR, even though it does a \f(CW\*(C`stat\*(C'\fR, was not resetting the last
stat type, so an \f(CW\*(C`lstat _\*(C'\fR following it would merrily return the wrong
results.  Also, it was not setting the success status.
.IP "\(bu" 4
Freeing the handle last used by \f(CW\*(C`stat\*(C'\fR or a filetest could result in
\&\f(CW\*(C`\-T\ _\*(C'\fR using an unrelated handle.
.IP "\(bu" 4
\&\f(CW\*(C`stat\*(C'\fR with an \s-1IO\s0 reference would not reset the stat type or record the
filehandle for \f(CW\*(C`\-T\ _\*(C'\fR to use.
.IP "\(bu" 4
Fatal warnings could cause the stat buffer not to be reset
for a filetest operator on an unopened filehandle or \f(CW\*(C`\-l\*(C'\fR on any handle.
Fatal warnings also stopped \f(CW\*(C`\-T\*(C'\fR from setting \f(CW$!\fR.
.IP "\(bu" 4
When the last stat was on an unreadable file, \f(CW\*(C`\-T _\*(C'\fR is supposed to
return \f(CW\*(C`undef\*(C'\fR, leaving the last stat buffer unchanged.  But it was
setting the stat type, causing \f(CW\*(C`lstat _\*(C'\fR to stop working.
.IP "\(bu" 4
\&\f(CW\*(C`\-T \f(CIFILENAME\f(CW\*(C'\fR was not resetting the internal stat buffers for
unreadable files.
.RE
.RS 4
.Sp
These have all been fixed.
.RE
.SS "Formats"
.IX Subsection "Formats"
.IP "\(bu" 4
Several edge cases have been fixed with formats and \f(CW\*(C`formline\*(C'\fR;
in particular, where the format itself is potentially variable (such as
with ties and overloading), and where the format and data differ in their
encoding.  In both these cases, it used to possible for the output to be
corrupted [perl #91032].
.IP "\(bu" 4
\&\f(CW\*(C`formline\*(C'\fR no longer converts its argument into a string in-place.  So
passing a reference to \f(CW\*(C`formline\*(C'\fR no longer destroys the reference
[perl #79532].
.IP "\(bu" 4
Assignment to \f(CW$^A\fR (the format output accumulator) now recalculates
the number of lines output.
.ie n .SS """given"" and ""when"""
.el .SS "\f(CWgiven\fP and \f(CWwhen\fP"
.IX Subsection "given and when"
.IP "\(bu" 4
\&\f(CW\*(C`given\*(C'\fR was not scoping its implicit \f(CW$_\fR properly, resulting in memory
leaks or \*(L"Variable is not available\*(R" warnings [perl #94682].
.IP "\(bu" 4
\&\f(CW\*(C`given\*(C'\fR was not calling set-magic on the implicit lexical \f(CW$_\fR that it
uses.  This meant, for example, that \f(CW\*(C`pos\*(C'\fR would be remembered from one
execution of the same \f(CW\*(C`given\*(C'\fR block to the next, even if the input were a
different variable [perl #84526].
.IP "\(bu" 4
\&\f(CW\*(C`when\*(C'\fR blocks are now capable of returning variables declared inside the
enclosing \f(CW\*(C`given\*(C'\fR block [perl #93548].
.ie n .SS "The ""glob"" operator"
.el .SS "The \f(CWglob\fP operator"
.IX Subsection "The glob operator"
.IP "\(bu" 4
On OSes other than \s-1VMS,\s0 Perl's \f(CW\*(C`glob\*(C'\fR operator (and the \f(CW\*(C`<...>\*(C'\fR form)
use File::Glob underneath.  File::Glob splits the pattern into words,
before feeding each word to its \f(CW\*(C`bsd_glob\*(C'\fR function.
.Sp
There were several inconsistencies in the way the split was done.  Now
quotation marks (' and ") are always treated as shell-style word delimiters
(that allow whitespace as part of a word) and backslashes are always
preserved, unless they exist to escape quotation marks.  Before, those
would only sometimes be the case, depending on whether the pattern
contained whitespace.  Also, escaped whitespace at the end of the pattern
is no longer stripped [perl #40470].
.IP "\(bu" 4
\&\f(CW\*(C`CORE::glob\*(C'\fR now works as a way to call the default globbing function.  It
used to respect overrides, despite the \f(CW\*(C`CORE::\*(C'\fR prefix.
.IP "\(bu" 4
Under miniperl (used to configure modules when perl itself is built),
\&\f(CW\*(C`glob\*(C'\fR now clears \f(CW%ENV\fR before calling csh, since the latter croaks on some
systems if it does not like the contents of the \s-1LS_COLORS\s0 environment
variable [perl #98662].
.SS "Lvalue subroutines"
.IX Subsection "Lvalue subroutines"
.IP "\(bu" 4
Explicit return now returns the actual argument passed to return, instead
of copying it [perl #72724, #72706].
.IP "\(bu" 4
Lvalue subroutines used to enforce lvalue syntax (i.e., whatever can go on
the left-hand side of \f(CW\*(C`=\*(C'\fR) for the last statement and the arguments to
return.  Since lvalue subroutines are not always called in lvalue context,
this restriction has been lifted.
.IP "\(bu" 4
Lvalue subroutines are less restrictive about what values can be returned.
It used to croak on values returned by \f(CW\*(C`shift\*(C'\fR and \f(CW\*(C`delete\*(C'\fR and from
other subroutines, but no longer does so [perl #71172].
.IP "\(bu" 4
Empty lvalue subroutines (\f(CW\*(C`sub :lvalue {}\*(C'\fR) used to return \f(CW@_\fR in list
context.  All subroutines used to do this, but regular subs were fixed in
Perl 5.8.2.  Now lvalue subroutines have been likewise fixed.
.IP "\(bu" 4
Autovivification now works on values returned from lvalue subroutines
[perl #7946], as does returning \f(CW\*(C`keys\*(C'\fR in lvalue context.
.IP "\(bu" 4
Lvalue subroutines used to copy their return values in rvalue context.  Not
only was this a waste of \s-1CPU\s0 cycles, but it also caused bugs.  A \f(CW\*(C`($)\*(C'\fR
prototype would cause an lvalue sub to copy its return value [perl #51408],
and \f(CW\*(C`while(lvalue_sub() =~ m/.../g) { ... }\*(C'\fR would loop endlessly
[perl #78680].
.IP "\(bu" 4
When called in potential lvalue context
(e.g., subroutine arguments or a list
passed to \f(CW\*(C`for\*(C'\fR), lvalue subroutines used to copy
any read-only value that was returned.  E.g., \f(CW\*(C` sub :lvalue { $] } \*(C'\fR
would not return \f(CW$]\fR, but a copy of it.
.IP "\(bu" 4
When called in potential lvalue context, an lvalue subroutine returning
arrays or hashes used to bind the arrays or hashes to scalar variables,
resulting in bugs.  This was fixed in 5.14.0 if an array were the first
thing returned from the subroutine (but not for \f(CW\*(C`$scalar, @array\*(C'\fR or
hashes being returned).  Now a more general fix has been applied
[perl #23790].
.IP "\(bu" 4
Method calls whose arguments were all surrounded with \f(CW\*(C`my()\*(C'\fR or \f(CW\*(C`our()\*(C'\fR
(as in \f(CW\*(C`$object\->method(my($a,$b))\*(C'\fR) used to force lvalue context on
the subroutine.  This would prevent lvalue methods from returning certain
values.
.IP "\(bu" 4
Lvalue sub calls that are not determined to be such at compile time
(\f(CW&$name\fR or &{\*(L"name\*(R"}) are no longer exempt from strict refs if they
occur in the last statement of an lvalue subroutine [perl #102486].
.IP "\(bu" 4
Sub calls whose subs are not visible at compile time, if
they occurred in the last statement of an lvalue subroutine,
would reject non-lvalue subroutines and die with \*(L"Can't modify non-lvalue
subroutine call\*(R" [perl #102486].
.Sp
Non-lvalue sub calls whose subs \fIare\fR visible at compile time exhibited
the opposite bug.  If the call occurred in the last statement of an lvalue
subroutine, there would be no error when the lvalue sub was called in
lvalue context.  Perl would blindly assign to the temporary value returned
by the non-lvalue subroutine.
.IP "\(bu" 4
\&\f(CW\*(C`AUTOLOAD\*(C'\fR routines used to take precedence over the actual sub being
called (i.e., when autoloading wasn't needed), for sub calls in lvalue or
potential lvalue context, if the subroutine was not visible at compile
time.
.IP "\(bu" 4
Applying the \f(CW\*(C`:lvalue\*(C'\fR attribute to an \s-1XSUB\s0 or to an aliased subroutine
stub with \f(CW\*(C`sub foo :lvalue;\*(C'\fR syntax stopped working in Perl 5.12.
This has been fixed.
.IP "\(bu" 4
Applying the :lvalue attribute to subroutine that is already defined does
not work properly, as the attribute changes the way the sub is compiled.
Hence, Perl 5.12 began warning when an attempt is made to apply the
attribute to an already defined sub.  In such cases, the attribute is
discarded.
.Sp
But the change in 5.12 missed the case where custom attributes are also
present: that case still silently and ineffectively applied the attribute.
That omission has now been corrected.  \f(CW\*(C`sub foo :lvalue :Whatever\*(C'\fR (when
\&\f(CW\*(C`foo\*(C'\fR is already defined) now warns about the :lvalue attribute, and does
not apply it.
.IP "\(bu" 4
A bug affecting lvalue context propagation through nested lvalue subroutine
calls has been fixed.  Previously, returning a value in nested rvalue
context would be treated as lvalue context by the inner subroutine call,
resulting in some values (such as read-only values) being rejected.
.SS "Overloading"
.IX Subsection "Overloading"
.IP "\(bu" 4
Arithmetic assignment (\f(CW\*(C`$left += $right\*(C'\fR) involving overloaded objects
that rely on the 'nomethod' override no longer segfault when the left
operand is not overloaded.
.IP "\(bu" 4
Errors that occur when methods cannot be found during overloading now
mention the correct package name, as they did in 5.8.x, instead of
erroneously mentioning the \*(L"overload\*(R" package, as they have since 5.10.0.
.IP "\(bu" 4
Undefining \f(CW%overload::\fR no longer causes a crash.
.SS "Prototypes of built-in keywords"
.IX Subsection "Prototypes of built-in keywords"
.IP "\(bu" 4
The \f(CW\*(C`prototype\*(C'\fR function no longer dies for the \f(CW\*(C`_\|_FILE_\|_\*(C'\fR, \f(CW\*(C`_\|_LINE_\|_\*(C'\fR
and \f(CW\*(C`_\|_PACKAGE_\|_\*(C'\fR directives.  It now returns an empty-string prototype
for them, because they are syntactically indistinguishable from nullary
functions like \f(CW\*(C`time\*(C'\fR.
.IP "\(bu" 4
\&\f(CW\*(C`prototype\*(C'\fR now returns \f(CW\*(C`undef\*(C'\fR for all overridable infix operators,
such as \f(CW\*(C`eq\*(C'\fR, which are not callable in any way resembling functions.
It used to return incorrect prototypes for some and die for others
[perl #94984].
.IP "\(bu" 4
The prototypes of several built-in functions\*(--\f(CW\*(C`getprotobynumber\*(C'\fR, \f(CW\*(C`lock\*(C'\fR,
\&\f(CW\*(C`not\*(C'\fR and \f(CW\*(C`select\*(C'\fR\-\-have been corrected, or at least are now closer to
reality than before.
.SS "Regular expressions"
.IX Subsection "Regular expressions"
.IP "\(bu" 4
\&\f(CW\*(C`/[[:ascii:]]/\*(C'\fR and \f(CW\*(C`/[[:blank:]]/\*(C'\fR now use locale rules under
\&\f(CW\*(C`use locale\*(C'\fR when the platform supports that.  Previously, they used
the platform's native character set.
.IP "\(bu" 4
\&\f(CW\*(C`m/[[:ascii:]]/i\*(C'\fR and \f(CW\*(C`/\ep{ASCII}/i\*(C'\fR now match identically (when not
under a differing locale).  This fixes a regression introduced in 5.14
in which the first expression could match characters outside of \s-1ASCII,\s0
such as the \s-1KELVIN SIGN.\s0
.IP "\(bu" 4
\&\f(CW\*(C`/.*/g\*(C'\fR would sometimes refuse to match at the end of a string that ends
with \*(L"\en\*(R".  This has been fixed [perl #109206].
.IP "\(bu" 4
Starting with 5.12.0, Perl used to get its internal bookkeeping muddled up
after assigning \f(CW\*(C`${ qr// }\*(C'\fR to a hash element and locking it with
Hash::Util.  This could result in double frees, crashes, or erratic
behavior.
.IP "\(bu" 4
The new (in 5.14.0) regular expression modifier \f(CW\*(C`/a\*(C'\fR when repeated like
\&\f(CW\*(C`/aa\*(C'\fR forbids the characters outside the \s-1ASCII\s0 range that match
characters inside that range from matching under \f(CW\*(C`/i\*(C'\fR.  This did not
work under some circumstances, all involving alternation, such as:
.Sp
.Vb 1
\& "\eN{KELVIN SIGN}" =~ /k|foo/iaa;
.Ve
.Sp
succeeded inappropriately.  This is now fixed.
.IP "\(bu" 4
5.14.0 introduced some memory leaks in regular expression character
classes such as \f(CW\*(C`[\ew\es]\*(C'\fR, which have now been fixed. (5.14.1)
.IP "\(bu" 4
An edge case in regular expression matching could potentially loop.
This happened only under \f(CW\*(C`/i\*(C'\fR in bracketed character classes that have
characters with multi-character folds, and the target string to match
against includes the first portion of the fold, followed by another
character that has a multi-character fold that begins with the remaining
portion of the fold, plus some more.
.Sp
.Vb 1
\& "s\eN{U+DF}" =~ /[\ex{DF}foo]/i
.Ve
.Sp
is one such case.  \f(CW\*(C`\exDF\*(C'\fR folds to \f(CW"ss"\fR. (5.14.1)
.IP "\(bu" 4
A few characters in regular expression pattern matches did not
match correctly in some circumstances, all involving \f(CW\*(C`/i\*(C'\fR.  The
affected characters are:
\&\s-1COMBINING GREEK YPOGEGRAMMENI,
GREEK CAPITAL LETTER IOTA,
GREEK CAPITAL LETTER UPSILON,
GREEK PROSGEGRAMMENI,
GREEK SMALL LETTER IOTA WITH DIALYTIKA AND OXIA,
GREEK SMALL LETTER IOTA WITH DIALYTIKA AND TONOS,
GREEK SMALL LETTER UPSILON WITH DIALYTIKA AND OXIA,
GREEK SMALL LETTER UPSILON WITH DIALYTIKA AND TONOS,
LATIN SMALL LETTER LONG S,
LATIN SMALL LIGATURE LONG S T,\s0
and
\&\s-1LATIN SMALL LIGATURE ST.\s0
.IP "\(bu" 4
A memory leak regression in regular expression compilation
under threading has been fixed.
.IP "\(bu" 4
A regression introduced in 5.14.0 has
been fixed.  This involved an inverted
bracketed character class in a regular expression that consisted solely
of a Unicode property.  That property wasn't getting inverted outside the
Latin1 range.
.IP "\(bu" 4
Three problematic Unicode characters now work better in regex pattern matching under \f(CW\*(C`/i\*(C'\fR.
.Sp
In the past, three Unicode characters:
\&\s-1LATIN SMALL LETTER SHARP S,
GREEK SMALL LETTER IOTA WITH DIALYTIKA AND TONOS,\s0
and
\&\s-1GREEK SMALL LETTER UPSILON WITH DIALYTIKA AND TONOS,\s0
along with the sequences that they fold to
(including \*(L"ss\*(R" for \s-1LATIN SMALL LETTER SHARP S\s0),
did not properly match under \f(CW\*(C`/i\*(C'\fR.  5.14.0 fixed some of these cases,
but introduced others, including a panic when one of the characters or
sequences was used in the \f(CW\*(C`(?(DEFINE)\*(C'\fR regular expression predicate.
The known bugs that were introduced in 5.14 have now been fixed; as well
as some other edge cases that have never worked until now.  These all
involve using the characters and sequences outside bracketed character
classes under \f(CW\*(C`/i\*(C'\fR.  This closes [perl #98546].
.Sp
There remain known problems when using certain characters with
multi-character folds inside bracketed character classes, including such
constructs as \f(CW\*(C`qr/[\eN{LATIN SMALL LETTER SHARP}a\-z]/i\*(C'\fR.  These
remaining bugs are addressed in [perl #89774].
.IP "\(bu" 4
\&\s-1RT\s0 #78266: The regex engine has been leaking memory when accessing
named captures that weren't matched as part of a regex ever since 5.10
when they were introduced; e.g., this would consume over a hundred \s-1MB\s0 of
memory:
.Sp
.Vb 6
\&    for (1..10_000_000) {
\&        if ("foo" =~ /(foo|(?<capture>bar))?/) {
\&            my $capture = $+{capture}
\&        }
\&    }
\&    system "ps \-o rss $$"\*(Aq
.Ve
.IP "\(bu" 4
In 5.14, \f(CW\*(C`/[[:lower:]]/i\*(C'\fR and \f(CW\*(C`/[[:upper:]]/i\*(C'\fR no longer matched the
opposite case.  This has been fixed [perl #101970].
.IP "\(bu" 4
A regular expression match with an overloaded object on the right-hand side
would sometimes stringify the object too many times.
.IP "\(bu" 4
A regression has been fixed that was introduced in 5.14, in \f(CW\*(C`/i\*(C'\fR
regular expression matching, in which a match improperly fails if the
pattern is in \s-1UTF\-8,\s0 the target string is not, and a Latin\-1 character
precedes a character in the string that should match the pattern.
[perl #101710]
.IP "\(bu" 4
In case-insensitive regular expression pattern matching, no longer on
\&\s-1UTF\-8\s0 encoded strings does the scan for the start of match look only at
the first possible position.  This caused matches such as
\&\f(CW\*(C`"f\ex{FB00}" =~ /ff/i\*(C'\fR to fail.
.IP "\(bu" 4
The regexp optimizer no longer crashes on debugging builds when merging
fixed-string nodes with inconvenient contents.
.IP "\(bu" 4
A panic involving the combination of the regular expression modifiers
\&\f(CW\*(C`/aa\*(C'\fR and the \f(CW\*(C`\eb\*(C'\fR escape sequence introduced in 5.14.0 has been
fixed [perl #95964]. (5.14.2)
.IP "\(bu" 4
The combination of the regular expression modifiers \f(CW\*(C`/aa\*(C'\fR and the \f(CW\*(C`\eb\*(C'\fR
and \f(CW\*(C`\eB\*(C'\fR escape sequences did not work properly on \s-1UTF\-8\s0 encoded
strings.  All non-ASCII characters under \f(CW\*(C`/aa\*(C'\fR should be treated as
non-word characters, but what was happening was that Unicode rules were
used to determine wordness/non\-wordness for non-ASCII characters.  This
is now fixed [perl #95968].
.IP "\(bu" 4
\&\f(CW\*(C`(?foo: ...)\*(C'\fR no longer loses passed in character set.
.IP "\(bu" 4
The trie optimization used to have problems with alternations containing
an empty \f(CW\*(C`(?:)\*(C'\fR, causing \f(CW\*(C`"x" =~ /\eA(?>(?:(?:)A|B|C?x))\ez/\*(C'\fR not to
match, whereas it should [perl #111842].
.IP "\(bu" 4
Use of lexical (\f(CW\*(C`my\*(C'\fR) variables in code blocks embedded in regular
expressions will no longer result in memory corruption or crashes.
.Sp
Nevertheless, these code blocks are still experimental, as there are still
problems with the wrong variables being closed over (in loops for instance)
and with abnormal exiting (e.g., \f(CW\*(C`die\*(C'\fR) causing memory corruption.
.IP "\(bu" 4
The \f(CW\*(C`\eh\*(C'\fR, \f(CW\*(C`\eH\*(C'\fR, \f(CW\*(C`\ev\*(C'\fR and \f(CW\*(C`\eV\*(C'\fR regular expression metacharacters used to
cause a panic error message when trying to match at the end of the
string [perl #96354].
.IP "\(bu" 4
The abbreviations for four C1 control characters \f(CW\*(C`MW\*(C'\fR \f(CW\*(C`PM\*(C'\fR, \f(CW\*(C`RI\*(C'\fR, and
\&\f(CW\*(C`ST\*(C'\fR were previously unrecognized by \f(CW\*(C`\eN{}\*(C'\fR, \fIvianame()\fR, and
\&\fIstring_vianame()\fR.
.IP "\(bu" 4
Mentioning a variable named \*(L"&\*(R" other than \f(CW$&\fR (i.e., \f(CW\*(C`@&\*(C'\fR or \f(CW\*(C`%&\*(C'\fR) no
longer stops \f(CW$&\fR from working.  The same applies to variables named \*(L"'\*(R"
and \*(L"`\*(R" [perl #24237].
.IP "\(bu" 4
Creating a \f(CW\*(C`UNIVERSAL::AUTOLOAD\*(C'\fR sub no longer stops \f(CW\*(C`%+\*(C'\fR, \f(CW\*(C`%\-\*(C'\fR and
\&\f(CW\*(C`%!\*(C'\fR from working some of the time [perl #105024].
.SS "Smartmatching"
.IX Subsection "Smartmatching"
.IP "\(bu" 4
\&\f(CW\*(C`~~\*(C'\fR now correctly handles the precedence of Any~~Object, and is not tricked
by an overloaded object on the left-hand side.
.IP "\(bu" 4
In Perl 5.14.0, \f(CW\*(C`$tainted ~~ @array\*(C'\fR stopped working properly.  Sometimes
it would erroneously fail (when \f(CW$tainted\fR contained a string that occurs
in the array \fIafter\fR the first element) or erroneously succeed (when
\&\f(CW\*(C`undef\*(C'\fR occurred after the first element) [perl #93590].
.ie n .SS "The ""sort"" operator"
.el .SS "The \f(CWsort\fP operator"
.IX Subsection "The sort operator"
.IP "\(bu" 4
\&\f(CW\*(C`sort\*(C'\fR was not treating \f(CW\*(C`sub {}\*(C'\fR and \f(CW\*(C`sub {()}\*(C'\fR as equivalent when
such a sub was provided as the comparison routine.  It used to croak on
\&\f(CW\*(C`sub {()}\*(C'\fR.
.IP "\(bu" 4
\&\f(CW\*(C`sort\*(C'\fR now works once more with custom sort routines that are XSUBs.  It
stopped working in 5.10.0.
.IP "\(bu" 4
\&\f(CW\*(C`sort\*(C'\fR with a constant for a custom sort routine, although it produces
unsorted results, no longer crashes.  It started crashing in 5.10.0.
.IP "\(bu" 4
Warnings emitted by \f(CW\*(C`sort\*(C'\fR when a custom comparison routine returns a
non-numeric value now contain \*(L"in sort\*(R" and show the line number of the
\&\f(CW\*(C`sort\*(C'\fR operator, rather than the last line of the comparison routine.  The
warnings also now occur only if warnings are enabled in the scope where
\&\f(CW\*(C`sort\*(C'\fR occurs.  Previously the warnings would occur if enabled in the
comparison routine's scope.
.IP "\(bu" 4
\&\f(CW\*(C`sort { $a <=> $b }\*(C'\fR, which is optimized internally, now produces
\&\*(L"uninitialized\*(R" warnings for NaNs (not-a-number values), since \f(CW\*(C`<=>\*(C'\fR
returns \f(CW\*(C`undef\*(C'\fR for those.  This brings it in line with
\&\f(CW\*(C`sort\ {\ 1;\ $a\ <=>\ $b\ }\*(C'\fR and other more complex cases, which are not
optimized [perl #94390].
.ie n .SS "The ""substr"" operator"
.el .SS "The \f(CWsubstr\fP operator"
.IX Subsection "The substr operator"
.IP "\(bu" 4
Tied (and otherwise magical) variables are no longer exempt from the
\&\*(L"Attempt to use reference as lvalue in substr\*(R" warning.
.IP "\(bu" 4
That warning now occurs when the returned lvalue is assigned to, not
when \f(CW\*(C`substr\*(C'\fR itself is called.  This makes a difference only if the
return value of \f(CW\*(C`substr\*(C'\fR is referenced and later assigned to.
.IP "\(bu" 4
Passing a substring of a read-only value or a typeglob to a function
(potential lvalue context) no longer causes an immediate \*(L"Can't coerce\*(R"
or \*(L"Modification of a read-only value\*(R" error.  That error occurs only 
if the passed value is assigned to.
.Sp
The same thing happens with the \*(L"substr outside of string\*(R" error.  If
the lvalue is only read from, not written to, it is now just a warning, as
with rvalue \f(CW\*(C`substr\*(C'\fR.
.IP "\(bu" 4
\&\f(CW\*(C`substr\*(C'\fR assignments no longer call \s-1FETCH\s0 twice if the first argument
is a tied variable, just once.
.SS "Support for embedded nulls"
.IX Subsection "Support for embedded nulls"
Some parts of Perl did not work correctly with nulls (\f(CW\*(C`chr 0\*(C'\fR) embedded in
strings.  That meant that, for instance, \f(CW\*(C`$m = "a\e0b"; foo\->$m\*(C'\fR would
call the \*(L"a\*(R" method, instead of the actual method name contained in \f(CW$m\fR.
These parts of perl have been fixed to support nulls:
.IP "\(bu" 4
Method names
.IP "\(bu" 4
Typeglob names (including filehandle and subroutine names)
.IP "\(bu" 4
Package names, including the return value of \f(CW\*(C`ref()\*(C'\fR
.IP "\(bu" 4
Typeglob elements (\f(CW*foo{"THING\e0stuff"}\fR)
.IP "\(bu" 4
Signal names
.IP "\(bu" 4
Various warnings and error messages that mention variable names or values,
methods, etc.
.PP
One side effect of these changes is that blessing into \*(L"\e0\*(R" no longer
causes \f(CW\*(C`ref()\*(C'\fR to return false.
.SS "Threading bugs"
.IX Subsection "Threading bugs"
.IP "\(bu" 4
Typeglobs returned from threads are no longer cloned if the parent thread
already has a glob with the same name.  This means that returned
subroutines will now assign to the right package variables [perl #107366].
.IP "\(bu" 4
Some cases of threads crashing due to memory allocation during cloning have
been fixed [perl #90006].
.IP "\(bu" 4
Thread joining would sometimes emit \*(L"Attempt to free unreferenced scalar\*(R"
warnings if \f(CW\*(C`caller\*(C'\fR had been used from the \f(CW\*(C`DB\*(C'\fR package before thread
creation [perl #98092].
.IP "\(bu" 4
Locking a subroutine (via \f(CW\*(C`lock &sub\*(C'\fR) is no longer a compile-time error
for regular subs.  For lvalue subroutines, it no longer tries to return the
sub as a scalar, resulting in strange side effects like \f(CW\*(C`ref \e$_\*(C'\fR
returning \*(L"\s-1CODE\*(R"\s0 in some instances.
.Sp
\&\f(CW\*(C`lock &sub\*(C'\fR is now a run-time error if threads::shared is loaded (a
no-op otherwise), but that may be rectified in a future version.
.SS "Tied variables"
.IX Subsection "Tied variables"
.IP "\(bu" 4
Various cases in which \s-1FETCH\s0 was being ignored or called too many times
have been fixed:
.RS 4
.IP "\(bu" 4
\&\f(CW\*(C`PerlIO::get_layers\*(C'\fR [perl #97956]
.IP "\(bu" 4
\&\f(CW\*(C`$tied =~ y/a/b/\*(C'\fR, \f(CW\*(C`chop $tied\*(C'\fR and \f(CW\*(C`chomp $tied\*(C'\fR when \f(CW$tied\fR holds a
reference.
.IP "\(bu" 4
When calling \f(CW\*(C`local $_\*(C'\fR [perl #105912]
.IP "\(bu" 4
Four-argument \f(CW\*(C`select\*(C'\fR
.IP "\(bu" 4
A tied buffer passed to \f(CW\*(C`sysread\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`$tied .= <>\*(C'\fR
.IP "\(bu" 4
Three-argument \f(CW\*(C`open\*(C'\fR, the third being a tied file handle
(as in \f(CW\*(C`open $fh, ">&", $tied\*(C'\fR)
.IP "\(bu" 4
\&\f(CW\*(C`sort\*(C'\fR with a reference to a tied glob for the comparison routine.
.IP "\(bu" 4
\&\f(CW\*(C`..\*(C'\fR and \f(CW\*(C`...\*(C'\fR in list context [perl #53554].
.IP "\(bu" 4
\&\f(CW\*(C`${$tied}\*(C'\fR, \f(CW\*(C`@{$tied}\*(C'\fR, \f(CW\*(C`%{$tied}\*(C'\fR and \f(CW\*(C`*{$tied}\*(C'\fR where the tied
variable returns a string (\f(CW\*(C`&{}\*(C'\fR was unaffected)
.IP "\(bu" 4
\&\f(CW\*(C`defined ${ $tied_variable }\*(C'\fR
.IP "\(bu" 4
Various functions that take a filehandle argument in rvalue context
(\f(CW\*(C`close\*(C'\fR, \f(CW\*(C`readline\*(C'\fR, etc.) [perl #97482]
.IP "\(bu" 4
Some cases of dereferencing a complex expression, such as
\&\f(CW\*(C`${ (), $tied } = 1\*(C'\fR, used to call \f(CW\*(C`FETCH\*(C'\fR multiple times, but now call
it once.
.IP "\(bu" 4
\&\f(CW\*(C`$tied\->method\*(C'\fR where \f(CW$tied\fR returns a package name\*(--even resulting in
a failure to call the method, due to memory corruption
.IP "\(bu" 4
Assignments like \f(CW\*(C`*$tied = \e&{"..."}\*(C'\fR and \f(CW\*(C`*glob = $tied\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`chdir\*(C'\fR, \f(CW\*(C`chmod\*(C'\fR, \f(CW\*(C`chown\*(C'\fR, \f(CW\*(C`utime\*(C'\fR, \f(CW\*(C`truncate\*(C'\fR, \f(CW\*(C`stat\*(C'\fR, \f(CW\*(C`lstat\*(C'\fR and
the filetest ops (\f(CW\*(C`\-r\*(C'\fR, \f(CW\*(C`\-x\*(C'\fR, etc.)
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`caller\*(C'\fR sets \f(CW@DB::args\fR to the subroutine arguments when called from
the \s-1DB\s0 package.  It used to crash when doing so if \f(CW@DB::args\fR happened to
be tied.  Now it croaks instead.
.IP "\(bu" 4
Tying an element of \f(CW%ENV\fR or \f(CW\*(C`%^H\*(C'\fR and then deleting that element would
result in a call to the tie object's \s-1DELETE\s0 method, even though tying the
element itself is supposed to be equivalent to tying a scalar (the element
is, of course, a scalar) [perl #67490].
.IP "\(bu" 4
When Perl autovivifies an element of a tied array or hash (which entails
calling \s-1STORE\s0 with a new reference), it now calls \s-1FETCH\s0 immediately after
the \s-1STORE,\s0 instead of assuming that \s-1FETCH\s0 would have returned the same
reference.  This can make it easier to implement tied objects [perl #35865, #43011].
.IP "\(bu" 4
Four-argument \f(CW\*(C`select\*(C'\fR no longer produces its \*(L"Non-string passed as
bitmask\*(R" warning on tied or tainted variables that are strings.
.IP "\(bu" 4
Localizing a tied scalar that returns a typeglob no longer stops it from
being tied till the end of the scope.
.IP "\(bu" 4
Attempting to \f(CW\*(C`goto\*(C'\fR out of a tied handle method used to cause memory
corruption or crashes.  Now it produces an error message instead
[perl #8611].
.IP "\(bu" 4
A bug has been fixed that occurs when a tied variable is used as a
subroutine reference:  if the last thing assigned to or returned from the
variable was a reference or typeglob, the \f(CW\*(C`\e&$tied\*(C'\fR could either crash or
return the wrong subroutine.  The reference case is a regression introduced
in Perl 5.10.0.  For typeglobs, it has probably never worked till now.
.SS "Version objects and vstrings"
.IX Subsection "Version objects and vstrings"
.IP "\(bu" 4
The bitwise complement operator (and possibly other operators, too) when
passed a vstring would leave vstring magic attached to the return value,
even though the string had changed.  This meant that
\&\f(CW\*(C`version\->new(~v1.2.3)\*(C'\fR would create a version looking like \*(L"v1.2.3\*(R"
even though the string passed to \f(CW\*(C`version\->new\*(C'\fR was actually
\&\*(L"\e376\e375\e374\*(R".  This also caused B::Deparse to deparse \f(CW\*(C`~v1.2.3\*(C'\fR
incorrectly, without the \f(CW\*(C`~\*(C'\fR [perl #29070].
.IP "\(bu" 4
Assigning a vstring to a magic (e.g., tied, \f(CW$!\fR) variable and then
assigning something else used to blow away all magic.  This meant that
tied variables would come undone, \f(CW$!\fR would stop getting updated on
failed system calls, \f(CW$|\fR would stop setting autoflush, and other
mischief would take place.  This has been fixed.
.IP "\(bu" 4
\&\f(CW\*(C`version\->new("version")\*(C'\fR and \f(CW\*(C`printf "%vd", "version"\*(C'\fR no longer
crash [perl #102586].
.IP "\(bu" 4
Version comparisons, such as those that happen implicitly with \f(CW\*(C`use
v5.43\*(C'\fR, no longer cause locale settings to change [perl #105784].
.IP "\(bu" 4
Version objects no longer cause memory leaks in boolean context
[perl #109762].
.SS "Warnings, redefinition"
.IX Subsection "Warnings, redefinition"
.IP "\(bu" 4
Subroutines from the \f(CW\*(C`autouse\*(C'\fR namespace are once more exempt from
redefinition warnings.  This used to work in 5.005, but was broken in
5.6 for most subroutines.  For subs created via \s-1XS\s0 that redefine
subroutines from the \f(CW\*(C`autouse\*(C'\fR package, this stopped working in 5.10.
.IP "\(bu" 4
New XSUBs now produce redefinition warnings if they overwrite existing
subs, as they did in 5.8.x.  (The \f(CW\*(C`autouse\*(C'\fR logic was reversed in
5.10\-14.  Only subroutines from the \f(CW\*(C`autouse\*(C'\fR namespace would warn
when clobbered.)
.IP "\(bu" 4
\&\f(CW\*(C`newCONSTSUB\*(C'\fR used to use compile-time warning hints, instead of
run-time hints.  The following code should never produce a redefinition
warning, but it used to, if \f(CW\*(C`newCONSTSUB\*(C'\fR redefined an existing
subroutine:
.Sp
.Vb 5
\&    use warnings;
\&    BEGIN {
\&        no warnings;
\&        some_XS_function_that_calls_new_CONSTSUB();
\&    }
.Ve
.IP "\(bu" 4
Redefinition warnings for constant subroutines are on by default (what
are known as severe warnings in perldiag).  This occurred only
when it was a glob assignment or declaration of a Perl subroutine that
caused the warning.  If the creation of XSUBs triggered the warning, it
was not a default warning.  This has been corrected.
.IP "\(bu" 4
The internal check to see whether a redefinition warning should occur
used to emit \*(L"uninitialized\*(R" warnings in cases like this:
.Sp
.Vb 4
\&    use warnings "uninitialized";
\&    use constant {u => undef, v => undef};
\&    sub foo(){u}
\&    sub foo(){v}
.Ve
.ie n .SS "Warnings, ""Uninitialized"""
.el .SS "Warnings, ``Uninitialized''"
.IX Subsection "Warnings, Uninitialized"
.IP "\(bu" 4
Various functions that take a filehandle argument in rvalue context
(\f(CW\*(C`close\*(C'\fR, \f(CW\*(C`readline\*(C'\fR, etc.) used to warn twice for an undefined handle
[perl #97482].
.IP "\(bu" 4
\&\f(CW\*(C`dbmopen\*(C'\fR now only warns once, rather than three times, if the mode
argument is \f(CW\*(C`undef\*(C'\fR [perl #90064].
.IP "\(bu" 4
The \f(CW\*(C`+=\*(C'\fR operator does not usually warn when the left-hand side is
\&\f(CW\*(C`undef\*(C'\fR, but it was doing so for tied variables.  This has been fixed
[perl #44895].
.IP "\(bu" 4
A bug fix in Perl 5.14 introduced a new bug, causing \*(L"uninitialized\*(R"
warnings to report the wrong variable if the operator in question had
two operands and one was \f(CW\*(C`%{...}\*(C'\fR or \f(CW\*(C`@{...}\*(C'\fR.  This has been fixed
[perl #103766].
.IP "\(bu" 4
\&\f(CW\*(C`..\*(C'\fR and \f(CW\*(C`...\*(C'\fR in list context now mention the name of the variable in
\&\*(L"uninitialized\*(R" warnings for string (as opposed to numeric) ranges.
.SS "Weak references"
.IX Subsection "Weak references"
.IP "\(bu" 4
Weakening the first argument to an automatically-invoked \f(CW\*(C`DESTROY\*(C'\fR method
could result in erroneous \*(L"\s-1DESTROY\s0 created new reference\*(R" errors or
crashes.  Now it is an error to weaken a read-only reference.
.IP "\(bu" 4
Weak references to lexical hashes going out of scope were not going stale
(becoming undefined), but continued to point to the hash.
.IP "\(bu" 4
Weak references to lexical variables going out of scope are now broken
before any magical methods (e.g., \s-1DESTROY\s0 on a tie object) are called.
This prevents such methods from modifying the variable that will be seen
the next time the scope is entered.
.IP "\(bu" 4
Creating a weak reference to an \f(CW@ISA\fR array or accessing the array index
(\f(CW$#ISA\fR) could result in confused internal bookkeeping for elements
later added to the \f(CW@ISA\fR array.  For instance, creating a weak
reference to the element itself could push that weak reference on to \f(CW@ISA\fR;
and elements added after use of \f(CW$#ISA\fR would be ignored by method lookup
[perl #85670].
.SS "Other notable fixes"
.IX Subsection "Other notable fixes"
.IP "\(bu" 4
\&\f(CW\*(C`quotemeta\*(C'\fR now quotes consistently the same non-ASCII characters under
\&\f(CW\*(C`use feature \*(Aqunicode_strings\*(Aq\*(C'\fR, regardless of whether the string is
encoded in \s-1UTF\-8\s0 or not, hence fixing the last vestiges (we hope) of the
notorious \*(L"The \*(R"Unicode Bug"" in perlunicode.  [perl #77654].
.Sp
Which of these code points is quoted has changed, based on Unicode's
recommendations.  See \*(L"quotemeta\*(R" in perlfunc for details.
.IP "\(bu" 4
\&\f(CW\*(C`study\*(C'\fR is now a no-op, presumably fixing all outstanding bugs related to
study causing regex matches to behave incorrectly!
.IP "\(bu" 4
When one writes \f(CW\*(C`open foo || die\*(C'\fR, which used to work in Perl 4, a
\&\*(L"Precedence problem\*(R" warning is produced.  This warning used erroneously to
apply to fully-qualified bareword handle names not followed by \f(CW\*(C`||\*(C'\fR.  This
has been corrected.
.IP "\(bu" 4
After package aliasing (\f(CW\*(C`*foo:: = *bar::\*(C'\fR), \f(CW\*(C`select\*(C'\fR with 0 or 1 argument
would sometimes return a name that could not be used to refer to the
filehandle, or sometimes it would return \f(CW\*(C`undef\*(C'\fR even when a filehandle
was selected.  Now it returns a typeglob reference in such cases.
.IP "\(bu" 4
\&\f(CW\*(C`PerlIO::get_layers\*(C'\fR no longer ignores some arguments that it thinks are
numeric, while treating others as filehandle names.  It is now consistent
for flat scalars (i.e., not references).
.IP "\(bu" 4
Unrecognized switches on \f(CW\*(C`#!\*(C'\fR line
.Sp
If a switch, such as \fB\-x\fR, that cannot occur on the \f(CW\*(C`#!\*(C'\fR line is used
there, perl dies with \*(L"Can't emulate...\*(R".
.Sp
It used to produce the same message for switches that perl did not
recognize at all, whether on the command line or the \f(CW\*(C`#!\*(C'\fR line.
.Sp
Now it produces the \*(L"Unrecognized switch\*(R" error message [perl #104288].
.IP "\(bu" 4
\&\f(CW\*(C`system\*(C'\fR now temporarily blocks the \s-1SIGCHLD\s0 signal handler, to prevent the
signal handler from stealing the exit status [perl #105700].
.IP "\(bu" 4
The \f(CW%n\fR formatting code for \f(CW\*(C`printf\*(C'\fR and \f(CW\*(C`sprintf\*(C'\fR, which causes the number
of characters to be assigned to the next argument, now actually
assigns the number of characters, instead of the number of bytes.
.Sp
It also works now with special lvalue functions like \f(CW\*(C`substr\*(C'\fR and with
nonexistent hash and array elements [perl #3471, #103492].
.IP "\(bu" 4
Perl skips copying values returned from a subroutine, for the sake of
speed, if doing so would make no observable difference.  Because of faulty
logic, this would happen with the
result of \f(CW\*(C`delete\*(C'\fR, \f(CW\*(C`shift\*(C'\fR or \f(CW\*(C`splice\*(C'\fR, even if the result was
referenced elsewhere.  It also did so with tied variables about to be freed
[perl #91844, #95548].
.IP "\(bu" 4
\&\f(CW\*(C`utf8::decode\*(C'\fR now refuses to modify read-only scalars [perl #91850].
.IP "\(bu" 4
Freeing \f(CW$_\fR inside a \f(CW\*(C`grep\*(C'\fR or \f(CW\*(C`map\*(C'\fR block, a code block embedded in a
regular expression, or an \f(CW@INC\fR filter (a subroutine returned by a
subroutine in \f(CW@INC\fR) used to result in double frees or crashes
[perl #91880, #92254, #92256].
.IP "\(bu" 4
\&\f(CW\*(C`eval\*(C'\fR returns \f(CW\*(C`undef\*(C'\fR in scalar context or an empty list in list
context when there is a run-time error.  When \f(CW\*(C`eval\*(C'\fR was passed a
string in list context and a syntax error occurred, it used to return a
list containing a single undefined element.  Now it returns an empty
list in list context for all errors [perl #80630].
.IP "\(bu" 4
\&\f(CW\*(C`goto &func\*(C'\fR no longer crashes, but produces an error message, when
the unwinding of the current subroutine's scope fires a destructor that
undefines the subroutine being \*(L"goneto\*(R" [perl #99850].
.IP "\(bu" 4
Perl now holds an extra reference count on the package that code is
currently compiling in.  This means that the following code no longer
crashes [perl #101486]:
.Sp
.Vb 3
\&    package Foo;
\&    BEGIN {*Foo:: = *Bar::}
\&    sub foo;
.Ve
.IP "\(bu" 4
The \f(CW\*(C`x\*(C'\fR repetition operator no longer crashes on 64\-bit builds with large
repeat counts [perl #94560].
.IP "\(bu" 4
Calling \f(CW\*(C`require\*(C'\fR on an implicit \f(CW$_\fR when \f(CW*CORE::GLOBAL::require\fR has
been overridden does not segfault anymore, and \f(CW$_\fR is now passed to the
overriding subroutine [perl #78260].
.IP "\(bu" 4
\&\f(CW\*(C`use\*(C'\fR and \f(CW\*(C`require\*(C'\fR are no longer affected by the I/O layers active in
the caller's scope (enabled by open.pm) [perl #96008].
.IP "\(bu" 4
\&\f(CW\*(C`our $::e\*'; $e\*'\*(C'\fR (which is invalid) no longer produces the \*(L"Compilation
error at lib/utf8_heavy.pl...\*(R" error message, which it started emitting in
5.10.0 [perl #99984].
.IP "\(bu" 4
On 64\-bit systems, \f(CW\*(C`read()\*(C'\fR now understands large string offsets beyond
the 32\-bit range.
.IP "\(bu" 4
Errors that occur when processing subroutine attributes no longer cause the
subroutine's op tree to leak.
.IP "\(bu" 4
Passing the same constant subroutine to both \f(CW\*(C`index\*(C'\fR and \f(CW\*(C`formline\*(C'\fR no
longer causes one or the other to fail [perl #89218]. (5.14.1)
.IP "\(bu" 4
List assignment to lexical variables declared with attributes in the same
statement (\f(CW\*(C`my ($x,@y) : blimp = (72,94)\*(C'\fR) stopped working in Perl 5.8.0.
It has now been fixed.
.IP "\(bu" 4
Perl 5.10.0 introduced some faulty logic that made \*(L"U*\*(R" in the middle of
a pack template equivalent to \*(L"U0\*(R" if the input string was empty.  This has
been fixed [perl #90160]. (5.14.2)
.IP "\(bu" 4
Destructors on objects were not called during global destruction on objects
that were not referenced by any scalars.  This could happen if an array
element were blessed (e.g., \f(CW\*(C`bless \e$a[0]\*(C'\fR) or if a closure referenced a
blessed variable (\f(CW\*(C`bless \emy @a; sub foo { @a }\*(C'\fR).
.Sp
Now there is an extra pass during global destruction to fire destructors on
any objects that might be left after the usual passes that check for
objects referenced by scalars [perl #36347].
.IP "\(bu" 4
Fixed a case where it was possible that a freed buffer may have been read
from when parsing a here document [perl #90128]. (5.14.1)
.IP "\(bu" 4
\&\f(CW\*(C`each(\f(CIARRAY\f(CW)\*(C'\fR is now wrapped in \f(CW\*(C`defined(...)\*(C'\fR, like \f(CW\*(C`each(\f(CIHASH\f(CW)\*(C'\fR,
inside a \f(CW\*(C`while\*(C'\fR condition [perl #90888].
.IP "\(bu" 4
A problem with context propagation when a \f(CW\*(C`do\*(C'\fR block is an argument to
\&\f(CW\*(C`return\*(C'\fR has been fixed.  It used to cause \f(CW\*(C`undef\*(C'\fR to be returned in
certain cases of a \f(CW\*(C`return\*(C'\fR inside an \f(CW\*(C`if\*(C'\fR block which itself is followed by
another \f(CW\*(C`return\*(C'\fR.
.IP "\(bu" 4
Calling \f(CW\*(C`index\*(C'\fR with a tainted constant no longer causes constants in
subsequently compiled code to become tainted [perl #64804].
.IP "\(bu" 4
Infinite loops like \f(CW\*(C`1 while 1\*(C'\fR used to stop \f(CW\*(C`strict \*(Aqsubs\*(Aq\*(C'\fR mode from
working for the rest of the block.
.IP "\(bu" 4
For list assignments like \f(CW\*(C`($a,$b) = ($b,$a)\*(C'\fR, Perl has to make a copy of
the items on the right-hand side before assignment them to the left.  For
efficiency's sake, it assigns the values on the right straight to the items
on the left if no one variable is mentioned on both sides, as in \f(CW\*(C`($a,$b) =
($c,$d)\*(C'\fR.  The logic for determining when it can cheat was faulty, in that
\&\f(CW\*(C`&&\*(C'\fR and \f(CW\*(C`||\*(C'\fR on the right-hand side could fool it.  So \f(CW\*(C`($a,$b) =
$some_true_value && ($b,$a)\*(C'\fR would end up assigning the value of \f(CW$b\fR to
both scalars.
.IP "\(bu" 4
Perl no longer tries to apply lvalue context to the string in
\&\f(CW\*(C`("string", $variable) ||= 1\*(C'\fR (which used to be an error).  Since the
left-hand side of \f(CW\*(C`||=\*(C'\fR is evaluated in scalar context, that's a scalar
comma operator, which gives all but the last item void context.  There is
no such thing as void lvalue context, so it was a mistake for Perl to try
to force it [perl #96942].
.IP "\(bu" 4
\&\f(CW\*(C`caller\*(C'\fR no longer leaks memory when called from the \s-1DB\s0 package if
\&\f(CW@DB::args\fR was assigned to after the first call to \f(CW\*(C`caller\*(C'\fR.  Carp
was triggering this bug [perl #97010]. (5.14.2)
.IP "\(bu" 4
\&\f(CW\*(C`close\*(C'\fR and similar filehandle functions, when called on built-in global
variables (like \f(CW$+\fR), used to die if the variable happened to hold the
undefined value, instead of producing the usual \*(L"Use of uninitialized
value\*(R" warning.
.IP "\(bu" 4
When autovivified file handles were introduced in Perl 5.6.0, \f(CW\*(C`readline\*(C'\fR
was inadvertently made to autovivify when called as \f(CW\*(C`readline($foo)\*(C'\fR (but
not as \f(CW\*(C`<$foo>\*(C'\fR).  It has now been fixed never to autovivify.
.IP "\(bu" 4
Calling an undefined anonymous subroutine (e.g., what \f(CW$x\fR holds after
\&\f(CW\*(C`undef &{$x = sub{}}\*(C'\fR) used to cause a \*(L"Not a \s-1CODE\s0 reference\*(R" error, which
has been corrected to \*(L"Undefined subroutine called\*(R" [perl #71154].
.IP "\(bu" 4
Causing \f(CW@DB::args\fR to be freed between uses of \f(CW\*(C`caller\*(C'\fR no longer
results in a crash [perl #93320].
.IP "\(bu" 4
\&\f(CW\*(C`setpgrp($foo)\*(C'\fR used to be equivalent to \f(CW\*(C`($foo, setpgrp)\*(C'\fR, because
\&\f(CW\*(C`setpgrp\*(C'\fR was ignoring its argument if there was just one.  Now it is
equivalent to \f(CW\*(C`setpgrp($foo,0)\*(C'\fR.
.IP "\(bu" 4
\&\f(CW\*(C`shmread\*(C'\fR was not setting the scalar flags correctly when reading from
shared memory, causing the existing cached numeric representation in the
scalar to persist [perl #98480].
.IP "\(bu" 4
\&\f(CW\*(C`++\*(C'\fR and \f(CW\*(C`\-\-\*(C'\fR now work on copies of globs, instead of dying.
.IP "\(bu" 4
\&\f(CW\*(C`splice()\*(C'\fR doesn't warn when truncating
.Sp
You can now limit the size of an array using \f(CW\*(C`splice(@a,MAX_LEN)\*(C'\fR without
worrying about warnings.
.IP "\(bu" 4
\&\f(CW$$\fR is no longer tainted.  Since this value comes directly from
\&\f(CW\*(C`getpid()\*(C'\fR, it is always safe.
.IP "\(bu" 4
The parser no longer leaks a filehandle if \s-1STDIN\s0 was closed before parsing
started [perl #37033].
.IP "\(bu" 4
\&\f(CW\*(C`die;\*(C'\fR with a non-reference, non-string, or magical (e.g., tainted)
value in $@ now properly propagates that value [perl #111654].
.SH "Known Problems"
.IX Header "Known Problems"
.IP "\(bu" 4
On Solaris, we have two kinds of failure.
.Sp
If \fImake\fR is Sun's \fImake\fR, we get an error about a badly formed macro
assignment in the \fIMakefile\fR.  That happens when \fI./Configure\fR tries to
make depends.  \fIConfigure\fR then exits 0, but further \fImake\fR\-ing fails.
.Sp
If \fImake\fR is \fIgmake\fR, \fIConfigure\fR completes, then we get errors related
to \fI/usr/include/stdbool.h\fR
.IP "\(bu" 4
On Win32, a number of tests hang unless \s-1STDERR\s0 is redirected.  The cause of
this is still under investigation.
.IP "\(bu" 4
When building as root with a umask that prevents files from being
other-readable, \fIt/op/filetest.t\fR will fail.  This is a test bug, not a
bug in perl's behavior.
.IP "\(bu" 4
Configuring with a recent gcc and link-time-optimization, such as
\&\f(CW\*(C`Configure \-Doptimize=\*(Aq\-O2 \-flto\*(Aq\*(C'\fR fails
because the optimizer optimizes away some of Configure's tests.  A
workaround is to omit the \f(CW\*(C`\-flto\*(C'\fR flag when running Configure, but add
it back in while actually building, something like
.Sp
.Vb 2
\&    sh Configure \-Doptimize=\-O2                                             
\&    make OPTIMIZE=\*(Aq\-O2 \-flto\*(Aq
.Ve
.IP "\(bu" 4
The following \s-1CPAN\s0 modules have test failures with perl 5.16.  Patches have
been submitted for all of these, so hopefully there will be new releases
soon:
.RS 4
.IP "\(bu" 4
Date::Pcalc version 6.1
.IP "\(bu" 4
Module::CPANTS::Analyse version 0.85
.Sp
This fails due to problems in Module::Find 0.10 and File::MMagic
1.27.
.IP "\(bu" 4
PerlIO::Util version 0.72
.RE
.RS 4
.RE
.SH "Acknowledgements"
.IX Header "Acknowledgements"
Perl 5.16.0 represents approximately 12 months of development since Perl
5.14.0 and contains approximately 590,000 lines of changes across 2,500
files from 139 authors.
.PP
Perl continues to flourish into its third decade thanks to a vibrant
community of users and developers.  The following people are known to
have contributed the improvements that became Perl 5.16.0:
.PP
Aaron Crane, Abhijit Menon-Sen, Abigail, Alan Haggai Alavi, Alberto
Simo\*~es, Alexandr Ciornii, Andreas Ko\*:nig, Andy Dougherty, Aristotle
Pagaltzis, Bo Johansson, Bo Lindbergh, Breno G. de Oliveira, brian d
foy, Brian Fraser, Brian Greenfield, Carl Hayter, Chas. Owens,
Chia-liang Kao, Chip Salzenberg, Chris 'BinGOs' Williams, Christian
Hansen, Christopher J. Madsen, chromatic, Claes Jacobsson, Claudio
Ramirez, Craig A. Berry, Damian Conway, Daniel Kahn Gillmor, Darin
McBride, Dave Rolsky, David Cantrell, David Golden, David Leadbeater,
David Mitchell, Dee Newcum, Dennis Kaarsemaker, Dominic Hargreaves,
Douglas Christopher Wilson, Eric Brine, Father Chrysostomos, Florian
Ragwitz, Frederic Briere, George Greer, Gerard Goossen, Gisle Aas,
H.Merijn Brand, Hojung Youn, Ian Goodacre, James E Keenan, Jan Dubois,
Jerry D. Hedden, Jesse Luehrs, Jesse Vincent, Jilles Tjoelker, Jim
Cromie, Jim Meyering, Joel Berger, Johan Vromans, Johannes Plunien, John
Hawkinson, John P. Linderman, John Peacock, Joshua ben Jore, Juerd
Waalboer, Karl Williamson, Karthik Rajagopalan, Keith Thompson, Kevin J.
Woolley, Kevin Ryde, Laurent Dami, Leo Lapworth, Leon Brocard, Leon
Timmermans, Louis Strous, Lukas Mai, Marc Green, Marcel Gru\*:nauer, Mark
A.  Stratman, Mark Dootson, Mark Jason Dominus, Martin Hasch, Matthew
Horsfall, Max Maischein, Michael G Schwern, Michael Witten, Mike
Sheldrake, Moritz Lenz, Nicholas Clark, Niko Tyni, Nuno Carvalho, Pau
Amma, Paul Evans, Paul Green, Paul Johnson, Perlover, Peter John Acklam,
Peter Martini, Peter Scott, Phil Monsen, Pino Toscano, Rafael
Garcia-Suarez, Rainer Tammer, Reini Urban, Ricardo Signes, Robin Barker,
Rodolfo Carvalho, Salvador Fandin\*~o, Sam Kimbrel, Samuel Thibault, Shawn
M Moore, Shigeya Suzuki, Shirakata Kentaro, Shlomi Fish, Sisyphus,
Slaven Rezic, Spiros Denaxas, Steffen Mu\*:ller, Steffen Schwigon, Stephen
Bennett, Stephen Oberholtzer, Stevan Little, Steve Hay, Steve Peters,
Thomas Sibley, Thorsten Glaser, Timothe Litt, Todd Rinaldo, Tom
Christiansen, Tom Hukins, Tony Cook, Vadim Konovalov, Vincent Pit,
Vladimir Timofeev, Walt Mankowski, Yves Orton, Zefram, Zsba\*'n Ambrus,
\&\*(Aevar Arnfjo\*:r\*(d- Bjarmason.
.PP
The list above is almost certainly incomplete as it is automatically
generated from version control history.  In particular, it does not
include the names of the (very much appreciated) contributors who
reported issues to the Perl bug tracker.
.PP
Many of the changes included in this version originated in the \s-1CPAN\s0
modules included in Perl's core.  We're grateful to the entire \s-1CPAN\s0
community for helping Perl to flourish.
.PP
For a more complete list of all of Perl's historical contributors,
please see the \fI\s-1AUTHORS\s0\fR file in the Perl source distribution.
.SH "Reporting Bugs"
.IX Header "Reporting Bugs"
If you find what you think is a bug, you might check the articles
recently posted to the comp.lang.perl.misc newsgroup and the perl
bug database at <http://rt.perl.org/perlbug/>.  There may also be
information at <http://www.perl.org/>, the Perl Home Page.
.PP
If you believe you have an unreported bug, please run the perlbug
program included with your release.  Be sure to trim your bug down
to a tiny but sufficient test case.  Your bug report, along with the
output of \f(CW\*(C`perl \-V\*(C'\fR, will be sent off to perlbug@perl.org to be
analysed by the Perl porting team.
.PP
If the bug you are reporting has security implications, which make it
inappropriate to send to a publicly archived mailing list, then please
send it to perl5\-security\-report@perl.org.  This points to a closed
subscription unarchived mailing list, which includes all core
committers, who will be able to help assess the impact of issues, figure
out a resolution, and help co-ordinate the release of patches to
mitigate or fix the problem across all platforms on which Perl is
supported.  Please use this address only for security issues in the Perl
core, not for modules independently distributed on \s-1CPAN.\s0
.SH "SEE ALSO"
.IX Header "SEE ALSO"
The \fIChanges\fR file for an explanation of how to view exhaustive details
on what changed.
.PP
The \fI\s-1INSTALL\s0\fR file for how to build Perl.
.PP
The \fI\s-1README\s0\fR file for general stuff.
.PP
The \fIArtistic\fR and \fICopying\fR files for copyright information.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perl5160delta5.16.1                          0100644 0001750 0001750 00000473357 12566207413 023563  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERL5160DELTA 1"
.TH PERL5160DELTA 1 "2013-03-04" "perl v5.16.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perl5160delta \- what is new for perl v5.16.0
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document describes differences between the 5.14.0 release and
the 5.16.0 release.
.PP
If you are upgrading from an earlier release such as 5.12.0, first read
perl5140delta, which describes differences between 5.12.0 and
5.14.0.
.PP
Some bug fixes in this release have been backported to later
releases of 5.14.x.  Those are indicated with the 5.14.x version in
parentheses.
.SH "Notice"
.IX Header "Notice"
With the release of Perl 5.16.0, the 5.12.x series of releases is now out of
its support period.  There may be future 5.12.x releases, but only in the
event of a critical security issue.  Users of Perl 5.12 or earlier should
consider upgrading to a more recent release of Perl.
.PP
This policy is described in greater detail in
perlpolicy.
.SH "Core Enhancements"
.IX Header "Core Enhancements"
.ie n .SS """use \fIVERSION\fP"""
.el .SS "\f(CWuse \fP\f(CIVERSION\fP\f(CW\fP"
.IX Subsection "use VERSION"
As of this release, version declarations like \f(CW\*(C`use v5.16\*(C'\fR now disable
all features before enabling the new feature bundle.  This means that
the following holds true:
.PP
.Vb 4
\&    use 5.016;
\&    # only 5.16 features enabled here
\&    use 5.014;
\&    # only 5.14 features enabled here (not 5.16)
.Ve
.PP
\&\f(CW\*(C`use v5.12\*(C'\fR and higher continue to enable strict, but explicit \f(CW\*(C`use
strict\*(C'\fR and \f(CW\*(C`no strict\*(C'\fR now override the version declaration, even
when they come first:
.PP
.Vb 3
\&    no strict;
\&    use 5.012;
\&    # no strict here
.Ve
.PP
There is a new \*(L":default\*(R" feature bundle that represents the set of
features enabled before any version declaration or \f(CW\*(C`use feature\*(C'\fR has
been seen.  Version declarations below 5.10 now enable the \*(L":default\*(R"
feature set.  This does not actually change the behavior of \f(CW\*(C`use
v5.8\*(C'\fR, because features added to the \*(L":default\*(R" set are those that were
traditionally enabled by default, before they could be turned off.
.PP
\&\f(CW\*(C`no feature\*(C'\fR now resets to the default feature set.  To disable all
features (which is likely to be a pretty special-purpose request, since
it presumably won't match any named set of semantics) you can now  
write \f(CW\*(C`no feature \*(Aq:all\*(Aq\*(C'\fR.
.PP
\&\f(CW$[\fR is now disabled under \f(CW\*(C`use v5.16\*(C'\fR.  It is part of the default
feature set and can be turned on or off explicitly with \f(CW\*(C`use feature
\&\*(Aqarray_base\*(Aq\*(C'\fR.
.ie n .SS """_\|_SUB_\|_"""
.el .SS "\f(CW_\|_SUB_\|_\fP"
.IX Subsection "__SUB__"
The new \f(CW\*(C`_\|_SUB_\|_\*(C'\fR token, available under the \f(CW\*(C`current_sub\*(C'\fR feature
(see feature) or \f(CW\*(C`use v5.16\*(C'\fR, returns a reference to the current
subroutine, making it easier to write recursive closures.
.SS "New and Improved Built-ins"
.IX Subsection "New and Improved Built-ins"
\fIMore consistent \f(CI\*(C`eval\*(C'\fI\fR
.IX Subsection "More consistent eval"
.PP
The \f(CW\*(C`eval\*(C'\fR operator sometimes treats a string argument as a sequence of
characters and sometimes as a sequence of bytes, depending on the
internal encoding.  The internal encoding is not supposed to make any
difference, but there is code that relies on this inconsistency.
.PP
The new \f(CW\*(C`unicode_eval\*(C'\fR and \f(CW\*(C`evalbytes\*(C'\fR features (enabled under \f(CW\*(C`use
5.16.0\*(C'\fR) resolve this.  The \f(CW\*(C`unicode_eval\*(C'\fR feature causes \f(CW\*(C`eval
$string\*(C'\fR to treat the string always as Unicode.  The \f(CW\*(C`evalbytes\*(C'\fR
features provides a function, itself called \f(CW\*(C`evalbytes\*(C'\fR, which
evaluates its argument always as a string of bytes.
.PP
These features also fix oddities with source filters leaking to outer
dynamic scopes.
.PP
See feature for more detail.
.PP
\fI\f(CI\*(C`substr\*(C'\fI lvalue revamp\fR
.IX Subsection "substr lvalue revamp"
.PP
When \f(CW\*(C`substr\*(C'\fR is called in lvalue or potential lvalue context with two
or three arguments, a special lvalue scalar is returned that modifies
the original string (the first argument) when assigned to.
.PP
Previously, the offsets (the second and third arguments) passed to
\&\f(CW\*(C`substr\*(C'\fR would be converted immediately to match the string, negative
offsets being translated to positive and offsets beyond the end of the
string being truncated.
.PP
Now, the offsets are recorded without modification in the special
lvalue scalar that is returned, and the original string is not even
looked at by \f(CW\*(C`substr\*(C'\fR itself, but only when the returned lvalue is
read or modified.
.PP
These changes result in an incompatible change:
.PP
If the original string changes length after the call to \f(CW\*(C`substr\*(C'\fR but
before assignment to its return value, negative offsets will remember
their position from the end of the string, affecting code like this:
.PP
.Vb 5
\&    my $string = "string";
\&    my $lvalue = \esubstr $string, \-4, 2;
\&    print $$lvalue, "\en"; # prints "ri"
\&    $string = "bailing twine";
\&    print $$lvalue, "\en"; # prints "wi"; used to print "il"
.Ve
.PP
The same thing happens with an omitted third argument.  The returned
lvalue will always extend to the end of the string, even if the string
becomes longer.
.PP
Since this change also allowed many bugs to be fixed (see
"The \f(CW\*(C`substr\*(C'\fR operator"), and since the behavior
of negative offsets has never been specified, the
change was deemed acceptable.
.PP
\fIReturn value of \f(CI\*(C`tied\*(C'\fI\fR
.IX Subsection "Return value of tied"
.PP
The value returned by \f(CW\*(C`tied\*(C'\fR on a tied variable is now the actual
scalar that holds the object to which the variable is tied.  This
lets ties be weakened with \f(CW\*(C`Scalar::Util::weaken(tied
$tied_variable)\*(C'\fR.
.SS "Unicode Support"
.IX Subsection "Unicode Support"
\fISupports (\fIalmost\fI) Unicode 6.1\fR
.IX Subsection "Supports (almost) Unicode 6.1"
.PP
Besides the addition of whole new scripts, and new characters in
existing scripts, this new version of Unicode, as always, makes some
changes to existing characters.  One change that may trip up some
applications is that the General Category of two characters in the
Latin\-1 range, \s-1PILCROW\s0 \s-1SIGN\s0 and \s-1SECTION\s0 \s-1SIGN\s0, has been changed from
Other_Symbol to Other_Punctuation.  The same change has been made for
a character in each of Tibetan, Ethiopic, and Aegean.
The code points U+3248..U+324F (\s-1CIRCLED\s0 \s-1NUMBER\s0 \s-1TEN\s0 \s-1ON\s0 \s-1BLACK\s0 \s-1SQUARE\s0
through \s-1CIRCLED\s0 \s-1NUMBER\s0 \s-1EIGHTY\s0 \s-1ON\s0 \s-1BLACK\s0 \s-1SQUARE\s0) have had their General
Category changed from Other_Symbol to Other_Numeric.  The Line Break
property has changes for Hebrew and Japanese; and because of
other changes in 6.1, the Perl regular expression construct \f(CW\*(C`\eX\*(C'\fR now
works differently for some characters in Thai and Lao.
.PP
New aliases (synonyms) have been defined for many property values;
these, along with the previously existing ones, are all cross-indexed in
perluniprops.
.PP
The return value of \f(CW\*(C`charnames::viacode()\*(C'\fR is affected by other
changes:
.PP
.Vb 10
\& Code point      Old Name             New Name
\&   U+000A    LINE FEED (LF)        LINE FEED
\&   U+000C    FORM FEED (FF)        FORM FEED
\&   U+000D    CARRIAGE RETURN (CR)  CARRIAGE RETURN
\&   U+0085    NEXT LINE (NEL)       NEXT LINE
\&   U+008E    SINGLE\-SHIFT 2        SINGLE\-SHIFT\-2
\&   U+008F    SINGLE\-SHIFT 3        SINGLE\-SHIFT\-3
\&   U+0091    PRIVATE USE 1         PRIVATE USE\-1
\&   U+0092    PRIVATE USE 2         PRIVATE USE\-2
\&   U+2118    SCRIPT CAPITAL P      WEIERSTRASS ELLIPTIC FUNCTION
.Ve
.PP
Perl will accept any of these names as input, but
\&\f(CW\*(C`charnames::viacode()\*(C'\fR now returns the new name of each pair.  The
change for U+2118 is considered by Unicode to be a correction, that is
the original name was a mistake (but again, it will remain forever valid
to use it to refer to U+2118).  But most of these changes are the
fallout of the mistake Unicode 6.0 made in naming a character used in
Japanese cell phones to be \*(L"\s-1BELL\s0\*(R", which conflicts with the longstanding
industry use of (and Unicode's recommendation to use) that name
to mean the \s-1ASCII\s0 control character at U+0007.  Therefore, that name
has been deprecated in Perl since v5.14, and any use of it will raise a
warning message (unless turned off).  The name \*(L"\s-1ALERT\s0\*(R" is now the
preferred name for this code point, with \*(L"\s-1BEL\s0\*(R" an acceptable short
form.  The name for the new cell phone character, at code point U+1F514,
remains undefined in this version of Perl (hence we don't 
implement quite all of Unicode 6.1), but starting in v5.18, \s-1BELL\s0 will mean
this character, and not U+0007.
.PP
Unicode has taken steps to make sure that this sort of mistake does not
happen again.  The Standard now includes all generally accepted
names and abbreviations for control characters, whereas previously it
didn't (though there were recommended names for most of them, which Perl
used).  This means that most of those recommended names are now
officially in the Standard.  Unicode did not recommend names for the
four code points listed above between U+008E and U+008F, and in
standardizing them Unicode subtly changed the names that Perl had
previously given them, by replacing the final blank in each name by a
hyphen.  Unicode also officially accepts names that Perl had deprecated,
such as \s-1FILE\s0 \s-1SEPARATOR\s0.  Now the only deprecated name is \s-1BELL\s0.
Finally, Perl now uses the new official names instead of the old
(now considered obsolete) names for the first four code points in the
list above (the ones which have the parentheses in them).
.PP
Now that the names have been placed in the Unicode standard, these kinds
of changes should not happen again, though corrections, such as to
U+2118, are still possible.
.PP
Unicode also added some name abbreviations, which Perl now accepts:
\&\s-1SP\s0 for \s-1SPACE\s0;
\&\s-1TAB\s0 for \s-1CHARACTER\s0 \s-1TABULATION\s0;
\&\s-1NEW\s0 \s-1LINE\s0, \s-1END\s0 \s-1OF\s0 \s-1LINE\s0, \s-1NL\s0, and \s-1EOL\s0 for \s-1LINE\s0 \s-1FEED\s0;
LOCKING-SHIFT \s-1ONE\s0 for \s-1SHIFT\s0 \s-1OUT\s0;
LOCKING-SHIFT \s-1ZERO\s0 for \s-1SHIFT\s0 \s-1IN\s0;
and \s-1ZWNBSP\s0 for \s-1ZERO\s0 \s-1WIDTH\s0 NO-BREAK \s-1SPACE\s0.
.PP
More details on this version of Unicode are provided in
<http://www.unicode.org/versions/Unicode6.1.0/>.
.PP
\fI\f(CI\*(C`use charnames\*(C'\fI is no longer needed for \f(CI\*(C`\eN{\f(CIname\f(CI}\*(C'\fI\fR
.IX Subsection "use charnames is no longer needed for N{name}"
.PP
When \f(CW\*(C`\eN{\f(CIname\f(CW}\*(C'\fR is encountered, the \f(CW\*(C`charnames\*(C'\fR module is now
automatically loaded when needed as if the \f(CW\*(C`:full\*(C'\fR and \f(CW\*(C`:short\*(C'\fR
options had been specified.  See charnames for more information.
.PP
\fI\f(CI\*(C`\eN{...}\*(C'\fI can now have Unicode loose name matching\fR
.IX Subsection "N{...} can now have Unicode loose name matching"
.PP
This is described in the \f(CW\*(C`charnames\*(C'\fR item in
\&\*(L"Updated Modules and Pragmata\*(R" below.
.PP
\fIUnicode Symbol Names\fR
.IX Subsection "Unicode Symbol Names"
.PP
Perl now has proper support for Unicode in symbol names.  It used to be
that \f(CW\*(C`*{$foo}\*(C'\fR would ignore the internal \s-1UTF8\s0 flag and use the bytes of
the underlying representation to look up the symbol.  That meant that
\&\f(CW\*(C`*{"\ex{100}"}\*(C'\fR and \f(CW\*(C`*{"\exc4\ex80"}\*(C'\fR would return the same thing.  All
these parts of Perl have been fixed to account for Unicode:
.IP "\(bu" 4
Method names (including those passed to \f(CW\*(C`use overload\*(C'\fR)
.IP "\(bu" 4
Typeglob names (including names of variables, subroutines, and filehandles)
.IP "\(bu" 4
Package names
.IP "\(bu" 4
\&\f(CW\*(C`goto\*(C'\fR
.IP "\(bu" 4
Symbolic dereferencing
.IP "\(bu" 4
Second argument to \f(CW\*(C`bless()\*(C'\fR and \f(CW\*(C`tie()\*(C'\fR
.IP "\(bu" 4
Return value of \f(CW\*(C`ref()\*(C'\fR
.IP "\(bu" 4
Subroutine prototypes
.IP "\(bu" 4
Attributes
.IP "\(bu" 4
Various warnings and error messages that mention variable names or values,
methods, etc.
.PP
In addition, a parsing bug has been fixed that prevented \f(CW\*(C`*{e\*'}\*(C'\fR from
implicitly quoting the name, but instead interpreted it as \f(CW\*(C`*{+e\*'}\*(C'\fR, which
would cause a strict violation.
.PP
\&\f(CW\*(C`*{"*a::b"}\*(C'\fR automatically strips off the * if it is followed by an \s-1ASCII\s0
letter.  That has been extended to all Unicode identifier characters.
.PP
One-character non-ASCII non-punctuation variables (like \f(CW\*(C`$e\*'\*(C'\fR) are now
subject to \*(L"Used only once\*(R" warnings.  They used to be exempt, as they
were treated as punctuation variables.
.PP
Also, single-character Unicode punctuation variables (like \f(CW$X\fR) are now
supported [perl #69032].
.PP
\fIImproved ability to mix locales and Unicode, including \s-1UTF\-8\s0 locales\fR
.IX Subsection "Improved ability to mix locales and Unicode, including UTF-8 locales"
.PP
An optional parameter has been added to \f(CW\*(C`use locale\*(C'\fR
.PP
.Vb 1
\& use locale \*(Aq:not_characters\*(Aq;
.Ve
.PP
which tells Perl to use all but the \f(CW\*(C`LC_CTYPE\*(C'\fR and \f(CW\*(C`LC_COLLATE\*(C'\fR
portions of the current locale.  Instead, the character set is assumed
to be Unicode.  This lets locales and Unicode be seamlessly mixed,
including the increasingly frequent \s-1UTF\-8\s0 locales.  When using this
hybrid form of locales, the \f(CW\*(C`:locale\*(C'\fR layer to the open pragma can
be used to interface with the file system, and there are \s-1CPAN\s0 modules
available for \s-1ARGV\s0 and environment variable conversions.
.PP
Full details are in perllocale.
.PP
\fINew function \f(CI\*(C`fc\*(C'\fI and corresponding escape sequence \f(CI\*(C`\eF\*(C'\fI for Unicode foldcase\fR
.IX Subsection "New function fc and corresponding escape sequence F for Unicode foldcase"
.PP
Unicode foldcase is an extension to lowercase that gives better results
when comparing two strings case-insensitively.  It has long been used
internally in regular expression \f(CW\*(C`/i\*(C'\fR matching.  Now it is available
explicitly through the new \f(CW\*(C`fc\*(C'\fR function call (enabled by
\&\f(CW"use\ feature\ \*(Aqfc\*(Aq"\fR, or \f(CW\*(C`use v5.16\*(C'\fR, or explicitly callable via
\&\f(CW\*(C`CORE::fc\*(C'\fR) or through the new \f(CW\*(C`\eF\*(C'\fR sequence in double-quotish
strings.
.PP
Full details are in \*(L"fc\*(R" in perlfunc.
.PP
\fIThe Unicode \f(CI\*(C`Script_Extensions\*(C'\fI property is now supported.\fR
.IX Subsection "The Unicode Script_Extensions property is now supported."
.PP
New in Unicode 6.0, this is an improved \f(CW\*(C`Script\*(C'\fR property.  Details
are in \*(L"Scripts\*(R" in perlunicode.
.SS "\s-1XS\s0 Changes"
.IX Subsection "XS Changes"
\fIImproved typemaps for Some Builtin Types\fR
.IX Subsection "Improved typemaps for Some Builtin Types"
.PP
Most \s-1XS\s0 authors will know there is a longstanding bug in the
\&\s-1OUTPUT\s0 typemap for T_AVREF (\f(CW\*(C`AV*\*(C'\fR), T_HVREF (\f(CW\*(C`HV*\*(C'\fR), T_CVREF (\f(CW\*(C`CV*\*(C'\fR),
and T_SVREF (\f(CW\*(C`SVREF\*(C'\fR or \f(CW\*(C`\e$foo\*(C'\fR) that requires manually decrementing
the reference count of the return value instead of the typemap taking
care of this.  For backwards-compatibility, this cannot be changed in the
default typemaps.  But we now provide additional typemaps
\&\f(CW\*(C`T_AVREF_REFCOUNT_FIXED\*(C'\fR, etc. that do not exhibit this bug.  Using
them in your extension is as simple as having one line in your
\&\f(CW\*(C`TYPEMAP\*(C'\fR section:
.PP
.Vb 1
\&  HV*   T_HVREF_REFCOUNT_FIXED
.Ve
.PP
\fI\f(CI\*(C`is_utf8_char()\*(C'\fI\fR
.IX Subsection "is_utf8_char()"
.PP
The XS-callable function \f(CW\*(C`is_utf8_char()\*(C'\fR, when presented with
malformed \s-1UTF\-8\s0 input, can read up to 12 bytes beyond the end of the
string.  This cannot be fixed without changing its \s-1API\s0, and so its
use is now deprecated.  Use \f(CW\*(C`is_utf8_char_buf()\*(C'\fR (described just below)
instead.
.PP
\fIAdded \f(CI\*(C`is_utf8_char_buf()\*(C'\fI\fR
.IX Subsection "Added is_utf8_char_buf()"
.PP
This function is designed to replace the deprecated \*(L"\fIis_utf8_char()\fR\*(R"
function.  It includes an extra parameter to make sure it doesn't read
past the end of the input buffer.
.PP
\fIOther \f(CI\*(C`is_utf8_foo()\*(C'\fI functions, as well as \f(CI\*(C`utf8_to_foo()\*(C'\fI, etc.\fR
.IX Subsection "Other is_utf8_foo() functions, as well as utf8_to_foo(), etc."
.PP
Most other XS-callable functions that take \s-1UTF\-8\s0 encoded input
implicitly assume that the \s-1UTF\-8\s0 is valid (not malformed) with respect to
buffer length.  Do not do things such as change a character's case or
see if it is alphanumeric without first being sure that it is valid
\&\s-1UTF\-8\s0.  This can be safely done for a whole string by using one of the
functions \f(CW\*(C`is_utf8_string()\*(C'\fR, \f(CW\*(C`is_utf8_string_loc()\*(C'\fR, and
\&\f(CW\*(C`is_utf8_string_loclen()\*(C'\fR.
.PP
\fINew Pad \s-1API\s0\fR
.IX Subsection "New Pad API"
.PP
Many new functions have been added to the \s-1API\s0 for manipulating lexical
pads.  See \*(L"Pad Data Structures\*(R" in perlapi for more information.
.SS "Changes to Special Variables"
.IX Subsection "Changes to Special Variables"
\fI\f(CI$$\fI can be assigned to\fR
.IX Subsection "$$ can be assigned to"
.PP
\&\f(CW$$\fR was made read-only in Perl 5.8.0.  But only sometimes: \f(CW\*(C`local $$\*(C'\fR
would make it writable again.  Some \s-1CPAN\s0 modules were using \f(CW\*(C`local $$\*(C'\fR or
\&\s-1XS\s0 code to bypass the read-only check, so there is no reason to keep \f(CW$$\fR
read-only.  (This change also allowed a bug to be fixed while maintaining
backward compatibility.)
.PP
\fI\f(CI$^X\fI converted to an absolute path on FreeBSD, \s-1OS\s0 X and Solaris\fR
.IX Subsection "$^X converted to an absolute path on FreeBSD, OS X and Solaris"
.PP
\&\f(CW$^X\fR is now converted to an absolute path on \s-1OS\s0 X, FreeBSD (without
needing \fI/proc\fR mounted) and Solaris 10 and 11.  This augments the
previous approach of using \fI/proc\fR on Linux, FreeBSD, and NetBSD
(in all cases, where mounted).
.PP
This makes relocatable perl installations more useful on these platforms.
(See \*(L"Relocatable \f(CW@INC\fR\*(R" in \fI\s-1INSTALL\s0\fR)
.SS "Debugger Changes"
.IX Subsection "Debugger Changes"
\fIFeatures inside the debugger\fR
.IX Subsection "Features inside the debugger"
.PP
The current Perl's feature bundle is now enabled for commands entered
in the interactive debugger.
.PP
\fINew option for the debugger's \f(BIt\fI command\fR
.IX Subsection "New option for the debugger's t command"
.PP
The \fBt\fR command in the debugger, which toggles tracing mode, now
accepts a numeric argument that determines how many levels of subroutine
calls to trace.
.PP
\fI\f(CI\*(C`enable\*(C'\fI and \f(CI\*(C`disable\*(C'\fI\fR
.IX Subsection "enable and disable"
.PP
The debugger now has \f(CW\*(C`disable\*(C'\fR and \f(CW\*(C`enable\*(C'\fR commands for disabling
existing breakpoints and re-enabling them.  See perldebug.
.PP
\fIBreakpoints with file names\fR
.IX Subsection "Breakpoints with file names"
.PP
The debugger's \*(L"b\*(R" command for setting breakpoints now lets a line
number be prefixed with a file name.  See
\&\*(L"b [file]:[line] [condition]\*(R" in perldebug.
.ie n .SS "The ""CORE"" Namespace"
.el .SS "The \f(CWCORE\fP Namespace"
.IX Subsection "The CORE Namespace"
\fIThe \f(CI\*(C`CORE::\*(C'\fI prefix\fR
.IX Subsection "The CORE:: prefix"
.PP
The \f(CW\*(C`CORE::\*(C'\fR prefix can now be used on keywords enabled by
feature.pm, even outside the scope of \f(CW\*(C`use feature\*(C'\fR.
.PP
\fISubroutines in the \f(CI\*(C`CORE\*(C'\fI namespace\fR
.IX Subsection "Subroutines in the CORE namespace"
.PP
Many Perl keywords are now available as subroutines in the \s-1CORE\s0 namespace.
This lets them be aliased:
.PP
.Vb 2
\&    BEGIN { *entangle = \e&CORE::tie }
\&    entangle $variable, $package, @args;
.Ve
.PP
And for prototypes to be bypassed:
.PP
.Vb 5
\&    sub mytie(\e[%$*@]$@) {
\&        my ($ref, $pack, @args) = @_;
\&        ... do something ...
\&        goto &CORE::tie;
\&    }
.Ve
.PP
Some of these cannot be called through references or via \f(CW&foo\fR syntax,
but must be called as barewords.
.PP
See \s-1CORE\s0 for details.
.SS "Other Changes"
.IX Subsection "Other Changes"
\fIAnonymous handles\fR
.IX Subsection "Anonymous handles"
.PP
Automatically generated file handles are now named _\|_ANONIO_\|_ when the
variable name cannot be determined, rather than \f(CW$_\fR\|_ANONIO_\|_.
.PP
\fIAutoloaded sort Subroutines\fR
.IX Subsection "Autoloaded sort Subroutines"
.PP
Custom sort subroutines can now be autoloaded [perl #30661]:
.PP
.Vb 2
\&    sub AUTOLOAD { ... }
\&    @sorted = sort foo @list; # uses AUTOLOAD
.Ve
.PP
\fI\f(CI\*(C`continue\*(C'\fI no longer requires the \*(L"switch\*(R" feature\fR
.IX Subsection "continue no longer requires the switch feature"
.PP
The \f(CW\*(C`continue\*(C'\fR keyword has two meanings.  It can introduce a \f(CW\*(C`continue\*(C'\fR
block after a loop, or it can exit the current \f(CW\*(C`when\*(C'\fR block.  Up to now,
the latter meaning was valid only with the \*(L"switch\*(R" feature enabled, and
was a syntax error otherwise.  Since the main purpose of feature.pm is to
avoid conflicts with user-defined subroutines, there is no reason for
\&\f(CW\*(C`continue\*(C'\fR to depend on it.
.PP
\fIDTrace probes for interpreter phase change\fR
.IX Subsection "DTrace probes for interpreter phase change"
.PP
The \f(CW\*(C`phase\-change\*(C'\fR probes will fire when the interpreter's phase
changes, which tracks the \f(CW\*(C`${^GLOBAL_PHASE}\*(C'\fR variable.  \f(CW\*(C`arg0\*(C'\fR is
the new phase name; \f(CW\*(C`arg1\*(C'\fR is the old one.  This is useful 
for limiting your instrumentation to one or more of: compile time,
run time, or destruct time.
.PP
\fI\f(CI\*(C`_\|_FILE_\|_()\*(C'\fI Syntax\fR
.IX Subsection "__FILE__() Syntax"
.PP
The \f(CW\*(C`_\|_FILE_\|_\*(C'\fR, \f(CW\*(C`_\|_LINE_\|_\*(C'\fR and \f(CW\*(C`_\|_PACKAGE_\|_\*(C'\fR tokens can now be written
with an empty pair of parentheses after them.  This makes them parse the
same way as \f(CW\*(C`time\*(C'\fR, \f(CW\*(C`fork\*(C'\fR and other built-in functions.
.PP
\fIThe \f(CI\*(C`\e$\*(C'\fI prototype accepts any scalar lvalue\fR
.IX Subsection "The $ prototype accepts any scalar lvalue"
.PP
The \f(CW\*(C`\e$\*(C'\fR and \f(CW\*(C`\e[$]\*(C'\fR subroutine prototypes now accept any scalar lvalue
argument.  Previously they accepted only scalars beginning with \f(CW\*(C`$\*(C'\fR and
hash and array elements.  This change makes them consistent with the way
the built-in \f(CW\*(C`read\*(C'\fR and \f(CW\*(C`recv\*(C'\fR functions (among others) parse their
arguments.  This means that one can override the built-in functions with
custom subroutines that parse their arguments the same way.
.PP
\fI\f(CI\*(C`_\*(C'\fI in subroutine prototypes\fR
.IX Subsection "_ in subroutine prototypes"
.PP
The \f(CW\*(C`_\*(C'\fR character in subroutine prototypes is now allowed before \f(CW\*(C`@\*(C'\fR or
\&\f(CW\*(C`%\*(C'\fR.
.SH "Security"
.IX Header "Security"
.ie n .SS "Use ""is_utf8_char_buf()"" and not ""is_utf8_char()"""
.el .SS "Use \f(CWis_utf8_char_buf()\fP and not \f(CWis_utf8_char()\fP"
.IX Subsection "Use is_utf8_char_buf() and not is_utf8_char()"
The latter function is now deprecated because its \s-1API\s0 is insufficient to
guarantee that it doesn't read (up to 12 bytes in the worst case) beyond
the end of its input string.  See
\&\fIis_utf8_char_buf()\fR.
.SS "Malformed \s-1UTF\-8\s0 input could cause attempts to read beyond the end of the buffer"
.IX Subsection "Malformed UTF-8 input could cause attempts to read beyond the end of the buffer"
Two new XS-accessible functions, \f(CW\*(C`utf8_to_uvchr_buf()\*(C'\fR and
\&\f(CW\*(C`utf8_to_uvuni_buf()\*(C'\fR are now available to prevent this, and the Perl
core has been converted to use them.
See \*(L"Internal Changes\*(R".
.ie n .SS """File::Glob::bsd_glob()"" memory error with \s-1GLOB_ALTDIRFUNC\s0 (\s-1CVE\-2011\-2728\s0)."
.el .SS "\f(CWFile::Glob::bsd_glob()\fP memory error with \s-1GLOB_ALTDIRFUNC\s0 (\s-1CVE\-2011\-2728\s0)."
.IX Subsection "File::Glob::bsd_glob() memory error with GLOB_ALTDIRFUNC (CVE-2011-2728)."
Calling \f(CW\*(C`File::Glob::bsd_glob\*(C'\fR with the unsupported flag
\&\s-1GLOB_ALTDIRFUNC\s0 would cause an access violation / segfault.  A Perl
program that accepts a flags value from an external source could expose
itself to denial of service or arbitrary code execution attacks.  There
are no known exploits in the wild.  The problem has been corrected by
explicitly disabling all unsupported flags and setting unused function
pointers to null.  Bug reported by Cle\*'ment Lecigne. (5.14.2)
.ie n .SS "Privileges are now set correctly when assigning to $("
.el .SS "Privileges are now set correctly when assigning to \f(CW$(\fP"
.IX Subsection "Privileges are now set correctly when assigning to $("
A hypothetical bug (probably unexploitable in practice) because the
incorrect setting of the effective group \s-1ID\s0 while setting \f(CW$(\fR has been
fixed.  The bug would have affected only systems that have \f(CW\*(C`setresgid()\*(C'\fR
but not \f(CW\*(C`setregid()\*(C'\fR, but no such systems are known to exist.
.SH "Deprecations"
.IX Header "Deprecations"
.SS "Don't read the Unicode data base files in \fIlib/unicore\fP"
.IX Subsection "Don't read the Unicode data base files in lib/unicore"
It is now deprecated to directly read the Unicode data base files.
These are stored in the \fIlib/unicore\fR directory.  Instead, you should
use the new functions in Unicode::UCD.  These provide a stable \s-1API\s0,
and give complete information.
.PP
Perl may at some point in the future change or remove these files.  The
file which applications were most likely to have used is
\&\fIlib/unicore/ToDigit.pl\fR.  \*(L"\fIprop_invmap()\fR\*(R" in Unicode::UCD can be used to
get at its data instead.
.ie n .SS "\s-1XS\s0 functions ""is_utf8_char()"", ""utf8_to_uvchr()"" and ""utf8_to_uvuni()"""
.el .SS "\s-1XS\s0 functions \f(CWis_utf8_char()\fP, \f(CWutf8_to_uvchr()\fP and \f(CWutf8_to_uvuni()\fP"
.IX Subsection "XS functions is_utf8_char(), utf8_to_uvchr() and utf8_to_uvuni()"
This function is deprecated because it could read beyond the end of the
input string.  Use the new \fIis_utf8_char_buf()\fR,
\&\f(CW\*(C`utf8_to_uvchr_buf()\*(C'\fR and \f(CW\*(C`utf8_to_uvuni_buf()\*(C'\fR instead.
.SH "Future Deprecations"
.IX Header "Future Deprecations"
This section serves as a notice of features that are \fIlikely\fR to be
removed or deprecated in the next release of
perl (5.18.0).  If your code depends on these features, you should
contact the Perl 5 Porters via the mailing
list <http://lists.perl.org/list/perl5-porters.html> or perlbug to
explain your use case and inform the deprecation process.
.SS "Core Modules"
.IX Subsection "Core Modules"
These modules may be marked as deprecated \fIfrom the core\fR.  This only
means that they will no longer be installed by default with the core
distribution, but will remain available on the \s-1CPAN\s0.
.IP "\(bu" 4
\&\s-1CPANPLUS\s0
.IP "\(bu" 4
Filter::Simple
.IP "\(bu" 4
PerlIO::mmap
.IP "\(bu" 4
Pod::LaTeX
.IP "\(bu" 4
Pod::Parser
.IP "\(bu" 4
SelfLoader
.IP "\(bu" 4
Text::Soundex
.IP "\(bu" 4
Thread.pm
.SS "Platforms with no supporting programmers:"
.IX Subsection "Platforms with no supporting programmers:"
These platforms will probably have their
special build support removed during the
5.17.0 development series.
.IP "\(bu" 4
BeOS
.IP "\(bu" 4
djgpp
.IP "\(bu" 4
dgux
.IP "\(bu" 4
\&\s-1EPOC\s0
.IP "\(bu" 4
MPE/iX
.IP "\(bu" 4
Rhapsody
.IP "\(bu" 4
\&\s-1UTS\s0
.IP "\(bu" 4
\&\s-1VM/ESA\s0
.SS "Other Future Deprecations"
.IX Subsection "Other Future Deprecations"
.IP "\(bu" 4
Swapping of $< and $>
.Sp
For more information about this future deprecation, see the relevant \s-1RT\s0
ticket <https://rt.perl.org/rt3/Ticket/Display.html?id=96212>.
.IP "\(bu" 4
sfio, stdio
.Sp
Perl supports being built without PerlIO proper, using a stdio or sfio
wrapper instead.  A perl build like this will not support \s-1IO\s0 layers and
thus Unicode \s-1IO\s0, making it rather handicapped.
.Sp
PerlIO supports a \f(CW\*(C`stdio\*(C'\fR layer if stdio use is desired, and similarly a
sfio layer could be produced.
.IP "\(bu" 4
Unescaped literal \f(CW"{"\fR in regular expressions.
.Sp
Starting with v5.20, it is planned to require a literal \f(CW"{"\fR to be
escaped, for example by preceding it with a backslash.  In v5.18, a
deprecated warning message will be emitted for all such uses.  
This affects only patterns that are to match a literal \f(CW"{"\fR.  Other
uses of this character, such as part of a quantifier or sequence as in
those below, are completely unaffected:
.Sp
.Vb 3
\&    /foo{3,5}/
\&    /\ep{Alphabetic}/
\&    /\eN{DIGIT ZERO}
.Ve
.Sp
Removing this will permit extensions to Perl's pattern syntax and better
error checking for existing syntax.  See \*(L"Quantifiers\*(R" in perlre for an
example.
.IP "\(bu" 4
Revamping \f(CW"\eQ"\fR semantics in double-quotish strings when combined with other escapes.
.Sp
There are several bugs and inconsistencies involving combinations
of \f(CW\*(C`\eQ\*(C'\fR and escapes like \f(CW\*(C`\ex\*(C'\fR, \f(CW\*(C`\eL\*(C'\fR, etc., within a \f(CW\*(C`\eQ...\eE\*(C'\fR pair.
These need to be fixed, and doing so will necessarily change current
behavior.  The changes have not yet been settled.
.SH "Incompatible Changes"
.IX Header "Incompatible Changes"
.SS "Special blocks called in void context"
.IX Subsection "Special blocks called in void context"
Special blocks (\f(CW\*(C`BEGIN\*(C'\fR, \f(CW\*(C`CHECK\*(C'\fR, \f(CW\*(C`INIT\*(C'\fR, \f(CW\*(C`UNITCHECK\*(C'\fR, \f(CW\*(C`END\*(C'\fR) are now
called in void context.  This avoids wasteful copying of the result of the
last statement [perl #108794].
.ie n .SS "The ""overloading"" pragma and regexp objects"
.el .SS "The \f(CWoverloading\fP pragma and regexp objects"
.IX Subsection "The overloading pragma and regexp objects"
With \f(CW\*(C`no overloading\*(C'\fR, regular expression objects returned by \f(CW\*(C`qr//\*(C'\fR are
now stringified as \*(L"Regexp=REGEXP(0xbe600d)\*(R" instead of the regular
expression itself [perl #108780].
.SS "Two \s-1XS\s0 typemap Entries removed"
.IX Subsection "Two XS typemap Entries removed"
Two presumably unused \s-1XS\s0 typemap entries have been removed from the
core typemap: T_DATAUNIT and T_CALLBACK.  If you are, against all odds,
a user of these, please see the instructions on how to restore them
in perlxstypemap.
.SS "Unicode 6.1 has incompatibilities with Unicode 6.0"
.IX Subsection "Unicode 6.1 has incompatibilities with Unicode 6.0"
These are detailed in \*(L"Supports (almost) Unicode 6.1\*(R" above.
You can compile this version of Perl to use Unicode 6.0.  See
\&\*(L"Hacking Perl to work on earlier Unicode versions (for very serious hackers only)\*(R" in perlunicode.
.SS "Borland compiler"
.IX Subsection "Borland compiler"
All support for the Borland compiler has been dropped.  The code had not
worked for a long time anyway.
.SS "Certain deprecated Unicode properties are no longer supported by default"
.IX Subsection "Certain deprecated Unicode properties are no longer supported by default"
Perl should never have exposed certain Unicode properties that are used
by Unicode internally and not meant to be publicly available.  Use of
these has generated deprecated warning messages since Perl 5.12.  The
removed properties are Other_Alphabetic,
Other_Default_Ignorable_Code_Point, Other_Grapheme_Extend,
Other_ID_Continue, Other_ID_Start, Other_Lowercase, Other_Math, and
Other_Uppercase.
.PP
Perl may be recompiled to include any or all of them; instructions are
given in
\&\*(L"Unicode character properties that are \s-1NOT\s0 accepted by Perl\*(R" in perluniprops.
.SS "Dereferencing \s-1IO\s0 thingies as typeglobs"
.IX Subsection "Dereferencing IO thingies as typeglobs"
The \f(CW\*(C`*{...}\*(C'\fR operator, when passed a reference to an \s-1IO\s0 thingy (as in
\&\f(CW\*(C`*{*STDIN{IO}}\*(C'\fR), creates a new typeglob containing just that \s-1IO\s0 object.
Previously, it would stringify as an empty string, but some operators would
treat it as undefined, producing an \*(L"uninitialized\*(R" warning.
Now it stringifies as _\|_ANONIO_\|_ [perl #96326].
.SS "User-defined case-changing operations"
.IX Subsection "User-defined case-changing operations"
This feature was deprecated in Perl 5.14, and has now been removed.
The \s-1CPAN\s0 module Unicode::Casing provides better functionality without
the drawbacks that this feature had, as are detailed in the 5.14
documentation:
http://perldoc.perl.org/5.14.0/perlunicode.html#User\-Defined\-Case\-Mappings\-%28for\-serious\-hackers\-only%29 <http://perldoc.perl.org/5.14.0/perlunicode.html#User-Defined-Case-Mappings-%28for-serious-hackers-only%29>
.SS "XSUBs are now 'static'"
.IX Subsection "XSUBs are now 'static'"
\&\s-1XSUB\s0 C functions are now 'static', that is, they are not visible from
outside the compilation unit.  Users can use the new \f(CW\*(C`XS_EXTERNAL(name)\*(C'\fR
and \f(CW\*(C`XS_INTERNAL(name)\*(C'\fR macros to pick the desired linking behavior.
The ordinary \f(CW\*(C`XS(name)\*(C'\fR declaration for XSUBs will continue to declare
non\-'static' XSUBs for compatibility, but the \s-1XS\s0 compiler,
ExtUtils::ParseXS (\f(CW\*(C`xsubpp\*(C'\fR) will emit 'static' XSUBs by default.
ExtUtils::ParseXS's behavior can be reconfigured from \s-1XS\s0 using the
\&\f(CW\*(C`EXPORT_XSUB_SYMBOLS\*(C'\fR keyword.  See perlxs for details.
.SS "Weakening read-only references"
.IX Subsection "Weakening read-only references"
Weakening read-only references is no longer permitted.  It should never
have worked anyway, and could sometimes result in crashes.
.SS "Tying scalars that hold typeglobs"
.IX Subsection "Tying scalars that hold typeglobs"
Attempting to tie a scalar after a typeglob was assigned to it would
instead tie the handle in the typeglob's \s-1IO\s0 slot.  This meant that it was
impossible to tie the scalar itself.  Similar problems affected \f(CW\*(C`tied\*(C'\fR and
\&\f(CW\*(C`untie\*(C'\fR: \f(CW\*(C`tied $scalar\*(C'\fR would return false on a tied scalar if the last
thing returned was a typeglob, and \f(CW\*(C`untie $scalar\*(C'\fR on such a tied scalar
would do nothing.
.PP
We fixed this problem before Perl 5.14.0, but it caused problems with some
\&\s-1CPAN\s0 modules, so we put in a deprecation cycle instead.
.PP
Now the deprecation has been removed and this bug has been fixed.  So
\&\f(CW\*(C`tie $scalar\*(C'\fR will always tie the scalar, not the handle it holds.  To tie
the handle, use \f(CW\*(C`tie *$scalar\*(C'\fR (with an explicit asterisk).  The same
applies to \f(CW\*(C`tied *$scalar\*(C'\fR and \f(CW\*(C`untie *$scalar\*(C'\fR.
.ie n .SS "IPC::Open3 no longer provides ""xfork()"", ""xclose_on_exec()"" and ""xpipe_anon()"""
.el .SS "IPC::Open3 no longer provides \f(CWxfork()\fP, \f(CWxclose_on_exec()\fP and \f(CWxpipe_anon()\fP"
.IX Subsection "IPC::Open3 no longer provides xfork(), xclose_on_exec() and xpipe_anon()"
All three functions were private, undocumented, and unexported.  They do
not appear to be used by any code on \s-1CPAN\s0.  Two have been inlined and one
deleted entirely.
.ie n .SS "$$ no longer caches \s-1PID\s0"
.el .SS "\f(CW$$\fP no longer caches \s-1PID\s0"
.IX Subsection "$$ no longer caches PID"
Previously, if one called \fIfork\fR\|(3) from C, Perl's
notion of \f(CW$$\fR could go out of sync with what \fIgetpid()\fR returns.  By always
fetching the value of \f(CW$$\fR via \fIgetpid()\fR, this potential bug is eliminated.
Code that depends on the caching behavior will break.  As described in
Core Enhancements,
\&\f(CW$$\fR is now writable, but it will be reset during a
fork.
.ie n .SS "$$ and ""getppid()"" no longer emulate \s-1POSIX\s0 semantics under LinuxThreads"
.el .SS "\f(CW$$\fP and \f(CWgetppid()\fP no longer emulate \s-1POSIX\s0 semantics under LinuxThreads"
.IX Subsection "$$ and getppid() no longer emulate POSIX semantics under LinuxThreads"
The \s-1POSIX\s0 emulation of \f(CW$$\fR and \f(CW\*(C`getppid()\*(C'\fR under the obsolete
LinuxThreads implementation has been removed.
This only impacts users of Linux 2.4 and
users of Debian GNU/kFreeBSD up to and including 6.0, not the vast
majority of Linux installations that use \s-1NPTL\s0 threads.
.PP
This means that \f(CW\*(C`getppid()\*(C'\fR, like \f(CW$$\fR, is now always guaranteed to
return the \s-1OS\s0's idea of the current state of the process, not perl's
cached version of it.
.PP
See the documentation for $$ for details.
.ie n .SS "$<, $>, $( and $) are no longer cached"
.el .SS "\f(CW$<\fP, \f(CW$>\fP, \f(CW$(\fP and \f(CW$)\fP are no longer cached"
.IX Subsection "$<, $>, $( and $) are no longer cached"
Similarly to the changes to \f(CW$$\fR and \f(CW\*(C`getppid()\*(C'\fR, the internal
caching of \f(CW$<\fR, \f(CW$>\fR, \f(CW$(\fR and \f(CW$)\fR has been removed.
.PP
When we cached these values our idea of what they were would drift out
of sync with reality if someone (e.g., someone embedding perl) called
\&\f(CW\*(C`sete?[ug]id()\*(C'\fR without updating \f(CW\*(C`PL_e?[ug]id\*(C'\fR.  Having to deal with
this complexity wasn't worth it given how cheap the \f(CW\*(C`gete?[ug]id()\*(C'\fR
system call is.
.PP
This change will break a handful of \s-1CPAN\s0 modules that use the XS-level
\&\f(CW\*(C`PL_uid\*(C'\fR, \f(CW\*(C`PL_gid\*(C'\fR, \f(CW\*(C`PL_euid\*(C'\fR or \f(CW\*(C`PL_egid\*(C'\fR variables.
.PP
The fix for those breakages is to use \f(CW\*(C`PerlProc_gete?[ug]id()\*(C'\fR to
retrieve them (e.g., \f(CW\*(C`PerlProc_getuid()\*(C'\fR), and not to assign to
\&\f(CW\*(C`PL_e?[ug]id\*(C'\fR if you change the \s-1UID/GID/EUID/EGID\s0.  There is no longer
any need to do so since perl will always retrieve the up-to-date
version of those values from the \s-1OS\s0.
.ie n .SS "Which Non-ASCII characters get quoted by ""quotemeta"" and ""\eQ"" has changed"
.el .SS "Which Non-ASCII characters get quoted by \f(CWquotemeta\fP and \f(CW\eQ\fP has changed"
.IX Subsection "Which Non-ASCII characters get quoted by quotemeta and Q has changed"
This is unlikely to result in a real problem, as Perl does not attach
special meaning to any non-ASCII character, so it is currently
irrelevant which are quoted or not.  This change fixes bug [perl #77654] and
brings Perl's behavior more into line with Unicode's recommendations.
See \*(L"quotemeta\*(R" in perlfunc.
.SH "Performance Enhancements"
.IX Header "Performance Enhancements"
.IP "\(bu" 4
Improved performance for Unicode properties in regular expressions
.Sp
Matching a code point against a Unicode property is now done via a
binary search instead of linear.  This means for example that the worst
case for a 1000 item property is 10 probes instead of 1000.  This
inefficiency has been compensated for in the past by permanently storing
in a hash the results of a given probe plus the results for the adjacent
64 code points, under the theory that near-by code points are likely to
be searched for.  A separate hash was used for each mention of a Unicode
property in each regular expression.  Thus, \f(CW\*(C`qr/\ep{foo}abc\ep{foo}/\*(C'\fR
would generate two hashes.  Any probes in one instance would be unknown
to the other, and the hashes could expand separately to be quite large
if the regular expression were used on many different widely-separated
code points.
Now, however, there is just one hash shared by all instances of a given
property.  This means that if \f(CW\*(C`\ep{foo}\*(C'\fR is matched against \*(L"A\*(R" in one
regular expression in a thread, the result will be known immediately to
all regular expressions, and the relentless march of using up memory is
slowed considerably.
.IP "\(bu" 4
Version declarations with the \f(CW\*(C`use\*(C'\fR keyword (e.g., \f(CW\*(C`use 5.012\*(C'\fR) are now
faster, as they enable features without loading \fIfeature.pm\fR.
.IP "\(bu" 4
\&\f(CW\*(C`local $_\*(C'\fR is faster now, as it no longer iterates through magic that it
is not going to copy anyway.
.IP "\(bu" 4
Perl 5.12.0 sped up the destruction of objects whose classes define
empty \f(CW\*(C`DESTROY\*(C'\fR methods (to prevent autoloading), by simply not
calling such empty methods.  This release takes this optimization a
step further, by not calling any \f(CW\*(C`DESTROY\*(C'\fR method that begins with a
\&\f(CW\*(C`return\*(C'\fR statement.  This can be useful for destructors that are only
used for debugging:
.Sp
.Vb 2
\&    use constant DEBUG => 1;
\&    sub DESTROY { return unless DEBUG; ... }
.Ve
.Sp
Constant-folding will reduce the first statement to \f(CW\*(C`return;\*(C'\fR if \s-1DEBUG\s0
is set to 0, triggering this optimization.
.IP "\(bu" 4
Assigning to a variable that holds a typeglob or copy-on-write scalar
is now much faster.  Previously the typeglob would be stringified or
the copy-on-write scalar would be copied before being clobbered.
.IP "\(bu" 4
Assignment to \f(CW\*(C`substr\*(C'\fR in void context is now more than twice its
previous speed.  Instead of creating and returning a special lvalue
scalar that is then assigned to, \f(CW\*(C`substr\*(C'\fR modifies the original string
itself.
.IP "\(bu" 4
\&\f(CW\*(C`substr\*(C'\fR no longer calculates a value to return when called in void
context.
.IP "\(bu" 4
Due to changes in File::Glob, Perl's \f(CW\*(C`glob\*(C'\fR function and its \f(CW\*(C`<...>\*(C'\fR equivalent are now much faster.  The splitting of the pattern
into words has been rewritten in C, resulting in speed-ups of 20% for
some cases.
.Sp
This does not affect \f(CW\*(C`glob\*(C'\fR on \s-1VMS\s0, as it does not use File::Glob.
.IP "\(bu" 4
The short-circuiting operators \f(CW\*(C`&&\*(C'\fR, \f(CW\*(C`||\*(C'\fR, and \f(CW\*(C`//\*(C'\fR, when chained
(such as \f(CW\*(C`$a || $b || $c\*(C'\fR), are now considerably faster to short-circuit,
due to reduced optree traversal.
.IP "\(bu" 4
The implementation of \f(CW\*(C`s///r\*(C'\fR makes one fewer copy of the scalar's value.
.IP "\(bu" 4
Recursive calls to lvalue subroutines in lvalue scalar context use less
memory.
.SH "Modules and Pragmata"
.IX Header "Modules and Pragmata"
.SS "Deprecated Modules"
.IX Subsection "Deprecated Modules"
.IP "Version::Requirements" 4
.IX Item "Version::Requirements"
Version::Requirements is now \s-1DEPRECATED\s0, use CPAN::Meta::Requirements,
which is a drop-in replacement.  It will be deleted from perl.git blead
in v5.17.0.
.SS "New Modules and Pragmata"
.IX Subsection "New Modules and Pragmata"
.IP "\(bu" 4
arybase \*(-- this new module implements the \f(CW$[\fR variable.
.IP "\(bu" 4
PerlIO::mmap 0.010 has been added to the Perl core.
.Sp
The \f(CW\*(C`mmap\*(C'\fR PerlIO layer is no longer implemented by perl itself, but has
been moved out into the new PerlIO::mmap module.
.SS "Updated Modules and Pragmata"
.IX Subsection "Updated Modules and Pragmata"
This is only an overview of selected module updates.  For a complete list of
updates, run:
.PP
.Vb 1
\&    $ corelist \-\-diff 5.14.0 5.16.0
.Ve
.PP
You can substitute your favorite version in place of 5.14.0, too.
.IP "\(bu" 4
Archive::Extract has been upgraded from version 0.48 to 0.58.
.Sp
Includes a fix for FreeBSD to only use \f(CW\*(C`unzip\*(C'\fR if it is located in
\&\f(CW\*(C`/usr/local/bin\*(C'\fR, as FreeBSD 9.0 will ship with a limited \f(CW\*(C`unzip\*(C'\fR in
\&\f(CW\*(C`/usr/bin\*(C'\fR.
.IP "\(bu" 4
Archive::Tar has been upgraded from version 1.76 to 1.82.
.Sp
Adjustments to handle files >8gb (>0777777777777 octal) and a feature
to return the \s-1MD5SUM\s0 of files in the archive.
.IP "\(bu" 4
base has been upgraded from version 2.16 to 2.18.
.Sp
\&\f(CW\*(C`base\*(C'\fR no longer sets a module's \f(CW$VERSION\fR to \*(L"\-1\*(R" when a module it
loads does not define a \f(CW$VERSION\fR.  This change has been made because
\&\*(L"\-1\*(R" is not a valid version number under the new \*(L"lax\*(R" criteria used
internally by \f(CW\*(C`UNIVERSAL::VERSION\*(C'\fR.  (See version for more on \*(L"lax\*(R"
version criteria.)
.Sp
\&\f(CW\*(C`base\*(C'\fR no longer internally skips loading modules it has already loaded
and instead relies on \f(CW\*(C`require\*(C'\fR to inspect \f(CW%INC\fR.  This fixes a bug
when \f(CW\*(C`base\*(C'\fR is used with code that clear \f(CW%INC\fR to force a module to
be reloaded.
.IP "\(bu" 4
Carp has been upgraded from version 1.20 to 1.26.
.Sp
It now includes last read filehandle info and puts a dot after the file
and line number, just like errors from \f(CW\*(C`die\*(C'\fR [perl #106538].
.IP "\(bu" 4
charnames has been updated from version 1.18 to 1.30.
.Sp
\&\f(CW\*(C`charnames\*(C'\fR can now be invoked with a new option, \f(CW\*(C`:loose\*(C'\fR,
which is like the existing \f(CW\*(C`:full\*(C'\fR option, but enables Unicode loose
name matching.  Details are in \*(L"\s-1LOOSE\s0 \s-1MATCHES\s0\*(R" in charnames.
.IP "\(bu" 4
B::Deparse has been upgraded from version 1.03 to 1.14.  This fixes
numerous deparsing bugs.
.IP "\(bu" 4
\&\s-1CGI\s0 has been upgraded from version 3.52 to 3.59.
.Sp
It uses the public and documented \s-1FCGI\s0.pm \s-1API\s0 in CGI::Fast.  CGI::Fast was
using an \s-1FCGI\s0 \s-1API\s0 that was deprecated and removed from documentation
more than ten years ago.  Usage of this deprecated \s-1API\s0 with \s-1FCGI\s0 >=
0.70 or \s-1FCGI\s0 <= 0.73 introduces a security issue.
<https://rt.cpan.org/Public/Bug/Display.html?id=68380>
http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE\-2011\-2766 <http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2011-2766>
.Sp
Things that may break your code:
.Sp
\&\f(CW\*(C`url()\*(C'\fR was fixed to return \f(CW\*(C`PATH_INFO\*(C'\fR when it is explicitly requested
with either the \f(CW\*(C`path=>1\*(C'\fR or \f(CW\*(C`path_info=>1\*(C'\fR flag.
.Sp
If your code is running under mod_rewrite (or compatible) and you are
calling \f(CW\*(C`self_url()\*(C'\fR or you are calling \f(CW\*(C`url()\*(C'\fR and passing
\&\f(CW\*(C`path_info=>1\*(C'\fR, these methods will actually be returning
\&\f(CW\*(C`PATH_INFO\*(C'\fR now, as you have explicitly requested or \f(CW\*(C`self_url()\*(C'\fR
has requested on your behalf.
.Sp
The \f(CW\*(C`PATH_INFO\*(C'\fR has been omitted in such URLs since the issue was
introduced in the 3.12 release in December, 2005.
.Sp
This bug is so old your application may have come to depend on it or
workaround it. Check for application before upgrading to this release.
.Sp
Examples of affected method calls:
.Sp
.Vb 5
\&  $q\->url(\-absolute => 1, \-query => 1, \-path_info => 1);
\&  $q\->url(\-path=>1);
\&  $q\->url(\-full=>1,\-path=>1);
\&  $q\->url(\-rewrite=>1,\-path=>1);
\&  $q\->self_url();
.Ve
.Sp
We no longer read from \s-1STDIN\s0 when the Content-Length is not set,
preventing requests with no Content-Length from sometimes freezing.
This is consistent with the \s-1CGI\s0 \s-1RFC\s0 3875, and is also consistent with
CGI::Simple.  However, the old behavior may have been expected by some
command-line uses of \s-1CGI\s0.pm.
.Sp
In addition, the \s-1DELETE\s0 \s-1HTTP\s0 verb is now supported.
.IP "\(bu" 4
Compress::Zlib has been upgraded from version 2.035 to 2.048.
.Sp
IO::Compress::Zip and IO::Uncompress::Unzip now have support for \s-1LZMA\s0
(method 14).  There is a fix for a \s-1CRC\s0 issue in IO::Compress::Unzip and
it supports Streamed Stored context now.  And fixed a Zip64 issue in
IO::Compress::Zip when the content size was exactly 0xFFFFFFFF.
.IP "\(bu" 4
Digest::SHA has been upgraded from version 5.61 to 5.71.
.Sp
Added \s-1BITS\s0 mode to the addfile method and shasum.  This makes
partial-byte inputs possible via files/STDIN and lets shasum check
all 8074 \s-1NIST\s0 Msg vectors, where previously special programming was
required to do this.
.IP "\(bu" 4
Encode has been upgraded from version 2.42 to 2.44.
.Sp
Missing aliases added, a deep recursion error fixed and various
documentation updates.
.Sp
Addressed 'decode_xs n\-byte heap\-overflow' security bug in Unicode.xs
(\s-1CVE\-2011\-2939\s0). (5.14.2)
.IP "\(bu" 4
ExtUtils::CBuilder updated from version 0.280203 to 0.280206.
.Sp
The new version appends \s-1CFLAGS\s0 and \s-1LDFLAGS\s0 to their Config.pm
counterparts.
.IP "\(bu" 4
ExtUtils::ParseXS has been upgraded from version 2.2210 to 3.16.
.Sp
Much of ExtUtils::ParseXS, the module behind the \s-1XS\s0 compiler \f(CW\*(C`xsubpp\*(C'\fR,
was rewritten and cleaned up.  It has been made somewhat more extensible
and now finally uses strictures.
.Sp
The typemap logic has been moved into a separate module,
ExtUtils::Typemaps.  See \*(L"New Modules and Pragmata\*(R", above.
.Sp
For a complete set of changes, please see the ExtUtils::ParseXS
changelog, available on the \s-1CPAN\s0.
.IP "\(bu" 4
File::Glob has been upgraded from version 1.12 to 1.17.
.Sp
On Windows, tilde (~) expansion now checks the \f(CW\*(C`USERPROFILE\*(C'\fR environment
variable, after checking \f(CW\*(C`HOME\*(C'\fR.
.Sp
It has a new \f(CW\*(C`:bsd_glob\*(C'\fR export tag, intended to replace \f(CW\*(C`:glob\*(C'\fR.  Like
\&\f(CW\*(C`:glob\*(C'\fR it overrides \f(CW\*(C`glob\*(C'\fR with a function that does not split the glob
pattern into words, but, unlike \f(CW\*(C`:glob\*(C'\fR, it iterates properly in scalar
context, instead of returning the last file.
.Sp
There are other changes affecting Perl's own \f(CW\*(C`glob\*(C'\fR operator (which uses
File::Glob internally, except on \s-1VMS\s0).  See \*(L"Performance Enhancements\*(R"
and \*(L"Selected Bug Fixes\*(R".
.IP "\(bu" 4
FindBin updated from version 1.50 to 1.51.
.Sp
It no longer returns a wrong result if a script of the same name as the
current one exists in the path and is executable.
.IP "\(bu" 4
HTTP::Tiny has been upgraded from version 0.012 to 0.017.
.Sp
Added support for using \f(CW$ENV{http_proxy}\fR to set the default proxy host.
.Sp
Adds additional shorthand methods for all common \s-1HTTP\s0 verbs,
a \f(CW\*(C`post_form()\*(C'\fR method for POST-ing x\-www-form-urlencoded data and
a \f(CW\*(C`www_form_urlencode()\*(C'\fR utility method.
.IP "\(bu" 4
\&\s-1IO\s0 has been upgraded from version 1.25_04 to 1.25_06, and IO::Handle
from version 1.31 to 1.33.
.Sp
Together, these upgrades fix a problem with IO::Handle's \f(CW\*(C`getline\*(C'\fR and
\&\f(CW\*(C`getlines\*(C'\fR methods.  When these methods are called on the special \s-1ARGV\s0
handle, the next file is automatically opened, as happens with the built-in
\&\f(CW\*(C`<>\*(C'\fR and \f(CW\*(C`readline\*(C'\fR functions.  But, unlike the built-ins, these
methods were not respecting the caller's use of the open pragma and
applying the appropriate I/O layers to the newly-opened file
[rt.cpan.org #66474].
.IP "\(bu" 4
IPC::Cmd has been upgraded from version 0.70 to 0.76.
.Sp
Capturing of command output (both \f(CW\*(C`STDOUT\*(C'\fR and \f(CW\*(C`STDERR\*(C'\fR) is now supported
using IPC::Open3 on MSWin32 without requiring IPC::Run.
.IP "\(bu" 4
IPC::Open3 has been upgraded from version 1.09 to 1.12.
.Sp
Fixes a bug which prevented use of \f(CW\*(C`open3\*(C'\fR on Windows when \f(CW*STDIN\fR,
\&\f(CW*STDOUT\fR or \f(CW*STDERR\fR had been localized.
.Sp
Fixes a bug which prevented duplicating numeric file descriptors on Windows.
.Sp
\&\f(CW\*(C`open3\*(C'\fR with \*(L"\-\*(R" for the program name works once more.  This was broken in
version 1.06 (and hence in Perl 5.14.0) [perl #95748].
.IP "\(bu" 4
Locale::Codes has been upgraded from version 3.16 to 3.21.
.Sp
Added Language Extension codes (langext) and Language Variation codes (langvar)
as defined in the \s-1IANA\s0 language registry.
.Sp
Added language codes from \s-1ISO\s0 639\-5
.Sp
Added language/script codes from the \s-1IANA\s0 language subtag registry
.Sp
Fixed an uninitialized value warning [rt.cpan.org #67438].
.Sp
Fixed the return value for the all_XXX_codes and all_XXX_names functions
[rt.cpan.org #69100].
.Sp
Reorganized modules to move Locale::MODULE to Locale::Codes::MODULE to allow
for cleaner future additions.  The original four modules (Locale::Language,
Locale::Currency, Locale::Country, Locale::Script) will continue to work, but
all new sets of codes will be added in the Locale::Codes namespace.
.Sp
The code2XXX, XXX2code, all_XXX_codes, and all_XXX_names functions now
support retired codes.  All codesets may be specified by a constant or
by their name now.  Previously, they were specified only by a constant.
.Sp
The alias_code function exists for backward compatibility.  It has been
replaced by rename_country_code.  The alias_code function will be
removed some time after September, 2013.
.Sp
All work is now done in the central module (Locale::Codes).  Previously,
some was still done in the wrapper modules (Locale::Codes::*).  Added
Language Family codes (langfam) as defined in \s-1ISO\s0 639\-5.
.IP "\(bu" 4
Math::BigFloat has been upgraded from version 1.993 to 1.997.
.Sp
The \f(CW\*(C`numify\*(C'\fR method has been corrected to return a normalized Perl number
(the result of \f(CW\*(C`0 + $thing\*(C'\fR), instead of a string [rt.cpan.org #66732].
.IP "\(bu" 4
Math::BigInt has been upgraded from version 1.994 to 1.998.
.Sp
It provides a new \f(CW\*(C`bsgn\*(C'\fR method that complements the \f(CW\*(C`babs\*(C'\fR method.
.Sp
It fixes the internal \f(CW\*(C`objectify\*(C'\fR function's handling of \*(L"foreign objects\*(R"
so they are converted to the appropriate class (Math::BigInt or
Math::BigFloat).
.IP "\(bu" 4
Math::BigRat has been upgraded from version 0.2602 to 0.2603.
.Sp
\&\f(CW\*(C`int()\*(C'\fR on a Math::BigRat object containing \-1/2 now creates a
Math::BigInt containing 0, rather than \-0.  Math::BigInt does not even
support negative zero, so the resulting object was actually malformed
[perl #95530].
.IP "\(bu" 4
Math::Complex has been upgraded from version 1.56 to 1.59
and Math::Trig from version 1.2 to 1.22.
.Sp
Fixes include: correct copy constructor usage; fix polarwise formatting with
numeric format specifier; and more stable \f(CW\*(C`great_circle_direction\*(C'\fR algorithm.
.IP "\(bu" 4
Module::CoreList has been upgraded from version 2.51 to 2.66.
.Sp
The \f(CW\*(C`corelist\*(C'\fR utility now understands the \f(CW\*(C`\-r\*(C'\fR option for displaying
Perl release dates and the \f(CW\*(C`\-\-diff\*(C'\fR option to print the set of modlib
changes between two perl distributions.
.IP "\(bu" 4
Module::Metadata has been upgraded from version 1.000004 to 1.000009.
.Sp
Adds \f(CW\*(C`provides\*(C'\fR method to generate a \s-1CPAN\s0 \s-1META\s0 provides data structure
correctly; use of \f(CW\*(C`package_versions_from_directory\*(C'\fR is discouraged.
.IP "\(bu" 4
ODBM_File has been upgraded from version 1.10 to 1.12.
.Sp
The \s-1XS\s0 code is now compiled with \f(CW\*(C`PERL_NO_GET_CONTEXT\*(C'\fR, which will aid
performance under ithreads.
.IP "\(bu" 4
open has been upgraded from version 1.08 to 1.10.
.Sp
It no longer turns off layers on standard handles when invoked without the
\&\*(L":std\*(R" directive.  Similarly, when invoked \fIwith\fR the \*(L":std\*(R" directive, it
now clears layers on \s-1STDERR\s0 before applying the new ones, and not just on
\&\s-1STDIN\s0 and \s-1STDOUT\s0 [perl #92728].
.IP "\(bu" 4
overload has been upgraded from version 1.13 to 1.18.
.Sp
\&\f(CW\*(C`overload::Overloaded\*(C'\fR no longer calls \f(CW\*(C`can\*(C'\fR on the class, but uses
another means to determine whether the object has overloading.  It was
never correct for it to call \f(CW\*(C`can\*(C'\fR, as overloading does not respect
\&\s-1AUTOLOAD\s0.  So classes that autoload methods and implement \f(CW\*(C`can\*(C'\fR no longer
have to account for overloading [perl #40333].
.Sp
A warning is now produced for invalid arguments.  See \*(L"New Diagnostics\*(R".
.IP "\(bu" 4
PerlIO::scalar has been upgraded from version 0.11 to 0.14.
.Sp
(This is the module that implements \f(CW\*(C`open $fh, \*(Aq>\*(Aq, \e$scalar\*(C'\fR.)
.Sp
It fixes a problem with \f(CW\*(C`open my $fh, ">", \e$scalar\*(C'\fR not working if
\&\f(CW$scalar\fR is a copy-on-write scalar. (5.14.2)
.Sp
It also fixes a hang that occurs with \f(CW\*(C`readline\*(C'\fR or \f(CW\*(C`<$fh>\*(C'\fR if a
typeglob has been assigned to \f(CW$scalar\fR [perl #92258].
.Sp
It no longer assumes during \f(CW\*(C`seek\*(C'\fR that \f(CW$scalar\fR is a string internally.
If it didn't crash, it was close to doing so [perl #92706].  Also, the
internal print routine no longer assumes that the position set by \f(CW\*(C`seek\*(C'\fR
is valid, but extends the string to that position, filling the intervening
bytes (between the old length and the seek position) with nulls
[perl #78980].
.Sp
Printing to an in-memory handle now works if the \f(CW$scalar\fR holds a reference,
stringifying the reference before modifying it.  References used to be
treated as empty strings.
.Sp
Printing to an in-memory handle no longer crashes if the \f(CW$scalar\fR happens to
hold a number internally, but no string buffer.
.Sp
Printing to an in-memory handle no longer creates scalars that confuse
the regular expression engine [perl #108398].
.IP "\(bu" 4
Pod::Functions has been upgraded from version 1.04 to 1.05.
.Sp
\&\fIFunctions.pm\fR is now generated at perl build time from annotations in
\&\fIperlfunc.pod\fR.  This will ensure that Pod::Functions and perlfunc
remain in synchronisation.
.IP "\(bu" 4
Pod::Html has been upgraded from version 1.11 to 1.1502.
.Sp
This is an extensive rewrite of Pod::Html to use Pod::Simple under
the hood.  The output has changed significantly.
.IP "\(bu" 4
Pod::Perldoc has been upgraded from version 3.15_03 to 3.17.
.Sp
It corrects the search paths on \s-1VMS\s0 [perl #90640]. (5.14.1)
.Sp
The \fB\-v\fR option now fetches the right section for \f(CW$0\fR.
.Sp
This upgrade has numerous significant fixes.  Consult its changelog on
the \s-1CPAN\s0 for more information.
.IP "\(bu" 4
\&\s-1POSIX\s0 has been upgraded from version 1.24 to 1.30.
.Sp
\&\s-1POSIX\s0 no longer uses AutoLoader.  Any code which was relying on this
implementation detail was buggy, and may fail because of this change.
The module's Perl code has been considerably simplified, roughly halving
the number of lines, with no change in functionality.  The \s-1XS\s0 code has
been refactored to reduce the size of the shared object by about 12%,
with no change in functionality.  More \s-1POSIX\s0 functions now have tests.
.Sp
\&\f(CW\*(C`sigsuspend\*(C'\fR and \f(CW\*(C`pause\*(C'\fR now run signal handlers before returning, as the
whole point of these two functions is to wait until a signal has
arrived, and then return \fIafter\fR it has been triggered.  Delayed, or
\&\*(L"safe\*(R", signals were preventing that from happening, possibly resulting in
race conditions [perl #107216].
.Sp
\&\f(CW\*(C`POSIX::sleep\*(C'\fR is now a direct call into the underlying \s-1OS\s0 \f(CW\*(C`sleep\*(C'\fR
function, instead of being a Perl wrapper on \f(CW\*(C`CORE::sleep\*(C'\fR.
\&\f(CW\*(C`POSIX::dup2\*(C'\fR now returns the correct value on Win32 (\fIi.e.\fR, the file
descriptor).  \f(CW\*(C`POSIX::SigSet\*(C'\fR \f(CW\*(C`sigsuspend\*(C'\fR and \f(CW\*(C`sigpending\*(C'\fR and
\&\f(CW\*(C`POSIX::pause\*(C'\fR now dispatch safe signals immediately before returning to
their caller.
.Sp
\&\f(CW\*(C`POSIX::Termios::setattr\*(C'\fR now defaults the third argument to \f(CW\*(C`TCSANOW\*(C'\fR,
instead of 0. On most platforms \f(CW\*(C`TCSANOW\*(C'\fR is defined to be 0, but on some
0 is not a valid parameter, which caused a call with defaults to fail.
.IP "\(bu" 4
Socket has been upgraded from version 1.94 to 2.001.
.Sp
It has new functions and constants for handling IPv6 sockets:
.Sp
.Vb 11
\&    pack_ipv6_mreq
\&    unpack_ipv6_mreq
\&    IPV6_ADD_MEMBERSHIP
\&    IPV6_DROP_MEMBERSHIP
\&    IPV6_MTU
\&    IPV6_MTU_DISCOVER
\&    IPV6_MULTICAST_HOPS
\&    IPV6_MULTICAST_IF
\&    IPV6_MULTICAST_LOOP
\&    IPV6_UNICAST_HOPS
\&    IPV6_V6ONLY
.Ve
.IP "\(bu" 4
Storable has been upgraded from version 2.27 to 2.34.
.Sp
It no longer turns copy-on-write scalars into read-only scalars when
freezing and thawing.
.IP "\(bu" 4
Sys::Syslog has been upgraded from version 0.27 to 0.29.
.Sp
This upgrade closes many outstanding bugs.
.IP "\(bu" 4
Term::ANSIColor has been upgraded from version 3.00 to 3.01.
.Sp
Only interpret an initial array reference as a list of colors, not any initial
reference, allowing the colored function to work properly on objects with
stringification defined.
.IP "\(bu" 4
Term::ReadLine has been upgraded from version 1.07 to 1.09.
.Sp
Term::ReadLine now supports any event loop, including unpublished ones and
simple IO::Select, loops without the need to rewrite existing code for
any particular framework [perl #108470].
.IP "\(bu" 4
threads::shared has been upgraded from version 1.37 to 1.40.
.Sp
Destructors on shared objects used to be ignored sometimes if the objects
were referenced only by shared data structures.  This has been mostly
fixed, but destructors may still be ignored if the objects still exist at
global destruction time [perl #98204].
.IP "\(bu" 4
Unicode::Collate has been upgraded from version 0.73 to 0.89.
.Sp
Updated to \s-1CLDR\s0 1.9.1
.Sp
Locales updated to \s-1CLDR\s0 2.0: mk, mt, nb, nn, ro, ru, sk, sr, sv, uk,
zh_\|_pinyin, zh_\|_stroke
.Sp
Newly supported locales: bn, fa, ml, mr, or, pa, sa, si, si_\|_dictionary,
sr_Latn, sv_\|_reformed, ta, te, th, ur, wae.
.Sp
Tailored compatibility ideographs as well as unified ideographs for the
locales: ja, ko, zh_\|_big5han, zh_\|_gb2312han, zh_\|_pinyin, zh_\|_stroke.
.Sp
Locale/*.pl files are now searched for in \f(CW@INC\fR.
.IP "\(bu" 4
Unicode::Normalize has been upgraded from version 1.10 to 1.14.
.Sp
Fixes for the removal of \fIunicore/CompositionExclusions.txt\fR from core.
.IP "\(bu" 4
Unicode::UCD has been upgraded from version 0.32 to 0.43.
.Sp
This adds four new functions:  \f(CW\*(C`prop_aliases()\*(C'\fR and
\&\f(CW\*(C`prop_value_aliases()\*(C'\fR, which are used to find all Unicode-approved
synonyms for property names, or to convert from one name to another;
\&\f(CW\*(C`prop_invlist\*(C'\fR which returns all code points matching a given
Unicode binary property; and \f(CW\*(C`prop_invmap\*(C'\fR which returns the complete
specification of a given Unicode property.
.IP "\(bu" 4
Win32API::File has been upgraded from version 0.1101 to 0.1200.
.Sp
Added SetStdHandle and GetStdHandle functions
.SS "Removed Modules and Pragmata"
.IX Subsection "Removed Modules and Pragmata"
As promised in Perl 5.14.0's release notes, the following modules have
been removed from the core distribution, and if needed should be installed
from \s-1CPAN\s0 instead.
.IP "\(bu" 4
Devel::DProf has been removed from the Perl core.  Prior version was
20110228.00.
.IP "\(bu" 4
Shell has been removed from the Perl core.  Prior version was 0.72_01.
.IP "\(bu" 4
Several old perl4\-style libraries which have been deprecated with 5.14
are now removed:
.Sp
.Vb 5
\&    abbrev.pl assert.pl bigfloat.pl bigint.pl bigrat.pl cacheout.pl
\&    complete.pl ctime.pl dotsh.pl exceptions.pl fastcwd.pl flush.pl
\&    getcwd.pl getopt.pl getopts.pl hostname.pl importenv.pl
\&    lib/find{,depth}.pl look.pl newgetopt.pl open2.pl open3.pl
\&    pwd.pl shellwords.pl stat.pl tainted.pl termcap.pl timelocal.pl
.Ve
.Sp
They can be found on \s-1CPAN\s0 as Perl4::CoreLibs.
.SH "Documentation"
.IX Header "Documentation"
.SS "New Documentation"
.IX Subsection "New Documentation"
\fIperldtrace\fR
.IX Subsection "perldtrace"
.PP
perldtrace describes Perl's DTrace support, listing the provided probes
and gives examples of their use.
.PP
\fIperlexperiment\fR
.IX Subsection "perlexperiment"
.PP
This document is intended to provide a list of experimental features in
Perl.  It is still a work in progress.
.PP
\fIperlootut\fR
.IX Subsection "perlootut"
.PP
This a new \s-1OO\s0 tutorial.  It focuses on basic \s-1OO\s0 concepts, and then recommends
that readers choose an \s-1OO\s0 framework from \s-1CPAN\s0.
.PP
\fIperlxstypemap\fR
.IX Subsection "perlxstypemap"
.PP
The new manual describes the \s-1XS\s0 typemapping mechanism in unprecedented
detail and combines new documentation with information extracted from
perlxs and the previously unofficial list of all core typemaps.
.SS "Changes to Existing Documentation"
.IX Subsection "Changes to Existing Documentation"
\fIperlapi\fR
.IX Subsection "perlapi"
.IP "\(bu" 4
The \s-1HV\s0 \s-1API\s0 has long accepted negative lengths to show that the key is
in \s-1UTF8\s0.  This is now documented.
.IP "\(bu" 4
The \f(CW\*(C`boolSV()\*(C'\fR macro is now documented.
.PP
\fIperlfunc\fR
.IX Subsection "perlfunc"
.IP "\(bu" 4
\&\f(CW\*(C`dbmopen\*(C'\fR treats a 0 mode as a special case, that prevents a nonexistent
file from being created.  This has been the case since Perl 5.000, but was
never documented anywhere.  Now the perlfunc entry mentions it
[perl #90064].
.IP "\(bu" 4
As an accident of history, \f(CW\*(C`open $fh, \*(Aq<:\*(Aq, ...\*(C'\fR applies the default
layers for the platform (\f(CW\*(C`:raw\*(C'\fR on Unix, \f(CW\*(C`:crlf\*(C'\fR on Windows), ignoring
whatever is declared by open.pm.  This seems such a useful feature
it has been documented in perlfunc and open.
.IP "\(bu" 4
The entry for \f(CW\*(C`split\*(C'\fR has been rewritten.  It is now far clearer than
before.
.PP
\fIperlguts\fR
.IX Subsection "perlguts"
.IP "\(bu" 4
A new section, Autoloading with XSUBs,
has been added, which explains the two APIs for accessing the name of the
autoloaded sub.
.IP "\(bu" 4
Some function descriptions in perlguts were confusing, as it was
not clear whether they referred to the function above or below the
description.  This has been clarified [perl #91790].
.PP
\fIperlobj\fR
.IX Subsection "perlobj"
.IP "\(bu" 4
This document has been rewritten from scratch, and its coverage of various \s-1OO\s0
concepts has been expanded.
.PP
\fIperlop\fR
.IX Subsection "perlop"
.IP "\(bu" 4
Documentation of the smartmatch operator has been reworked and moved from
perlsyn to perlop where it belongs.
.Sp
It has also been corrected for the case of \f(CW\*(C`undef\*(C'\fR on the left-hand
side.  The list of different smart match behaviors had an item in the
wrong place.
.IP "\(bu" 4
Documentation of the ellipsis statement (\f(CW\*(C`...\*(C'\fR) has been reworked and
moved from perlop to perlsyn.
.IP "\(bu" 4
The explanation of bitwise operators has been expanded to explain how they
work on Unicode strings (5.14.1).
.IP "\(bu" 4
More examples for \f(CW\*(C`m//g\*(C'\fR have been added (5.14.1).
.IP "\(bu" 4
The \f(CW\*(C`<<\eFOO\*(C'\fR here-doc syntax has been documented (5.14.1).
.PP
\fIperlpragma\fR
.IX Subsection "perlpragma"
.IP "\(bu" 4
There is now a standard convention for naming keys in the \f(CW\*(C`%^H\*(C'\fR,
documented under Key naming.
.PP
\fI\*(L"Laundering and Detecting Tainted Data\*(R" in perlsec\fR
.IX Subsection "Laundering and Detecting Tainted Data in perlsec"
.IP "\(bu" 4
The example function for checking for taintedness contained a subtle
error.  \f(CW$@\fR needs to be localized to prevent its changing this
global's value outside the function.  The preferred method to check for
this remains \*(L"tainted\*(R" in Scalar::Util.
.PP
\fIperllol\fR
.IX Subsection "perllol"
.IP "\(bu" 4
perllol has been expanded with examples using the new \f(CW\*(C`push $scalar\*(C'\fR
syntax introduced in Perl 5.14.0 (5.14.1).
.PP
\fIperlmod\fR
.IX Subsection "perlmod"
.IP "\(bu" 4
perlmod now states explicitly that some types of explicit symbol table
manipulation are not supported.  This codifies what was effectively already
the case [perl #78074].
.PP
\fIperlpodstyle\fR
.IX Subsection "perlpodstyle"
.IP "\(bu" 4
The tips on which formatting codes to use have been corrected and greatly
expanded.
.IP "\(bu" 4
There are now a couple of example one-liners for previewing \s-1POD\s0 files after
they have been edited.
.PP
\fIperlre\fR
.IX Subsection "perlre"
.IP "\(bu" 4
The \f(CW\*(C`(*COMMIT)\*(C'\fR directive is now listed in the right section
(Verbs without an argument).
.PP
\fIperlrun\fR
.IX Subsection "perlrun"
.IP "\(bu" 4
perlrun has undergone a significant clean-up.  Most notably, the
\&\fB\-0x...\fR form of the \fB\-0\fR flag has been clarified, and the final section
on environment variables has been corrected and expanded (5.14.1).
.PP
\fIperlsub\fR
.IX Subsection "perlsub"
.IP "\(bu" 4
The ($;) prototype syntax, which has existed for rather a long time, is now
documented in perlsub.  It lets a unary function have the same
precedence as a list operator.
.PP
\fIperltie\fR
.IX Subsection "perltie"
.IP "\(bu" 4
The required syntax for tying handles has been documented.
.PP
\fIperlvar\fR
.IX Subsection "perlvar"
.IP "\(bu" 4
The documentation for $! has been corrected and clarified.
It used to state that $! could be \f(CW\*(C`undef\*(C'\fR, which is not the case.  It was
also unclear whether system calls set C's \f(CW\*(C`errno\*(C'\fR or Perl's \f(CW$!\fR
[perl #91614].
.IP "\(bu" 4
Documentation for $$ has been amended with additional
cautions regarding changing the process \s-1ID\s0.
.PP
\fIOther Changes\fR
.IX Subsection "Other Changes"
.IP "\(bu" 4
perlxs was extended with documentation on inline typemaps.
.IP "\(bu" 4
perlref has a new Circular References
section explaining how circularities may not be freed and how to solve that
with weak references.
.IP "\(bu" 4
Parts of perlapi were clarified, and Perl equivalents of some C
functions have been added as an additional mode of exposition.
.IP "\(bu" 4
A few parts of perlre and perlrecharclass were clarified.
.SS "Removed Documentation"
.IX Subsection "Removed Documentation"
\fIOld \s-1OO\s0 Documentation\fR
.IX Subsection "Old OO Documentation"
.PP
The old \s-1OO\s0 tutorials, perltoot, perltooc, and perlboot, have been
removed.  The perlbot (bag of object tricks) document has been removed
as well.
.PP
\fIDevelopment Deltas\fR
.IX Subsection "Development Deltas"
.PP
The perldelta files for development releases are no longer packaged with
perl.  These can still be found in the perl source code repository.
.SH "Diagnostics"
.IX Header "Diagnostics"
The following additions or changes have been made to diagnostic output,
including warnings and fatal error messages.  For the complete list of
diagnostic messages, see perldiag.
.SS "New Diagnostics"
.IX Subsection "New Diagnostics"
\fINew Errors\fR
.IX Subsection "New Errors"
.IP "\(bu" 4
Cannot set tied \f(CW@DB::args\fR
.Sp
This error occurs when \f(CW\*(C`caller\*(C'\fR tries to set \f(CW@DB::args\fR but finds it
tied.  Before this error was added, it used to crash instead.
.IP "\(bu" 4
Cannot tie unreifiable array
.Sp
This error is part of a safety check that the \f(CW\*(C`tie\*(C'\fR operator does before
tying a special array like \f(CW@_\fR.  You should never see this message.
.IP "\(bu" 4
&CORE::%s cannot be called directly
.Sp
This occurs when a subroutine in the \f(CW\*(C`CORE::\*(C'\fR namespace is called
with \f(CW&foo\fR syntax or through a reference.  Some subroutines
in this package cannot yet be called that way, but must be
called as barewords.  See "Subroutines in the \f(CW\*(C`CORE\*(C'\fR namespace", above.
.IP "\(bu" 4
Source filters apply only to byte streams
.Sp
This new error occurs when you try to activate a source filter (usually by
loading a source filter module) within a string passed to \f(CW\*(C`eval\*(C'\fR under the
\&\f(CW\*(C`unicode_eval\*(C'\fR feature.
.PP
\fINew Warnings\fR
.IX Subsection "New Warnings"
.IP "\(bu" 4
defined(@array) is deprecated
.Sp
The long-deprecated \f(CW\*(C`defined(@array)\*(C'\fR now also warns for package variables.
Previously it issued a warning for lexical variables only.
.IP "\(bu" 4
\&\fIlength()\fR used on \f(CW%s\fR
.Sp
This new warning occurs when \f(CW\*(C`length\*(C'\fR is used on an array or hash, instead
of \f(CW\*(C`scalar(@array)\*(C'\fR or \f(CW\*(C`scalar(keys %hash)\*(C'\fR.
.IP "\(bu" 4
lvalue attribute \f(CW%s\fR already-defined subroutine
.Sp
attributes.pm now emits this warning when the :lvalue
attribute is applied to a Perl subroutine that has already been defined, as
doing so can have unexpected side-effects.
.IP "\(bu" 4
overload arg '%s' is invalid
.Sp
This warning, in the \*(L"overload\*(R" category, is produced when the overload
pragma is given an argument it doesn't recognize, presumably a mistyped
operator.
.IP "\(bu" 4
$[ used in \f(CW%s\fR (did you mean $] ?)
.Sp
This new warning exists to catch the mistaken use of \f(CW$[\fR in version
checks.  \f(CW$]\fR, not \f(CW$[\fR, contains the version number.
.IP "\(bu" 4
Useless assignment to a temporary
.Sp
Assigning to a temporary scalar returned
from an lvalue subroutine now produces this
warning [perl #31946].
.IP "\(bu" 4
Useless use of \eE
.Sp
\&\f(CW\*(C`\eE\*(C'\fR does nothing unless preceded by \f(CW\*(C`\eQ\*(C'\fR, \f(CW\*(C`\eL\*(C'\fR or \f(CW\*(C`\eU\*(C'\fR.
.SS "Removed Errors"
.IX Subsection "Removed Errors"
.IP "\(bu" 4
\&\*(L"sort is now a reserved word\*(R"
.Sp
This error used to occur when \f(CW\*(C`sort\*(C'\fR was called without arguments,
followed by \f(CW\*(C`;\*(C'\fR or \f(CW\*(C`)\*(C'\fR.  (E.g., \f(CW\*(C`sort;\*(C'\fR would die, but \f(CW\*(C`{sort}\*(C'\fR was
\&\s-1OK\s0.)  This error message was added in Perl 3 to catch code like
\&\f(CW\*(C`close(sort)\*(C'\fR which would no longer work.  More than two decades later,
this message is no longer appropriate.  Now \f(CW\*(C`sort\*(C'\fR without arguments is
always allowed, and returns an empty list, as it did in those cases
where it was already allowed [perl #90030].
.SS "Changes to Existing Diagnostics"
.IX Subsection "Changes to Existing Diagnostics"
.IP "\(bu" 4
The \*(L"Applying pattern match...\*(R" or similar warning produced when an
array or hash is on the left-hand side of the \f(CW\*(C`=~\*(C'\fR operator now
mentions the name of the variable.
.IP "\(bu" 4
The \*(L"Attempt to free non-existent shared string\*(R" has had the spelling
of \*(L"non-existent\*(R" corrected to \*(L"nonexistent\*(R".  It was already listed
with the correct spelling in perldiag.
.IP "\(bu" 4
The error messages for using \f(CW\*(C`default\*(C'\fR and \f(CW\*(C`when\*(C'\fR outside a
topicalizer have been standardized to match the messages for \f(CW\*(C`continue\*(C'\fR
and loop controls.  They now read 'Can't \*(L"default\*(R" outside a
topicalizer' and 'Can't \*(L"when\*(R" outside a topicalizer'.  They both used
to be 'Can't use \fIwhen()\fR outside a topicalizer' [perl #91514].
.IP "\(bu" 4
The message, \*(L"Code point 0x%X is not Unicode, no properties match it;
all inverse properties do\*(R" has been changed to \*(L"Code point 0x%X is not
Unicode, all \ep{} matches fail; all \eP{} matches succeed\*(R".
.IP "\(bu" 4
Redefinition warnings for constant subroutines used to be mandatory,
even occurring under \f(CW\*(C`no warnings\*(C'\fR.  Now they respect the warnings
pragma.
.IP "\(bu" 4
The \*(L"glob failed\*(R" warning message is now suppressible via \f(CW\*(C`no warnings\*(C'\fR
[perl #111656].
.IP "\(bu" 4
The Invalid version format
error message now says \*(L"negative version number\*(R" within the parentheses,
rather than \*(L"non-numeric data\*(R", for negative numbers.
.IP "\(bu" 4
The two warnings
Possible attempt to put comments in \fIqw()\fR list
and
Possible attempt to separate words with commas
are no longer mutually exclusive: the same \f(CW\*(C`qw\*(C'\fR construct may produce
both.
.IP "\(bu" 4
The uninitialized warning for \f(CW\*(C`y///r\*(C'\fR when \f(CW$_\fR is implicit and
undefined now mentions the variable name, just like the non\-/r variation
of the operator.
.IP "\(bu" 4
The 'Use of \*(L"foo\*(R" without parentheses is ambiguous' warning has been
extended to apply also to user-defined subroutines with a (;$)
prototype, and not just to built-in functions.
.IP "\(bu" 4
Warnings that mention the names of lexical (\f(CW\*(C`my\*(C'\fR) variables with
Unicode characters in them now respect the presence or absence of the
\&\f(CW\*(C`:utf8\*(C'\fR layer on the output handle, instead of outputting \s-1UTF8\s0
regardless.  Also, the correct names are included in the strings passed
to \f(CW$SIG{_\|_WARN_\|_}\fR handlers, rather than the raw \s-1UTF8\s0 bytes.
.SH "Utility Changes"
.IX Header "Utility Changes"
\fIh2ph\fR
.IX Subsection "h2ph"
.IP "\(bu" 4
h2ph used to generate code of the form
.Sp
.Vb 3
\&  unless(defined(&FOO)) {
\&    sub FOO () {42;}
\&  }
.Ve
.Sp
But the subroutine is a compile-time declaration, and is hence unaffected
by the condition.  It has now been corrected to emit a string \f(CW\*(C`eval\*(C'\fR
around the subroutine [perl #99368].
.PP
\fIsplain\fR
.IX Subsection "splain"
.IP "\(bu" 4
\&\fIsplain\fR no longer emits backtraces with the first line number repeated.
.Sp
This:
.Sp
.Vb 6
\&    Uncaught exception from user code:
\&            Cannot fwiddle the fwuddle at \-e line 1.
\&     at \-e line 1
\&            main::baz() called at \-e line 1
\&            main::bar() called at \-e line 1
\&            main::foo() called at \-e line 1
.Ve
.Sp
has become this:
.Sp
.Vb 5
\&    Uncaught exception from user code:
\&            Cannot fwiddle the fwuddle at \-e line 1.
\&            main::baz() called at \-e line 1
\&            main::bar() called at \-e line 1
\&            main::foo() called at \-e line 1
.Ve
.IP "\(bu" 4
Some error messages consist of multiple lines that are listed as separate
entries in perldiag.  splain has been taught to find the separate
entries in these cases, instead of simply failing to find the message.
.PP
\fIzipdetails\fR
.IX Subsection "zipdetails"
.IP "\(bu" 4
This is a new utility, included as part of an
IO::Compress::Base upgrade.
.Sp
zipdetails displays information about the internal record structure
of the zip file.  It is not concerned with displaying any details of
the compressed data stored in the zip file.
.SH "Configuration and Compilation"
.IX Header "Configuration and Compilation"
.IP "\(bu" 4
\&\fIregexp.h\fR has been modified for compatibility with \s-1GCC\s0's \fB\-Werror\fR
option, as used by some projects that include perl's header files (5.14.1).
.IP "\(bu" 4
\&\f(CW\*(C`USE_LOCALE{,_COLLATE,_CTYPE,_NUMERIC}\*(C'\fR have been added the output of perl \-V
as they have affect the behavior of the interpreter binary (albeit
in only a small area).
.IP "\(bu" 4
The code and tests for IPC::Open2 have been moved from \fIext/IPC\-Open2\fR
into \fIext/IPC\-Open3\fR, as \f(CW\*(C`IPC::Open2::open2()\*(C'\fR is implemented as a thin
wrapper around \f(CW\*(C`IPC::Open3::_open3()\*(C'\fR, and hence is very tightly coupled to
it.
.IP "\(bu" 4
The magic types and magic vtables are now generated from data in a new script
\&\fIregen/mg_vtable.pl\fR, instead of being maintained by hand.  As different
\&\s-1EBCDIC\s0 variants can't agree on the code point for '~', the character to code
point conversion is done at build time by \fIgenerate_uudmap\fR to a new generated
header \fImg_data.h\fR.  \f(CW\*(C`PL_vtbl_bm\*(C'\fR and \f(CW\*(C`PL_vtbl_fm\*(C'\fR are now defined by the
pre-processor as \f(CW\*(C`PL_vtbl_regexp\*(C'\fR, instead of being distinct C variables.
\&\f(CW\*(C`PL_vtbl_sig\*(C'\fR has been removed.
.IP "\(bu" 4
Building with \f(CW\*(C`\-DPERL_GLOBAL_STRUCT\*(C'\fR works again.  This configuration is not
generally used.
.IP "\(bu" 4
Perl configured with \fI\s-1MAD\s0\fR now correctly frees \f(CW\*(C`MADPROP\*(C'\fR structures when
OPs are freed.  \f(CW\*(C`MADPROP\*(C'\fRs are now allocated with \f(CW\*(C`PerlMemShared_malloc()\*(C'\fR
.IP "\(bu" 4
\&\fImakedef.pl\fR has been refactored.  This should have no noticeable affect on
any of the platforms that use it as part of their build (\s-1AIX\s0, \s-1VMS\s0, Win32).
.IP "\(bu" 4
\&\f(CW\*(C`useperlio\*(C'\fR can no longer be disabled.
.IP "\(bu" 4
The file \fIglobal.sym\fR is no longer needed, and has been removed.  It
contained a list of all exported functions, one of the files generated by
\&\fIregen/embed.pl\fR from data in \fIembed.fnc\fR and \fIregen/opcodes\fR.  The code
has been refactored so that the only user of \fIglobal.sym\fR, \fImakedef.pl\fR,
now reads \fIembed.fnc\fR and \fIregen/opcodes\fR directly, removing the need to
store the list of exported functions in an intermediate file.
.Sp
As \fIglobal.sym\fR was never installed, this change should not be visible
outside the build process.
.IP "\(bu" 4
\&\fIpod/buildtoc\fR, used by the build process to build perltoc, has been
refactored and simplified.  It now contains only code to build perltoc;
the code to regenerate Makefiles has been moved to \fIPorting/pod_rules.pl\fR.
It's a bug if this change has any material effect on the build process.
.IP "\(bu" 4
\&\fIpod/roffitall\fR is now built by \fIpod/buildtoc\fR, instead of being
shipped with the distribution.  Its list of manpages is now generated
(and therefore current).  See also \s-1RT\s0 #103202 for an unresolved related
issue.
.IP "\(bu" 4
The man page for \f(CW\*(C`XS::Typemap\*(C'\fR is no longer installed.  \f(CW\*(C`XS::Typemap\*(C'\fR
is a test module which is not installed, hence installing its
documentation makes no sense.
.IP "\(bu" 4
The \-Dusesitecustomize and \-Duserelocatableinc options now work
together properly.
.SH "Platform Support"
.IX Header "Platform Support"
.SS "Platform-Specific Notes"
.IX Subsection "Platform-Specific Notes"
\fICygwin\fR
.IX Subsection "Cygwin"
.IP "\(bu" 4
Since version 1.7, Cygwin supports native \s-1UTF\-8\s0 paths.  If Perl is built
under that environment, directory and filenames will be \s-1UTF\-8\s0 encoded.
.IP "\(bu" 4
Cygwin does not initialize all original Win32 environment variables.  See
\&\fI\s-1README\s0.cygwin\fR for a discussion of the newly-added
\&\f(CW\*(C`Cygwin::sync_winenv()\*(C'\fR function [perl #110190] and for
further links.
.PP
\fIHP-UX\fR
.IX Subsection "HP-UX"
.IP "\(bu" 4
HP-UX \s-1PA\-RISC/64\s0 now supports gcc\-4.x
.Sp
A fix to correct the socketsize now makes the test suite pass on HP-UX
PA-RISC for 64bitall builds. (5.14.2)
.PP
\fI\s-1VMS\s0\fR
.IX Subsection "VMS"
.IP "\(bu" 4
Remove unnecessary includes, fix miscellaneous compiler warnings and
close some unclosed comments on \fIvms/vms.c\fR.
.IP "\(bu" 4
Remove sockadapt layer from the \s-1VMS\s0 build.
.IP "\(bu" 4
Explicit support for \s-1VMS\s0 versions before v7.0 and \s-1DEC\s0 C versions
before v6.0 has been removed.
.IP "\(bu" 4
Since Perl 5.10.1, the home-grown \f(CW\*(C`stat\*(C'\fR wrapper has been unable to
distinguish between a directory name containing an underscore and an
otherwise-identical filename containing a dot in the same position
(e.g., t/test_pl as a directory and t/test.pl as a file).  This problem
has been corrected.
.IP "\(bu" 4
The build on \s-1VMS\s0 now permits names of the resulting symbols in C code for
Perl longer than 31 characters.  Symbols like
\&\f(CW\*(C`Perl_\|_it_was_the_best_of_times_it_was_the_worst_of_times\*(C'\fR can now be
created freely without causing the \s-1VMS\s0 linker to seize up.
.PP
\fIGNU/Hurd\fR
.IX Subsection "GNU/Hurd"
.IP "\(bu" 4
Numerous build and test failures on GNU/Hurd have been resolved with hints
for building \s-1DBM\s0 modules, detection of the library search path, and enabling
of large file support.
.PP
\fIOpenVOS\fR
.IX Subsection "OpenVOS"
.IP "\(bu" 4
Perl is now built with dynamic linking on OpenVOS, the minimum supported
version of which is now Release 17.1.0.
.PP
\fISunOS\fR
.IX Subsection "SunOS"
.PP
The \s-1CC\s0 workshop \*(C+ compiler is now detected and used on systems that ship
without cc.
.SH "Internal Changes"
.IX Header "Internal Changes"
.IP "\(bu" 4
The compiled representation of formats is now stored via the \f(CW\*(C`mg_ptr\*(C'\fR of
their \f(CW\*(C`PERL_MAGIC_fm\*(C'\fR.  Previously it was stored in the string buffer,
beyond \f(CW\*(C`SvLEN()\*(C'\fR, the regular end of the string.  \f(CW\*(C`SvCOMPILED()\*(C'\fR and
\&\f(CW\*(C`SvCOMPILED_{on,off}()\*(C'\fR now exist solely for compatibility for \s-1XS\s0 code.
The first is always 0, the other two now no-ops. (5.14.1)
.IP "\(bu" 4
Some global variables have been marked \f(CW\*(C`const\*(C'\fR, members in the interpreter
structure have been re-ordered, and the opcodes have been re-ordered.  The
op \f(CW\*(C`OP_AELEMFAST\*(C'\fR has been split into \f(CW\*(C`OP_AELEMFAST\*(C'\fR and \f(CW\*(C`OP_AELEMFAST_LEX\*(C'\fR.
.IP "\(bu" 4
When empting a hash of its elements (e.g., via undef(%h), or \f(CW%h\fR=()), HvARRAY
field is no longer temporarily zeroed.  Any destructors called on the freed
elements see the remaining elements.  Thus, \f(CW%h\fR=() becomes more like
\&\f(CW\*(C`delete $h{$_} for keys %h\*(C'\fR.
.IP "\(bu" 4
Boyer-Moore compiled scalars are now PVMGs, and the Boyer-Moore tables are now
stored via the mg_ptr of their \f(CW\*(C`PERL_MAGIC_bm\*(C'\fR.
Previously they were PVGVs, with the tables stored in
the string buffer, beyond \f(CW\*(C`SvLEN()\*(C'\fR.  This eliminates
the last place where the core stores data beyond \f(CW\*(C`SvLEN()\*(C'\fR.
.IP "\(bu" 4
Simplified logic in \f(CW\*(C`Perl_sv_magic()\*(C'\fR introduces a small change of
behavior for error cases involving unknown magic types.  Previously, if
\&\f(CW\*(C`Perl_sv_magic()\*(C'\fR was passed a magic type unknown to it, it would
.RS 4
.IP "1." 4
Croak \*(L"Modification of a read-only value attempted\*(R" if read only
.IP "2." 4
Return without error if the \s-1SV\s0 happened to already have this magic
.IP "3." 4
otherwise croak \*(L"Don't know how to handle magic of type \e\e%o\*(R"
.RE
.RS 4
.Sp
Now it will always croak \*(L"Don't know how to handle magic of type \e\e%o\*(R", even
on read-only values, or SVs which already have the unknown magic type.
.RE
.IP "\(bu" 4
The experimental \f(CW\*(C`fetch_cop_label\*(C'\fR function has been renamed to
\&\f(CW\*(C`cop_fetch_label\*(C'\fR.
.IP "\(bu" 4
The \f(CW\*(C`cop_store_label\*(C'\fR function has been added to the \s-1API\s0, but is
experimental.
.IP "\(bu" 4
\&\fIembedvar.h\fR has been simplified, and one level of macro indirection for
PL_* variables has been removed for the default (non-multiplicity)
configuration.  PERLVAR*() macros now directly expand their arguments to
tokens such as \f(CW\*(C`PL_defgv\*(C'\fR, instead of expanding to \f(CW\*(C`PL_Idefgv\*(C'\fR, with
\&\fIembedvar.h\fR defining a macro to map \f(CW\*(C`PL_Idefgv\*(C'\fR to \f(CW\*(C`PL_defgv\*(C'\fR.  \s-1XS\s0 code
which has unwarranted chumminess with the implementation may need updating.
.IP "\(bu" 4
An \s-1API\s0 has been added to explicitly choose whether to export \s-1XSUB\s0
symbols.  More detail can be found in the comments for commit e64345f8.
.IP "\(bu" 4
The \f(CW\*(C`is_gv_magical_sv\*(C'\fR function has been eliminated and merged with
\&\f(CW\*(C`gv_fetchpvn_flags\*(C'\fR.  It used to be called to determine whether a \s-1GV\s0
should be autovivified in rvalue context.  Now it has been replaced with a
new \f(CW\*(C`GV_ADDMG\*(C'\fR flag (not part of the \s-1API\s0).
.IP "\(bu" 4
The returned code point from the function \f(CW\*(C`utf8n_to_uvuni()\*(C'\fR
when the input is malformed \s-1UTF\-8\s0, malformations are allowed, and
\&\f(CW\*(C`utf8\*(C'\fR warnings are off is now the Unicode \s-1REPLACEMENT\s0 \s-1CHARACTER\s0
whenever the malformation is such that no well-defined code point can be
computed.  Previously the returned value was essentially garbage.  The
only malformations that have well-defined values are a zero-length
string (0 is the return), and overlong \s-1UTF\-8\s0 sequences.
.IP "\(bu" 4
Padlists are now marked \f(CW\*(C`AvREAL\*(C'\fR; i.e., reference-counted.  They have
always been reference-counted, but were not marked real, because \fIpad.c\fR
did its own clean-up, instead of using the usual clean-up code in \fIsv.c\fR.
That caused problems in thread cloning, so now the \f(CW\*(C`AvREAL\*(C'\fR flag is on,
but is turned off in \fIpad.c\fR right before the padlist is freed (after
\&\fIpad.c\fR has done its custom freeing of the pads).
.IP "\(bu" 4
All C files that make up the Perl core have been converted to \s-1UTF\-8\s0.
.IP "\(bu" 4
These new functions have been added as part of the work on Unicode symbols:
.Sp
.Vb 10
\&    HvNAMELEN
\&    HvNAMEUTF8
\&    HvENAMELEN
\&    HvENAMEUTF8
\&    gv_init_pv
\&    gv_init_pvn
\&    gv_init_pvsv
\&    gv_fetchmeth_pv
\&    gv_fetchmeth_pvn
\&    gv_fetchmeth_sv
\&    gv_fetchmeth_pv_autoload
\&    gv_fetchmeth_pvn_autoload
\&    gv_fetchmeth_sv_autoload
\&    gv_fetchmethod_pv_flags
\&    gv_fetchmethod_pvn_flags
\&    gv_fetchmethod_sv_flags
\&    gv_autoload_pv
\&    gv_autoload_pvn
\&    gv_autoload_sv
\&    newGVgen_flags
\&    sv_derived_from_pv
\&    sv_derived_from_pvn
\&    sv_derived_from_sv
\&    sv_does_pv
\&    sv_does_pvn
\&    sv_does_sv
\&    whichsig_pv
\&    whichsig_pvn
\&    whichsig_sv
\&    newCONSTSUB_flags
.Ve
.Sp
The gv_fetchmethod_*_flags functions, like gv_fetchmethod_flags, are
experimental and may change in a future release.
.IP "\(bu" 4
The following functions were added.  These are \fInot\fR part of the \s-1API:\s0
.Sp
.Vb 9
\&    GvNAMEUTF8
\&    GvENAMELEN
\&    GvENAME_HEK
\&    CopSTASH_flags
\&    CopSTASH_flags_set
\&    PmopSTASH_flags
\&    PmopSTASH_flags_set
\&    sv_sethek
\&    HEKfARG
.Ve
.Sp
There is also a \f(CW\*(C`HEKf\*(C'\fR macro corresponding to \f(CW\*(C`SVf\*(C'\fR, for
interpolating HEKs in formatted strings.
.IP "\(bu" 4
\&\f(CW\*(C`sv_catpvn_flags\*(C'\fR takes a couple of new internal-only flags,
\&\f(CW\*(C`SV_CATBYTES\*(C'\fR and \f(CW\*(C`SV_CATUTF8\*(C'\fR, which tell it whether the char array to
be concatenated is \s-1UTF8\s0.  This allows for more efficient concatenation than
creating temporary SVs to pass to \f(CW\*(C`sv_catsv\*(C'\fR.
.IP "\(bu" 4
For \s-1XS\s0 \s-1AUTOLOAD\s0 subs, \f(CW$AUTOLOAD\fR is set once more, as it was in 5.6.0.  This
is in addition to setting \f(CW\*(C`SvPVX(cv)\*(C'\fR, for compatibility with 5.8 to 5.14.
See \*(L"Autoloading with XSUBs\*(R" in perlguts.
.IP "\(bu" 4
Perl now checks whether the array (the linearized isa) returned by a \s-1MRO\s0
plugin begins with the name of the class itself, for which the array was
created, instead of assuming that it does.  This prevents the first element
from being skipped during method lookup.  It also means that
\&\f(CW\*(C`mro::get_linear_isa\*(C'\fR may return an array with one more element than the
\&\s-1MRO\s0 plugin provided [perl #94306].
.IP "\(bu" 4
\&\f(CW\*(C`PL_curstash\*(C'\fR is now reference-counted.
.IP "\(bu" 4
There are now feature bundle hints in \f(CW\*(C`PL_hints\*(C'\fR (\f(CW$^H\fR) that version
declarations use, to avoid having to load \fIfeature.pm\fR.  One setting of
the hint bits indicates a \*(L"custom\*(R" feature bundle, which means that the
entries in \f(CW\*(C`%^H\*(C'\fR still apply.  \fIfeature.pm\fR uses that.
.Sp
The \f(CW\*(C`HINT_FEATURE_MASK\*(C'\fR macro is defined in \fIperl.h\fR along with other
hints.  Other macros for setting and testing features and bundles are in
the new \fIfeature.h\fR.  \f(CW\*(C`FEATURE_IS_ENABLED\*(C'\fR (which has moved to
\&\fIfeature.h\fR) is no longer used throughout the codebase, but more specific
macros, e.g., \f(CW\*(C`FEATURE_SAY_IS_ENABLED\*(C'\fR, that are defined in \fIfeature.h\fR.
.IP "\(bu" 4
\&\fIlib/feature.pm\fR is now a generated file, created by the new
\&\fIregen/feature.pl\fR script, which also generates \fIfeature.h\fR.
.IP "\(bu" 4
Tied arrays are now always \f(CW\*(C`AvREAL\*(C'\fR.  If \f(CW@_\fR or \f(CW\*(C`DB::args\*(C'\fR is tied, it
is reified first, to make sure this is always the case.
.IP "\(bu" 4
Two new functions \f(CW\*(C`utf8_to_uvchr_buf()\*(C'\fR and \f(CW\*(C`utf8_to_uvuni_buf()\*(C'\fR have
been added.  These are the same as \f(CW\*(C`utf8_to_uvchr\*(C'\fR and
\&\f(CW\*(C`utf8_to_uvuni\*(C'\fR (which are now deprecated), but take an extra parameter
that is used to guard against reading beyond the end of the input
string.
See \*(L"utf8_to_uvchr_buf\*(R" in perlapi and \*(L"utf8_to_uvuni_buf\*(R" in perlapi.
.IP "\(bu" 4
The regular expression engine now does \s-1TRIE\s0 case insensitive matches
under Unicode. This may change the output of \f(CW\*(C`use re \*(Aqdebug\*(Aq;\*(C'\fR,
and will speed up various things.
.IP "\(bu" 4
There is a new \f(CW\*(C`wrap_op_checker()\*(C'\fR function, which provides a thread-safe
alternative to writing to \f(CW\*(C`PL_check\*(C'\fR directly.
.SH "Selected Bug Fixes"
.IX Header "Selected Bug Fixes"
.SS "Array and hash"
.IX Subsection "Array and hash"
.IP "\(bu" 4
A bug has been fixed that would cause a \*(L"Use of freed value in iteration\*(R"
error if the next two hash elements that would be iterated over are
deleted [perl #85026]. (5.14.1)
.IP "\(bu" 4
Deleting the current hash iterator (the hash element that would be returned
by the next call to \f(CW\*(C`each\*(C'\fR) in void context used not to free it
[perl #85026].
.IP "\(bu" 4
Deletion of methods via \f(CW\*(C`delete $Class::{method}\*(C'\fR syntax used to update
method caches if called in void context, but not scalar or list context.
.IP "\(bu" 4
When hash elements are deleted in void context, the internal hash entry is
now freed before the value is freed, to prevent destructors called by that
latter freeing from seeing the hash in an inconsistent state.  It was
possible to cause double-frees if the destructor freed the hash itself
[perl #100340].
.IP "\(bu" 4
A \f(CW\*(C`keys\*(C'\fR optimization in Perl 5.12.0 to make it faster on empty hashes
caused \f(CW\*(C`each\*(C'\fR not to reset the iterator if called after the last element
was deleted.
.IP "\(bu" 4
Freeing deeply nested hashes no longer crashes [perl #44225].
.IP "\(bu" 4
It is possible from \s-1XS\s0 code to create hashes with elements that have no
values.  The hash element and slice operators used to crash
when handling these in lvalue context.  They now
produce a \*(L"Modification of non-creatable hash value attempted\*(R" error
message.
.IP "\(bu" 4
If list assignment to a hash or array triggered destructors that freed the
hash or array itself, a crash would ensue.  This is no longer the case
[perl #107440].
.IP "\(bu" 4
It used to be possible to free the typeglob of a localized array or hash
(e.g., \f(CW\*(C`local @{"x"}; delete $::{x}\*(C'\fR), resulting in a crash on scope exit.
.IP "\(bu" 4
Some core bugs affecting Hash::Util have been fixed: locking a hash
element that is a glob copy no longer causes the next assignment to it to
corrupt the glob (5.14.2), and unlocking a hash element that holds a
copy-on-write scalar no longer causes modifications to that scalar to
modify other scalars that were sharing the same string buffer.
.SS "C \s-1API\s0 fixes"
.IX Subsection "C API fixes"
.IP "\(bu" 4
The \f(CW\*(C`newHVhv\*(C'\fR \s-1XS\s0 function now works on tied hashes, instead of crashing or
returning an empty hash.
.IP "\(bu" 4
The \f(CW\*(C`SvIsCOW\*(C'\fR C macro now returns false for read-only copies of typeglobs,
such as those created by:
.Sp
.Vb 2
\&  $hash{elem} = *foo;
\&  Hash::Util::lock_value %hash, \*(Aqelem\*(Aq;
.Ve
.Sp
It used to return true.
.IP "\(bu" 4
The \f(CW\*(C`SvPVutf8\*(C'\fR C function no longer tries to modify its argument,
resulting in errors [perl #108994].
.IP "\(bu" 4
\&\f(CW\*(C`SvPVutf8\*(C'\fR now works properly with magical variables.
.IP "\(bu" 4
\&\f(CW\*(C`SvPVbyte\*(C'\fR now works properly non-PVs.
.IP "\(bu" 4
When presented with malformed \s-1UTF\-8\s0 input, the XS-callable functions
\&\f(CW\*(C`is_utf8_string()\*(C'\fR, \f(CW\*(C`is_utf8_string_loc()\*(C'\fR, and
\&\f(CW\*(C`is_utf8_string_loclen()\*(C'\fR could read beyond the end of the input
string by up to 12 bytes.  This no longer happens.  [perl #32080].
However, currently, \f(CW\*(C`is_utf8_char()\*(C'\fR still has this defect, see
\&\*(L"\fIis_utf8_char()\fR\*(R" above.
.IP "\(bu" 4
The C\-level \f(CW\*(C`pregcomp\*(C'\fR function could become confused about whether the
pattern was in \s-1UTF8\s0 if the pattern was an overloaded, tied, or otherwise
magical scalar [perl #101940].
.SS "Compile-time hints"
.IX Subsection "Compile-time hints"
.IP "\(bu" 4
Tying \f(CW\*(C`%^H\*(C'\fR no longer causes perl to crash or ignore the contents of
\&\f(CW\*(C`%^H\*(C'\fR when entering a compilation scope [perl #106282].
.IP "\(bu" 4
\&\f(CW\*(C`eval $string\*(C'\fR and \f(CW\*(C`require\*(C'\fR used not to
localize \f(CW\*(C`%^H\*(C'\fR during compilation if it
was empty at the time the \f(CW\*(C`eval\*(C'\fR call itself was compiled.  This could
lead to scary side effects, like \f(CW\*(C`use re "/m"\*(C'\fR enabling other flags that
the surrounding code was trying to enable for its caller [perl #68750].
.IP "\(bu" 4
\&\f(CW\*(C`eval $string\*(C'\fR and \f(CW\*(C`require\*(C'\fR no longer localize hints (\f(CW$^H\fR and \f(CW\*(C`%^H\*(C'\fR)
at run time, but only during compilation of the \f(CW$string\fR or required file.
This makes \f(CW\*(C`BEGIN { $^H{foo}=7 }\*(C'\fR equivalent to
\&\f(CW\*(C`BEGIN { eval \*(Aq$^H{foo}=7\*(Aq }\*(C'\fR [perl #70151].
.IP "\(bu" 4
Creating a \s-1BEGIN\s0 block from \s-1XS\s0 code (via \f(CW\*(C`newXS\*(C'\fR or \f(CW\*(C`newATTRSUB\*(C'\fR) would,
on completion, make the hints of the current compiling code the current
hints.  This could cause warnings to occur in a non-warning scope.
.SS "Copy-on-write scalars"
.IX Subsection "Copy-on-write scalars"
Copy-on-write or shared hash key scalars
were introduced in 5.8.0, but most Perl code
did not encounter them (they were used mostly internally).  Perl
5.10.0 extended them, such that assigning \f(CW\*(C`_\|_PACKAGE_\|_\*(C'\fR or a
hash key to a scalar would make it copy-on-write.  Several parts
of Perl were not updated to account for them, but have now been fixed.
.IP "\(bu" 4
\&\f(CW\*(C`utf8::decode\*(C'\fR had a nasty bug that would modify copy-on-write scalars'
string buffers in place (i.e., skipping the copy).  This could result in
hashes having two elements with the same key [perl #91834]. (5.14.2)
.IP "\(bu" 4
Lvalue subroutines were not allowing \s-1COW\s0 scalars to be returned.  This was
fixed for lvalue scalar context in Perl 5.12.3 and 5.14.0, but list context
was not fixed until this release.
.IP "\(bu" 4
Elements of restricted hashes (see the fields pragma) containing
copy-on-write values couldn't be deleted, nor could such hashes be cleared
(\f(CW\*(C`%hash = ()\*(C'\fR). (5.14.2)
.IP "\(bu" 4
Localizing a tied variable used to make it read-only if it contained a
copy-on-write string. (5.14.2)
.IP "\(bu" 4
Assigning a copy-on-write string to a stash
element no longer causes a double free.  Regardless of this change, the
results of such assignments are still undefined.
.IP "\(bu" 4
Assigning a copy-on-write string to a tied variable no longer stops that
variable from being tied if it happens to be a \s-1PVMG\s0 or \s-1PVLV\s0 internally.
.IP "\(bu" 4
Doing a substitution on a tied variable returning a copy-on-write
scalar used to cause an assertion failure or an \*(L"Attempt to free
nonexistent shared string\*(R" warning.
.IP "\(bu" 4
This one is a regression from 5.12: In 5.14.0, the bitwise assignment
operators \f(CW\*(C`|=\*(C'\fR, \f(CW\*(C`^=\*(C'\fR and \f(CW\*(C`&=\*(C'\fR started leaving the left-hand side
undefined if it happened to be a copy-on-write string [perl #108480].
.IP "\(bu" 4
Storable, Devel::Peek and PerlIO::scalar had similar problems.
See \*(L"Updated Modules and Pragmata\*(R", above.
.SS "The debugger"
.IX Subsection "The debugger"
.IP "\(bu" 4
\&\fIdumpvar.pl\fR, and therefore the \f(CW\*(C`x\*(C'\fR command in the debugger, have been
fixed to handle objects blessed into classes whose names contain \*(L"=\*(R".  The
contents of such objects used not to be dumped [perl #101814].
.IP "\(bu" 4
The \*(L"R\*(R" command for restarting a debugger session has been fixed to work on
Windows, or any other system lacking a \f(CW\*(C`POSIX::_SC_OPEN_MAX\*(C'\fR constant
[perl #87740].
.IP "\(bu" 4
The \f(CW\*(C`#line 42 foo\*(C'\fR directive used not to update the arrays of lines used
by the debugger if it occurred in a string eval.  This was partially fixed
in 5.14, but it worked only for a single \f(CW\*(C`#line 42 foo\*(C'\fR in each eval.  Now
it works for multiple.
.IP "\(bu" 4
When subroutine calls are intercepted by the debugger, the name of the
subroutine or a reference to it is stored in \f(CW$DB::sub\fR, for the debugger
to access.  Sometimes (such as \f(CW\*(C`$foo = *bar; undef *bar; &$foo\*(C'\fR)
\&\f(CW$DB::sub\fR would be set to a name that could not be used to find the
subroutine, and so the debugger's attempt to call it would fail.  Now the
check to see whether a reference is needed is more robust, so those
problems should not happen anymore [rt.cpan.org #69862].
.IP "\(bu" 4
Every subroutine has a filename associated with it that the debugger uses.
The one associated with constant subroutines used to be misallocated when
cloned under threads.  Consequently, debugging threaded applications could
result in memory corruption [perl #96126].
.SS "Dereferencing operators"
.IX Subsection "Dereferencing operators"
.IP "\(bu" 4
\&\f(CW\*(C`defined(${"..."})\*(C'\fR, \f(CW\*(C`defined(*{"..."})\*(C'\fR, etc., used to
return true for most, but not all built-in variables, if
they had not been used yet.  This bug affected \f(CW\*(C`${^GLOBAL_PHASE}\*(C'\fR and
\&\f(CW\*(C`${^UTF8CACHE}\*(C'\fR, among others.  It also used to return false if the
package name was given as well (\f(CW\*(C`${"::!"}\*(C'\fR) [perl #97978, #97492].
.IP "\(bu" 4
Perl 5.10.0 introduced a similar bug: \f(CW\*(C`defined(*{"foo"})\*(C'\fR where \*(L"foo\*(R"
represents the name of a built-in global variable used to return false if
the variable had never been used before, but only on the \fIfirst\fR call.
This, too, has been fixed.
.IP "\(bu" 4
Since 5.6.0, \f(CW\*(C`*{ ... }\*(C'\fR has been inconsistent in how it treats undefined
values.  It would die in strict mode or lvalue context for most undefined
values, but would be treated as the empty string (with a warning) for the
specific scalar return by \f(CW\*(C`undef()\*(C'\fR (\f(CW&PL_sv_undef\fR internally).  This
has been corrected.  \f(CW\*(C`undef()\*(C'\fR is now treated like other undefined
scalars, as in Perl 5.005.
.SS "Filehandle, last-accessed"
.IX Subsection "Filehandle, last-accessed"
Perl has an internal variable that stores the last filehandle to be
accessed.  It is used by \f(CW$.\fR and by \f(CW\*(C`tell\*(C'\fR and \f(CW\*(C`eof\*(C'\fR without
arguments.
.IP "\(bu" 4
It used to be possible to set this internal variable to a glob copy and
then modify that glob copy to be something other than a glob, and still
have the last-accessed filehandle associated with the variable after
assigning a glob to it again:
.Sp
.Vb 4
\&    my $foo = *STDOUT;  # $foo is a glob copy
\&    <$foo>;             # $foo is now the last\-accessed handle
\&    $foo = 3;           # no longer a glob
\&    $foo = *STDERR;     # still the last\-accessed handle
.Ve
.Sp
Now the \f(CW\*(C`$foo = 3\*(C'\fR assignment unsets that internal variable, so there
is no last-accessed filehandle, just as if \f(CW\*(C`<$foo>\*(C'\fR had never
happened.
.Sp
This also prevents some unrelated handle from becoming the last-accessed
handle if \f(CW$foo\fR falls out of scope and the same internal \s-1SV\s0 gets used for
another handle [perl #97988].
.IP "\(bu" 4
A regression in 5.14 caused these statements not to set that internal
variable:
.Sp
.Vb 8
\&    my $fh = *STDOUT;
\&    tell $fh;
\&    eof  $fh;
\&    seek $fh, 0,0;
\&    tell     *$fh;
\&    eof      *$fh;
\&    seek     *$fh, 0,0;
\&    readline *$fh;
.Ve
.Sp
This is now fixed, but \f(CW\*(C`tell *{ *$fh }\*(C'\fR still has the problem, and it
is not clear how to fix it [perl #106536].
.ie n .SS "Filetests and ""stat"""
.el .SS "Filetests and \f(CWstat\fP"
.IX Subsection "Filetests and stat"
The term \*(L"filetests\*(R" refers to the operators that consist of a hyphen
followed by a single letter: \f(CW\*(C`\-r\*(C'\fR, \f(CW\*(C`\-x\*(C'\fR, \f(CW\*(C`\-M\*(C'\fR, etc.  The term \*(L"stacked\*(R"
when applied to filetests means followed by another filetest operator
sharing the same operand, as in \f(CW\*(C`\-r \-x \-w $fooo\*(C'\fR.
.IP "\(bu" 4
\&\f(CW\*(C`stat\*(C'\fR produces more consistent warnings.  It no longer warns for \*(L"_\*(R"
[perl #71002] and no longer skips the warning at times for other unopened
handles.  It no longer warns about an unopened handle when the operating
system's \f(CW\*(C`fstat\*(C'\fR function fails.
.IP "\(bu" 4
\&\f(CW\*(C`stat\*(C'\fR would sometimes return negative numbers for large inode numbers,
because it was using the wrong internal C type. [perl #84590]
.IP "\(bu" 4
\&\f(CW\*(C`lstat\*(C'\fR is documented to fall back to \f(CW\*(C`stat\*(C'\fR (with a warning) when given
a filehandle.  When passed an \s-1IO\s0 reference, it was actually doing the
equivalent of \f(CW\*(C`stat\ _\*(C'\fR and ignoring the handle.
.IP "\(bu" 4
\&\f(CW\*(C`\-T _\*(C'\fR with no preceding \f(CW\*(C`stat\*(C'\fR used to produce a
confusing \*(L"uninitialized\*(R" warning, even though there
is no visible uninitialized value to speak of.
.IP "\(bu" 4
\&\f(CW\*(C`\-T\*(C'\fR, \f(CW\*(C`\-B\*(C'\fR, \f(CW\*(C`\-l\*(C'\fR and \f(CW\*(C`\-t\*(C'\fR now work
when stacked with other filetest operators
[perl #77388].
.IP "\(bu" 4
In 5.14.0, filetest ops (\f(CW\*(C`\-r\*(C'\fR, \f(CW\*(C`\-x\*(C'\fR, etc.) started calling \s-1FETCH\s0 on a
tied argument belonging to the previous argument to a list operator, if
called with a bareword argument or no argument at all.  This has been
fixed, so \f(CW\*(C`push @foo, $tied, \-r\*(C'\fR no longer calls \s-1FETCH\s0 on \f(CW$tied\fR.
.IP "\(bu" 4
In Perl 5.6, \f(CW\*(C`\-l\*(C'\fR followed by anything other than a bareword would treat
its argument as a file name.  That was changed in 5.8 for glob references
(\f(CW\*(C`\e*foo\*(C'\fR), but not for globs themselves (\f(CW*foo\fR).  \f(CW\*(C`\-l\*(C'\fR started
returning \f(CW\*(C`undef\*(C'\fR for glob references without setting the last
stat buffer that the \*(L"_\*(R" handle uses, but only if warnings
were turned on.  With warnings off, it was the same as 5.6.
In other words, it was simply buggy and inconsistent.  Now the 5.6
behavior has been restored.
.IP "\(bu" 4
\&\f(CW\*(C`\-l\*(C'\fR followed by a bareword no longer \*(L"eats\*(R" the previous argument to
the list operator in whose argument list it resides.  Hence,
\&\f(CW\*(C`print "bar", \-l foo\*(C'\fR now actually prints \*(L"bar\*(R", because \f(CW\*(C`\-l\*(C'\fR
on longer eats it.
.IP "\(bu" 4
Perl keeps several internal variables to keep track of the last stat
buffer, from which file(handle) it originated, what type it was, and
whether the last stat succeeded.
.Sp
There were various cases where these could get out of synch, resulting in
inconsistent or erratic behavior in edge cases (every mention of \f(CW\*(C`\-T\*(C'\fR
applies to \f(CW\*(C`\-B\*(C'\fR as well):
.RS 4
.IP "\(bu" 4
\&\f(CW\*(C`\-T \f(CIHANDLE\f(CW\*(C'\fR, even though it does a \f(CW\*(C`stat\*(C'\fR, was not resetting the last
stat type, so an \f(CW\*(C`lstat _\*(C'\fR following it would merrily return the wrong
results.  Also, it was not setting the success status.
.IP "\(bu" 4
Freeing the handle last used by \f(CW\*(C`stat\*(C'\fR or a filetest could result in
\&\f(CW\*(C`\-T\ _\*(C'\fR using an unrelated handle.
.IP "\(bu" 4
\&\f(CW\*(C`stat\*(C'\fR with an \s-1IO\s0 reference would not reset the stat type or record the
filehandle for \f(CW\*(C`\-T\ _\*(C'\fR to use.
.IP "\(bu" 4
Fatal warnings could cause the stat buffer not to be reset
for a filetest operator on an unopened filehandle or \f(CW\*(C`\-l\*(C'\fR on any handle.
Fatal warnings also stopped \f(CW\*(C`\-T\*(C'\fR from setting \f(CW$!\fR.
.IP "\(bu" 4
When the last stat was on an unreadable file, \f(CW\*(C`\-T _\*(C'\fR is supposed to
return \f(CW\*(C`undef\*(C'\fR, leaving the last stat buffer unchanged.  But it was
setting the stat type, causing \f(CW\*(C`lstat _\*(C'\fR to stop working.
.IP "\(bu" 4
\&\f(CW\*(C`\-T \f(CIFILENAME\f(CW\*(C'\fR was not resetting the internal stat buffers for
unreadable files.
.RE
.RS 4
.Sp
These have all been fixed.
.RE
.SS "Formats"
.IX Subsection "Formats"
.IP "\(bu" 4
Several edge cases have been fixed with formats and \f(CW\*(C`formline\*(C'\fR;
in particular, where the format itself is potentially variable (such as
with ties and overloading), and where the format and data differ in their
encoding.  In both these cases, it used to possible for the output to be
corrupted [perl #91032].
.IP "\(bu" 4
\&\f(CW\*(C`formline\*(C'\fR no longer converts its argument into a string in-place.  So
passing a reference to \f(CW\*(C`formline\*(C'\fR no longer destroys the reference
[perl #79532].
.IP "\(bu" 4
Assignment to \f(CW$^A\fR (the format output accumulator) now recalculates
the number of lines output.
.ie n .SS """given"" and ""when"""
.el .SS "\f(CWgiven\fP and \f(CWwhen\fP"
.IX Subsection "given and when"
.IP "\(bu" 4
\&\f(CW\*(C`given\*(C'\fR was not scoping its implicit \f(CW$_\fR properly, resulting in memory
leaks or \*(L"Variable is not available\*(R" warnings [perl #94682].
.IP "\(bu" 4
\&\f(CW\*(C`given\*(C'\fR was not calling set-magic on the implicit lexical \f(CW$_\fR that it
uses.  This meant, for example, that \f(CW\*(C`pos\*(C'\fR would be remembered from one
execution of the same \f(CW\*(C`given\*(C'\fR block to the next, even if the input were a
different variable [perl #84526].
.IP "\(bu" 4
\&\f(CW\*(C`when\*(C'\fR blocks are now capable of returning variables declared inside the
enclosing \f(CW\*(C`given\*(C'\fR block [perl #93548].
.ie n .SS "The ""glob"" operator"
.el .SS "The \f(CWglob\fP operator"
.IX Subsection "The glob operator"
.IP "\(bu" 4
On OSes other than \s-1VMS\s0, Perl's \f(CW\*(C`glob\*(C'\fR operator (and the \f(CW\*(C`<...>\*(C'\fR form)
use File::Glob underneath.  File::Glob splits the pattern into words,
before feeding each word to its \f(CW\*(C`bsd_glob\*(C'\fR function.
.Sp
There were several inconsistencies in the way the split was done.  Now
quotation marks (' and ") are always treated as shell-style word delimiters
(that allow whitespace as part of a word) and backslashes are always
preserved, unless they exist to escape quotation marks.  Before, those
would only sometimes be the case, depending on whether the pattern
contained whitespace.  Also, escaped whitespace at the end of the pattern
is no longer stripped [perl #40470].
.IP "\(bu" 4
\&\f(CW\*(C`CORE::glob\*(C'\fR now works as a way to call the default globbing function.  It
used to respect overrides, despite the \f(CW\*(C`CORE::\*(C'\fR prefix.
.IP "\(bu" 4
Under miniperl (used to configure modules when perl itself is built),
\&\f(CW\*(C`glob\*(C'\fR now clears \f(CW%ENV\fR before calling csh, since the latter croaks on some
systems if it does not like the contents of the \s-1LS_COLORS\s0 environment
variable [perl #98662].
.SS "Lvalue subroutines"
.IX Subsection "Lvalue subroutines"
.IP "\(bu" 4
Explicit return now returns the actual argument passed to return, instead
of copying it [perl #72724, #72706].
.IP "\(bu" 4
Lvalue subroutines used to enforce lvalue syntax (i.e., whatever can go on
the left-hand side of \f(CW\*(C`=\*(C'\fR) for the last statement and the arguments to
return.  Since lvalue subroutines are not always called in lvalue context,
this restriction has been lifted.
.IP "\(bu" 4
Lvalue subroutines are less restrictive about what values can be returned.
It used to croak on values returned by \f(CW\*(C`shift\*(C'\fR and \f(CW\*(C`delete\*(C'\fR and from
other subroutines, but no longer does so [perl #71172].
.IP "\(bu" 4
Empty lvalue subroutines (\f(CW\*(C`sub :lvalue {}\*(C'\fR) used to return \f(CW@_\fR in list
context.  All subroutines used to do this, but regular subs were fixed in
Perl 5.8.2.  Now lvalue subroutines have been likewise fixed.
.IP "\(bu" 4
Autovivification now works on values returned from lvalue subroutines
[perl #7946], as does returning \f(CW\*(C`keys\*(C'\fR in lvalue context.
.IP "\(bu" 4
Lvalue subroutines used to copy their return values in rvalue context.  Not
only was this a waste of \s-1CPU\s0 cycles, but it also caused bugs.  A \f(CW\*(C`($)\*(C'\fR
prototype would cause an lvalue sub to copy its return value [perl #51408],
and \f(CW\*(C`while(lvalue_sub() =~ m/.../g) { ... }\*(C'\fR would loop endlessly
[perl #78680].
.IP "\(bu" 4
When called in potential lvalue context
(e.g., subroutine arguments or a list
passed to \f(CW\*(C`for\*(C'\fR), lvalue subroutines used to copy
any read-only value that was returned.  E.g., \f(CW\*(C` sub :lvalue { $] } \*(C'\fR
would not return \f(CW$]\fR, but a copy of it.
.IP "\(bu" 4
When called in potential lvalue context, an lvalue subroutine returning
arrays or hashes used to bind the arrays or hashes to scalar variables,
resulting in bugs.  This was fixed in 5.14.0 if an array were the first
thing returned from the subroutine (but not for \f(CW\*(C`$scalar, @array\*(C'\fR or
hashes being returned).  Now a more general fix has been applied
[perl #23790].
.IP "\(bu" 4
Method calls whose arguments were all surrounded with \f(CW\*(C`my()\*(C'\fR or \f(CW\*(C`our()\*(C'\fR
(as in \f(CW\*(C`$object\->method(my($a,$b))\*(C'\fR) used to force lvalue context on
the subroutine.  This would prevent lvalue methods from returning certain
values.
.IP "\(bu" 4
Lvalue sub calls that are not determined to be such at compile time
(\f(CW&$name\fR or &{\*(L"name\*(R"}) are no longer exempt from strict refs if they
occur in the last statement of an lvalue subroutine [perl #102486].
.IP "\(bu" 4
Sub calls whose subs are not visible at compile time, if
they occurred in the last statement of an lvalue subroutine,
would reject non-lvalue subroutines and die with \*(L"Can't modify non-lvalue
subroutine call\*(R" [perl #102486].
.Sp
Non-lvalue sub calls whose subs \fIare\fR visible at compile time exhibited
the opposite bug.  If the call occurred in the last statement of an lvalue
subroutine, there would be no error when the lvalue sub was called in
lvalue context.  Perl would blindly assign to the temporary value returned
by the non-lvalue subroutine.
.IP "\(bu" 4
\&\f(CW\*(C`AUTOLOAD\*(C'\fR routines used to take precedence over the actual sub being
called (i.e., when autoloading wasn't needed), for sub calls in lvalue or
potential lvalue context, if the subroutine was not visible at compile
time.
.IP "\(bu" 4
Applying the \f(CW\*(C`:lvalue\*(C'\fR attribute to an \s-1XSUB\s0 or to an aliased subroutine
stub with \f(CW\*(C`sub foo :lvalue;\*(C'\fR syntax stopped working in Perl 5.12.
This has been fixed.
.IP "\(bu" 4
Applying the :lvalue attribute to subroutine that is already defined does
not work properly, as the attribute changes the way the sub is compiled.
Hence, Perl 5.12 began warning when an attempt is made to apply the
attribute to an already defined sub.  In such cases, the attribute is
discarded.
.Sp
But the change in 5.12 missed the case where custom attributes are also
present: that case still silently and ineffectively applied the attribute.
That omission has now been corrected.  \f(CW\*(C`sub foo :lvalue :Whatever\*(C'\fR (when
\&\f(CW\*(C`foo\*(C'\fR is already defined) now warns about the :lvalue attribute, and does
not apply it.
.IP "\(bu" 4
A bug affecting lvalue context propagation through nested lvalue subroutine
calls has been fixed.  Previously, returning a value in nested rvalue
context would be treated as lvalue context by the inner subroutine call,
resulting in some values (such as read-only values) being rejected.
.SS "Overloading"
.IX Subsection "Overloading"
.IP "\(bu" 4
Arithmetic assignment (\f(CW\*(C`$left += $right\*(C'\fR) involving overloaded objects
that rely on the 'nomethod' override no longer segfault when the left
operand is not overloaded.
.IP "\(bu" 4
Errors that occur when methods cannot be found during overloading now
mention the correct package name, as they did in 5.8.x, instead of
erroneously mentioning the \*(L"overload\*(R" package, as they have since 5.10.0.
.IP "\(bu" 4
Undefining \f(CW%overload::\fR no longer causes a crash.
.SS "Prototypes of built-in keywords"
.IX Subsection "Prototypes of built-in keywords"
.IP "\(bu" 4
The \f(CW\*(C`prototype\*(C'\fR function no longer dies for the \f(CW\*(C`_\|_FILE_\|_\*(C'\fR, \f(CW\*(C`_\|_LINE_\|_\*(C'\fR
and \f(CW\*(C`_\|_PACKAGE_\|_\*(C'\fR directives.  It now returns an empty-string prototype
for them, because they are syntactically indistinguishable from nullary
functions like \f(CW\*(C`time\*(C'\fR.
.IP "\(bu" 4
\&\f(CW\*(C`prototype\*(C'\fR now returns \f(CW\*(C`undef\*(C'\fR for all overridable infix operators,
such as \f(CW\*(C`eq\*(C'\fR, which are not callable in any way resembling functions.
It used to return incorrect prototypes for some and die for others
[perl #94984].
.IP "\(bu" 4
The prototypes of several built-in functions\*(--\f(CW\*(C`getprotobynumber\*(C'\fR, \f(CW\*(C`lock\*(C'\fR,
\&\f(CW\*(C`not\*(C'\fR and \f(CW\*(C`select\*(C'\fR\-\-have been corrected, or at least are now closer to
reality than before.
.SS "Regular expressions"
.IX Subsection "Regular expressions"
.IP "\(bu" 4
\&\f(CW\*(C`/[[:ascii:]]/\*(C'\fR and \f(CW\*(C`/[[:blank:]]/\*(C'\fR now use locale rules under
\&\f(CW\*(C`use locale\*(C'\fR when the platform supports that.  Previously, they used
the platform's native character set.
.IP "\(bu" 4
\&\f(CW\*(C`m/[[:ascii:]]/i\*(C'\fR and \f(CW\*(C`/\ep{ASCII}/i\*(C'\fR now match identically (when not
under a differing locale).  This fixes a regression introduced in 5.14
in which the first expression could match characters outside of \s-1ASCII\s0,
such as the \s-1KELVIN\s0 \s-1SIGN\s0.
.IP "\(bu" 4
\&\f(CW\*(C`/.*/g\*(C'\fR would sometimes refuse to match at the end of a string that ends
with \*(L"\en\*(R".  This has been fixed [perl #109206].
.IP "\(bu" 4
Starting with 5.12.0, Perl used to get its internal bookkeeping muddled up
after assigning \f(CW\*(C`${ qr// }\*(C'\fR to a hash element and locking it with
Hash::Util.  This could result in double frees, crashes, or erratic
behavior.
.IP "\(bu" 4
The new (in 5.14.0) regular expression modifier \f(CW\*(C`/a\*(C'\fR when repeated like
\&\f(CW\*(C`/aa\*(C'\fR forbids the characters outside the \s-1ASCII\s0 range that match
characters inside that range from matching under \f(CW\*(C`/i\*(C'\fR.  This did not
work under some circumstances, all involving alternation, such as:
.Sp
.Vb 1
\& "\eN{KELVIN SIGN}" =~ /k|foo/iaa;
.Ve
.Sp
succeeded inappropriately.  This is now fixed.
.IP "\(bu" 4
5.14.0 introduced some memory leaks in regular expression character
classes such as \f(CW\*(C`[\ew\es]\*(C'\fR, which have now been fixed. (5.14.1)
.IP "\(bu" 4
An edge case in regular expression matching could potentially loop.
This happened only under \f(CW\*(C`/i\*(C'\fR in bracketed character classes that have
characters with multi-character folds, and the target string to match
against includes the first portion of the fold, followed by another
character that has a multi-character fold that begins with the remaining
portion of the fold, plus some more.
.Sp
.Vb 1
\& "s\eN{U+DF}" =~ /[\ex{DF}foo]/i
.Ve
.Sp
is one such case.  \f(CW\*(C`\exDF\*(C'\fR folds to \f(CW"ss"\fR. (5.14.1)
.IP "\(bu" 4
A few characters in regular expression pattern matches did not
match correctly in some circumstances, all involving \f(CW\*(C`/i\*(C'\fR.  The
affected characters are:
\&\s-1COMBINING\s0 \s-1GREEK\s0 \s-1YPOGEGRAMMENI\s0,
\&\s-1GREEK\s0 \s-1CAPITAL\s0 \s-1LETTER\s0 \s-1IOTA\s0,
\&\s-1GREEK\s0 \s-1CAPITAL\s0 \s-1LETTER\s0 \s-1UPSILON\s0,
\&\s-1GREEK\s0 \s-1PROSGEGRAMMENI\s0,
\&\s-1GREEK\s0 \s-1SMALL\s0 \s-1LETTER\s0 \s-1IOTA\s0 \s-1WITH\s0 \s-1DIALYTIKA\s0 \s-1AND\s0 \s-1OXIA\s0,
\&\s-1GREEK\s0 \s-1SMALL\s0 \s-1LETTER\s0 \s-1IOTA\s0 \s-1WITH\s0 \s-1DIALYTIKA\s0 \s-1AND\s0 \s-1TONOS\s0,
\&\s-1GREEK\s0 \s-1SMALL\s0 \s-1LETTER\s0 \s-1UPSILON\s0 \s-1WITH\s0 \s-1DIALYTIKA\s0 \s-1AND\s0 \s-1OXIA\s0,
\&\s-1GREEK\s0 \s-1SMALL\s0 \s-1LETTER\s0 \s-1UPSILON\s0 \s-1WITH\s0 \s-1DIALYTIKA\s0 \s-1AND\s0 \s-1TONOS\s0,
\&\s-1LATIN\s0 \s-1SMALL\s0 \s-1LETTER\s0 \s-1LONG\s0 S,
\&\s-1LATIN\s0 \s-1SMALL\s0 \s-1LIGATURE\s0 \s-1LONG\s0 S T,
and
\&\s-1LATIN\s0 \s-1SMALL\s0 \s-1LIGATURE\s0 \s-1ST\s0.
.IP "\(bu" 4
A memory leak regression in regular expression compilation
under threading has been fixed.
.IP "\(bu" 4
A regression introduced in 5.14.0 has
been fixed.  This involved an inverted
bracketed character class in a regular expression that consisted solely
of a Unicode property.  That property wasn't getting inverted outside the
Latin1 range.
.IP "\(bu" 4
Three problematic Unicode characters now work better in regex pattern matching under \f(CW\*(C`/i\*(C'\fR.
.Sp
In the past, three Unicode characters:
\&\s-1LATIN\s0 \s-1SMALL\s0 \s-1LETTER\s0 \s-1SHARP\s0 S,
\&\s-1GREEK\s0 \s-1SMALL\s0 \s-1LETTER\s0 \s-1IOTA\s0 \s-1WITH\s0 \s-1DIALYTIKA\s0 \s-1AND\s0 \s-1TONOS\s0,
and
\&\s-1GREEK\s0 \s-1SMALL\s0 \s-1LETTER\s0 \s-1UPSILON\s0 \s-1WITH\s0 \s-1DIALYTIKA\s0 \s-1AND\s0 \s-1TONOS\s0,
along with the sequences that they fold to
(including \*(L"ss\*(R" for \s-1LATIN\s0 \s-1SMALL\s0 \s-1LETTER\s0 \s-1SHARP\s0 S),
did not properly match under \f(CW\*(C`/i\*(C'\fR.  5.14.0 fixed some of these cases,
but introduced others, including a panic when one of the characters or
sequences was used in the \f(CW\*(C`(?(DEFINE)\*(C'\fR regular expression predicate.
The known bugs that were introduced in 5.14 have now been fixed; as well
as some other edge cases that have never worked until now.  These all
involve using the characters and sequences outside bracketed character
classes under \f(CW\*(C`/i\*(C'\fR.  This closes [perl #98546].
.Sp
There remain known problems when using certain characters with
multi-character folds inside bracketed character classes, including such
constructs as \f(CW\*(C`qr/[\eN{LATIN SMALL LETTER SHARP}a\-z]/i\*(C'\fR.  These
remaining bugs are addressed in [perl #89774].
.IP "\(bu" 4
\&\s-1RT\s0 #78266: The regex engine has been leaking memory when accessing
named captures that weren't matched as part of a regex ever since 5.10
when they were introduced; e.g., this would consume over a hundred \s-1MB\s0 of
memory:
.Sp
.Vb 6
\&    for (1..10_000_000) {
\&        if ("foo" =~ /(foo|(?<capture>bar))?/) {
\&            my $capture = $+{capture}
\&        }
\&    }
\&    system "ps \-o rss $$"\*(Aq
.Ve
.IP "\(bu" 4
In 5.14, \f(CW\*(C`/[[:lower:]]/i\*(C'\fR and \f(CW\*(C`/[[:upper:]]/i\*(C'\fR no longer matched the
opposite case.  This has been fixed [perl #101970].
.IP "\(bu" 4
A regular expression match with an overloaded object on the right-hand side
would sometimes stringify the object too many times.
.IP "\(bu" 4
A regression has been fixed that was introduced in 5.14, in \f(CW\*(C`/i\*(C'\fR
regular expression matching, in which a match improperly fails if the
pattern is in \s-1UTF\-8\s0, the target string is not, and a Latin\-1 character
precedes a character in the string that should match the pattern.
[perl #101710]
.IP "\(bu" 4
In case-insensitive regular expression pattern matching, no longer on
\&\s-1UTF\-8\s0 encoded strings does the scan for the start of match look only at
the first possible position.  This caused matches such as
\&\f(CW\*(C`"f\ex{FB00}" =~ /ff/i\*(C'\fR to fail.
.IP "\(bu" 4
The regexp optimizer no longer crashes on debugging builds when merging
fixed-string nodes with inconvenient contents.
.IP "\(bu" 4
A panic involving the combination of the regular expression modifiers
\&\f(CW\*(C`/aa\*(C'\fR and the \f(CW\*(C`\eb\*(C'\fR escape sequence introduced in 5.14.0 has been
fixed [perl #95964]. (5.14.2)
.IP "\(bu" 4
The combination of the regular expression modifiers \f(CW\*(C`/aa\*(C'\fR and the \f(CW\*(C`\eb\*(C'\fR
and \f(CW\*(C`\eB\*(C'\fR escape sequences did not work properly on \s-1UTF\-8\s0 encoded
strings.  All non-ASCII characters under \f(CW\*(C`/aa\*(C'\fR should be treated as
non-word characters, but what was happening was that Unicode rules were
used to determine wordness/non\-wordness for non-ASCII characters.  This
is now fixed [perl #95968].
.IP "\(bu" 4
\&\f(CW\*(C`(?foo: ...)\*(C'\fR no longer loses passed in character set.
.IP "\(bu" 4
The trie optimization used to have problems with alternations containing
an empty \f(CW\*(C`(?:)\*(C'\fR, causing \f(CW\*(C`"x" =~ /\eA(?>(?:(?:)A|B|C?x))\ez/\*(C'\fR not to
match, whereas it should [perl #111842].
.IP "\(bu" 4
Use of lexical (\f(CW\*(C`my\*(C'\fR) variables in code blocks embedded in regular
expressions will no longer result in memory corruption or crashes.
.Sp
Nevertheless, these code blocks are still experimental, as there are still
problems with the wrong variables being closed over (in loops for instance)
and with abnormal exiting (e.g., \f(CW\*(C`die\*(C'\fR) causing memory corruption.
.IP "\(bu" 4
The \f(CW\*(C`\eh\*(C'\fR, \f(CW\*(C`\eH\*(C'\fR, \f(CW\*(C`\ev\*(C'\fR and \f(CW\*(C`\eV\*(C'\fR regular expression metacharacters used to
cause a panic error message when trying to match at the end of the
string [perl #96354].
.IP "\(bu" 4
The abbreviations for four C1 control characters \f(CW\*(C`MW\*(C'\fR \f(CW\*(C`PM\*(C'\fR, \f(CW\*(C`RI\*(C'\fR, and
\&\f(CW\*(C`ST\*(C'\fR were previously unrecognized by \f(CW\*(C`\eN{}\*(C'\fR, \fIvianame()\fR, and
\&\fIstring_vianame()\fR.
.IP "\(bu" 4
Mentioning a variable named \*(L"&\*(R" other than \f(CW$&\fR (i.e., \f(CW\*(C`@&\*(C'\fR or \f(CW\*(C`%&\*(C'\fR) no
longer stops \f(CW$&\fR from working.  The same applies to variables named \*(L"'\*(R"
and \*(L"`\*(R" [perl #24237].
.IP "\(bu" 4
Creating a \f(CW\*(C`UNIVERSAL::AUTOLOAD\*(C'\fR sub no longer stops \f(CW\*(C`%+\*(C'\fR, \f(CW\*(C`%\-\*(C'\fR and
\&\f(CW\*(C`%!\*(C'\fR from working some of the time [perl #105024].
.SS "Smartmatching"
.IX Subsection "Smartmatching"
.IP "\(bu" 4
\&\f(CW\*(C`~~\*(C'\fR now correctly handles the precedence of Any~~Object, and is not tricked
by an overloaded object on the left-hand side.
.IP "\(bu" 4
In Perl 5.14.0, \f(CW\*(C`$tainted ~~ @array\*(C'\fR stopped working properly.  Sometimes
it would erroneously fail (when \f(CW$tainted\fR contained a string that occurs
in the array \fIafter\fR the first element) or erroneously succeed (when
\&\f(CW\*(C`undef\*(C'\fR occurred after the first element) [perl #93590].
.ie n .SS "The ""sort"" operator"
.el .SS "The \f(CWsort\fP operator"
.IX Subsection "The sort operator"
.IP "\(bu" 4
\&\f(CW\*(C`sort\*(C'\fR was not treating \f(CW\*(C`sub {}\*(C'\fR and \f(CW\*(C`sub {()}\*(C'\fR as equivalent when
such a sub was provided as the comparison routine.  It used to croak on
\&\f(CW\*(C`sub {()}\*(C'\fR.
.IP "\(bu" 4
\&\f(CW\*(C`sort\*(C'\fR now works once more with custom sort routines that are XSUBs.  It
stopped working in 5.10.0.
.IP "\(bu" 4
\&\f(CW\*(C`sort\*(C'\fR with a constant for a custom sort routine, although it produces
unsorted results, no longer crashes.  It started crashing in 5.10.0.
.IP "\(bu" 4
Warnings emitted by \f(CW\*(C`sort\*(C'\fR when a custom comparison routine returns a
non-numeric value now contain \*(L"in sort\*(R" and show the line number of the
\&\f(CW\*(C`sort\*(C'\fR operator, rather than the last line of the comparison routine.  The
warnings also now occur only if warnings are enabled in the scope where
\&\f(CW\*(C`sort\*(C'\fR occurs.  Previously the warnings would occur if enabled in the
comparison routine's scope.
.IP "\(bu" 4
\&\f(CW\*(C`sort { $a <=> $b }\*(C'\fR, which is optimized internally, now produces
\&\*(L"uninitialized\*(R" warnings for NaNs (not-a-number values), since \f(CW\*(C`<=>\*(C'\fR
returns \f(CW\*(C`undef\*(C'\fR for those.  This brings it in line with
\&\f(CW\*(C`sort\ {\ 1;\ $a\ <=>\ $b\ }\*(C'\fR and other more complex cases, which are not
optimized [perl #94390].
.ie n .SS "The ""substr"" operator"
.el .SS "The \f(CWsubstr\fP operator"
.IX Subsection "The substr operator"
.IP "\(bu" 4
Tied (and otherwise magical) variables are no longer exempt from the
\&\*(L"Attempt to use reference as lvalue in substr\*(R" warning.
.IP "\(bu" 4
That warning now occurs when the returned lvalue is assigned to, not
when \f(CW\*(C`substr\*(C'\fR itself is called.  This makes a difference only if the
return value of \f(CW\*(C`substr\*(C'\fR is referenced and later assigned to.
.IP "\(bu" 4
Passing a substring of a read-only value or a typeglob to a function
(potential lvalue context) no longer causes an immediate \*(L"Can't coerce\*(R"
or \*(L"Modification of a read-only value\*(R" error.  That error occurs only 
if the passed value is assigned to.
.Sp
The same thing happens with the \*(L"substr outside of string\*(R" error.  If
the lvalue is only read from, not written to, it is now just a warning, as
with rvalue \f(CW\*(C`substr\*(C'\fR.
.IP "\(bu" 4
\&\f(CW\*(C`substr\*(C'\fR assignments no longer call \s-1FETCH\s0 twice if the first argument
is a tied variable, just once.
.SS "Support for embedded nulls"
.IX Subsection "Support for embedded nulls"
Some parts of Perl did not work correctly with nulls (\f(CW\*(C`chr 0\*(C'\fR) embedded in
strings.  That meant that, for instance, \f(CW\*(C`$m = "a\e0b"; foo\->$m\*(C'\fR would
call the \*(L"a\*(R" method, instead of the actual method name contained in \f(CW$m\fR.
These parts of perl have been fixed to support nulls:
.IP "\(bu" 4
Method names
.IP "\(bu" 4
Typeglob names (including filehandle and subroutine names)
.IP "\(bu" 4
Package names, including the return value of \f(CW\*(C`ref()\*(C'\fR
.IP "\(bu" 4
Typeglob elements (\f(CW*foo{"THING\e0stuff"}\fR)
.IP "\(bu" 4
Signal names
.IP "\(bu" 4
Various warnings and error messages that mention variable names or values,
methods, etc.
.PP
One side effect of these changes is that blessing into \*(L"\e0\*(R" no longer
causes \f(CW\*(C`ref()\*(C'\fR to return false.
.SS "Threading bugs"
.IX Subsection "Threading bugs"
.IP "\(bu" 4
Typeglobs returned from threads are no longer cloned if the parent thread
already has a glob with the same name.  This means that returned
subroutines will now assign to the right package variables [perl #107366].
.IP "\(bu" 4
Some cases of threads crashing due to memory allocation during cloning have
been fixed [perl #90006].
.IP "\(bu" 4
Thread joining would sometimes emit \*(L"Attempt to free unreferenced scalar\*(R"
warnings if \f(CW\*(C`caller\*(C'\fR had been used from the \f(CW\*(C`DB\*(C'\fR package before thread
creation [perl #98092].
.IP "\(bu" 4
Locking a subroutine (via \f(CW\*(C`lock &sub\*(C'\fR) is no longer a compile-time error
for regular subs.  For lvalue subroutines, it no longer tries to return the
sub as a scalar, resulting in strange side effects like \f(CW\*(C`ref \e$_\*(C'\fR
returning \*(L"\s-1CODE\s0\*(R" in some instances.
.Sp
\&\f(CW\*(C`lock &sub\*(C'\fR is now a run-time error if threads::shared is loaded (a
no-op otherwise), but that may be rectified in a future version.
.SS "Tied variables"
.IX Subsection "Tied variables"
.IP "\(bu" 4
Various cases in which \s-1FETCH\s0 was being ignored or called too many times
have been fixed:
.RS 4
.IP "\(bu" 4
\&\f(CW\*(C`PerlIO::get_layers\*(C'\fR [perl #97956]
.IP "\(bu" 4
\&\f(CW\*(C`$tied =~ y/a/b/\*(C'\fR, \f(CW\*(C`chop $tied\*(C'\fR and \f(CW\*(C`chomp $tied\*(C'\fR when \f(CW$tied\fR holds a
reference.
.IP "\(bu" 4
When calling \f(CW\*(C`local $_\*(C'\fR [perl #105912]
.IP "\(bu" 4
Four-argument \f(CW\*(C`select\*(C'\fR
.IP "\(bu" 4
A tied buffer passed to \f(CW\*(C`sysread\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`$tied .= <>\*(C'\fR
.IP "\(bu" 4
Three-argument \f(CW\*(C`open\*(C'\fR, the third being a tied file handle
(as in \f(CW\*(C`open $fh, ">&", $tied\*(C'\fR)
.IP "\(bu" 4
\&\f(CW\*(C`sort\*(C'\fR with a reference to a tied glob for the comparison routine.
.IP "\(bu" 4
\&\f(CW\*(C`..\*(C'\fR and \f(CW\*(C`...\*(C'\fR in list context [perl #53554].
.IP "\(bu" 4
\&\f(CW\*(C`${$tied}\*(C'\fR, \f(CW\*(C`@{$tied}\*(C'\fR, \f(CW\*(C`%{$tied}\*(C'\fR and \f(CW\*(C`*{$tied}\*(C'\fR where the tied
variable returns a string (\f(CW\*(C`&{}\*(C'\fR was unaffected)
.IP "\(bu" 4
\&\f(CW\*(C`defined ${ $tied_variable }\*(C'\fR
.IP "\(bu" 4
Various functions that take a filehandle argument in rvalue context
(\f(CW\*(C`close\*(C'\fR, \f(CW\*(C`readline\*(C'\fR, etc.) [perl #97482]
.IP "\(bu" 4
Some cases of dereferencing a complex expression, such as
\&\f(CW\*(C`${ (), $tied } = 1\*(C'\fR, used to call \f(CW\*(C`FETCH\*(C'\fR multiple times, but now call
it once.
.IP "\(bu" 4
\&\f(CW\*(C`$tied\->method\*(C'\fR where \f(CW$tied\fR returns a package name\*(--even resulting in
a failure to call the method, due to memory corruption
.IP "\(bu" 4
Assignments like \f(CW\*(C`*$tied = \e&{"..."}\*(C'\fR and \f(CW\*(C`*glob = $tied\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`chdir\*(C'\fR, \f(CW\*(C`chmod\*(C'\fR, \f(CW\*(C`chown\*(C'\fR, \f(CW\*(C`utime\*(C'\fR, \f(CW\*(C`truncate\*(C'\fR, \f(CW\*(C`stat\*(C'\fR, \f(CW\*(C`lstat\*(C'\fR and
the filetest ops (\f(CW\*(C`\-r\*(C'\fR, \f(CW\*(C`\-x\*(C'\fR, etc.)
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`caller\*(C'\fR sets \f(CW@DB::args\fR to the subroutine arguments when called from
the \s-1DB\s0 package.  It used to crash when doing so if \f(CW@DB::args\fR happened to
be tied.  Now it croaks instead.
.IP "\(bu" 4
Tying an element of \f(CW%ENV\fR or \f(CW\*(C`%^H\*(C'\fR and then deleting that element would
result in a call to the tie object's \s-1DELETE\s0 method, even though tying the
element itself is supposed to be equivalent to tying a scalar (the element
is, of course, a scalar) [perl #67490].
.IP "\(bu" 4
When Perl autovivifies an element of a tied array or hash (which entails
calling \s-1STORE\s0 with a new reference), it now calls \s-1FETCH\s0 immediately after
the \s-1STORE\s0, instead of assuming that \s-1FETCH\s0 would have returned the same
reference.  This can make it easier to implement tied objects [perl #35865, #43011].
.IP "\(bu" 4
Four-argument \f(CW\*(C`select\*(C'\fR no longer produces its \*(L"Non-string passed as
bitmask\*(R" warning on tied or tainted variables that are strings.
.IP "\(bu" 4
Localizing a tied scalar that returns a typeglob no longer stops it from
being tied till the end of the scope.
.IP "\(bu" 4
Attempting to \f(CW\*(C`goto\*(C'\fR out of a tied handle method used to cause memory
corruption or crashes.  Now it produces an error message instead
[perl #8611].
.IP "\(bu" 4
A bug has been fixed that occurs when a tied variable is used as a
subroutine reference:  if the last thing assigned to or returned from the
variable was a reference or typeglob, the \f(CW\*(C`\e&$tied\*(C'\fR could either crash or
return the wrong subroutine.  The reference case is a regression introduced
in Perl 5.10.0.  For typeglobs, it has probably never worked till now.
.SS "Version objects and vstrings"
.IX Subsection "Version objects and vstrings"
.IP "\(bu" 4
The bitwise complement operator (and possibly other operators, too) when
passed a vstring would leave vstring magic attached to the return value,
even though the string had changed.  This meant that
\&\f(CW\*(C`version\->new(~v1.2.3)\*(C'\fR would create a version looking like \*(L"v1.2.3\*(R"
even though the string passed to \f(CW\*(C`version\->new\*(C'\fR was actually
\&\*(L"\e376\e375\e374\*(R".  This also caused B::Deparse to deparse \f(CW\*(C`~v1.2.3\*(C'\fR
incorrectly, without the \f(CW\*(C`~\*(C'\fR [perl #29070].
.IP "\(bu" 4
Assigning a vstring to a magic (e.g., tied, \f(CW$!\fR) variable and then
assigning something else used to blow away all magic.  This meant that
tied variables would come undone, \f(CW$!\fR would stop getting updated on
failed system calls, \f(CW$|\fR would stop setting autoflush, and other
mischief would take place.  This has been fixed.
.IP "\(bu" 4
\&\f(CW\*(C`version\->new("version")\*(C'\fR and \f(CW\*(C`printf "%vd", "version"\*(C'\fR no longer
crash [perl #102586].
.IP "\(bu" 4
Version comparisons, such as those that happen implicitly with \f(CW\*(C`use
v5.43\*(C'\fR, no longer cause locale settings to change [perl #105784].
.IP "\(bu" 4
Version objects no longer cause memory leaks in boolean context
[perl #109762].
.SS "Warnings, redefinition"
.IX Subsection "Warnings, redefinition"
.IP "\(bu" 4
Subroutines from the \f(CW\*(C`autouse\*(C'\fR namespace are once more exempt from
redefinition warnings.  This used to work in 5.005, but was broken in
5.6 for most subroutines.  For subs created via \s-1XS\s0 that redefine
subroutines from the \f(CW\*(C`autouse\*(C'\fR package, this stopped working in 5.10.
.IP "\(bu" 4
New XSUBs now produce redefinition warnings if they overwrite existing
subs, as they did in 5.8.x.  (The \f(CW\*(C`autouse\*(C'\fR logic was reversed in
5.10\-14.  Only subroutines from the \f(CW\*(C`autouse\*(C'\fR namespace would warn
when clobbered.)
.IP "\(bu" 4
\&\f(CW\*(C`newCONSTSUB\*(C'\fR used to use compile-time warning hints, instead of
run-time hints.  The following code should never produce a redefinition
warning, but it used to, if \f(CW\*(C`newCONSTSUB\*(C'\fR redefined an existing
subroutine:
.Sp
.Vb 5
\&    use warnings;
\&    BEGIN {
\&        no warnings;
\&        some_XS_function_that_calls_new_CONSTSUB();
\&    }
.Ve
.IP "\(bu" 4
Redefinition warnings for constant subroutines are on by default (what
are known as severe warnings in perldiag).  This occurred only
when it was a glob assignment or declaration of a Perl subroutine that
caused the warning.  If the creation of XSUBs triggered the warning, it
was not a default warning.  This has been corrected.
.IP "\(bu" 4
The internal check to see whether a redefinition warning should occur
used to emit \*(L"uninitialized\*(R" warnings in cases like this:
.Sp
.Vb 4
\&    use warnings "uninitialized";
\&    use constant {u => undef, v => undef};
\&    sub foo(){u}
\&    sub foo(){v}
.Ve
.ie n .SS "Warnings, ""Uninitialized"""
.el .SS "Warnings, ``Uninitialized''"
.IX Subsection "Warnings, Uninitialized"
.IP "\(bu" 4
Various functions that take a filehandle argument in rvalue context
(\f(CW\*(C`close\*(C'\fR, \f(CW\*(C`readline\*(C'\fR, etc.) used to warn twice for an undefined handle
[perl #97482].
.IP "\(bu" 4
\&\f(CW\*(C`dbmopen\*(C'\fR now only warns once, rather than three times, if the mode
argument is \f(CW\*(C`undef\*(C'\fR [perl #90064].
.IP "\(bu" 4
The \f(CW\*(C`+=\*(C'\fR operator does not usually warn when the left-hand side is
\&\f(CW\*(C`undef\*(C'\fR, but it was doing so for tied variables.  This has been fixed
[perl #44895].
.IP "\(bu" 4
A bug fix in Perl 5.14 introduced a new bug, causing \*(L"uninitialized\*(R"
warnings to report the wrong variable if the operator in question had
two operands and one was \f(CW\*(C`%{...}\*(C'\fR or \f(CW\*(C`@{...}\*(C'\fR.  This has been fixed
[perl #103766].
.IP "\(bu" 4
\&\f(CW\*(C`..\*(C'\fR and \f(CW\*(C`...\*(C'\fR in list context now mention the name of the variable in
\&\*(L"uninitialized\*(R" warnings for string (as opposed to numeric) ranges.
.SS "Weak references"
.IX Subsection "Weak references"
.IP "\(bu" 4
Weakening the first argument to an automatically-invoked \f(CW\*(C`DESTROY\*(C'\fR method
could result in erroneous \*(L"\s-1DESTROY\s0 created new reference\*(R" errors or
crashes.  Now it is an error to weaken a read-only reference.
.IP "\(bu" 4
Weak references to lexical hashes going out of scope were not going stale
(becoming undefined), but continued to point to the hash.
.IP "\(bu" 4
Weak references to lexical variables going out of scope are now broken
before any magical methods (e.g., \s-1DESTROY\s0 on a tie object) are called.
This prevents such methods from modifying the variable that will be seen
the next time the scope is entered.
.IP "\(bu" 4
Creating a weak reference to an \f(CW@ISA\fR array or accessing the array index
(\f(CW$#ISA\fR) could result in confused internal bookkeeping for elements
later added to the \f(CW@ISA\fR array.  For instance, creating a weak
reference to the element itself could push that weak reference on to \f(CW@ISA\fR;
and elements added after use of \f(CW$#ISA\fR would be ignored by method lookup
[perl #85670].
.SS "Other notable fixes"
.IX Subsection "Other notable fixes"
.IP "\(bu" 4
\&\f(CW\*(C`quotemeta\*(C'\fR now quotes consistently the same non-ASCII characters under
\&\f(CW\*(C`use feature \*(Aqunicode_strings\*(Aq\*(C'\fR, regardless of whether the string is
encoded in \s-1UTF\-8\s0 or not, hence fixing the last vestiges (we hope) of the
notorious \*(L"The \*(R"Unicode Bug"" in perlunicode.  [perl #77654].
.Sp
Which of these code points is quoted has changed, based on Unicode's
recommendations.  See \*(L"quotemeta\*(R" in perlfunc for details.
.IP "\(bu" 4
\&\f(CW\*(C`study\*(C'\fR is now a no-op, presumably fixing all outstanding bugs related to
study causing regex matches to behave incorrectly!
.IP "\(bu" 4
When one writes \f(CW\*(C`open foo || die\*(C'\fR, which used to work in Perl 4, a
\&\*(L"Precedence problem\*(R" warning is produced.  This warning used erroneously to
apply to fully-qualified bareword handle names not followed by \f(CW\*(C`||\*(C'\fR.  This
has been corrected.
.IP "\(bu" 4
After package aliasing (\f(CW\*(C`*foo:: = *bar::\*(C'\fR), \f(CW\*(C`select\*(C'\fR with 0 or 1 argument
would sometimes return a name that could not be used to refer to the
filehandle, or sometimes it would return \f(CW\*(C`undef\*(C'\fR even when a filehandle
was selected.  Now it returns a typeglob reference in such cases.
.IP "\(bu" 4
\&\f(CW\*(C`PerlIO::get_layers\*(C'\fR no longer ignores some arguments that it thinks are
numeric, while treating others as filehandle names.  It is now consistent
for flat scalars (i.e., not references).
.IP "\(bu" 4
Unrecognized switches on \f(CW\*(C`#!\*(C'\fR line
.Sp
If a switch, such as \fB\-x\fR, that cannot occur on the \f(CW\*(C`#!\*(C'\fR line is used
there, perl dies with \*(L"Can't emulate...\*(R".
.Sp
It used to produce the same message for switches that perl did not
recognize at all, whether on the command line or the \f(CW\*(C`#!\*(C'\fR line.
.Sp
Now it produces the \*(L"Unrecognized switch\*(R" error message [perl #104288].
.IP "\(bu" 4
\&\f(CW\*(C`system\*(C'\fR now temporarily blocks the \s-1SIGCHLD\s0 signal handler, to prevent the
signal handler from stealing the exit status [perl #105700].
.IP "\(bu" 4
The \f(CW%n\fR formatting code for \f(CW\*(C`printf\*(C'\fR and \f(CW\*(C`sprintf\*(C'\fR, which causes the number
of characters to be assigned to the next argument, now actually
assigns the number of characters, instead of the number of bytes.
.Sp
It also works now with special lvalue functions like \f(CW\*(C`substr\*(C'\fR and with
nonexistent hash and array elements [perl #3471, #103492].
.IP "\(bu" 4
Perl skips copying values returned from a subroutine, for the sake of
speed, if doing so would make no observable difference.  Because of faulty
logic, this would happen with the
result of \f(CW\*(C`delete\*(C'\fR, \f(CW\*(C`shift\*(C'\fR or \f(CW\*(C`splice\*(C'\fR, even if the result was
referenced elsewhere.  It also did so with tied variables about to be freed
[perl #91844, #95548].
.IP "\(bu" 4
\&\f(CW\*(C`utf8::decode\*(C'\fR now refuses to modify read-only scalars [perl #91850].
.IP "\(bu" 4
Freeing \f(CW$_\fR inside a \f(CW\*(C`grep\*(C'\fR or \f(CW\*(C`map\*(C'\fR block, a code block embedded in a
regular expression, or an \f(CW@INC\fR filter (a subroutine returned by a
subroutine in \f(CW@INC\fR) used to result in double frees or crashes
[perl #91880, #92254, #92256].
.IP "\(bu" 4
\&\f(CW\*(C`eval\*(C'\fR returns \f(CW\*(C`undef\*(C'\fR in scalar context or an empty list in list
context when there is a run-time error.  When \f(CW\*(C`eval\*(C'\fR was passed a
string in list context and a syntax error occurred, it used to return a
list containing a single undefined element.  Now it returns an empty
list in list context for all errors [perl #80630].
.IP "\(bu" 4
\&\f(CW\*(C`goto &func\*(C'\fR no longer crashes, but produces an error message, when
the unwinding of the current subroutine's scope fires a destructor that
undefines the subroutine being \*(L"goneto\*(R" [perl #99850].
.IP "\(bu" 4
Perl now holds an extra reference count on the package that code is
currently compiling in.  This means that the following code no longer
crashes [perl #101486]:
.Sp
.Vb 3
\&    package Foo;
\&    BEGIN {*Foo:: = *Bar::}
\&    sub foo;
.Ve
.IP "\(bu" 4
The \f(CW\*(C`x\*(C'\fR repetition operator no longer crashes on 64\-bit builds with large
repeat counts [perl #94560].
.IP "\(bu" 4
Calling \f(CW\*(C`require\*(C'\fR on an implicit \f(CW$_\fR when \f(CW*CORE::GLOBAL::require\fR has
been overridden does not segfault anymore, and \f(CW$_\fR is now passed to the
overriding subroutine [perl #78260].
.IP "\(bu" 4
\&\f(CW\*(C`use\*(C'\fR and \f(CW\*(C`require\*(C'\fR are no longer affected by the I/O layers active in
the caller's scope (enabled by open.pm) [perl #96008].
.IP "\(bu" 4
\&\f(CW\*(C`our $::e\*'; $e\*'\*(C'\fR (which is invalid) no longer produces the \*(L"Compilation
error at lib/utf8_heavy.pl...\*(R" error message, which it started emitting in
5.10.0 [perl #99984].
.IP "\(bu" 4
On 64\-bit systems, \f(CW\*(C`read()\*(C'\fR now understands large string offsets beyond
the 32\-bit range.
.IP "\(bu" 4
Errors that occur when processing subroutine attributes no longer cause the
subroutine's op tree to leak.
.IP "\(bu" 4
Passing the same constant subroutine to both \f(CW\*(C`index\*(C'\fR and \f(CW\*(C`formline\*(C'\fR no
longer causes one or the other to fail [perl #89218]. (5.14.1)
.IP "\(bu" 4
List assignment to lexical variables declared with attributes in the same
statement (\f(CW\*(C`my ($x,@y) : blimp = (72,94)\*(C'\fR) stopped working in Perl 5.8.0.
It has now been fixed.
.IP "\(bu" 4
Perl 5.10.0 introduced some faulty logic that made \*(L"U*\*(R" in the middle of
a pack template equivalent to \*(L"U0\*(R" if the input string was empty.  This has
been fixed [perl #90160]. (5.14.2)
.IP "\(bu" 4
Destructors on objects were not called during global destruction on objects
that were not referenced by any scalars.  This could happen if an array
element were blessed (e.g., \f(CW\*(C`bless \e$a[0]\*(C'\fR) or if a closure referenced a
blessed variable (\f(CW\*(C`bless \emy @a; sub foo { @a }\*(C'\fR).
.Sp
Now there is an extra pass during global destruction to fire destructors on
any objects that might be left after the usual passes that check for
objects referenced by scalars [perl #36347].
.IP "\(bu" 4
Fixed a case where it was possible that a freed buffer may have been read
from when parsing a here document [perl #90128]. (5.14.1)
.IP "\(bu" 4
\&\f(CW\*(C`each(\f(CIARRAY\f(CW)\*(C'\fR is now wrapped in \f(CW\*(C`defined(...)\*(C'\fR, like \f(CW\*(C`each(\f(CIHASH\f(CW)\*(C'\fR,
inside a \f(CW\*(C`while\*(C'\fR condition [perl #90888].
.IP "\(bu" 4
A problem with context propagation when a \f(CW\*(C`do\*(C'\fR block is an argument to
\&\f(CW\*(C`return\*(C'\fR has been fixed.  It used to cause \f(CW\*(C`undef\*(C'\fR to be returned in
certain cases of a \f(CW\*(C`return\*(C'\fR inside an \f(CW\*(C`if\*(C'\fR block which itself is followed by
another \f(CW\*(C`return\*(C'\fR.
.IP "\(bu" 4
Calling \f(CW\*(C`index\*(C'\fR with a tainted constant no longer causes constants in
subsequently compiled code to become tainted [perl #64804].
.IP "\(bu" 4
Infinite loops like \f(CW\*(C`1 while 1\*(C'\fR used to stop \f(CW\*(C`strict \*(Aqsubs\*(Aq\*(C'\fR mode from
working for the rest of the block.
.IP "\(bu" 4
For list assignments like \f(CW\*(C`($a,$b) = ($b,$a)\*(C'\fR, Perl has to make a copy of
the items on the right-hand side before assignment them to the left.  For
efficiency's sake, it assigns the values on the right straight to the items
on the left if no one variable is mentioned on both sides, as in \f(CW\*(C`($a,$b) =
($c,$d)\*(C'\fR.  The logic for determining when it can cheat was faulty, in that
\&\f(CW\*(C`&&\*(C'\fR and \f(CW\*(C`||\*(C'\fR on the right-hand side could fool it.  So \f(CW\*(C`($a,$b) =
$some_true_value && ($b,$a)\*(C'\fR would end up assigning the value of \f(CW$b\fR to
both scalars.
.IP "\(bu" 4
Perl no longer tries to apply lvalue context to the string in
\&\f(CW\*(C`("string", $variable) ||= 1\*(C'\fR (which used to be an error).  Since the
left-hand side of \f(CW\*(C`||=\*(C'\fR is evaluated in scalar context, that's a scalar
comma operator, which gives all but the last item void context.  There is
no such thing as void lvalue context, so it was a mistake for Perl to try
to force it [perl #96942].
.IP "\(bu" 4
\&\f(CW\*(C`caller\*(C'\fR no longer leaks memory when called from the \s-1DB\s0 package if
\&\f(CW@DB::args\fR was assigned to after the first call to \f(CW\*(C`caller\*(C'\fR.  Carp
was triggering this bug [perl #97010]. (5.14.2)
.IP "\(bu" 4
\&\f(CW\*(C`close\*(C'\fR and similar filehandle functions, when called on built-in global
variables (like \f(CW$+\fR), used to die if the variable happened to hold the
undefined value, instead of producing the usual \*(L"Use of uninitialized
value\*(R" warning.
.IP "\(bu" 4
When autovivified file handles were introduced in Perl 5.6.0, \f(CW\*(C`readline\*(C'\fR
was inadvertently made to autovivify when called as \f(CW\*(C`readline($foo)\*(C'\fR (but
not as \f(CW\*(C`<$foo>\*(C'\fR).  It has now been fixed never to autovivify.
.IP "\(bu" 4
Calling an undefined anonymous subroutine (e.g., what \f(CW$x\fR holds after
\&\f(CW\*(C`undef &{$x = sub{}}\*(C'\fR) used to cause a \*(L"Not a \s-1CODE\s0 reference\*(R" error, which
has been corrected to \*(L"Undefined subroutine called\*(R" [perl #71154].
.IP "\(bu" 4
Causing \f(CW@DB::args\fR to be freed between uses of \f(CW\*(C`caller\*(C'\fR no longer
results in a crash [perl #93320].
.IP "\(bu" 4
\&\f(CW\*(C`setpgrp($foo)\*(C'\fR used to be equivalent to \f(CW\*(C`($foo, setpgrp)\*(C'\fR, because
\&\f(CW\*(C`setpgrp\*(C'\fR was ignoring its argument if there was just one.  Now it is
equivalent to \f(CW\*(C`setpgrp($foo,0)\*(C'\fR.
.IP "\(bu" 4
\&\f(CW\*(C`shmread\*(C'\fR was not setting the scalar flags correctly when reading from
shared memory, causing the existing cached numeric representation in the
scalar to persist [perl #98480].
.IP "\(bu" 4
\&\f(CW\*(C`++\*(C'\fR and \f(CW\*(C`\-\-\*(C'\fR now work on copies of globs, instead of dying.
.IP "\(bu" 4
\&\f(CW\*(C`splice()\*(C'\fR doesn't warn when truncating
.Sp
You can now limit the size of an array using \f(CW\*(C`splice(@a,MAX_LEN)\*(C'\fR without
worrying about warnings.
.IP "\(bu" 4
\&\f(CW$$\fR is no longer tainted.  Since this value comes directly from
\&\f(CW\*(C`getpid()\*(C'\fR, it is always safe.
.IP "\(bu" 4
The parser no longer leaks a filehandle if \s-1STDIN\s0 was closed before parsing
started [perl #37033].
.IP "\(bu" 4
\&\f(CW\*(C`die;\*(C'\fR with a non-reference, non-string, or magical (e.g., tainted)
value in $@ now properly propagates that value [perl #111654].
.SH "Known Problems"
.IX Header "Known Problems"
.IP "\(bu" 4
On Solaris, we have two kinds of failure.
.Sp
If \fImake\fR is Sun's \fImake\fR, we get an error about a badly formed macro
assignment in the \fIMakefile\fR.  That happens when \fI./Configure\fR tries to
make depends.  \fIConfigure\fR then exits 0, but further \fImake\fR\-ing fails.
.Sp
If \fImake\fR is \fIgmake\fR, \fIConfigure\fR completes, then we get errors related
to \fI/usr/include/stdbool.h\fR
.IP "\(bu" 4
On Win32, a number of tests hang unless \s-1STDERR\s0 is redirected.  The cause of
this is still under investigation.
.IP "\(bu" 4
When building as root with a umask that prevents files from being
other-readable, \fIt/op/filetest.t\fR will fail.  This is a test bug, not a
bug in perl's behavior.
.IP "\(bu" 4
Configuring with a recent gcc and link-time-optimization, such as
\&\f(CW\*(C`Configure \-Doptimize=\*(Aq\-O2 \-flto\*(Aq\*(C'\fR fails
because the optimizer optimizes away some of Configure's tests.  A
workaround is to omit the \f(CW\*(C`\-flto\*(C'\fR flag when running Configure, but add
it back in while actually building, something like
.Sp
.Vb 2
\&    sh Configure \-Doptimize=\-O2                                             
\&    make OPTIMIZE=\*(Aq\-O2 \-flto\*(Aq
.Ve
.IP "\(bu" 4
The following \s-1CPAN\s0 modules have test failures with perl 5.16.  Patches have
been submitted for all of these, so hopefully there will be new releases
soon:
.RS 4
.IP "\(bu" 4
Date::Pcalc version 6.1
.IP "\(bu" 4
Module::CPANTS::Analyse version 0.85
.Sp
This fails due to problems in Module::Find 0.10 and File::MMagic
1.27.
.IP "\(bu" 4
PerlIO::Util version 0.72
.RE
.RS 4
.RE
.SH "Acknowledgements"
.IX Header "Acknowledgements"
Perl 5.16.0 represents approximately 12 months of development since Perl
5.14.0 and contains approximately 590,000 lines of changes across 2,500
files from 139 authors.
.PP
Perl continues to flourish into its third decade thanks to a vibrant
community of users and developers.  The following people are known to
have contributed the improvements that became Perl 5.16.0:
.PP
Aaron Crane, Abhijit Menon-Sen, Abigail, Alan Haggai Alavi, Alberto
Simo\*~es, Alexandr Ciornii, Andreas Ko\*:nig, Andy Dougherty, Aristotle
Pagaltzis, Bo Johansson, Bo Lindbergh, Breno G. de Oliveira, brian d
foy, Brian Fraser, Brian Greenfield, Carl Hayter, Chas. Owens,
Chia-liang Kao, Chip Salzenberg, Chris 'BinGOs' Williams, Christian
Hansen, Christopher J. Madsen, chromatic, Claes Jacobsson, Claudio
Ramirez, Craig A. Berry, Damian Conway, Daniel Kahn Gillmor, Darin
McBride, Dave Rolsky, David Cantrell, David Golden, David Leadbeater,
David Mitchell, Dee Newcum, Dennis Kaarsemaker, Dominic Hargreaves,
Douglas Christopher Wilson, Eric Brine, Father Chrysostomos, Florian
Ragwitz, Frederic Briere, George Greer, Gerard Goossen, Gisle Aas,
H.Merijn Brand, Hojung Youn, Ian Goodacre, James E Keenan, Jan Dubois,
Jerry D. Hedden, Jesse Luehrs, Jesse Vincent, Jilles Tjoelker, Jim
Cromie, Jim Meyering, Joel Berger, Johan Vromans, Johannes Plunien, John
Hawkinson, John P. Linderman, John Peacock, Joshua ben Jore, Juerd
Waalboer, Karl Williamson, Karthik Rajagopalan, Keith Thompson, Kevin J.
Woolley, Kevin Ryde, Laurent Dami, Leo Lapworth, Leon Brocard, Leon
Timmermans, Louis Strous, Lukas Mai, Marc Green, Marcel Gru\*:nauer, Mark
A.  Stratman, Mark Dootson, Mark Jason Dominus, Martin Hasch, Matthew
Horsfall, Max Maischein, Michael G Schwern, Michael Witten, Mike
Sheldrake, Moritz Lenz, Nicholas Clark, Niko Tyni, Nuno Carvalho, Pau
Amma, Paul Evans, Paul Green, Paul Johnson, Perlover, Peter John Acklam,
Peter Martini, Peter Scott, Phil Monsen, Pino Toscano, Rafael
Garcia-Suarez, Rainer Tammer, Reini Urban, Ricardo Signes, Robin Barker,
Rodolfo Carvalho, Salvador Fandin\*~o, Sam Kimbrel, Samuel Thibault, Shawn
M Moore, Shigeya Suzuki, Shirakata Kentaro, Shlomi Fish, Sisyphus,
Slaven Rezic, Spiros Denaxas, Steffen Mu\*:ller, Steffen Schwigon, Stephen
Bennett, Stephen Oberholtzer, Stevan Little, Steve Hay, Steve Peters,
Thomas Sibley, Thorsten Glaser, Timothe Litt, Todd Rinaldo, Tom
Christiansen, Tom Hukins, Tony Cook, Vadim Konovalov, Vincent Pit,
Vladimir Timofeev, Walt Mankowski, Yves Orton, Zefram, Zsba\*'n Ambrus,
\&\*(AEvar Arnfjo\*:r\*(d- Bjarmason.
.PP
The list above is almost certainly incomplete as it is automatically
generated from version control history.  In particular, it does not
include the names of the (very much appreciated) contributors who
reported issues to the Perl bug tracker.
.PP
Many of the changes included in this version originated in the \s-1CPAN\s0
modules included in Perl's core.  We're grateful to the entire \s-1CPAN\s0
community for helping Perl to flourish.
.PP
For a more complete list of all of Perl's historical contributors,
please see the \fI\s-1AUTHORS\s0\fR file in the Perl source distribution.
.SH "Reporting Bugs"
.IX Header "Reporting Bugs"
If you find what you think is a bug, you might check the articles
recently posted to the comp.lang.perl.misc newsgroup and the perl
bug database at <http://rt.perl.org/perlbug/>.  There may also be
information at <http://www.perl.org/>, the Perl Home Page.
.PP
If you believe you have an unreported bug, please run the perlbug
program included with your release.  Be sure to trim your bug down
to a tiny but sufficient test case.  Your bug report, along with the
output of \f(CW\*(C`perl \-V\*(C'\fR, will be sent off to perlbug@perl.org to be
analysed by the Perl porting team.
.PP
If the bug you are reporting has security implications, which make it
inappropriate to send to a publicly archived mailing list, then please
send it to perl5\-security\-report@perl.org.  This points to a closed
subscription unarchived mailing list, which includes all core
committers, who will be able to help assess the impact of issues, figure
out a resolution, and help co-ordinate the release of patches to
mitigate or fix the problem across all platforms on which Perl is
supported.  Please use this address only for security issues in the Perl
core, not for modules independently distributed on \s-1CPAN\s0.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
The \fIChanges\fR file for an explanation of how to view exhaustive details
on what changed.
.PP
The \fI\s-1INSTALL\s0\fR file for how to build Perl.
.PP
The \fI\s-1README\s0\fR file for general stuff.
.PP
The \fIArtistic\fR and \fICopying\fR files for copyright information.
                                                                                                                                                                                                                                                                                 osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perl5160delta5.18.1                          0100644 0001750 0001750 00000472011 12566207432 023550  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERL5160DELTA 1"
.TH PERL5160DELTA 1 "2013-11-04" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perl5160delta \- what is new for perl v5.16.0
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document describes differences between the 5.14.0 release and
the 5.16.0 release.
.PP
If you are upgrading from an earlier release such as 5.12.0, first read
perl5140delta, which describes differences between 5.12.0 and
5.14.0.
.PP
Some bug fixes in this release have been backported to later
releases of 5.14.x.  Those are indicated with the 5.14.x version in
parentheses.
.SH "Notice"
.IX Header "Notice"
With the release of Perl 5.16.0, the 5.12.x series of releases is now out of
its support period.  There may be future 5.12.x releases, but only in the
event of a critical security issue.  Users of Perl 5.12 or earlier should
consider upgrading to a more recent release of Perl.
.PP
This policy is described in greater detail in
perlpolicy.
.SH "Core Enhancements"
.IX Header "Core Enhancements"
.ie n .SS """use \fIVERSION\fP"""
.el .SS "\f(CWuse \fP\f(CIVERSION\fP\f(CW\fP"
.IX Subsection "use VERSION"
As of this release, version declarations like \f(CW\*(C`use v5.16\*(C'\fR now disable
all features before enabling the new feature bundle.  This means that
the following holds true:
.PP
.Vb 4
\&    use 5.016;
\&    # only 5.16 features enabled here
\&    use 5.014;
\&    # only 5.14 features enabled here (not 5.16)
.Ve
.PP
\&\f(CW\*(C`use v5.12\*(C'\fR and higher continue to enable strict, but explicit \f(CW\*(C`use
strict\*(C'\fR and \f(CW\*(C`no strict\*(C'\fR now override the version declaration, even
when they come first:
.PP
.Vb 3
\&    no strict;
\&    use 5.012;
\&    # no strict here
.Ve
.PP
There is a new \*(L":default\*(R" feature bundle that represents the set of
features enabled before any version declaration or \f(CW\*(C`use feature\*(C'\fR has
been seen.  Version declarations below 5.10 now enable the \*(L":default\*(R"
feature set.  This does not actually change the behavior of \f(CW\*(C`use
v5.8\*(C'\fR, because features added to the \*(L":default\*(R" set are those that were
traditionally enabled by default, before they could be turned off.
.PP
\&\f(CW\*(C`no feature\*(C'\fR now resets to the default feature set.  To disable all
features (which is likely to be a pretty special-purpose request, since
it presumably won't match any named set of semantics) you can now  
write \f(CW\*(C`no feature \*(Aq:all\*(Aq\*(C'\fR.
.PP
\&\f(CW$[\fR is now disabled under \f(CW\*(C`use v5.16\*(C'\fR.  It is part of the default
feature set and can be turned on or off explicitly with \f(CW\*(C`use feature
\&\*(Aqarray_base\*(Aq\*(C'\fR.
.ie n .SS """_\|_SUB_\|_"""
.el .SS "\f(CW_\|_SUB_\|_\fP"
.IX Subsection "__SUB__"
The new \f(CW\*(C`_\|_SUB_\|_\*(C'\fR token, available under the \f(CW\*(C`current_sub\*(C'\fR feature
(see feature) or \f(CW\*(C`use v5.16\*(C'\fR, returns a reference to the current
subroutine, making it easier to write recursive closures.
.SS "New and Improved Built-ins"
.IX Subsection "New and Improved Built-ins"
\fIMore consistent \f(CI\*(C`eval\*(C'\fI\fR
.IX Subsection "More consistent eval"
.PP
The \f(CW\*(C`eval\*(C'\fR operator sometimes treats a string argument as a sequence of
characters and sometimes as a sequence of bytes, depending on the
internal encoding.  The internal encoding is not supposed to make any
difference, but there is code that relies on this inconsistency.
.PP
The new \f(CW\*(C`unicode_eval\*(C'\fR and \f(CW\*(C`evalbytes\*(C'\fR features (enabled under \f(CW\*(C`use
5.16.0\*(C'\fR) resolve this.  The \f(CW\*(C`unicode_eval\*(C'\fR feature causes \f(CW\*(C`eval
$string\*(C'\fR to treat the string always as Unicode.  The \f(CW\*(C`evalbytes\*(C'\fR
features provides a function, itself called \f(CW\*(C`evalbytes\*(C'\fR, which
evaluates its argument always as a string of bytes.
.PP
These features also fix oddities with source filters leaking to outer
dynamic scopes.
.PP
See feature for more detail.
.PP
\fI\f(CI\*(C`substr\*(C'\fI lvalue revamp\fR
.IX Subsection "substr lvalue revamp"
.PP
When \f(CW\*(C`substr\*(C'\fR is called in lvalue or potential lvalue context with two
or three arguments, a special lvalue scalar is returned that modifies
the original string (the first argument) when assigned to.
.PP
Previously, the offsets (the second and third arguments) passed to
\&\f(CW\*(C`substr\*(C'\fR would be converted immediately to match the string, negative
offsets being translated to positive and offsets beyond the end of the
string being truncated.
.PP
Now, the offsets are recorded without modification in the special
lvalue scalar that is returned, and the original string is not even
looked at by \f(CW\*(C`substr\*(C'\fR itself, but only when the returned lvalue is
read or modified.
.PP
These changes result in an incompatible change:
.PP
If the original string changes length after the call to \f(CW\*(C`substr\*(C'\fR but
before assignment to its return value, negative offsets will remember
their position from the end of the string, affecting code like this:
.PP
.Vb 5
\&    my $string = "string";
\&    my $lvalue = \esubstr $string, \-4, 2;
\&    print $$lvalue, "\en"; # prints "ri"
\&    $string = "bailing twine";
\&    print $$lvalue, "\en"; # prints "wi"; used to print "il"
.Ve
.PP
The same thing happens with an omitted third argument.  The returned
lvalue will always extend to the end of the string, even if the string
becomes longer.
.PP
Since this change also allowed many bugs to be fixed (see
"The \f(CW\*(C`substr\*(C'\fR operator"), and since the behavior
of negative offsets has never been specified, the
change was deemed acceptable.
.PP
\fIReturn value of \f(CI\*(C`tied\*(C'\fI\fR
.IX Subsection "Return value of tied"
.PP
The value returned by \f(CW\*(C`tied\*(C'\fR on a tied variable is now the actual
scalar that holds the object to which the variable is tied.  This
lets ties be weakened with \f(CW\*(C`Scalar::Util::weaken(tied
$tied_variable)\*(C'\fR.
.SS "Unicode Support"
.IX Subsection "Unicode Support"
\fISupports (\fIalmost\fI) Unicode 6.1\fR
.IX Subsection "Supports (almost) Unicode 6.1"
.PP
Besides the addition of whole new scripts, and new characters in
existing scripts, this new version of Unicode, as always, makes some
changes to existing characters.  One change that may trip up some
applications is that the General Category of two characters in the
Latin\-1 range, \s-1PILCROW SIGN\s0 and \s-1SECTION SIGN,\s0 has been changed from
Other_Symbol to Other_Punctuation.  The same change has been made for
a character in each of Tibetan, Ethiopic, and Aegean.
The code points U+3248..U+324F (\s-1CIRCLED NUMBER TEN ON BLACK SQUARE\s0
through \s-1CIRCLED NUMBER EIGHTY ON BLACK SQUARE\s0) have had their General
Category changed from Other_Symbol to Other_Numeric.  The Line Break
property has changes for Hebrew and Japanese; and because of
other changes in 6.1, the Perl regular expression construct \f(CW\*(C`\eX\*(C'\fR now
works differently for some characters in Thai and Lao.
.PP
New aliases (synonyms) have been defined for many property values;
these, along with the previously existing ones, are all cross-indexed in
perluniprops.
.PP
The return value of \f(CW\*(C`charnames::viacode()\*(C'\fR is affected by other
changes:
.PP
.Vb 10
\& Code point      Old Name             New Name
\&   U+000A    LINE FEED (LF)        LINE FEED
\&   U+000C    FORM FEED (FF)        FORM FEED
\&   U+000D    CARRIAGE RETURN (CR)  CARRIAGE RETURN
\&   U+0085    NEXT LINE (NEL)       NEXT LINE
\&   U+008E    SINGLE\-SHIFT 2        SINGLE\-SHIFT\-2
\&   U+008F    SINGLE\-SHIFT 3        SINGLE\-SHIFT\-3
\&   U+0091    PRIVATE USE 1         PRIVATE USE\-1
\&   U+0092    PRIVATE USE 2         PRIVATE USE\-2
\&   U+2118    SCRIPT CAPITAL P      WEIERSTRASS ELLIPTIC FUNCTION
.Ve
.PP
Perl will accept any of these names as input, but
\&\f(CW\*(C`charnames::viacode()\*(C'\fR now returns the new name of each pair.  The
change for U+2118 is considered by Unicode to be a correction, that is
the original name was a mistake (but again, it will remain forever valid
to use it to refer to U+2118).  But most of these changes are the
fallout of the mistake Unicode 6.0 made in naming a character used in
Japanese cell phones to be \*(L"\s-1BELL\*(R",\s0 which conflicts with the longstanding
industry use of (and Unicode's recommendation to use) that name
to mean the \s-1ASCII\s0 control character at U+0007.  Therefore, that name
has been deprecated in Perl since v5.14, and any use of it will raise a
warning message (unless turned off).  The name \*(L"\s-1ALERT\*(R"\s0 is now the
preferred name for this code point, with \*(L"\s-1BEL\*(R"\s0 an acceptable short
form.  The name for the new cell phone character, at code point U+1F514,
remains undefined in this version of Perl (hence we don't 
implement quite all of Unicode 6.1), but starting in v5.18, \s-1BELL\s0 will mean
this character, and not U+0007.
.PP
Unicode has taken steps to make sure that this sort of mistake does not
happen again.  The Standard now includes all generally accepted
names and abbreviations for control characters, whereas previously it
didn't (though there were recommended names for most of them, which Perl
used).  This means that most of those recommended names are now
officially in the Standard.  Unicode did not recommend names for the
four code points listed above between U+008E and U+008F, and in
standardizing them Unicode subtly changed the names that Perl had
previously given them, by replacing the final blank in each name by a
hyphen.  Unicode also officially accepts names that Perl had deprecated,
such as \s-1FILE SEPARATOR. \s0 Now the only deprecated name is \s-1BELL.\s0
Finally, Perl now uses the new official names instead of the old
(now considered obsolete) names for the first four code points in the
list above (the ones which have the parentheses in them).
.PP
Now that the names have been placed in the Unicode standard, these kinds
of changes should not happen again, though corrections, such as to
U+2118, are still possible.
.PP
Unicode also added some name abbreviations, which Perl now accepts:
\&\s-1SP\s0 for \s-1SPACE\s0;
\&\s-1TAB\s0 for \s-1CHARACTER TABULATION\s0;
\&\s-1NEW LINE, END OF LINE, NL,\s0 and \s-1EOL\s0 for \s-1LINE FEED\s0;
LOCKING-SHIFT \s-1ONE\s0 for \s-1SHIFT OUT\s0;
LOCKING-SHIFT \s-1ZERO\s0 for \s-1SHIFT IN\s0;
and \s-1ZWNBSP\s0 for \s-1ZERO WIDTH\s0 NO-BREAK \s-1SPACE.\s0
.PP
More details on this version of Unicode are provided in
<http://www.unicode.org/versions/Unicode6.1.0/>.
.PP
\fI\f(CI\*(C`use charnames\*(C'\fI is no longer needed for \f(CI\*(C`\eN{\f(CIname\f(CI}\*(C'\fI\fR
.IX Subsection "use charnames is no longer needed for N{name}"
.PP
When \f(CW\*(C`\eN{\f(CIname\f(CW}\*(C'\fR is encountered, the \f(CW\*(C`charnames\*(C'\fR module is now
automatically loaded when needed as if the \f(CW\*(C`:full\*(C'\fR and \f(CW\*(C`:short\*(C'\fR
options had been specified.  See charnames for more information.
.PP
\fI\f(CI\*(C`\eN{...}\*(C'\fI can now have Unicode loose name matching\fR
.IX Subsection "N{...} can now have Unicode loose name matching"
.PP
This is described in the \f(CW\*(C`charnames\*(C'\fR item in
\&\*(L"Updated Modules and Pragmata\*(R" below.
.PP
\fIUnicode Symbol Names\fR
.IX Subsection "Unicode Symbol Names"
.PP
Perl now has proper support for Unicode in symbol names.  It used to be
that \f(CW\*(C`*{$foo}\*(C'\fR would ignore the internal \s-1UTF8\s0 flag and use the bytes of
the underlying representation to look up the symbol.  That meant that
\&\f(CW\*(C`*{"\ex{100}"}\*(C'\fR and \f(CW\*(C`*{"\exc4\ex80"}\*(C'\fR would return the same thing.  All
these parts of Perl have been fixed to account for Unicode:
.IP "\(bu" 4
Method names (including those passed to \f(CW\*(C`use overload\*(C'\fR)
.IP "\(bu" 4
Typeglob names (including names of variables, subroutines, and filehandles)
.IP "\(bu" 4
Package names
.IP "\(bu" 4
\&\f(CW\*(C`goto\*(C'\fR
.IP "\(bu" 4
Symbolic dereferencing
.IP "\(bu" 4
Second argument to \f(CW\*(C`bless()\*(C'\fR and \f(CW\*(C`tie()\*(C'\fR
.IP "\(bu" 4
Return value of \f(CW\*(C`ref()\*(C'\fR
.IP "\(bu" 4
Subroutine prototypes
.IP "\(bu" 4
Attributes
.IP "\(bu" 4
Various warnings and error messages that mention variable names or values,
methods, etc.
.PP
In addition, a parsing bug has been fixed that prevented \f(CW\*(C`*{e\*'}\*(C'\fR from
implicitly quoting the name, but instead interpreted it as \f(CW\*(C`*{+e\*'}\*(C'\fR, which
would cause a strict violation.
.PP
\&\f(CW\*(C`*{"*a::b"}\*(C'\fR automatically strips off the * if it is followed by an \s-1ASCII\s0
letter.  That has been extended to all Unicode identifier characters.
.PP
One-character non-ASCII non-punctuation variables (like \f(CW\*(C`$e\*'\*(C'\fR) are now
subject to \*(L"Used only once\*(R" warnings.  They used to be exempt, as they
were treated as punctuation variables.
.PP
Also, single-character Unicode punctuation variables (like \f(CW$X\fR) are now
supported [perl #69032].
.PP
\fIImproved ability to mix locales and Unicode, including \s-1UTF\-8\s0 locales\fR
.IX Subsection "Improved ability to mix locales and Unicode, including UTF-8 locales"
.PP
An optional parameter has been added to \f(CW\*(C`use locale\*(C'\fR
.PP
.Vb 1
\& use locale \*(Aq:not_characters\*(Aq;
.Ve
.PP
which tells Perl to use all but the \f(CW\*(C`LC_CTYPE\*(C'\fR and \f(CW\*(C`LC_COLLATE\*(C'\fR
portions of the current locale.  Instead, the character set is assumed
to be Unicode.  This lets locales and Unicode be seamlessly mixed,
including the increasingly frequent \s-1UTF\-8\s0 locales.  When using this
hybrid form of locales, the \f(CW\*(C`:locale\*(C'\fR layer to the open pragma can
be used to interface with the file system, and there are \s-1CPAN\s0 modules
available for \s-1ARGV\s0 and environment variable conversions.
.PP
Full details are in perllocale.
.PP
\fINew function \f(CI\*(C`fc\*(C'\fI and corresponding escape sequence \f(CI\*(C`\eF\*(C'\fI for Unicode foldcase\fR
.IX Subsection "New function fc and corresponding escape sequence F for Unicode foldcase"
.PP
Unicode foldcase is an extension to lowercase that gives better results
when comparing two strings case-insensitively.  It has long been used
internally in regular expression \f(CW\*(C`/i\*(C'\fR matching.  Now it is available
explicitly through the new \f(CW\*(C`fc\*(C'\fR function call (enabled by
\&\f(CW"use\ feature\ \*(Aqfc\*(Aq"\fR, or \f(CW\*(C`use v5.16\*(C'\fR, or explicitly callable via
\&\f(CW\*(C`CORE::fc\*(C'\fR) or through the new \f(CW\*(C`\eF\*(C'\fR sequence in double-quotish
strings.
.PP
Full details are in \*(L"fc\*(R" in perlfunc.
.PP
\fIThe Unicode \f(CI\*(C`Script_Extensions\*(C'\fI property is now supported.\fR
.IX Subsection "The Unicode Script_Extensions property is now supported."
.PP
New in Unicode 6.0, this is an improved \f(CW\*(C`Script\*(C'\fR property.  Details
are in \*(L"Scripts\*(R" in perlunicode.
.SS "\s-1XS\s0 Changes"
.IX Subsection "XS Changes"
\fIImproved typemaps for Some Builtin Types\fR
.IX Subsection "Improved typemaps for Some Builtin Types"
.PP
Most \s-1XS\s0 authors will know there is a longstanding bug in the
\&\s-1OUTPUT\s0 typemap for T_AVREF (\f(CW\*(C`AV*\*(C'\fR), T_HVREF (\f(CW\*(C`HV*\*(C'\fR), T_CVREF (\f(CW\*(C`CV*\*(C'\fR),
and T_SVREF (\f(CW\*(C`SVREF\*(C'\fR or \f(CW\*(C`\e$foo\*(C'\fR) that requires manually decrementing
the reference count of the return value instead of the typemap taking
care of this.  For backwards-compatibility, this cannot be changed in the
default typemaps.  But we now provide additional typemaps
\&\f(CW\*(C`T_AVREF_REFCOUNT_FIXED\*(C'\fR, etc. that do not exhibit this bug.  Using
them in your extension is as simple as having one line in your
\&\f(CW\*(C`TYPEMAP\*(C'\fR section:
.PP
.Vb 1
\&  HV*   T_HVREF_REFCOUNT_FIXED
.Ve
.PP
\fI\f(CI\*(C`is_utf8_char()\*(C'\fI\fR
.IX Subsection "is_utf8_char()"
.PP
The XS-callable function \f(CW\*(C`is_utf8_char()\*(C'\fR, when presented with
malformed \s-1UTF\-8\s0 input, can read up to 12 bytes beyond the end of the
string.  This cannot be fixed without changing its \s-1API,\s0 and so its
use is now deprecated.  Use \f(CW\*(C`is_utf8_char_buf()\*(C'\fR (described just below)
instead.
.PP
\fIAdded \f(CI\*(C`is_utf8_char_buf()\*(C'\fI\fR
.IX Subsection "Added is_utf8_char_buf()"
.PP
This function is designed to replace the deprecated \*(L"\fIis_utf8_char()\fR\*(R"
function.  It includes an extra parameter to make sure it doesn't read
past the end of the input buffer.
.PP
\fIOther \f(CI\*(C`is_utf8_foo()\*(C'\fI functions, as well as \f(CI\*(C`utf8_to_foo()\*(C'\fI, etc.\fR
.IX Subsection "Other is_utf8_foo() functions, as well as utf8_to_foo(), etc."
.PP
Most other XS-callable functions that take \s-1UTF\-8\s0 encoded input
implicitly assume that the \s-1UTF\-8\s0 is valid (not malformed) with respect to
buffer length.  Do not do things such as change a character's case or
see if it is alphanumeric without first being sure that it is valid
\&\s-1UTF\-8. \s0 This can be safely done for a whole string by using one of the
functions \f(CW\*(C`is_utf8_string()\*(C'\fR, \f(CW\*(C`is_utf8_string_loc()\*(C'\fR, and
\&\f(CW\*(C`is_utf8_string_loclen()\*(C'\fR.
.PP
\fINew Pad \s-1API\s0\fR
.IX Subsection "New Pad API"
.PP
Many new functions have been added to the \s-1API\s0 for manipulating lexical
pads.  See \*(L"Pad Data Structures\*(R" in perlapi for more information.
.SS "Changes to Special Variables"
.IX Subsection "Changes to Special Variables"
\fI\f(CI$$\fI can be assigned to\fR
.IX Subsection "$$ can be assigned to"
.PP
\&\f(CW$$\fR was made read-only in Perl 5.8.0.  But only sometimes: \f(CW\*(C`local $$\*(C'\fR
would make it writable again.  Some \s-1CPAN\s0 modules were using \f(CW\*(C`local $$\*(C'\fR or
\&\s-1XS\s0 code to bypass the read-only check, so there is no reason to keep \f(CW$$\fR
read-only.  (This change also allowed a bug to be fixed while maintaining
backward compatibility.)
.PP
\fI\f(CI$^X\fI converted to an absolute path on FreeBSD, \s-1OS X\s0 and Solaris\fR
.IX Subsection "$^X converted to an absolute path on FreeBSD, OS X and Solaris"
.PP
\&\f(CW$^X\fR is now converted to an absolute path on \s-1OS X,\s0 FreeBSD (without
needing \fI/proc\fR mounted) and Solaris 10 and 11.  This augments the
previous approach of using \fI/proc\fR on Linux, FreeBSD, and NetBSD
(in all cases, where mounted).
.PP
This makes relocatable perl installations more useful on these platforms.
(See \*(L"Relocatable \f(CW@INC\fR\*(R" in \fI\s-1INSTALL\s0\fR)
.SS "Debugger Changes"
.IX Subsection "Debugger Changes"
\fIFeatures inside the debugger\fR
.IX Subsection "Features inside the debugger"
.PP
The current Perl's feature bundle is now enabled for commands entered
in the interactive debugger.
.PP
\fINew option for the debugger's \f(BIt\fI command\fR
.IX Subsection "New option for the debugger's t command"
.PP
The \fBt\fR command in the debugger, which toggles tracing mode, now
accepts a numeric argument that determines how many levels of subroutine
calls to trace.
.PP
\fI\f(CI\*(C`enable\*(C'\fI and \f(CI\*(C`disable\*(C'\fI\fR
.IX Subsection "enable and disable"
.PP
The debugger now has \f(CW\*(C`disable\*(C'\fR and \f(CW\*(C`enable\*(C'\fR commands for disabling
existing breakpoints and re-enabling them.  See perldebug.
.PP
\fIBreakpoints with file names\fR
.IX Subsection "Breakpoints with file names"
.PP
The debugger's \*(L"b\*(R" command for setting breakpoints now lets a line
number be prefixed with a file name.  See
\&\*(L"b [file]:[line] [condition]\*(R" in perldebug.
.ie n .SS "The ""CORE"" Namespace"
.el .SS "The \f(CWCORE\fP Namespace"
.IX Subsection "The CORE Namespace"
\fIThe \f(CI\*(C`CORE::\*(C'\fI prefix\fR
.IX Subsection "The CORE:: prefix"
.PP
The \f(CW\*(C`CORE::\*(C'\fR prefix can now be used on keywords enabled by
feature.pm, even outside the scope of \f(CW\*(C`use feature\*(C'\fR.
.PP
\fISubroutines in the \f(CI\*(C`CORE\*(C'\fI namespace\fR
.IX Subsection "Subroutines in the CORE namespace"
.PP
Many Perl keywords are now available as subroutines in the \s-1CORE\s0 namespace.
This lets them be aliased:
.PP
.Vb 2
\&    BEGIN { *entangle = \e&CORE::tie }
\&    entangle $variable, $package, @args;
.Ve
.PP
And for prototypes to be bypassed:
.PP
.Vb 5
\&    sub mytie(\e[%$*@]$@) {
\&        my ($ref, $pack, @args) = @_;
\&        ... do something ...
\&        goto &CORE::tie;
\&    }
.Ve
.PP
Some of these cannot be called through references or via \f(CW&foo\fR syntax,
but must be called as barewords.
.PP
See \s-1CORE\s0 for details.
.SS "Other Changes"
.IX Subsection "Other Changes"
\fIAnonymous handles\fR
.IX Subsection "Anonymous handles"
.PP
Automatically generated file handles are now named _\|_ANONIO_\|_ when the
variable name cannot be determined, rather than \f(CW$_\fR\|_ANONIO_\|_.
.PP
\fIAutoloaded sort Subroutines\fR
.IX Subsection "Autoloaded sort Subroutines"
.PP
Custom sort subroutines can now be autoloaded [perl #30661]:
.PP
.Vb 2
\&    sub AUTOLOAD { ... }
\&    @sorted = sort foo @list; # uses AUTOLOAD
.Ve
.PP
\fI\f(CI\*(C`continue\*(C'\fI no longer requires the \*(L"switch\*(R" feature\fR
.IX Subsection "continue no longer requires the switch feature"
.PP
The \f(CW\*(C`continue\*(C'\fR keyword has two meanings.  It can introduce a \f(CW\*(C`continue\*(C'\fR
block after a loop, or it can exit the current \f(CW\*(C`when\*(C'\fR block.  Up to now,
the latter meaning was valid only with the \*(L"switch\*(R" feature enabled, and
was a syntax error otherwise.  Since the main purpose of feature.pm is to
avoid conflicts with user-defined subroutines, there is no reason for
\&\f(CW\*(C`continue\*(C'\fR to depend on it.
.PP
\fIDTrace probes for interpreter phase change\fR
.IX Subsection "DTrace probes for interpreter phase change"
.PP
The \f(CW\*(C`phase\-change\*(C'\fR probes will fire when the interpreter's phase
changes, which tracks the \f(CW\*(C`${^GLOBAL_PHASE}\*(C'\fR variable.  \f(CW\*(C`arg0\*(C'\fR is
the new phase name; \f(CW\*(C`arg1\*(C'\fR is the old one.  This is useful 
for limiting your instrumentation to one or more of: compile time,
run time, or destruct time.
.PP
\fI\f(CI\*(C`_\|_FILE_\|_()\*(C'\fI Syntax\fR
.IX Subsection "__FILE__() Syntax"
.PP
The \f(CW\*(C`_\|_FILE_\|_\*(C'\fR, \f(CW\*(C`_\|_LINE_\|_\*(C'\fR and \f(CW\*(C`_\|_PACKAGE_\|_\*(C'\fR tokens can now be written
with an empty pair of parentheses after them.  This makes them parse the
same way as \f(CW\*(C`time\*(C'\fR, \f(CW\*(C`fork\*(C'\fR and other built-in functions.
.PP
\fIThe \f(CI\*(C`\e$\*(C'\fI prototype accepts any scalar lvalue\fR
.IX Subsection "The $ prototype accepts any scalar lvalue"
.PP
The \f(CW\*(C`\e$\*(C'\fR and \f(CW\*(C`\e[$]\*(C'\fR subroutine prototypes now accept any scalar lvalue
argument.  Previously they accepted only scalars beginning with \f(CW\*(C`$\*(C'\fR and
hash and array elements.  This change makes them consistent with the way
the built-in \f(CW\*(C`read\*(C'\fR and \f(CW\*(C`recv\*(C'\fR functions (among others) parse their
arguments.  This means that one can override the built-in functions with
custom subroutines that parse their arguments the same way.
.PP
\fI\f(CI\*(C`_\*(C'\fI in subroutine prototypes\fR
.IX Subsection "_ in subroutine prototypes"
.PP
The \f(CW\*(C`_\*(C'\fR character in subroutine prototypes is now allowed before \f(CW\*(C`@\*(C'\fR or
\&\f(CW\*(C`%\*(C'\fR.
.SH "Security"
.IX Header "Security"
.ie n .SS "Use ""is_utf8_char_buf()"" and not ""is_utf8_char()"""
.el .SS "Use \f(CWis_utf8_char_buf()\fP and not \f(CWis_utf8_char()\fP"
.IX Subsection "Use is_utf8_char_buf() and not is_utf8_char()"
The latter function is now deprecated because its \s-1API\s0 is insufficient to
guarantee that it doesn't read (up to 12 bytes in the worst case) beyond
the end of its input string.  See
\&\fIis_utf8_char_buf()\fR.
.SS "Malformed \s-1UTF\-8\s0 input could cause attempts to read beyond the end of the buffer"
.IX Subsection "Malformed UTF-8 input could cause attempts to read beyond the end of the buffer"
Two new XS-accessible functions, \f(CW\*(C`utf8_to_uvchr_buf()\*(C'\fR and
\&\f(CW\*(C`utf8_to_uvuni_buf()\*(C'\fR are now available to prevent this, and the Perl
core has been converted to use them.
See \*(L"Internal Changes\*(R".
.ie n .SS """File::Glob::bsd_glob()"" memory error with \s-1GLOB_ALTDIRFUNC \s0(\s-1CVE\-2011\-2728\s0)."
.el .SS "\f(CWFile::Glob::bsd_glob()\fP memory error with \s-1GLOB_ALTDIRFUNC \s0(\s-1CVE\-2011\-2728\s0)."
.IX Subsection "File::Glob::bsd_glob() memory error with GLOB_ALTDIRFUNC (CVE-2011-2728)."
Calling \f(CW\*(C`File::Glob::bsd_glob\*(C'\fR with the unsupported flag
\&\s-1GLOB_ALTDIRFUNC\s0 would cause an access violation / segfault.  A Perl
program that accepts a flags value from an external source could expose
itself to denial of service or arbitrary code execution attacks.  There
are no known exploits in the wild.  The problem has been corrected by
explicitly disabling all unsupported flags and setting unused function
pointers to null.  Bug reported by Cle\*'ment Lecigne. (5.14.2)
.ie n .SS "Privileges are now set correctly when assigning to $("
.el .SS "Privileges are now set correctly when assigning to \f(CW$(\fP"
.IX Subsection "Privileges are now set correctly when assigning to $("
A hypothetical bug (probably unexploitable in practice) because the
incorrect setting of the effective group \s-1ID\s0 while setting \f(CW$(\fR has been
fixed.  The bug would have affected only systems that have \f(CW\*(C`setresgid()\*(C'\fR
but not \f(CW\*(C`setregid()\*(C'\fR, but no such systems are known to exist.
.SH "Deprecations"
.IX Header "Deprecations"
.SS "Don't read the Unicode data base files in \fIlib/unicore\fP"
.IX Subsection "Don't read the Unicode data base files in lib/unicore"
It is now deprecated to directly read the Unicode data base files.
These are stored in the \fIlib/unicore\fR directory.  Instead, you should
use the new functions in Unicode::UCD.  These provide a stable \s-1API,\s0
and give complete information.
.PP
Perl may at some point in the future change or remove these files.  The
file which applications were most likely to have used is
\&\fIlib/unicore/ToDigit.pl\fR.  \*(L"\fIprop_invmap()\fR\*(R" in Unicode::UCD can be used to
get at its data instead.
.ie n .SS "\s-1XS\s0 functions ""is_utf8_char()"", ""utf8_to_uvchr()"" and ""utf8_to_uvuni()"""
.el .SS "\s-1XS\s0 functions \f(CWis_utf8_char()\fP, \f(CWutf8_to_uvchr()\fP and \f(CWutf8_to_uvuni()\fP"
.IX Subsection "XS functions is_utf8_char(), utf8_to_uvchr() and utf8_to_uvuni()"
This function is deprecated because it could read beyond the end of the
input string.  Use the new \fIis_utf8_char_buf()\fR,
\&\f(CW\*(C`utf8_to_uvchr_buf()\*(C'\fR and \f(CW\*(C`utf8_to_uvuni_buf()\*(C'\fR instead.
.SH "Future Deprecations"
.IX Header "Future Deprecations"
This section serves as a notice of features that are \fIlikely\fR to be
removed or deprecated in the next release of
perl (5.18.0).  If your code depends on these features, you should
contact the Perl 5 Porters via the mailing
list <http://lists.perl.org/list/perl5-porters.html> or perlbug to
explain your use case and inform the deprecation process.
.SS "Core Modules"
.IX Subsection "Core Modules"
These modules may be marked as deprecated \fIfrom the core\fR.  This only
means that they will no longer be installed by default with the core
distribution, but will remain available on the \s-1CPAN.\s0
.IP "\(bu" 4
\&\s-1CPANPLUS\s0
.IP "\(bu" 4
Filter::Simple
.IP "\(bu" 4
PerlIO::mmap
.IP "\(bu" 4
Pod::LaTeX
.IP "\(bu" 4
Pod::Parser
.IP "\(bu" 4
SelfLoader
.IP "\(bu" 4
Text::Soundex
.IP "\(bu" 4
Thread.pm
.SS "Platforms with no supporting programmers"
.IX Subsection "Platforms with no supporting programmers"
These platforms will probably have their
special build support removed during the
5.17.0 development series.
.IP "\(bu" 4
BeOS
.IP "\(bu" 4
djgpp
.IP "\(bu" 4
dgux
.IP "\(bu" 4
\&\s-1EPOC\s0
.IP "\(bu" 4
MPE/iX
.IP "\(bu" 4
Rhapsody
.IP "\(bu" 4
\&\s-1UTS\s0
.IP "\(bu" 4
\&\s-1VM/ESA\s0
.SS "Other Future Deprecations"
.IX Subsection "Other Future Deprecations"
.IP "\(bu" 4
Swapping of $< and $>
.Sp
For more information about this future deprecation, see the relevant \s-1RT\s0
ticket <https://rt.perl.org/rt3/Ticket/Display.html?id=96212>.
.IP "\(bu" 4
sfio, stdio
.Sp
Perl supports being built without PerlIO proper, using a stdio or sfio
wrapper instead.  A perl build like this will not support \s-1IO\s0 layers and
thus Unicode \s-1IO,\s0 making it rather handicapped.
.Sp
PerlIO supports a \f(CW\*(C`stdio\*(C'\fR layer if stdio use is desired, and similarly a
sfio layer could be produced.
.IP "\(bu" 4
Unescaped literal \f(CW"{"\fR in regular expressions.
.Sp
Starting with v5.20, it is planned to require a literal \f(CW"{"\fR to be
escaped, for example by preceding it with a backslash.  In v5.18, a
deprecated warning message will be emitted for all such uses.  
This affects only patterns that are to match a literal \f(CW"{"\fR.  Other
uses of this character, such as part of a quantifier or sequence as in
those below, are completely unaffected:
.Sp
.Vb 3
\&    /foo{3,5}/
\&    /\ep{Alphabetic}/
\&    /\eN{DIGIT ZERO}
.Ve
.Sp
Removing this will permit extensions to Perl's pattern syntax and better
error checking for existing syntax.  See \*(L"Quantifiers\*(R" in perlre for an
example.
.IP "\(bu" 4
Revamping \f(CW"\eQ"\fR semantics in double-quotish strings when combined with other escapes.
.Sp
There are several bugs and inconsistencies involving combinations
of \f(CW\*(C`\eQ\*(C'\fR and escapes like \f(CW\*(C`\ex\*(C'\fR, \f(CW\*(C`\eL\*(C'\fR, etc., within a \f(CW\*(C`\eQ...\eE\*(C'\fR pair.
These need to be fixed, and doing so will necessarily change current
behavior.  The changes have not yet been settled.
.SH "Incompatible Changes"
.IX Header "Incompatible Changes"
.SS "Special blocks called in void context"
.IX Subsection "Special blocks called in void context"
Special blocks (\f(CW\*(C`BEGIN\*(C'\fR, \f(CW\*(C`CHECK\*(C'\fR, \f(CW\*(C`INIT\*(C'\fR, \f(CW\*(C`UNITCHECK\*(C'\fR, \f(CW\*(C`END\*(C'\fR) are now
called in void context.  This avoids wasteful copying of the result of the
last statement [perl #108794].
.ie n .SS "The ""overloading"" pragma and regexp objects"
.el .SS "The \f(CWoverloading\fP pragma and regexp objects"
.IX Subsection "The overloading pragma and regexp objects"
With \f(CW\*(C`no overloading\*(C'\fR, regular expression objects returned by \f(CW\*(C`qr//\*(C'\fR are
now stringified as \*(L"Regexp=REGEXP(0xbe600d)\*(R" instead of the regular
expression itself [perl #108780].
.SS "Two \s-1XS\s0 typemap Entries removed"
.IX Subsection "Two XS typemap Entries removed"
Two presumably unused \s-1XS\s0 typemap entries have been removed from the
core typemap: T_DATAUNIT and T_CALLBACK.  If you are, against all odds,
a user of these, please see the instructions on how to restore them
in perlxstypemap.
.SS "Unicode 6.1 has incompatibilities with Unicode 6.0"
.IX Subsection "Unicode 6.1 has incompatibilities with Unicode 6.0"
These are detailed in \*(L"Supports (almost) Unicode 6.1\*(R" above.
You can compile this version of Perl to use Unicode 6.0.  See
\&\*(L"Hacking Perl to work on earlier Unicode versions (for very serious hackers only)\*(R" in perlunicode.
.SS "Borland compiler"
.IX Subsection "Borland compiler"
All support for the Borland compiler has been dropped.  The code had not
worked for a long time anyway.
.SS "Certain deprecated Unicode properties are no longer supported by default"
.IX Subsection "Certain deprecated Unicode properties are no longer supported by default"
Perl should never have exposed certain Unicode properties that are used
by Unicode internally and not meant to be publicly available.  Use of
these has generated deprecated warning messages since Perl 5.12.  The
removed properties are Other_Alphabetic,
Other_Default_Ignorable_Code_Point, Other_Grapheme_Extend,
Other_ID_Continue, Other_ID_Start, Other_Lowercase, Other_Math, and
Other_Uppercase.
.PP
Perl may be recompiled to include any or all of them; instructions are
given in
\&\*(L"Unicode character properties that are \s-1NOT\s0 accepted by Perl\*(R" in perluniprops.
.SS "Dereferencing \s-1IO\s0 thingies as typeglobs"
.IX Subsection "Dereferencing IO thingies as typeglobs"
The \f(CW\*(C`*{...}\*(C'\fR operator, when passed a reference to an \s-1IO\s0 thingy (as in
\&\f(CW\*(C`*{*STDIN{IO}}\*(C'\fR), creates a new typeglob containing just that \s-1IO\s0 object.
Previously, it would stringify as an empty string, but some operators would
treat it as undefined, producing an \*(L"uninitialized\*(R" warning.
Now it stringifies as _\|_ANONIO_\|_ [perl #96326].
.SS "User-defined case-changing operations"
.IX Subsection "User-defined case-changing operations"
This feature was deprecated in Perl 5.14, and has now been removed.
The \s-1CPAN\s0 module Unicode::Casing provides better functionality without
the drawbacks that this feature had, as are detailed in the 5.14
documentation:
<http://perldoc.perl.org/5.14.0/perlunicode.html#User\-Defined\-Case\-Mappings\-%28for\-serious\-hackers\-only%29>
.SS "XSUBs are now 'static'"
.IX Subsection "XSUBs are now 'static'"
\&\s-1XSUB C\s0 functions are now 'static', that is, they are not visible from
outside the compilation unit.  Users can use the new \f(CW\*(C`XS_EXTERNAL(name)\*(C'\fR
and \f(CW\*(C`XS_INTERNAL(name)\*(C'\fR macros to pick the desired linking behavior.
The ordinary \f(CW\*(C`XS(name)\*(C'\fR declaration for XSUBs will continue to declare
non\-'static' XSUBs for compatibility, but the \s-1XS\s0 compiler,
ExtUtils::ParseXS (\f(CW\*(C`xsubpp\*(C'\fR) will emit 'static' XSUBs by default.
ExtUtils::ParseXS's behavior can be reconfigured from \s-1XS\s0 using the
\&\f(CW\*(C`EXPORT_XSUB_SYMBOLS\*(C'\fR keyword.  See perlxs for details.
.SS "Weakening read-only references"
.IX Subsection "Weakening read-only references"
Weakening read-only references is no longer permitted.  It should never
have worked anyway, and could sometimes result in crashes.
.SS "Tying scalars that hold typeglobs"
.IX Subsection "Tying scalars that hold typeglobs"
Attempting to tie a scalar after a typeglob was assigned to it would
instead tie the handle in the typeglob's \s-1IO\s0 slot.  This meant that it was
impossible to tie the scalar itself.  Similar problems affected \f(CW\*(C`tied\*(C'\fR and
\&\f(CW\*(C`untie\*(C'\fR: \f(CW\*(C`tied $scalar\*(C'\fR would return false on a tied scalar if the last
thing returned was a typeglob, and \f(CW\*(C`untie $scalar\*(C'\fR on such a tied scalar
would do nothing.
.PP
We fixed this problem before Perl 5.14.0, but it caused problems with some
\&\s-1CPAN\s0 modules, so we put in a deprecation cycle instead.
.PP
Now the deprecation has been removed and this bug has been fixed.  So
\&\f(CW\*(C`tie $scalar\*(C'\fR will always tie the scalar, not the handle it holds.  To tie
the handle, use \f(CW\*(C`tie *$scalar\*(C'\fR (with an explicit asterisk).  The same
applies to \f(CW\*(C`tied *$scalar\*(C'\fR and \f(CW\*(C`untie *$scalar\*(C'\fR.
.ie n .SS "IPC::Open3 no longer provides ""xfork()"", ""xclose_on_exec()"" and ""xpipe_anon()"""
.el .SS "IPC::Open3 no longer provides \f(CWxfork()\fP, \f(CWxclose_on_exec()\fP and \f(CWxpipe_anon()\fP"
.IX Subsection "IPC::Open3 no longer provides xfork(), xclose_on_exec() and xpipe_anon()"
All three functions were private, undocumented, and unexported.  They do
not appear to be used by any code on \s-1CPAN. \s0 Two have been inlined and one
deleted entirely.
.ie n .SS "$$ no longer caches \s-1PID\s0"
.el .SS "\f(CW$$\fP no longer caches \s-1PID\s0"
.IX Subsection "$$ no longer caches PID"
Previously, if one called \fIfork\fR\|(3) from C, Perl's
notion of \f(CW$$\fR could go out of sync with what \fIgetpid()\fR returns.  By always
fetching the value of \f(CW$$\fR via \fIgetpid()\fR, this potential bug is eliminated.
Code that depends on the caching behavior will break.  As described in
Core Enhancements,
\&\f(CW$$\fR is now writable, but it will be reset during a
fork.
.ie n .SS "$$ and ""getppid()"" no longer emulate \s-1POSIX\s0 semantics under LinuxThreads"
.el .SS "\f(CW$$\fP and \f(CWgetppid()\fP no longer emulate \s-1POSIX\s0 semantics under LinuxThreads"
.IX Subsection "$$ and getppid() no longer emulate POSIX semantics under LinuxThreads"
The \s-1POSIX\s0 emulation of \f(CW$$\fR and \f(CW\*(C`getppid()\*(C'\fR under the obsolete
LinuxThreads implementation has been removed.
This only impacts users of Linux 2.4 and
users of Debian GNU/kFreeBSD up to and including 6.0, not the vast
majority of Linux installations that use \s-1NPTL\s0 threads.
.PP
This means that \f(CW\*(C`getppid()\*(C'\fR, like \f(CW$$\fR, is now always guaranteed to
return the \s-1OS\s0's idea of the current state of the process, not perl's
cached version of it.
.PP
See the documentation for $$ for details.
.ie n .SS "$<, $>, $( and $) are no longer cached"
.el .SS "\f(CW$<\fP, \f(CW$>\fP, \f(CW$(\fP and \f(CW$)\fP are no longer cached"
.IX Subsection "$<, $>, $( and $) are no longer cached"
Similarly to the changes to \f(CW$$\fR and \f(CW\*(C`getppid()\*(C'\fR, the internal
caching of \f(CW$<\fR, \f(CW$>\fR, \f(CW$(\fR and \f(CW$)\fR has been removed.
.PP
When we cached these values our idea of what they were would drift out
of sync with reality if someone (e.g., someone embedding perl) called
\&\f(CW\*(C`sete?[ug]id()\*(C'\fR without updating \f(CW\*(C`PL_e?[ug]id\*(C'\fR.  Having to deal with
this complexity wasn't worth it given how cheap the \f(CW\*(C`gete?[ug]id()\*(C'\fR
system call is.
.PP
This change will break a handful of \s-1CPAN\s0 modules that use the XS-level
\&\f(CW\*(C`PL_uid\*(C'\fR, \f(CW\*(C`PL_gid\*(C'\fR, \f(CW\*(C`PL_euid\*(C'\fR or \f(CW\*(C`PL_egid\*(C'\fR variables.
.PP
The fix for those breakages is to use \f(CW\*(C`PerlProc_gete?[ug]id()\*(C'\fR to
retrieve them (e.g., \f(CW\*(C`PerlProc_getuid()\*(C'\fR), and not to assign to
\&\f(CW\*(C`PL_e?[ug]id\*(C'\fR if you change the \s-1UID/GID/EUID/EGID. \s0 There is no longer
any need to do so since perl will always retrieve the up-to-date
version of those values from the \s-1OS.\s0
.ie n .SS "Which Non-ASCII characters get quoted by ""quotemeta"" and ""\eQ"" has changed"
.el .SS "Which Non-ASCII characters get quoted by \f(CWquotemeta\fP and \f(CW\eQ\fP has changed"
.IX Subsection "Which Non-ASCII characters get quoted by quotemeta and Q has changed"
This is unlikely to result in a real problem, as Perl does not attach
special meaning to any non-ASCII character, so it is currently
irrelevant which are quoted or not.  This change fixes bug [perl #77654] and
brings Perl's behavior more into line with Unicode's recommendations.
See \*(L"quotemeta\*(R" in perlfunc.
.SH "Performance Enhancements"
.IX Header "Performance Enhancements"
.IP "\(bu" 4
Improved performance for Unicode properties in regular expressions
.Sp
Matching a code point against a Unicode property is now done via a
binary search instead of linear.  This means for example that the worst
case for a 1000 item property is 10 probes instead of 1000.  This
inefficiency has been compensated for in the past by permanently storing
in a hash the results of a given probe plus the results for the adjacent
64 code points, under the theory that near-by code points are likely to
be searched for.  A separate hash was used for each mention of a Unicode
property in each regular expression.  Thus, \f(CW\*(C`qr/\ep{foo}abc\ep{foo}/\*(C'\fR
would generate two hashes.  Any probes in one instance would be unknown
to the other, and the hashes could expand separately to be quite large
if the regular expression were used on many different widely-separated
code points.
Now, however, there is just one hash shared by all instances of a given
property.  This means that if \f(CW\*(C`\ep{foo}\*(C'\fR is matched against \*(L"A\*(R" in one
regular expression in a thread, the result will be known immediately to
all regular expressions, and the relentless march of using up memory is
slowed considerably.
.IP "\(bu" 4
Version declarations with the \f(CW\*(C`use\*(C'\fR keyword (e.g., \f(CW\*(C`use 5.012\*(C'\fR) are now
faster, as they enable features without loading \fIfeature.pm\fR.
.IP "\(bu" 4
\&\f(CW\*(C`local $_\*(C'\fR is faster now, as it no longer iterates through magic that it
is not going to copy anyway.
.IP "\(bu" 4
Perl 5.12.0 sped up the destruction of objects whose classes define
empty \f(CW\*(C`DESTROY\*(C'\fR methods (to prevent autoloading), by simply not
calling such empty methods.  This release takes this optimization a
step further, by not calling any \f(CW\*(C`DESTROY\*(C'\fR method that begins with a
\&\f(CW\*(C`return\*(C'\fR statement.  This can be useful for destructors that are only
used for debugging:
.Sp
.Vb 2
\&    use constant DEBUG => 1;
\&    sub DESTROY { return unless DEBUG; ... }
.Ve
.Sp
Constant-folding will reduce the first statement to \f(CW\*(C`return;\*(C'\fR if \s-1DEBUG\s0
is set to 0, triggering this optimization.
.IP "\(bu" 4
Assigning to a variable that holds a typeglob or copy-on-write scalar
is now much faster.  Previously the typeglob would be stringified or
the copy-on-write scalar would be copied before being clobbered.
.IP "\(bu" 4
Assignment to \f(CW\*(C`substr\*(C'\fR in void context is now more than twice its
previous speed.  Instead of creating and returning a special lvalue
scalar that is then assigned to, \f(CW\*(C`substr\*(C'\fR modifies the original string
itself.
.IP "\(bu" 4
\&\f(CW\*(C`substr\*(C'\fR no longer calculates a value to return when called in void
context.
.IP "\(bu" 4
Due to changes in File::Glob, Perl's \f(CW\*(C`glob\*(C'\fR function and its \f(CW\*(C`<...>\*(C'\fR equivalent are now much faster.  The splitting of the pattern
into words has been rewritten in C, resulting in speed-ups of 20% for
some cases.
.Sp
This does not affect \f(CW\*(C`glob\*(C'\fR on \s-1VMS,\s0 as it does not use File::Glob.
.IP "\(bu" 4
The short-circuiting operators \f(CW\*(C`&&\*(C'\fR, \f(CW\*(C`||\*(C'\fR, and \f(CW\*(C`//\*(C'\fR, when chained
(such as \f(CW\*(C`$a || $b || $c\*(C'\fR), are now considerably faster to short-circuit,
due to reduced optree traversal.
.IP "\(bu" 4
The implementation of \f(CW\*(C`s///r\*(C'\fR makes one fewer copy of the scalar's value.
.IP "\(bu" 4
Recursive calls to lvalue subroutines in lvalue scalar context use less
memory.
.SH "Modules and Pragmata"
.IX Header "Modules and Pragmata"
.SS "Deprecated Modules"
.IX Subsection "Deprecated Modules"
.IP "Version::Requirements" 4
.IX Item "Version::Requirements"
Version::Requirements is now \s-1DEPRECATED,\s0 use CPAN::Meta::Requirements,
which is a drop-in replacement.  It will be deleted from perl.git blead
in v5.17.0.
.SS "New Modules and Pragmata"
.IX Subsection "New Modules and Pragmata"
.IP "\(bu" 4
arybase \*(-- this new module implements the \f(CW$[\fR variable.
.IP "\(bu" 4
PerlIO::mmap 0.010 has been added to the Perl core.
.Sp
The \f(CW\*(C`mmap\*(C'\fR PerlIO layer is no longer implemented by perl itself, but has
been moved out into the new PerlIO::mmap module.
.SS "Updated Modules and Pragmata"
.IX Subsection "Updated Modules and Pragmata"
This is only an overview of selected module updates.  For a complete list of
updates, run:
.PP
.Vb 1
\&    $ corelist \-\-diff 5.14.0 5.16.0
.Ve
.PP
You can substitute your favorite version in place of 5.14.0, too.
.IP "\(bu" 4
Archive::Extract has been upgraded from version 0.48 to 0.58.
.Sp
Includes a fix for FreeBSD to only use \f(CW\*(C`unzip\*(C'\fR if it is located in
\&\f(CW\*(C`/usr/local/bin\*(C'\fR, as FreeBSD 9.0 will ship with a limited \f(CW\*(C`unzip\*(C'\fR in
\&\f(CW\*(C`/usr/bin\*(C'\fR.
.IP "\(bu" 4
Archive::Tar has been upgraded from version 1.76 to 1.82.
.Sp
Adjustments to handle files >8gb (>0777777777777 octal) and a feature
to return the \s-1MD5SUM\s0 of files in the archive.
.IP "\(bu" 4
base has been upgraded from version 2.16 to 2.18.
.Sp
\&\f(CW\*(C`base\*(C'\fR no longer sets a module's \f(CW$VERSION\fR to \*(L"\-1\*(R" when a module it
loads does not define a \f(CW$VERSION\fR.  This change has been made because
\&\*(L"\-1\*(R" is not a valid version number under the new \*(L"lax\*(R" criteria used
internally by \f(CW\*(C`UNIVERSAL::VERSION\*(C'\fR.  (See version for more on \*(L"lax\*(R"
version criteria.)
.Sp
\&\f(CW\*(C`base\*(C'\fR no longer internally skips loading modules it has already loaded
and instead relies on \f(CW\*(C`require\*(C'\fR to inspect \f(CW%INC\fR.  This fixes a bug
when \f(CW\*(C`base\*(C'\fR is used with code that clear \f(CW%INC\fR to force a module to
be reloaded.
.IP "\(bu" 4
Carp has been upgraded from version 1.20 to 1.26.
.Sp
It now includes last read filehandle info and puts a dot after the file
and line number, just like errors from \f(CW\*(C`die\*(C'\fR [perl #106538].
.IP "\(bu" 4
charnames has been updated from version 1.18 to 1.30.
.Sp
\&\f(CW\*(C`charnames\*(C'\fR can now be invoked with a new option, \f(CW\*(C`:loose\*(C'\fR,
which is like the existing \f(CW\*(C`:full\*(C'\fR option, but enables Unicode loose
name matching.  Details are in \*(L"\s-1LOOSE MATCHES\*(R"\s0 in charnames.
.IP "\(bu" 4
B::Deparse has been upgraded from version 1.03 to 1.14.  This fixes
numerous deparsing bugs.
.IP "\(bu" 4
\&\s-1CGI\s0 has been upgraded from version 3.52 to 3.59.
.Sp
It uses the public and documented \s-1FCGI\s0.pm \s-1API\s0 in CGI::Fast.  CGI::Fast was
using an \s-1FCGI API\s0 that was deprecated and removed from documentation
more than ten years ago.  Usage of this deprecated \s-1API\s0 with \s-1FCGI \s0>=
0.70 or \s-1FCGI\s0 <= 0.73 introduces a security issue.
<https://rt.cpan.org/Public/Bug/Display.html?id=68380>
<http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE\-2011\-2766>
.Sp
Things that may break your code:
.Sp
\&\f(CW\*(C`url()\*(C'\fR was fixed to return \f(CW\*(C`PATH_INFO\*(C'\fR when it is explicitly requested
with either the \f(CW\*(C`path=>1\*(C'\fR or \f(CW\*(C`path_info=>1\*(C'\fR flag.
.Sp
If your code is running under mod_rewrite (or compatible) and you are
calling \f(CW\*(C`self_url()\*(C'\fR or you are calling \f(CW\*(C`url()\*(C'\fR and passing
\&\f(CW\*(C`path_info=>1\*(C'\fR, these methods will actually be returning
\&\f(CW\*(C`PATH_INFO\*(C'\fR now, as you have explicitly requested or \f(CW\*(C`self_url()\*(C'\fR
has requested on your behalf.
.Sp
The \f(CW\*(C`PATH_INFO\*(C'\fR has been omitted in such URLs since the issue was
introduced in the 3.12 release in December, 2005.
.Sp
This bug is so old your application may have come to depend on it or
workaround it. Check for application before upgrading to this release.
.Sp
Examples of affected method calls:
.Sp
.Vb 5
\&  $q\->url(\-absolute => 1, \-query => 1, \-path_info => 1);
\&  $q\->url(\-path=>1);
\&  $q\->url(\-full=>1,\-path=>1);
\&  $q\->url(\-rewrite=>1,\-path=>1);
\&  $q\->self_url();
.Ve
.Sp
We no longer read from \s-1STDIN\s0 when the Content-Length is not set,
preventing requests with no Content-Length from sometimes freezing.
This is consistent with the \s-1CGI RFC 3875,\s0 and is also consistent with
CGI::Simple.  However, the old behavior may have been expected by some
command-line uses of \s-1CGI\s0.pm.
.Sp
In addition, the \s-1DELETE HTTP\s0 verb is now supported.
.IP "\(bu" 4
Compress::Zlib has been upgraded from version 2.035 to 2.048.
.Sp
IO::Compress::Zip and IO::Uncompress::Unzip now have support for \s-1LZMA
\&\s0(method 14).  There is a fix for a \s-1CRC\s0 issue in IO::Compress::Unzip and
it supports Streamed Stored context now.  And fixed a Zip64 issue in
IO::Compress::Zip when the content size was exactly 0xFFFFFFFF.
.IP "\(bu" 4
Digest::SHA has been upgraded from version 5.61 to 5.71.
.Sp
Added \s-1BITS\s0 mode to the addfile method and shasum.  This makes
partial-byte inputs possible via files/STDIN and lets shasum check
all 8074 \s-1NIST\s0 Msg vectors, where previously special programming was
required to do this.
.IP "\(bu" 4
Encode has been upgraded from version 2.42 to 2.44.
.Sp
Missing aliases added, a deep recursion error fixed and various
documentation updates.
.Sp
Addressed 'decode_xs n\-byte heap\-overflow' security bug in Unicode.xs
(\s-1CVE\-2011\-2939\s0). (5.14.2)
.IP "\(bu" 4
ExtUtils::CBuilder updated from version 0.280203 to 0.280206.
.Sp
The new version appends \s-1CFLAGS\s0 and \s-1LDFLAGS\s0 to their Config.pm
counterparts.
.IP "\(bu" 4
ExtUtils::ParseXS has been upgraded from version 2.2210 to 3.16.
.Sp
Much of ExtUtils::ParseXS, the module behind the \s-1XS\s0 compiler \f(CW\*(C`xsubpp\*(C'\fR,
was rewritten and cleaned up.  It has been made somewhat more extensible
and now finally uses strictures.
.Sp
The typemap logic has been moved into a separate module,
ExtUtils::Typemaps.  See \*(L"New Modules and Pragmata\*(R", above.
.Sp
For a complete set of changes, please see the ExtUtils::ParseXS
changelog, available on the \s-1CPAN.\s0
.IP "\(bu" 4
File::Glob has been upgraded from version 1.12 to 1.17.
.Sp
On Windows, tilde (~) expansion now checks the \f(CW\*(C`USERPROFILE\*(C'\fR environment
variable, after checking \f(CW\*(C`HOME\*(C'\fR.
.Sp
It has a new \f(CW\*(C`:bsd_glob\*(C'\fR export tag, intended to replace \f(CW\*(C`:glob\*(C'\fR.  Like
\&\f(CW\*(C`:glob\*(C'\fR it overrides \f(CW\*(C`glob\*(C'\fR with a function that does not split the glob
pattern into words, but, unlike \f(CW\*(C`:glob\*(C'\fR, it iterates properly in scalar
context, instead of returning the last file.
.Sp
There are other changes affecting Perl's own \f(CW\*(C`glob\*(C'\fR operator (which uses
File::Glob internally, except on \s-1VMS\s0).  See \*(L"Performance Enhancements\*(R"
and \*(L"Selected Bug Fixes\*(R".
.IP "\(bu" 4
FindBin updated from version 1.50 to 1.51.
.Sp
It no longer returns a wrong result if a script of the same name as the
current one exists in the path and is executable.
.IP "\(bu" 4
HTTP::Tiny has been upgraded from version 0.012 to 0.017.
.Sp
Added support for using \f(CW$ENV{http_proxy}\fR to set the default proxy host.
.Sp
Adds additional shorthand methods for all common \s-1HTTP\s0 verbs,
a \f(CW\*(C`post_form()\*(C'\fR method for POST-ing x\-www-form-urlencoded data and
a \f(CW\*(C`www_form_urlencode()\*(C'\fR utility method.
.IP "\(bu" 4
\&\s-1IO\s0 has been upgraded from version 1.25_04 to 1.25_06, and IO::Handle
from version 1.31 to 1.33.
.Sp
Together, these upgrades fix a problem with IO::Handle's \f(CW\*(C`getline\*(C'\fR and
\&\f(CW\*(C`getlines\*(C'\fR methods.  When these methods are called on the special \s-1ARGV\s0
handle, the next file is automatically opened, as happens with the built-in
\&\f(CW\*(C`<>\*(C'\fR and \f(CW\*(C`readline\*(C'\fR functions.  But, unlike the built-ins, these
methods were not respecting the caller's use of the open pragma and
applying the appropriate I/O layers to the newly-opened file
[rt.cpan.org #66474].
.IP "\(bu" 4
IPC::Cmd has been upgraded from version 0.70 to 0.76.
.Sp
Capturing of command output (both \f(CW\*(C`STDOUT\*(C'\fR and \f(CW\*(C`STDERR\*(C'\fR) is now supported
using IPC::Open3 on MSWin32 without requiring IPC::Run.
.IP "\(bu" 4
IPC::Open3 has been upgraded from version 1.09 to 1.12.
.Sp
Fixes a bug which prevented use of \f(CW\*(C`open3\*(C'\fR on Windows when \f(CW*STDIN\fR,
\&\f(CW*STDOUT\fR or \f(CW*STDERR\fR had been localized.
.Sp
Fixes a bug which prevented duplicating numeric file descriptors on Windows.
.Sp
\&\f(CW\*(C`open3\*(C'\fR with \*(L"\-\*(R" for the program name works once more.  This was broken in
version 1.06 (and hence in Perl 5.14.0) [perl #95748].
.IP "\(bu" 4
Locale::Codes has been upgraded from version 3.16 to 3.21.
.Sp
Added Language Extension codes (langext) and Language Variation codes (langvar)
as defined in the \s-1IANA\s0 language registry.
.Sp
Added language codes from \s-1ISO 639\-5\s0
.Sp
Added language/script codes from the \s-1IANA\s0 language subtag registry
.Sp
Fixed an uninitialized value warning [rt.cpan.org #67438].
.Sp
Fixed the return value for the all_XXX_codes and all_XXX_names functions
[rt.cpan.org #69100].
.Sp
Reorganized modules to move Locale::MODULE to Locale::Codes::MODULE to allow
for cleaner future additions.  The original four modules (Locale::Language,
Locale::Currency, Locale::Country, Locale::Script) will continue to work, but
all new sets of codes will be added in the Locale::Codes namespace.
.Sp
The code2XXX, XXX2code, all_XXX_codes, and all_XXX_names functions now
support retired codes.  All codesets may be specified by a constant or
by their name now.  Previously, they were specified only by a constant.
.Sp
The alias_code function exists for backward compatibility.  It has been
replaced by rename_country_code.  The alias_code function will be
removed some time after September, 2013.
.Sp
All work is now done in the central module (Locale::Codes).  Previously,
some was still done in the wrapper modules (Locale::Codes::*).  Added
Language Family codes (langfam) as defined in \s-1ISO 639\-5.\s0
.IP "\(bu" 4
Math::BigFloat has been upgraded from version 1.993 to 1.997.
.Sp
The \f(CW\*(C`numify\*(C'\fR method has been corrected to return a normalized Perl number
(the result of \f(CW\*(C`0 + $thing\*(C'\fR), instead of a string [rt.cpan.org #66732].
.IP "\(bu" 4
Math::BigInt has been upgraded from version 1.994 to 1.998.
.Sp
It provides a new \f(CW\*(C`bsgn\*(C'\fR method that complements the \f(CW\*(C`babs\*(C'\fR method.
.Sp
It fixes the internal \f(CW\*(C`objectify\*(C'\fR function's handling of \*(L"foreign objects\*(R"
so they are converted to the appropriate class (Math::BigInt or
Math::BigFloat).
.IP "\(bu" 4
Math::BigRat has been upgraded from version 0.2602 to 0.2603.
.Sp
\&\f(CW\*(C`int()\*(C'\fR on a Math::BigRat object containing \-1/2 now creates a
Math::BigInt containing 0, rather than \-0.  Math::BigInt does not even
support negative zero, so the resulting object was actually malformed
[perl #95530].
.IP "\(bu" 4
Math::Complex has been upgraded from version 1.56 to 1.59
and Math::Trig from version 1.2 to 1.22.
.Sp
Fixes include: correct copy constructor usage; fix polarwise formatting with
numeric format specifier; and more stable \f(CW\*(C`great_circle_direction\*(C'\fR algorithm.
.IP "\(bu" 4
Module::CoreList has been upgraded from version 2.51 to 2.66.
.Sp
The \f(CW\*(C`corelist\*(C'\fR utility now understands the \f(CW\*(C`\-r\*(C'\fR option for displaying
Perl release dates and the \f(CW\*(C`\-\-diff\*(C'\fR option to print the set of modlib
changes between two perl distributions.
.IP "\(bu" 4
Module::Metadata has been upgraded from version 1.000004 to 1.000009.
.Sp
Adds \f(CW\*(C`provides\*(C'\fR method to generate a \s-1CPAN META\s0 provides data structure
correctly; use of \f(CW\*(C`package_versions_from_directory\*(C'\fR is discouraged.
.IP "\(bu" 4
ODBM_File has been upgraded from version 1.10 to 1.12.
.Sp
The \s-1XS\s0 code is now compiled with \f(CW\*(C`PERL_NO_GET_CONTEXT\*(C'\fR, which will aid
performance under ithreads.
.IP "\(bu" 4
open has been upgraded from version 1.08 to 1.10.
.Sp
It no longer turns off layers on standard handles when invoked without the
\&\*(L":std\*(R" directive.  Similarly, when invoked \fIwith\fR the \*(L":std\*(R" directive, it
now clears layers on \s-1STDERR\s0 before applying the new ones, and not just on
\&\s-1STDIN\s0 and \s-1STDOUT\s0 [perl #92728].
.IP "\(bu" 4
overload has been upgraded from version 1.13 to 1.18.
.Sp
\&\f(CW\*(C`overload::Overloaded\*(C'\fR no longer calls \f(CW\*(C`can\*(C'\fR on the class, but uses
another means to determine whether the object has overloading.  It was
never correct for it to call \f(CW\*(C`can\*(C'\fR, as overloading does not respect
\&\s-1AUTOLOAD. \s0 So classes that autoload methods and implement \f(CW\*(C`can\*(C'\fR no longer
have to account for overloading [perl #40333].
.Sp
A warning is now produced for invalid arguments.  See \*(L"New Diagnostics\*(R".
.IP "\(bu" 4
PerlIO::scalar has been upgraded from version 0.11 to 0.14.
.Sp
(This is the module that implements \f(CW\*(C`open $fh, \*(Aq>\*(Aq, \e$scalar\*(C'\fR.)
.Sp
It fixes a problem with \f(CW\*(C`open my $fh, ">", \e$scalar\*(C'\fR not working if
\&\f(CW$scalar\fR is a copy-on-write scalar. (5.14.2)
.Sp
It also fixes a hang that occurs with \f(CW\*(C`readline\*(C'\fR or \f(CW\*(C`<$fh>\*(C'\fR if a
typeglob has been assigned to \f(CW$scalar\fR [perl #92258].
.Sp
It no longer assumes during \f(CW\*(C`seek\*(C'\fR that \f(CW$scalar\fR is a string internally.
If it didn't crash, it was close to doing so [perl #92706].  Also, the
internal print routine no longer assumes that the position set by \f(CW\*(C`seek\*(C'\fR
is valid, but extends the string to that position, filling the intervening
bytes (between the old length and the seek position) with nulls
[perl #78980].
.Sp
Printing to an in-memory handle now works if the \f(CW$scalar\fR holds a reference,
stringifying the reference before modifying it.  References used to be
treated as empty strings.
.Sp
Printing to an in-memory handle no longer crashes if the \f(CW$scalar\fR happens to
hold a number internally, but no string buffer.
.Sp
Printing to an in-memory handle no longer creates scalars that confuse
the regular expression engine [perl #108398].
.IP "\(bu" 4
Pod::Functions has been upgraded from version 1.04 to 1.05.
.Sp
\&\fIFunctions.pm\fR is now generated at perl build time from annotations in
\&\fIperlfunc.pod\fR.  This will ensure that Pod::Functions and perlfunc
remain in synchronisation.
.IP "\(bu" 4
Pod::Html has been upgraded from version 1.11 to 1.1502.
.Sp
This is an extensive rewrite of Pod::Html to use Pod::Simple under
the hood.  The output has changed significantly.
.IP "\(bu" 4
Pod::Perldoc has been upgraded from version 3.15_03 to 3.17.
.Sp
It corrects the search paths on \s-1VMS\s0 [perl #90640]. (5.14.1)
.Sp
The \fB\-v\fR option now fetches the right section for \f(CW$0\fR.
.Sp
This upgrade has numerous significant fixes.  Consult its changelog on
the \s-1CPAN\s0 for more information.
.IP "\(bu" 4
\&\s-1POSIX\s0 has been upgraded from version 1.24 to 1.30.
.Sp
\&\s-1POSIX\s0 no longer uses AutoLoader.  Any code which was relying on this
implementation detail was buggy, and may fail because of this change.
The module's Perl code has been considerably simplified, roughly halving
the number of lines, with no change in functionality.  The \s-1XS\s0 code has
been refactored to reduce the size of the shared object by about 12%,
with no change in functionality.  More \s-1POSIX\s0 functions now have tests.
.Sp
\&\f(CW\*(C`sigsuspend\*(C'\fR and \f(CW\*(C`pause\*(C'\fR now run signal handlers before returning, as the
whole point of these two functions is to wait until a signal has
arrived, and then return \fIafter\fR it has been triggered.  Delayed, or
\&\*(L"safe\*(R", signals were preventing that from happening, possibly resulting in
race conditions [perl #107216].
.Sp
\&\f(CW\*(C`POSIX::sleep\*(C'\fR is now a direct call into the underlying \s-1OS \s0\f(CW\*(C`sleep\*(C'\fR
function, instead of being a Perl wrapper on \f(CW\*(C`CORE::sleep\*(C'\fR.
\&\f(CW\*(C`POSIX::dup2\*(C'\fR now returns the correct value on Win32 (\fIi.e.\fR, the file
descriptor).  \f(CW\*(C`POSIX::SigSet\*(C'\fR \f(CW\*(C`sigsuspend\*(C'\fR and \f(CW\*(C`sigpending\*(C'\fR and
\&\f(CW\*(C`POSIX::pause\*(C'\fR now dispatch safe signals immediately before returning to
their caller.
.Sp
\&\f(CW\*(C`POSIX::Termios::setattr\*(C'\fR now defaults the third argument to \f(CW\*(C`TCSANOW\*(C'\fR,
instead of 0. On most platforms \f(CW\*(C`TCSANOW\*(C'\fR is defined to be 0, but on some
0 is not a valid parameter, which caused a call with defaults to fail.
.IP "\(bu" 4
Socket has been upgraded from version 1.94 to 2.001.
.Sp
It has new functions and constants for handling IPv6 sockets:
.Sp
.Vb 11
\&    pack_ipv6_mreq
\&    unpack_ipv6_mreq
\&    IPV6_ADD_MEMBERSHIP
\&    IPV6_DROP_MEMBERSHIP
\&    IPV6_MTU
\&    IPV6_MTU_DISCOVER
\&    IPV6_MULTICAST_HOPS
\&    IPV6_MULTICAST_IF
\&    IPV6_MULTICAST_LOOP
\&    IPV6_UNICAST_HOPS
\&    IPV6_V6ONLY
.Ve
.IP "\(bu" 4
Storable has been upgraded from version 2.27 to 2.34.
.Sp
It no longer turns copy-on-write scalars into read-only scalars when
freezing and thawing.
.IP "\(bu" 4
Sys::Syslog has been upgraded from version 0.27 to 0.29.
.Sp
This upgrade closes many outstanding bugs.
.IP "\(bu" 4
Term::ANSIColor has been upgraded from version 3.00 to 3.01.
.Sp
Only interpret an initial array reference as a list of colors, not any initial
reference, allowing the colored function to work properly on objects with
stringification defined.
.IP "\(bu" 4
Term::ReadLine has been upgraded from version 1.07 to 1.09.
.Sp
Term::ReadLine now supports any event loop, including unpublished ones and
simple IO::Select, loops without the need to rewrite existing code for
any particular framework [perl #108470].
.IP "\(bu" 4
threads::shared has been upgraded from version 1.37 to 1.40.
.Sp
Destructors on shared objects used to be ignored sometimes if the objects
were referenced only by shared data structures.  This has been mostly
fixed, but destructors may still be ignored if the objects still exist at
global destruction time [perl #98204].
.IP "\(bu" 4
Unicode::Collate has been upgraded from version 0.73 to 0.89.
.Sp
Updated to \s-1CLDR 1.9.1\s0
.Sp
Locales updated to \s-1CLDR 2.0:\s0 mk, mt, nb, nn, ro, ru, sk, sr, sv, uk,
zh_\|_pinyin, zh_\|_stroke
.Sp
Newly supported locales: bn, fa, ml, mr, or, pa, sa, si, si_\|_dictionary,
sr_Latn, sv_\|_reformed, ta, te, th, ur, wae.
.Sp
Tailored compatibility ideographs as well as unified ideographs for the
locales: ja, ko, zh_\|_big5han, zh_\|_gb2312han, zh_\|_pinyin, zh_\|_stroke.
.Sp
Locale/*.pl files are now searched for in \f(CW@INC\fR.
.IP "\(bu" 4
Unicode::Normalize has been upgraded from version 1.10 to 1.14.
.Sp
Fixes for the removal of \fIunicore/CompositionExclusions.txt\fR from core.
.IP "\(bu" 4
Unicode::UCD has been upgraded from version 0.32 to 0.43.
.Sp
This adds four new functions:  \f(CW\*(C`prop_aliases()\*(C'\fR and
\&\f(CW\*(C`prop_value_aliases()\*(C'\fR, which are used to find all Unicode-approved
synonyms for property names, or to convert from one name to another;
\&\f(CW\*(C`prop_invlist\*(C'\fR which returns all code points matching a given
Unicode binary property; and \f(CW\*(C`prop_invmap\*(C'\fR which returns the complete
specification of a given Unicode property.
.IP "\(bu" 4
Win32API::File has been upgraded from version 0.1101 to 0.1200.
.Sp
Added SetStdHandle and GetStdHandle functions
.SS "Removed Modules and Pragmata"
.IX Subsection "Removed Modules and Pragmata"
As promised in Perl 5.14.0's release notes, the following modules have
been removed from the core distribution, and if needed should be installed
from \s-1CPAN\s0 instead.
.IP "\(bu" 4
Devel::DProf has been removed from the Perl core.  Prior version was
20110228.00.
.IP "\(bu" 4
Shell has been removed from the Perl core.  Prior version was 0.72_01.
.IP "\(bu" 4
Several old perl4\-style libraries which have been deprecated with 5.14
are now removed:
.Sp
.Vb 5
\&    abbrev.pl assert.pl bigfloat.pl bigint.pl bigrat.pl cacheout.pl
\&    complete.pl ctime.pl dotsh.pl exceptions.pl fastcwd.pl flush.pl
\&    getcwd.pl getopt.pl getopts.pl hostname.pl importenv.pl
\&    lib/find{,depth}.pl look.pl newgetopt.pl open2.pl open3.pl
\&    pwd.pl shellwords.pl stat.pl tainted.pl termcap.pl timelocal.pl
.Ve
.Sp
They can be found on \s-1CPAN\s0 as Perl4::CoreLibs.
.SH "Documentation"
.IX Header "Documentation"
.SS "New Documentation"
.IX Subsection "New Documentation"
\fIperldtrace\fR
.IX Subsection "perldtrace"
.PP
perldtrace describes Perl's DTrace support, listing the provided probes
and gives examples of their use.
.PP
\fIperlexperiment\fR
.IX Subsection "perlexperiment"
.PP
This document is intended to provide a list of experimental features in
Perl.  It is still a work in progress.
.PP
\fIperlootut\fR
.IX Subsection "perlootut"
.PP
This a new \s-1OO\s0 tutorial.  It focuses on basic \s-1OO\s0 concepts, and then recommends
that readers choose an \s-1OO\s0 framework from \s-1CPAN.\s0
.PP
\fIperlxstypemap\fR
.IX Subsection "perlxstypemap"
.PP
The new manual describes the \s-1XS\s0 typemapping mechanism in unprecedented
detail and combines new documentation with information extracted from
perlxs and the previously unofficial list of all core typemaps.
.SS "Changes to Existing Documentation"
.IX Subsection "Changes to Existing Documentation"
\fIperlapi\fR
.IX Subsection "perlapi"
.IP "\(bu" 4
The \s-1HV API\s0 has long accepted negative lengths to show that the key is
in \s-1UTF8. \s0 This is now documented.
.IP "\(bu" 4
The \f(CW\*(C`boolSV()\*(C'\fR macro is now documented.
.PP
\fIperlfunc\fR
.IX Subsection "perlfunc"
.IP "\(bu" 4
\&\f(CW\*(C`dbmopen\*(C'\fR treats a 0 mode as a special case, that prevents a nonexistent
file from being created.  This has been the case since Perl 5.000, but was
never documented anywhere.  Now the perlfunc entry mentions it
[perl #90064].
.IP "\(bu" 4
As an accident of history, \f(CW\*(C`open $fh, \*(Aq<:\*(Aq, ...\*(C'\fR applies the default
layers for the platform (\f(CW\*(C`:raw\*(C'\fR on Unix, \f(CW\*(C`:crlf\*(C'\fR on Windows), ignoring
whatever is declared by open.pm.  This seems such a useful feature
it has been documented in perlfunc and open.
.IP "\(bu" 4
The entry for \f(CW\*(C`split\*(C'\fR has been rewritten.  It is now far clearer than
before.
.PP
\fIperlguts\fR
.IX Subsection "perlguts"
.IP "\(bu" 4
A new section, Autoloading with XSUBs,
has been added, which explains the two APIs for accessing the name of the
autoloaded sub.
.IP "\(bu" 4
Some function descriptions in perlguts were confusing, as it was
not clear whether they referred to the function above or below the
description.  This has been clarified [perl #91790].
.PP
\fIperlobj\fR
.IX Subsection "perlobj"
.IP "\(bu" 4
This document has been rewritten from scratch, and its coverage of various \s-1OO\s0
concepts has been expanded.
.PP
\fIperlop\fR
.IX Subsection "perlop"
.IP "\(bu" 4
Documentation of the smartmatch operator has been reworked and moved from
perlsyn to perlop where it belongs.
.Sp
It has also been corrected for the case of \f(CW\*(C`undef\*(C'\fR on the left-hand
side.  The list of different smart match behaviors had an item in the
wrong place.
.IP "\(bu" 4
Documentation of the ellipsis statement (\f(CW\*(C`...\*(C'\fR) has been reworked and
moved from perlop to perlsyn.
.IP "\(bu" 4
The explanation of bitwise operators has been expanded to explain how they
work on Unicode strings (5.14.1).
.IP "\(bu" 4
More examples for \f(CW\*(C`m//g\*(C'\fR have been added (5.14.1).
.IP "\(bu" 4
The \f(CW\*(C`<<\eFOO\*(C'\fR here-doc syntax has been documented (5.14.1).
.PP
\fIperlpragma\fR
.IX Subsection "perlpragma"
.IP "\(bu" 4
There is now a standard convention for naming keys in the \f(CW\*(C`%^H\*(C'\fR,
documented under Key naming.
.PP
\fI\*(L"Laundering and Detecting Tainted Data\*(R" in perlsec\fR
.IX Subsection "Laundering and Detecting Tainted Data in perlsec"
.IP "\(bu" 4
The example function for checking for taintedness contained a subtle
error.  \f(CW$@\fR needs to be localized to prevent its changing this
global's value outside the function.  The preferred method to check for
this remains \*(L"tainted\*(R" in Scalar::Util.
.PP
\fIperllol\fR
.IX Subsection "perllol"
.IP "\(bu" 4
perllol has been expanded with examples using the new \f(CW\*(C`push $scalar\*(C'\fR
syntax introduced in Perl 5.14.0 (5.14.1).
.PP
\fIperlmod\fR
.IX Subsection "perlmod"
.IP "\(bu" 4
perlmod now states explicitly that some types of explicit symbol table
manipulation are not supported.  This codifies what was effectively already
the case [perl #78074].
.PP
\fIperlpodstyle\fR
.IX Subsection "perlpodstyle"
.IP "\(bu" 4
The tips on which formatting codes to use have been corrected and greatly
expanded.
.IP "\(bu" 4
There are now a couple of example one-liners for previewing \s-1POD\s0 files after
they have been edited.
.PP
\fIperlre\fR
.IX Subsection "perlre"
.IP "\(bu" 4
The \f(CW\*(C`(*COMMIT)\*(C'\fR directive is now listed in the right section
(Verbs without an argument).
.PP
\fIperlrun\fR
.IX Subsection "perlrun"
.IP "\(bu" 4
perlrun has undergone a significant clean-up.  Most notably, the
\&\fB\-0x...\fR form of the \fB\-0\fR flag has been clarified, and the final section
on environment variables has been corrected and expanded (5.14.1).
.PP
\fIperlsub\fR
.IX Subsection "perlsub"
.IP "\(bu" 4
The ($;) prototype syntax, which has existed for rather a long time, is now
documented in perlsub.  It lets a unary function have the same
precedence as a list operator.
.PP
\fIperltie\fR
.IX Subsection "perltie"
.IP "\(bu" 4
The required syntax for tying handles has been documented.
.PP
\fIperlvar\fR
.IX Subsection "perlvar"
.IP "\(bu" 4
The documentation for $! has been corrected and clarified.
It used to state that $! could be \f(CW\*(C`undef\*(C'\fR, which is not the case.  It was
also unclear whether system calls set C's \f(CW\*(C`errno\*(C'\fR or Perl's \f(CW$!\fR
[perl #91614].
.IP "\(bu" 4
Documentation for $$ has been amended with additional
cautions regarding changing the process \s-1ID.\s0
.PP
\fIOther Changes\fR
.IX Subsection "Other Changes"
.IP "\(bu" 4
perlxs was extended with documentation on inline typemaps.
.IP "\(bu" 4
perlref has a new Circular References
section explaining how circularities may not be freed and how to solve that
with weak references.
.IP "\(bu" 4
Parts of perlapi were clarified, and Perl equivalents of some C
functions have been added as an additional mode of exposition.
.IP "\(bu" 4
A few parts of perlre and perlrecharclass were clarified.
.SS "Removed Documentation"
.IX Subsection "Removed Documentation"
\fIOld \s-1OO\s0 Documentation\fR
.IX Subsection "Old OO Documentation"
.PP
The old \s-1OO\s0 tutorials, perltoot, perltooc, and perlboot, have been
removed.  The perlbot (bag of object tricks) document has been removed
as well.
.PP
\fIDevelopment Deltas\fR
.IX Subsection "Development Deltas"
.PP
The perldelta files for development releases are no longer packaged with
perl.  These can still be found in the perl source code repository.
.SH "Diagnostics"
.IX Header "Diagnostics"
The following additions or changes have been made to diagnostic output,
including warnings and fatal error messages.  For the complete list of
diagnostic messages, see perldiag.
.SS "New Diagnostics"
.IX Subsection "New Diagnostics"
\fINew Errors\fR
.IX Subsection "New Errors"
.IP "\(bu" 4
Cannot set tied \f(CW@DB::args\fR
.Sp
This error occurs when \f(CW\*(C`caller\*(C'\fR tries to set \f(CW@DB::args\fR but finds it
tied.  Before this error was added, it used to crash instead.
.IP "\(bu" 4
Cannot tie unreifiable array
.Sp
This error is part of a safety check that the \f(CW\*(C`tie\*(C'\fR operator does before
tying a special array like \f(CW@_\fR.  You should never see this message.
.IP "\(bu" 4
&CORE::%s cannot be called directly
.Sp
This occurs when a subroutine in the \f(CW\*(C`CORE::\*(C'\fR namespace is called
with \f(CW&foo\fR syntax or through a reference.  Some subroutines
in this package cannot yet be called that way, but must be
called as barewords.  See "Subroutines in the \f(CW\*(C`CORE\*(C'\fR namespace", above.
.IP "\(bu" 4
Source filters apply only to byte streams
.Sp
This new error occurs when you try to activate a source filter (usually by
loading a source filter module) within a string passed to \f(CW\*(C`eval\*(C'\fR under the
\&\f(CW\*(C`unicode_eval\*(C'\fR feature.
.PP
\fINew Warnings\fR
.IX Subsection "New Warnings"
.IP "\(bu" 4
defined(@array) is deprecated
.Sp
The long-deprecated \f(CW\*(C`defined(@array)\*(C'\fR now also warns for package variables.
Previously it issued a warning for lexical variables only.
.IP "\(bu" 4
\&\fIlength()\fR used on \f(CW%s\fR
.Sp
This new warning occurs when \f(CW\*(C`length\*(C'\fR is used on an array or hash, instead
of \f(CW\*(C`scalar(@array)\*(C'\fR or \f(CW\*(C`scalar(keys %hash)\*(C'\fR.
.IP "\(bu" 4
lvalue attribute \f(CW%s\fR already-defined subroutine
.Sp
attributes.pm now emits this warning when the :lvalue
attribute is applied to a Perl subroutine that has already been defined, as
doing so can have unexpected side-effects.
.IP "\(bu" 4
overload arg '%s' is invalid
.Sp
This warning, in the \*(L"overload\*(R" category, is produced when the overload
pragma is given an argument it doesn't recognize, presumably a mistyped
operator.
.IP "\(bu" 4
$[ used in \f(CW%s\fR (did you mean $] ?)
.Sp
This new warning exists to catch the mistaken use of \f(CW$[\fR in version
checks.  \f(CW$]\fR, not \f(CW$[\fR, contains the version number.
.IP "\(bu" 4
Useless assignment to a temporary
.Sp
Assigning to a temporary scalar returned
from an lvalue subroutine now produces this
warning [perl #31946].
.IP "\(bu" 4
Useless use of \eE
.Sp
\&\f(CW\*(C`\eE\*(C'\fR does nothing unless preceded by \f(CW\*(C`\eQ\*(C'\fR, \f(CW\*(C`\eL\*(C'\fR or \f(CW\*(C`\eU\*(C'\fR.
.SS "Removed Errors"
.IX Subsection "Removed Errors"
.IP "\(bu" 4
\&\*(L"sort is now a reserved word\*(R"
.Sp
This error used to occur when \f(CW\*(C`sort\*(C'\fR was called without arguments,
followed by \f(CW\*(C`;\*(C'\fR or \f(CW\*(C`)\*(C'\fR.  (E.g., \f(CW\*(C`sort;\*(C'\fR would die, but \f(CW\*(C`{sort}\*(C'\fR was
\&\s-1OK.\s0)  This error message was added in Perl 3 to catch code like
\&\f(CW\*(C`close(sort)\*(C'\fR which would no longer work.  More than two decades later,
this message is no longer appropriate.  Now \f(CW\*(C`sort\*(C'\fR without arguments is
always allowed, and returns an empty list, as it did in those cases
where it was already allowed [perl #90030].
.SS "Changes to Existing Diagnostics"
.IX Subsection "Changes to Existing Diagnostics"
.IP "\(bu" 4
The \*(L"Applying pattern match...\*(R" or similar warning produced when an
array or hash is on the left-hand side of the \f(CW\*(C`=~\*(C'\fR operator now
mentions the name of the variable.
.IP "\(bu" 4
The \*(L"Attempt to free non-existent shared string\*(R" has had the spelling
of \*(L"non-existent\*(R" corrected to \*(L"nonexistent\*(R".  It was already listed
with the correct spelling in perldiag.
.IP "\(bu" 4
The error messages for using \f(CW\*(C`default\*(C'\fR and \f(CW\*(C`when\*(C'\fR outside a
topicalizer have been standardized to match the messages for \f(CW\*(C`continue\*(C'\fR
and loop controls.  They now read 'Can't \*(L"default\*(R" outside a
topicalizer' and 'Can't \*(L"when\*(R" outside a topicalizer'.  They both used
to be 'Can't use \fIwhen()\fR outside a topicalizer' [perl #91514].
.IP "\(bu" 4
The message, \*(L"Code point 0x%X is not Unicode, no properties match it;
all inverse properties do\*(R" has been changed to \*(L"Code point 0x%X is not
Unicode, all \ep{} matches fail; all \eP{} matches succeed\*(R".
.IP "\(bu" 4
Redefinition warnings for constant subroutines used to be mandatory,
even occurring under \f(CW\*(C`no warnings\*(C'\fR.  Now they respect the warnings
pragma.
.IP "\(bu" 4
The \*(L"glob failed\*(R" warning message is now suppressible via \f(CW\*(C`no warnings\*(C'\fR
[perl #111656].
.IP "\(bu" 4
The Invalid version format
error message now says \*(L"negative version number\*(R" within the parentheses,
rather than \*(L"non-numeric data\*(R", for negative numbers.
.IP "\(bu" 4
The two warnings
Possible attempt to put comments in \fIqw()\fR list
and
Possible attempt to separate words with commas
are no longer mutually exclusive: the same \f(CW\*(C`qw\*(C'\fR construct may produce
both.
.IP "\(bu" 4
The uninitialized warning for \f(CW\*(C`y///r\*(C'\fR when \f(CW$_\fR is implicit and
undefined now mentions the variable name, just like the non\-/r variation
of the operator.
.IP "\(bu" 4
The 'Use of \*(L"foo\*(R" without parentheses is ambiguous' warning has been
extended to apply also to user-defined subroutines with a (;$)
prototype, and not just to built-in functions.
.IP "\(bu" 4
Warnings that mention the names of lexical (\f(CW\*(C`my\*(C'\fR) variables with
Unicode characters in them now respect the presence or absence of the
\&\f(CW\*(C`:utf8\*(C'\fR layer on the output handle, instead of outputting \s-1UTF8\s0
regardless.  Also, the correct names are included in the strings passed
to \f(CW$SIG{_\|_WARN_\|_}\fR handlers, rather than the raw \s-1UTF8\s0 bytes.
.SH "Utility Changes"
.IX Header "Utility Changes"
\fIh2ph\fR
.IX Subsection "h2ph"
.IP "\(bu" 4
h2ph used to generate code of the form
.Sp
.Vb 3
\&  unless(defined(&FOO)) {
\&    sub FOO () {42;}
\&  }
.Ve
.Sp
But the subroutine is a compile-time declaration, and is hence unaffected
by the condition.  It has now been corrected to emit a string \f(CW\*(C`eval\*(C'\fR
around the subroutine [perl #99368].
.PP
\fIsplain\fR
.IX Subsection "splain"
.IP "\(bu" 4
\&\fIsplain\fR no longer emits backtraces with the first line number repeated.
.Sp
This:
.Sp
.Vb 6
\&    Uncaught exception from user code:
\&            Cannot fwiddle the fwuddle at \-e line 1.
\&     at \-e line 1
\&            main::baz() called at \-e line 1
\&            main::bar() called at \-e line 1
\&            main::foo() called at \-e line 1
.Ve
.Sp
has become this:
.Sp
.Vb 5
\&    Uncaught exception from user code:
\&            Cannot fwiddle the fwuddle at \-e line 1.
\&            main::baz() called at \-e line 1
\&            main::bar() called at \-e line 1
\&            main::foo() called at \-e line 1
.Ve
.IP "\(bu" 4
Some error messages consist of multiple lines that are listed as separate
entries in perldiag.  splain has been taught to find the separate
entries in these cases, instead of simply failing to find the message.
.PP
\fIzipdetails\fR
.IX Subsection "zipdetails"
.IP "\(bu" 4
This is a new utility, included as part of an
IO::Compress::Base upgrade.
.Sp
zipdetails displays information about the internal record structure
of the zip file.  It is not concerned with displaying any details of
the compressed data stored in the zip file.
.SH "Configuration and Compilation"
.IX Header "Configuration and Compilation"
.IP "\(bu" 4
\&\fIregexp.h\fR has been modified for compatibility with \s-1GCC\s0's \fB\-Werror\fR
option, as used by some projects that include perl's header files (5.14.1).
.IP "\(bu" 4
\&\f(CW\*(C`USE_LOCALE{,_COLLATE,_CTYPE,_NUMERIC}\*(C'\fR have been added the output of perl \-V
as they have affect the behavior of the interpreter binary (albeit
in only a small area).
.IP "\(bu" 4
The code and tests for IPC::Open2 have been moved from \fIext/IPC\-Open2\fR
into \fIext/IPC\-Open3\fR, as \f(CW\*(C`IPC::Open2::open2()\*(C'\fR is implemented as a thin
wrapper around \f(CW\*(C`IPC::Open3::_open3()\*(C'\fR, and hence is very tightly coupled to
it.
.IP "\(bu" 4
The magic types and magic vtables are now generated from data in a new script
\&\fIregen/mg_vtable.pl\fR, instead of being maintained by hand.  As different
\&\s-1EBCDIC\s0 variants can't agree on the code point for '~', the character to code
point conversion is done at build time by \fIgenerate_uudmap\fR to a new generated
header \fImg_data.h\fR.  \f(CW\*(C`PL_vtbl_bm\*(C'\fR and \f(CW\*(C`PL_vtbl_fm\*(C'\fR are now defined by the
pre-processor as \f(CW\*(C`PL_vtbl_regexp\*(C'\fR, instead of being distinct C variables.
\&\f(CW\*(C`PL_vtbl_sig\*(C'\fR has been removed.
.IP "\(bu" 4
Building with \f(CW\*(C`\-DPERL_GLOBAL_STRUCT\*(C'\fR works again.  This configuration is not
generally used.
.IP "\(bu" 4
Perl configured with \fI\s-1MAD\s0\fR now correctly frees \f(CW\*(C`MADPROP\*(C'\fR structures when
OPs are freed.  \f(CW\*(C`MADPROP\*(C'\fRs are now allocated with \f(CW\*(C`PerlMemShared_malloc()\*(C'\fR
.IP "\(bu" 4
\&\fImakedef.pl\fR has been refactored.  This should have no noticeable affect on
any of the platforms that use it as part of their build (\s-1AIX, VMS,\s0 Win32).
.IP "\(bu" 4
\&\f(CW\*(C`useperlio\*(C'\fR can no longer be disabled.
.IP "\(bu" 4
The file \fIglobal.sym\fR is no longer needed, and has been removed.  It
contained a list of all exported functions, one of the files generated by
\&\fIregen/embed.pl\fR from data in \fIembed.fnc\fR and \fIregen/opcodes\fR.  The code
has been refactored so that the only user of \fIglobal.sym\fR, \fImakedef.pl\fR,
now reads \fIembed.fnc\fR and \fIregen/opcodes\fR directly, removing the need to
store the list of exported functions in an intermediate file.
.Sp
As \fIglobal.sym\fR was never installed, this change should not be visible
outside the build process.
.IP "\(bu" 4
\&\fIpod/buildtoc\fR, used by the build process to build perltoc, has been
refactored and simplified.  It now contains only code to build perltoc;
the code to regenerate Makefiles has been moved to \fIPorting/pod_rules.pl\fR.
It's a bug if this change has any material effect on the build process.
.IP "\(bu" 4
\&\fIpod/roffitall\fR is now built by \fIpod/buildtoc\fR, instead of being
shipped with the distribution.  Its list of manpages is now generated
(and therefore current).  See also \s-1RT\s0 #103202 for an unresolved related
issue.
.IP "\(bu" 4
The man page for \f(CW\*(C`XS::Typemap\*(C'\fR is no longer installed.  \f(CW\*(C`XS::Typemap\*(C'\fR
is a test module which is not installed, hence installing its
documentation makes no sense.
.IP "\(bu" 4
The \-Dusesitecustomize and \-Duserelocatableinc options now work
together properly.
.SH "Platform Support"
.IX Header "Platform Support"
.SS "Platform-Specific Notes"
.IX Subsection "Platform-Specific Notes"
\fICygwin\fR
.IX Subsection "Cygwin"
.IP "\(bu" 4
Since version 1.7, Cygwin supports native \s-1UTF\-8\s0 paths.  If Perl is built
under that environment, directory and filenames will be \s-1UTF\-8\s0 encoded.
.IP "\(bu" 4
Cygwin does not initialize all original Win32 environment variables.  See
\&\fI\s-1README\s0.cygwin\fR for a discussion of the newly-added
\&\f(CW\*(C`Cygwin::sync_winenv()\*(C'\fR function [perl #110190] and for
further links.
.PP
\fIHP-UX\fR
.IX Subsection "HP-UX"
.IP "\(bu" 4
HP-UX \s-1PA\-RISC/64\s0 now supports gcc\-4.x
.Sp
A fix to correct the socketsize now makes the test suite pass on HP-UX
PA-RISC for 64bitall builds. (5.14.2)
.PP
\fI\s-1VMS\s0\fR
.IX Subsection "VMS"
.IP "\(bu" 4
Remove unnecessary includes, fix miscellaneous compiler warnings and
close some unclosed comments on \fIvms/vms.c\fR.
.IP "\(bu" 4
Remove sockadapt layer from the \s-1VMS\s0 build.
.IP "\(bu" 4
Explicit support for \s-1VMS\s0 versions before v7.0 and \s-1DEC C\s0 versions
before v6.0 has been removed.
.IP "\(bu" 4
Since Perl 5.10.1, the home-grown \f(CW\*(C`stat\*(C'\fR wrapper has been unable to
distinguish between a directory name containing an underscore and an
otherwise-identical filename containing a dot in the same position
(e.g., t/test_pl as a directory and t/test.pl as a file).  This problem
has been corrected.
.IP "\(bu" 4
The build on \s-1VMS\s0 now permits names of the resulting symbols in C code for
Perl longer than 31 characters.  Symbols like
\&\f(CW\*(C`Perl_\|_it_was_the_best_of_times_it_was_the_worst_of_times\*(C'\fR can now be
created freely without causing the \s-1VMS\s0 linker to seize up.
.PP
\fIGNU/Hurd\fR
.IX Subsection "GNU/Hurd"
.IP "\(bu" 4
Numerous build and test failures on GNU/Hurd have been resolved with hints
for building \s-1DBM\s0 modules, detection of the library search path, and enabling
of large file support.
.PP
\fIOpenVOS\fR
.IX Subsection "OpenVOS"
.IP "\(bu" 4
Perl is now built with dynamic linking on OpenVOS, the minimum supported
version of which is now Release 17.1.0.
.PP
\fISunOS\fR
.IX Subsection "SunOS"
.PP
The \s-1CC\s0 workshop \*(C+ compiler is now detected and used on systems that ship
without cc.
.SH "Internal Changes"
.IX Header "Internal Changes"
.IP "\(bu" 4
The compiled representation of formats is now stored via the \f(CW\*(C`mg_ptr\*(C'\fR of
their \f(CW\*(C`PERL_MAGIC_fm\*(C'\fR.  Previously it was stored in the string buffer,
beyond \f(CW\*(C`SvLEN()\*(C'\fR, the regular end of the string.  \f(CW\*(C`SvCOMPILED()\*(C'\fR and
\&\f(CW\*(C`SvCOMPILED_{on,off}()\*(C'\fR now exist solely for compatibility for \s-1XS\s0 code.
The first is always 0, the other two now no-ops. (5.14.1)
.IP "\(bu" 4
Some global variables have been marked \f(CW\*(C`const\*(C'\fR, members in the interpreter
structure have been re-ordered, and the opcodes have been re-ordered.  The
op \f(CW\*(C`OP_AELEMFAST\*(C'\fR has been split into \f(CW\*(C`OP_AELEMFAST\*(C'\fR and \f(CW\*(C`OP_AELEMFAST_LEX\*(C'\fR.
.IP "\(bu" 4
When empting a hash of its elements (e.g., via undef(%h), or \f(CW%h\fR=()), HvARRAY
field is no longer temporarily zeroed.  Any destructors called on the freed
elements see the remaining elements.  Thus, \f(CW%h\fR=() becomes more like
\&\f(CW\*(C`delete $h{$_} for keys %h\*(C'\fR.
.IP "\(bu" 4
Boyer-Moore compiled scalars are now PVMGs, and the Boyer-Moore tables are now
stored via the mg_ptr of their \f(CW\*(C`PERL_MAGIC_bm\*(C'\fR.
Previously they were PVGVs, with the tables stored in
the string buffer, beyond \f(CW\*(C`SvLEN()\*(C'\fR.  This eliminates
the last place where the core stores data beyond \f(CW\*(C`SvLEN()\*(C'\fR.
.IP "\(bu" 4
Simplified logic in \f(CW\*(C`Perl_sv_magic()\*(C'\fR introduces a small change of
behavior for error cases involving unknown magic types.  Previously, if
\&\f(CW\*(C`Perl_sv_magic()\*(C'\fR was passed a magic type unknown to it, it would
.RS 4
.IP "1." 4
Croak \*(L"Modification of a read-only value attempted\*(R" if read only
.IP "2." 4
Return without error if the \s-1SV\s0 happened to already have this magic
.IP "3." 4
otherwise croak \*(L"Don't know how to handle magic of type \e\e%o\*(R"
.RE
.RS 4
.Sp
Now it will always croak \*(L"Don't know how to handle magic of type \e\e%o\*(R", even
on read-only values, or SVs which already have the unknown magic type.
.RE
.IP "\(bu" 4
The experimental \f(CW\*(C`fetch_cop_label\*(C'\fR function has been renamed to
\&\f(CW\*(C`cop_fetch_label\*(C'\fR.
.IP "\(bu" 4
The \f(CW\*(C`cop_store_label\*(C'\fR function has been added to the \s-1API,\s0 but is
experimental.
.IP "\(bu" 4
\&\fIembedvar.h\fR has been simplified, and one level of macro indirection for
PL_* variables has been removed for the default (non-multiplicity)
configuration.  PERLVAR*() macros now directly expand their arguments to
tokens such as \f(CW\*(C`PL_defgv\*(C'\fR, instead of expanding to \f(CW\*(C`PL_Idefgv\*(C'\fR, with
\&\fIembedvar.h\fR defining a macro to map \f(CW\*(C`PL_Idefgv\*(C'\fR to \f(CW\*(C`PL_defgv\*(C'\fR.  \s-1XS\s0 code
which has unwarranted chumminess with the implementation may need updating.
.IP "\(bu" 4
An \s-1API\s0 has been added to explicitly choose whether to export \s-1XSUB\s0
symbols.  More detail can be found in the comments for commit e64345f8.
.IP "\(bu" 4
The \f(CW\*(C`is_gv_magical_sv\*(C'\fR function has been eliminated and merged with
\&\f(CW\*(C`gv_fetchpvn_flags\*(C'\fR.  It used to be called to determine whether a \s-1GV\s0
should be autovivified in rvalue context.  Now it has been replaced with a
new \f(CW\*(C`GV_ADDMG\*(C'\fR flag (not part of the \s-1API\s0).
.IP "\(bu" 4
The returned code point from the function \f(CW\*(C`utf8n_to_uvuni()\*(C'\fR
when the input is malformed \s-1UTF\-8,\s0 malformations are allowed, and
\&\f(CW\*(C`utf8\*(C'\fR warnings are off is now the Unicode \s-1REPLACEMENT CHARACTER\s0
whenever the malformation is such that no well-defined code point can be
computed.  Previously the returned value was essentially garbage.  The
only malformations that have well-defined values are a zero-length
string (0 is the return), and overlong \s-1UTF\-8\s0 sequences.
.IP "\(bu" 4
Padlists are now marked \f(CW\*(C`AvREAL\*(C'\fR; i.e., reference-counted.  They have
always been reference-counted, but were not marked real, because \fIpad.c\fR
did its own clean-up, instead of using the usual clean-up code in \fIsv.c\fR.
That caused problems in thread cloning, so now the \f(CW\*(C`AvREAL\*(C'\fR flag is on,
but is turned off in \fIpad.c\fR right before the padlist is freed (after
\&\fIpad.c\fR has done its custom freeing of the pads).
.IP "\(bu" 4
All C files that make up the Perl core have been converted to \s-1UTF\-8.\s0
.IP "\(bu" 4
These new functions have been added as part of the work on Unicode symbols:
.Sp
.Vb 10
\&    HvNAMELEN
\&    HvNAMEUTF8
\&    HvENAMELEN
\&    HvENAMEUTF8
\&    gv_init_pv
\&    gv_init_pvn
\&    gv_init_pvsv
\&    gv_fetchmeth_pv
\&    gv_fetchmeth_pvn
\&    gv_fetchmeth_sv
\&    gv_fetchmeth_pv_autoload
\&    gv_fetchmeth_pvn_autoload
\&    gv_fetchmeth_sv_autoload
\&    gv_fetchmethod_pv_flags
\&    gv_fetchmethod_pvn_flags
\&    gv_fetchmethod_sv_flags
\&    gv_autoload_pv
\&    gv_autoload_pvn
\&    gv_autoload_sv
\&    newGVgen_flags
\&    sv_derived_from_pv
\&    sv_derived_from_pvn
\&    sv_derived_from_sv
\&    sv_does_pv
\&    sv_does_pvn
\&    sv_does_sv
\&    whichsig_pv
\&    whichsig_pvn
\&    whichsig_sv
\&    newCONSTSUB_flags
.Ve
.Sp
The gv_fetchmethod_*_flags functions, like gv_fetchmethod_flags, are
experimental and may change in a future release.
.IP "\(bu" 4
The following functions were added.  These are \fInot\fR part of the \s-1API:\s0
.Sp
.Vb 9
\&    GvNAMEUTF8
\&    GvENAMELEN
\&    GvENAME_HEK
\&    CopSTASH_flags
\&    CopSTASH_flags_set
\&    PmopSTASH_flags
\&    PmopSTASH_flags_set
\&    sv_sethek
\&    HEKfARG
.Ve
.Sp
There is also a \f(CW\*(C`HEKf\*(C'\fR macro corresponding to \f(CW\*(C`SVf\*(C'\fR, for
interpolating HEKs in formatted strings.
.IP "\(bu" 4
\&\f(CW\*(C`sv_catpvn_flags\*(C'\fR takes a couple of new internal-only flags,
\&\f(CW\*(C`SV_CATBYTES\*(C'\fR and \f(CW\*(C`SV_CATUTF8\*(C'\fR, which tell it whether the char array to
be concatenated is \s-1UTF8. \s0 This allows for more efficient concatenation than
creating temporary SVs to pass to \f(CW\*(C`sv_catsv\*(C'\fR.
.IP "\(bu" 4
For \s-1XS AUTOLOAD\s0 subs, \f(CW$AUTOLOAD\fR is set once more, as it was in 5.6.0.  This
is in addition to setting \f(CW\*(C`SvPVX(cv)\*(C'\fR, for compatibility with 5.8 to 5.14.
See \*(L"Autoloading with XSUBs\*(R" in perlguts.
.IP "\(bu" 4
Perl now checks whether the array (the linearized isa) returned by a \s-1MRO\s0
plugin begins with the name of the class itself, for which the array was
created, instead of assuming that it does.  This prevents the first element
from being skipped during method lookup.  It also means that
\&\f(CW\*(C`mro::get_linear_isa\*(C'\fR may return an array with one more element than the
\&\s-1MRO\s0 plugin provided [perl #94306].
.IP "\(bu" 4
\&\f(CW\*(C`PL_curstash\*(C'\fR is now reference-counted.
.IP "\(bu" 4
There are now feature bundle hints in \f(CW\*(C`PL_hints\*(C'\fR (\f(CW$^H\fR) that version
declarations use, to avoid having to load \fIfeature.pm\fR.  One setting of
the hint bits indicates a \*(L"custom\*(R" feature bundle, which means that the
entries in \f(CW\*(C`%^H\*(C'\fR still apply.  \fIfeature.pm\fR uses that.
.Sp
The \f(CW\*(C`HINT_FEATURE_MASK\*(C'\fR macro is defined in \fIperl.h\fR along with other
hints.  Other macros for setting and testing features and bundles are in
the new \fIfeature.h\fR.  \f(CW\*(C`FEATURE_IS_ENABLED\*(C'\fR (which has moved to
\&\fIfeature.h\fR) is no longer used throughout the codebase, but more specific
macros, e.g., \f(CW\*(C`FEATURE_SAY_IS_ENABLED\*(C'\fR, that are defined in \fIfeature.h\fR.
.IP "\(bu" 4
\&\fIlib/feature.pm\fR is now a generated file, created by the new
\&\fIregen/feature.pl\fR script, which also generates \fIfeature.h\fR.
.IP "\(bu" 4
Tied arrays are now always \f(CW\*(C`AvREAL\*(C'\fR.  If \f(CW@_\fR or \f(CW\*(C`DB::args\*(C'\fR is tied, it
is reified first, to make sure this is always the case.
.IP "\(bu" 4
Two new functions \f(CW\*(C`utf8_to_uvchr_buf()\*(C'\fR and \f(CW\*(C`utf8_to_uvuni_buf()\*(C'\fR have
been added.  These are the same as \f(CW\*(C`utf8_to_uvchr\*(C'\fR and
\&\f(CW\*(C`utf8_to_uvuni\*(C'\fR (which are now deprecated), but take an extra parameter
that is used to guard against reading beyond the end of the input
string.
See \*(L"utf8_to_uvchr_buf\*(R" in perlapi and \*(L"utf8_to_uvuni_buf\*(R" in perlapi.
.IP "\(bu" 4
The regular expression engine now does \s-1TRIE\s0 case insensitive matches
under Unicode. This may change the output of \f(CW\*(C`use re \*(Aqdebug\*(Aq;\*(C'\fR,
and will speed up various things.
.IP "\(bu" 4
There is a new \f(CW\*(C`wrap_op_checker()\*(C'\fR function, which provides a thread-safe
alternative to writing to \f(CW\*(C`PL_check\*(C'\fR directly.
.SH "Selected Bug Fixes"
.IX Header "Selected Bug Fixes"
.SS "Array and hash"
.IX Subsection "Array and hash"
.IP "\(bu" 4
A bug has been fixed that would cause a \*(L"Use of freed value in iteration\*(R"
error if the next two hash elements that would be iterated over are
deleted [perl #85026]. (5.14.1)
.IP "\(bu" 4
Deleting the current hash iterator (the hash element that would be returned
by the next call to \f(CW\*(C`each\*(C'\fR) in void context used not to free it
[perl #85026].
.IP "\(bu" 4
Deletion of methods via \f(CW\*(C`delete $Class::{method}\*(C'\fR syntax used to update
method caches if called in void context, but not scalar or list context.
.IP "\(bu" 4
When hash elements are deleted in void context, the internal hash entry is
now freed before the value is freed, to prevent destructors called by that
latter freeing from seeing the hash in an inconsistent state.  It was
possible to cause double-frees if the destructor freed the hash itself
[perl #100340].
.IP "\(bu" 4
A \f(CW\*(C`keys\*(C'\fR optimization in Perl 5.12.0 to make it faster on empty hashes
caused \f(CW\*(C`each\*(C'\fR not to reset the iterator if called after the last element
was deleted.
.IP "\(bu" 4
Freeing deeply nested hashes no longer crashes [perl #44225].
.IP "\(bu" 4
It is possible from \s-1XS\s0 code to create hashes with elements that have no
values.  The hash element and slice operators used to crash
when handling these in lvalue context.  They now
produce a \*(L"Modification of non-creatable hash value attempted\*(R" error
message.
.IP "\(bu" 4
If list assignment to a hash or array triggered destructors that freed the
hash or array itself, a crash would ensue.  This is no longer the case
[perl #107440].
.IP "\(bu" 4
It used to be possible to free the typeglob of a localized array or hash
(e.g., \f(CW\*(C`local @{"x"}; delete $::{x}\*(C'\fR), resulting in a crash on scope exit.
.IP "\(bu" 4
Some core bugs affecting Hash::Util have been fixed: locking a hash
element that is a glob copy no longer causes the next assignment to it to
corrupt the glob (5.14.2), and unlocking a hash element that holds a
copy-on-write scalar no longer causes modifications to that scalar to
modify other scalars that were sharing the same string buffer.
.SS "C \s-1API\s0 fixes"
.IX Subsection "C API fixes"
.IP "\(bu" 4
The \f(CW\*(C`newHVhv\*(C'\fR \s-1XS\s0 function now works on tied hashes, instead of crashing or
returning an empty hash.
.IP "\(bu" 4
The \f(CW\*(C`SvIsCOW\*(C'\fR C macro now returns false for read-only copies of typeglobs,
such as those created by:
.Sp
.Vb 2
\&  $hash{elem} = *foo;
\&  Hash::Util::lock_value %hash, \*(Aqelem\*(Aq;
.Ve
.Sp
It used to return true.
.IP "\(bu" 4
The \f(CW\*(C`SvPVutf8\*(C'\fR C function no longer tries to modify its argument,
resulting in errors [perl #108994].
.IP "\(bu" 4
\&\f(CW\*(C`SvPVutf8\*(C'\fR now works properly with magical variables.
.IP "\(bu" 4
\&\f(CW\*(C`SvPVbyte\*(C'\fR now works properly non-PVs.
.IP "\(bu" 4
When presented with malformed \s-1UTF\-8\s0 input, the XS-callable functions
\&\f(CW\*(C`is_utf8_string()\*(C'\fR, \f(CW\*(C`is_utf8_string_loc()\*(C'\fR, and
\&\f(CW\*(C`is_utf8_string_loclen()\*(C'\fR could read beyond the end of the input
string by up to 12 bytes.  This no longer happens.  [perl #32080].
However, currently, \f(CW\*(C`is_utf8_char()\*(C'\fR still has this defect, see
\&\*(L"\fIis_utf8_char()\fR\*(R" above.
.IP "\(bu" 4
The C\-level \f(CW\*(C`pregcomp\*(C'\fR function could become confused about whether the
pattern was in \s-1UTF8\s0 if the pattern was an overloaded, tied, or otherwise
magical scalar [perl #101940].
.SS "Compile-time hints"
.IX Subsection "Compile-time hints"
.IP "\(bu" 4
Tying \f(CW\*(C`%^H\*(C'\fR no longer causes perl to crash or ignore the contents of
\&\f(CW\*(C`%^H\*(C'\fR when entering a compilation scope [perl #106282].
.IP "\(bu" 4
\&\f(CW\*(C`eval $string\*(C'\fR and \f(CW\*(C`require\*(C'\fR used not to
localize \f(CW\*(C`%^H\*(C'\fR during compilation if it
was empty at the time the \f(CW\*(C`eval\*(C'\fR call itself was compiled.  This could
lead to scary side effects, like \f(CW\*(C`use re "/m"\*(C'\fR enabling other flags that
the surrounding code was trying to enable for its caller [perl #68750].
.IP "\(bu" 4
\&\f(CW\*(C`eval $string\*(C'\fR and \f(CW\*(C`require\*(C'\fR no longer localize hints (\f(CW$^H\fR and \f(CW\*(C`%^H\*(C'\fR)
at run time, but only during compilation of the \f(CW$string\fR or required file.
This makes \f(CW\*(C`BEGIN { $^H{foo}=7 }\*(C'\fR equivalent to
\&\f(CW\*(C`BEGIN { eval \*(Aq$^H{foo}=7\*(Aq }\*(C'\fR [perl #70151].
.IP "\(bu" 4
Creating a \s-1BEGIN\s0 block from \s-1XS\s0 code (via \f(CW\*(C`newXS\*(C'\fR or \f(CW\*(C`newATTRSUB\*(C'\fR) would,
on completion, make the hints of the current compiling code the current
hints.  This could cause warnings to occur in a non-warning scope.
.SS "Copy-on-write scalars"
.IX Subsection "Copy-on-write scalars"
Copy-on-write or shared hash key scalars
were introduced in 5.8.0, but most Perl code
did not encounter them (they were used mostly internally).  Perl
5.10.0 extended them, such that assigning \f(CW\*(C`_\|_PACKAGE_\|_\*(C'\fR or a
hash key to a scalar would make it copy-on-write.  Several parts
of Perl were not updated to account for them, but have now been fixed.
.IP "\(bu" 4
\&\f(CW\*(C`utf8::decode\*(C'\fR had a nasty bug that would modify copy-on-write scalars'
string buffers in place (i.e., skipping the copy).  This could result in
hashes having two elements with the same key [perl #91834]. (5.14.2)
.IP "\(bu" 4
Lvalue subroutines were not allowing \s-1COW\s0 scalars to be returned.  This was
fixed for lvalue scalar context in Perl 5.12.3 and 5.14.0, but list context
was not fixed until this release.
.IP "\(bu" 4
Elements of restricted hashes (see the fields pragma) containing
copy-on-write values couldn't be deleted, nor could such hashes be cleared
(\f(CW\*(C`%hash = ()\*(C'\fR). (5.14.2)
.IP "\(bu" 4
Localizing a tied variable used to make it read-only if it contained a
copy-on-write string. (5.14.2)
.IP "\(bu" 4
Assigning a copy-on-write string to a stash
element no longer causes a double free.  Regardless of this change, the
results of such assignments are still undefined.
.IP "\(bu" 4
Assigning a copy-on-write string to a tied variable no longer stops that
variable from being tied if it happens to be a \s-1PVMG\s0 or \s-1PVLV\s0 internally.
.IP "\(bu" 4
Doing a substitution on a tied variable returning a copy-on-write
scalar used to cause an assertion failure or an \*(L"Attempt to free
nonexistent shared string\*(R" warning.
.IP "\(bu" 4
This one is a regression from 5.12: In 5.14.0, the bitwise assignment
operators \f(CW\*(C`|=\*(C'\fR, \f(CW\*(C`^=\*(C'\fR and \f(CW\*(C`&=\*(C'\fR started leaving the left-hand side
undefined if it happened to be a copy-on-write string [perl #108480].
.IP "\(bu" 4
Storable, Devel::Peek and PerlIO::scalar had similar problems.
See \*(L"Updated Modules and Pragmata\*(R", above.
.SS "The debugger"
.IX Subsection "The debugger"
.IP "\(bu" 4
\&\fIdumpvar.pl\fR, and therefore the \f(CW\*(C`x\*(C'\fR command in the debugger, have been
fixed to handle objects blessed into classes whose names contain \*(L"=\*(R".  The
contents of such objects used not to be dumped [perl #101814].
.IP "\(bu" 4
The \*(L"R\*(R" command for restarting a debugger session has been fixed to work on
Windows, or any other system lacking a \f(CW\*(C`POSIX::_SC_OPEN_MAX\*(C'\fR constant
[perl #87740].
.IP "\(bu" 4
The \f(CW\*(C`#line 42 foo\*(C'\fR directive used not to update the arrays of lines used
by the debugger if it occurred in a string eval.  This was partially fixed
in 5.14, but it worked only for a single \f(CW\*(C`#line 42 foo\*(C'\fR in each eval.  Now
it works for multiple.
.IP "\(bu" 4
When subroutine calls are intercepted by the debugger, the name of the
subroutine or a reference to it is stored in \f(CW$DB::sub\fR, for the debugger
to access.  Sometimes (such as \f(CW\*(C`$foo = *bar; undef *bar; &$foo\*(C'\fR)
\&\f(CW$DB::sub\fR would be set to a name that could not be used to find the
subroutine, and so the debugger's attempt to call it would fail.  Now the
check to see whether a reference is needed is more robust, so those
problems should not happen anymore [rt.cpan.org #69862].
.IP "\(bu" 4
Every subroutine has a filename associated with it that the debugger uses.
The one associated with constant subroutines used to be misallocated when
cloned under threads.  Consequently, debugging threaded applications could
result in memory corruption [perl #96126].
.SS "Dereferencing operators"
.IX Subsection "Dereferencing operators"
.IP "\(bu" 4
\&\f(CW\*(C`defined(${"..."})\*(C'\fR, \f(CW\*(C`defined(*{"..."})\*(C'\fR, etc., used to
return true for most, but not all built-in variables, if
they had not been used yet.  This bug affected \f(CW\*(C`${^GLOBAL_PHASE}\*(C'\fR and
\&\f(CW\*(C`${^UTF8CACHE}\*(C'\fR, among others.  It also used to return false if the
package name was given as well (\f(CW\*(C`${"::!"}\*(C'\fR) [perl #97978, #97492].
.IP "\(bu" 4
Perl 5.10.0 introduced a similar bug: \f(CW\*(C`defined(*{"foo"})\*(C'\fR where \*(L"foo\*(R"
represents the name of a built-in global variable used to return false if
the variable had never been used before, but only on the \fIfirst\fR call.
This, too, has been fixed.
.IP "\(bu" 4
Since 5.6.0, \f(CW\*(C`*{ ... }\*(C'\fR has been inconsistent in how it treats undefined
values.  It would die in strict mode or lvalue context for most undefined
values, but would be treated as the empty string (with a warning) for the
specific scalar return by \f(CW\*(C`undef()\*(C'\fR (\f(CW&PL_sv_undef\fR internally).  This
has been corrected.  \f(CW\*(C`undef()\*(C'\fR is now treated like other undefined
scalars, as in Perl 5.005.
.SS "Filehandle, last-accessed"
.IX Subsection "Filehandle, last-accessed"
Perl has an internal variable that stores the last filehandle to be
accessed.  It is used by \f(CW$.\fR and by \f(CW\*(C`tell\*(C'\fR and \f(CW\*(C`eof\*(C'\fR without
arguments.
.IP "\(bu" 4
It used to be possible to set this internal variable to a glob copy and
then modify that glob copy to be something other than a glob, and still
have the last-accessed filehandle associated with the variable after
assigning a glob to it again:
.Sp
.Vb 4
\&    my $foo = *STDOUT;  # $foo is a glob copy
\&    <$foo>;             # $foo is now the last\-accessed handle
\&    $foo = 3;           # no longer a glob
\&    $foo = *STDERR;     # still the last\-accessed handle
.Ve
.Sp
Now the \f(CW\*(C`$foo = 3\*(C'\fR assignment unsets that internal variable, so there
is no last-accessed filehandle, just as if \f(CW\*(C`<$foo>\*(C'\fR had never
happened.
.Sp
This also prevents some unrelated handle from becoming the last-accessed
handle if \f(CW$foo\fR falls out of scope and the same internal \s-1SV\s0 gets used for
another handle [perl #97988].
.IP "\(bu" 4
A regression in 5.14 caused these statements not to set that internal
variable:
.Sp
.Vb 8
\&    my $fh = *STDOUT;
\&    tell $fh;
\&    eof  $fh;
\&    seek $fh, 0,0;
\&    tell     *$fh;
\&    eof      *$fh;
\&    seek     *$fh, 0,0;
\&    readline *$fh;
.Ve
.Sp
This is now fixed, but \f(CW\*(C`tell *{ *$fh }\*(C'\fR still has the problem, and it
is not clear how to fix it [perl #106536].
.ie n .SS "Filetests and ""stat"""
.el .SS "Filetests and \f(CWstat\fP"
.IX Subsection "Filetests and stat"
The term \*(L"filetests\*(R" refers to the operators that consist of a hyphen
followed by a single letter: \f(CW\*(C`\-r\*(C'\fR, \f(CW\*(C`\-x\*(C'\fR, \f(CW\*(C`\-M\*(C'\fR, etc.  The term \*(L"stacked\*(R"
when applied to filetests means followed by another filetest operator
sharing the same operand, as in \f(CW\*(C`\-r \-x \-w $fooo\*(C'\fR.
.IP "\(bu" 4
\&\f(CW\*(C`stat\*(C'\fR produces more consistent warnings.  It no longer warns for \*(L"_\*(R"
[perl #71002] and no longer skips the warning at times for other unopened
handles.  It no longer warns about an unopened handle when the operating
system's \f(CW\*(C`fstat\*(C'\fR function fails.
.IP "\(bu" 4
\&\f(CW\*(C`stat\*(C'\fR would sometimes return negative numbers for large inode numbers,
because it was using the wrong internal C type. [perl #84590]
.IP "\(bu" 4
\&\f(CW\*(C`lstat\*(C'\fR is documented to fall back to \f(CW\*(C`stat\*(C'\fR (with a warning) when given
a filehandle.  When passed an \s-1IO\s0 reference, it was actually doing the
equivalent of \f(CW\*(C`stat\ _\*(C'\fR and ignoring the handle.
.IP "\(bu" 4
\&\f(CW\*(C`\-T _\*(C'\fR with no preceding \f(CW\*(C`stat\*(C'\fR used to produce a
confusing \*(L"uninitialized\*(R" warning, even though there
is no visible uninitialized value to speak of.
.IP "\(bu" 4
\&\f(CW\*(C`\-T\*(C'\fR, \f(CW\*(C`\-B\*(C'\fR, \f(CW\*(C`\-l\*(C'\fR and \f(CW\*(C`\-t\*(C'\fR now work
when stacked with other filetest operators
[perl #77388].
.IP "\(bu" 4
In 5.14.0, filetest ops (\f(CW\*(C`\-r\*(C'\fR, \f(CW\*(C`\-x\*(C'\fR, etc.) started calling \s-1FETCH\s0 on a
tied argument belonging to the previous argument to a list operator, if
called with a bareword argument or no argument at all.  This has been
fixed, so \f(CW\*(C`push @foo, $tied, \-r\*(C'\fR no longer calls \s-1FETCH\s0 on \f(CW$tied\fR.
.IP "\(bu" 4
In Perl 5.6, \f(CW\*(C`\-l\*(C'\fR followed by anything other than a bareword would treat
its argument as a file name.  That was changed in 5.8 for glob references
(\f(CW\*(C`\e*foo\*(C'\fR), but not for globs themselves (\f(CW*foo\fR).  \f(CW\*(C`\-l\*(C'\fR started
returning \f(CW\*(C`undef\*(C'\fR for glob references without setting the last
stat buffer that the \*(L"_\*(R" handle uses, but only if warnings
were turned on.  With warnings off, it was the same as 5.6.
In other words, it was simply buggy and inconsistent.  Now the 5.6
behavior has been restored.
.IP "\(bu" 4
\&\f(CW\*(C`\-l\*(C'\fR followed by a bareword no longer \*(L"eats\*(R" the previous argument to
the list operator in whose argument list it resides.  Hence,
\&\f(CW\*(C`print "bar", \-l foo\*(C'\fR now actually prints \*(L"bar\*(R", because \f(CW\*(C`\-l\*(C'\fR
on longer eats it.
.IP "\(bu" 4
Perl keeps several internal variables to keep track of the last stat
buffer, from which file(handle) it originated, what type it was, and
whether the last stat succeeded.
.Sp
There were various cases where these could get out of synch, resulting in
inconsistent or erratic behavior in edge cases (every mention of \f(CW\*(C`\-T\*(C'\fR
applies to \f(CW\*(C`\-B\*(C'\fR as well):
.RS 4
.IP "\(bu" 4
\&\f(CW\*(C`\-T \f(CIHANDLE\f(CW\*(C'\fR, even though it does a \f(CW\*(C`stat\*(C'\fR, was not resetting the last
stat type, so an \f(CW\*(C`lstat _\*(C'\fR following it would merrily return the wrong
results.  Also, it was not setting the success status.
.IP "\(bu" 4
Freeing the handle last used by \f(CW\*(C`stat\*(C'\fR or a filetest could result in
\&\f(CW\*(C`\-T\ _\*(C'\fR using an unrelated handle.
.IP "\(bu" 4
\&\f(CW\*(C`stat\*(C'\fR with an \s-1IO\s0 reference would not reset the stat type or record the
filehandle for \f(CW\*(C`\-T\ _\*(C'\fR to use.
.IP "\(bu" 4
Fatal warnings could cause the stat buffer not to be reset
for a filetest operator on an unopened filehandle or \f(CW\*(C`\-l\*(C'\fR on any handle.
Fatal warnings also stopped \f(CW\*(C`\-T\*(C'\fR from setting \f(CW$!\fR.
.IP "\(bu" 4
When the last stat was on an unreadable file, \f(CW\*(C`\-T _\*(C'\fR is supposed to
return \f(CW\*(C`undef\*(C'\fR, leaving the last stat buffer unchanged.  But it was
setting the stat type, causing \f(CW\*(C`lstat _\*(C'\fR to stop working.
.IP "\(bu" 4
\&\f(CW\*(C`\-T \f(CIFILENAME\f(CW\*(C'\fR was not resetting the internal stat buffers for
unreadable files.
.RE
.RS 4
.Sp
These have all been fixed.
.RE
.SS "Formats"
.IX Subsection "Formats"
.IP "\(bu" 4
Several edge cases have been fixed with formats and \f(CW\*(C`formline\*(C'\fR;
in particular, where the format itself is potentially variable (such as
with ties and overloading), and where the format and data differ in their
encoding.  In both these cases, it used to possible for the output to be
corrupted [perl #91032].
.IP "\(bu" 4
\&\f(CW\*(C`formline\*(C'\fR no longer converts its argument into a string in-place.  So
passing a reference to \f(CW\*(C`formline\*(C'\fR no longer destroys the reference
[perl #79532].
.IP "\(bu" 4
Assignment to \f(CW$^A\fR (the format output accumulator) now recalculates
the number of lines output.
.ie n .SS """given"" and ""when"""
.el .SS "\f(CWgiven\fP and \f(CWwhen\fP"
.IX Subsection "given and when"
.IP "\(bu" 4
\&\f(CW\*(C`given\*(C'\fR was not scoping its implicit \f(CW$_\fR properly, resulting in memory
leaks or \*(L"Variable is not available\*(R" warnings [perl #94682].
.IP "\(bu" 4
\&\f(CW\*(C`given\*(C'\fR was not calling set-magic on the implicit lexical \f(CW$_\fR that it
uses.  This meant, for example, that \f(CW\*(C`pos\*(C'\fR would be remembered from one
execution of the same \f(CW\*(C`given\*(C'\fR block to the next, even if the input were a
different variable [perl #84526].
.IP "\(bu" 4
\&\f(CW\*(C`when\*(C'\fR blocks are now capable of returning variables declared inside the
enclosing \f(CW\*(C`given\*(C'\fR block [perl #93548].
.ie n .SS "The ""glob"" operator"
.el .SS "The \f(CWglob\fP operator"
.IX Subsection "The glob operator"
.IP "\(bu" 4
On OSes other than \s-1VMS,\s0 Perl's \f(CW\*(C`glob\*(C'\fR operator (and the \f(CW\*(C`<...>\*(C'\fR form)
use File::Glob underneath.  File::Glob splits the pattern into words,
before feeding each word to its \f(CW\*(C`bsd_glob\*(C'\fR function.
.Sp
There were several inconsistencies in the way the split was done.  Now
quotation marks (' and ") are always treated as shell-style word delimiters
(that allow whitespace as part of a word) and backslashes are always
preserved, unless they exist to escape quotation marks.  Before, those
would only sometimes be the case, depending on whether the pattern
contained whitespace.  Also, escaped whitespace at the end of the pattern
is no longer stripped [perl #40470].
.IP "\(bu" 4
\&\f(CW\*(C`CORE::glob\*(C'\fR now works as a way to call the default globbing function.  It
used to respect overrides, despite the \f(CW\*(C`CORE::\*(C'\fR prefix.
.IP "\(bu" 4
Under miniperl (used to configure modules when perl itself is built),
\&\f(CW\*(C`glob\*(C'\fR now clears \f(CW%ENV\fR before calling csh, since the latter croaks on some
systems if it does not like the contents of the \s-1LS_COLORS\s0 environment
variable [perl #98662].
.SS "Lvalue subroutines"
.IX Subsection "Lvalue subroutines"
.IP "\(bu" 4
Explicit return now returns the actual argument passed to return, instead
of copying it [perl #72724, #72706].
.IP "\(bu" 4
Lvalue subroutines used to enforce lvalue syntax (i.e., whatever can go on
the left-hand side of \f(CW\*(C`=\*(C'\fR) for the last statement and the arguments to
return.  Since lvalue subroutines are not always called in lvalue context,
this restriction has been lifted.
.IP "\(bu" 4
Lvalue subroutines are less restrictive about what values can be returned.
It used to croak on values returned by \f(CW\*(C`shift\*(C'\fR and \f(CW\*(C`delete\*(C'\fR and from
other subroutines, but no longer does so [perl #71172].
.IP "\(bu" 4
Empty lvalue subroutines (\f(CW\*(C`sub :lvalue {}\*(C'\fR) used to return \f(CW@_\fR in list
context.  All subroutines used to do this, but regular subs were fixed in
Perl 5.8.2.  Now lvalue subroutines have been likewise fixed.
.IP "\(bu" 4
Autovivification now works on values returned from lvalue subroutines
[perl #7946], as does returning \f(CW\*(C`keys\*(C'\fR in lvalue context.
.IP "\(bu" 4
Lvalue subroutines used to copy their return values in rvalue context.  Not
only was this a waste of \s-1CPU\s0 cycles, but it also caused bugs.  A \f(CW\*(C`($)\*(C'\fR
prototype would cause an lvalue sub to copy its return value [perl #51408],
and \f(CW\*(C`while(lvalue_sub() =~ m/.../g) { ... }\*(C'\fR would loop endlessly
[perl #78680].
.IP "\(bu" 4
When called in potential lvalue context
(e.g., subroutine arguments or a list
passed to \f(CW\*(C`for\*(C'\fR), lvalue subroutines used to copy
any read-only value that was returned.  E.g., \f(CW\*(C` sub :lvalue { $] } \*(C'\fR
would not return \f(CW$]\fR, but a copy of it.
.IP "\(bu" 4
When called in potential lvalue context, an lvalue subroutine returning
arrays or hashes used to bind the arrays or hashes to scalar variables,
resulting in bugs.  This was fixed in 5.14.0 if an array were the first
thing returned from the subroutine (but not for \f(CW\*(C`$scalar, @array\*(C'\fR or
hashes being returned).  Now a more general fix has been applied
[perl #23790].
.IP "\(bu" 4
Method calls whose arguments were all surrounded with \f(CW\*(C`my()\*(C'\fR or \f(CW\*(C`our()\*(C'\fR
(as in \f(CW\*(C`$object\->method(my($a,$b))\*(C'\fR) used to force lvalue context on
the subroutine.  This would prevent lvalue methods from returning certain
values.
.IP "\(bu" 4
Lvalue sub calls that are not determined to be such at compile time
(\f(CW&$name\fR or &{\*(L"name\*(R"}) are no longer exempt from strict refs if they
occur in the last statement of an lvalue subroutine [perl #102486].
.IP "\(bu" 4
Sub calls whose subs are not visible at compile time, if
they occurred in the last statement of an lvalue subroutine,
would reject non-lvalue subroutines and die with \*(L"Can't modify non-lvalue
subroutine call\*(R" [perl #102486].
.Sp
Non-lvalue sub calls whose subs \fIare\fR visible at compile time exhibited
the opposite bug.  If the call occurred in the last statement of an lvalue
subroutine, there would be no error when the lvalue sub was called in
lvalue context.  Perl would blindly assign to the temporary value returned
by the non-lvalue subroutine.
.IP "\(bu" 4
\&\f(CW\*(C`AUTOLOAD\*(C'\fR routines used to take precedence over the actual sub being
called (i.e., when autoloading wasn't needed), for sub calls in lvalue or
potential lvalue context, if the subroutine was not visible at compile
time.
.IP "\(bu" 4
Applying the \f(CW\*(C`:lvalue\*(C'\fR attribute to an \s-1XSUB\s0 or to an aliased subroutine
stub with \f(CW\*(C`sub foo :lvalue;\*(C'\fR syntax stopped working in Perl 5.12.
This has been fixed.
.IP "\(bu" 4
Applying the :lvalue attribute to subroutine that is already defined does
not work properly, as the attribute changes the way the sub is compiled.
Hence, Perl 5.12 began warning when an attempt is made to apply the
attribute to an already defined sub.  In such cases, the attribute is
discarded.
.Sp
But the change in 5.12 missed the case where custom attributes are also
present: that case still silently and ineffectively applied the attribute.
That omission has now been corrected.  \f(CW\*(C`sub foo :lvalue :Whatever\*(C'\fR (when
\&\f(CW\*(C`foo\*(C'\fR is already defined) now warns about the :lvalue attribute, and does
not apply it.
.IP "\(bu" 4
A bug affecting lvalue context propagation through nested lvalue subroutine
calls has been fixed.  Previously, returning a value in nested rvalue
context would be treated as lvalue context by the inner subroutine call,
resulting in some values (such as read-only values) being rejected.
.SS "Overloading"
.IX Subsection "Overloading"
.IP "\(bu" 4
Arithmetic assignment (\f(CW\*(C`$left += $right\*(C'\fR) involving overloaded objects
that rely on the 'nomethod' override no longer segfault when the left
operand is not overloaded.
.IP "\(bu" 4
Errors that occur when methods cannot be found during overloading now
mention the correct package name, as they did in 5.8.x, instead of
erroneously mentioning the \*(L"overload\*(R" package, as they have since 5.10.0.
.IP "\(bu" 4
Undefining \f(CW%overload::\fR no longer causes a crash.
.SS "Prototypes of built-in keywords"
.IX Subsection "Prototypes of built-in keywords"
.IP "\(bu" 4
The \f(CW\*(C`prototype\*(C'\fR function no longer dies for the \f(CW\*(C`_\|_FILE_\|_\*(C'\fR, \f(CW\*(C`_\|_LINE_\|_\*(C'\fR
and \f(CW\*(C`_\|_PACKAGE_\|_\*(C'\fR directives.  It now returns an empty-string prototype
for them, because they are syntactically indistinguishable from nullary
functions like \f(CW\*(C`time\*(C'\fR.
.IP "\(bu" 4
\&\f(CW\*(C`prototype\*(C'\fR now returns \f(CW\*(C`undef\*(C'\fR for all overridable infix operators,
such as \f(CW\*(C`eq\*(C'\fR, which are not callable in any way resembling functions.
It used to return incorrect prototypes for some and die for others
[perl #94984].
.IP "\(bu" 4
The prototypes of several built-in functions\*(--\f(CW\*(C`getprotobynumber\*(C'\fR, \f(CW\*(C`lock\*(C'\fR,
\&\f(CW\*(C`not\*(C'\fR and \f(CW\*(C`select\*(C'\fR\-\-have been corrected, or at least are now closer to
reality than before.
.SS "Regular expressions"
.IX Subsection "Regular expressions"
.IP "\(bu" 4
\&\f(CW\*(C`/[[:ascii:]]/\*(C'\fR and \f(CW\*(C`/[[:blank:]]/\*(C'\fR now use locale rules under
\&\f(CW\*(C`use locale\*(C'\fR when the platform supports that.  Previously, they used
the platform's native character set.
.IP "\(bu" 4
\&\f(CW\*(C`m/[[:ascii:]]/i\*(C'\fR and \f(CW\*(C`/\ep{ASCII}/i\*(C'\fR now match identically (when not
under a differing locale).  This fixes a regression introduced in 5.14
in which the first expression could match characters outside of \s-1ASCII,\s0
such as the \s-1KELVIN SIGN.\s0
.IP "\(bu" 4
\&\f(CW\*(C`/.*/g\*(C'\fR would sometimes refuse to match at the end of a string that ends
with \*(L"\en\*(R".  This has been fixed [perl #109206].
.IP "\(bu" 4
Starting with 5.12.0, Perl used to get its internal bookkeeping muddled up
after assigning \f(CW\*(C`${ qr// }\*(C'\fR to a hash element and locking it with
Hash::Util.  This could result in double frees, crashes, or erratic
behavior.
.IP "\(bu" 4
The new (in 5.14.0) regular expression modifier \f(CW\*(C`/a\*(C'\fR when repeated like
\&\f(CW\*(C`/aa\*(C'\fR forbids the characters outside the \s-1ASCII\s0 range that match
characters inside that range from matching under \f(CW\*(C`/i\*(C'\fR.  This did not
work under some circumstances, all involving alternation, such as:
.Sp
.Vb 1
\& "\eN{KELVIN SIGN}" =~ /k|foo/iaa;
.Ve
.Sp
succeeded inappropriately.  This is now fixed.
.IP "\(bu" 4
5.14.0 introduced some memory leaks in regular expression character
classes such as \f(CW\*(C`[\ew\es]\*(C'\fR, which have now been fixed. (5.14.1)
.IP "\(bu" 4
An edge case in regular expression matching could potentially loop.
This happened only under \f(CW\*(C`/i\*(C'\fR in bracketed character classes that have
characters with multi-character folds, and the target string to match
against includes the first portion of the fold, followed by another
character that has a multi-character fold that begins with the remaining
portion of the fold, plus some more.
.Sp
.Vb 1
\& "s\eN{U+DF}" =~ /[\ex{DF}foo]/i
.Ve
.Sp
is one such case.  \f(CW\*(C`\exDF\*(C'\fR folds to \f(CW"ss"\fR. (5.14.1)
.IP "\(bu" 4
A few characters in regular expression pattern matches did not
match correctly in some circumstances, all involving \f(CW\*(C`/i\*(C'\fR.  The
affected characters are:
\&\s-1COMBINING GREEK YPOGEGRAMMENI,
GREEK CAPITAL LETTER IOTA,
GREEK CAPITAL LETTER UPSILON,
GREEK PROSGEGRAMMENI,
GREEK SMALL LETTER IOTA WITH DIALYTIKA AND OXIA,
GREEK SMALL LETTER IOTA WITH DIALYTIKA AND TONOS,
GREEK SMALL LETTER UPSILON WITH DIALYTIKA AND OXIA,
GREEK SMALL LETTER UPSILON WITH DIALYTIKA AND TONOS,
LATIN SMALL LETTER LONG S,
LATIN SMALL LIGATURE LONG S T,\s0
and
\&\s-1LATIN SMALL LIGATURE ST.\s0
.IP "\(bu" 4
A memory leak regression in regular expression compilation
under threading has been fixed.
.IP "\(bu" 4
A regression introduced in 5.14.0 has
been fixed.  This involved an inverted
bracketed character class in a regular expression that consisted solely
of a Unicode property.  That property wasn't getting inverted outside the
Latin1 range.
.IP "\(bu" 4
Three problematic Unicode characters now work better in regex pattern matching under \f(CW\*(C`/i\*(C'\fR.
.Sp
In the past, three Unicode characters:
\&\s-1LATIN SMALL LETTER SHARP S,
GREEK SMALL LETTER IOTA WITH DIALYTIKA AND TONOS,\s0
and
\&\s-1GREEK SMALL LETTER UPSILON WITH DIALYTIKA AND TONOS,\s0
along with the sequences that they fold to
(including \*(L"ss\*(R" for \s-1LATIN SMALL LETTER SHARP S\s0),
did not properly match under \f(CW\*(C`/i\*(C'\fR.  5.14.0 fixed some of these cases,
but introduced others, including a panic when one of the characters or
sequences was used in the \f(CW\*(C`(?(DEFINE)\*(C'\fR regular expression predicate.
The known bugs that were introduced in 5.14 have now been fixed; as well
as some other edge cases that have never worked until now.  These all
involve using the characters and sequences outside bracketed character
classes under \f(CW\*(C`/i\*(C'\fR.  This closes [perl #98546].
.Sp
There remain known problems when using certain characters with
multi-character folds inside bracketed character classes, including such
constructs as \f(CW\*(C`qr/[\eN{LATIN SMALL LETTER SHARP}a\-z]/i\*(C'\fR.  These
remaining bugs are addressed in [perl #89774].
.IP "\(bu" 4
\&\s-1RT\s0 #78266: The regex engine has been leaking memory when accessing
named captures that weren't matched as part of a regex ever since 5.10
when they were introduced; e.g., this would consume over a hundred \s-1MB\s0 of
memory:
.Sp
.Vb 6
\&    for (1..10_000_000) {
\&        if ("foo" =~ /(foo|(?<capture>bar))?/) {
\&            my $capture = $+{capture}
\&        }
\&    }
\&    system "ps \-o rss $$"\*(Aq
.Ve
.IP "\(bu" 4
In 5.14, \f(CW\*(C`/[[:lower:]]/i\*(C'\fR and \f(CW\*(C`/[[:upper:]]/i\*(C'\fR no longer matched the
opposite case.  This has been fixed [perl #101970].
.IP "\(bu" 4
A regular expression match with an overloaded object on the right-hand side
would sometimes stringify the object too many times.
.IP "\(bu" 4
A regression has been fixed that was introduced in 5.14, in \f(CW\*(C`/i\*(C'\fR
regular expression matching, in which a match improperly fails if the
pattern is in \s-1UTF\-8,\s0 the target string is not, and a Latin\-1 character
precedes a character in the string that should match the pattern.
[perl #101710]
.IP "\(bu" 4
In case-insensitive regular expression pattern matching, no longer on
\&\s-1UTF\-8\s0 encoded strings does the scan for the start of match look only at
the first possible position.  This caused matches such as
\&\f(CW\*(C`"f\ex{FB00}" =~ /ff/i\*(C'\fR to fail.
.IP "\(bu" 4
The regexp optimizer no longer crashes on debugging builds when merging
fixed-string nodes with inconvenient contents.
.IP "\(bu" 4
A panic involving the combination of the regular expression modifiers
\&\f(CW\*(C`/aa\*(C'\fR and the \f(CW\*(C`\eb\*(C'\fR escape sequence introduced in 5.14.0 has been
fixed [perl #95964]. (5.14.2)
.IP "\(bu" 4
The combination of the regular expression modifiers \f(CW\*(C`/aa\*(C'\fR and the \f(CW\*(C`\eb\*(C'\fR
and \f(CW\*(C`\eB\*(C'\fR escape sequences did not work properly on \s-1UTF\-8\s0 encoded
strings.  All non-ASCII characters under \f(CW\*(C`/aa\*(C'\fR should be treated as
non-word characters, but what was happening was that Unicode rules were
used to determine wordness/non\-wordness for non-ASCII characters.  This
is now fixed [perl #95968].
.IP "\(bu" 4
\&\f(CW\*(C`(?foo: ...)\*(C'\fR no longer loses passed in character set.
.IP "\(bu" 4
The trie optimization used to have problems with alternations containing
an empty \f(CW\*(C`(?:)\*(C'\fR, causing \f(CW\*(C`"x" =~ /\eA(?>(?:(?:)A|B|C?x))\ez/\*(C'\fR not to
match, whereas it should [perl #111842].
.IP "\(bu" 4
Use of lexical (\f(CW\*(C`my\*(C'\fR) variables in code blocks embedded in regular
expressions will no longer result in memory corruption or crashes.
.Sp
Nevertheless, these code blocks are still experimental, as there are still
problems with the wrong variables being closed over (in loops for instance)
and with abnormal exiting (e.g., \f(CW\*(C`die\*(C'\fR) causing memory corruption.
.IP "\(bu" 4
The \f(CW\*(C`\eh\*(C'\fR, \f(CW\*(C`\eH\*(C'\fR, \f(CW\*(C`\ev\*(C'\fR and \f(CW\*(C`\eV\*(C'\fR regular expression metacharacters used to
cause a panic error message when trying to match at the end of the
string [perl #96354].
.IP "\(bu" 4
The abbreviations for four C1 control characters \f(CW\*(C`MW\*(C'\fR \f(CW\*(C`PM\*(C'\fR, \f(CW\*(C`RI\*(C'\fR, and
\&\f(CW\*(C`ST\*(C'\fR were previously unrecognized by \f(CW\*(C`\eN{}\*(C'\fR, \fIvianame()\fR, and
\&\fIstring_vianame()\fR.
.IP "\(bu" 4
Mentioning a variable named \*(L"&\*(R" other than \f(CW$&\fR (i.e., \f(CW\*(C`@&\*(C'\fR or \f(CW\*(C`%&\*(C'\fR) no
longer stops \f(CW$&\fR from working.  The same applies to variables named \*(L"'\*(R"
and \*(L"`\*(R" [perl #24237].
.IP "\(bu" 4
Creating a \f(CW\*(C`UNIVERSAL::AUTOLOAD\*(C'\fR sub no longer stops \f(CW\*(C`%+\*(C'\fR, \f(CW\*(C`%\-\*(C'\fR and
\&\f(CW\*(C`%!\*(C'\fR from working some of the time [perl #105024].
.SS "Smartmatching"
.IX Subsection "Smartmatching"
.IP "\(bu" 4
\&\f(CW\*(C`~~\*(C'\fR now correctly handles the precedence of Any~~Object, and is not tricked
by an overloaded object on the left-hand side.
.IP "\(bu" 4
In Perl 5.14.0, \f(CW\*(C`$tainted ~~ @array\*(C'\fR stopped working properly.  Sometimes
it would erroneously fail (when \f(CW$tainted\fR contained a string that occurs
in the array \fIafter\fR the first element) or erroneously succeed (when
\&\f(CW\*(C`undef\*(C'\fR occurred after the first element) [perl #93590].
.ie n .SS "The ""sort"" operator"
.el .SS "The \f(CWsort\fP operator"
.IX Subsection "The sort operator"
.IP "\(bu" 4
\&\f(CW\*(C`sort\*(C'\fR was not treating \f(CW\*(C`sub {}\*(C'\fR and \f(CW\*(C`sub {()}\*(C'\fR as equivalent when
such a sub was provided as the comparison routine.  It used to croak on
\&\f(CW\*(C`sub {()}\*(C'\fR.
.IP "\(bu" 4
\&\f(CW\*(C`sort\*(C'\fR now works once more with custom sort routines that are XSUBs.  It
stopped working in 5.10.0.
.IP "\(bu" 4
\&\f(CW\*(C`sort\*(C'\fR with a constant for a custom sort routine, although it produces
unsorted results, no longer crashes.  It started crashing in 5.10.0.
.IP "\(bu" 4
Warnings emitted by \f(CW\*(C`sort\*(C'\fR when a custom comparison routine returns a
non-numeric value now contain \*(L"in sort\*(R" and show the line number of the
\&\f(CW\*(C`sort\*(C'\fR operator, rather than the last line of the comparison routine.  The
warnings also now occur only if warnings are enabled in the scope where
\&\f(CW\*(C`sort\*(C'\fR occurs.  Previously the warnings would occur if enabled in the
comparison routine's scope.
.IP "\(bu" 4
\&\f(CW\*(C`sort { $a <=> $b }\*(C'\fR, which is optimized internally, now produces
\&\*(L"uninitialized\*(R" warnings for NaNs (not-a-number values), since \f(CW\*(C`<=>\*(C'\fR
returns \f(CW\*(C`undef\*(C'\fR for those.  This brings it in line with
\&\f(CW\*(C`sort\ {\ 1;\ $a\ <=>\ $b\ }\*(C'\fR and other more complex cases, which are not
optimized [perl #94390].
.ie n .SS "The ""substr"" operator"
.el .SS "The \f(CWsubstr\fP operator"
.IX Subsection "The substr operator"
.IP "\(bu" 4
Tied (and otherwise magical) variables are no longer exempt from the
\&\*(L"Attempt to use reference as lvalue in substr\*(R" warning.
.IP "\(bu" 4
That warning now occurs when the returned lvalue is assigned to, not
when \f(CW\*(C`substr\*(C'\fR itself is called.  This makes a difference only if the
return value of \f(CW\*(C`substr\*(C'\fR is referenced and later assigned to.
.IP "\(bu" 4
Passing a substring of a read-only value or a typeglob to a function
(potential lvalue context) no longer causes an immediate \*(L"Can't coerce\*(R"
or \*(L"Modification of a read-only value\*(R" error.  That error occurs only 
if the passed value is assigned to.
.Sp
The same thing happens with the \*(L"substr outside of string\*(R" error.  If
the lvalue is only read from, not written to, it is now just a warning, as
with rvalue \f(CW\*(C`substr\*(C'\fR.
.IP "\(bu" 4
\&\f(CW\*(C`substr\*(C'\fR assignments no longer call \s-1FETCH\s0 twice if the first argument
is a tied variable, just once.
.SS "Support for embedded nulls"
.IX Subsection "Support for embedded nulls"
Some parts of Perl did not work correctly with nulls (\f(CW\*(C`chr 0\*(C'\fR) embedded in
strings.  That meant that, for instance, \f(CW\*(C`$m = "a\e0b"; foo\->$m\*(C'\fR would
call the \*(L"a\*(R" method, instead of the actual method name contained in \f(CW$m\fR.
These parts of perl have been fixed to support nulls:
.IP "\(bu" 4
Method names
.IP "\(bu" 4
Typeglob names (including filehandle and subroutine names)
.IP "\(bu" 4
Package names, including the return value of \f(CW\*(C`ref()\*(C'\fR
.IP "\(bu" 4
Typeglob elements (\f(CW*foo{"THING\e0stuff"}\fR)
.IP "\(bu" 4
Signal names
.IP "\(bu" 4
Various warnings and error messages that mention variable names or values,
methods, etc.
.PP
One side effect of these changes is that blessing into \*(L"\e0\*(R" no longer
causes \f(CW\*(C`ref()\*(C'\fR to return false.
.SS "Threading bugs"
.IX Subsection "Threading bugs"
.IP "\(bu" 4
Typeglobs returned from threads are no longer cloned if the parent thread
already has a glob with the same name.  This means that returned
subroutines will now assign to the right package variables [perl #107366].
.IP "\(bu" 4
Some cases of threads crashing due to memory allocation during cloning have
been fixed [perl #90006].
.IP "\(bu" 4
Thread joining would sometimes emit \*(L"Attempt to free unreferenced scalar\*(R"
warnings if \f(CW\*(C`caller\*(C'\fR had been used from the \f(CW\*(C`DB\*(C'\fR package before thread
creation [perl #98092].
.IP "\(bu" 4
Locking a subroutine (via \f(CW\*(C`lock &sub\*(C'\fR) is no longer a compile-time error
for regular subs.  For lvalue subroutines, it no longer tries to return the
sub as a scalar, resulting in strange side effects like \f(CW\*(C`ref \e$_\*(C'\fR
returning \*(L"\s-1CODE\*(R"\s0 in some instances.
.Sp
\&\f(CW\*(C`lock &sub\*(C'\fR is now a run-time error if threads::shared is loaded (a
no-op otherwise), but that may be rectified in a future version.
.SS "Tied variables"
.IX Subsection "Tied variables"
.IP "\(bu" 4
Various cases in which \s-1FETCH\s0 was being ignored or called too many times
have been fixed:
.RS 4
.IP "\(bu" 4
\&\f(CW\*(C`PerlIO::get_layers\*(C'\fR [perl #97956]
.IP "\(bu" 4
\&\f(CW\*(C`$tied =~ y/a/b/\*(C'\fR, \f(CW\*(C`chop $tied\*(C'\fR and \f(CW\*(C`chomp $tied\*(C'\fR when \f(CW$tied\fR holds a
reference.
.IP "\(bu" 4
When calling \f(CW\*(C`local $_\*(C'\fR [perl #105912]
.IP "\(bu" 4
Four-argument \f(CW\*(C`select\*(C'\fR
.IP "\(bu" 4
A tied buffer passed to \f(CW\*(C`sysread\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`$tied .= <>\*(C'\fR
.IP "\(bu" 4
Three-argument \f(CW\*(C`open\*(C'\fR, the third being a tied file handle
(as in \f(CW\*(C`open $fh, ">&", $tied\*(C'\fR)
.IP "\(bu" 4
\&\f(CW\*(C`sort\*(C'\fR with a reference to a tied glob for the comparison routine.
.IP "\(bu" 4
\&\f(CW\*(C`..\*(C'\fR and \f(CW\*(C`...\*(C'\fR in list context [perl #53554].
.IP "\(bu" 4
\&\f(CW\*(C`${$tied}\*(C'\fR, \f(CW\*(C`@{$tied}\*(C'\fR, \f(CW\*(C`%{$tied}\*(C'\fR and \f(CW\*(C`*{$tied}\*(C'\fR where the tied
variable returns a string (\f(CW\*(C`&{}\*(C'\fR was unaffected)
.IP "\(bu" 4
\&\f(CW\*(C`defined ${ $tied_variable }\*(C'\fR
.IP "\(bu" 4
Various functions that take a filehandle argument in rvalue context
(\f(CW\*(C`close\*(C'\fR, \f(CW\*(C`readline\*(C'\fR, etc.) [perl #97482]
.IP "\(bu" 4
Some cases of dereferencing a complex expression, such as
\&\f(CW\*(C`${ (), $tied } = 1\*(C'\fR, used to call \f(CW\*(C`FETCH\*(C'\fR multiple times, but now call
it once.
.IP "\(bu" 4
\&\f(CW\*(C`$tied\->method\*(C'\fR where \f(CW$tied\fR returns a package name\*(--even resulting in
a failure to call the method, due to memory corruption
.IP "\(bu" 4
Assignments like \f(CW\*(C`*$tied = \e&{"..."}\*(C'\fR and \f(CW\*(C`*glob = $tied\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`chdir\*(C'\fR, \f(CW\*(C`chmod\*(C'\fR, \f(CW\*(C`chown\*(C'\fR, \f(CW\*(C`utime\*(C'\fR, \f(CW\*(C`truncate\*(C'\fR, \f(CW\*(C`stat\*(C'\fR, \f(CW\*(C`lstat\*(C'\fR and
the filetest ops (\f(CW\*(C`\-r\*(C'\fR, \f(CW\*(C`\-x\*(C'\fR, etc.)
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`caller\*(C'\fR sets \f(CW@DB::args\fR to the subroutine arguments when called from
the \s-1DB\s0 package.  It used to crash when doing so if \f(CW@DB::args\fR happened to
be tied.  Now it croaks instead.
.IP "\(bu" 4
Tying an element of \f(CW%ENV\fR or \f(CW\*(C`%^H\*(C'\fR and then deleting that element would
result in a call to the tie object's \s-1DELETE\s0 method, even though tying the
element itself is supposed to be equivalent to tying a scalar (the element
is, of course, a scalar) [perl #67490].
.IP "\(bu" 4
When Perl autovivifies an element of a tied array or hash (which entails
calling \s-1STORE\s0 with a new reference), it now calls \s-1FETCH\s0 immediately after
the \s-1STORE,\s0 instead of assuming that \s-1FETCH\s0 would have returned the same
reference.  This can make it easier to implement tied objects [perl #35865, #43011].
.IP "\(bu" 4
Four-argument \f(CW\*(C`select\*(C'\fR no longer produces its \*(L"Non-string passed as
bitmask\*(R" warning on tied or tainted variables that are strings.
.IP "\(bu" 4
Localizing a tied scalar that returns a typeglob no longer stops it from
being tied till the end of the scope.
.IP "\(bu" 4
Attempting to \f(CW\*(C`goto\*(C'\fR out of a tied handle method used to cause memory
corruption or crashes.  Now it produces an error message instead
[perl #8611].
.IP "\(bu" 4
A bug has been fixed that occurs when a tied variable is used as a
subroutine reference:  if the last thing assigned to or returned from the
variable was a reference or typeglob, the \f(CW\*(C`\e&$tied\*(C'\fR could either crash or
return the wrong subroutine.  The reference case is a regression introduced
in Perl 5.10.0.  For typeglobs, it has probably never worked till now.
.SS "Version objects and vstrings"
.IX Subsection "Version objects and vstrings"
.IP "\(bu" 4
The bitwise complement operator (and possibly other operators, too) when
passed a vstring would leave vstring magic attached to the return value,
even though the string had changed.  This meant that
\&\f(CW\*(C`version\->new(~v1.2.3)\*(C'\fR would create a version looking like \*(L"v1.2.3\*(R"
even though the string passed to \f(CW\*(C`version\->new\*(C'\fR was actually
\&\*(L"\e376\e375\e374\*(R".  This also caused B::Deparse to deparse \f(CW\*(C`~v1.2.3\*(C'\fR
incorrectly, without the \f(CW\*(C`~\*(C'\fR [perl #29070].
.IP "\(bu" 4
Assigning a vstring to a magic (e.g., tied, \f(CW$!\fR) variable and then
assigning something else used to blow away all magic.  This meant that
tied variables would come undone, \f(CW$!\fR would stop getting updated on
failed system calls, \f(CW$|\fR would stop setting autoflush, and other
mischief would take place.  This has been fixed.
.IP "\(bu" 4
\&\f(CW\*(C`version\->new("version")\*(C'\fR and \f(CW\*(C`printf "%vd", "version"\*(C'\fR no longer
crash [perl #102586].
.IP "\(bu" 4
Version comparisons, such as those that happen implicitly with \f(CW\*(C`use
v5.43\*(C'\fR, no longer cause locale settings to change [perl #105784].
.IP "\(bu" 4
Version objects no longer cause memory leaks in boolean context
[perl #109762].
.SS "Warnings, redefinition"
.IX Subsection "Warnings, redefinition"
.IP "\(bu" 4
Subroutines from the \f(CW\*(C`autouse\*(C'\fR namespace are once more exempt from
redefinition warnings.  This used to work in 5.005, but was broken in
5.6 for most subroutines.  For subs created via \s-1XS\s0 that redefine
subroutines from the \f(CW\*(C`autouse\*(C'\fR package, this stopped working in 5.10.
.IP "\(bu" 4
New XSUBs now produce redefinition warnings if they overwrite existing
subs, as they did in 5.8.x.  (The \f(CW\*(C`autouse\*(C'\fR logic was reversed in
5.10\-14.  Only subroutines from the \f(CW\*(C`autouse\*(C'\fR namespace would warn
when clobbered.)
.IP "\(bu" 4
\&\f(CW\*(C`newCONSTSUB\*(C'\fR used to use compile-time warning hints, instead of
run-time hints.  The following code should never produce a redefinition
warning, but it used to, if \f(CW\*(C`newCONSTSUB\*(C'\fR redefined an existing
subroutine:
.Sp
.Vb 5
\&    use warnings;
\&    BEGIN {
\&        no warnings;
\&        some_XS_function_that_calls_new_CONSTSUB();
\&    }
.Ve
.IP "\(bu" 4
Redefinition warnings for constant subroutines are on by default (what
are known as severe warnings in perldiag).  This occurred only
when it was a glob assignment or declaration of a Perl subroutine that
caused the warning.  If the creation of XSUBs triggered the warning, it
was not a default warning.  This has been corrected.
.IP "\(bu" 4
The internal check to see whether a redefinition warning should occur
used to emit \*(L"uninitialized\*(R" warnings in cases like this:
.Sp
.Vb 4
\&    use warnings "uninitialized";
\&    use constant {u => undef, v => undef};
\&    sub foo(){u}
\&    sub foo(){v}
.Ve
.ie n .SS "Warnings, ""Uninitialized"""
.el .SS "Warnings, ``Uninitialized''"
.IX Subsection "Warnings, Uninitialized"
.IP "\(bu" 4
Various functions that take a filehandle argument in rvalue context
(\f(CW\*(C`close\*(C'\fR, \f(CW\*(C`readline\*(C'\fR, etc.) used to warn twice for an undefined handle
[perl #97482].
.IP "\(bu" 4
\&\f(CW\*(C`dbmopen\*(C'\fR now only warns once, rather than three times, if the mode
argument is \f(CW\*(C`undef\*(C'\fR [perl #90064].
.IP "\(bu" 4
The \f(CW\*(C`+=\*(C'\fR operator does not usually warn when the left-hand side is
\&\f(CW\*(C`undef\*(C'\fR, but it was doing so for tied variables.  This has been fixed
[perl #44895].
.IP "\(bu" 4
A bug fix in Perl 5.14 introduced a new bug, causing \*(L"uninitialized\*(R"
warnings to report the wrong variable if the operator in question had
two operands and one was \f(CW\*(C`%{...}\*(C'\fR or \f(CW\*(C`@{...}\*(C'\fR.  This has been fixed
[perl #103766].
.IP "\(bu" 4
\&\f(CW\*(C`..\*(C'\fR and \f(CW\*(C`...\*(C'\fR in list context now mention the name of the variable in
\&\*(L"uninitialized\*(R" warnings for string (as opposed to numeric) ranges.
.SS "Weak references"
.IX Subsection "Weak references"
.IP "\(bu" 4
Weakening the first argument to an automatically-invoked \f(CW\*(C`DESTROY\*(C'\fR method
could result in erroneous \*(L"\s-1DESTROY\s0 created new reference\*(R" errors or
crashes.  Now it is an error to weaken a read-only reference.
.IP "\(bu" 4
Weak references to lexical hashes going out of scope were not going stale
(becoming undefined), but continued to point to the hash.
.IP "\(bu" 4
Weak references to lexical variables going out of scope are now broken
before any magical methods (e.g., \s-1DESTROY\s0 on a tie object) are called.
This prevents such methods from modifying the variable that will be seen
the next time the scope is entered.
.IP "\(bu" 4
Creating a weak reference to an \f(CW@ISA\fR array or accessing the array index
(\f(CW$#ISA\fR) could result in confused internal bookkeeping for elements
later added to the \f(CW@ISA\fR array.  For instance, creating a weak
reference to the element itself could push that weak reference on to \f(CW@ISA\fR;
and elements added after use of \f(CW$#ISA\fR would be ignored by method lookup
[perl #85670].
.SS "Other notable fixes"
.IX Subsection "Other notable fixes"
.IP "\(bu" 4
\&\f(CW\*(C`quotemeta\*(C'\fR now quotes consistently the same non-ASCII characters under
\&\f(CW\*(C`use feature \*(Aqunicode_strings\*(Aq\*(C'\fR, regardless of whether the string is
encoded in \s-1UTF\-8\s0 or not, hence fixing the last vestiges (we hope) of the
notorious \*(L"The \*(R"Unicode Bug"" in perlunicode.  [perl #77654].
.Sp
Which of these code points is quoted has changed, based on Unicode's
recommendations.  See \*(L"quotemeta\*(R" in perlfunc for details.
.IP "\(bu" 4
\&\f(CW\*(C`study\*(C'\fR is now a no-op, presumably fixing all outstanding bugs related to
study causing regex matches to behave incorrectly!
.IP "\(bu" 4
When one writes \f(CW\*(C`open foo || die\*(C'\fR, which used to work in Perl 4, a
\&\*(L"Precedence problem\*(R" warning is produced.  This warning used erroneously to
apply to fully-qualified bareword handle names not followed by \f(CW\*(C`||\*(C'\fR.  This
has been corrected.
.IP "\(bu" 4
After package aliasing (\f(CW\*(C`*foo:: = *bar::\*(C'\fR), \f(CW\*(C`select\*(C'\fR with 0 or 1 argument
would sometimes return a name that could not be used to refer to the
filehandle, or sometimes it would return \f(CW\*(C`undef\*(C'\fR even when a filehandle
was selected.  Now it returns a typeglob reference in such cases.
.IP "\(bu" 4
\&\f(CW\*(C`PerlIO::get_layers\*(C'\fR no longer ignores some arguments that it thinks are
numeric, while treating others as filehandle names.  It is now consistent
for flat scalars (i.e., not references).
.IP "\(bu" 4
Unrecognized switches on \f(CW\*(C`#!\*(C'\fR line
.Sp
If a switch, such as \fB\-x\fR, that cannot occur on the \f(CW\*(C`#!\*(C'\fR line is used
there, perl dies with \*(L"Can't emulate...\*(R".
.Sp
It used to produce the same message for switches that perl did not
recognize at all, whether on the command line or the \f(CW\*(C`#!\*(C'\fR line.
.Sp
Now it produces the \*(L"Unrecognized switch\*(R" error message [perl #104288].
.IP "\(bu" 4
\&\f(CW\*(C`system\*(C'\fR now temporarily blocks the \s-1SIGCHLD\s0 signal handler, to prevent the
signal handler from stealing the exit status [perl #105700].
.IP "\(bu" 4
The \f(CW%n\fR formatting code for \f(CW\*(C`printf\*(C'\fR and \f(CW\*(C`sprintf\*(C'\fR, which causes the number
of characters to be assigned to the next argument, now actually
assigns the number of characters, instead of the number of bytes.
.Sp
It also works now with special lvalue functions like \f(CW\*(C`substr\*(C'\fR and with
nonexistent hash and array elements [perl #3471, #103492].
.IP "\(bu" 4
Perl skips copying values returned from a subroutine, for the sake of
speed, if doing so would make no observable difference.  Because of faulty
logic, this would happen with the
result of \f(CW\*(C`delete\*(C'\fR, \f(CW\*(C`shift\*(C'\fR or \f(CW\*(C`splice\*(C'\fR, even if the result was
referenced elsewhere.  It also did so with tied variables about to be freed
[perl #91844, #95548].
.IP "\(bu" 4
\&\f(CW\*(C`utf8::decode\*(C'\fR now refuses to modify read-only scalars [perl #91850].
.IP "\(bu" 4
Freeing \f(CW$_\fR inside a \f(CW\*(C`grep\*(C'\fR or \f(CW\*(C`map\*(C'\fR block, a code block embedded in a
regular expression, or an \f(CW@INC\fR filter (a subroutine returned by a
subroutine in \f(CW@INC\fR) used to result in double frees or crashes
[perl #91880, #92254, #92256].
.IP "\(bu" 4
\&\f(CW\*(C`eval\*(C'\fR returns \f(CW\*(C`undef\*(C'\fR in scalar context or an empty list in list
context when there is a run-time error.  When \f(CW\*(C`eval\*(C'\fR was passed a
string in list context and a syntax error occurred, it used to return a
list containing a single undefined element.  Now it returns an empty
list in list context for all errors [perl #80630].
.IP "\(bu" 4
\&\f(CW\*(C`goto &func\*(C'\fR no longer crashes, but produces an error message, when
the unwinding of the current subroutine's scope fires a destructor that
undefines the subroutine being \*(L"goneto\*(R" [perl #99850].
.IP "\(bu" 4
Perl now holds an extra reference count on the package that code is
currently compiling in.  This means that the following code no longer
crashes [perl #101486]:
.Sp
.Vb 3
\&    package Foo;
\&    BEGIN {*Foo:: = *Bar::}
\&    sub foo;
.Ve
.IP "\(bu" 4
The \f(CW\*(C`x\*(C'\fR repetition operator no longer crashes on 64\-bit builds with large
repeat counts [perl #94560].
.IP "\(bu" 4
Calling \f(CW\*(C`require\*(C'\fR on an implicit \f(CW$_\fR when \f(CW*CORE::GLOBAL::require\fR has
been overridden does not segfault anymore, and \f(CW$_\fR is now passed to the
overriding subroutine [perl #78260].
.IP "\(bu" 4
\&\f(CW\*(C`use\*(C'\fR and \f(CW\*(C`require\*(C'\fR are no longer affected by the I/O layers active in
the caller's scope (enabled by open.pm) [perl #96008].
.IP "\(bu" 4
\&\f(CW\*(C`our $::e\*'; $e\*'\*(C'\fR (which is invalid) no longer produces the \*(L"Compilation
error at lib/utf8_heavy.pl...\*(R" error message, which it started emitting in
5.10.0 [perl #99984].
.IP "\(bu" 4
On 64\-bit systems, \f(CW\*(C`read()\*(C'\fR now understands large string offsets beyond
the 32\-bit range.
.IP "\(bu" 4
Errors that occur when processing subroutine attributes no longer cause the
subroutine's op tree to leak.
.IP "\(bu" 4
Passing the same constant subroutine to both \f(CW\*(C`index\*(C'\fR and \f(CW\*(C`formline\*(C'\fR no
longer causes one or the other to fail [perl #89218]. (5.14.1)
.IP "\(bu" 4
List assignment to lexical variables declared with attributes in the same
statement (\f(CW\*(C`my ($x,@y) : blimp = (72,94)\*(C'\fR) stopped working in Perl 5.8.0.
It has now been fixed.
.IP "\(bu" 4
Perl 5.10.0 introduced some faulty logic that made \*(L"U*\*(R" in the middle of
a pack template equivalent to \*(L"U0\*(R" if the input string was empty.  This has
been fixed [perl #90160]. (5.14.2)
.IP "\(bu" 4
Destructors on objects were not called during global destruction on objects
that were not referenced by any scalars.  This could happen if an array
element were blessed (e.g., \f(CW\*(C`bless \e$a[0]\*(C'\fR) or if a closure referenced a
blessed variable (\f(CW\*(C`bless \emy @a; sub foo { @a }\*(C'\fR).
.Sp
Now there is an extra pass during global destruction to fire destructors on
any objects that might be left after the usual passes that check for
objects referenced by scalars [perl #36347].
.IP "\(bu" 4
Fixed a case where it was possible that a freed buffer may have been read
from when parsing a here document [perl #90128]. (5.14.1)
.IP "\(bu" 4
\&\f(CW\*(C`each(\f(CIARRAY\f(CW)\*(C'\fR is now wrapped in \f(CW\*(C`defined(...)\*(C'\fR, like \f(CW\*(C`each(\f(CIHASH\f(CW)\*(C'\fR,
inside a \f(CW\*(C`while\*(C'\fR condition [perl #90888].
.IP "\(bu" 4
A problem with context propagation when a \f(CW\*(C`do\*(C'\fR block is an argument to
\&\f(CW\*(C`return\*(C'\fR has been fixed.  It used to cause \f(CW\*(C`undef\*(C'\fR to be returned in
certain cases of a \f(CW\*(C`return\*(C'\fR inside an \f(CW\*(C`if\*(C'\fR block which itself is followed by
another \f(CW\*(C`return\*(C'\fR.
.IP "\(bu" 4
Calling \f(CW\*(C`index\*(C'\fR with a tainted constant no longer causes constants in
subsequently compiled code to become tainted [perl #64804].
.IP "\(bu" 4
Infinite loops like \f(CW\*(C`1 while 1\*(C'\fR used to stop \f(CW\*(C`strict \*(Aqsubs\*(Aq\*(C'\fR mode from
working for the rest of the block.
.IP "\(bu" 4
For list assignments like \f(CW\*(C`($a,$b) = ($b,$a)\*(C'\fR, Perl has to make a copy of
the items on the right-hand side before assignment them to the left.  For
efficiency's sake, it assigns the values on the right straight to the items
on the left if no one variable is mentioned on both sides, as in \f(CW\*(C`($a,$b) =
($c,$d)\*(C'\fR.  The logic for determining when it can cheat was faulty, in that
\&\f(CW\*(C`&&\*(C'\fR and \f(CW\*(C`||\*(C'\fR on the right-hand side could fool it.  So \f(CW\*(C`($a,$b) =
$some_true_value && ($b,$a)\*(C'\fR would end up assigning the value of \f(CW$b\fR to
both scalars.
.IP "\(bu" 4
Perl no longer tries to apply lvalue context to the string in
\&\f(CW\*(C`("string", $variable) ||= 1\*(C'\fR (which used to be an error).  Since the
left-hand side of \f(CW\*(C`||=\*(C'\fR is evaluated in scalar context, that's a scalar
comma operator, which gives all but the last item void context.  There is
no such thing as void lvalue context, so it was a mistake for Perl to try
to force it [perl #96942].
.IP "\(bu" 4
\&\f(CW\*(C`caller\*(C'\fR no longer leaks memory when called from the \s-1DB\s0 package if
\&\f(CW@DB::args\fR was assigned to after the first call to \f(CW\*(C`caller\*(C'\fR.  Carp
was triggering this bug [perl #97010]. (5.14.2)
.IP "\(bu" 4
\&\f(CW\*(C`close\*(C'\fR and similar filehandle functions, when called on built-in global
variables (like \f(CW$+\fR), used to die if the variable happened to hold the
undefined value, instead of producing the usual \*(L"Use of uninitialized
value\*(R" warning.
.IP "\(bu" 4
When autovivified file handles were introduced in Perl 5.6.0, \f(CW\*(C`readline\*(C'\fR
was inadvertently made to autovivify when called as \f(CW\*(C`readline($foo)\*(C'\fR (but
not as \f(CW\*(C`<$foo>\*(C'\fR).  It has now been fixed never to autovivify.
.IP "\(bu" 4
Calling an undefined anonymous subroutine (e.g., what \f(CW$x\fR holds after
\&\f(CW\*(C`undef &{$x = sub{}}\*(C'\fR) used to cause a \*(L"Not a \s-1CODE\s0 reference\*(R" error, which
has been corrected to \*(L"Undefined subroutine called\*(R" [perl #71154].
.IP "\(bu" 4
Causing \f(CW@DB::args\fR to be freed between uses of \f(CW\*(C`caller\*(C'\fR no longer
results in a crash [perl #93320].
.IP "\(bu" 4
\&\f(CW\*(C`setpgrp($foo)\*(C'\fR used to be equivalent to \f(CW\*(C`($foo, setpgrp)\*(C'\fR, because
\&\f(CW\*(C`setpgrp\*(C'\fR was ignoring its argument if there was just one.  Now it is
equivalent to \f(CW\*(C`setpgrp($foo,0)\*(C'\fR.
.IP "\(bu" 4
\&\f(CW\*(C`shmread\*(C'\fR was not setting the scalar flags correctly when reading from
shared memory, causing the existing cached numeric representation in the
scalar to persist [perl #98480].
.IP "\(bu" 4
\&\f(CW\*(C`++\*(C'\fR and \f(CW\*(C`\-\-\*(C'\fR now work on copies of globs, instead of dying.
.IP "\(bu" 4
\&\f(CW\*(C`splice()\*(C'\fR doesn't warn when truncating
.Sp
You can now limit the size of an array using \f(CW\*(C`splice(@a,MAX_LEN)\*(C'\fR without
worrying about warnings.
.IP "\(bu" 4
\&\f(CW$$\fR is no longer tainted.  Since this value comes directly from
\&\f(CW\*(C`getpid()\*(C'\fR, it is always safe.
.IP "\(bu" 4
The parser no longer leaks a filehandle if \s-1STDIN\s0 was closed before parsing
started [perl #37033].
.IP "\(bu" 4
\&\f(CW\*(C`die;\*(C'\fR with a non-reference, non-string, or magical (e.g., tainted)
value in $@ now properly propagates that value [perl #111654].
.SH "Known Problems"
.IX Header "Known Problems"
.IP "\(bu" 4
On Solaris, we have two kinds of failure.
.Sp
If \fImake\fR is Sun's \fImake\fR, we get an error about a badly formed macro
assignment in the \fIMakefile\fR.  That happens when \fI./Configure\fR tries to
make depends.  \fIConfigure\fR then exits 0, but further \fImake\fR\-ing fails.
.Sp
If \fImake\fR is \fIgmake\fR, \fIConfigure\fR completes, then we get errors related
to \fI/usr/include/stdbool.h\fR
.IP "\(bu" 4
On Win32, a number of tests hang unless \s-1STDERR\s0 is redirected.  The cause of
this is still under investigation.
.IP "\(bu" 4
When building as root with a umask that prevents files from being
other-readable, \fIt/op/filetest.t\fR will fail.  This is a test bug, not a
bug in perl's behavior.
.IP "\(bu" 4
Configuring with a recent gcc and link-time-optimization, such as
\&\f(CW\*(C`Configure \-Doptimize=\*(Aq\-O2 \-flto\*(Aq\*(C'\fR fails
because the optimizer optimizes away some of Configure's tests.  A
workaround is to omit the \f(CW\*(C`\-flto\*(C'\fR flag when running Configure, but add
it back in while actually building, something like
.Sp
.Vb 2
\&    sh Configure \-Doptimize=\-O2                                             
\&    make OPTIMIZE=\*(Aq\-O2 \-flto\*(Aq
.Ve
.IP "\(bu" 4
The following \s-1CPAN\s0 modules have test failures with perl 5.16.  Patches have
been submitted for all of these, so hopefully there will be new releases
soon:
.RS 4
.IP "\(bu" 4
Date::Pcalc version 6.1
.IP "\(bu" 4
Module::CPANTS::Analyse version 0.85
.Sp
This fails due to problems in Module::Find 0.10 and File::MMagic
1.27.
.IP "\(bu" 4
PerlIO::Util version 0.72
.RE
.RS 4
.RE
.SH "Acknowledgements"
.IX Header "Acknowledgements"
Perl 5.16.0 represents approximately 12 months of development since Perl
5.14.0 and contains approximately 590,000 lines of changes across 2,500
files from 139 authors.
.PP
Perl continues to flourish into its third decade thanks to a vibrant
community of users and developers.  The following people are known to
have contributed the improvements that became Perl 5.16.0:
.PP
Aaron Crane, Abhijit Menon-Sen, Abigail, Alan Haggai Alavi, Alberto
Simo\*~es, Alexandr Ciornii, Andreas Ko\*:nig, Andy Dougherty, Aristotle
Pagaltzis, Bo Johansson, Bo Lindbergh, Breno G. de Oliveira, brian d
foy, Brian Fraser, Brian Greenfield, Carl Hayter, Chas. Owens,
Chia-liang Kao, Chip Salzenberg, Chris 'BinGOs' Williams, Christian
Hansen, Christopher J. Madsen, chromatic, Claes Jacobsson, Claudio
Ramirez, Craig A. Berry, Damian Conway, Daniel Kahn Gillmor, Darin
McBride, Dave Rolsky, David Cantrell, David Golden, David Leadbeater,
David Mitchell, Dee Newcum, Dennis Kaarsemaker, Dominic Hargreaves,
Douglas Christopher Wilson, Eric Brine, Father Chrysostomos, Florian
Ragwitz, Frederic Briere, George Greer, Gerard Goossen, Gisle Aas,
H.Merijn Brand, Hojung Youn, Ian Goodacre, James E Keenan, Jan Dubois,
Jerry D. Hedden, Jesse Luehrs, Jesse Vincent, Jilles Tjoelker, Jim
Cromie, Jim Meyering, Joel Berger, Johan Vromans, Johannes Plunien, John
Hawkinson, John P. Linderman, John Peacock, Joshua ben Jore, Juerd
Waalboer, Karl Williamson, Karthik Rajagopalan, Keith Thompson, Kevin J.
Woolley, Kevin Ryde, Laurent Dami, Leo Lapworth, Leon Brocard, Leon
Timmermans, Louis Strous, Lukas Mai, Marc Green, Marcel Gru\*:nauer, Mark
A.  Stratman, Mark Dootson, Mark Jason Dominus, Martin Hasch, Matthew
Horsfall, Max Maischein, Michael G Schwern, Michael Witten, Mike
Sheldrake, Moritz Lenz, Nicholas Clark, Niko Tyni, Nuno Carvalho, Pau
Amma, Paul Evans, Paul Green, Paul Johnson, Perlover, Peter John Acklam,
Peter Martini, Peter Scott, Phil Monsen, Pino Toscano, Rafael
Garcia-Suarez, Rainer Tammer, Reini Urban, Ricardo Signes, Robin Barker,
Rodolfo Carvalho, Salvador Fandin\*~o, Sam Kimbrel, Samuel Thibault, Shawn
M Moore, Shigeya Suzuki, Shirakata Kentaro, Shlomi Fish, Sisyphus,
Slaven Rezic, Spiros Denaxas, Steffen Mu\*:ller, Steffen Schwigon, Stephen
Bennett, Stephen Oberholtzer, Stevan Little, Steve Hay, Steve Peters,
Thomas Sibley, Thorsten Glaser, Timothe Litt, Todd Rinaldo, Tom
Christiansen, Tom Hukins, Tony Cook, Vadim Konovalov, Vincent Pit,
Vladimir Timofeev, Walt Mankowski, Yves Orton, Zefram, Zsba\*'n Ambrus,
\&\*(Aevar Arnfjo\*:r\*(d- Bjarmason.
.PP
The list above is almost certainly incomplete as it is automatically
generated from version control history.  In particular, it does not
include the names of the (very much appreciated) contributors who
reported issues to the Perl bug tracker.
.PP
Many of the changes included in this version originated in the \s-1CPAN\s0
modules included in Perl's core.  We're grateful to the entire \s-1CPAN\s0
community for helping Perl to flourish.
.PP
For a more complete list of all of Perl's historical contributors,
please see the \fI\s-1AUTHORS\s0\fR file in the Perl source distribution.
.SH "Reporting Bugs"
.IX Header "Reporting Bugs"
If you find what you think is a bug, you might check the articles
recently posted to the comp.lang.perl.misc newsgroup and the perl
bug database at <http://rt.perl.org/perlbug/>.  There may also be
information at <http://www.perl.org/>, the Perl Home Page.
.PP
If you believe you have an unreported bug, please run the perlbug
program included with your release.  Be sure to trim your bug down
to a tiny but sufficient test case.  Your bug report, along with the
output of \f(CW\*(C`perl \-V\*(C'\fR, will be sent off to perlbug@perl.org to be
analysed by the Perl porting team.
.PP
If the bug you are reporting has security implications, which make it
inappropriate to send to a publicly archived mailing list, then please
send it to perl5\-security\-report@perl.org.  This points to a closed
subscription unarchived mailing list, which includes all core
committers, who will be able to help assess the impact of issues, figure
out a resolution, and help co-ordinate the release of patches to
mitigate or fix the problem across all platforms on which Perl is
supported.  Please use this address only for security issues in the Perl
core, not for modules independently distributed on \s-1CPAN.\s0
.SH "SEE ALSO"
.IX Header "SEE ALSO"
The \fIChanges\fR file for an explanation of how to view exhaustive details
on what changed.
.PP
The \fI\s-1INSTALL\s0\fR file for how to build Perl.
.PP
The \fI\s-1README\s0\fR file for general stuff.
.PP
The \fIArtistic\fR and \fICopying\fR files for copyright information.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perl5161delta.1                              0100644 0001750 0001750 00000025327 12566207432 023241  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERL5161DELTA 1"
.TH PERL5161DELTA 1 "2013-11-04" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perl5161delta \- what is new for perl v5.16.1
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document describes differences between the 5.16.0 release and
the 5.16.1 release.
.PP
If you are upgrading from an earlier release such as 5.14.0, first read
perl5160delta, which describes differences between 5.14.0 and
5.16.0.
.SH "Security"
.IX Header "Security"
.SS "an off-by-two error in Scalar-List-Util has been fixed"
.IX Subsection "an off-by-two error in Scalar-List-Util has been fixed"
The bugfix was in Scalar-List-Util 1.23_04, and perl 5.16.1 includes
Scalar-List-Util 1.25.
.SH "Incompatible Changes"
.IX Header "Incompatible Changes"
There are no changes intentionally incompatible with 5.16.0 If any
exist, they are bugs, and we request that you submit a report.  See
\&\*(L"Reporting Bugs\*(R" below.
.SH "Modules and Pragmata"
.IX Header "Modules and Pragmata"
.SS "Updated Modules and Pragmata"
.IX Subsection "Updated Modules and Pragmata"
.IP "\(bu" 4
Scalar::Util and List::Util have been upgraded from version 1.23 to
version 1.25.
.IP "\(bu" 4
B::Deparse has been updated from version 1.14 to 1.14_01.  An
\&\*(L"uninitialized\*(R" warning emitted by B::Deparse has been squashed
[perl #113464].
.SH "Configuration and Compilation"
.IX Header "Configuration and Compilation"
.IP "\(bu" 4
Building perl with some Windows compilers used to fail due to a problem
with miniperl's \f(CW\*(C`glob\*(C'\fR operator (which uses the \f(CW\*(C`perlglob\*(C'\fR program)
deleting the \s-1PATH\s0 environment variable [perl #113798].
.SH "Platform Support"
.IX Header "Platform Support"
.SS "Platform-Specific Notes"
.IX Subsection "Platform-Specific Notes"
.IP "\s-1VMS\s0" 4
.IX Item "VMS"
All C header files from the top-level directory of the distribution are now
installed on \s-1VMS,\s0 providing consistency with a long-standing practice on other
platforms. Previously only a subset were installed, which broke non-core extension
builds for extensions that depended on the missing include files.
.SH "Selected Bug Fixes"
.IX Header "Selected Bug Fixes"
.IP "\(bu" 4
A regression introduced in Perl v5.16.0 involving
\&\f(CW\*(C`tr/\f(CISEARCHLIST\f(CW/\f(CIREPLACEMENTLIST\f(CW/\*(C'\fR has been fixed.  Only the first
instance is supposed to be meaningful if a character appears more than
once in \f(CW\*(C`\f(CISEARCHLIST\f(CW\*(C'\fR.  Under some circumstances, the final instance
was overriding all earlier ones.  [perl #113584]
.IP "\(bu" 4
\&\f(CW\*(C`B::COP::stashlen\*(C'\fR has been added.   This provides access to an internal
field added in perl 5.16 under threaded builds.  It was broken at the last
minute before 5.16 was released [perl #113034].
.IP "\(bu" 4
The re pragma will no longer clobber \f(CW$_\fR. [perl #113750]
.IP "\(bu" 4
Unicode 6.1 published an incorrect alias for one of the
Canonical_Combining_Class property's values (which range between 0 and
254).  The alias \f(CW\*(C`CCC133\*(C'\fR should have been \f(CW\*(C`CCC132\*(C'\fR.  Perl now
overrides the data file furnished by Unicode to give the correct value.
.IP "\(bu" 4
Duplicating scalar filehandles works again.  [perl #113764]
.IP "\(bu" 4
Under threaded perls, a runtime code block in a regular expression could
corrupt the package name stored in the op tree, resulting in bad reads
in \f(CW\*(C`caller\*(C'\fR, and possibly crashes [perl #113060].
.IP "\(bu" 4
For efficiency's sake, many operators and built-in functions return the
same scalar each time.  Lvalue subroutines and subroutines in the \s-1CORE::\s0
namespace were allowing this implementation detail to leak through.
\&\f(CW\*(C`print &CORE::uc("a"), &CORE::uc("b")\*(C'\fR used to print \*(L"\s-1BB\*(R". \s0 The same thing
would happen with an lvalue subroutine returning the return value of \f(CW\*(C`uc\*(C'\fR.
Now the value is copied in such cases [perl #113044].
.IP "\(bu" 4
\&\f(CW\*(C`_\|_SUB_\|_\*(C'\fR now works in special blocks (\f(CW\*(C`BEGIN\*(C'\fR, \f(CW\*(C`END\*(C'\fR, etc.).
.IP "\(bu" 4
Formats that reference lexical variables from outside no longer result
in crashes.
.SH "Known Problems"
.IX Header "Known Problems"
There are no new known problems, but consult \*(L"Known
Problems\*(R" in perl5160delta to see those identified in the 5.16.0 release.
.SH "Acknowledgements"
.IX Header "Acknowledgements"
Perl 5.16.1 represents approximately 2 months of development since Perl
5.16.0 and contains approximately 14,000 lines of changes across 96
files from 8 authors.
.PP
Perl continues to flourish into its third decade thanks to a vibrant
community of users and developers. The following people are known to
have contributed the improvements that became Perl 5.16.1:
.PP
Chris 'BinGOs' Williams, Craig A. Berry, Father Chrysostomos, Karl
Williamson, Paul Johnson, Reini Urban, Ricardo Signes, Tony Cook.
.PP
The list above is almost certainly incomplete as it is automatically
generated from version control history. In particular, it does not
include the names of the (very much appreciated) contributors who
reported issues to the Perl bug tracker.
.PP
Many of the changes included in this version originated in the \s-1CPAN\s0
modules included in Perl's core. We're grateful to the entire \s-1CPAN\s0
community for helping Perl to flourish.
.PP
For a more complete list of all of Perl's historical contributors,
please see the \fI\s-1AUTHORS\s0\fR file in the Perl source distribution.
.SH "Reporting Bugs"
.IX Header "Reporting Bugs"
If you find what you think is a bug, you might check the articles
recently posted to the comp.lang.perl.misc newsgroup and the perl
bug database at http://rt.perl.org/perlbug/ .  There may also be
information at http://www.perl.org/ , the Perl Home Page.
.PP
If you believe you have an unreported bug, please run the perlbug
program included with your release.  Be sure to trim your bug down
to a tiny but sufficient test case.  Your bug report, along with the
output of \f(CW\*(C`perl \-V\*(C'\fR, will be sent off to perlbug@perl.org to be
analysed by the Perl porting team.
.PP
If the bug you are reporting has security implications, which make it
inappropriate to send to a publicly archived mailing list, then please
send it to perl5\-security\-report@perl.org. This points to a closed
subscription unarchived mailing list, which includes all the core
committers, who will be able to help assess the impact of issues, figure
out a resolution, and help co-ordinate the release of patches to
mitigate or fix the problem across all platforms on which Perl is
supported. Please only use this address for security issues in the Perl
core, not for modules independently distributed on \s-1CPAN.\s0
.SH "SEE ALSO"
.IX Header "SEE ALSO"
The \fIChanges\fR file for an explanation of how to view exhaustive details
on what changed.
.PP
The \fI\s-1INSTALL\s0\fR file for how to build Perl.
.PP
The \fI\s-1README\s0\fR file for general stuff.
.PP
The \fIArtistic\fR and \fICopying\fR files for copyright information.
                                                                                                                                                                                                                                                                                                         osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perl5161delta5.16.1                          0100644 0001750 0001750 00000025006 12566207413 023544  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERL5161DELTA 1"
.TH PERL5161DELTA 1 "2013-03-04" "perl v5.16.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perl5161delta \- what is new for perl v5.16.1
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document describes differences between the 5.16.0 release and
the 5.16.1 release.
.PP
If you are upgrading from an earlier release such as 5.14.0, first read
perl5160delta, which describes differences between 5.14.0 and
5.16.0.
.SH "Security"
.IX Header "Security"
.SS "an off-by-two error in Scalar-List-Util has been fixed"
.IX Subsection "an off-by-two error in Scalar-List-Util has been fixed"
The bugfix was in Scalar-List-Util 1.23_04, and perl 5.16.1 includes
Scalar-List-Util 1.25.
.SH "Incompatible Changes"
.IX Header "Incompatible Changes"
There are no changes intentionally incompatible with 5.16.0 If any
exist, they are bugs, and we request that you submit a report.  See
\&\*(L"Reporting Bugs\*(R" below.
.SH "Modules and Pragmata"
.IX Header "Modules and Pragmata"
.SS "Updated Modules and Pragmata"
.IX Subsection "Updated Modules and Pragmata"
.IP "\(bu" 4
Scalar::Util and List::Util have been upgraded from version 1.23 to
version 1.25.
.IP "\(bu" 4
B::Deparse has been updated from version 1.14 to 1.14_01.  An
\&\*(L"uninitialized\*(R" warning emitted by B::Deparse has been squashed
[perl #113464].
.SH "Configuration and Compilation"
.IX Header "Configuration and Compilation"
.IP "\(bu" 4
Building perl with some Windows compilers used to fail due to a problem
with miniperl's \f(CW\*(C`glob\*(C'\fR operator (which uses the \f(CW\*(C`perlglob\*(C'\fR program)
deleting the \s-1PATH\s0 environment variable [perl #113798].
.SH "Platform Support"
.IX Header "Platform Support"
.SS "Platform-Specific Notes"
.IX Subsection "Platform-Specific Notes"
.IP "\s-1VMS\s0" 4
.IX Item "VMS"
All C header files from the top-level directory of the distribution are now
installed on \s-1VMS\s0, providing consistency with a long-standing practice on other
platforms. Previously only a subset were installed, which broke non-core extension
builds for extensions that depended on the missing include files.
.SH "Selected Bug Fixes"
.IX Header "Selected Bug Fixes"
.IP "\(bu" 4
A regression introduced in Perl v5.16.0 involving
\&\f(CW\*(C`tr/\f(CISEARCHLIST\f(CW/\f(CIREPLACEMENTLIST\f(CW/\*(C'\fR has been fixed.  Only the first
instance is supposed to be meaningful if a character appears more than
once in \f(CW\*(C`\f(CISEARCHLIST\f(CW\*(C'\fR.  Under some circumstances, the final instance
was overriding all earlier ones.  [perl #113584]
.IP "\(bu" 4
\&\f(CW\*(C`B::COP::stashlen\*(C'\fR has been added.   This provides access to an internal
field added in perl 5.16 under threaded builds.  It was broken at the last
minute before 5.16 was released [perl #113034].
.IP "\(bu" 4
The re pragma will no longer clobber \f(CW$_\fR. [perl #113750]
.IP "\(bu" 4
Unicode 6.1 published an incorrect alias for one of the
Canonical_Combining_Class property's values (which range between 0 and
254).  The alias \f(CW\*(C`CCC133\*(C'\fR should have been \f(CW\*(C`CCC132\*(C'\fR.  Perl now
overrides the data file furnished by Unicode to give the correct value.
.IP "\(bu" 4
Duplicating scalar filehandles works again.  [perl #113764]
.IP "\(bu" 4
Under threaded perls, a runtime code block in a regular expression could
corrupt the package name stored in the op tree, resulting in bad reads
in \f(CW\*(C`caller\*(C'\fR, and possibly crashes [perl #113060].
.IP "\(bu" 4
For efficiency's sake, many operators and built-in functions return the
same scalar each time.  Lvalue subroutines and subroutines in the \s-1CORE::\s0
namespace were allowing this implementation detail to leak through.
\&\f(CW\*(C`print &CORE::uc("a"), &CORE::uc("b")\*(C'\fR used to print \*(L"\s-1BB\s0\*(R".  The same thing
would happen with an lvalue subroutine returning the return value of \f(CW\*(C`uc\*(C'\fR.
Now the value is copied in such cases [perl #113044].
.IP "\(bu" 4
\&\f(CW\*(C`_\|_SUB_\|_\*(C'\fR now works in special blocks (\f(CW\*(C`BEGIN\*(C'\fR, \f(CW\*(C`END\*(C'\fR, etc.).
.IP "\(bu" 4
Formats that reference lexical variables from outside no longer result
in crashes.
.SH "Known Problems"
.IX Header "Known Problems"
There are no new known problems, but consult \*(L"Known
Problems\*(R" in perl5160delta to see those identified in the 5.16.0 release.
.SH "Acknowledgements"
.IX Header "Acknowledgements"
Perl 5.16.1 represents approximately 2 months of development since Perl
5.16.0 and contains approximately 14,000 lines of changes across 96
files from 8 authors.
.PP
Perl continues to flourish into its third decade thanks to a vibrant
community of users and developers. The following people are known to
have contributed the improvements that became Perl 5.16.1:
.PP
Chris 'BinGOs' Williams, Craig A. Berry, Father Chrysostomos, Karl
Williamson, Paul Johnson, Reini Urban, Ricardo Signes, Tony Cook.
.PP
The list above is almost certainly incomplete as it is automatically
generated from version control history. In particular, it does not
include the names of the (very much appreciated) contributors who
reported issues to the Perl bug tracker.
.PP
Many of the changes included in this version originated in the \s-1CPAN\s0
modules included in Perl's core. We're grateful to the entire \s-1CPAN\s0
community for helping Perl to flourish.
.PP
For a more complete list of all of Perl's historical contributors,
please see the \fI\s-1AUTHORS\s0\fR file in the Perl source distribution.
.SH "Reporting Bugs"
.IX Header "Reporting Bugs"
If you find what you think is a bug, you might check the articles
recently posted to the comp.lang.perl.misc newsgroup and the perl
bug database at http://rt.perl.org/perlbug/ .  There may also be
information at http://www.perl.org/ , the Perl Home Page.
.PP
If you believe you have an unreported bug, please run the perlbug
program included with your release.  Be sure to trim your bug down
to a tiny but sufficient test case.  Your bug report, along with the
output of \f(CW\*(C`perl \-V\*(C'\fR, will be sent off to perlbug@perl.org to be
analysed by the Perl porting team.
.PP
If the bug you are reporting has security implications, which make it
inappropriate to send to a publicly archived mailing list, then please
send it to perl5\-security\-report@perl.org. This points to a closed
subscription unarchived mailing list, which includes all the core
committers, who will be able to help assess the impact of issues, figure
out a resolution, and help co-ordinate the release of patches to
mitigate or fix the problem across all platforms on which Perl is
supported. Please only use this address for security issues in the Perl
core, not for modules independently distributed on \s-1CPAN\s0.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
The \fIChanges\fR file for an explanation of how to view exhaustive details
on what changed.
.PP
The \fI\s-1INSTALL\s0\fR file for how to build Perl.
.PP
The \fI\s-1README\s0\fR file for general stuff.
.PP
The \fIArtistic\fR and \fICopying\fR files for copyright information.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perl5161delta5.18.1                          0100644 0001750 0001750 00000025327 12566207432 023555  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERL5161DELTA 1"
.TH PERL5161DELTA 1 "2013-11-04" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perl5161delta \- what is new for perl v5.16.1
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document describes differences between the 5.16.0 release and
the 5.16.1 release.
.PP
If you are upgrading from an earlier release such as 5.14.0, first read
perl5160delta, which describes differences between 5.14.0 and
5.16.0.
.SH "Security"
.IX Header "Security"
.SS "an off-by-two error in Scalar-List-Util has been fixed"
.IX Subsection "an off-by-two error in Scalar-List-Util has been fixed"
The bugfix was in Scalar-List-Util 1.23_04, and perl 5.16.1 includes
Scalar-List-Util 1.25.
.SH "Incompatible Changes"
.IX Header "Incompatible Changes"
There are no changes intentionally incompatible with 5.16.0 If any
exist, they are bugs, and we request that you submit a report.  See
\&\*(L"Reporting Bugs\*(R" below.
.SH "Modules and Pragmata"
.IX Header "Modules and Pragmata"
.SS "Updated Modules and Pragmata"
.IX Subsection "Updated Modules and Pragmata"
.IP "\(bu" 4
Scalar::Util and List::Util have been upgraded from version 1.23 to
version 1.25.
.IP "\(bu" 4
B::Deparse has been updated from version 1.14 to 1.14_01.  An
\&\*(L"uninitialized\*(R" warning emitted by B::Deparse has been squashed
[perl #113464].
.SH "Configuration and Compilation"
.IX Header "Configuration and Compilation"
.IP "\(bu" 4
Building perl with some Windows compilers used to fail due to a problem
with miniperl's \f(CW\*(C`glob\*(C'\fR operator (which uses the \f(CW\*(C`perlglob\*(C'\fR program)
deleting the \s-1PATH\s0 environment variable [perl #113798].
.SH "Platform Support"
.IX Header "Platform Support"
.SS "Platform-Specific Notes"
.IX Subsection "Platform-Specific Notes"
.IP "\s-1VMS\s0" 4
.IX Item "VMS"
All C header files from the top-level directory of the distribution are now
installed on \s-1VMS,\s0 providing consistency with a long-standing practice on other
platforms. Previously only a subset were installed, which broke non-core extension
builds for extensions that depended on the missing include files.
.SH "Selected Bug Fixes"
.IX Header "Selected Bug Fixes"
.IP "\(bu" 4
A regression introduced in Perl v5.16.0 involving
\&\f(CW\*(C`tr/\f(CISEARCHLIST\f(CW/\f(CIREPLACEMENTLIST\f(CW/\*(C'\fR has been fixed.  Only the first
instance is supposed to be meaningful if a character appears more than
once in \f(CW\*(C`\f(CISEARCHLIST\f(CW\*(C'\fR.  Under some circumstances, the final instance
was overriding all earlier ones.  [perl #113584]
.IP "\(bu" 4
\&\f(CW\*(C`B::COP::stashlen\*(C'\fR has been added.   This provides access to an internal
field added in perl 5.16 under threaded builds.  It was broken at the last
minute before 5.16 was released [perl #113034].
.IP "\(bu" 4
The re pragma will no longer clobber \f(CW$_\fR. [perl #113750]
.IP "\(bu" 4
Unicode 6.1 published an incorrect alias for one of the
Canonical_Combining_Class property's values (which range between 0 and
254).  The alias \f(CW\*(C`CCC133\*(C'\fR should have been \f(CW\*(C`CCC132\*(C'\fR.  Perl now
overrides the data file furnished by Unicode to give the correct value.
.IP "\(bu" 4
Duplicating scalar filehandles works again.  [perl #113764]
.IP "\(bu" 4
Under threaded perls, a runtime code block in a regular expression could
corrupt the package name stored in the op tree, resulting in bad reads
in \f(CW\*(C`caller\*(C'\fR, and possibly crashes [perl #113060].
.IP "\(bu" 4
For efficiency's sake, many operators and built-in functions return the
same scalar each time.  Lvalue subroutines and subroutines in the \s-1CORE::\s0
namespace were allowing this implementation detail to leak through.
\&\f(CW\*(C`print &CORE::uc("a"), &CORE::uc("b")\*(C'\fR used to print \*(L"\s-1BB\*(R". \s0 The same thing
would happen with an lvalue subroutine returning the return value of \f(CW\*(C`uc\*(C'\fR.
Now the value is copied in such cases [perl #113044].
.IP "\(bu" 4
\&\f(CW\*(C`_\|_SUB_\|_\*(C'\fR now works in special blocks (\f(CW\*(C`BEGIN\*(C'\fR, \f(CW\*(C`END\*(C'\fR, etc.).
.IP "\(bu" 4
Formats that reference lexical variables from outside no longer result
in crashes.
.SH "Known Problems"
.IX Header "Known Problems"
There are no new known problems, but consult \*(L"Known
Problems\*(R" in perl5160delta to see those identified in the 5.16.0 release.
.SH "Acknowledgements"
.IX Header "Acknowledgements"
Perl 5.16.1 represents approximately 2 months of development since Perl
5.16.0 and contains approximately 14,000 lines of changes across 96
files from 8 authors.
.PP
Perl continues to flourish into its third decade thanks to a vibrant
community of users and developers. The following people are known to
have contributed the improvements that became Perl 5.16.1:
.PP
Chris 'BinGOs' Williams, Craig A. Berry, Father Chrysostomos, Karl
Williamson, Paul Johnson, Reini Urban, Ricardo Signes, Tony Cook.
.PP
The list above is almost certainly incomplete as it is automatically
generated from version control history. In particular, it does not
include the names of the (very much appreciated) contributors who
reported issues to the Perl bug tracker.
.PP
Many of the changes included in this version originated in the \s-1CPAN\s0
modules included in Perl's core. We're grateful to the entire \s-1CPAN\s0
community for helping Perl to flourish.
.PP
For a more complete list of all of Perl's historical contributors,
please see the \fI\s-1AUTHORS\s0\fR file in the Perl source distribution.
.SH "Reporting Bugs"
.IX Header "Reporting Bugs"
If you find what you think is a bug, you might check the articles
recently posted to the comp.lang.perl.misc newsgroup and the perl
bug database at http://rt.perl.org/perlbug/ .  There may also be
information at http://www.perl.org/ , the Perl Home Page.
.PP
If you believe you have an unreported bug, please run the perlbug
program included with your release.  Be sure to trim your bug down
to a tiny but sufficient test case.  Your bug report, along with the
output of \f(CW\*(C`perl \-V\*(C'\fR, will be sent off to perlbug@perl.org to be
analysed by the Perl porting team.
.PP
If the bug you are reporting has security implications, which make it
inappropriate to send to a publicly archived mailing list, then please
send it to perl5\-security\-report@perl.org. This points to a