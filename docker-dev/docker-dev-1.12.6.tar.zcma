5SHELL\s0 environment variable is now checked for
taintedness. (Rafael Garcia-Suarez)
.IP "Using *FILE{\s-1IO\s0}" 4
.IX Item "Using *FILE{IO}"
\&\f(CW\*(C`stat()\*(C'\fR and \f(CW\*(C`\-X\*(C'\fR filetests now treat *FILE{\s-1IO\s0} filehandles like *FILE
filehandles. (Steve Peters)
.IP "Overloading and reblessing" 4
.IX Item "Overloading and reblessing"
Overloading now works when references are reblessed into another class.
Internally, this has been implemented by moving the flag for \*(L"overloading\*(R"
from the reference to the referent, which logically is where it should
always have been. (Nicholas Clark)
.IP "Overloading and \s-1UTF\-8\s0" 4
.IX Item "Overloading and UTF-8"
A few bugs related to \s-1UTF\-8\s0 handling with objects that have
stringification overloaded have been fixed. (Nicholas Clark)
.IP "eval memory leaks fixed" 4
.IX Item "eval memory leaks fixed"
Traditionally, \f(CW\*(C`eval \*(Aqsyntax error\*(Aq\*(C'\fR has leaked badly. Many (but not all)
of these leaks have now been eliminated or reduced. (Dave Mitchell)
.IP "Random device on Windows" 4
.IX Item "Random device on Windows"
In previous versions, perl would read the file \fI/dev/urandom\fR if it
existed when seeding its random number generator.  That file is unlikely
to exist on Windows, and if it did would probably not contain appropriate
data, so perl no longer tries to read it on Windows. (Alex Davies)
.IP "\s-1PERLIO_DEBUG\s0" 4
.IX Item "PERLIO_DEBUG"
The \f(CW\*(C`PERLIO_DEBUG\*(C'\fR environment variable no longer has any effect for
setuid scripts and for scripts run with \fB\-T\fR.
.Sp
Moreover, with a thread-enabled perl, using \f(CW\*(C`PERLIO_DEBUG\*(C'\fR could lead to
an internal buffer overflow. This has been fixed.
.IP "PerlIO::scalar and read-only scalars" 4
.IX Item "PerlIO::scalar and read-only scalars"
PerlIO::scalar will now prevent writing to read-only scalars. Moreover,
\&\fIseek()\fR is now supported with PerlIO::scalar\-based filehandles, the
underlying string being zero-filled as needed. (Rafael, Jarkko Hietaniemi)
.IP "\fIstudy()\fR and \s-1UTF\-8\s0" 4
.IX Item "study() and UTF-8"
\&\fIstudy()\fR never worked for \s-1UTF\-8\s0 strings, but could lead to false results.
It's now a no-op on \s-1UTF\-8\s0 data. (Yves Orton)
.IP "Critical signals" 4
.IX Item "Critical signals"
The signals \s-1SIGILL, SIGBUS\s0 and \s-1SIGSEGV\s0 are now always delivered in an
\&\*(L"unsafe\*(R" manner (contrary to other signals, that are deferred until the
perl interpreter reaches a reasonably stable state; see
\&\*(L"Deferred Signals (Safe Signals)\*(R" in perlipc). (Rafael)
.ie n .IP "@INC\-hook fix" 4
.el .IP "\f(CW@INC\fR\-hook fix" 4
.IX Item "@INC-hook fix"
When a module or a file is loaded through an \f(CW@INC\fR\-hook, and when this hook
has set a filename entry in \f(CW%INC\fR, _\|_FILE_\|_ is now set for this module
accordingly to the contents of that \f(CW%INC\fR entry. (Rafael)
.ie n .IP """\-t"" switch fix" 4
.el .IP "\f(CW\-t\fR switch fix" 4
.IX Item "-t switch fix"
The \f(CW\*(C`\-w\*(C'\fR and \f(CW\*(C`\-t\*(C'\fR switches can now be used together without messing
up which categories of warnings are activated. (Rafael)
.IP "Duping \s-1UTF\-8\s0 filehandles" 4
.IX Item "Duping UTF-8 filehandles"
Duping a filehandle which has the \f(CW\*(C`:utf8\*(C'\fR PerlIO layer set will now
properly carry that layer on the duped filehandle. (Rafael)
.IP "Localisation of hash elements" 4
.IX Item "Localisation of hash elements"
Localizing a hash element whose key was given as a variable didn't work
correctly if the variable was changed while the \fIlocal()\fR was in effect (as
in \f(CW\*(C`local $h{$x}; ++$x\*(C'\fR). (Bo Lindbergh)
.SH "New or Changed Diagnostics"
.IX Header "New or Changed Diagnostics"
.IP "Use of uninitialized value" 4
.IX Item "Use of uninitialized value"
Perl will now try to tell you the name of the variable (if any) that was
undefined.
.IP "Deprecated use of \fImy()\fR in false conditional" 4
.IX Item "Deprecated use of my() in false conditional"
A new deprecation warning, \fIDeprecated use of \fImy()\fI in false conditional\fR,
has been added, to warn against the use of the dubious and deprecated
construct
.Sp
.Vb 1
\&    my $x if 0;
.Ve
.Sp
See perldiag. Use \f(CW\*(C`state\*(C'\fR variables instead.
.IP "!=~ should be !~" 4
.IX Item "!=~ should be !~"
A new warning, \f(CW\*(C`!=~ should be !~\*(C'\fR, is emitted to prevent this misspelling
of the non-matching operator.
.IP "Newline in left-justified string" 4
.IX Item "Newline in left-justified string"
The warning \fINewline in left-justified string\fR has been removed.
.ie n .IP "Too late for ""\-T"" option" 4
.el .IP "Too late for ``\-T'' option" 4
.IX Item "Too late for -T option"
The error \fIToo late for \*(L"\-T\*(R" option\fR has been reformulated to be more
descriptive.
.ie n .IP """%s"" variable %s masks earlier declaration" 4
.el .IP "``%s'' variable \f(CW%s\fR masks earlier declaration" 4
.IX Item "%s variable %s masks earlier declaration"
This warning is now emitted in more consistent cases; in short, when one
of the declarations involved is a \f(CW\*(C`my\*(C'\fR variable:
.Sp
.Vb 3
\&    my $x;   my $x;     # warns
\&    my $x;  our $x;     # warns
\&    our $x;  my $x;     # warns
.Ve
.Sp
On the other hand, the following:
.Sp
.Vb 1
\&    our $x; our $x;
.Ve
.Sp
now gives a \f(CW\*(C`"our" variable %s redeclared\*(C'\fR warning.
.IP "\fIreaddir()\fR/\fIclosedir()\fR/etc. attempted on invalid dirhandle" 4
.IX Item "readdir()/closedir()/etc. attempted on invalid dirhandle"
These new warnings are now emitted when a dirhandle is used but is
either closed or not really a dirhandle.
.ie n .IP "Opening dirhandle/filehandle %s also as a file/directory" 4
.el .IP "Opening dirhandle/filehandle \f(CW%s\fR also as a file/directory" 4
.IX Item "Opening dirhandle/filehandle %s also as a file/directory"
Two deprecation warnings have been added: (Rafael)
.Sp
.Vb 2
\&    Opening dirhandle %s also as a file
\&    Opening filehandle %s also as a directory
.Ve
.IP "Use of \-P is deprecated" 4
.IX Item "Use of -P is deprecated"
Perl's command-line switch \f(CW\*(C`\-P\*(C'\fR is now deprecated.
.IP "v\-string in use/require is non-portable" 4
.IX Item "v-string in use/require is non-portable"
Perl will warn you against potential backwards compatibility problems with
the \f(CW\*(C`use VERSION\*(C'\fR syntax.
.IP "perl \-V" 4
.IX Item "perl -V"
\&\f(CW\*(C`perl \-V\*(C'\fR has several improvements, making it more useable from shell
scripts to get the value of configuration variables. See perlrun for
details.
.SH "Changed Internals"
.IX Header "Changed Internals"
In general, the source code of perl has been refactored, tidied up,
and optimized in many places. Also, memory management and allocation
has been improved in several points.
.PP
When compiling the perl core with gcc, as many gcc warning flags are
turned on as is possible on the platform.  (This quest for cleanliness
doesn't extend to \s-1XS\s0 code because we cannot guarantee the tidiness of
code we didn't write.)  Similar strictness flags have been added or
tightened for various other C compilers.
.SS "Reordering of SVt_* constants"
.IX Subsection "Reordering of SVt_* constants"
The relative ordering of constants that define the various types of \f(CW\*(C`SV\*(C'\fR
have changed; in particular, \f(CW\*(C`SVt_PVGV\*(C'\fR has been moved before \f(CW\*(C`SVt_PVLV\*(C'\fR,
\&\f(CW\*(C`SVt_PVAV\*(C'\fR, \f(CW\*(C`SVt_PVHV\*(C'\fR and \f(CW\*(C`SVt_PVCV\*(C'\fR.  This is unlikely to make any
difference unless you have code that explicitly makes assumptions about that
ordering. (The inheritance hierarchy of \f(CW\*(C`B::*\*(C'\fR objects has been changed
to reflect this.)
.SS "Elimination of SVt_PVBM"
.IX Subsection "Elimination of SVt_PVBM"
Related to this, the internal type \f(CW\*(C`SVt_PVBM\*(C'\fR has been removed. This
dedicated type of \f(CW\*(C`SV\*(C'\fR was used by the \f(CW\*(C`index\*(C'\fR operator and parts of the
regexp engine to facilitate fast Boyer-Moore matches. Its use internally has
been replaced by \f(CW\*(C`SV\*(C'\fRs of type \f(CW\*(C`SVt_PVGV\*(C'\fR.
.SS "New type SVt_BIND"
.IX Subsection "New type SVt_BIND"
A new type \f(CW\*(C`SVt_BIND\*(C'\fR has been added, in readiness for the project to
implement Perl 6 on 5. There deliberately is no implementation yet, and
they cannot yet be created or destroyed.
.SS "Removal of \s-1CPP\s0 symbols"
.IX Subsection "Removal of CPP symbols"
The C preprocessor symbols \f(CW\*(C`PERL_PM_APIVERSION\*(C'\fR and
\&\f(CW\*(C`PERL_XS_APIVERSION\*(C'\fR, which were supposed to give the version number of
the oldest perl binary-compatible (resp. source-compatible) with the
present one, were not used, and sometimes had misleading values. They have
been removed.
.SS "Less space is used by ops"
.IX Subsection "Less space is used by ops"
The \f(CW\*(C`BASEOP\*(C'\fR structure now uses less space. The \f(CW\*(C`op_seq\*(C'\fR field has been
removed and replaced by a single bit bit-field \f(CW\*(C`op_opt\*(C'\fR. \f(CW\*(C`op_type\*(C'\fR is now 9
bits long. (Consequently, the \f(CW\*(C`B::OP\*(C'\fR class doesn't provide an \f(CW\*(C`seq\*(C'\fR
method anymore.)
.SS "New parser"
.IX Subsection "New parser"
perl's parser is now generated by bison (it used to be generated by
byacc.) As a result, it seems to be a bit more robust.
.PP
Also, Dave Mitchell improved the lexer debugging output under \f(CW\*(C`\-DT\*(C'\fR.
.ie n .SS "Use of ""const"""
.el .SS "Use of \f(CWconst\fP"
.IX Subsection "Use of const"
Andy Lester supplied many improvements to determine which function
parameters and local variables could actually be declared \f(CW\*(C`const\*(C'\fR to the C
compiler. Steve Peters provided new \f(CW*_set\fR macros and reworked the core to
use these rather than assigning to macros in \s-1LVALUE\s0 context.
.SS "Mathoms"
.IX Subsection "Mathoms"
A new file, \fImathoms.c\fR, has been added. It contains functions that are
no longer used in the perl core, but that remain available for binary or
source compatibility reasons. However, those functions will not be
compiled in if you add \f(CW\*(C`\-DNO_MATHOMS\*(C'\fR in the compiler flags.
.ie n .SS """AvFLAGS"" has been removed"
.el .SS "\f(CWAvFLAGS\fP has been removed"
.IX Subsection "AvFLAGS has been removed"
The \f(CW\*(C`AvFLAGS\*(C'\fR macro has been removed.
.ie n .SS """av_*"" changes"
.el .SS "\f(CWav_*\fP changes"
.IX Subsection "av_* changes"
The \f(CW\*(C`av_*()\*(C'\fR functions, used to manipulate arrays, no longer accept null
\&\f(CW\*(C`AV*\*(C'\fR parameters.
.SS "$^H and %^H"
.IX Subsection "$^H and %^H"
The implementation of the special variables $^H and %^H has changed, to
allow implementing lexical pragmas in pure Perl.
.SS "B:: modules inheritance changed"
.IX Subsection "B:: modules inheritance changed"
The inheritance hierarchy of \f(CW\*(C`B::\*(C'\fR modules has changed; \f(CW\*(C`B::NV\*(C'\fR now
inherits from \f(CW\*(C`B::SV\*(C'\fR (it used to inherit from \f(CW\*(C`B::IV\*(C'\fR).
.SS "Anonymous hash and array constructors"
.IX Subsection "Anonymous hash and array constructors"
The anonymous hash and array constructors now take 1 op in the optree
instead of 3, now that pp_anonhash and pp_anonlist return a reference to
an hash/array when the op is flagged with OPf_SPECIAL. (Nicholas Clark)
.SH "Known Problems"
.IX Header "Known Problems"
There's still a remaining problem in the implementation of the lexical
\&\f(CW$_\fR: it doesn't work inside \f(CW\*(C`/(?{...})/\*(C'\fR blocks. (See the \s-1TODO\s0 test in
\&\fIt/op/mydef.t\fR.)
.PP
Stacked filetest operators won't work when the \f(CW\*(C`filetest\*(C'\fR pragma is in
effect, because they rely on the \fIstat()\fR buffer \f(CW\*(C`_\*(C'\fR being populated, and
filetest bypasses \fIstat()\fR.
.SS "\s-1UTF\-8\s0 problems"
.IX Subsection "UTF-8 problems"
The handling of Unicode still is unclean in several places, where it's
dependent on whether a string is internally flagged as \s-1UTF\-8.\s0 This will
be made more consistent in perl 5.12, but that won't be possible without
a certain amount of backwards incompatibility.
.SH "Platform Specific Problems"
.IX Header "Platform Specific Problems"
When compiled with g++ and thread support on Linux, it's reported that the
\&\f(CW$!\fR stops working correctly. This is related to the fact that the glibc
provides two \fIstrerror_r\fR\|(3) implementation, and perl selects the wrong
one.
.SH "Reporting Bugs"
.IX Header "Reporting Bugs"
If you find what you think is a bug, you might check the articles
recently posted to the comp.lang.perl.misc newsgroup and the perl
bug database at http://rt.perl.org/rt3/ .  There may also be
information at http://www.perl.org/ , the Perl Home Page.
.PP
If you believe you have an unreported bug, please run the \fBperlbug\fR
program included with your release.  Be sure to trim your bug down
to a tiny but sufficient test case.  Your bug report, along with the
output of \f(CW\*(C`perl \-V\*(C'\fR, will be sent off to perlbug@perl.org to be
analysed by the Perl porting team.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
The \fIChanges\fR file and the perl590delta to perl595delta man pages for
exhaustive details on what changed.
.PP
The \fI\s-1INSTALL\s0\fR file for how to build Perl.
.PP
The \fI\s-1README\s0\fR file for general stuff.
.PP
The \fIArtistic\fR and \fICopying\fR files for copyright information.
                                                                                                                                                                                                                                                                                                                                                                                                                                         osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perl5100delta5.16.1                          0100644 0001750 0001750 00000221615 12566207412 023540  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERL5100DELTA 1"
.TH PERL5100DELTA 1 "2013-03-04" "perl v5.16.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perl5100delta \- what is new for perl 5.10.0
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document describes the differences between the 5.8.8 release and
the 5.10.0 release.
.PP
Many of the bug fixes in 5.10.0 were already seen in the 5.8.X maintenance
releases; they are not duplicated here and are documented in the set of
man pages named perl58[1\-8]?delta.
.SH "Core Enhancements"
.IX Header "Core Enhancements"
.ie n .SS "The ""feature"" pragma"
.el .SS "The \f(CWfeature\fP pragma"
.IX Subsection "The feature pragma"
The \f(CW\*(C`feature\*(C'\fR pragma is used to enable new syntax that would break Perl's
backwards-compatibility with older releases of the language. It's a lexical
pragma, like \f(CW\*(C`strict\*(C'\fR or \f(CW\*(C`warnings\*(C'\fR.
.PP
Currently the following new features are available: \f(CW\*(C`switch\*(C'\fR (adds a
switch statement), \f(CW\*(C`say\*(C'\fR (adds a \f(CW\*(C`say\*(C'\fR built-in function), and \f(CW\*(C`state\*(C'\fR
(adds a \f(CW\*(C`state\*(C'\fR keyword for declaring \*(L"static\*(R" variables). Those
features are described in their own sections of this document.
.PP
The \f(CW\*(C`feature\*(C'\fR pragma is also implicitly loaded when you require a minimal
perl version (with the \f(CW\*(C`use VERSION\*(C'\fR construct) greater than, or equal
to, 5.9.5. See feature for details.
.SS "New \fB\-E\fP command-line switch"
.IX Subsection "New -E command-line switch"
\&\fB\-E\fR is equivalent to \fB\-e\fR, but it implicitly enables all
optional features (like \f(CW\*(C`use feature ":5.10"\*(C'\fR).
.SS "Defined-or operator"
.IX Subsection "Defined-or operator"
A new operator \f(CW\*(C`//\*(C'\fR (defined-or) has been implemented.
The following expression:
.PP
.Vb 1
\&    $a // $b
.Ve
.PP
is merely equivalent to
.PP
.Vb 1
\&   defined $a ? $a : $b
.Ve
.PP
and the statement
.PP
.Vb 1
\&   $c //= $d;
.Ve
.PP
can now be used instead of
.PP
.Vb 1
\&   $c = $d unless defined $c;
.Ve
.PP
The \f(CW\*(C`//\*(C'\fR operator has the same precedence and associativity as \f(CW\*(C`||\*(C'\fR.
Special care has been taken to ensure that this operator Do What You Mean
while not breaking old code, but some edge cases involving the empty
regular expression may now parse differently.  See perlop for
details.
.SS "Switch and Smart Match operator"
.IX Subsection "Switch and Smart Match operator"
Perl 5 now has a switch statement. It's available when \f(CW\*(C`use feature
\&\*(Aqswitch\*(Aq\*(C'\fR is in effect. This feature introduces three new keywords,
\&\f(CW\*(C`given\*(C'\fR, \f(CW\*(C`when\*(C'\fR, and \f(CW\*(C`default\*(C'\fR:
.PP
.Vb 6
\&    given ($foo) {
\&        when (/^abc/) { $abc = 1; }
\&        when (/^def/) { $def = 1; }
\&        when (/^xyz/) { $xyz = 1; }
\&        default { $nothing = 1; }
\&    }
.Ve
.PP
A more complete description of how Perl matches the switch variable
against the \f(CW\*(C`when\*(C'\fR conditions is given in \*(L"Switch statements\*(R" in perlsyn.
.PP
This kind of match is called \fIsmart match\fR, and it's also possible to use
it outside of switch statements, via the new \f(CW\*(C`~~\*(C'\fR operator. See
\&\*(L"Smart matching in detail\*(R" in perlsyn.
.PP
This feature was contributed by Robin Houston.
.SS "Regular expressions"
.IX Subsection "Regular expressions"
.IP "Recursive Patterns" 4
.IX Item "Recursive Patterns"
It is now possible to write recursive patterns without using the \f(CW\*(C`(??{})\*(C'\fR
construct. This new way is more efficient, and in many cases easier to
read.
.Sp
Each capturing parenthesis can now be treated as an independent pattern
that can be entered by using the \f(CW\*(C`(?PARNO)\*(C'\fR syntax (\f(CW\*(C`PARNO\*(C'\fR standing for
\&\*(L"parenthesis number\*(R"). For example, the following pattern will match
nested balanced angle brackets:
.Sp
.Vb 10
\&    /
\&     ^                      # start of line
\&     (                      # start capture buffer 1
\&        <                   #   match an opening angle bracket
\&        (?:                 #   match one of:
\&            (?>             #     don\*(Aqt backtrack over the inside of this group
\&                [^<>]+      #       one or more non angle brackets
\&            )               #     end non backtracking group
\&        |                   #     ... or ...
\&            (?1)            #     recurse to bracket 1 and try it again
\&        )*                  #   0 or more times.
\&        >                   #   match a closing angle bracket
\&     )                      # end capture buffer one
\&     $                      # end of line
\&    /x
.Ve
.Sp
\&\s-1PCRE\s0 users should note that Perl's recursive regex feature allows
backtracking into a recursed pattern, whereas in \s-1PCRE\s0 the recursion is
atomic or \*(L"possessive\*(R" in nature.  As in the example above, you can
add (?>) to control this selectively.  (Yves Orton)
.IP "Named Capture Buffers" 4
.IX Item "Named Capture Buffers"
It is now possible to name capturing parenthesis in a pattern and refer to
the captured contents by name. The naming syntax is \f(CW\*(C`(?<NAME>....)\*(C'\fR.
It's possible to backreference to a named buffer with the \f(CW\*(C`\ek<NAME>\*(C'\fR
syntax. In code, the new magical hashes \f(CW\*(C`%+\*(C'\fR and \f(CW\*(C`%\-\*(C'\fR can be used to
access the contents of the capture buffers.
.Sp
Thus, to replace all doubled chars with a single copy, one could write
.Sp
.Vb 1
\&    s/(?<letter>.)\ek<letter>/$+{letter}/g
.Ve
.Sp
Only buffers with defined contents will be \*(L"visible\*(R" in the \f(CW\*(C`%+\*(C'\fR hash, so
it's possible to do something like
.Sp
.Vb 3
\&    foreach my $name (keys %+) {
\&        print "content of buffer \*(Aq$name\*(Aq is $+{$name}\en";
\&    }
.Ve
.Sp
The \f(CW\*(C`%\-\*(C'\fR hash is a bit more complete, since it will contain array refs
holding values from all capture buffers similarly named, if there should
be many of them.
.Sp
\&\f(CW\*(C`%+\*(C'\fR and \f(CW\*(C`%\-\*(C'\fR are implemented as tied hashes through the new module
\&\f(CW\*(C`Tie::Hash::NamedCapture\*(C'\fR.
.Sp
Users exposed to the .NET regex engine will find that the perl
implementation differs in that the numerical ordering of the buffers
is sequential, and not \*(L"unnamed first, then named\*(R". Thus in the pattern
.Sp
.Vb 1
\&   /(A)(?<B>B)(C)(?<D>D)/
.Ve
.Sp
\&\f(CW$1\fR will be 'A', \f(CW$2\fR will be 'B', \f(CW$3\fR will be 'C' and \f(CW$4\fR will be 'D' and not
\&\f(CW$1\fR is 'A', \f(CW$2\fR is 'C' and \f(CW$3\fR is 'B' and \f(CW$4\fR is 'D' that a .NET programmer
would expect. This is considered a feature. :\-) (Yves Orton)
.IP "Possessive Quantifiers" 4
.IX Item "Possessive Quantifiers"
Perl now supports the \*(L"possessive quantifier\*(R" syntax of the \*(L"atomic match\*(R"
pattern. Basically a possessive quantifier matches as much as it can and never
gives any back. Thus it can be used to control backtracking. The syntax is
similar to non-greedy matching, except instead of using a '?' as the modifier
the '+' is used. Thus \f(CW\*(C`?+\*(C'\fR, \f(CW\*(C`*+\*(C'\fR, \f(CW\*(C`++\*(C'\fR, \f(CW\*(C`{min,max}+\*(C'\fR are now legal
quantifiers. (Yves Orton)
.IP "Backtracking control verbs" 4
.IX Item "Backtracking control verbs"
The regex engine now supports a number of special-purpose backtrack
control verbs: (*THEN), (*PRUNE), (*MARK), (*SKIP), (*COMMIT), (*FAIL)
and (*ACCEPT). See perlre for their descriptions. (Yves Orton)
.IP "Relative backreferences" 4
.IX Item "Relative backreferences"
A new syntax \f(CW\*(C`\eg{N}\*(C'\fR or \f(CW\*(C`\egN\*(C'\fR where \*(L"N\*(R" is a decimal integer allows a
safer form of back-reference notation as well as allowing relative
backreferences. This should make it easier to generate and embed patterns
that contain backreferences. See \*(L"Capture buffers\*(R" in perlre. (Yves Orton)
.ie n .IP """\eK"" escape" 4
.el .IP "\f(CW\eK\fR escape" 4
.IX Item "K escape"
The functionality of Jeff Pinyan's module Regexp::Keep has been added to
the core. In regular expressions you can now use the special escape \f(CW\*(C`\eK\*(C'\fR
as a way to do something like floating length positive lookbehind. It is
also useful in substitutions like:
.Sp
.Vb 1
\&  s/(foo)bar/$1/g
.Ve
.Sp
that can now be converted to
.Sp
.Vb 1
\&  s/foo\eKbar//g
.Ve
.Sp
which is much more efficient. (Yves Orton)
.IP "Vertical and horizontal whitespace, and linebreak" 4
.IX Item "Vertical and horizontal whitespace, and linebreak"
Regular expressions now recognize the \f(CW\*(C`\ev\*(C'\fR and \f(CW\*(C`\eh\*(C'\fR escapes that match
vertical and horizontal whitespace, respectively. \f(CW\*(C`\eV\*(C'\fR and \f(CW\*(C`\eH\*(C'\fR
logically match their complements.
.Sp
\&\f(CW\*(C`\eR\*(C'\fR matches a generic linebreak, that is, vertical whitespace, plus
the multi-character sequence \f(CW"\ex0D\ex0A"\fR.
.ie n .SS """say()"""
.el .SS "\f(CWsay()\fP"
.IX Subsection "say()"
\&\fIsay()\fR is a new built-in, only available when \f(CW\*(C`use feature \*(Aqsay\*(Aq\*(C'\fR is in
effect, that is similar to \fIprint()\fR, but that implicitly appends a newline
to the printed string. See \*(L"say\*(R" in perlfunc. (Robin Houston)
.ie n .SS "Lexical $_"
.el .SS "Lexical \f(CW$_\fP"
.IX Subsection "Lexical $_"
The default variable \f(CW$_\fR can now be lexicalized, by declaring it like
any other lexical variable, with a simple
.PP
.Vb 1
\&    my $_;
.Ve
.PP
The operations that default on \f(CW$_\fR will use the lexically-scoped
version of \f(CW$_\fR when it exists, instead of the global \f(CW$_\fR.
.PP
In a \f(CW\*(C`map\*(C'\fR or a \f(CW\*(C`grep\*(C'\fR block, if \f(CW$_\fR was previously my'ed, then the
\&\f(CW$_\fR inside the block is lexical as well (and scoped to the block).
.PP
In a scope where \f(CW$_\fR has been lexicalized, you can still have access to
the global version of \f(CW$_\fR by using \f(CW$::_\fR, or, more simply, by
overriding the lexical declaration with \f(CW\*(C`our $_\*(C'\fR. (Rafael Garcia-Suarez)
.ie n .SS "The ""_"" prototype"
.el .SS "The \f(CW_\fP prototype"
.IX Subsection "The _ prototype"
A new prototype character has been added. \f(CW\*(C`_\*(C'\fR is equivalent to \f(CW\*(C`$\*(C'\fR but
defaults to \f(CW$_\fR if the corresponding argument isn't supplied (both \f(CW\*(C`$\*(C'\fR
and \f(CW\*(C`_\*(C'\fR denote a scalar). Due to the optional nature of the argument, 
you can only use it at the end of a prototype, or before a semicolon.
.PP
This has a small incompatible consequence: the \fIprototype()\fR function has
been adjusted to return \f(CW\*(C`_\*(C'\fR for some built-ins in appropriate cases (for
example, \f(CW\*(C`prototype(\*(AqCORE::rmdir\*(Aq)\*(C'\fR). (Rafael Garcia-Suarez)
.SS "\s-1UNITCHECK\s0 blocks"
.IX Subsection "UNITCHECK blocks"
\&\f(CW\*(C`UNITCHECK\*(C'\fR, a new special code block has been introduced, in addition to
\&\f(CW\*(C`BEGIN\*(C'\fR, \f(CW\*(C`CHECK\*(C'\fR, \f(CW\*(C`INIT\*(C'\fR and \f(CW\*(C`END\*(C'\fR.
.PP
\&\f(CW\*(C`CHECK\*(C'\fR and \f(CW\*(C`INIT\*(C'\fR blocks, while useful for some specialized purposes,
are always executed at the transition between the compilation and the
execution of the main program, and thus are useless whenever code is
loaded at runtime. On the other hand, \f(CW\*(C`UNITCHECK\*(C'\fR blocks are executed
just after the unit which defined them has been compiled. See perlmod
for more information. (Alex Gough)
.ie n .SS "New Pragma, ""mro"""
.el .SS "New Pragma, \f(CWmro\fP"
.IX Subsection "New Pragma, mro"
A new pragma, \f(CW\*(C`mro\*(C'\fR (for Method Resolution Order) has been added. It
permits to switch, on a per-class basis, the algorithm that perl uses to
find inherited methods in case of a multiple inheritance hierarchy. The
default \s-1MRO\s0 hasn't changed (\s-1DFS\s0, for Depth First Search). Another \s-1MRO\s0 is
available: the C3 algorithm. See mro for more information.
(Brandon Black)
.PP
Note that, due to changes in the implementation of class hierarchy search,
code that used to undef the \f(CW*ISA\fR glob will most probably break. Anyway,
undef'ing \f(CW*ISA\fR had the side-effect of removing the magic on the \f(CW@ISA\fR
array and should not have been done in the first place. Also, the
cache \f(CW*::ISA::CACHE::\fR no longer exists; to force reset the \f(CW@ISA\fR cache,
you now need to use the \f(CW\*(C`mro\*(C'\fR \s-1API\s0, or more simply to assign to \f(CW@ISA\fR
(e.g. with \f(CW\*(C`@ISA = @ISA\*(C'\fR).
.ie n .SS "\fIreaddir()\fP may return a ""short filename"" on Windows"
.el .SS "\fIreaddir()\fP may return a ``short filename'' on Windows"
.IX Subsection "readdir() may return a short filename on Windows"
The \fIreaddir()\fR function may return a \*(L"short filename\*(R" when the long
filename contains characters outside the \s-1ANSI\s0 codepage.  Similarly
\&\fICwd::cwd()\fR may return a short directory name, and \fIglob()\fR may return short
names as well.  On the \s-1NTFS\s0 file system these short names can always be
represented in the \s-1ANSI\s0 codepage.  This will not be true for all other file
system drivers; e.g. the \s-1FAT\s0 filesystem stores short filenames in the \s-1OEM\s0
codepage, so some files on \s-1FAT\s0 volumes remain unaccessible through the
\&\s-1ANSI\s0 APIs.
.PP
Similarly, $^X, \f(CW@INC\fR, and \f(CW$ENV\fR{\s-1PATH\s0} are preprocessed at startup to make
sure all paths are valid in the \s-1ANSI\s0 codepage (if possible).
.PP
The \fIWin32::GetLongPathName()\fR function now returns the \s-1UTF\-8\s0 encoded
correct long file name instead of using replacement characters to force
the name into the \s-1ANSI\s0 codepage.  The new \fIWin32::GetANSIPathName()\fR
function can be used to turn a long pathname into a short one only if the
long one cannot be represented in the \s-1ANSI\s0 codepage.
.PP
Many other functions in the \f(CW\*(C`Win32\*(C'\fR module have been improved to accept
\&\s-1UTF\-8\s0 encoded arguments.  Please see Win32 for details.
.SS "\fIreadpipe()\fP is now overridable"
.IX Subsection "readpipe() is now overridable"
The built-in function \fIreadpipe()\fR is now overridable. Overriding it permits
also to override its operator counterpart, \f(CW\*(C`qx//\*(C'\fR (a.k.a. \f(CW\*(C`\`\`\*(C'\fR).
Moreover, it now defaults to \f(CW$_\fR if no argument is provided. (Rafael
Garcia-Suarez)
.SS "Default argument for \fIreadline()\fP"
.IX Subsection "Default argument for readline()"
\&\fIreadline()\fR now defaults to \f(CW*ARGV\fR if no argument is provided. (Rafael
Garcia-Suarez)
.SS "\fIstate()\fP variables"
.IX Subsection "state() variables"
A new class of variables has been introduced. State variables are similar
to \f(CW\*(C`my\*(C'\fR variables, but are declared with the \f(CW\*(C`state\*(C'\fR keyword in place of
\&\f(CW\*(C`my\*(C'\fR. They're visible only in their lexical scope, but their value is
persistent: unlike \f(CW\*(C`my\*(C'\fR variables, they're not undefined at scope entry,
but retain their previous value. (Rafael Garcia-Suarez, Nicholas Clark)
.PP
To use state variables, one needs to enable them by using
.PP
.Vb 1
\&    use feature \*(Aqstate\*(Aq;
.Ve
.PP
or by using the \f(CW\*(C`\-E\*(C'\fR command-line switch in one-liners.
See \*(L"Persistent Private Variables\*(R" in perlsub.
.SS "Stacked filetest operators"
.IX Subsection "Stacked filetest operators"
As a new form of syntactic sugar, it's now possible to stack up filetest
operators. You can now write \f(CW\*(C`\-f \-w \-x $file\*(C'\fR in a row to mean
\&\f(CW\*(C`\-x $file && \-w _ && \-f _\*(C'\fR. See \*(L"\-X\*(R" in perlfunc.
.SS "\s-1\fIUNIVERSAL::DOES\s0()\fP"
.IX Subsection "UNIVERSAL::DOES()"
The \f(CW\*(C`UNIVERSAL\*(C'\fR class has a new method, \f(CW\*(C`DOES()\*(C'\fR. It has been added to
solve semantic problems with the \f(CW\*(C`isa()\*(C'\fR method. \f(CW\*(C`isa()\*(C'\fR checks for
inheritance, while \f(CW\*(C`DOES()\*(C'\fR has been designed to be overridden when
module authors use other types of relations between classes (in addition
to inheritance). (chromatic)
.PP
See \*(L"$obj\->\s-1DOES\s0( \s-1ROLE\s0 )\*(R" in \s-1UNIVERSAL\s0.
.SS "Formats"
.IX Subsection "Formats"
Formats were improved in several ways. A new field, \f(CW\*(C`^*\*(C'\fR, can be used for
variable-width, one-line-at-a-time text. Null characters are now handled
correctly in picture lines. Using \f(CW\*(C`@#\*(C'\fR and \f(CW\*(C`~~\*(C'\fR together will now
produce a compile-time error, as those format fields are incompatible.
perlform has been improved, and miscellaneous bugs fixed.
.SS "Byte-order modifiers for \fIpack()\fP and \fIunpack()\fP"
.IX Subsection "Byte-order modifiers for pack() and unpack()"
There are two new byte-order modifiers, \f(CW\*(C`>\*(C'\fR (big-endian) and \f(CW\*(C`<\*(C'\fR
(little-endian), that can be appended to most \fIpack()\fR and \fIunpack()\fR template
characters and groups to force a certain byte-order for that type or group.
See \*(L"pack\*(R" in perlfunc and perlpacktut for details.
.ie n .SS """no VERSION"""
.el .SS "\f(CWno VERSION\fP"
.IX Subsection "no VERSION"
You can now use \f(CW\*(C`no\*(C'\fR followed by a version number to specify that you
want to use a version of perl older than the specified one.
.ie n .SS """chdir"", ""chmod"" and ""chown"" on filehandles"
.el .SS "\f(CWchdir\fP, \f(CWchmod\fP and \f(CWchown\fP on filehandles"
.IX Subsection "chdir, chmod and chown on filehandles"
\&\f(CW\*(C`chdir\*(C'\fR, \f(CW\*(C`chmod\*(C'\fR and \f(CW\*(C`chown\*(C'\fR can now work on filehandles as well as
filenames, if the system supports respectively \f(CW\*(C`fchdir\*(C'\fR, \f(CW\*(C`fchmod\*(C'\fR and
\&\f(CW\*(C`fchown\*(C'\fR, thanks to a patch provided by Gisle Aas.
.SS "\s-1OS\s0 groups"
.IX Subsection "OS groups"
\&\f(CW$(\fR and \f(CW$)\fR now return groups in the order where the \s-1OS\s0 returns them,
thanks to Gisle Aas. This wasn't previously the case.
.SS "Recursive sort subs"
.IX Subsection "Recursive sort subs"
You can now use recursive subroutines with \fIsort()\fR, thanks to Robin Houston.
.SS "Exceptions in constant folding"
.IX Subsection "Exceptions in constant folding"
The constant folding routine is now wrapped in an exception handler, and
if folding throws an exception (such as attempting to evaluate 0/0), perl
now retains the current optree, rather than aborting the whole program.
Without this change, programs would not compile if they had expressions that
happened to generate exceptions, even though those expressions were in code
that could never be reached at runtime. (Nicholas Clark, Dave Mitchell)
.ie n .SS "Source filters in @INC"
.el .SS "Source filters in \f(CW@INC\fP"
.IX Subsection "Source filters in @INC"
It's possible to enhance the mechanism of subroutine hooks in \f(CW@INC\fR by
adding a source filter on top of the filehandle opened and returned by the
hook. This feature was planned a long time ago, but wasn't quite working
until now. See \*(L"require\*(R" in perlfunc for details. (Nicholas Clark)
.SS "New internal variables"
.IX Subsection "New internal variables"
.ie n .IP """${^RE_DEBUG_FLAGS}""" 4
.el .IP "\f(CW${^RE_DEBUG_FLAGS}\fR" 4
.IX Item "${^RE_DEBUG_FLAGS}"
This variable controls what debug flags are in effect for the regular
expression engine when running under \f(CW\*(C`use re "debug"\*(C'\fR. See re for
details.
.ie n .IP """${^CHILD_ERROR_NATIVE}""" 4
.el .IP "\f(CW${^CHILD_ERROR_NATIVE}\fR" 4
.IX Item "${^CHILD_ERROR_NATIVE}"
This variable gives the native status returned by the last pipe close,
backtick command, successful call to \fIwait()\fR or \fIwaitpid()\fR, or from the
\&\fIsystem()\fR operator. See perlvar for details. (Contributed by Gisle Aas.)
.ie n .IP """${^RE_TRIE_MAXBUF}""" 4
.el .IP "\f(CW${^RE_TRIE_MAXBUF}\fR" 4
.IX Item "${^RE_TRIE_MAXBUF}"
See \*(L"Trie optimisation of literal string alternations\*(R".
.ie n .IP """${^WIN32_SLOPPY_STAT}""" 4
.el .IP "\f(CW${^WIN32_SLOPPY_STAT}\fR" 4
.IX Item "${^WIN32_SLOPPY_STAT}"
See \*(L"Sloppy stat on Windows\*(R".
.SS "Miscellaneous"
.IX Subsection "Miscellaneous"
\&\f(CW\*(C`unpack()\*(C'\fR now defaults to unpacking the \f(CW$_\fR variable.
.PP
\&\f(CW\*(C`mkdir()\*(C'\fR without arguments now defaults to \f(CW$_\fR.
.PP
The internal dump output has been improved, so that non-printable characters
such as newline and backspace are output in \f(CW\*(C`\ex\*(C'\fR notation, rather than
octal.
.PP
The \fB\-C\fR option can no longer be used on the \f(CW\*(C`#!\*(C'\fR line. It wasn't
working there anyway, since the standard streams are already set up
at this point in the execution of the perl interpreter. You can use
\&\fIbinmode()\fR instead to get the desired behaviour.
.SS "\s-1UCD\s0 5.0.0"
.IX Subsection "UCD 5.0.0"
The copy of the Unicode Character Database included in Perl 5 has
been updated to version 5.0.0.
.SS "\s-1MAD\s0"
.IX Subsection "MAD"
\&\s-1MAD\s0, which stands for \fIMiscellaneous Attribute Decoration\fR, is a
still-in-development work leading to a Perl 5 to Perl 6 converter. To
enable it, it's necessary to pass the argument \f(CW\*(C`\-Dmad\*(C'\fR to Configure. The
obtained perl isn't binary compatible with a regular perl 5.10, and has
space and speed penalties; moreover not all regression tests still pass
with it. (Larry Wall, Nicholas Clark)
.SS "\fIkill()\fP on Windows"
.IX Subsection "kill() on Windows"
On Windows platforms, \f(CW\*(C`kill(\-9, $pid)\*(C'\fR now kills a process tree.
(On Unix, this delivers the signal to all processes in the same process
group.)
.SH "Incompatible Changes"
.IX Header "Incompatible Changes"
.SS "Packing and \s-1UTF\-8\s0 strings"
.IX Subsection "Packing and UTF-8 strings"
The semantics of \fIpack()\fR and \fIunpack()\fR regarding UTF\-8\-encoded data has been
changed. Processing is now by default character per character instead of
byte per byte on the underlying encoding. Notably, code that used things
like \f(CW\*(C`pack("a*", $string)\*(C'\fR to see through the encoding of string will now
simply get back the original \f(CW$string\fR. Packed strings can also get upgraded
during processing when you store upgraded characters. You can get the old
behaviour by using \f(CW\*(C`use bytes\*(C'\fR.
.PP
To be consistent with \fIpack()\fR, the \f(CW\*(C`C0\*(C'\fR in \fIunpack()\fR templates indicates
that the data is to be processed in character mode, i.e. character by
character; on the contrary, \f(CW\*(C`U0\*(C'\fR in \fIunpack()\fR indicates \s-1UTF\-8\s0 mode, where
the packed string is processed in its UTF\-8\-encoded Unicode form on a byte
by byte basis. This is reversed with regard to perl 5.8.X, but now consistent
between \fIpack()\fR and \fIunpack()\fR.
.PP
Moreover, \f(CW\*(C`C0\*(C'\fR and \f(CW\*(C`U0\*(C'\fR can also be used in \fIpack()\fR templates to specify
respectively character and byte modes.
.PP
\&\f(CW\*(C`C0\*(C'\fR and \f(CW\*(C`U0\*(C'\fR in the middle of a pack or unpack format now switch to the
specified encoding mode, honoring parens grouping. Previously, parens were
ignored.
.PP
Also, there is a new \fIpack()\fR character format, \f(CW\*(C`W\*(C'\fR, which is intended to
replace the old \f(CW\*(C`C\*(C'\fR. \f(CW\*(C`C\*(C'\fR is kept for unsigned chars coded as bytes in
the strings internal representation. \f(CW\*(C`W\*(C'\fR represents unsigned (logical)
character values, which can be greater than 255. It is therefore more
robust when dealing with potentially UTF\-8\-encoded data (as \f(CW\*(C`C\*(C'\fR will wrap
values outside the range 0..255, and not respect the string encoding).
.PP
In practice, that means that pack formats are now encoding-neutral, except
\&\f(CW\*(C`C\*(C'\fR.
.PP
For consistency, \f(CW\*(C`A\*(C'\fR in \fIunpack()\fR format now trims all Unicode whitespace
from the end of the string. Before perl 5.9.2, it used to strip only the
classical \s-1ASCII\s0 space characters.
.SS "Byte/character count feature in \fIunpack()\fP"
.IX Subsection "Byte/character count feature in unpack()"
A new \fIunpack()\fR template character, \f(CW"."\fR, returns the number of bytes or
characters (depending on the selected encoding mode, see above) read so far.
.ie n .SS "The $* and $# variables have been removed"
.el .SS "The \f(CW$*\fP and \f(CW$#\fP variables have been removed"
.IX Subsection "The $* and $# variables have been removed"
\&\f(CW$*\fR, which was deprecated in favor of the \f(CW\*(C`/s\*(C'\fR and \f(CW\*(C`/m\*(C'\fR regexp
modifiers, has been removed.
.PP
The deprecated \f(CW$#\fR variable (output format for numbers) has been
removed.
.PP
Two new severe warnings, \f(CW\*(C`$#/$* is no longer supported\*(C'\fR, have been added.
.SS "\fIsubstr()\fP lvalues are no longer fixed-length"
.IX Subsection "substr() lvalues are no longer fixed-length"
The lvalues returned by the three argument form of \fIsubstr()\fR used to be a
\&\*(L"fixed length window\*(R" on the original string. In some cases this could
cause surprising action at distance or other undefined behaviour. Now the
length of the window adjusts itself to the length of the string assigned to
it.
.ie n .SS "Parsing of ""\-f _"""
.el .SS "Parsing of \f(CW\-f _\fP"
.IX Subsection "Parsing of -f _"
The identifier \f(CW\*(C`_\*(C'\fR is now forced to be a bareword after a filetest
operator. This solves a number of misparsing issues when a global \f(CW\*(C`_\*(C'\fR
subroutine is defined.
.ie n .SS """:unique"""
.el .SS "\f(CW:unique\fP"
.IX Subsection ":unique"
The \f(CW\*(C`:unique\*(C'\fR attribute has been made a no-op, since its current
implementation was fundamentally flawed and not threadsafe.
.SS "Effect of pragmas in eval"
.IX Subsection "Effect of pragmas in eval"
The compile-time value of the \f(CW\*(C`%^H\*(C'\fR hint variable can now propagate into
eval("")uated code. This makes it more useful to implement lexical
pragmas.
.PP
As a side-effect of this, the overloaded-ness of constants now propagates
into eval("").
.SS "chdir \s-1FOO\s0"
.IX Subsection "chdir FOO"
A bareword argument to \fIchdir()\fR is now recognized as a file handle.
Earlier releases interpreted the bareword as a directory name.
(Gisle Aas)
.SS "Handling of .pmc files"
.IX Subsection "Handling of .pmc files"
An old feature of perl was that before \f(CW\*(C`require\*(C'\fR or \f(CW\*(C`use\*(C'\fR look for a
file with a \fI.pm\fR extension, they will first look for a similar filename
with a \fI.pmc\fR extension. If this file is found, it will be loaded in
place of any potentially existing file ending in a \fI.pm\fR extension.
.PP
Previously, \fI.pmc\fR files were loaded only if more recent than the
matching \fI.pm\fR file. Starting with 5.9.4, they'll be always loaded if
they exist.
.ie n .SS "$^V is now a ""version"" object instead of a v\-string"
.el .SS "$^V is now a \f(CWversion\fP object instead of a v\-string"
.IX Subsection "$^V is now a version object instead of a v-string"
$^V can still be used with the \f(CW%vd\fR format in printf, but any
character-level operations will now access the string representation
of the \f(CW\*(C`version\*(C'\fR object and not the ordinals of a v\-string.
Expressions like \f(CW\*(C`substr($^V, 0, 2)\*(C'\fR or \f(CW\*(C`split //, $^V\*(C'\fR
no longer work and must be rewritten.
.SS "@\- and @+ in patterns"
.IX Subsection "@- and @+ in patterns"
The special arrays \f(CW\*(C`@\-\*(C'\fR and \f(CW\*(C`@+\*(C'\fR are no longer interpolated in regular
expressions. (Sadahiro Tomoyuki)
.ie n .SS "$AUTOLOAD can now be tainted"
.el .SS "\f(CW$AUTOLOAD\fP can now be tainted"
.IX Subsection "$AUTOLOAD can now be tainted"
If you call a subroutine by a tainted name, and if it defers to an
\&\s-1AUTOLOAD\s0 function, then \f(CW$AUTOLOAD\fR will be (correctly) tainted.
(Rick Delaney)
.SS "Tainting and printf"
.IX Subsection "Tainting and printf"
When perl is run under taint mode, \f(CW\*(C`printf()\*(C'\fR and \f(CW\*(C`sprintf()\*(C'\fR will now
reject any tainted format argument. (Rafael Garcia-Suarez)
.SS "undef and signal handlers"
.IX Subsection "undef and signal handlers"
Undefining or deleting a signal handler via \f(CW\*(C`undef $SIG{FOO}\*(C'\fR is now
equivalent to setting it to \f(CW\*(AqDEFAULT\*(Aq\fR. (Rafael Garcia-Suarez)
.SS "strictures and dereferencing in \fIdefined()\fP"
.IX Subsection "strictures and dereferencing in defined()"
\&\f(CW\*(C`use strict \*(Aqrefs\*(Aq\*(C'\fR was ignoring taking a hard reference in an argument
to \fIdefined()\fR, as in :
.PP
.Vb 3
\&    use strict \*(Aqrefs\*(Aq;
\&    my $x = \*(Aqfoo\*(Aq;
\&    if (defined $$x) {...}
.Ve
.PP
This now correctly produces the run-time error \f(CW\*(C`Can\*(Aqt use string as a
SCALAR ref while "strict refs" in use\*(C'\fR.
.PP
\&\f(CW\*(C`defined @$foo\*(C'\fR and \f(CW\*(C`defined %$bar\*(C'\fR are now also subject to \f(CW\*(C`strict
\&\*(Aqrefs\*(Aq\*(C'\fR (that is, \f(CW$foo\fR and \f(CW$bar\fR shall be proper references there.)
(\f(CW\*(C`defined(@foo)\*(C'\fR and \f(CW\*(C`defined(%bar)\*(C'\fR are discouraged constructs anyway.)
(Nicholas Clark)
.ie n .SS """(?p{})"" has been removed"
.el .SS "\f(CW(?p{})\fP has been removed"
.IX Subsection "(?p{}) has been removed"
The regular expression construct \f(CW\*(C`(?p{})\*(C'\fR, which was deprecated in perl
5.8, has been removed. Use \f(CW\*(C`(??{})\*(C'\fR instead. (Rafael Garcia-Suarez)
.SS "Pseudo-hashes have been removed"
.IX Subsection "Pseudo-hashes have been removed"
Support for pseudo-hashes has been removed from Perl 5.9. (The \f(CW\*(C`fields\*(C'\fR
pragma remains here, but uses an alternate implementation.)
.SS "Removal of the bytecode compiler and of perlcc"
.IX Subsection "Removal of the bytecode compiler and of perlcc"
\&\f(CW\*(C`perlcc\*(C'\fR, the byteloader and the supporting modules (B::C, B::CC,
B::Bytecode, etc.) are no longer distributed with the perl sources. Those
experimental tools have never worked reliably, and, due to the lack of
volunteers to keep them in line with the perl interpreter developments, it
was decided to remove them instead of shipping a broken version of those.
The last version of those modules can be found with perl 5.9.4.
.PP
However the B compiler framework stays supported in the perl core, as with
the more useful modules it has permitted (among others, B::Deparse and
B::Concise).
.SS "Removal of the \s-1JPL\s0"
.IX Subsection "Removal of the JPL"
The \s-1JPL\s0 (Java-Perl Lingo) has been removed from the perl sources tarball.
.SS "Recursive inheritance detected earlier"
.IX Subsection "Recursive inheritance detected earlier"
Perl will now immediately throw an exception if you modify any package's
\&\f(CW@ISA\fR in such a way that it would cause recursive inheritance.
.PP
Previously, the exception would not occur until Perl attempted to make
use of the recursive inheritance while resolving a method or doing a
\&\f(CW\*(C`$foo\->isa($bar)\*(C'\fR lookup.
.SS "warnings::enabled and warnings::warnif changed to favor users of modules"
.IX Subsection "warnings::enabled and warnings::warnif changed to favor users of modules"
The behaviour in 5.10.x favors the person using the module;
The behaviour in 5.8.x favors the module writer;
.PP
Assume the following code:
.PP
.Vb 5
\&  main calls Foo::Bar::baz()
\&  Foo::Bar inherits from Foo::Base
\&  Foo::Bar::baz() calls Foo::Base::_bazbaz()
\&  Foo::Base::_bazbaz() calls: warnings::warnif(\*(Aqsubstr\*(Aq, \*(Aqsome warning 
\&message\*(Aq);
.Ve
.PP
On 5.8.x, the code warns when Foo::Bar contains \f(CW\*(C`use warnings;\*(C'\fR
It does not matter if Foo::Base or main have warnings enabled
to disable the warning one has to modify Foo::Bar.
.PP
On 5.10.0 and newer, the code warns when main contains \f(CW\*(C`use warnings;\*(C'\fR
It does not matter if Foo::Base or Foo::Bar have warnings enabled
to disable the warning one has to modify main.
.SH "Modules and Pragmata"
.IX Header "Modules and Pragmata"
.SS "Upgrading individual core modules"
.IX Subsection "Upgrading individual core modules"
Even more core modules are now also available separately through the
\&\s-1CPAN\s0.  If you wish to update one of these modules, you don't need to
wait for a new perl release.  From within the cpan shell, running the
\&'r' command will report on modules with upgrades available.  See
\&\f(CW\*(C`perldoc CPAN\*(C'\fR for more information.
.SS "Pragmata Changes"
.IX Subsection "Pragmata Changes"
.ie n .IP """feature""" 4
.el .IP "\f(CWfeature\fR" 4
.IX Item "feature"
The new pragma \f(CW\*(C`feature\*(C'\fR is used to enable new features that might break
old code. See "The \f(CW\*(C`feature\*(C'\fR pragma" above.
.ie n .IP """mro""" 4
.el .IP "\f(CWmro\fR" 4
.IX Item "mro"
This new pragma enables to change the algorithm used to resolve inherited
methods. See "New Pragma, \f(CW\*(C`mro\*(C'\fR" above.
.ie n .IP "Scoping of the ""sort"" pragma" 4
.el .IP "Scoping of the \f(CWsort\fR pragma" 4
.IX Item "Scoping of the sort pragma"
The \f(CW\*(C`sort\*(C'\fR pragma is now lexically scoped. Its effect used to be global.
.ie n .IP "Scoping of ""bignum"", ""bigint"", ""bigrat""" 4
.el .IP "Scoping of \f(CWbignum\fR, \f(CWbigint\fR, \f(CWbigrat\fR" 4
.IX Item "Scoping of bignum, bigint, bigrat"
The three numeric pragmas \f(CW\*(C`bignum\*(C'\fR, \f(CW\*(C`bigint\*(C'\fR and \f(CW\*(C`bigrat\*(C'\fR are now
lexically scoped. (Tels)
.ie n .IP """base""" 4
.el .IP "\f(CWbase\fR" 4
.IX Item "base"
The \f(CW\*(C`base\*(C'\fR pragma now warns if a class tries to inherit from itself.
(Curtis \*(L"Ovid\*(R" Poe)
.ie n .IP """strict"" and ""warnings""" 4
.el .IP "\f(CWstrict\fR and \f(CWwarnings\fR" 4
.IX Item "strict and warnings"
\&\f(CW\*(C`strict\*(C'\fR and \f(CW\*(C`warnings\*(C'\fR will now complain loudly if they are loaded via
incorrect casing (as in \f(CW\*(C`use Strict;\*(C'\fR). (Johan Vromans)
.ie n .IP """version""" 4
.el .IP "\f(CWversion\fR" 4
.IX Item "version"
The \f(CW\*(C`version\*(C'\fR module provides support for version objects.
.ie n .IP """warnings""" 4
.el .IP "\f(CWwarnings\fR" 4
.IX Item "warnings"
The \f(CW\*(C`warnings\*(C'\fR pragma doesn't load \f(CW\*(C`Carp\*(C'\fR anymore. That means that code
that used \f(CW\*(C`Carp\*(C'\fR routines without having loaded it at compile time might
need to be adjusted; typically, the following (faulty) code won't work
anymore, and will require parentheses to be added after the function name:
.Sp
.Vb 3
\&    use warnings;
\&    require Carp;
\&    Carp::confess \*(Aqargh\*(Aq;
.Ve
.ie n .IP """less""" 4
.el .IP "\f(CWless\fR" 4
.IX Item "less"
\&\f(CW\*(C`less\*(C'\fR now does something useful (or at least it tries to). In fact, it
has been turned into a lexical pragma. So, in your modules, you can now
test whether your users have requested to use less \s-1CPU\s0, or less memory,
less magic, or maybe even less fat. See less for more. (Joshua ben
Jore)
.SS "New modules"
.IX Subsection "New modules"
.IP "\(bu" 4
\&\f(CW\*(C`encoding::warnings\*(C'\fR, by Audrey Tang, is a module to emit warnings
whenever an \s-1ASCII\s0 character string containing high-bit bytes is implicitly
converted into \s-1UTF\-8\s0. It's a lexical pragma since Perl 5.9.4; on older
perls, its effect is global.
.IP "\(bu" 4
\&\f(CW\*(C`Module::CoreList\*(C'\fR, by Richard Clamp, is a small handy module that tells
you what versions of core modules ship with any versions of Perl 5. It
comes with a command-line frontend, \f(CW\*(C`corelist\*(C'\fR.
.IP "\(bu" 4
\&\f(CW\*(C`Math::BigInt::FastCalc\*(C'\fR is an XS-enabled, and thus faster, version of
\&\f(CW\*(C`Math::BigInt::Calc\*(C'\fR.
.IP "\(bu" 4
\&\f(CW\*(C`Compress::Zlib\*(C'\fR is an interface to the zlib compression library. It
comes with a bundled version of zlib, so having a working zlib is not a
prerequisite to install it. It's used by \f(CW\*(C`Archive::Tar\*(C'\fR (see below).
.IP "\(bu" 4
\&\f(CW\*(C`IO::Zlib\*(C'\fR is an \f(CW\*(C`IO::\*(C'\fR\-style interface to \f(CW\*(C`Compress::Zlib\*(C'\fR.
.IP "\(bu" 4
\&\f(CW\*(C`Archive::Tar\*(C'\fR is a module to manipulate \f(CW\*(C`tar\*(C'\fR archives.
.IP "\(bu" 4
\&\f(CW\*(C`Digest::SHA\*(C'\fR is a module used to calculate many types of \s-1SHA\s0 digests,
has been included for \s-1SHA\s0 support in the \s-1CPAN\s0 module.
.IP "\(bu" 4
\&\f(CW\*(C`ExtUtils::CBuilder\*(C'\fR and \f(CW\*(C`ExtUtils::ParseXS\*(C'\fR have been added.
.IP "\(bu" 4
\&\f(CW\*(C`Hash::Util::FieldHash\*(C'\fR, by Anno Siegel, has been added. This module
provides support for \fIfield hashes\fR: hashes that maintain an association
of a reference with a value, in a thread-safe garbage-collected way.
Such hashes are useful to implement inside-out objects.
.IP "\(bu" 4
\&\f(CW\*(C`Module::Build\*(C'\fR, by Ken Williams, has been added. It's an alternative to
\&\f(CW\*(C`ExtUtils::MakeMaker\*(C'\fR to build and install perl modules.
.IP "\(bu" 4
\&\f(CW\*(C`Module::Load\*(C'\fR, by Jos Boumans, has been added. It provides a single
interface to load Perl modules and \fI.pl\fR files.
.IP "\(bu" 4
\&\f(CW\*(C`Module::Loaded\*(C'\fR, by Jos Boumans, has been added. It's used to mark
modules as loaded or unloaded.
.IP "\(bu" 4
\&\f(CW\*(C`Package::Constants\*(C'\fR, by Jos Boumans, has been added. It's a simple
helper to list all constants declared in a given package.
.IP "\(bu" 4
\&\f(CW\*(C`Win32API::File\*(C'\fR, by Tye McQueen, has been added (for Windows builds).
This module provides low-level access to Win32 system \s-1API\s0 calls for
files/dirs.
.IP "\(bu" 4
\&\f(CW\*(C`Locale::Maketext::Simple\*(C'\fR, needed by \s-1CPANPLUS\s0, is a simple wrapper around
\&\f(CW\*(C`Locale::Maketext::Lexicon\*(C'\fR. Note that \f(CW\*(C`Locale::Maketext::Lexicon\*(C'\fR isn't
included in the perl core; the behaviour of \f(CW\*(C`Locale::Maketext::Simple\*(C'\fR
gracefully degrades when the later isn't present.
.IP "\(bu" 4
\&\f(CW\*(C`Params::Check\*(C'\fR implements a generic input parsing/checking mechanism. It
is used by \s-1CPANPLUS\s0.
.IP "\(bu" 4
\&\f(CW\*(C`Term::UI\*(C'\fR simplifies the task to ask questions at a terminal prompt.
.IP "\(bu" 4
\&\f(CW\*(C`Object::Accessor\*(C'\fR provides an interface to create per-object accessors.
.IP "\(bu" 4
\&\f(CW\*(C`Module::Pluggable\*(C'\fR is a simple framework to create modules that accept
pluggable sub-modules.
.IP "\(bu" 4
\&\f(CW\*(C`Module::Load::Conditional\*(C'\fR provides simple ways to query and possibly
load installed modules.
.IP "\(bu" 4
\&\f(CW\*(C`Time::Piece\*(C'\fR provides an object oriented interface to time functions,
overriding the built-ins \fIlocaltime()\fR and \fIgmtime()\fR.
.IP "\(bu" 4
\&\f(CW\*(C`IPC::Cmd\*(C'\fR helps to find and run external commands, possibly
interactively.
.IP "\(bu" 4
\&\f(CW\*(C`File::Fetch\*(C'\fR provide a simple generic file fetching mechanism.
.IP "\(bu" 4
\&\f(CW\*(C`Log::Message\*(C'\fR and \f(CW\*(C`Log::Message::Simple\*(C'\fR are used by the log facility
of \f(CW\*(C`CPANPLUS\*(C'\fR.
.IP "\(bu" 4
\&\f(CW\*(C`Archive::Extract\*(C'\fR is a generic archive extraction mechanism
for \fI.tar\fR (plain, gzipped or bzipped) or \fI.zip\fR files.
.IP "\(bu" 4
\&\f(CW\*(C`CPANPLUS\*(C'\fR provides an \s-1API\s0 and a command-line tool to access the \s-1CPAN\s0
mirrors.
.IP "\(bu" 4
\&\f(CW\*(C`Pod::Escapes\*(C'\fR provides utilities that are useful in decoding Pod
E<...> sequences.
.IP "\(bu" 4
\&\f(CW\*(C`Pod::Simple\*(C'\fR is now the backend for several of the Pod-related modules
included with Perl.
.SS "Selected Changes to Core Modules"
.IX Subsection "Selected Changes to Core Modules"
.ie n .IP """Attribute::Handlers""" 4
.el .IP "\f(CWAttribute::Handlers\fR" 4
.IX Item "Attribute::Handlers"
\&\f(CW\*(C`Attribute::Handlers\*(C'\fR can now report the caller's file and line number.
(David Feldman)
.Sp
All interpreted attributes are now passed as array references. (Damian
Conway)
.ie n .IP """B::Lint""" 4
.el .IP "\f(CWB::Lint\fR" 4
.IX Item "B::Lint"
\&\f(CW\*(C`B::Lint\*(C'\fR is now based on \f(CW\*(C`Module::Pluggable\*(C'\fR, and so can be extended
with plugins. (Joshua ben Jore)
.ie n .IP """B""" 4
.el .IP "\f(CWB\fR" 4
.IX Item "B"
It's now possible to access the lexical pragma hints (\f(CW\*(C`%^H\*(C'\fR) by using the
method \fIB::COP::hints_hash()\fR. It returns a \f(CW\*(C`B::RHE\*(C'\fR object, which in turn
can be used to get a hash reference via the method \fIB::RHE::HASH()\fR. (Joshua
ben Jore)
.ie n .IP """Thread""" 4
.el .IP "\f(CWThread\fR" 4
.IX Item "Thread"
As the old 5005thread threading model has been removed, in favor of the
ithreads scheme, the \f(CW\*(C`Thread\*(C'\fR module is now a compatibility wrapper, to
be used in old code only. It has been removed from the default list of
dynamic extensions.
.SH "Utility Changes"
.IX Header "Utility Changes"
.IP "perl \-d" 4
.IX Item "perl -d"
The Perl debugger can now save all debugger commands for sourcing later;
notably, it can now emulate stepping backwards, by restarting and
rerunning all bar the last command from a saved command history.
.Sp
It can also display the parent inheritance tree of a given class, with the
\&\f(CW\*(C`i\*(C'\fR command.
.IP "ptar" 4
.IX Item "ptar"
\&\f(CW\*(C`ptar\*(C'\fR is a pure perl implementation of \f(CW\*(C`tar\*(C'\fR that comes with
\&\f(CW\*(C`Archive::Tar\*(C'\fR.
.IP "ptardiff" 4
.IX Item "ptardiff"
\&\f(CW\*(C`ptardiff\*(C'\fR is a small utility used to generate a diff between the contents
of a tar archive and a directory tree. Like \f(CW\*(C`ptar\*(C'\fR, it comes with
\&\f(CW\*(C`Archive::Tar\*(C'\fR.
.IP "shasum" 4
.IX Item "shasum"
\&\f(CW\*(C`shasum\*(C'\fR is a command-line utility, used to print or to check \s-1SHA\s0
digests. It comes with the new \f(CW\*(C`Digest::SHA\*(C'\fR module.
.IP "corelist" 4
.IX Item "corelist"
The \f(CW\*(C`corelist\*(C'\fR utility is now installed with perl (see \*(L"New modules\*(R"
above).
.IP "h2ph and h2xs" 4
.IX Item "h2ph and h2xs"
\&\f(CW\*(C`h2ph\*(C'\fR and \f(CW\*(C`h2xs\*(C'\fR have been made more robust with regard to
\&\*(L"modern\*(R" C code.
.Sp
\&\f(CW\*(C`h2xs\*(C'\fR implements a new option \f(CW\*(C`\-\-use\-xsloader\*(C'\fR to force use of
\&\f(CW\*(C`XSLoader\*(C'\fR even in backwards compatible modules.
.Sp
The handling of authors' names that had apostrophes has been fixed.
.Sp
Any enums with negative values are now skipped.
.IP "perlivp" 4
.IX Item "perlivp"
\&\f(CW\*(C`perlivp\*(C'\fR no longer checks for \fI*.ph\fR files by default.  Use the new \f(CW\*(C`\-a\*(C'\fR
option to run \fIall\fR tests.
.IP "find2perl" 4
.IX Item "find2perl"
\&\f(CW\*(C`find2perl\*(C'\fR now assumes \f(CW\*(C`\-print\*(C'\fR as a default action. Previously, it
needed to be specified explicitly.
.Sp
Several bugs have been fixed in \f(CW\*(C`find2perl\*(C'\fR, regarding \f(CW\*(C`\-exec\*(C'\fR and
\&\f(CW\*(C`\-eval\*(C'\fR. Also the options \f(CW\*(C`\-path\*(C'\fR, \f(CW\*(C`\-ipath\*(C'\fR and \f(CW\*(C`\-iname\*(C'\fR have been
added.
.IP "config_data" 4
.IX Item "config_data"
\&\f(CW\*(C`config_data\*(C'\fR is a new utility that comes with \f(CW\*(C`Module::Build\*(C'\fR. It
provides a command-line interface to the configuration of Perl modules
that use Module::Build's framework of configurability (that is,
\&\f(CW*::ConfigData\fR modules that contain local configuration information for
their parent modules.)
.IP "cpanp" 4
.IX Item "cpanp"
\&\f(CW\*(C`cpanp\*(C'\fR, the \s-1CPANPLUS\s0 shell, has been added. (\f(CW\*(C`cpanp\-run\-perl\*(C'\fR, a
helper for \s-1CPANPLUS\s0 operation, has been added too, but isn't intended for
direct use).
.IP "cpan2dist" 4
.IX Item "cpan2dist"
\&\f(CW\*(C`cpan2dist\*(C'\fR is a new utility that comes with \s-1CPANPLUS\s0. It's a tool to
create distributions (or packages) from \s-1CPAN\s0 modules.
.IP "pod2html" 4
.IX Item "pod2html"
The output of \f(CW\*(C`pod2html\*(C'\fR has been enhanced to be more customizable via
\&\s-1CSS\s0. Some formatting problems were also corrected. (Jari Aalto)
.SH "New Documentation"
.IX Header "New Documentation"
The perlpragma manpage documents how to write one's own lexical
pragmas in pure Perl (something that is possible starting with 5.9.4).
.PP
The new perlglossary manpage is a glossary of terms used in the Perl
documentation, technical and otherwise, kindly provided by O'Reilly Media,
Inc.
.PP
The perlreguts manpage, courtesy of Yves Orton, describes internals of the
Perl regular expression engine.
.PP
The perlreapi manpage describes the interface to the perl interpreter
used to write pluggable regular expression engines (by \*(AEvar Arnfjo\*:r\*(d-
Bjarmason).
.PP
The perlunitut manpage is an tutorial for programming with Unicode and
string encodings in Perl, courtesy of Juerd Waalboer.
.PP
A new manual page, perlunifaq (the Perl Unicode \s-1FAQ\s0), has been added
(Juerd Waalboer).
.PP
The perlcommunity manpage gives a description of the Perl community
on the Internet and in real life. (Edgar \*(L"Trizor\*(R" Bering)
.PP
The \s-1CORE\s0 manual page documents the \f(CW\*(C`CORE::\*(C'\fR namespace. (Tels)
.PP
The long-existing feature of \f(CW\*(C`/(?{...})/\*(C'\fR regexps setting \f(CW$_\fR and \fIpos()\fR
is now documented.
.SH "Performance Enhancements"
.IX Header "Performance Enhancements"
.SS "In-place sorting"
.IX Subsection "In-place sorting"
Sorting arrays in place (\f(CW\*(C`@a = sort @a\*(C'\fR) is now optimized to avoid
making a temporary copy of the array.
.PP
Likewise, \f(CW\*(C`reverse sort ...\*(C'\fR is now optimized to sort in reverse,
avoiding the generation of a temporary intermediate list.
.SS "Lexical array access"
.IX Subsection "Lexical array access"
Access to elements of lexical arrays via a numeric constant between 0 and
255 is now faster. (This used to be only the case for global arrays.)
.SS "XS-assisted \s-1SWASHGET\s0"
.IX Subsection "XS-assisted SWASHGET"
Some pure-perl code that perl was using to retrieve Unicode properties and
transliteration mappings has been reimplemented in \s-1XS\s0.
.SS "Constant subroutines"
.IX Subsection "Constant subroutines"
The interpreter internals now support a far more memory efficient form of
inlineable constants. Storing a reference to a constant value in a symbol
table is equivalent to a full typeglob referencing a constant subroutine,
but using about 400 bytes less memory. This proxy constant subroutine is
automatically upgraded to a real typeglob with subroutine if necessary.
The approach taken is analogous to the existing space optimisation for
subroutine stub declarations, which are stored as plain scalars in place
of the full typeglob.
.PP
Several of the core modules have been converted to use this feature for
their system dependent constants \- as a result \f(CW\*(C`use POSIX;\*(C'\fR now takes about
200K less memory.
.ie n .SS """PERL_DONT_CREATE_GVSV"""
.el .SS "\f(CWPERL_DONT_CREATE_GVSV\fP"
.IX Subsection "PERL_DONT_CREATE_GVSV"
The new compilation flag \f(CW\*(C`PERL_DONT_CREATE_GVSV\*(C'\fR, introduced as an option
in perl 5.8.8, is turned on by default in perl 5.9.3. It prevents perl
from creating an empty scalar with every new typeglob. See perl589delta
for details.
.SS "Weak references are cheaper"
.IX Subsection "Weak references are cheaper"
Weak reference creation is now \fIO(1)\fR rather than \fIO(n)\fR, courtesy of
Nicholas Clark. Weak reference deletion remains \fIO(n)\fR, but if deletion only
happens at program exit, it may be skipped completely.
.SS "\fIsort()\fP enhancements"
.IX Subsection "sort() enhancements"
Salvador Fandin\*~o provided improvements to reduce the memory usage of \f(CW\*(C`sort\*(C'\fR
and to speed up some cases.
.SS "Memory optimisations"
.IX Subsection "Memory optimisations"
Several internal data structures (typeglobs, GVs, CVs, formats) have been
restructured to use less memory. (Nicholas Clark)
.SS "\s-1UTF\-8\s0 cache optimisation"
.IX Subsection "UTF-8 cache optimisation"
The \s-1UTF\-8\s0 caching code is now more efficient, and used more often.
(Nicholas Clark)
.SS "Sloppy stat on Windows"
.IX Subsection "Sloppy stat on Windows"
On Windows, perl's \fIstat()\fR function normally opens the file to determine
the link count and update attributes that may have been changed through
hard links. Setting ${^WIN32_SLOPPY_STAT} to a true value speeds up
\&\fIstat()\fR by not performing this operation. (Jan Dubois)
.SS "Regular expressions optimisations"
.IX Subsection "Regular expressions optimisations"
.IP "Engine de-recursivised" 4
.IX Item "Engine de-recursivised"
The regular expression engine is no longer recursive, meaning that
patterns that used to overflow the stack will either die with useful
explanations, or run to completion, which, since they were able to blow
the stack before, will likely take a very long time to happen. If you were
experiencing the occasional stack overflow (or segfault) and upgrade to
discover that now perl apparently hangs instead, look for a degenerate
regex. (Dave Mitchell)
.IP "Single char char-classes treated as literals" 4
.IX Item "Single char char-classes treated as literals"
Classes of a single character are now treated the same as if the character
had been used as a literal, meaning that code that uses char-classes as an
escaping mechanism will see a speedup. (Yves Orton)
.IP "Trie optimisation of literal string alternations" 4
.IX Item "Trie optimisation of literal string alternations"
Alternations, where possible, are optimised into more efficient matching
structures. String literal alternations are merged into a trie and are
matched simultaneously.  This means that instead of O(N) time for matching
N alternations at a given point, the new code performs in O(1) time.
A new special variable, ${^RE_TRIE_MAXBUF}, has been added to fine-tune
this optimization. (Yves Orton)
.Sp
\&\fBNote:\fR Much code exists that works around perl's historic poor
performance on alternations. Often the tricks used to do so will disable
the new optimisations. Hopefully the utility modules used for this purpose
will be educated about these new optimisations.
.IP "Aho-Corasick start-point optimisation" 4
.IX Item "Aho-Corasick start-point optimisation"
When a pattern starts with a trie-able alternation and there aren't
better optimisations available, the regex engine will use Aho-Corasick
matching to find the start point. (Yves Orton)
.SH "Installation and Configuration Improvements"
.IX Header "Installation and Configuration Improvements"
.SS "Configuration improvements"
.IX Subsection "Configuration improvements"
.ie n .IP """\-Dusesitecustomize""" 4
.el .IP "\f(CW\-Dusesitecustomize\fR" 4
.IX Item "-Dusesitecustomize"
Run-time customization of \f(CW@INC\fR can be enabled by passing the
\&\f(CW\*(C`\-Dusesitecustomize\*(C'\fR flag to Configure. When enabled, this will make perl
run \fI\f(CI$sitelibexp\fI/sitecustomize.pl\fR before anything else.  This script can
then be set up to add additional entries to \f(CW@INC\fR.
.IP "Relocatable installations" 4
.IX Item "Relocatable installations"
There is now Configure support for creating a relocatable perl tree. If
you Configure with \f(CW\*(C`\-Duserelocatableinc\*(C'\fR, then the paths in \f(CW@INC\fR (and
everything else in \f(CW%Config\fR) can be optionally located via the path of the
perl executable.
.Sp
That means that, if the string \f(CW".../"\fR is found at the start of any
path, it's substituted with the directory of $^X. So, the relocation can
be configured on a per-directory basis, although the default with
\&\f(CW\*(C`\-Duserelocatableinc\*(C'\fR is that everything is relocated. The initial
install is done to the original configured prefix.
.IP "\fIstrlcat()\fR and \fIstrlcpy()\fR" 4
.IX Item "strlcat() and strlcpy()"
The configuration process now detects whether \fIstrlcat()\fR and \fIstrlcpy()\fR are
available.  When they are not available, perl's own version is used (from
Russ Allbery's public domain implementation).  Various places in the perl
interpreter now use them. (Steve Peters)
.ie n .IP """d_pseudofork"" and ""d_printf_format_null""" 4
.el .IP "\f(CWd_pseudofork\fR and \f(CWd_printf_format_null\fR" 4
.IX Item "d_pseudofork and d_printf_format_null"
A new configuration variable, available as \f(CW$Config{d_pseudofork}\fR in
the Config module, has been added, to distinguish real \fIfork()\fR support
from fake pseudofork used on Windows platforms.
.Sp
A new configuration variable, \f(CW\*(C`d_printf_format_null\*(C'\fR, has been added, 
to see if printf-like formats are allowed to be \s-1NULL\s0.
.IP "Configure help" 4
.IX Item "Configure help"
\&\f(CW\*(C`Configure \-h\*(C'\fR has been extended with the most commonly used options.
.SS "Compilation improvements"
.IX Subsection "Compilation improvements"
.IP "Parallel build" 4
.IX Item "Parallel build"
Parallel makes should work properly now, although there may still be problems
if \f(CW\*(C`make test\*(C'\fR is instructed to run in parallel.
.IP "Borland's compilers support" 4
.IX Item "Borland's compilers support"
Building with Borland's compilers on Win32 should work more smoothly. In
particular Steve Hay has worked to side step many warnings emitted by their
compilers and at least one C compiler internal error.
.IP "Static build on Windows" 4
.IX Item "Static build on Windows"
Perl extensions on Windows now can be statically built into the Perl \s-1DLL\s0.
.Sp
Also, it's now possible to build a \f(CW\*(C`perl\-static.exe\*(C'\fR that doesn't depend
on the Perl \s-1DLL\s0 on Win32. See the Win32 makefiles for details.
(Vadim Konovalov)
.IP "ppport.h files" 4
.IX Item "ppport.h files"
All \fIppport.h\fR files in the \s-1XS\s0 modules bundled with perl are now
autogenerated at build time. (Marcus Holland-Moritz)
.IP "\*(C+ compatibility" 4
.IX Item " compatibility"
Efforts have been made to make perl and the core \s-1XS\s0 modules compilable
with various \*(C+ compilers (although the situation is not perfect with
some of the compilers on some of the platforms tested.)
.IP "Support for Microsoft 64\-bit compiler" 4
.IX Item "Support for Microsoft 64-bit compiler"
Support for building perl with Microsoft's 64\-bit compiler has been
improved. (ActiveState)
.IP "Visual \*(C+" 4
.IX Item "Visual "
Perl can now be compiled with Microsoft Visual \*(C+ 2005 (and 2008 Beta 2).
.IP "Win32 builds" 4
.IX Item "Win32 builds"
All win32 builds (MS-Win, WinCE) have been merged and cleaned up.
.SS "Installation improvements"
.IX Subsection "Installation improvements"
.IP "Module auxiliary files" 4
.IX Item "Module auxiliary files"
\&\s-1README\s0 files and changelogs for \s-1CPAN\s0 modules bundled with perl are no
longer installed.
.SS "New Or Improved Platforms"
.IX Subsection "New Or Improved Platforms"
Perl has been reported to work on Symbian \s-1OS\s0. See perlsymbian for more
information.
.PP
Many improvements have been made towards making Perl work correctly on
z/OS.
.PP
Perl has been reported to work on DragonFlyBSD and MidnightBSD.
.PP
Perl has also been reported to work on NexentaOS
( http://www.gnusolaris.org/ ).
.PP
The \s-1VMS\s0 port has been improved. See perlvms.
.PP
Support for Cray \s-1XT4\s0 Catamount/Qk has been added. See
\&\fIhints/catamount.sh\fR in the source code distribution for more
information.
.PP
Vendor patches have been merged for RedHat and Gentoo.
.PP
\&\fIDynaLoader::dl_unload_file()\fR now works on Windows.
.SH "Selected Bug Fixes"
.IX Header "Selected Bug Fixes"
.IP "strictures in regexp-eval blocks" 4
.IX Item "strictures in regexp-eval blocks"
\&\f(CW\*(C`strict\*(C'\fR wasn't in effect in regexp-eval blocks (\f(CW\*(C`/(?{...})/\*(C'\fR).
.IP "Calling \fICORE::require()\fR" 4
.IX Item "Calling CORE::require()"
\&\fICORE::require()\fR and \fICORE::do()\fR were always parsed as \fIrequire()\fR and \fIdo()\fR
when they were overridden. This is now fixed.
.IP "Subscripts of slices" 4
.IX Item "Subscripts of slices"
You can now use a non-arrowed form for chained subscripts after a list
slice, like in:
.Sp
.Vb 1
\&    ({foo => "bar"})[0]{foo}
.Ve
.Sp
This used to be a syntax error; a \f(CW\*(C`\->\*(C'\fR was required.
.ie n .IP """no warnings \*(Aqcategory\*(Aq"" works correctly with \-w" 4
.el .IP "\f(CWno warnings \*(Aqcategory\*(Aq\fR works correctly with \-w" 4
.IX Item "no warnings category works correctly with -w"
Previously when running with warnings enabled globally via \f(CW\*(C`\-w\*(C'\fR, selective
disabling of specific warning categories would actually turn off all warnings.
This is now fixed; now \f(CW\*(C`no warnings \*(Aqio\*(Aq;\*(C'\fR will only turn off warnings in the
\&\f(CW\*(C`io\*(C'\fR class. Previously it would erroneously turn off all warnings.
.IP "threads improvements" 4
.IX Item "threads improvements"
Several memory leaks in ithreads were closed. Also, ithreads were made
less memory-intensive.
.Sp
\&\f(CW\*(C`threads\*(C'\fR is now a dual-life module, also available on \s-1CPAN\s0. It has been
expanded in many ways. A \fIkill()\fR method is available for thread signalling.
One can get thread status, or the list of running or joinable threads.
.Sp
A new \f(CW\*(C`threads\->exit()\*(C'\fR method is used to exit from the application
(this is the default for the main thread) or from the current thread only
(this is the default for all other threads). On the other hand, the \fIexit()\fR
built-in now always causes the whole application to terminate. (Jerry
D. Hedden)
.IP "\fIchr()\fR and negative values" 4
.IX Item "chr() and negative values"
\&\fIchr()\fR on a negative value now gives \f(CW\*(C`\ex{FFFD}\*(C'\fR, the Unicode replacement
character, unless when the \f(CW\*(C`bytes\*(C'\fR pragma is in effect, where the low
eight bits of the value are used.
.IP "\s-1PERL5SHELL\s0 and tainting" 4
.IX Item "PERL5SHELL and tainting"
On Windows, the \s-1PERL5SHELL\s0 environment variable is now checked for
taintedness. (Rafael Garcia-Suarez)
.IP "Using *FILE{\s-1IO\s0}" 4
.IX Item "Using *FILE{IO}"
\&\f(CW\*(C`stat()\*(C'\fR and \f(CW\*(C`\-X\*(C'\fR filetests now treat *FILE{\s-1IO\s0} filehandles like *FILE
filehandles. (Steve Peters)
.IP "Overloading and reblessing" 4
.IX Item "Overloading and reblessing"
Overloading now works when references are reblessed into another class.
Internally, this has been implemented by moving the flag for \*(L"overloading\*(R"
from the reference to the referent, which logically is where it should
always have been. (Nicholas Clark)
.IP "Overloading and \s-1UTF\-8\s0" 4
.IX Item "Overloading and UTF-8"
A few bugs related to \s-1UTF\-8\s0 handling with objects that have
stringification overloaded have been fixed. (Nicholas Clark)
.IP "eval memory leaks fixed" 4
.IX Item "eval memory leaks fixed"
Traditionally, \f(CW\*(C`eval \*(Aqsyntax error\*(Aq\*(C'\fR has leaked badly. Many (but not all)
of these leaks have now been eliminated or reduced. (Dave Mitchell)
.IP "Random device on Windows" 4
.IX Item "Random device on Windows"
In previous versions, perl would read the file \fI/dev/urandom\fR if it
existed when seeding its random number generator.  That file is unlikely
to exist on Windows, and if it did would probably not contain appropriate
data, so perl no longer tries to read it on Windows. (Alex Davies)
.IP "\s-1PERLIO_DEBUG\s0" 4
.IX Item "PERLIO_DEBUG"
The \f(CW\*(C`PERLIO_DEBUG\*(C'\fR environment variable no longer has any effect for
setuid scripts and for scripts run with \fB\-T\fR.
.Sp
Moreover, with a thread-enabled perl, using \f(CW\*(C`PERLIO_DEBUG\*(C'\fR could lead to
an internal buffer overflow. This has been fixed.
.IP "PerlIO::scalar and read-only scalars" 4
.IX Item "PerlIO::scalar and read-only scalars"
PerlIO::scalar will now prevent writing to read-only scalars. Moreover,
\&\fIseek()\fR is now supported with PerlIO::scalar\-based filehandles, the
underlying string being zero-filled as needed. (Rafael, Jarkko Hietaniemi)
.IP "\fIstudy()\fR and \s-1UTF\-8\s0" 4
.IX Item "study() and UTF-8"
\&\fIstudy()\fR never worked for \s-1UTF\-8\s0 strings, but could lead to false results.
It's now a no-op on \s-1UTF\-8\s0 data. (Yves Orton)
.IP "Critical signals" 4
.IX Item "Critical signals"
The signals \s-1SIGILL\s0, \s-1SIGBUS\s0 and \s-1SIGSEGV\s0 are now always delivered in an
\&\*(L"unsafe\*(R" manner (contrary to other signals, that are deferred until the
perl interpreter reaches a reasonably stable state; see
\&\*(L"Deferred Signals (Safe Signals)\*(R" in perlipc). (Rafael)
.ie n .IP "@INC\-hook fix" 4
.el .IP "\f(CW@INC\fR\-hook fix" 4
.IX Item "@INC-hook fix"
When a module or a file is loaded through an \f(CW@INC\fR\-hook, and when this hook
has set a filename entry in \f(CW%INC\fR, _\|_FILE_\|_ is now set for this module
accordingly to the contents of that \f(CW%INC\fR entry. (Rafael)
.ie n .IP """\-t"" switch fix" 4
.el .IP "\f(CW\-t\fR switch fix" 4
.IX Item "-t switch fix"
The \f(CW\*(C`\-w\*(C'\fR and \f(CW\*(C`\-t\*(C'\fR switches can now be used together without messing
up which categories of warnings are activated. (Rafael)
.IP "Duping \s-1UTF\-8\s0 filehandles" 4
.IX Item "Duping UTF-8 filehandles"
Duping a filehandle which has the \f(CW\*(C`:utf8\*(C'\fR PerlIO layer set will now
properly carry that layer on the duped filehandle. (Rafael)
.IP "Localisation of hash elements" 4
.IX Item "Localisation of hash elements"
Localizing a hash element whose key was given as a variable didn't work
correctly if the variable was changed while the \fIlocal()\fR was in effect (as
in \f(CW\*(C`local $h{$x}; ++$x\*(C'\fR). (Bo Lindbergh)
.SH "New or Changed Diagnostics"
.IX Header "New or Changed Diagnostics"
.IP "Use of uninitialized value" 4
.IX Item "Use of uninitialized value"
Perl will now try to tell you the name of the variable (if any) that was
undefined.
.IP "Deprecated use of \fImy()\fR in false conditional" 4
.IX Item "Deprecated use of my() in false conditional"
A new deprecation warning, \fIDeprecated use of \fImy()\fI in false conditional\fR,
has been added, to warn against the use of the dubious and deprecated
construct
.Sp
.Vb 1
\&    my $x if 0;
.Ve
.Sp
See perldiag. Use \f(CW\*(C`state\*(C'\fR variables instead.
.IP "!=~ should be !~" 4
.IX Item "!=~ should be !~"
A new warning, \f(CW\*(C`!=~ should be !~\*(C'\fR, is emitted to prevent this misspelling
of the non-matching operator.
.IP "Newline in left-justified string" 4
.IX Item "Newline in left-justified string"
The warning \fINewline in left-justified string\fR has been removed.
.ie n .IP "Too late for ""\-T"" option" 4
.el .IP "Too late for ``\-T'' option" 4
.IX Item "Too late for -T option"
The error \fIToo late for \*(L"\-T\*(R" option\fR has been reformulated to be more
descriptive.
.ie n .IP """%s"" variable %s masks earlier declaration" 4
.el .IP "``%s'' variable \f(CW%s\fR masks earlier declaration" 4
.IX Item "%s variable %s masks earlier declaration"
This warning is now emitted in more consistent cases; in short, when one
of the declarations involved is a \f(CW\*(C`my\*(C'\fR variable:
.Sp
.Vb 3
\&    my $x;   my $x;     # warns
\&    my $x;  our $x;     # warns
\&    our $x;  my $x;     # warns
.Ve
.Sp
On the other hand, the following:
.Sp
.Vb 1
\&    our $x; our $x;
.Ve
.Sp
now gives a \f(CW\*(C`"our" variable %s redeclared\*(C'\fR warning.
.IP "\fIreaddir()\fR/\fIclosedir()\fR/etc. attempted on invalid dirhandle" 4
.IX Item "readdir()/closedir()/etc. attempted on invalid dirhandle"
These new warnings are now emitted when a dirhandle is used but is
either closed or not really a dirhandle.
.ie n .IP "Opening dirhandle/filehandle %s also as a file/directory" 4
.el .IP "Opening dirhandle/filehandle \f(CW%s\fR also as a file/directory" 4
.IX Item "Opening dirhandle/filehandle %s also as a file/directory"
Two deprecation warnings have been added: (Rafael)
.Sp
.Vb 2
\&    Opening dirhandle %s also as a file
\&    Opening filehandle %s also as a directory
.Ve
.IP "Use of \-P is deprecated" 4
.IX Item "Use of -P is deprecated"
Perl's command-line switch \f(CW\*(C`\-P\*(C'\fR is now deprecated.
.IP "v\-string in use/require is non-portable" 4
.IX Item "v-string in use/require is non-portable"
Perl will warn you against potential backwards compatibility problems with
the \f(CW\*(C`use VERSION\*(C'\fR syntax.
.IP "perl \-V" 4
.IX Item "perl -V"
\&\f(CW\*(C`perl \-V\*(C'\fR has several improvements, making it more useable from shell
scripts to get the value of configuration variables. See perlrun for
details.
.SH "Changed Internals"
.IX Header "Changed Internals"
In general, the source code of perl has been refactored, tidied up,
and optimized in many places. Also, memory management and allocation
has been improved in several points.
.PP
When compiling the perl core with gcc, as many gcc warning flags are
turned on as is possible on the platform.  (This quest for cleanliness
doesn't extend to \s-1XS\s0 code because we cannot guarantee the tidiness of
code we didn't write.)  Similar strictness flags have been added or
tightened for various other C compilers.
.SS "Reordering of SVt_* constants"
.IX Subsection "Reordering of SVt_* constants"
The relative ordering of constants that define the various types of \f(CW\*(C`SV\*(C'\fR
have changed; in particular, \f(CW\*(C`SVt_PVGV\*(C'\fR has been moved before \f(CW\*(C`SVt_PVLV\*(C'\fR,
\&\f(CW\*(C`SVt_PVAV\*(C'\fR, \f(CW\*(C`SVt_PVHV\*(C'\fR and \f(CW\*(C`SVt_PVCV\*(C'\fR.  This is unlikely to make any
difference unless you have code that explicitly makes assumptions about that
ordering. (The inheritance hierarchy of \f(CW\*(C`B::*\*(C'\fR objects has been changed
to reflect this.)
.SS "Elimination of SVt_PVBM"
.IX Subsection "Elimination of SVt_PVBM"
Related to this, the internal type \f(CW\*(C`SVt_PVBM\*(C'\fR has been removed. This
dedicated type of \f(CW\*(C`SV\*(C'\fR was used by the \f(CW\*(C`index\*(C'\fR operator and parts of the
regexp engine to facilitate fast Boyer-Moore matches. Its use internally has
been replaced by \f(CW\*(C`SV\*(C'\fRs of type \f(CW\*(C`SVt_PVGV\*(C'\fR.
.SS "New type SVt_BIND"
.IX Subsection "New type SVt_BIND"
A new type \f(CW\*(C`SVt_BIND\*(C'\fR has been added, in readiness for the project to
implement Perl 6 on 5. There deliberately is no implementation yet, and
they cannot yet be created or destroyed.
.SS "Removal of \s-1CPP\s0 symbols"
.IX Subsection "Removal of CPP symbols"
The C preprocessor symbols \f(CW\*(C`PERL_PM_APIVERSION\*(C'\fR and
\&\f(CW\*(C`PERL_XS_APIVERSION\*(C'\fR, which were supposed to give the version number of
the oldest perl binary-compatible (resp. source-compatible) with the
present one, were not used, and sometimes had misleading values. They have
been removed.
.SS "Less space is used by ops"
.IX Subsection "Less space is used by ops"
The \f(CW\*(C`BASEOP\*(C'\fR structure now uses less space. The \f(CW\*(C`op_seq\*(C'\fR field has been
removed and replaced by a single bit bit-field \f(CW\*(C`op_opt\*(C'\fR. \f(CW\*(C`op_type\*(C'\fR is now 9
bits long. (Consequently, the \f(CW\*(C`B::OP\*(C'\fR class doesn't provide an \f(CW\*(C`seq\*(C'\fR
method anymore.)
.SS "New parser"
.IX Subsection "New parser"
perl's parser is now generated by bison (it used to be generated by
byacc.) As a result, it seems to be a bit more robust.
.PP
Also, Dave Mitchell improved the lexer debugging output under \f(CW\*(C`\-DT\*(C'\fR.
.ie n .SS "Use of ""const"""
.el .SS "Use of \f(CWconst\fP"
.IX Subsection "Use of const"
Andy Lester supplied many improvements to determine which function
parameters and local variables could actually be declared \f(CW\*(C`const\*(C'\fR to the C
compiler. Steve Peters provided new \f(CW*_set\fR macros and reworked the core to
use these rather than assigning to macros in \s-1LVALUE\s0 context.
.SS "Mathoms"
.IX Subsection "Mathoms"
A new file, \fImathoms.c\fR, has been added. It contains functions that are
no longer used in the perl core, but that remain available for binary or
source compatibility reasons. However, those functions will not be
compiled in if you add \f(CW\*(C`\-DNO_MATHOMS\*(C'\fR in the compiler flags.
.ie n .SS """AvFLAGS"" has been removed"
.el .SS "\f(CWAvFLAGS\fP has been removed"
.IX Subsection "AvFLAGS has been removed"
The \f(CW\*(C`AvFLAGS\*(C'\fR macro has been removed.
.ie n .SS """av_*"" changes"
.el .SS "\f(CWav_*\fP changes"
.IX Subsection "av_* changes"
The \f(CW\*(C`av_*()\*(C'\fR functions, used to manipulate arrays, no longer accept null
\&\f(CW\*(C`AV*\*(C'\fR parameters.
.SS "$^H and %^H"
.IX Subsection "$^H and %^H"
The implementation of the special variables $^H and %^H has changed, to
allow implementing lexical pragmas in pure Perl.
.SS "B:: modules inheritance changed"
.IX Subsection "B:: modules inheritance changed"
The inheritance hierarchy of \f(CW\*(C`B::\*(C'\fR modules has changed; \f(CW\*(C`B::NV\*(C'\fR now
inherits from \f(CW\*(C`B::SV\*(C'\fR (it used to inherit from \f(CW\*(C`B::IV\*(C'\fR).
.SS "Anonymous hash and array constructors"
.IX Subsection "Anonymous hash and array constructors"
The anonymous hash and array constructors now take 1 op in the optree
instead of 3, now that pp_anonhash and pp_anonlist return a reference to
an hash/array when the op is flagged with OPf_SPECIAL. (Nicholas Clark)
.SH "Known Problems"
.IX Header "Known Problems"
There's still a remaining problem in the implementation of the lexical
\&\f(CW$_\fR: it doesn't work inside \f(CW\*(C`/(?{...})/\*(C'\fR blocks. (See the \s-1TODO\s0 test in
\&\fIt/op/mydef.t\fR.)
.PP
Stacked filetest operators won't work when the \f(CW\*(C`filetest\*(C'\fR pragma is in
effect, because they rely on the \fIstat()\fR buffer \f(CW\*(C`_\*(C'\fR being populated, and
filetest bypasses \fIstat()\fR.
.SS "\s-1UTF\-8\s0 problems"
.IX Subsection "UTF-8 problems"
The handling of Unicode still is unclean in several places, where it's
dependent on whether a string is internally flagged as \s-1UTF\-8\s0. This will
be made more consistent in perl 5.12, but that won't be possible without
a certain amount of backwards incompatibility.
.SH "Platform Specific Problems"
.IX Header "Platform Specific Problems"
When compiled with g++ and thread support on Linux, it's reported that the
\&\f(CW$!\fR stops working correctly. This is related to the fact that the glibc
provides two \fIstrerror_r\fR\|(3) implementation, and perl selects the wrong
one.
.SH "Reporting Bugs"
.IX Header "Reporting Bugs"
If you find what you think is a bug, you might check the articles
recently posted to the comp.lang.perl.misc newsgroup and the perl
bug database at http://rt.perl.org/rt3/ .  There may also be
information at http://www.perl.org/ , the Perl Home Page.
.PP
If you believe you have an unreported bug, please run the \fBperlbug\fR
program included with your release.  Be sure to trim your bug down
to a tiny but sufficient test case.  Your bug report, along with the
output of \f(CW\*(C`perl \-V\*(C'\fR, will be sent off to perlbug@perl.org to be
analysed by the Perl porting team.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
The \fIChanges\fR file and the perl590delta to perl595delta man pages for
exhaustive details on what changed.
.PP
The \fI\s-1INSTALL\s0\fR file for how to build Perl.
.PP
The \fI\s-1README\s0\fR file for general stuff.
.PP
The \fIArtistic\fR and \fICopying\fR files for copyright information.
                                                                                                                   osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perl5100delta5.18.1                          0100644 0001750 0001750 00000222127 12566207431 023542  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERL5100DELTA 1"
.TH PERL5100DELTA 1 "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perl5100delta \- what is new for perl 5.10.0
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document describes the differences between the 5.8.8 release and
the 5.10.0 release.
.PP
Many of the bug fixes in 5.10.0 were already seen in the 5.8.X maintenance
releases; they are not duplicated here and are documented in the set of
man pages named perl58[1\-8]?delta.
.SH "Core Enhancements"
.IX Header "Core Enhancements"
.ie n .SS "The ""feature"" pragma"
.el .SS "The \f(CWfeature\fP pragma"
.IX Subsection "The feature pragma"
The \f(CW\*(C`feature\*(C'\fR pragma is used to enable new syntax that would break Perl's
backwards-compatibility with older releases of the language. It's a lexical
pragma, like \f(CW\*(C`strict\*(C'\fR or \f(CW\*(C`warnings\*(C'\fR.
.PP
Currently the following new features are available: \f(CW\*(C`switch\*(C'\fR (adds a
switch statement), \f(CW\*(C`say\*(C'\fR (adds a \f(CW\*(C`say\*(C'\fR built-in function), and \f(CW\*(C`state\*(C'\fR
(adds a \f(CW\*(C`state\*(C'\fR keyword for declaring \*(L"static\*(R" variables). Those
features are described in their own sections of this document.
.PP
The \f(CW\*(C`feature\*(C'\fR pragma is also implicitly loaded when you require a minimal
perl version (with the \f(CW\*(C`use VERSION\*(C'\fR construct) greater than, or equal
to, 5.9.5. See feature for details.
.SS "New \fB\-E\fP command-line switch"
.IX Subsection "New -E command-line switch"
\&\fB\-E\fR is equivalent to \fB\-e\fR, but it implicitly enables all
optional features (like \f(CW\*(C`use feature ":5.10"\*(C'\fR).
.SS "Defined-or operator"
.IX Subsection "Defined-or operator"
A new operator \f(CW\*(C`//\*(C'\fR (defined-or) has been implemented.
The following expression:
.PP
.Vb 1
\&    $a // $b
.Ve
.PP
is merely equivalent to
.PP
.Vb 1
\&   defined $a ? $a : $b
.Ve
.PP
and the statement
.PP
.Vb 1
\&   $c //= $d;
.Ve
.PP
can now be used instead of
.PP
.Vb 1
\&   $c = $d unless defined $c;
.Ve
.PP
The \f(CW\*(C`//\*(C'\fR operator has the same precedence and associativity as \f(CW\*(C`||\*(C'\fR.
Special care has been taken to ensure that this operator Do What You Mean
while not breaking old code, but some edge cases involving the empty
regular expression may now parse differently.  See perlop for
details.
.SS "Switch and Smart Match operator"
.IX Subsection "Switch and Smart Match operator"
Perl 5 now has a switch statement. It's available when \f(CW\*(C`use feature
\&\*(Aqswitch\*(Aq\*(C'\fR is in effect. This feature introduces three new keywords,
\&\f(CW\*(C`given\*(C'\fR, \f(CW\*(C`when\*(C'\fR, and \f(CW\*(C`default\*(C'\fR:
.PP
.Vb 6
\&    given ($foo) {
\&        when (/^abc/) { $abc = 1; }
\&        when (/^def/) { $def = 1; }
\&        when (/^xyz/) { $xyz = 1; }
\&        default { $nothing = 1; }
\&    }
.Ve
.PP
A more complete description of how Perl matches the switch variable
against the \f(CW\*(C`when\*(C'\fR conditions is given in \*(L"Switch statements\*(R" in perlsyn.
.PP
This kind of match is called \fIsmart match\fR, and it's also possible to use
it outside of switch statements, via the new \f(CW\*(C`~~\*(C'\fR operator. See
\&\*(L"Smart matching in detail\*(R" in perlsyn.
.PP
This feature was contributed by Robin Houston.
.SS "Regular expressions"
.IX Subsection "Regular expressions"
.IP "Recursive Patterns" 4
.IX Item "Recursive Patterns"
It is now possible to write recursive patterns without using the \f(CW\*(C`(??{})\*(C'\fR
construct. This new way is more efficient, and in many cases easier to
read.
.Sp
Each capturing parenthesis can now be treated as an independent pattern
that can be entered by using the \f(CW\*(C`(?PARNO)\*(C'\fR syntax (\f(CW\*(C`PARNO\*(C'\fR standing for
\&\*(L"parenthesis number\*(R"). For example, the following pattern will match
nested balanced angle brackets:
.Sp
.Vb 10
\&    /
\&     ^                      # start of line
\&     (                      # start capture buffer 1
\&        <                   #   match an opening angle bracket
\&        (?:                 #   match one of:
\&            (?>             #     don\*(Aqt backtrack over the inside of this group
\&                [^<>]+      #       one or more non angle brackets
\&            )               #     end non backtracking group
\&        |                   #     ... or ...
\&            (?1)            #     recurse to bracket 1 and try it again
\&        )*                  #   0 or more times.
\&        >                   #   match a closing angle bracket
\&     )                      # end capture buffer one
\&     $                      # end of line
\&    /x
.Ve
.Sp
\&\s-1PCRE\s0 users should note that Perl's recursive regex feature allows
backtracking into a recursed pattern, whereas in \s-1PCRE\s0 the recursion is
atomic or \*(L"possessive\*(R" in nature.  As in the example above, you can
add (?>) to control this selectively.  (Yves Orton)
.IP "Named Capture Buffers" 4
.IX Item "Named Capture Buffers"
It is now possible to name capturing parenthesis in a pattern and refer to
the captured contents by name. The naming syntax is \f(CW\*(C`(?<NAME>....)\*(C'\fR.
It's possible to backreference to a named buffer with the \f(CW\*(C`\ek<NAME>\*(C'\fR
syntax. In code, the new magical hashes \f(CW\*(C`%+\*(C'\fR and \f(CW\*(C`%\-\*(C'\fR can be used to
access the contents of the capture buffers.
.Sp
Thus, to replace all doubled chars with a single copy, one could write
.Sp
.Vb 1
\&    s/(?<letter>.)\ek<letter>/$+{letter}/g
.Ve
.Sp
Only buffers with defined contents will be \*(L"visible\*(R" in the \f(CW\*(C`%+\*(C'\fR hash, so
it's possible to do something like
.Sp
.Vb 3
\&    foreach my $name (keys %+) {
\&        print "content of buffer \*(Aq$name\*(Aq is $+{$name}\en";
\&    }
.Ve
.Sp
The \f(CW\*(C`%\-\*(C'\fR hash is a bit more complete, since it will contain array refs
holding values from all capture buffers similarly named, if there should
be many of them.
.Sp
\&\f(CW\*(C`%+\*(C'\fR and \f(CW\*(C`%\-\*(C'\fR are implemented as tied hashes through the new module
\&\f(CW\*(C`Tie::Hash::NamedCapture\*(C'\fR.
.Sp
Users exposed to the .NET regex engine will find that the perl
implementation differs in that the numerical ordering of the buffers
is sequential, and not \*(L"unnamed first, then named\*(R". Thus in the pattern
.Sp
.Vb 1
\&   /(A)(?<B>B)(C)(?<D>D)/
.Ve
.Sp
\&\f(CW$1\fR will be 'A', \f(CW$2\fR will be 'B', \f(CW$3\fR will be 'C' and \f(CW$4\fR will be 'D' and not
\&\f(CW$1\fR is 'A', \f(CW$2\fR is 'C' and \f(CW$3\fR is 'B' and \f(CW$4\fR is 'D' that a .NET programmer
would expect. This is considered a feature. :\-) (Yves Orton)
.IP "Possessive Quantifiers" 4
.IX Item "Possessive Quantifiers"
Perl now supports the \*(L"possessive quantifier\*(R" syntax of the \*(L"atomic match\*(R"
pattern. Basically a possessive quantifier matches as much as it can and never
gives any back. Thus it can be used to control backtracking. The syntax is
similar to non-greedy matching, except instead of using a '?' as the modifier
the '+' is used. Thus \f(CW\*(C`?+\*(C'\fR, \f(CW\*(C`*+\*(C'\fR, \f(CW\*(C`++\*(C'\fR, \f(CW\*(C`{min,max}+\*(C'\fR are now legal
quantifiers. (Yves Orton)
.IP "Backtracking control verbs" 4
.IX Item "Backtracking control verbs"
The regex engine now supports a number of special-purpose backtrack
control verbs: (*THEN), (*PRUNE), (*MARK), (*SKIP), (*COMMIT), (*FAIL)
and (*ACCEPT). See perlre for their descriptions. (Yves Orton)
.IP "Relative backreferences" 4
.IX Item "Relative backreferences"
A new syntax \f(CW\*(C`\eg{N}\*(C'\fR or \f(CW\*(C`\egN\*(C'\fR where \*(L"N\*(R" is a decimal integer allows a
safer form of back-reference notation as well as allowing relative
backreferences. This should make it easier to generate and embed patterns
that contain backreferences. See \*(L"Capture buffers\*(R" in perlre. (Yves Orton)
.ie n .IP """\eK"" escape" 4
.el .IP "\f(CW\eK\fR escape" 4
.IX Item "K escape"
The functionality of Jeff Pinyan's module Regexp::Keep has been added to
the core. In regular expressions you can now use the special escape \f(CW\*(C`\eK\*(C'\fR
as a way to do something like floating length positive lookbehind. It is
also useful in substitutions like:
.Sp
.Vb 1
\&  s/(foo)bar/$1/g
.Ve
.Sp
that can now be converted to
.Sp
.Vb 1
\&  s/foo\eKbar//g
.Ve
.Sp
which is much more efficient. (Yves Orton)
.IP "Vertical and horizontal whitespace, and linebreak" 4
.IX Item "Vertical and horizontal whitespace, and linebreak"
Regular expressions now recognize the \f(CW\*(C`\ev\*(C'\fR and \f(CW\*(C`\eh\*(C'\fR escapes that match
vertical and horizontal whitespace, respectively. \f(CW\*(C`\eV\*(C'\fR and \f(CW\*(C`\eH\*(C'\fR
logically match their complements.
.Sp
\&\f(CW\*(C`\eR\*(C'\fR matches a generic linebreak, that is, vertical whitespace, plus
the multi-character sequence \f(CW"\ex0D\ex0A"\fR.
.ie n .SS """say()"""
.el .SS "\f(CWsay()\fP"
.IX Subsection "say()"
\&\fIsay()\fR is a new built-in, only available when \f(CW\*(C`use feature \*(Aqsay\*(Aq\*(C'\fR is in
effect, that is similar to \fIprint()\fR, but that implicitly appends a newline
to the printed string. See \*(L"say\*(R" in perlfunc. (Robin Houston)
.ie n .SS "Lexical $_"
.el .SS "Lexical \f(CW$_\fP"
.IX Subsection "Lexical $_"
The default variable \f(CW$_\fR can now be lexicalized, by declaring it like
any other lexical variable, with a simple
.PP
.Vb 1
\&    my $_;
.Ve
.PP
The operations that default on \f(CW$_\fR will use the lexically-scoped
version of \f(CW$_\fR when it exists, instead of the global \f(CW$_\fR.
.PP
In a \f(CW\*(C`map\*(C'\fR or a \f(CW\*(C`grep\*(C'\fR block, if \f(CW$_\fR was previously my'ed, then the
\&\f(CW$_\fR inside the block is lexical as well (and scoped to the block).
.PP
In a scope where \f(CW$_\fR has been lexicalized, you can still have access to
the global version of \f(CW$_\fR by using \f(CW$::_\fR, or, more simply, by
overriding the lexical declaration with \f(CW\*(C`our $_\*(C'\fR. (Rafael Garcia-Suarez)
.ie n .SS "The ""_"" prototype"
.el .SS "The \f(CW_\fP prototype"
.IX Subsection "The _ prototype"
A new prototype character has been added. \f(CW\*(C`_\*(C'\fR is equivalent to \f(CW\*(C`$\*(C'\fR but
defaults to \f(CW$_\fR if the corresponding argument isn't supplied (both \f(CW\*(C`$\*(C'\fR
and \f(CW\*(C`_\*(C'\fR denote a scalar). Due to the optional nature of the argument, 
you can only use it at the end of a prototype, or before a semicolon.
.PP
This has a small incompatible consequence: the \fIprototype()\fR function has
been adjusted to return \f(CW\*(C`_\*(C'\fR for some built-ins in appropriate cases (for
example, \f(CW\*(C`prototype(\*(AqCORE::rmdir\*(Aq)\*(C'\fR). (Rafael Garcia-Suarez)
.SS "\s-1UNITCHECK\s0 blocks"
.IX Subsection "UNITCHECK blocks"
\&\f(CW\*(C`UNITCHECK\*(C'\fR, a new special code block has been introduced, in addition to
\&\f(CW\*(C`BEGIN\*(C'\fR, \f(CW\*(C`CHECK\*(C'\fR, \f(CW\*(C`INIT\*(C'\fR and \f(CW\*(C`END\*(C'\fR.
.PP
\&\f(CW\*(C`CHECK\*(C'\fR and \f(CW\*(C`INIT\*(C'\fR blocks, while useful for some specialized purposes,
are always executed at the transition between the compilation and the
execution of the main program, and thus are useless whenever code is
loaded at runtime. On the other hand, \f(CW\*(C`UNITCHECK\*(C'\fR blocks are executed
just after the unit which defined them has been compiled. See perlmod
for more information. (Alex Gough)
.ie n .SS "New Pragma, ""mro"""
.el .SS "New Pragma, \f(CWmro\fP"
.IX Subsection "New Pragma, mro"
A new pragma, \f(CW\*(C`mro\*(C'\fR (for Method Resolution Order) has been added. It
permits to switch, on a per-class basis, the algorithm that perl uses to
find inherited methods in case of a multiple inheritance hierarchy. The
default \s-1MRO\s0 hasn't changed (\s-1DFS,\s0 for Depth First Search). Another \s-1MRO\s0 is
available: the C3 algorithm. See mro for more information.
(Brandon Black)
.PP
Note that, due to changes in the implementation of class hierarchy search,
code that used to undef the \f(CW*ISA\fR glob will most probably break. Anyway,
undef'ing \f(CW*ISA\fR had the side-effect of removing the magic on the \f(CW@ISA\fR
array and should not have been done in the first place. Also, the
cache \f(CW*::ISA::CACHE::\fR no longer exists; to force reset the \f(CW@ISA\fR cache,
you now need to use the \f(CW\*(C`mro\*(C'\fR \s-1API,\s0 or more simply to assign to \f(CW@ISA\fR
(e.g. with \f(CW\*(C`@ISA = @ISA\*(C'\fR).
.ie n .SS "\fIreaddir()\fP may return a ""short filename"" on Windows"
.el .SS "\fIreaddir()\fP may return a ``short filename'' on Windows"
.IX Subsection "readdir() may return a short filename on Windows"
The \fIreaddir()\fR function may return a \*(L"short filename\*(R" when the long
filename contains characters outside the \s-1ANSI\s0 codepage.  Similarly
\&\fICwd::cwd()\fR may return a short directory name, and \fIglob()\fR may return short
names as well.  On the \s-1NTFS\s0 file system these short names can always be
represented in the \s-1ANSI\s0 codepage.  This will not be true for all other file
system drivers; e.g. the \s-1FAT\s0 filesystem stores short filenames in the \s-1OEM\s0
codepage, so some files on \s-1FAT\s0 volumes remain unaccessible through the
\&\s-1ANSI\s0 APIs.
.PP
Similarly, $^X, \f(CW@INC\fR, and \f(CW$ENV\fR{\s-1PATH\s0} are preprocessed at startup to make
sure all paths are valid in the \s-1ANSI\s0 codepage (if possible).
.PP
The \fIWin32::GetLongPathName()\fR function now returns the \s-1UTF\-8\s0 encoded
correct long file name instead of using replacement characters to force
the name into the \s-1ANSI\s0 codepage.  The new \fIWin32::GetANSIPathName()\fR
function can be used to turn a long pathname into a short one only if the
long one cannot be represented in the \s-1ANSI\s0 codepage.
.PP
Many other functions in the \f(CW\*(C`Win32\*(C'\fR module have been improved to accept
\&\s-1UTF\-8\s0 encoded arguments.  Please see Win32 for details.
.SS "\fIreadpipe()\fP is now overridable"
.IX Subsection "readpipe() is now overridable"
The built-in function \fIreadpipe()\fR is now overridable. Overriding it permits
also to override its operator counterpart, \f(CW\*(C`qx//\*(C'\fR (a.k.a. \f(CW\*(C`\`\`\*(C'\fR).
Moreover, it now defaults to \f(CW$_\fR if no argument is provided. (Rafael
Garcia-Suarez)
.SS "Default argument for \fIreadline()\fP"
.IX Subsection "Default argument for readline()"
\&\fIreadline()\fR now defaults to \f(CW*ARGV\fR if no argument is provided. (Rafael
Garcia-Suarez)
.SS "\fIstate()\fP variables"
.IX Subsection "state() variables"
A new class of variables has been introduced. State variables are similar
to \f(CW\*(C`my\*(C'\fR variables, but are declared with the \f(CW\*(C`state\*(C'\fR keyword in place of
\&\f(CW\*(C`my\*(C'\fR. They're visible only in their lexical scope, but their value is
persistent: unlike \f(CW\*(C`my\*(C'\fR variables, they're not undefined at scope entry,
but retain their previous value. (Rafael Garcia-Suarez, Nicholas Clark)
.PP
To use state variables, one needs to enable them by using
.PP
.Vb 1
\&    use feature \*(Aqstate\*(Aq;
.Ve
.PP
or by using the \f(CW\*(C`\-E\*(C'\fR command-line switch in one-liners.
See \*(L"Persistent Private Variables\*(R" in perlsub.
.SS "Stacked filetest operators"
.IX Subsection "Stacked filetest operators"
As a new form of syntactic sugar, it's now possible to stack up filetest
operators. You can now write \f(CW\*(C`\-f \-w \-x $file\*(C'\fR in a row to mean
\&\f(CW\*(C`\-x $file && \-w _ && \-f _\*(C'\fR. See \*(L"\-X\*(R" in perlfunc.
.SS "\s-1\fIUNIVERSAL::DOES\s0()\fP"
.IX Subsection "UNIVERSAL::DOES()"
The \f(CW\*(C`UNIVERSAL\*(C'\fR class has a new method, \f(CW\*(C`DOES()\*(C'\fR. It has been added to
solve semantic problems with the \f(CW\*(C`isa()\*(C'\fR method. \f(CW\*(C`isa()\*(C'\fR checks for
inheritance, while \f(CW\*(C`DOES()\*(C'\fR has been designed to be overridden when
module authors use other types of relations between classes (in addition
to inheritance). (chromatic)
.PP
See \*(L"$obj\->\s-1DOES\s0( \s-1ROLE \s0)\*(R" in \s-1UNIVERSAL\s0.
.SS "Formats"
.IX Subsection "Formats"
Formats were improved in several ways. A new field, \f(CW\*(C`^*\*(C'\fR, can be used for
variable-width, one-line-at-a-time text. Null characters are now handled
correctly in picture lines. Using \f(CW\*(C`@#\*(C'\fR and \f(CW\*(C`~~\*(C'\fR together will now
produce a compile-time error, as those format fields are incompatible.
perlform has been improved, and miscellaneous bugs fixed.
.SS "Byte-order modifiers for \fIpack()\fP and \fIunpack()\fP"
.IX Subsection "Byte-order modifiers for pack() and unpack()"
There are two new byte-order modifiers, \f(CW\*(C`>\*(C'\fR (big-endian) and \f(CW\*(C`<\*(C'\fR
(little-endian), that can be appended to most \fIpack()\fR and \fIunpack()\fR template
characters and groups to force a certain byte-order for that type or group.
See \*(L"pack\*(R" in perlfunc and perlpacktut for details.
.ie n .SS """no VERSION"""
.el .SS "\f(CWno VERSION\fP"
.IX Subsection "no VERSION"
You can now use \f(CW\*(C`no\*(C'\fR followed by a version number to specify that you
want to use a version of perl older than the specified one.
.ie n .SS """chdir"", ""chmod"" and ""chown"" on filehandles"
.el .SS "\f(CWchdir\fP, \f(CWchmod\fP and \f(CWchown\fP on filehandles"
.IX Subsection "chdir, chmod and chown on filehandles"
\&\f(CW\*(C`chdir\*(C'\fR, \f(CW\*(C`chmod\*(C'\fR and \f(CW\*(C`chown\*(C'\fR can now work on filehandles as well as
filenames, if the system supports respectively \f(CW\*(C`fchdir\*(C'\fR, \f(CW\*(C`fchmod\*(C'\fR and
\&\f(CW\*(C`fchown\*(C'\fR, thanks to a patch provided by Gisle Aas.
.SS "\s-1OS\s0 groups"
.IX Subsection "OS groups"
\&\f(CW$(\fR and \f(CW$)\fR now return groups in the order where the \s-1OS\s0 returns them,
thanks to Gisle Aas. This wasn't previously the case.
.SS "Recursive sort subs"
.IX Subsection "Recursive sort subs"
You can now use recursive subroutines with \fIsort()\fR, thanks to Robin Houston.
.SS "Exceptions in constant folding"
.IX Subsection "Exceptions in constant folding"
The constant folding routine is now wrapped in an exception handler, and
if folding throws an exception (such as attempting to evaluate 0/0), perl
now retains the current optree, rather than aborting the whole program.
Without this change, programs would not compile if they had expressions that
happened to generate exceptions, even though those expressions were in code
that could never be reached at runtime. (Nicholas Clark, Dave Mitchell)
.ie n .SS "Source filters in @INC"
.el .SS "Source filters in \f(CW@INC\fP"
.IX Subsection "Source filters in @INC"
It's possible to enhance the mechanism of subroutine hooks in \f(CW@INC\fR by
adding a source filter on top of the filehandle opened and returned by the
hook. This feature was planned a long time ago, but wasn't quite working
until now. See \*(L"require\*(R" in perlfunc for details. (Nicholas Clark)
.SS "New internal variables"
.IX Subsection "New internal variables"
.ie n .IP """${^RE_DEBUG_FLAGS}""" 4
.el .IP "\f(CW${^RE_DEBUG_FLAGS}\fR" 4
.IX Item "${^RE_DEBUG_FLAGS}"
This variable controls what debug flags are in effect for the regular
expression engine when running under \f(CW\*(C`use re "debug"\*(C'\fR. See re for
details.
.ie n .IP """${^CHILD_ERROR_NATIVE}""" 4
.el .IP "\f(CW${^CHILD_ERROR_NATIVE}\fR" 4
.IX Item "${^CHILD_ERROR_NATIVE}"
This variable gives the native status returned by the last pipe close,
backtick command, successful call to \fIwait()\fR or \fIwaitpid()\fR, or from the
\&\fIsystem()\fR operator. See perlvar for details. (Contributed by Gisle Aas.)
.ie n .IP """${^RE_TRIE_MAXBUF}""" 4
.el .IP "\f(CW${^RE_TRIE_MAXBUF}\fR" 4
.IX Item "${^RE_TRIE_MAXBUF}"
See \*(L"Trie optimisation of literal string alternations\*(R".
.ie n .IP """${^WIN32_SLOPPY_STAT}""" 4
.el .IP "\f(CW${^WIN32_SLOPPY_STAT}\fR" 4
.IX Item "${^WIN32_SLOPPY_STAT}"
See \*(L"Sloppy stat on Windows\*(R".
.SS "Miscellaneous"
.IX Subsection "Miscellaneous"
\&\f(CW\*(C`unpack()\*(C'\fR now defaults to unpacking the \f(CW$_\fR variable.
.PP
\&\f(CW\*(C`mkdir()\*(C'\fR without arguments now defaults to \f(CW$_\fR.
.PP
The internal dump output has been improved, so that non-printable characters
such as newline and backspace are output in \f(CW\*(C`\ex\*(C'\fR notation, rather than
octal.
.PP
The \fB\-C\fR option can no longer be used on the \f(CW\*(C`#!\*(C'\fR line. It wasn't
working there anyway, since the standard streams are already set up
at this point in the execution of the perl interpreter. You can use
\&\fIbinmode()\fR instead to get the desired behaviour.
.SS "\s-1UCD 5.0.0\s0"
.IX Subsection "UCD 5.0.0"
The copy of the Unicode Character Database included in Perl 5 has
been updated to version 5.0.0.
.SS "\s-1MAD\s0"
.IX Subsection "MAD"
\&\s-1MAD,\s0 which stands for \fIMiscellaneous Attribute Decoration\fR, is a
still-in-development work leading to a Perl 5 to Perl 6 converter. To
enable it, it's necessary to pass the argument \f(CW\*(C`\-Dmad\*(C'\fR to Configure. The
obtained perl isn't binary compatible with a regular perl 5.10, and has
space and speed penalties; moreover not all regression tests still pass
with it. (Larry Wall, Nicholas Clark)
.SS "\fIkill()\fP on Windows"
.IX Subsection "kill() on Windows"
On Windows platforms, \f(CW\*(C`kill(\-9, $pid)\*(C'\fR now kills a process tree.
(On Unix, this delivers the signal to all processes in the same process
group.)
.SH "Incompatible Changes"
.IX Header "Incompatible Changes"
.SS "Packing and \s-1UTF\-8\s0 strings"
.IX Subsection "Packing and UTF-8 strings"
The semantics of \fIpack()\fR and \fIunpack()\fR regarding UTF\-8\-encoded data has been
changed. Processing is now by default character per character instead of
byte per byte on the underlying encoding. Notably, code that used things
like \f(CW\*(C`pack("a*", $string)\*(C'\fR to see through the encoding of string will now
simply get back the original \f(CW$string\fR. Packed strings can also get upgraded
during processing when you store upgraded characters. You can get the old
behaviour by using \f(CW\*(C`use bytes\*(C'\fR.
.PP
To be consistent with \fIpack()\fR, the \f(CW\*(C`C0\*(C'\fR in \fIunpack()\fR templates indicates
that the data is to be processed in character mode, i.e. character by
character; on the contrary, \f(CW\*(C`U0\*(C'\fR in \fIunpack()\fR indicates \s-1UTF\-8\s0 mode, where
the packed string is processed in its UTF\-8\-encoded Unicode form on a byte
by byte basis. This is reversed with regard to perl 5.8.X, but now consistent
between \fIpack()\fR and \fIunpack()\fR.
.PP
Moreover, \f(CW\*(C`C0\*(C'\fR and \f(CW\*(C`U0\*(C'\fR can also be used in \fIpack()\fR templates to specify
respectively character and byte modes.
.PP
\&\f(CW\*(C`C0\*(C'\fR and \f(CW\*(C`U0\*(C'\fR in the middle of a pack or unpack format now switch to the
specified encoding mode, honoring parens grouping. Previously, parens were
ignored.
.PP
Also, there is a new \fIpack()\fR character format, \f(CW\*(C`W\*(C'\fR, which is intended to
replace the old \f(CW\*(C`C\*(C'\fR. \f(CW\*(C`C\*(C'\fR is kept for unsigned chars coded as bytes in
the strings internal representation. \f(CW\*(C`W\*(C'\fR represents unsigned (logical)
character values, which can be greater than 255. It is therefore more
robust when dealing with potentially UTF\-8\-encoded data (as \f(CW\*(C`C\*(C'\fR will wrap
values outside the range 0..255, and not respect the string encoding).
.PP
In practice, that means that pack formats are now encoding-neutral, except
\&\f(CW\*(C`C\*(C'\fR.
.PP
For consistency, \f(CW\*(C`A\*(C'\fR in \fIunpack()\fR format now trims all Unicode whitespace
from the end of the string. Before perl 5.9.2, it used to strip only the
classical \s-1ASCII\s0 space characters.
.SS "Byte/character count feature in \fIunpack()\fP"
.IX Subsection "Byte/character count feature in unpack()"
A new \fIunpack()\fR template character, \f(CW"."\fR, returns the number of bytes or
characters (depending on the selected encoding mode, see above) read so far.
.ie n .SS "The $* and $# variables have been removed"
.el .SS "The \f(CW$*\fP and \f(CW$#\fP variables have been removed"
.IX Subsection "The $* and $# variables have been removed"
\&\f(CW$*\fR, which was deprecated in favor of the \f(CW\*(C`/s\*(C'\fR and \f(CW\*(C`/m\*(C'\fR regexp
modifiers, has been removed.
.PP
The deprecated \f(CW$#\fR variable (output format for numbers) has been
removed.
.PP
Two new severe warnings, \f(CW\*(C`$#/$* is no longer supported\*(C'\fR, have been added.
.SS "\fIsubstr()\fP lvalues are no longer fixed-length"
.IX Subsection "substr() lvalues are no longer fixed-length"
The lvalues returned by the three argument form of \fIsubstr()\fR used to be a
\&\*(L"fixed length window\*(R" on the original string. In some cases this could
cause surprising action at distance or other undefined behaviour. Now the
length of the window adjusts itself to the length of the string assigned to
it.
.ie n .SS "Parsing of ""\-f _"""
.el .SS "Parsing of \f(CW\-f _\fP"
.IX Subsection "Parsing of -f _"
The identifier \f(CW\*(C`_\*(C'\fR is now forced to be a bareword after a filetest
operator. This solves a number of misparsing issues when a global \f(CW\*(C`_\*(C'\fR
subroutine is defined.
.ie n .SS """:unique"""
.el .SS "\f(CW:unique\fP"
.IX Subsection ":unique"
The \f(CW\*(C`:unique\*(C'\fR attribute has been made a no-op, since its current
implementation was fundamentally flawed and not threadsafe.
.SS "Effect of pragmas in eval"
.IX Subsection "Effect of pragmas in eval"
The compile-time value of the \f(CW\*(C`%^H\*(C'\fR hint variable can now propagate into
eval("")uated code. This makes it more useful to implement lexical
pragmas.
.PP
As a side-effect of this, the overloaded-ness of constants now propagates
into eval("").
.SS "chdir \s-1FOO\s0"
.IX Subsection "chdir FOO"
A bareword argument to \fIchdir()\fR is now recognized as a file handle.
Earlier releases interpreted the bareword as a directory name.
(Gisle Aas)
.SS "Handling of .pmc files"
.IX Subsection "Handling of .pmc files"
An old feature of perl was that before \f(CW\*(C`require\*(C'\fR or \f(CW\*(C`use\*(C'\fR look for a
file with a \fI.pm\fR extension, they will first look for a similar filename
with a \fI.pmc\fR extension. If this file is found, it will be loaded in
place of any potentially existing file ending in a \fI.pm\fR extension.
.PP
Previously, \fI.pmc\fR files were loaded only if more recent than the
matching \fI.pm\fR file. Starting with 5.9.4, they'll be always loaded if
they exist.
.ie n .SS "$^V is now a ""version"" object instead of a v\-string"
.el .SS "$^V is now a \f(CWversion\fP object instead of a v\-string"
.IX Subsection "$^V is now a version object instead of a v-string"
$^V can still be used with the \f(CW%vd\fR format in printf, but any
character-level operations will now access the string representation
of the \f(CW\*(C`version\*(C'\fR object and not the ordinals of a v\-string.
Expressions like \f(CW\*(C`substr($^V, 0, 2)\*(C'\fR or \f(CW\*(C`split //, $^V\*(C'\fR
no longer work and must be rewritten.
.SS "@\- and @+ in patterns"
.IX Subsection "@- and @+ in patterns"
The special arrays \f(CW\*(C`@\-\*(C'\fR and \f(CW\*(C`@+\*(C'\fR are no longer interpolated in regular
expressions. (Sadahiro Tomoyuki)
.ie n .SS "$AUTOLOAD can now be tainted"
.el .SS "\f(CW$AUTOLOAD\fP can now be tainted"
.IX Subsection "$AUTOLOAD can now be tainted"
If you call a subroutine by a tainted name, and if it defers to an
\&\s-1AUTOLOAD\s0 function, then \f(CW$AUTOLOAD\fR will be (correctly) tainted.
(Rick Delaney)
.SS "Tainting and printf"
.IX Subsection "Tainting and printf"
When perl is run under taint mode, \f(CW\*(C`printf()\*(C'\fR and \f(CW\*(C`sprintf()\*(C'\fR will now
reject any tainted format argument. (Rafael Garcia-Suarez)
.SS "undef and signal handlers"
.IX Subsection "undef and signal handlers"
Undefining or deleting a signal handler via \f(CW\*(C`undef $SIG{FOO}\*(C'\fR is now
equivalent to setting it to \f(CW\*(AqDEFAULT\*(Aq\fR. (Rafael Garcia-Suarez)
.SS "strictures and dereferencing in \fIdefined()\fP"
.IX Subsection "strictures and dereferencing in defined()"
\&\f(CW\*(C`use strict \*(Aqrefs\*(Aq\*(C'\fR was ignoring taking a hard reference in an argument
to \fIdefined()\fR, as in :
.PP
.Vb 3
\&    use strict \*(Aqrefs\*(Aq;
\&    my $x = \*(Aqfoo\*(Aq;
\&    if (defined $$x) {...}
.Ve
.PP
This now correctly produces the run-time error \f(CW\*(C`Can\*(Aqt use string as a
SCALAR ref while "strict refs" in use\*(C'\fR.
.PP
\&\f(CW\*(C`defined @$foo\*(C'\fR and \f(CW\*(C`defined %$bar\*(C'\fR are now also subject to \f(CW\*(C`strict
\&\*(Aqrefs\*(Aq\*(C'\fR (that is, \f(CW$foo\fR and \f(CW$bar\fR shall be proper references there.)
(\f(CW\*(C`defined(@foo)\*(C'\fR and \f(CW\*(C`defined(%bar)\*(C'\fR are discouraged constructs anyway.)
(Nicholas Clark)
.ie n .SS """(?p{})"" has been removed"
.el .SS "\f(CW(?p{})\fP has been removed"
.IX Subsection "(?p{}) has been removed"
The regular expression construct \f(CW\*(C`(?p{})\*(C'\fR, which was deprecated in perl
5.8, has been removed. Use \f(CW\*(C`(??{})\*(C'\fR instead. (Rafael Garcia-Suarez)
.SS "Pseudo-hashes have been removed"
.IX Subsection "Pseudo-hashes have been removed"
Support for pseudo-hashes has been removed from Perl 5.9. (The \f(CW\*(C`fields\*(C'\fR
pragma remains here, but uses an alternate implementation.)
.SS "Removal of the bytecode compiler and of perlcc"
.IX Subsection "Removal of the bytecode compiler and of perlcc"
\&\f(CW\*(C`perlcc\*(C'\fR, the byteloader and the supporting modules (B::C, B::CC,
B::Bytecode, etc.) are no longer distributed with the perl sources. Those
experimental tools have never worked reliably, and, due to the lack of
volunteers to keep them in line with the perl interpreter developments, it
was decided to remove them instead of shipping a broken version of those.
The last version of those modules can be found with perl 5.9.4.
.PP
However the B compiler framework stays supported in the perl core, as with
the more useful modules it has permitted (among others, B::Deparse and
B::Concise).
.SS "Removal of the \s-1JPL\s0"
.IX Subsection "Removal of the JPL"
The \s-1JPL \s0(Java-Perl Lingo) has been removed from the perl sources tarball.
.SS "Recursive inheritance detected earlier"
.IX Subsection "Recursive inheritance detected earlier"
Perl will now immediately throw an exception if you modify any package's
\&\f(CW@ISA\fR in such a way that it would cause recursive inheritance.
.PP
Previously, the exception would not occur until Perl attempted to make
use of the recursive inheritance while resolving a method or doing a
\&\f(CW\*(C`$foo\->isa($bar)\*(C'\fR lookup.
.SS "warnings::enabled and warnings::warnif changed to favor users of modules"
.IX Subsection "warnings::enabled and warnings::warnif changed to favor users of modules"
The behaviour in 5.10.x favors the person using the module;
The behaviour in 5.8.x favors the module writer;
.PP
Assume the following code:
.PP
.Vb 5
\&  main calls Foo::Bar::baz()
\&  Foo::Bar inherits from Foo::Base
\&  Foo::Bar::baz() calls Foo::Base::_bazbaz()
\&  Foo::Base::_bazbaz() calls: warnings::warnif(\*(Aqsubstr\*(Aq, \*(Aqsome warning 
\&message\*(Aq);
.Ve
.PP
On 5.8.x, the code warns when Foo::Bar contains \f(CW\*(C`use warnings;\*(C'\fR
It does not matter if Foo::Base or main have warnings enabled
to disable the warning one has to modify Foo::Bar.
.PP
On 5.10.0 and newer, the code warns when main contains \f(CW\*(C`use warnings;\*(C'\fR
It does not matter if Foo::Base or Foo::Bar have warnings enabled
to disable the warning one has to modify main.
.SH "Modules and Pragmata"
.IX Header "Modules and Pragmata"
.SS "Upgrading individual core modules"
.IX Subsection "Upgrading individual core modules"
Even more core modules are now also available separately through the
\&\s-1CPAN. \s0 If you wish to update one of these modules, you don't need to
wait for a new perl release.  From within the cpan shell, running the
\&'r' command will report on modules with upgrades available.  See
\&\f(CW\*(C`perldoc CPAN\*(C'\fR for more information.
.SS "Pragmata Changes"
.IX Subsection "Pragmata Changes"
.ie n .IP """feature""" 4
.el .IP "\f(CWfeature\fR" 4
.IX Item "feature"
The new pragma \f(CW\*(C`feature\*(C'\fR is used to enable new features that might break
old code. See "The \f(CW\*(C`feature\*(C'\fR pragma" above.
.ie n .IP """mro""" 4
.el .IP "\f(CWmro\fR" 4
.IX Item "mro"
This new pragma enables to change the algorithm used to resolve inherited
methods. See "New Pragma, \f(CW\*(C`mro\*(C'\fR" above.
.ie n .IP "Scoping of the ""sort"" pragma" 4
.el .IP "Scoping of the \f(CWsort\fR pragma" 4
.IX Item "Scoping of the sort pragma"
The \f(CW\*(C`sort\*(C'\fR pragma is now lexically scoped. Its effect used to be global.
.ie n .IP "Scoping of ""bignum"", ""bigint"", ""bigrat""" 4
.el .IP "Scoping of \f(CWbignum\fR, \f(CWbigint\fR, \f(CWbigrat\fR" 4
.IX Item "Scoping of bignum, bigint, bigrat"
The three numeric pragmas \f(CW\*(C`bignum\*(C'\fR, \f(CW\*(C`bigint\*(C'\fR and \f(CW\*(C`bigrat\*(C'\fR are now
lexically scoped. (Tels)
.ie n .IP """base""" 4
.el .IP "\f(CWbase\fR" 4
.IX Item "base"
The \f(CW\*(C`base\*(C'\fR pragma now warns if a class tries to inherit from itself.
(Curtis \*(L"Ovid\*(R" Poe)
.ie n .IP """strict"" and ""warnings""" 4
.el .IP "\f(CWstrict\fR and \f(CWwarnings\fR" 4
.IX Item "strict and warnings"
\&\f(CW\*(C`strict\*(C'\fR and \f(CW\*(C`warnings\*(C'\fR will now complain loudly if they are loaded via
incorrect casing (as in \f(CW\*(C`use Strict;\*(C'\fR). (Johan Vromans)
.ie n .IP """version""" 4
.el .IP "\f(CWversion\fR" 4
.IX Item "version"
The \f(CW\*(C`version\*(C'\fR module provides support for version objects.
.ie n .IP """warnings""" 4
.el .IP "\f(CWwarnings\fR" 4
.IX Item "warnings"
The \f(CW\*(C`warnings\*(C'\fR pragma doesn't load \f(CW\*(C`Carp\*(C'\fR anymore. That means that code
that used \f(CW\*(C`Carp\*(C'\fR routines without having loaded it at compile time might
need to be adjusted; typically, the following (faulty) code won't work
anymore, and will require parentheses to be added after the function name:
.Sp
.Vb 3
\&    use warnings;
\&    require Carp;
\&    Carp::confess \*(Aqargh\*(Aq;
.Ve
.ie n .IP """less""" 4
.el .IP "\f(CWless\fR" 4
.IX Item "less"
\&\f(CW\*(C`less\*(C'\fR now does something useful (or at least it tries to). In fact, it
has been turned into a lexical pragma. So, in your modules, you can now
test whether your users have requested to use less \s-1CPU,\s0 or less memory,
less magic, or maybe even less fat. See less for more. (Joshua ben
Jore)
.SS "New modules"
.IX Subsection "New modules"
.IP "\(bu" 4
\&\f(CW\*(C`encoding::warnings\*(C'\fR, by Audrey Tang, is a module to emit warnings
whenever an \s-1ASCII\s0 character string containing high-bit bytes is implicitly
converted into \s-1UTF\-8.\s0 It's a lexical pragma since Perl 5.9.4; on older
perls, its effect is global.
.IP "\(bu" 4
\&\f(CW\*(C`Module::CoreList\*(C'\fR, by Richard Clamp, is a small handy module that tells
you what versions of core modules ship with any versions of Perl 5. It
comes with a command-line frontend, \f(CW\*(C`corelist\*(C'\fR.
.IP "\(bu" 4
\&\f(CW\*(C`Math::BigInt::FastCalc\*(C'\fR is an XS-enabled, and thus faster, version of
\&\f(CW\*(C`Math::BigInt::Calc\*(C'\fR.
.IP "\(bu" 4
\&\f(CW\*(C`Compress::Zlib\*(C'\fR is an interface to the zlib compression library. It
comes with a bundled version of zlib, so having a working zlib is not a
prerequisite to install it. It's used by \f(CW\*(C`Archive::Tar\*(C'\fR (see below).
.IP "\(bu" 4
\&\f(CW\*(C`IO::Zlib\*(C'\fR is an \f(CW\*(C`IO::\*(C'\fR\-style interface to \f(CW\*(C`Compress::Zlib\*(C'\fR.
.IP "\(bu" 4
\&\f(CW\*(C`Archive::Tar\*(C'\fR is a module to manipulate \f(CW\*(C`tar\*(C'\fR archives.
.IP "\(bu" 4
\&\f(CW\*(C`Digest::SHA\*(C'\fR is a module used to calculate many types of \s-1SHA\s0 digests,
has been included for \s-1SHA\s0 support in the \s-1CPAN\s0 module.
.IP "\(bu" 4
\&\f(CW\*(C`ExtUtils::CBuilder\*(C'\fR and \f(CW\*(C`ExtUtils::ParseXS\*(C'\fR have been added.
.IP "\(bu" 4
\&\f(CW\*(C`Hash::Util::FieldHash\*(C'\fR, by Anno Siegel, has been added. This module
provides support for \fIfield hashes\fR: hashes that maintain an association
of a reference with a value, in a thread-safe garbage-collected way.
Such hashes are useful to implement inside-out objects.
.IP "\(bu" 4
\&\f(CW\*(C`Module::Build\*(C'\fR, by Ken Williams, has been added. It's an alternative to
\&\f(CW\*(C`ExtUtils::MakeMaker\*(C'\fR to build and install perl modules.
.IP "\(bu" 4
\&\f(CW\*(C`Module::Load\*(C'\fR, by Jos Boumans, has been added. It provides a single
interface to load Perl modules and \fI.pl\fR files.
.IP "\(bu" 4
\&\f(CW\*(C`Module::Loaded\*(C'\fR, by Jos Boumans, has been added. It's used to mark
modules as loaded or unloaded.
.IP "\(bu" 4
\&\f(CW\*(C`Package::Constants\*(C'\fR, by Jos Boumans, has been added. It's a simple
helper to list all constants declared in a given package.
.IP "\(bu" 4
\&\f(CW\*(C`Win32API::File\*(C'\fR, by Tye McQueen, has been added (for Windows builds).
This module provides low-level access to Win32 system \s-1API\s0 calls for
files/dirs.
.IP "\(bu" 4
\&\f(CW\*(C`Locale::Maketext::Simple\*(C'\fR, needed by \s-1CPANPLUS,\s0 is a simple wrapper around
\&\f(CW\*(C`Locale::Maketext::Lexicon\*(C'\fR. Note that \f(CW\*(C`Locale::Maketext::Lexicon\*(C'\fR isn't
included in the perl core; the behaviour of \f(CW\*(C`Locale::Maketext::Simple\*(C'\fR
gracefully degrades when the later isn't present.
.IP "\(bu" 4
\&\f(CW\*(C`Params::Check\*(C'\fR implements a generic input parsing/checking mechanism. It
is used by \s-1CPANPLUS.\s0
.IP "\(bu" 4
\&\f(CW\*(C`Term::UI\*(C'\fR simplifies the task to ask questions at a terminal prompt.
.IP "\(bu" 4
\&\f(CW\*(C`Object::Accessor\*(C'\fR provides an interface to create per-object accessors.
.IP "\(bu" 4
\&\f(CW\*(C`Module::Pluggable\*(C'\fR is a simple framework to create modules that accept
pluggable sub-modules.
.IP "\(bu" 4
\&\f(CW\*(C`Module::Load::Conditional\*(C'\fR provides simple ways to query and possibly
load installed modules.
.IP "\(bu" 4
\&\f(CW\*(C`Time::Piece\*(C'\fR provides an object oriented interface to time functions,
overriding the built-ins \fIlocaltime()\fR and \fIgmtime()\fR.
.IP "\(bu" 4
\&\f(CW\*(C`IPC::Cmd\*(C'\fR helps to find and run external commands, possibly
interactively.
.IP "\(bu" 4
\&\f(CW\*(C`File::Fetch\*(C'\fR provide a simple generic file fetching mechanism.
.IP "\(bu" 4
\&\f(CW\*(C`Log::Message\*(C'\fR and \f(CW\*(C`Log::Message::Simple\*(C'\fR are used by the log facility
of \f(CW\*(C`CPANPLUS\*(C'\fR.
.IP "\(bu" 4
\&\f(CW\*(C`Archive::Extract\*(C'\fR is a generic archive extraction mechanism
for \fI.tar\fR (plain, gzipped or bzipped) or \fI.zip\fR files.
.IP "\(bu" 4
\&\f(CW\*(C`CPANPLUS\*(C'\fR provides an \s-1API\s0 and a command-line tool to access the \s-1CPAN\s0
mirrors.
.IP "\(bu" 4
\&\f(CW\*(C`Pod::Escapes\*(C'\fR provides utilities that are useful in decoding Pod
E<...> sequences.
.IP "\(bu" 4
\&\f(CW\*(C`Pod::Simple\*(C'\fR is now the backend for several of the Pod-related modules
included with Perl.
.SS "Selected Changes to Core Modules"
.IX Subsection "Selected Changes to Core Modules"
.ie n .IP """Attribute::Handlers""" 4
.el .IP "\f(CWAttribute::Handlers\fR" 4
.IX Item "Attribute::Handlers"
\&\f(CW\*(C`Attribute::Handlers\*(C'\fR can now report the caller's file and line number.
(David Feldman)
.Sp
All interpreted attributes are now passed as array references. (Damian
Conway)
.ie n .IP """B::Lint""" 4
.el .IP "\f(CWB::Lint\fR" 4
.IX Item "B::Lint"
\&\f(CW\*(C`B::Lint\*(C'\fR is now based on \f(CW\*(C`Module::Pluggable\*(C'\fR, and so can be extended
with plugins. (Joshua ben Jore)
.ie n .IP """B""" 4
.el .IP "\f(CWB\fR" 4
.IX Item "B"
It's now possible to access the lexical pragma hints (\f(CW\*(C`%^H\*(C'\fR) by using the
method \fIB::COP::hints_hash()\fR. It returns a \f(CW\*(C`B::RHE\*(C'\fR object, which in turn
can be used to get a hash reference via the method \fIB::RHE::HASH()\fR. (Joshua
ben Jore)
.ie n .IP """Thread""" 4
.el .IP "\f(CWThread\fR" 4
.IX Item "Thread"
As the old 5005thread threading model has been removed, in favor of the
ithreads scheme, the \f(CW\*(C`Thread\*(C'\fR module is now a compatibility wrapper, to
be used in old code only. It has been removed from the default list of
dynamic extensions.
.SH "Utility Changes"
.IX Header "Utility Changes"
.IP "perl \-d" 4
.IX Item "perl -d"
The Perl debugger can now save all debugger commands for sourcing later;
notably, it can now emulate stepping backwards, by restarting and
rerunning all bar the last command from a saved command history.
.Sp
It can also display the parent inheritance tree of a given class, with the
\&\f(CW\*(C`i\*(C'\fR command.
.IP "ptar" 4
.IX Item "ptar"
\&\f(CW\*(C`ptar\*(C'\fR is a pure perl implementation of \f(CW\*(C`tar\*(C'\fR that comes with
\&\f(CW\*(C`Archive::Tar\*(C'\fR.
.IP "ptardiff" 4
.IX Item "ptardiff"
\&\f(CW\*(C`ptardiff\*(C'\fR is a small utility used to generate a diff between the contents
of a tar archive and a directory tree. Like \f(CW\*(C`ptar\*(C'\fR, it comes with
\&\f(CW\*(C`Archive::Tar\*(C'\fR.
.IP "shasum" 4
.IX Item "shasum"
\&\f(CW\*(C`shasum\*(C'\fR is a command-line utility, used to print or to check \s-1SHA\s0
digests. It comes with the new \f(CW\*(C`Digest::SHA\*(C'\fR module.
.IP "corelist" 4
.IX Item "corelist"
The \f(CW\*(C`corelist\*(C'\fR utility is now installed with perl (see \*(L"New modules\*(R"
above).
.IP "h2ph and h2xs" 4
.IX Item "h2ph and h2xs"
\&\f(CW\*(C`h2ph\*(C'\fR and \f(CW\*(C`h2xs\*(C'\fR have been made more robust with regard to
\&\*(L"modern\*(R" C code.
.Sp
\&\f(CW\*(C`h2xs\*(C'\fR implements a new option \f(CW\*(C`\-\-use\-xsloader\*(C'\fR to force use of
\&\f(CW\*(C`XSLoader\*(C'\fR even in backwards compatible modules.
.Sp
The handling of authors' names that had apostrophes has been fixed.
.Sp
Any enums with negative values are now skipped.
.IP "perlivp" 4
.IX Item "perlivp"
\&\f(CW\*(C`perlivp\*(C'\fR no longer checks for \fI*.ph\fR files by default.  Use the new \f(CW\*(C`\-a\*(C'\fR
option to run \fIall\fR tests.
.IP "find2perl" 4
.IX Item "find2perl"
\&\f(CW\*(C`find2perl\*(C'\fR now assumes \f(CW\*(C`\-print\*(C'\fR as a default action. Previously, it
needed to be specified explicitly.
.Sp
Several bugs have been fixed in \f(CW\*(C`find2perl\*(C'\fR, regarding \f(CW\*(C`\-exec\*(C'\fR and
\&\f(CW\*(C`\-eval\*(C'\fR. Also the options \f(CW\*(C`\-path\*(C'\fR, \f(CW\*(C`\-ipath\*(C'\fR and \f(CW\*(C`\-iname\*(C'\fR have been
added.
.IP "config_data" 4
.IX Item "config_data"
\&\f(CW\*(C`config_data\*(C'\fR is a new utility that comes with \f(CW\*(C`Module::Build\*(C'\fR. It
provides a command-line interface to the configuration of Perl modules
that use Module::Build's framework of configurability (that is,
\&\f(CW*::ConfigData\fR modules that contain local configuration information for
their parent modules.)
.IP "cpanp" 4
.IX Item "cpanp"
\&\f(CW\*(C`cpanp\*(C'\fR, the \s-1CPANPLUS\s0 shell, has been added. (\f(CW\*(C`cpanp\-run\-perl\*(C'\fR, a
helper for \s-1CPANPLUS\s0 operation, has been added too, but isn't intended for
direct use).
.IP "cpan2dist" 4
.IX Item "cpan2dist"
\&\f(CW\*(C`cpan2dist\*(C'\fR is a new utility that comes with \s-1CPANPLUS.\s0 It's a tool to
create distributions (or packages) from \s-1CPAN\s0 modules.
.IP "pod2html" 4
.IX Item "pod2html"
The output of \f(CW\*(C`pod2html\*(C'\fR has been enhanced to be more customizable via
\&\s-1CSS.\s0 Some formatting problems were also corrected. (Jari Aalto)
.SH "New Documentation"
.IX Header "New Documentation"
The perlpragma manpage documents how to write one's own lexical
pragmas in pure Perl (something that is possible starting with 5.9.4).
.PP
The new perlglossary manpage is a glossary of terms used in the Perl
documentation, technical and otherwise, kindly provided by O'Reilly Media,
Inc.
.PP
The perlreguts manpage, courtesy of Yves Orton, describes internals of the
Perl regular expression engine.
.PP
The perlreapi manpage describes the interface to the perl interpreter
used to write pluggable regular expression engines (by \*(Aevar Arnfjo\*:r\*(d-
Bjarmason).
.PP
The perlunitut manpage is an tutorial for programming with Unicode and
string encodings in Perl, courtesy of Juerd Waalboer.
.PP
A new manual page, perlunifaq (the Perl Unicode \s-1FAQ\s0), has been added
(Juerd Waalboer).
.PP
The perlcommunity manpage gives a description of the Perl community
on the Internet and in real life. (Edgar \*(L"Trizor\*(R" Bering)
.PP
The \s-1CORE\s0 manual page documents the \f(CW\*(C`CORE::\*(C'\fR namespace. (Tels)
.PP
The long-existing feature of \f(CW\*(C`/(?{...})/\*(C'\fR regexps setting \f(CW$_\fR and \fIpos()\fR
is now documented.
.SH "Performance Enhancements"
.IX Header "Performance Enhancements"
.SS "In-place sorting"
.IX Subsection "In-place sorting"
Sorting arrays in place (\f(CW\*(C`@a = sort @a\*(C'\fR) is now optimized to avoid
making a temporary copy of the array.
.PP
Likewise, \f(CW\*(C`reverse sort ...\*(C'\fR is now optimized to sort in reverse,
avoiding the generation of a temporary intermediate list.
.SS "Lexical array access"
.IX Subsection "Lexical array access"
Access to elements of lexical arrays via a numeric constant between 0 and
255 is now faster. (This used to be only the case for global arrays.)
.SS "XS-assisted \s-1SWASHGET\s0"
.IX Subsection "XS-assisted SWASHGET"
Some pure-perl code that perl was using to retrieve Unicode properties and
transliteration mappings has been reimplemented in \s-1XS.\s0
.SS "Constant subroutines"
.IX Subsection "Constant subroutines"
The interpreter internals now support a far more memory efficient form of
inlineable constants. Storing a reference to a constant value in a symbol
table is equivalent to a full typeglob referencing a constant subroutine,
but using about 400 bytes less memory. This proxy constant subroutine is
automatically upgraded to a real typeglob with subroutine if necessary.
The approach taken is analogous to the existing space optimisation for
subroutine stub declarations, which are stored as plain scalars in place
of the full typeglob.
.PP
Several of the core modules have been converted to use this feature for
their system dependent constants \- as a result \f(CW\*(C`use POSIX;\*(C'\fR now takes about
200K less memory.
.ie n .SS """PERL_DONT_CREATE_GVSV"""
.el .SS "\f(CWPERL_DONT_CREATE_GVSV\fP"
.IX Subsection "PERL_DONT_CREATE_GVSV"
The new compilation flag \f(CW\*(C`PERL_DONT_CREATE_GVSV\*(C'\fR, introduced as an option
in perl 5.8.8, is turned on by default in perl 5.9.3. It prevents perl
from creating an empty scalar with every new typeglob. See perl589delta
for details.
.SS "Weak references are cheaper"
.IX Subsection "Weak references are cheaper"
Weak reference creation is now \fIO(1)\fR rather than \fIO(n)\fR, courtesy of
Nicholas Clark. Weak reference deletion remains \fIO(n)\fR, but if deletion only
happens at program exit, it may be skipped completely.
.SS "\fIsort()\fP enhancements"
.IX Subsection "sort() enhancements"
Salvador Fandin\*~o provided improvements to reduce the memory usage of \f(CW\*(C`sort\*(C'\fR
and to speed up some cases.
.SS "Memory optimisations"
.IX Subsection "Memory optimisations"
Several internal data structures (typeglobs, GVs, CVs, formats) have been
restructured to use less memory. (Nicholas Clark)
.SS "\s-1UTF\-8\s0 cache optimisation"
.IX Subsection "UTF-8 cache optimisation"
The \s-1UTF\-8\s0 caching code is now more efficient, and used more often.
(Nicholas Clark)
.SS "Sloppy stat on Windows"
.IX Subsection "Sloppy stat on Windows"
On Windows, perl's \fIstat()\fR function normally opens the file to determine
the link count and update attributes that may have been changed through
hard links. Setting ${^WIN32_SLOPPY_STAT} to a true value speeds up
\&\fIstat()\fR by not performing this operation. (Jan Dubois)
.SS "Regular expressions optimisations"
.IX Subsection "Regular expressions optimisations"
.IP "Engine de-recursivised" 4
.IX Item "Engine de-recursivised"
The regular expression engine is no longer recursive, meaning that
patterns that used to overflow the stack will either die with useful
explanations, or run to completion, which, since they were able to blow
the stack before, will likely take a very long time to happen. If you were
experiencing the occasional stack overflow (or segfault) and upgrade to
discover that now perl apparently hangs instead, look for a degenerate
regex. (Dave Mitchell)
.IP "Single char char-classes treated as literals" 4
.IX Item "Single char char-classes treated as literals"
Classes of a single character are now treated the same as if the character
had been used as a literal, meaning that code that uses char-classes as an
escaping mechanism will see a speedup. (Yves Orton)
.IP "Trie optimisation of literal string alternations" 4
.IX Item "Trie optimisation of literal string alternations"
Alternations, where possible, are optimised into more efficient matching
structures. String literal alternations are merged into a trie and are
matched simultaneously.  This means that instead of O(N) time for matching
N alternations at a given point, the new code performs in O(1) time.
A new special variable, ${^RE_TRIE_MAXBUF}, has been added to fine-tune
this optimization. (Yves Orton)
.Sp
\&\fBNote:\fR Much code exists that works around perl's historic poor
performance on alternations. Often the tricks used to do so will disable
the new optimisations. Hopefully the utility modules used for this purpose
will be educated about these new optimisations.
.IP "Aho-Corasick start-point optimisation" 4
.IX Item "Aho-Corasick start-point optimisation"
When a pattern starts with a trie-able alternation and there aren't
better optimisations available, the regex engine will use Aho-Corasick
matching to find the start point. (Yves Orton)
.SH "Installation and Configuration Improvements"
.IX Header "Installation and Configuration Improvements"
.SS "Configuration improvements"
.IX Subsection "Configuration improvements"
.ie n .IP """\-Dusesitecustomize""" 4
.el .IP "\f(CW\-Dusesitecustomize\fR" 4
.IX Item "-Dusesitecustomize"
Run-time customization of \f(CW@INC\fR can be enabled by passing the
\&\f(CW\*(C`\-Dusesitecustomize\*(C'\fR flag to Configure. When enabled, this will make perl
run \fI\f(CI$sitelibexp\fI/sitecustomize.pl\fR before anything else.  This script can
then be set up to add additional entries to \f(CW@INC\fR.
.IP "Relocatable installations" 4
.IX Item "Relocatable installations"
There is now Configure support for creating a relocatable perl tree. If
you Configure with \f(CW\*(C`\-Duserelocatableinc\*(C'\fR, then the paths in \f(CW@INC\fR (and
everything else in \f(CW%Config\fR) can be optionally located via the path of the
perl executable.
.Sp
That means that, if the string \f(CW".../"\fR is found at the start of any
path, it's substituted with the directory of $^X. So, the relocation can
be configured on a per-directory basis, although the default with
\&\f(CW\*(C`\-Duserelocatableinc\*(C'\fR is that everything is relocated. The initial
install is done to the original configured prefix.
.IP "\fIstrlcat()\fR and \fIstrlcpy()\fR" 4
.IX Item "strlcat() and strlcpy()"
The configuration process now detects whether \fIstrlcat()\fR and \fIstrlcpy()\fR are
available.  When they are not available, perl's own version is used (from
Russ Allbery's public domain implementation).  Various places in the perl
interpreter now use them. (Steve Peters)
.ie n .IP """d_pseudofork"" and ""d_printf_format_null""" 4
.el .IP "\f(CWd_pseudofork\fR and \f(CWd_printf_format_null\fR" 4
.IX Item "d_pseudofork and d_printf_format_null"
A new configuration variable, available as \f(CW$Config{d_pseudofork}\fR in
the Config module, has been added, to distinguish real \fIfork()\fR support
from fake pseudofork used on Windows platforms.
.Sp
A new configuration variable, \f(CW\*(C`d_printf_format_null\*(C'\fR, has been added, 
to see if printf-like formats are allowed to be \s-1NULL.\s0
.IP "Configure help" 4
.IX Item "Configure help"
\&\f(CW\*(C`Configure \-h\*(C'\fR has been extended with the most commonly used options.
.SS "Compilation improvements"
.IX Subsection "Compilation improvements"
.IP "Parallel build" 4
.IX Item "Parallel build"
Parallel makes should work properly now, although there may still be problems
if \f(CW\*(C`make test\*(C'\fR is instructed to run in parallel.
.IP "Borland's compilers support" 4
.IX Item "Borland's compilers support"
Building with Borland's compilers on Win32 should work more smoothly. In
particular Steve Hay has worked to side step many warnings emitted by their
compilers and at least one C compiler internal error.
.IP "Static build on Windows" 4
.IX Item "Static build on Windows"
Perl extensions on Windows now can be statically built into the Perl \s-1DLL.\s0
.Sp
Also, it's now possible to build a \f(CW\*(C`perl\-static.exe\*(C'\fR that doesn't depend
on the Perl \s-1DLL\s0 on Win32. See the Win32 makefiles for details.
(Vadim Konovalov)
.IP "ppport.h files" 4
.IX Item "ppport.h files"
All \fIppport.h\fR files in the \s-1XS\s0 modules bundled with perl are now
autogenerated at build time. (Marcus Holland-Moritz)
.IP "\*(C+ compatibility" 4
.IX Item " compatibility"
Efforts have been made to make perl and the core \s-1XS\s0 modules compilable
with various \*(C+ compilers (although the situation is not perfect with
some of the compilers on some of the platforms tested.)
.IP "Support for Microsoft 64\-bit compiler" 4
.IX Item "Support for Microsoft 64-bit compiler"
Support for building perl with Microsoft's 64\-bit compiler has been
improved. (ActiveState)
.IP "Visual \*(C+" 4
.IX Item "Visual "
Perl can now be compiled with Microsoft Visual \*(C+ 2005 (and 2008 Beta 2).
.IP "Win32 builds" 4
.IX Item "Win32 builds"
All win32 builds (MS-Win, WinCE) have been merged and cleaned up.
.SS "Installation improvements"
.IX Subsection "Installation improvements"
.IP "Module auxiliary files" 4
.IX Item "Module auxiliary files"
\&\s-1README\s0 files and changelogs for \s-1CPAN\s0 modules bundled with perl are no
longer installed.
.SS "New Or Improved Platforms"
.IX Subsection "New Or Improved Platforms"
Perl has been reported to work on Symbian \s-1OS.\s0 See perlsymbian for more
information.
.PP
Many improvements have been made towards making Perl work correctly on
z/OS.
.PP
Perl has been reported to work on DragonFlyBSD and MidnightBSD.
.PP
Perl has also been reported to work on NexentaOS
( http://www.gnusolaris.org/ ).
.PP
The \s-1VMS\s0 port has been improved. See perlvms.
.PP
Support for Cray \s-1XT4\s0 Catamount/Qk has been added. See
\&\fIhints/catamount.sh\fR in the source code distribution for more
information.
.PP
Vendor patches have been merged for RedHat and Gentoo.
.PP
\&\fIDynaLoader::dl_unload_file()\fR now works on Windows.
.SH "Selected Bug Fixes"
.IX Header "Selected Bug Fixes"
.IP "strictures in regexp-eval blocks" 4
.IX Item "strictures in regexp-eval blocks"
\&\f(CW\*(C`strict\*(C'\fR wasn't in effect in regexp-eval blocks (\f(CW\*(C`/(?{...})/\*(C'\fR).
.IP "Calling \fICORE::require()\fR" 4
.IX Item "Calling CORE::require()"
\&\fICORE::require()\fR and \fICORE::do()\fR were always parsed as \fIrequire()\fR and \fIdo()\fR
when they were overridden. This is now fixed.
.IP "Subscripts of slices" 4
.IX Item "Subscripts of slices"
You can now use a non-arrowed form for chained subscripts after a list
slice, like in:
.Sp
.Vb 1
\&    ({foo => "bar"})[0]{foo}
.Ve
.Sp
This used to be a syntax error; a \f(CW\*(C`\->\*(C'\fR was required.
.ie n .IP """no warnings \*(Aqcategory\*(Aq"" works correctly with \-w" 4
.el .IP "\f(CWno warnings \*(Aqcategory\*(Aq\fR works correctly with \-w" 4
.IX Item "no warnings category works correctly with -w"
Previously when running with warnings enabled globally via \f(CW\*(C`\-w\*(C'\fR, selective
disabling of specific warning categories would actually turn off all warnings.
This is now fixed; now \f(CW\*(C`no warnings \*(Aqio\*(Aq;\*(C'\fR will only turn off warnings in the
\&\f(CW\*(C`io\*(C'\fR class. Previously it would erroneously turn off all warnings.
.IP "threads improvements" 4
.IX Item "threads improvements"
Several memory leaks in ithreads were closed. Also, ithreads were made
less memory-intensive.
.Sp
\&\f(CW\*(C`threads\*(C'\fR is now a dual-life module, also available on \s-1CPAN.\s0 It has been
expanded in many ways. A \fIkill()\fR method is available for thread signalling.
One can get thread status, or the list of running or joinable threads.
.Sp
A new \f(CW\*(C`threads\->exit()\*(C'\fR method is used to exit from the application
(this is the default for the main thread) or from the current thread only
(this is the default for all other threads). On the other hand, the \fIexit()\fR
built-in now always causes the whole application to terminate. (Jerry
D. Hedden)
.IP "\fIchr()\fR and negative values" 4
.IX Item "chr() and negative values"
\&\fIchr()\fR on a negative value now gives \f(CW\*(C`\ex{FFFD}\*(C'\fR, the Unicode replacement
character, unless when the \f(CW\*(C`bytes\*(C'\fR pragma is in effect, where the low
eight bits of the value are used.
.IP "\s-1PERL5SHELL\s0 and tainting" 4
.IX Item "PERL5SHELL and tainting"
On Windows, the \s-1PERL5SHELL\s0 environment variable is now checked for
taintedness. (Rafael Garcia-Suarez)
.IP "Using *FILE{\s-1IO\s0}" 4
.IX Item "Using *FILE{IO}"
\&\f(CW\*(C`stat()\*(C'\fR and \f(CW\*(C`\-X\*(C'\fR filetests now treat *FILE{\s-1IO\s0} filehandles like *FILE
filehandles. (Steve Peters)
.IP "Overloading and reblessing" 4
.IX Item "Overloading and reblessing"
Overloading now works when references are reblessed into another class.
Internally, this has been implemented by moving the flag for \*(L"overloading\*(R"
from the reference to the referent, which logically is where it should
always have been. (Nicholas Clark)
.IP "Overloading and \s-1UTF\-8\s0" 4
.IX Item "Overloading and UTF-8"
A few bugs related to \s-1UTF\-8\s0 handling with objects that have
stringification overloaded have been fixed. (Nicholas Clark)
.IP "eval memory leaks fixed" 4
.IX Item "eval memory leaks fixed"
Traditionally, \f(CW\*(C`eval \*(Aqsyntax error\*(Aq\*(C'\fR has leaked badly. Many (but not all)
of these leaks have now been eliminated or reduced. (Dave Mitchell)
.IP "Random device on Windows" 4
.IX Item "Random device on Windows"
In previous versions, perl would read the file \fI/dev/urandom\fR if it
existed when seeding its random number generator.  That file is unlikely
to exist on Windows, and if it did would probably not contain appropriate
data, so perl no longer tries to read it on Windows. (Alex Davies)
.IP "\s-1PERLIO_DEBUG\s0" 4
.IX Item "PERLIO_DEBUG"
The \f(CW\*(C`PERLIO_DEBUG\*(C'\fR environment variable no longer has any effect for
setuid scripts and for scripts run with \fB\-T\fR.
.Sp
Moreover, with a thread-enabled perl, using \f(CW\*(C`PERLIO_DEBUG\*(C'\fR could lead to
an internal buffer overflow. This has been fixed.
.IP "PerlIO::scalar and read-only scalars" 4
.IX Item "PerlIO::scalar and read-only scalars"
PerlIO::scalar will now prevent writing to read-only scalars. Moreover,
\&\fIseek()\fR is now supported with PerlIO::scalar\-based filehandles, the
underlying string being zero-filled as needed. (Rafael, Jarkko Hietaniemi)
.IP "\fIstudy()\fR and \s-1UTF\-8\s0" 4
.IX Item "study() and UTF-8"
\&\fIstudy()\fR never worked for \s-1UTF\-8\s0 strings, but could lead to false results.
It's now a no-op on \s-1UTF\-8\s0 data. (Yves Orton)
.IP "Critical signals" 4
.IX Item "Critical signals"
The signals \s-1SIGILL, SIGBUS\s0 and \s-1SIGSEGV\s0 are now always delivered in an
\&\*(L"unsafe\*(R" manner (contrary to other signals, that are deferred until the
perl interpreter reaches a reasonably stable state; see
\&\*(L"Deferred Signals (Safe Signals)\*(R" in perlipc). (Rafael)
.ie n .IP "@INC\-hook fix" 4
.el .IP "\f(CW@INC\fR\-hook fix" 4
.IX Item "@INC-hook fix"
When a module or a file is loaded through an \f(CW@INC\fR\-hook, and when this hook
has set a filename entry in \f(CW%INC\fR, _\|_FILE_\|_ is now set for this module
accordingly to the contents of that \f(CW%INC\fR entry. (Rafael)
.ie n .IP """\-t"" switch fix" 4
.el .IP "\f(CW\-t\fR switch fix" 4
.IX Item "-t switch fix"
The \f(CW\*(C`\-w\*(C'\fR and \f(CW\*(C`\-t\*(C'\fR switches can now be used together without messing
up which categories of warnings are activated. (Rafael)
.IP "Duping \s-1UTF\-8\s0 filehandles" 4
.IX Item "Duping UTF-8 filehandles"
Duping a filehandle which has the \f(CW\*(C`:utf8\*(C'\fR PerlIO layer set will now
properly carry that layer on the duped filehandle. (Rafael)
.IP "Localisation of hash elements" 4
.IX Item "Localisation of hash elements"
Localizing a hash element whose key was given as a variable didn't work
correctly if the variable was changed while the \fIlocal()\fR was in effect (as
in \f(CW\*(C`local $h{$x}; ++$x\*(C'\fR). (Bo Lindbergh)
.SH "New or Changed Diagnostics"
.IX Header "New or Changed Diagnostics"
.IP "Use of uninitialized value" 4
.IX Item "Use of uninitialized value"
Perl will now try to tell you the name of the variable (if any) that was
undefined.
.IP "Deprecated use of \fImy()\fR in false conditional" 4
.IX Item "Deprecated use of my() in false conditional"
A new deprecation warning, \fIDeprecated use of \fImy()\fI in false conditional\fR,
has been added, to warn against the use of the dubious and deprecated
construct
.Sp
.Vb 1
\&    my $x if 0;
.Ve
.Sp
See perldiag. Use \f(CW\*(C`state\*(C'\fR variables instead.
.IP "!=~ should be !~" 4
.IX Item "!=~ should be !~"
A new warning, \f(CW\*(C`!=~ should be !~\*(C'\fR, is emitted to prevent this misspelling
of the non-matching operator.
.IP "Newline in left-justified string" 4
.IX Item "Newline in left-justified string"
The warning \fINewline in left-justified string\fR has been removed.
.ie n .IP "Too late for ""\-T"" option" 4
.el .IP "Too late for ``\-T'' option" 4
.IX Item "Too late for -T option"
The error \fIToo late for \*(L"\-T\*(R" option\fR has been reformulated to be more
descriptive.
.ie n .IP """%s"" variable %s masks earlier declaration" 4
.el .IP "``%s'' variable \f(CW%s\fR masks earlier declaration" 4
.IX Item "%s variable %s masks earlier declaration"
This warning is now emitted in more consistent cases; in short, when one
of the declarations involved is a \f(CW\*(C`my\*(C'\fR variable:
.Sp
.Vb 3
\&    my $x;   my $x;     # warns
\&    my $x;  our $x;     # warns
\&    our $x;  my $x;     # warns
.Ve
.Sp
On the other hand, the following:
.Sp
.Vb 1
\&    our $x; our $x;
.Ve
.Sp
now gives a \f(CW\*(C`"our" variable %s redeclared\*(C'\fR warning.
.IP "\fIreaddir()\fR/\fIclosedir()\fR/etc. attempted on invalid dirhandle" 4
.IX Item "readdir()/closedir()/etc. attempted on invalid dirhandle"
These new warnings are now emitted when a dirhandle is used but is
either closed or not really a dirhandle.
.ie n .IP "Opening dirhandle/filehandle %s also as a file/directory" 4
.el .IP "Opening dirhandle/filehandle \f(CW%s\fR also as a file/directory" 4
.IX Item "Opening dirhandle/filehandle %s also as a file/directory"
Two deprecation warnings have been added: (Rafael)
.Sp
.Vb 2
\&    Opening dirhandle %s also as a file
\&    Opening filehandle %s also as a directory
.Ve
.IP "Use of \-P is deprecated" 4
.IX Item "Use of -P is deprecated"
Perl's command-line switch \f(CW\*(C`\-P\*(C'\fR is now deprecated.
.IP "v\-string in use/require is non-portable" 4
.IX Item "v-string in use/require is non-portable"
Perl will warn you against potential backwards compatibility problems with
the \f(CW\*(C`use VERSION\*(C'\fR syntax.
.IP "perl \-V" 4
.IX Item "perl -V"
\&\f(CW\*(C`perl \-V\*(C'\fR has several improvements, making it more useable from shell
scripts to get the value of configuration variables. See perlrun for
details.
.SH "Changed Internals"
.IX Header "Changed Internals"
In general, the source code of perl has been refactored, tidied up,
and optimized in many places. Also, memory management and allocation
has been improved in several points.
.PP
When compiling the perl core with gcc, as many gcc warning flags are
turned on as is possible on the platform.  (This quest for cleanliness
doesn't extend to \s-1XS\s0 code because we cannot guarantee the tidiness of
code we didn't write.)  Similar strictness flags have been added or
tightened for various other C compilers.
.SS "Reordering of SVt_* constants"
.IX Subsection "Reordering of SVt_* constants"
The relative ordering of constants that define the various types of \f(CW\*(C`SV\*(C'\fR
have changed; in particular, \f(CW\*(C`SVt_PVGV\*(C'\fR has been moved before \f(CW\*(C`SVt_PVLV\*(C'\fR,
\&\f(CW\*(C`SVt_PVAV\*(C'\fR, \f(CW\*(C`SVt_PVHV\*(C'\fR and \f(CW\*(C`SVt_PVCV\*(C'\fR.  This is unlikely to make any
difference unless you have code that explicitly makes assumptions about that
ordering. (The inheritance hierarchy of \f(CW\*(C`B::*\*(C'\fR objects has been changed
to reflect this.)
.SS "Elimination of SVt_PVBM"
.IX Subsection "Elimination of SVt_PVBM"
Related to this, the internal type \f(CW\*(C`SVt_PVBM\*(C'\fR has been removed. This
dedicated type of \f(CW\*(C`SV\*(C'\fR was used by the \f(CW\*(C`index\*(C'\fR operator and parts of the
regexp engine to facilitate fast Boyer-Moore matches. Its use internally has
been replaced by \f(CW\*(C`SV\*(C'\fRs of type \f(CW\*(C`SVt_PVGV\*(C'\fR.
.SS "New type SVt_BIND"
.IX Subsection "New type SVt_BIND"
A new type \f(CW\*(C`SVt_BIND\*(C'\fR has been added, in readiness for the project to
implement Perl 6 on 5. There deliberately is no implementation yet, and
they cannot yet be created or destroyed.
.SS "Removal of \s-1CPP\s0 symbols"
.IX Subsection "Removal of CPP symbols"
The C preprocessor symbols \f(CW\*(C`PERL_PM_APIVERSION\*(C'\fR and
\&\f(CW\*(C`PERL_XS_APIVERSION\*(C'\fR, which were supposed to give the version number of
the oldest perl binary-compatible (resp. source-compatible) with the
present one, were not used, and sometimes had misleading values. They have
been removed.
.SS "Less space is used by ops"
.IX Subsection "Less space is used by ops"
The \f(CW\*(C`BASEOP\*(C'\fR structure now uses less space. The \f(CW\*(C`op_seq\*(C'\fR field has been
removed and replaced by a single bit bit-field \f(CW\*(C`op_opt\*(C'\fR. \f(CW\*(C`op_type\*(C'\fR is now 9
bits long. (Consequently, the \f(CW\*(C`B::OP\*(C'\fR class doesn't provide an \f(CW\*(C`seq\*(C'\fR
method anymore.)
.SS "New parser"
.IX Subsection "New parser"
perl's parser is now generated by bison (it used to be generated by
byacc.) As a result, it seems to be a bit more robust.
.PP
Also, Dave Mitchell improved the lexer debugging output under \f(CW\*(C`\-DT\*(C'\fR.
.ie n .SS "Use of ""const"""
.el .SS "Use of \f(CWconst\fP"
.IX Subsection "Use of const"
Andy Lester supplied many improvements to determine which function
parameters and local variables could actually be declared \f(CW\*(C`const\*(C'\fR to the C
compiler. Steve Peters provided new \f(CW*_set\fR macros and reworked the core to
use these rather than assigning to macros in \s-1LVALUE\s0 context.
.SS "Mathoms"
.IX Subsection "Mathoms"
A new file, \fImathoms.c\fR, has been added. It contains functions that are
no longer used in the perl core, but that remain available for binary or
source compatibility reasons. However, those functions will not be
compiled in if you add \f(CW\*(C`\-DNO_MATHOMS\*(C'\fR in the compiler flags.
.ie n .SS """AvFLAGS"" has been removed"
.el .SS "\f(CWAvFLAGS\fP has been removed"
.IX Subsection "AvFLAGS has been removed"
The \f(CW\*(C`AvFLAGS\*(C'\fR macro has been removed.
.ie n .SS """av_*"" changes"
.el .SS "\f(CWav_*\fP changes"
.IX Subsection "av_* changes"
The \f(CW\*(C`av_*()\*(C'\fR functions, used to manipulate arrays, no longer accept null
\&\f(CW\*(C`AV*\*(C'\fR parameters.
.SS "$^H and %^H"
.IX Subsection "$^H and %^H"
The implementation of the special variables $^H and %^H has changed, to
allow implementing lexical pragmas in pure Perl.
.SS "B:: modules inheritance changed"
.IX Subsection "B:: modules inheritance changed"
The inheritance hierarchy of \f(CW\*(C`B::\*(C'\fR modules has changed; \f(CW\*(C`B::NV\*(C'\fR now
inherits from \f(CW\*(C`B::SV\*(C'\fR (it used to inherit from \f(CW\*(C`B::IV\*(C'\fR).
.SS "Anonymous hash and array constructors"
.IX Subsection "Anonymous hash and array constructors"
The anonymous hash and array constructors now take 1 op in the optree
instead of 3, now that pp_anonhash and pp_anonlist return a reference to
an hash/array when the op is flagged with OPf_SPECIAL. (Nicholas Clark)
.SH "Known Problems"
.IX Header "Known Problems"
There's still a remaining problem in the implementation of the lexical
\&\f(CW$_\fR: it doesn't work inside \f(CW\*(C`/(?{...})/\*(C'\fR blocks. (See the \s-1TODO\s0 test in
\&\fIt/op/mydef.t\fR.)
.PP
Stacked filetest operators won't work when the \f(CW\*(C`filetest\*(C'\fR pragma is in
effect, because they rely on the \fIstat()\fR buffer \f(CW\*(C`_\*(C'\fR being populated, and
filetest bypasses \fIstat()\fR.
.SS "\s-1UTF\-8\s0 problems"
.IX Subsection "UTF-8 problems"
The handling of Unicode still is unclean in several places, where it's
dependent on whether a string is internally flagged as \s-1UTF\-8.\s0 This will
be made more consistent in perl 5.12, but that won't be possible without
a certain amount of backwards incompatibility.
.SH "Platform Specific Problems"
.IX Header "Platform Specific Problems"
When compiled with g++ and thread support on Linux, it's reported that the
\&\f(CW$!\fR stops working correctly. This is related to the fact that the glibc
provides two \fIstrerror_r\fR\|(3) implementation, and perl selects the wrong
one.
.SH "Reporting Bugs"
.IX Header "Reporting Bugs"
If you find what you think is a bug, you might check the articles
recently posted to the comp.lang.perl.misc newsgroup and the perl
bug database at http://rt.perl.org/rt3/ .  There may also be
information at http://www.perl.org/ , the Perl Home Page.
.PP
If you believe you have an unreported bug, please run the \fBperlbug\fR
program included with your release.  Be sure to trim your bug down
to a tiny but sufficient test case.  Your bug report, along with the
output of \f(CW\*(C`perl \-V\*(C'\fR, will be sent off to perlbug@perl.org to be
analysed by the Perl porting team.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
The \fIChanges\fR file and the perl590delta to perl595delta man pages for
exhaustive details on what changed.
.PP
The \fI\s-1INSTALL\s0\fR file for how to build Perl.
.PP
The \fI\s-1README\s0\fR file for general stuff.
.PP
The \fIArtistic\fR and \fICopying\fR files for copyright information.
                                                                                                                                                                                                                                                                                                                                                                                                                                         osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perl5101delta.1                              0100644 0001750 0001750 00000177407 12566207431 023241  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERL5101DELTA 1"
.TH PERL5101DELTA 1 "2013-11-04" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perl5101delta \- what is new for perl v5.10.1
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document describes differences between the 5.10.0 release and
the 5.10.1 release.
.PP
If you are upgrading from an earlier release such as 5.8.8, first read
the perl5100delta, which describes differences between 5.8.8 and
5.10.0
.SH "Incompatible Changes"
.IX Header "Incompatible Changes"
.SS "Switch statement changes"
.IX Subsection "Switch statement changes"
The handling of complex expressions by the \f(CW\*(C`given\*(C'\fR/\f(CW\*(C`when\*(C'\fR switch
statement has been enhanced. There are two new cases where \f(CW\*(C`when\*(C'\fR now
interprets its argument as a boolean, instead of an expression to be used
in a smart match:
.IP "flip-flop operators" 4
.IX Item "flip-flop operators"
The \f(CW\*(C`..\*(C'\fR and \f(CW\*(C`...\*(C'\fR flip-flop operators are now evaluated in boolean
context, following their usual semantics; see \*(L"Range Operators\*(R" in perlop.
.Sp
Note that, as in perl 5.10.0, \f(CW\*(C`when (1..10)\*(C'\fR will not work to test
whether a given value is an integer between 1 and 10; you should use
\&\f(CW\*(C`when ([1..10])\*(C'\fR instead (note the array reference).
.Sp
However, contrary to 5.10.0, evaluating the flip-flop operators in boolean
context ensures it can now be useful in a \f(CW\*(C`when()\*(C'\fR, notably for
implementing bistable conditions, like in:
.Sp
.Vb 3
\&    when (/^=begin/ .. /^=end/) {
\&      # do something
\&    }
.Ve
.IP "defined-or operator" 4
.IX Item "defined-or operator"
A compound expression involving the defined-or operator, as in
\&\f(CW\*(C`when (expr1 // expr2)\*(C'\fR, will be treated as boolean if the first
expression is boolean. (This just extends the existing rule that applies
to the regular or operator, as in \f(CW\*(C`when (expr1 || expr2)\*(C'\fR.)
.PP
The next section details more changes brought to the semantics to
the smart match operator, that naturally also modify the behaviour
of the switch statements where smart matching is implicitly used.
.SS "Smart match changes"
.IX Subsection "Smart match changes"
\fIChanges to type-based dispatch\fR
.IX Subsection "Changes to type-based dispatch"
.PP
The smart match operator \f(CW\*(C`~~\*(C'\fR is no longer commutative. The behaviour of
a smart match now depends primarily on the type of its right hand
argument. Moreover, its semantics have been adjusted for greater
consistency or usefulness in several cases. While the general backwards
compatibility is maintained, several changes must be noted:
.IP "\(bu" 4
Code references with an empty prototype are no longer treated specially.
They are passed an argument like the other code references (even if they
choose to ignore it).
.IP "\(bu" 4
\&\f(CW\*(C`%hash ~~ sub {}\*(C'\fR and \f(CW\*(C`@array ~~ sub {}\*(C'\fR now test that the subroutine
returns a true value for each key of the hash (or element of the
array), instead of passing the whole hash or array as a reference to
the subroutine.
.IP "\(bu" 4
Due to the commutativity breakage, code references are no longer
treated specially when appearing on the left of the \f(CW\*(C`~~\*(C'\fR operator,
but like any vulgar scalar.
.IP "\(bu" 4
\&\f(CW\*(C`undef ~~ %hash\*(C'\fR is always false (since \f(CW\*(C`undef\*(C'\fR can't be a key in a
hash). No implicit conversion to \f(CW""\fR is done (as was the case in perl
5.10.0).
.IP "\(bu" 4
\&\f(CW\*(C`$scalar ~~ @array\*(C'\fR now always distributes the smart match across the
elements of the array. It's true if one element in \f(CW@array\fR verifies
\&\f(CW\*(C`$scalar ~~ $element\*(C'\fR. This is a generalization of the old behaviour
that tested whether the array contained the scalar.
.PP
The full dispatch table for the smart match operator is given in
\&\*(L"Smart matching in detail\*(R" in perlsyn.
.PP
\fISmart match and overloading\fR
.IX Subsection "Smart match and overloading"
.PP
According to the rule of dispatch based on the rightmost argument type,
when an object overloading \f(CW\*(C`~~\*(C'\fR appears on the right side of the
operator, the overload routine will always be called (with a 3rd argument
set to a true value, see overload.) However, when the object will
appear on the left, the overload routine will be called only when the
rightmost argument is a simple scalar. This way distributivity of smart match
across arrays is not broken, as well as the other behaviours with complex
types (coderefs, hashes, regexes). Thus, writers of overloading routines
for smart match mostly need to worry only with comparing against a scalar,
and possibly with stringification overloading; the other common cases
will be automatically handled consistently.
.PP
\&\f(CW\*(C`~~\*(C'\fR will now refuse to work on objects that do not overload it (in order
to avoid relying on the object's underlying structure). (However, if the
object overloads the stringification or the numification operators, and
if overload fallback is active, it will be used instead, as usual.)
.SS "Other incompatible changes"
.IX Subsection "Other incompatible changes"
.IP "\(bu" 4
The semantics of \f(CW\*(C`use feature :5.10*\*(C'\fR have changed slightly.
See \*(L"Modules and Pragmata\*(R" for more information.
.IP "\(bu" 4
It is now a run-time error to use the smart match operator \f(CW\*(C`~~\*(C'\fR
with an object that has no overload defined for it. (This way
\&\f(CW\*(C`~~\*(C'\fR will not break encapsulation by matching against the
object's internal representation as a reference.)
.IP "\(bu" 4
The version control system used for the development of the perl
interpreter has been switched from Perforce to git.  This is mainly an
internal issue that only affects people actively working on the perl core;
but it may have minor external visibility, for example in some of details
of the output of \f(CW\*(C`perl \-V\*(C'\fR. See perlrepository for more information.
.IP "\(bu" 4
The internal structure of the \f(CW\*(C`ext/\*(C'\fR directory in the perl source has
been reorganised. In general, a module \f(CW\*(C`Foo::Bar\*(C'\fR whose source was
stored under \fIext/Foo/Bar/\fR is now located under \fIext/Foo\-Bar/\fR. Also,
some modules have been moved from \fIlib/\fR to \fIext/\fR. This is purely a
source tarball change, and should make no difference to the compilation or
installation of perl, unless you have a very customised build process that
explicitly relies on this structure, or which hard-codes the \f(CW\*(C`nonxs_ext\*(C'\fR
\&\fIConfigure\fR parameter. Specifically, this change does not by default
alter the location of any files in the final installation.
.IP "\(bu" 4
As part of the \f(CW\*(C`Test::Harness\*(C'\fR 2.x to 3.x upgrade, the experimental
\&\f(CW\*(C`Test::Harness::Straps\*(C'\fR module has been removed.
See \*(L"Updated Modules\*(R" for more details.
.IP "\(bu" 4
As part of the \f(CW\*(C`ExtUtils::MakeMaker\*(C'\fR upgrade, the
\&\f(CW\*(C`ExtUtils::MakeMaker::bytes\*(C'\fR and \f(CW\*(C`ExtUtils::MakeMaker::vmsish\*(C'\fR modules
have been removed from this distribution.
.IP "\(bu" 4
\&\f(CW\*(C`Module::CoreList\*(C'\fR no longer contains the \f(CW%:patchlevel\fR hash.
.IP "\(bu" 4
This one is actually a change introduced in 5.10.0, but it was missed
from that release's perldelta, so it is mentioned here instead.
.Sp
A bugfix related to the handling of the \f(CW\*(C`/m\*(C'\fR modifier and \f(CW\*(C`qr\*(C'\fR resulted
in a change of behaviour between 5.8.x and 5.10.0:
.Sp
.Vb 2
\&    # matches in 5.8.x, doesn\*(Aqt match in 5.10.0
\&    $re = qr/^bar/; "foo\enbar" =~ /$re/m;
.Ve
.SH "Core Enhancements"
.IX Header "Core Enhancements"
.SS "Unicode Character Database 5.1.0"
.IX Subsection "Unicode Character Database 5.1.0"
The copy of the Unicode Character Database included in Perl 5.10.1 has
been updated to 5.1.0 from 5.0.0. See
<http://www.unicode.org/versions/Unicode5.1.0/#Notable_Changes> for the
notable changes.
.SS "A proper interface for pluggable Method Resolution Orders"
.IX Subsection "A proper interface for pluggable Method Resolution Orders"
As of Perl 5.10.1 there is a new interface for plugging and using method
resolution orders other than the default (linear depth first search).
The C3 method resolution order added in 5.10.0 has been re-implemented as
a plugin, without changing its Perl-space interface. See perlmroapi for
more information.
.ie n .SS "The ""overloading"" pragma"
.el .SS "The \f(CWoverloading\fP pragma"
.IX Subsection "The overloading pragma"
This pragma allows you to lexically disable or enable overloading
for some or all operations. (Yuval Kogman)
.SS "Parallel tests"
.IX Subsection "Parallel tests"
The core distribution can now run its regression tests in parallel on
Unix-like platforms. Instead of running \f(CW\*(C`make test\*(C'\fR, set \f(CW\*(C`TEST_JOBS\*(C'\fR in
your environment to the number of tests to run in parallel, and run
\&\f(CW\*(C`make test_harness\*(C'\fR. On a Bourne-like shell, this can be done as
.PP
.Vb 1
\&    TEST_JOBS=3 make test_harness  # Run 3 tests in parallel
.Ve
.PP
An environment variable is used, rather than parallel make itself, because
TAP::Harness needs to be able to schedule individual non-conflicting test
scripts itself, and there is no standard interface to \f(CW\*(C`make\*(C'\fR utilities to
interact with their job schedulers.
.PP
Note that currently some test scripts may fail when run in parallel (most
notably \f(CW\*(C`ext/IO/t/io_dir.t\*(C'\fR). If necessary run just the failing scripts
again sequentially and see if the failures go away.
.SS "DTrace support"
.IX Subsection "DTrace support"
Some support for DTrace has been added. See \*(L"DTrace support\*(R" in \fI\s-1INSTALL\s0\fR.
.ie n .SS "Support for ""configure_requires"" in \s-1CPAN\s0 module metadata"
.el .SS "Support for \f(CWconfigure_requires\fP in \s-1CPAN\s0 module metadata"
.IX Subsection "Support for configure_requires in CPAN module metadata"
Both \f(CW\*(C`CPAN\*(C'\fR and \f(CW\*(C`CPANPLUS\*(C'\fR now support the \f(CW\*(C`configure_requires\*(C'\fR keyword
in the \f(CW\*(C`META.yml\*(C'\fR metadata file included in most recent \s-1CPAN\s0 distributions.
This allows distribution authors to specify configuration prerequisites that
must be installed before running \fIMakefile.PL\fR or \fIBuild.PL\fR.
.PP
See the documentation for \f(CW\*(C`ExtUtils::MakeMaker\*(C'\fR or \f(CW\*(C`Module::Build\*(C'\fR for more
on how to specify \f(CW\*(C`configure_requires\*(C'\fR when creating a distribution for \s-1CPAN.\s0
.SH "Modules and Pragmata"
.IX Header "Modules and Pragmata"
.SS "New Modules and Pragmata"
.IX Subsection "New Modules and Pragmata"
.ie n .IP """autodie""" 4
.el .IP "\f(CWautodie\fR" 4
.IX Item "autodie"
This is a new lexically-scoped alternative for the \f(CW\*(C`Fatal\*(C'\fR module.
The bundled version is 2.06_01. Note that in this release, using a string
eval when \f(CW\*(C`autodie\*(C'\fR is in effect can cause the autodie behaviour to leak
into the surrounding scope. See \*(L"\s-1BUGS\*(R"\s0 in autodie for more details.
.ie n .IP """Compress::Raw::Bzip2""" 4
.el .IP "\f(CWCompress::Raw::Bzip2\fR" 4
.IX Item "Compress::Raw::Bzip2"
This has been added to the core (version 2.020).
.ie n .IP """parent""" 4
.el .IP "\f(CWparent\fR" 4
.IX Item "parent"
This pragma establishes an \s-1ISA\s0 relationship with base classes at compile
time. It provides the key feature of \f(CW\*(C`base\*(C'\fR without the feature creep.
.ie n .IP """Parse::CPAN::Meta""" 4
.el .IP "\f(CWParse::CPAN::Meta\fR" 4
.IX Item "Parse::CPAN::Meta"
This has been added to the core (version 1.39).
.SS "Pragmata Changes"
.IX Subsection "Pragmata Changes"
.ie n .IP """attributes""" 4
.el .IP "\f(CWattributes\fR" 4
.IX Item "attributes"
Upgraded from version 0.08 to 0.09.
.ie n .IP """attrs""" 4
.el .IP "\f(CWattrs\fR" 4
.IX Item "attrs"
Upgraded from version 1.02 to 1.03.
.ie n .IP """base""" 4
.el .IP "\f(CWbase\fR" 4
.IX Item "base"
Upgraded from version 2.13 to 2.14. See parent for a replacement.
.ie n .IP """bigint""" 4
.el .IP "\f(CWbigint\fR" 4
.IX Item "bigint"
Upgraded from version 0.22 to 0.23.
.ie n .IP """bignum""" 4
.el .IP "\f(CWbignum\fR" 4
.IX Item "bignum"
Upgraded from version 0.22 to 0.23.
.ie n .IP """bigrat""" 4
.el .IP "\f(CWbigrat\fR" 4
.IX Item "bigrat"
Upgraded from version 0.22 to 0.23.
.ie n .IP """charnames""" 4
.el .IP "\f(CWcharnames\fR" 4
.IX Item "charnames"
Upgraded from version 1.06 to 1.07.
.Sp
The Unicode \fINameAliases.txt\fR database file has been added. This has the
effect of adding some extra \f(CW\*(C`\eN\*(C'\fR character names that formerly wouldn't
have been recognised; for example, \f(CW"\eN{LATIN CAPITAL LETTER GHA}"\fR.
.ie n .IP """constant""" 4
.el .IP "\f(CWconstant\fR" 4
.IX Item "constant"
Upgraded from version 1.13 to 1.17.
.ie n .IP """feature""" 4
.el .IP "\f(CWfeature\fR" 4
.IX Item "feature"
The meaning of the \f(CW\*(C`:5.10\*(C'\fR and \f(CW\*(C`:5.10.X\*(C'\fR feature bundles has
changed slightly. The last component, if any (i.e. \f(CW\*(C`X\*(C'\fR) is simply ignored.
This is predicated on the assumption that new features will not, in
general, be added to maintenance releases. So \f(CW\*(C`:5.10\*(C'\fR and \f(CW\*(C`:5.10.X\*(C'\fR
have identical effect. This is a change to the behaviour documented for
5.10.0.
.ie n .IP """fields""" 4
.el .IP "\f(CWfields\fR" 4
.IX Item "fields"
Upgraded from version 2.13 to 2.14 (this was just a version bump; there
were no functional changes).
.ie n .IP """lib""" 4
.el .IP "\f(CWlib\fR" 4
.IX Item "lib"
Upgraded from version 0.5565 to 0.62.
.ie n .IP """open""" 4
.el .IP "\f(CWopen\fR" 4
.IX Item "open"
Upgraded from version 1.06 to 1.07.
.ie n .IP """overload""" 4
.el .IP "\f(CWoverload\fR" 4
.IX Item "overload"
Upgraded from version 1.06 to 1.07.
.ie n .IP """overloading""" 4
.el .IP "\f(CWoverloading\fR" 4
.IX Item "overloading"
See "The \f(CW\*(C`overloading\*(C'\fR pragma" above.
.ie n .IP """version""" 4
.el .IP "\f(CWversion\fR" 4
.IX Item "version"
Upgraded from version 0.74 to 0.77.
.SS "Updated Modules"
.IX Subsection "Updated Modules"
.ie n .IP """Archive::Extract""" 4
.el .IP "\f(CWArchive::Extract\fR" 4
.IX Item "Archive::Extract"
Upgraded from version 0.24 to 0.34.
.ie n .IP """Archive::Tar""" 4
.el .IP "\f(CWArchive::Tar\fR" 4
.IX Item "Archive::Tar"
Upgraded from version 1.38 to 1.52.
.ie n .IP """Attribute::Handlers""" 4
.el .IP "\f(CWAttribute::Handlers\fR" 4
.IX Item "Attribute::Handlers"
Upgraded from version 0.79 to 0.85.
.ie n .IP """AutoLoader""" 4
.el .IP "\f(CWAutoLoader\fR" 4
.IX Item "AutoLoader"
Upgraded from version 5.63 to 5.68.
.ie n .IP """AutoSplit""" 4
.el .IP "\f(CWAutoSplit\fR" 4
.IX Item "AutoSplit"
Upgraded from version 1.05 to 1.06.
.ie n .IP """B""" 4
.el .IP "\f(CWB\fR" 4
.IX Item "B"
Upgraded from version 1.17 to 1.22.
.ie n .IP """B::Debug""" 4
.el .IP "\f(CWB::Debug\fR" 4
.IX Item "B::Debug"
Upgraded from version 1.05 to 1.11.
.ie n .IP """B::Deparse""" 4
.el .IP "\f(CWB::Deparse\fR" 4
.IX Item "B::Deparse"
Upgraded from version 0.83 to 0.89.
.ie n .IP """B::Lint""" 4
.el .IP "\f(CWB::Lint\fR" 4
.IX Item "B::Lint"
Upgraded from version 1.09 to 1.11.
.ie n .IP """B::Xref""" 4
.el .IP "\f(CWB::Xref\fR" 4
.IX Item "B::Xref"
Upgraded from version 1.01 to 1.02.
.ie n .IP """Benchmark""" 4
.el .IP "\f(CWBenchmark\fR" 4
.IX Item "Benchmark"
Upgraded from version 1.10 to 1.11.
.ie n .IP """Carp""" 4
.el .IP "\f(CWCarp\fR" 4
.IX Item "Carp"
Upgraded from version 1.08 to 1.11.
.ie n .IP """CGI""" 4
.el .IP "\f(CWCGI\fR" 4
.IX Item "CGI"
Upgraded from version 3.29 to 3.43.
(also includes the \*(L"default_value for \fIpopup_menu()\fR\*(R" fix from 3.45).
.ie n .IP """Compress::Zlib""" 4
.el .IP "\f(CWCompress::Zlib\fR" 4
.IX Item "Compress::Zlib"
Upgraded from version 2.008 to 2.020.
.ie n .IP """CPAN""" 4
.el .IP "\f(CWCPAN\fR" 4
.IX Item "CPAN"
Upgraded from version 1.9205 to 1.9402. \f(CW\*(C`CPAN::FTP\*(C'\fR has a local fix to
stop it being too verbose on download failure.
.ie n .IP """CPANPLUS""" 4
.el .IP "\f(CWCPANPLUS\fR" 4
.IX Item "CPANPLUS"
Upgraded from version 0.84 to 0.88.
.ie n .IP """CPANPLUS::Dist::Build""" 4
.el .IP "\f(CWCPANPLUS::Dist::Build\fR" 4
.IX Item "CPANPLUS::Dist::Build"
Upgraded from version 0.06_02 to 0.36.
.ie n .IP """Cwd""" 4
.el .IP "\f(CWCwd\fR" 4
.IX Item "Cwd"
Upgraded from version 3.25_01 to 3.30.
.ie n .IP """Data::Dumper""" 4
.el .IP "\f(CWData::Dumper\fR" 4
.IX Item "Data::Dumper"
Upgraded from version 2.121_14 to 2.124.
.ie n .IP """DB""" 4
.el .IP "\f(CWDB\fR" 4
.IX Item "DB"
Upgraded from version 1.01 to 1.02.
.ie n .IP """DB_File""" 4
.el .IP "\f(CWDB_File\fR" 4
.IX Item "DB_File"
Upgraded from version 1.816_1 to 1.820.
.ie n .IP """Devel::PPPort""" 4
.el .IP "\f(CWDevel::PPPort\fR" 4
.IX Item "Devel::PPPort"
Upgraded from version 3.13 to 3.19.
.ie n .IP """Digest::MD5""" 4
.el .IP "\f(CWDigest::MD5\fR" 4
.IX Item "Digest::MD5"
Upgraded from version 2.36_01 to 2.39.
.ie n .IP """Digest::SHA""" 4
.el .IP "\f(CWDigest::SHA\fR" 4
.IX Item "Digest::SHA"
Upgraded from version 5.45 to 5.47.
.ie n .IP """DirHandle""" 4
.el .IP "\f(CWDirHandle\fR" 4
.IX Item "DirHandle"
Upgraded from version 1.01 to 1.03.
.ie n .IP """Dumpvalue""" 4
.el .IP "\f(CWDumpvalue\fR" 4
.IX Item "Dumpvalue"
Upgraded from version 1.12 to 1.13.
.ie n .IP """DynaLoader""" 4
.el .IP "\f(CWDynaLoader\fR" 4
.IX Item "DynaLoader"
Upgraded from version 1.08 to 1.10.
.ie n .IP """Encode""" 4
.el .IP "\f(CWEncode\fR" 4
.IX Item "Encode"
Upgraded from version 2.23 to 2.35.
.ie n .IP """Errno""" 4
.el .IP "\f(CWErrno\fR" 4
.IX Item "Errno"
Upgraded from version 1.10 to 1.11.
.ie n .IP """Exporter""" 4
.el .IP "\f(CWExporter\fR" 4
.IX Item "Exporter"
Upgraded from version 5.62 to 5.63.
.ie n .IP """ExtUtils::CBuilder""" 4
.el .IP "\f(CWExtUtils::CBuilder\fR" 4
.IX Item "ExtUtils::CBuilder"
Upgraded from version 0.21 to 0.2602.
.ie n .IP """ExtUtils::Command""" 4
.el .IP "\f(CWExtUtils::Command\fR" 4
.IX Item "ExtUtils::Command"
Upgraded from version 1.13 to 1.16.
.ie n .IP """ExtUtils::Constant""" 4
.el .IP "\f(CWExtUtils::Constant\fR" 4
.IX Item "ExtUtils::Constant"
Upgraded from 0.20 to 0.22. (Note that neither of these versions are
available on \s-1CPAN.\s0)
.ie n .IP """ExtUtils::Embed""" 4
.el .IP "\f(CWExtUtils::Embed\fR" 4
.IX Item "ExtUtils::Embed"
Upgraded from version 1.27 to 1.28.
.ie n .IP """ExtUtils::Install""" 4
.el .IP "\f(CWExtUtils::Install\fR" 4
.IX Item "ExtUtils::Install"
Upgraded from version 1.44 to 1.54.
.ie n .IP """ExtUtils::MakeMaker""" 4
.el .IP "\f(CWExtUtils::MakeMaker\fR" 4
.IX Item "ExtUtils::MakeMaker"
Upgraded from version 6.42 to 6.55_02.
.Sp
Note that \f(CW\*(C`ExtUtils::MakeMaker::bytes\*(C'\fR and \f(CW\*(C`ExtUtils::MakeMaker::vmsish\*(C'\fR
have been removed from this distribution.
.ie n .IP """ExtUtils::Manifest""" 4
.el .IP "\f(CWExtUtils::Manifest\fR" 4
.IX Item "ExtUtils::Manifest"
Upgraded from version 1.51_01 to 1.56.
.ie n .IP """ExtUtils::ParseXS""" 4
.el .IP "\f(CWExtUtils::ParseXS\fR" 4
.IX Item "ExtUtils::ParseXS"
Upgraded from version 2.18_02 to 2.2002.
.ie n .IP """Fatal""" 4
.el .IP "\f(CWFatal\fR" 4
.IX Item "Fatal"
Upgraded from version 1.05 to 2.06_01. See also the new pragma \f(CW\*(C`autodie\*(C'\fR.
.ie n .IP """File::Basename""" 4
.el .IP "\f(CWFile::Basename\fR" 4
.IX Item "File::Basename"
Upgraded from version 2.76 to 2.77.
.ie n .IP """File::Compare""" 4
.el .IP "\f(CWFile::Compare\fR" 4
.IX Item "File::Compare"
Upgraded from version 1.1005 to 1.1006.
.ie n .IP """File::Copy""" 4
.el .IP "\f(CWFile::Copy\fR" 4
.IX Item "File::Copy"
Upgraded from version 2.11 to 2.14.
.ie n .IP """File::Fetch""" 4
.el .IP "\f(CWFile::Fetch\fR" 4
.IX Item "File::Fetch"
Upgraded from version 0.14 to 0.20.
.ie n .IP """File::Find""" 4
.el .IP "\f(CWFile::Find\fR" 4
.IX Item "File::Find"
Upgraded from version 1.12 to 1.14.
.ie n .IP """File::Path""" 4
.el .IP "\f(CWFile::Path\fR" 4
.IX Item "File::Path"
Upgraded from version 2.04 to 2.07_03.
.ie n .IP """File::Spec""" 4
.el .IP "\f(CWFile::Spec\fR" 4
.IX Item "File::Spec"
Upgraded from version 3.2501 to 3.30.
.ie n .IP """File::stat""" 4
.el .IP "\f(CWFile::stat\fR" 4
.IX Item "File::stat"
Upgraded from version 1.00 to 1.01.
.ie n .IP """File::Temp""" 4
.el .IP "\f(CWFile::Temp\fR" 4
.IX Item "File::Temp"
Upgraded from version 0.18 to 0.22.
.ie n .IP """FileCache""" 4
.el .IP "\f(CWFileCache\fR" 4
.IX Item "FileCache"
Upgraded from version 1.07 to 1.08.
.ie n .IP """FileHandle""" 4
.el .IP "\f(CWFileHandle\fR" 4
.IX Item "FileHandle"
Upgraded from version 2.01 to 2.02.
.ie n .IP """Filter::Simple""" 4
.el .IP "\f(CWFilter::Simple\fR" 4
.IX Item "Filter::Simple"
Upgraded from version 0.82 to 0.84.
.ie n .IP """Filter::Util::Call""" 4
.el .IP "\f(CWFilter::Util::Call\fR" 4
.IX Item "Filter::Util::Call"
Upgraded from version 1.07 to 1.08.
.ie n .IP """FindBin""" 4
.el .IP "\f(CWFindBin\fR" 4
.IX Item "FindBin"
Upgraded from version 1.49 to 1.50.
.ie n .IP """GDBM_File""" 4
.el .IP "\f(CWGDBM_File\fR" 4
.IX Item "GDBM_File"
Upgraded from version 1.08 to 1.09.
.ie n .IP """Getopt::Long""" 4
.el .IP "\f(CWGetopt::Long\fR" 4
.IX Item "Getopt::Long"
Upgraded from version 2.37 to 2.38.
.ie n .IP """Hash::Util::FieldHash""" 4
.el .IP "\f(CWHash::Util::FieldHash\fR" 4
.IX Item "Hash::Util::FieldHash"
Upgraded from version 1.03 to 1.04. This fixes a memory leak.
.ie n .IP """I18N::Collate""" 4
.el .IP "\f(CWI18N::Collate\fR" 4
.IX Item "I18N::Collate"
Upgraded from version 1.00 to 1.01.
.ie n .IP """IO""" 4
.el .IP "\f(CWIO\fR" 4
.IX Item "IO"
Upgraded from version 1.23_01 to 1.25.
.Sp
This makes non-blocking mode work on Windows in \f(CW\*(C`IO::Socket::INET\*(C'\fR
[\s-1CPAN\s0 #43573].
.ie n .IP """IO::Compress::*""" 4
.el .IP "\f(CWIO::Compress::*\fR" 4
.IX Item "IO::Compress::*"
Upgraded from version 2.008 to 2.020.
.ie n .IP """IO::Dir""" 4
.el .IP "\f(CWIO::Dir\fR" 4
.IX Item "IO::Dir"
Upgraded from version 1.06 to 1.07.
.ie n .IP """IO::Handle""" 4
.el .IP "\f(CWIO::Handle\fR" 4
.IX Item "IO::Handle"
Upgraded from version 1.27 to 1.28.
.ie n .IP """IO::Socket""" 4
.el .IP "\f(CWIO::Socket\fR" 4
.IX Item "IO::Socket"
Upgraded from version 1.30_01 to 1.31.
.ie n .IP """IO::Zlib""" 4
.el .IP "\f(CWIO::Zlib\fR" 4
.IX Item "IO::Zlib"
Upgraded from version 1.07 to 1.09.
.ie n .IP """IPC::Cmd""" 4
.el .IP "\f(CWIPC::Cmd\fR" 4
.IX Item "IPC::Cmd"
Upgraded from version 0.40_1 to 0.46.
.ie n .IP """IPC::Open3""" 4
.el .IP "\f(CWIPC::Open3\fR" 4
.IX Item "IPC::Open3"
Upgraded from version 1.02 to 1.04.
.ie n .IP """IPC::SysV""" 4
.el .IP "\f(CWIPC::SysV\fR" 4
.IX Item "IPC::SysV"
Upgraded from version 1.05 to 2.01.
.ie n .IP """lib""" 4
.el .IP "\f(CWlib\fR" 4
.IX Item "lib"
Upgraded from version 0.5565 to 0.62.
.ie n .IP """List::Util""" 4
.el .IP "\f(CWList::Util\fR" 4
.IX Item "List::Util"
Upgraded from version 1.19 to 1.21.
.ie n .IP """Locale::MakeText""" 4
.el .IP "\f(CWLocale::MakeText\fR" 4
.IX Item "Locale::MakeText"
Upgraded from version 1.12 to 1.13.
.ie n .IP """Log::Message""" 4
.el .IP "\f(CWLog::Message\fR" 4
.IX Item "Log::Message"
Upgraded from version 0.01 to 0.02.
.ie n .IP """Math::BigFloat""" 4
.el .IP "\f(CWMath::BigFloat\fR" 4
.IX Item "Math::BigFloat"
Upgraded from version 1.59 to 1.60.
.ie n .IP """Math::BigInt""" 4
.el .IP "\f(CWMath::BigInt\fR" 4
.IX Item "Math::BigInt"
Upgraded from version 1.88 to 1.89.
.ie n .IP """Math::BigInt::FastCalc""" 4
.el .IP "\f(CWMath::BigInt::FastCalc\fR" 4
.IX Item "Math::BigInt::FastCalc"
Upgraded from version 0.16 to 0.19.
.ie n .IP """Math::BigRat""" 4
.el .IP "\f(CWMath::BigRat\fR" 4
.IX Item "Math::BigRat"
Upgraded from version 0.21 to 0.22.
.ie n .IP """Math::Complex""" 4
.el .IP "\f(CWMath::Complex\fR" 4
.IX Item "Math::Complex"
Upgraded from version 1.37 to 1.56.
.ie n .IP """Math::Trig""" 4
.el .IP "\f(CWMath::Trig\fR" 4
.IX Item "Math::Trig"
Upgraded from version 1.04 to 1.20.
.ie n .IP """Memoize""" 4
.el .IP "\f(CWMemoize\fR" 4
.IX Item "Memoize"
Upgraded from version 1.01_02 to 1.01_03 (just a minor documentation
change).
.ie n .IP """Module::Build""" 4
.el .IP "\f(CWModule::Build\fR" 4
.IX Item "Module::Build"
Upgraded from version 0.2808_01 to 0.34_02.
.ie n .IP """Module::CoreList""" 4
.el .IP "\f(CWModule::CoreList\fR" 4
.IX Item "Module::CoreList"
Upgraded from version 2.13 to 2.18. This release no longer contains the
\&\f(CW%Module::CoreList::patchlevel\fR hash.
.ie n .IP """Module::Load""" 4
.el .IP "\f(CWModule::Load\fR" 4
.IX Item "Module::Load"
Upgraded from version 0.12 to 0.16.
.ie n .IP """Module::Load::Conditional""" 4
.el .IP "\f(CWModule::Load::Conditional\fR" 4
.IX Item "Module::Load::Conditional"
Upgraded from version 0.22 to 0.30.
.ie n .IP """Module::Loaded""" 4
.el .IP "\f(CWModule::Loaded\fR" 4
.IX Item "Module::Loaded"
Upgraded from version 0.01 to 0.02.
.ie n .IP """Module::Pluggable""" 4
.el .IP "\f(CWModule::Pluggable\fR" 4
.IX Item "Module::Pluggable"
Upgraded from version 3.6 to 3.9.
.ie n .IP """NDBM_File""" 4
.el .IP "\f(CWNDBM_File\fR" 4
.IX Item "NDBM_File"
Upgraded from version 1.07 to 1.08.
.ie n .IP """Net::Ping""" 4
.el .IP "\f(CWNet::Ping\fR" 4
.IX Item "Net::Ping"
Upgraded from version 2.33 to 2.36.
.ie n .IP """NEXT""" 4
.el .IP "\f(CWNEXT\fR" 4
.IX Item "NEXT"
Upgraded from version 0.60_01 to 0.64.
.ie n .IP """Object::Accessor""" 4
.el .IP "\f(CWObject::Accessor\fR" 4
.IX Item "Object::Accessor"
Upgraded from version 0.32 to 0.34.
.ie n .IP """OS2::REXX""" 4
.el .IP "\f(CWOS2::REXX\fR" 4
.IX Item "OS2::REXX"
Upgraded from version 1.03 to 1.04.
.ie n .IP """Package::Constants""" 4
.el .IP "\f(CWPackage::Constants\fR" 4
.IX Item "Package::Constants"
Upgraded from version 0.01 to 0.02.
.ie n .IP """PerlIO""" 4
.el .IP "\f(CWPerlIO\fR" 4
.IX Item "PerlIO"
Upgraded from version 1.04 to 1.06.
.ie n .IP """PerlIO::via""" 4
.el .IP "\f(CWPerlIO::via\fR" 4
.IX Item "PerlIO::via"
Upgraded from version 0.04 to 0.07.
.ie n .IP """Pod::Man""" 4
.el .IP "\f(CWPod::Man\fR" 4
.IX Item "Pod::Man"
Upgraded from version 2.16 to 2.22.
.ie n .IP """Pod::Parser""" 4
.el .IP "\f(CWPod::Parser\fR" 4
.IX Item "Pod::Parser"
Upgraded from version 1.35 to 1.37.
.ie n .IP """Pod::Simple""" 4
.el .IP "\f(CWPod::Simple\fR" 4
.IX Item "Pod::Simple"
Upgraded from version 3.05 to 3.07.
.ie n .IP """Pod::Text""" 4
.el .IP "\f(CWPod::Text\fR" 4
.IX Item "Pod::Text"
Upgraded from version 3.08 to 3.13.
.ie n .IP """POSIX""" 4
.el .IP "\f(CWPOSIX\fR" 4
.IX Item "POSIX"
Upgraded from version 1.13 to 1.17.
.ie n .IP """Safe""" 4
.el .IP "\f(CWSafe\fR" 4
.IX Item "Safe"
Upgraded from 2.12 to 2.18.
.ie n .IP """Scalar::Util""" 4
.el .IP "\f(CWScalar::Util\fR" 4
.IX Item "Scalar::Util"
Upgraded from version 1.19 to 1.21.
.ie n .IP """SelectSaver""" 4
.el .IP "\f(CWSelectSaver\fR" 4
.IX Item "SelectSaver"
Upgraded from 1.01 to 1.02.
.ie n .IP """SelfLoader""" 4
.el .IP "\f(CWSelfLoader\fR" 4
.IX Item "SelfLoader"
Upgraded from 1.11 to 1.17.
.ie n .IP """Socket""" 4
.el .IP "\f(CWSocket\fR" 4
.IX Item "Socket"
Upgraded from 1.80 to 1.82.
.ie n .IP """Storable""" 4
.el .IP "\f(CWStorable\fR" 4
.IX Item "Storable"
Upgraded from 2.18 to 2.20.
.ie n .IP """Switch""" 4
.el .IP "\f(CWSwitch\fR" 4
.IX Item "Switch"
Upgraded from version 2.13 to 2.14. Please see \*(L"Deprecations\*(R".
.ie n .IP """Symbol""" 4
.el .IP "\f(CWSymbol\fR" 4
.IX Item "Symbol"
Upgraded from version 1.06 to 1.07.
.ie n .IP """Sys::Syslog""" 4
.el .IP "\f(CWSys::Syslog\fR" 4
.IX Item "Sys::Syslog"
Upgraded from version 0.22 to 0.27.
.ie n .IP """Term::ANSIColor""" 4
.el .IP "\f(CWTerm::ANSIColor\fR" 4
.IX Item "Term::ANSIColor"
Upgraded from version 1.12 to 2.00.
.ie n .IP """Term::ReadLine""" 4
.el .IP "\f(CWTerm::ReadLine\fR" 4
.IX Item "Term::ReadLine"
Upgraded from version 1.03 to 1.04.
.ie n .IP """Term::UI""" 4
.el .IP "\f(CWTerm::UI\fR" 4
.IX Item "Term::UI"
Upgraded from version 0.18 to 0.20.
.ie n .IP """Test::Harness""" 4
.el .IP "\f(CWTest::Harness\fR" 4
.IX Item "Test::Harness"
Upgraded from version 2.64 to 3.17.
.Sp
Note that one side-effect of the 2.x to 3.x upgrade is that the
experimental \f(CW\*(C`Test::Harness::Straps\*(C'\fR module (and its supporting
\&\f(CW\*(C`Assert\*(C'\fR, \f(CW\*(C`Iterator\*(C'\fR, \f(CW\*(C`Point\*(C'\fR and \f(CW\*(C`Results\*(C'\fR modules) have been
removed. If you still need this, then they are available in the
(unmaintained) \f(CW\*(C`Test\-Harness\-Straps\*(C'\fR distribution on \s-1CPAN.\s0
.ie n .IP """Test::Simple""" 4
.el .IP "\f(CWTest::Simple\fR" 4
.IX Item "Test::Simple"
Upgraded from version 0.72 to 0.92.
.ie n .IP """Text::ParseWords""" 4
.el .IP "\f(CWText::ParseWords\fR" 4
.IX Item "Text::ParseWords"
Upgraded from version 3.26 to 3.27.
.ie n .IP """Text::Tabs""" 4
.el .IP "\f(CWText::Tabs\fR" 4
.IX Item "Text::Tabs"
Upgraded from version 2007.1117 to 2009.0305.
.ie n .IP """Text::Wrap""" 4
.el .IP "\f(CWText::Wrap\fR" 4
.IX Item "Text::Wrap"
Upgraded from version 2006.1117 to 2009.0305.
.ie n .IP """Thread::Queue""" 4
.el .IP "\f(CWThread::Queue\fR" 4
.IX Item "Thread::Queue"
Upgraded from version 2.00 to 2.11.
.ie n .IP """Thread::Semaphore""" 4
.el .IP "\f(CWThread::Semaphore\fR" 4
.IX Item "Thread::Semaphore"
Upgraded from version 2.01 to 2.09.
.ie n .IP """threads""" 4
.el .IP "\f(CWthreads\fR" 4
.IX Item "threads"
Upgraded from version 1.67 to 1.72.
.ie n .IP """threads::shared""" 4
.el .IP "\f(CWthreads::shared\fR" 4
.IX Item "threads::shared"
Upgraded from version 1.14 to 1.29.
.ie n .IP """Tie::RefHash""" 4
.el .IP "\f(CWTie::RefHash\fR" 4
.IX Item "Tie::RefHash"
Upgraded from version 1.37 to 1.38.
.ie n .IP """Tie::StdHandle""" 4
.el .IP "\f(CWTie::StdHandle\fR" 4
.IX Item "Tie::StdHandle"
This has documentation changes, and has been assigned a version for the
first time: version 4.2.
.ie n .IP """Time::HiRes""" 4
.el .IP "\f(CWTime::HiRes\fR" 4
.IX Item "Time::HiRes"
Upgraded from version 1.9711 to 1.9719.
.ie n .IP """Time::Local""" 4
.el .IP "\f(CWTime::Local\fR" 4
.IX Item "Time::Local"
Upgraded from version 1.18 to 1.1901.
.ie n .IP """Time::Piece""" 4
.el .IP "\f(CWTime::Piece\fR" 4
.IX Item "Time::Piece"
Upgraded from version 1.12 to 1.15.
.ie n .IP """Unicode::Normalize""" 4
.el .IP "\f(CWUnicode::Normalize\fR" 4
.IX Item "Unicode::Normalize"
Upgraded from version 1.02 to 1.03.
.ie n .IP """Unicode::UCD""" 4
.el .IP "\f(CWUnicode::UCD\fR" 4
.IX Item "Unicode::UCD"
Upgraded from version 0.25 to 0.27.
.Sp
\&\f(CW\*(C`charinfo()\*(C'\fR now works on Unified \s-1CJK\s0 code points added to later versions
of Unicode.
.Sp
\&\f(CW\*(C`casefold()\*(C'\fR has new fields returned to provide both a simpler interface
and previously missing information. The old fields are retained for
backwards compatibility. Information about Turkic-specific code points is
now returned.
.Sp
The documentation has been corrected and expanded.
.ie n .IP """UNIVERSAL""" 4
.el .IP "\f(CWUNIVERSAL\fR" 4
.IX Item "UNIVERSAL"
Upgraded from version 1.04 to 1.05.
.ie n .IP """Win32""" 4
.el .IP "\f(CWWin32\fR" 4
.IX Item "Win32"
Upgraded from version 0.34 to 0.39.
.ie n .IP """Win32API::File""" 4
.el .IP "\f(CWWin32API::File\fR" 4
.IX Item "Win32API::File"
Upgraded from version 0.1001_01 to 0.1101.
.ie n .IP """XSLoader""" 4
.el .IP "\f(CWXSLoader\fR" 4
.IX Item "XSLoader"
Upgraded from version 0.08 to 0.10.
.SH "Utility Changes"
.IX Header "Utility Changes"
.IP "\fIh2ph\fR" 4
.IX Item "h2ph"
Now looks in \f(CW\*(C`include\-fixed\*(C'\fR too, which is a recent addition to gcc's
search path.
.IP "\fIh2xs\fR" 4
.IX Item "h2xs"
No longer incorrectly treats enum values like macros (Daniel Burr).
.Sp
Now handles \*(C+ style constants (\f(CW\*(C`//\*(C'\fR) properly in enums. (A patch from
Rainer Weikusat was used; Daniel Burr also proposed a similar fix).
.IP "\fIperl5db.pl\fR" 4
.IX Item "perl5db.pl"
\&\f(CW\*(C`LVALUE\*(C'\fR subroutines now work under the debugger.
.Sp
The debugger now correctly handles proxy constant subroutines, and
subroutine stubs.
.IP "\fIperlthanks\fR" 4
.IX Item "perlthanks"
Perl 5.10.1 adds a new utility \fIperlthanks\fR, which is a variant of
\&\fIperlbug\fR, but for sending non-bug-reports to the authors and maintainers
of Perl. Getting nothing but bug reports can become a bit demoralising:
we'll see if this changes things.
.SH "New Documentation"
.IX Header "New Documentation"
.IP "perlhaiku" 4
.IX Item "perlhaiku"
This contains instructions on how to build perl for the Haiku platform.
.IP "perlmroapi" 4
.IX Item "perlmroapi"
This describes the new interface for pluggable Method Resolution Orders.
.IP "perlperf" 4
.IX Item "perlperf"
This document, by Richard Foley, provides an introduction to the use of
performance and optimization techniques which can be used with particular
reference to perl programs.
.IP "perlrepository" 4
.IX Item "perlrepository"
This describes how to access the perl source using the \fIgit\fR version
control system.
.IP "perlthanks" 4
.IX Item "perlthanks"
This describes the new \fIperlthanks\fR utility.
.SH "Changes to Existing Documentation"
.IX Header "Changes to Existing Documentation"
The various large \f(CW\*(C`Changes*\*(C'\fR files (which listed every change made to perl
over the last 18 years) have been removed, and replaced by a small file,
also called \f(CW\*(C`Changes\*(C'\fR, which just explains how that same information may
be extracted from the git version control system.
.PP
The file \fIPorting/patching.pod\fR has been deleted, as it mainly described
interacting with the old Perforce-based repository, which is now obsolete.
Information still relevant has been moved to perlrepository.
.PP
perlapi, perlintern, perlmodlib and perltoc are now all
generated at build time, rather than being shipped as part of the release.
.SH "Performance Enhancements"
.IX Header "Performance Enhancements"
.IP "\(bu" 4
A new internal cache means that \f(CW\*(C`isa()\*(C'\fR will often be faster.
.IP "\(bu" 4
Under \f(CW\*(C`use locale\*(C'\fR, the locale-relevant information is now cached on
read-only values, such as the list returned by \f(CW\*(C`keys %hash\*(C'\fR. This makes
operations such as \f(CW\*(C`sort keys %hash\*(C'\fR in the scope of \f(CW\*(C`use locale\*(C'\fR much
faster.
.IP "\(bu" 4
Empty \f(CW\*(C`DESTROY\*(C'\fR methods are no longer called.
.SH "Installation and Configuration Improvements"
.IX Header "Installation and Configuration Improvements"
.SS "\fIext/\fP reorganisation"
.IX Subsection "ext/ reorganisation"
The layout of directories in \fIext\fR has been revised. Specifically, all
extensions are now flat, and at the top level, with \f(CW\*(C`/\*(C'\fR in pathnames
replaced by \f(CW\*(C`\-\*(C'\fR, so that \fIext/Data/Dumper/\fR is now \fIext/Data\-Dumper/\fR,
etc.  The names of the extensions as specified to \fIConfigure\fR, and as
reported by \f(CW%Config::Config\fR under the keys \f(CW\*(C`dynamic_ext\*(C'\fR,
\&\f(CW\*(C`known_extensions\*(C'\fR, \f(CW\*(C`nonxs_ext\*(C'\fR and \f(CW\*(C`static_ext\*(C'\fR have not changed, and
still use \f(CW\*(C`/\*(C'\fR. Hence this change will not have any affect once perl is
installed. However, \f(CW\*(C`Attribute::Handlers\*(C'\fR, \f(CW\*(C`Safe\*(C'\fR and \f(CW\*(C`mro\*(C'\fR have now
become extensions in their own right, so if you run \fIConfigure\fR with
options to specify an exact list of extensions to build, you will need to
change it to account for this.
.PP
For 5.10.2, it is planned that many dual-life modules will have been moved
from \fIlib\fR to \fIext\fR; again this will have no effect on an installed
perl, but will matter if you invoke \fIConfigure\fR with a pre-canned list of
extensions to build.
.SS "Configuration improvements"
.IX Subsection "Configuration improvements"
If \f(CW\*(C`vendorlib\*(C'\fR and \f(CW\*(C`vendorarch\*(C'\fR are the same, then they are only added to
\&\f(CW@INC\fR once.
.PP
\&\f(CW$Config{usedevel}\fR and the C\-level \f(CW\*(C`PERL_USE_DEVEL\*(C'\fR are now defined if
perl is built with  \f(CW\*(C`\-Dusedevel\*(C'\fR.
.PP
\&\fIConfigure\fR will enable use of \f(CW\*(C`\-fstack\-protector\*(C'\fR, to provide protection
against stack-smashing attacks, if the compiler supports it.
.PP
\&\fIConfigure\fR will now determine the correct prototypes for re-entrant
functions, and for \f(CW\*(C`gconvert\*(C'\fR, if you are using a \*(C+ compiler rather
than a C compiler.
.PP
On Unix, if you build from a tree containing a git repository, the
configuration process will note the commit hash you have checked out, for
display in the output of \f(CW\*(C`perl \-v\*(C'\fR and \f(CW\*(C`perl \-V\*(C'\fR. Unpushed local commits
are automatically added to the list of local patches displayed by
\&\f(CW\*(C`perl \-V\*(C'\fR.
.SS "Compilation improvements"
.IX Subsection "Compilation improvements"
As part of the flattening of \fIext\fR, all extensions on all platforms are
built by \fImake_ext.pl\fR. This replaces the Unix-specific
\&\fIext/util/make_ext\fR, VMS-specific \fImake_ext.com\fR and Win32\-specific
\&\fIwin32/buildext.pl\fR.
.SS "Platform Specific Changes"
.IX Subsection "Platform Specific Changes"
.IP "\s-1AIX\s0" 4
.IX Item "AIX"
Removed \fIlibbsd\fR for \s-1AIX 5L\s0 and 6.1. Only \fIflock()\fR was used from \fIlibbsd\fR.
.Sp
Removed \fIlibgdbm\fR for \s-1AIX 5L\s0 and 6.1. The \fIlibgdbm\fR is delivered as an
optional package with the \s-1AIX\s0 Toolbox. Unfortunately the 64 bit version 
is broken.
.Sp
Hints changes mean that \s-1AIX 4.2\s0 should work again.
.IP "Cygwin" 4
.IX Item "Cygwin"
On Cygwin we now strip the last number from the \s-1DLL.\s0 This has been the
behaviour in the cygwin.com build for years. The hints files have been
updated.
.IP "FreeBSD" 4
.IX Item "FreeBSD"
The hints files now identify the correct threading libraries on FreeBSD 7
and later.
.IP "Irix" 4
.IX Item "Irix"
We now work around a bizarre preprocessor bug in the Irix 6.5 compiler:
\&\f(CW\*(C`cc \-E \-\*(C'\fR unfortunately goes into K&R mode, but \f(CW\*(C`cc \-E file.c\*(C'\fR doesn't.
.IP "Haiku" 4
.IX Item "Haiku"
Patches from the Haiku maintainers have been merged in. Perl should now
build on Haiku.
.IP "MirOS \s-1BSD\s0" 4
.IX Item "MirOS BSD"
Perl should now build on MirOS \s-1BSD.\s0
.IP "NetBSD" 4
.IX Item "NetBSD"
Hints now supports versions 5.*.
.IP "Stratus \s-1VOS\s0" 4
.IX Item "Stratus VOS"
Various changes from Stratus have been merged in.
.IP "Symbian" 4
.IX Item "Symbian"
There is now support for Symbian S60 3.2 \s-1SDK\s0 and S60 5.0 \s-1SDK.\s0
.IP "Win32" 4
.IX Item "Win32"
Improved message window handling means that \f(CW\*(C`alarm\*(C'\fR and \f(CW\*(C`kill\*(C'\fR messages
will no longer be dropped under race conditions.
.IP "\s-1VMS\s0" 4
.IX Item "VMS"
Reads from the in-memory temporary files of \f(CW\*(C`PerlIO::scalar\*(C'\fR used to fail
if \f(CW$/\fR was set to a numeric reference (to indicate record-style reads).
This is now fixed.
.Sp
\&\s-1VMS\s0 now supports \f(CW\*(C`getgrgid\*(C'\fR.
.Sp
Many improvements and cleanups have been made to the \s-1VMS\s0 file name handling
and conversion code.
.Sp
Enabling the \f(CW\*(C`PERL_VMS_POSIX_EXIT\*(C'\fR logical name now encodes a \s-1POSIX\s0 exit
status in a \s-1VMS\s0 condition value for better interaction with \s-1GNV\s0's bash
shell and other utilities that depend on \s-1POSIX\s0 exit values.  See
\&\*(L"$?\*(R" in perlvms for details.
.SH "Selected Bug Fixes"
.IX Header "Selected Bug Fixes"
.IP "\(bu" 4
5.10.0 inadvertently disabled an optimisation, which caused a measurable
performance drop in list assignment, such as is often used to assign
function parameters from \f(CW@_\fR. The optimisation has been re-instated, and
the performance regression fixed.
.IP "\(bu" 4
Fixed memory leak on \f(CW\*(C`while (1) { map 1, 1 }\*(C'\fR [\s-1RT\s0 #53038].
.IP "\(bu" 4
Some potential coredumps in PerlIO fixed [\s-1RT\s0 #57322,54828].
.IP "\(bu" 4
The debugger now works with lvalue subroutines.
.IP "\(bu" 4
The debugger's \f(CW\*(C`m\*(C'\fR command was broken on modules that defined constants
[\s-1RT\s0 #61222].
.IP "\(bu" 4
\&\f(CW\*(C`crypt()\*(C'\fR and string complement could return tainted values for untainted
arguments [\s-1RT\s0 #59998].
.IP "\(bu" 4
The \f(CW\*(C`\-i.suffix\*(C'\fR command-line switch now recreates the file using
restricted permissions, before changing its mode to match the original
file. This eliminates a potential race condition [\s-1RT\s0 #60904].
.IP "\(bu" 4
On some Unix systems, the value in \f(CW$?\fR would not have the top bit set
(\f(CW\*(C`$? & 128\*(C'\fR) even if the child core dumped.
.IP "\(bu" 4
Under some circumstances, $^R could incorrectly become undefined
[\s-1RT\s0 #57042].
.IP "\(bu" 4
(\s-1XS\s0) In various hash functions, passing a pre-computed hash to when the
key is \s-1UTF\-8\s0 might result in an incorrect lookup.
.IP "\(bu" 4
(\s-1XS\s0) Including \fI\s-1XSUB\s0.h\fR before \fIperl.h\fR gave a compile-time error
[\s-1RT\s0 #57176].
.IP "\(bu" 4
\&\f(CW\*(C`$object\->isa(\*(AqFoo\*(Aq)\*(C'\fR would report false if the package \f(CW\*(C`Foo\*(C'\fR didn't
exist, even if the object's \f(CW@ISA\fR contained \f(CW\*(C`Foo\*(C'\fR.
.IP "\(bu" 4
Various bugs in the new-to 5.10.0 mro code, triggered by manipulating
\&\f(CW@ISA\fR, have been found and fixed.
.IP "\(bu" 4
Bitwise operations on references could crash the interpreter, e.g.
\&\f(CW\*(C`$x=\e$y; $x |= "foo"\*(C'\fR [\s-1RT\s0 #54956].
.IP "\(bu" 4
Patterns including alternation might be sensitive to the internal \s-1UTF\-8\s0
representation, e.g.
.Sp
.Vb 3
\&    my $byte = chr(192);
\&    my $utf8 = chr(192); utf8::upgrade($utf8);
\&    $utf8 =~ /$byte|X}/i;       # failed in 5.10.0
.Ve
.IP "\(bu" 4
Within UTF8\-encoded Perl source files (i.e. where \f(CW\*(C`use utf8\*(C'\fR is in
effect), double-quoted literal strings could be corrupted where a \f(CW\*(C`\exNN\*(C'\fR,
\&\f(CW\*(C`\e0NNN\*(C'\fR or \f(CW\*(C`\eN{}\*(C'\fR is followed by a literal character with ordinal value
greater than 255 [\s-1RT\s0 #59908].
.IP "\(bu" 4
\&\f(CW\*(C`B::Deparse\*(C'\fR failed to correctly deparse various constructs:
\&\f(CW\*(C`readpipe STRING\*(C'\fR [\s-1RT\s0 #62428], \f(CW\*(C`CORE::require(STRING)\*(C'\fR [\s-1RT\s0 #62488],
\&\f(CW\*(C`sub foo(_)\*(C'\fR [\s-1RT\s0 #62484].
.IP "\(bu" 4
Using \f(CW\*(C`setpgrp()\*(C'\fR with no arguments could corrupt the perl stack.
.IP "\(bu" 4
The block form of \f(CW\*(C`eval\*(C'\fR is now specifically trappable by \f(CW\*(C`Safe\*(C'\fR and
\&\f(CW\*(C`ops\*(C'\fR.  Previously it was erroneously treated like string \f(CW\*(C`eval\*(C'\fR.
.IP "\(bu" 4
In 5.10.0, the two characters \f(CW\*(C`[~\*(C'\fR were sometimes parsed as the smart
match operator (\f(CW\*(C`~~\*(C'\fR) [\s-1RT\s0 #63854].
.IP "\(bu" 4
In 5.10.0, the \f(CW\*(C`*\*(C'\fR quantifier in patterns was sometimes treated as
\&\f(CW\*(C`{0,32767}\*(C'\fR [\s-1RT\s0 #60034, #60464]. For example, this match would fail:
.Sp
.Vb 1
\&    ("ab" x 32768) =~ /^(ab)*$/
.Ve
.IP "\(bu" 4
\&\f(CW\*(C`shmget\*(C'\fR was limited to a 32 bit segment size on a 64 bit \s-1OS\s0 [\s-1RT\s0 #63924].
.IP "\(bu" 4
Using \f(CW\*(C`next\*(C'\fR or \f(CW\*(C`last\*(C'\fR to exit a \f(CW\*(C`given\*(C'\fR block no longer produces a
spurious warning like the following:
.Sp
.Vb 1
\&    Exiting given via last at foo.pl line 123
.Ve
.IP "\(bu" 4
On Windows, \f(CW\*(Aq.\efoo\*(Aq\fR and \f(CW\*(Aq..\efoo\*(Aq\fR  were treated differently than
\&\f(CW\*(Aq./foo\*(Aq\fR and \f(CW\*(Aq../foo\*(Aq\fR by \f(CW\*(C`do\*(C'\fR and \f(CW\*(C`require\*(C'\fR [\s-1RT\s0 #63492].
.IP "\(bu" 4
Assigning a format to a glob could corrupt the format; e.g.:
.Sp
.Vb 1
\&     *bar=*foo{FORMAT}; # foo format now bad
.Ve
.IP "\(bu" 4
Attempting to coerce a typeglob to a string or number could cause an
assertion failure. The correct error message is now generated,
\&\f(CW\*(C`Can\*(Aqt coerce GLOB to \f(CI$type\f(CW\*(C'\fR.
.IP "\(bu" 4
Under \f(CW\*(C`use filetest \*(Aqaccess\*(Aq\*(C'\fR, \f(CW\*(C`\-x\*(C'\fR was using the wrong access mode. This
has been fixed [\s-1RT\s0 #49003].
.IP "\(bu" 4
\&\f(CW\*(C`length\*(C'\fR on a tied scalar that returned a Unicode value would not be
correct the first time. This has been fixed.
.IP "\(bu" 4
Using an array \f(CW\*(C`tie\*(C'\fR inside in array \f(CW\*(C`tie\*(C'\fR could \s-1SEGV.\s0 This has been
fixed. [\s-1RT\s0 #51636]
.IP "\(bu" 4
A race condition inside \f(CW\*(C`PerlIOStdio_close()\*(C'\fR has been identified and
fixed. This used to cause various threading issues, including SEGVs.
.IP "\(bu" 4
In \f(CW\*(C`unpack\*(C'\fR, the use of \f(CW\*(C`()\*(C'\fR groups in scalar context was internally
placing a list on the interpreter's stack, which manifested in various
ways, including SEGVs.  This is now fixed [\s-1RT\s0 #50256].
.IP "\(bu" 4
Magic was called twice in \f(CW\*(C`substr\*(C'\fR, \f(CW\*(C`\e&$x\*(C'\fR, \f(CW\*(C`tie $x, $m\*(C'\fR and \f(CW\*(C`chop\*(C'\fR.
These have all been fixed.
.IP "\(bu" 4
A 5.10.0 optimisation to clear the temporary stack within the implicit
loop of \f(CW\*(C`s///ge\*(C'\fR has been reverted, as it turned out to be the cause of
obscure bugs in seemingly unrelated parts of the interpreter [commit 
ef0d4e17921ee3de].
.IP "\(bu" 4
The line numbers for warnings inside \f(CW\*(C`elsif\*(C'\fR are now correct.
.IP "\(bu" 4
The \f(CW\*(C`..\*(C'\fR operator now works correctly with ranges whose ends are at or
close to the values of the smallest and largest integers.
.IP "\(bu" 4
\&\f(CW\*(C`binmode STDIN, \*(Aq:raw\*(Aq\*(C'\fR could lead to segmentation faults on some platforms.
This has been fixed [\s-1RT\s0 #54828].
.IP "\(bu" 4
An off-by-one error meant that \f(CW\*(C`index $str, ...\*(C'\fR was effectively being
executed as \f(CW\*(C`index "$str\e0", ...\*(C'\fR. This has been fixed [\s-1RT\s0 #53746].
.IP "\(bu" 4
Various leaks associated with named captures in regexes have been fixed
[\s-1RT\s0 #57024].
.IP "\(bu" 4
A weak reference to a hash would leak. This was affecting \f(CW\*(C`DBI\*(C'\fR
[\s-1RT\s0 #56908].
.IP "\(bu" 4
Using (?|) in a regex could cause a segfault [\s-1RT\s0 #59734].
.IP "\(bu" 4
Use of a \s-1UTF\-8 \s0\f(CW\*(C`tr//\*(C'\fR within a closure could cause a segfault [\s-1RT\s0 #61520].
.IP "\(bu" 4
Calling \f(CW\*(C`sv_chop()\*(C'\fR or otherwise upgrading an \s-1SV\s0 could result in an
unaligned 64\-bit access on the \s-1SPARC\s0 architecture [\s-1RT\s0 #60574].
.IP "\(bu" 4
In the 5.10.0 release, \f(CW\*(C`inc_version_list\*(C'\fR would incorrectly list
\&\f(CW\*(C`5.10.*\*(C'\fR after \f(CW\*(C`5.8.*\*(C'\fR; this affected the \f(CW@INC\fR search order
[\s-1RT\s0 #67628].
.IP "\(bu" 4
In 5.10.0, \f(CW\*(C`pack "a*", $tainted_value\*(C'\fR returned a non-tainted value
[\s-1RT\s0 #52552].
.IP "\(bu" 4
In 5.10.0, \f(CW\*(C`printf\*(C'\fR and \f(CW\*(C`sprintf\*(C'\fR could produce the fatal error
\&\f(CW\*(C`panic: utf8_mg_pos_cache_update\*(C'\fR when printing \s-1UTF\-8\s0 strings
[\s-1RT\s0 #62666].
.IP "\(bu" 4
In the 5.10.0 release, a dynamically created \f(CW\*(C`AUTOLOAD\*(C'\fR method might be
missed (method cache issue) [\s-1RT\s0 #60220,60232].
.IP "\(bu" 4
In the 5.10.0 release, a combination of \f(CW\*(C`use feature\*(C'\fR and \f(CW\*(C`//ee\*(C'\fR could
cause a memory leak [\s-1RT\s0 #63110].
.IP "\(bu" 4
\&\f(CW\*(C`\-C\*(C'\fR on the shebang (\f(CW\*(C`#!\*(C'\fR) line is once more permitted if it is also
specified on the command line. \f(CW\*(C`\-C\*(C'\fR on the shebang line used to be a
silent no-op \fIif\fR it was not also on the command line, so perl 5.10.0
disallowed it, which broke some scripts. Now perl checks whether it is
also on the command line and only dies if it is not [\s-1RT\s0 #67880].
.IP "\(bu" 4
In 5.10.0, certain types of re-entrant regular expression could crash,
or cause the following assertion failure [\s-1RT\s0 #60508]:
.Sp
.Vb 1
\&    Assertion rx\->sublen >= (s \- rx\->subbeg) + i failed
.Ve
.SH "New or Changed Diagnostics"
.IX Header "New or Changed Diagnostics"
.ie n .IP """panic: sv_chop %s""" 4
.el .IP "\f(CWpanic: sv_chop %s\fR" 4
.IX Item "panic: sv_chop %s"
This new fatal error occurs when the C routine \f(CW\*(C`Perl_sv_chop()\*(C'\fR was
passed a position that is not within the scalar's string buffer. This
could be caused by buggy \s-1XS\s0 code, and at this point recovery is not
possible.
.ie n .IP """Can\*(Aqt locate package %s for the parents of %s""" 4
.el .IP "\f(CWCan\*(Aqt locate package %s for the parents of %s\fR" 4
.IX Item "Cant locate package %s for the parents of %s"
This warning has been removed. In general, it only got produced in
conjunction with other warnings, and removing it allowed an \s-1ISA\s0 lookup
optimisation to be added.
.ie n .IP """v\-string in use/require is non\-portable""" 4
.el .IP "\f(CWv\-string in use/require is non\-portable\fR" 4
.IX Item "v-string in use/require is non-portable"
This warning has been removed.
.ie n .IP """Deep recursion on subroutine ""%s""""" 4
.el .IP "\f(CWDeep recursion on subroutine ``%s''\fR" 4
.IX Item "Deep recursion on subroutine ""%s"""
It is now possible to change the depth threshold for this warning from the
default of 100, by recompiling the \fIperl\fR binary, setting the C
pre-processor macro \f(CW\*(C`PERL_SUB_DEPTH_WARN\*(C'\fR to the desired value.
.SH "Changed Internals"
.IX Header "Changed Internals"
.IP "\(bu" 4
The J.R.R. Tolkien quotes at the head of C source file have been checked and
proper citations added, thanks to a patch from Tom Christiansen.
.IP "\(bu" 4
\&\f(CW\*(C`vcroak()\*(C'\fR now accepts a null first argument. In addition, a full audit
was made of the \*(L"not \s-1NULL\*(R"\s0 compiler annotations, and those for several
other internal functions were corrected.
.IP "\(bu" 4
New macros \f(CW\*(C`dSAVEDERRNO\*(C'\fR, \f(CW\*(C`dSAVE_ERRNO\*(C'\fR, \f(CW\*(C`SAVE_ERRNO\*(C'\fR, \f(CW\*(C`RESTORE_ERRNO\*(C'\fR
have been added to formalise the temporary saving of the \f(CW\*(C`errno\*(C'\fR
variable.
.IP "\(bu" 4
The function \f(CW\*(C`Perl_sv_insert_flags\*(C'\fR has been added to augment
\&\f(CW\*(C`Perl_sv_insert\*(C'\fR.
.IP "\(bu" 4
The function \f(CW\*(C`Perl_newSV_type(type)\*(C'\fR has been added, equivalent to
\&\f(CW\*(C`Perl_newSV()\*(C'\fR followed by \f(CW\*(C`Perl_sv_upgrade(type)\*(C'\fR.
.IP "\(bu" 4
The function \f(CW\*(C`Perl_newSVpvn_flags()\*(C'\fR has been added, equivalent to
\&\f(CW\*(C`Perl_newSVpvn()\*(C'\fR and then performing the action relevant to the flag.
.Sp
Two flag bits are currently supported.
.RS 4
.ie n .IP """SVf_UTF8""" 4
.el .IP "\f(CWSVf_UTF8\fR" 4
.IX Item "SVf_UTF8"
This will call \f(CW\*(C`SvUTF8_on()\*(C'\fR for you. (Note that this does not convert an
sequence of \s-1ISO 8859\-1\s0 characters to \s-1UTF\-8\s0). A wrapper, \f(CW\*(C`newSVpvn_utf8()\*(C'\fR
is available for this.
.ie n .IP """SVs_TEMP""" 4
.el .IP "\f(CWSVs_TEMP\fR" 4
.IX Item "SVs_TEMP"
Call \f(CW\*(C`sv_2mortal()\*(C'\fR on the new \s-1SV.\s0
.RE
.RS 4
.Sp
There is also a wrapper that takes constant strings, \f(CW\*(C`newSVpvs_flags()\*(C'\fR.
.RE
.IP "\(bu" 4
The function \f(CW\*(C`Perl_croak_xs_usage\*(C'\fR has been added as a wrapper to
\&\f(CW\*(C`Perl_croak\*(C'\fR.
.IP "\(bu" 4
The functions \f(CW\*(C`PerlIO_find_layer\*(C'\fR and \f(CW\*(C`PerlIO_list_alloc\*(C'\fR are now
exported.
.IP "\(bu" 4
\&\f(CW\*(C`PL_na\*(C'\fR has been exterminated from the core code, replaced by local \s-1STRLEN\s0
temporaries, or \f(CW\*(C`*_nolen()\*(C'\fR calls. Either approach is faster than \f(CW\*(C`PL_na\*(C'\fR,
which is a pointer deference into the interpreter structure under ithreads,
and a global variable otherwise.
.IP "\(bu" 4
\&\f(CW\*(C`Perl_mg_free()\*(C'\fR used to leave freed memory accessible via \fISvMAGIC()\fR on
the scalar. It now updates the linked list to remove each piece of magic
as it is freed.
.IP "\(bu" 4
Under ithreads, the regex in \f(CW\*(C`PL_reg_curpm\*(C'\fR is now reference counted. This
eliminates a lot of hackish workarounds to cope with it not being reference
counted.
.IP "\(bu" 4
\&\f(CW\*(C`Perl_mg_magical()\*(C'\fR would sometimes incorrectly turn on \f(CW\*(C`SvRMAGICAL()\*(C'\fR.
This has been fixed.
.IP "\(bu" 4
The \fIpublic\fR \s-1IV\s0 and \s-1NV\s0 flags are now not set if the string value has
trailing \*(L"garbage\*(R". This behaviour is consistent with not setting the
public \s-1IV\s0 or \s-1NV\s0 flags if the value is out of range for the type.
.IP "\(bu" 4
\&\s-1SV\s0 allocation tracing has been added to the diagnostics enabled by \f(CW\*(C`\-Dm\*(C'\fR.
The tracing can alternatively output via the \f(CW\*(C`PERL_MEM_LOG\*(C'\fR mechanism, if
that was enabled when the \fIperl\fR binary was compiled.
.IP "\(bu" 4
Uses of \f(CW\*(C`Nullav\*(C'\fR, \f(CW\*(C`Nullcv\*(C'\fR, \f(CW\*(C`Nullhv\*(C'\fR, \f(CW\*(C`Nullop\*(C'\fR, \f(CW\*(C`Nullsv\*(C'\fR etc have been
replaced by \f(CW\*(C`NULL\*(C'\fR in the core code, and non-dual-life modules, as \f(CW\*(C`NULL\*(C'\fR
is clearer to those unfamiliar with the core code.
.IP "\(bu" 4
A macro \f(CWMUTABLE_PTR(p)\fR has been added, which on (non-pedantic) gcc will
not cast away \f(CW\*(C`const\*(C'\fR, returning a \f(CW\*(C`void *\*(C'\fR. Macros \f(CW\*(C`MUTABLE_SV(av)\*(C'\fR,
\&\f(CW\*(C`MUTABLE_SV(cv)\*(C'\fR etc build on this, casting to \f(CW\*(C`AV *\*(C'\fR etc without
casting away \f(CW\*(C`const\*(C'\fR. This allows proper compile-time auditing of
\&\f(CW\*(C`const\*(C'\fR correctness in the core, and helped picked up some errors (now
fixed).
.IP "\(bu" 4
Macros \f(CW\*(C`mPUSHs()\*(C'\fR and \f(CW\*(C`mXPUSHs()\*(C'\fR have been added, for pushing SVs on the
stack and mortalizing them.
.IP "\(bu" 4
Use of the private structure \f(CW\*(C`mro_meta\*(C'\fR has changed slightly. Nothing
outside the core should be accessing this directly anyway.
.IP "\(bu" 4
A new tool, \f(CW\*(C`Porting/expand\-macro.pl\*(C'\fR has been added, that allows you
to view how a C preprocessor macro would be expanded when compiled.
This is handy when trying to decode the macro hell that is the perl
guts.
.SH "New Tests"
.IX Header "New Tests"
Many modules updated from \s-1CPAN\s0 incorporate new tests.
.PP
Several tests that have the potential to hang forever if they fail now
incorporate a \*(L"watchdog\*(R" functionality that will kill them after a timeout,
which helps ensure that \f(CW\*(C`make test\*(C'\fR and \f(CW\*(C`make test_harness\*(C'\fR run to
completion automatically. (Jerry Hedden).
.PP
Some core-specific tests have been added:
.IP "t/comp/retainedlines.t" 4
.IX Item "t/comp/retainedlines.t"
Check that the debugger can retain source lines from \f(CW\*(C`eval\*(C'\fR.
.IP "t/io/perlio_fail.t" 4
.IX Item "t/io/perlio_fail.t"
Check that bad layers fail.
.IP "t/io/perlio_leaks.t" 4
.IX Item "t/io/perlio_leaks.t"
Check that PerlIO layers are not leaking.
.IP "t/io/perlio_open.t" 4
.IX Item "t/io/perlio_open.t"
Check that certain special forms of open work.
.IP "t/io/perlio.t" 4
.IX Item "t/io/perlio.t"
General PerlIO tests.
.IP "t/io/pvbm.t" 4
.IX Item "t/io/pvbm.t"
Check that there is no unexpected interaction between the internal types
\&\f(CW\*(C`PVBM\*(C'\fR and \f(CW\*(C`PVGV\*(C'\fR.
.IP "t/mro/package_aliases.t" 4
.IX Item "t/mro/package_aliases.t"
Check that mro works properly in the presence of aliased packages.
.IP "t/op/dbm.t" 4
.IX Item "t/op/dbm.t"
Tests for \f(CW\*(C`dbmopen\*(C'\fR and \f(CW\*(C`dbmclose\*(C'\fR.
.IP "t/op/index_thr.t" 4
.IX Item "t/op/index_thr.t"
Tests for the interaction of \f(CW\*(C`index\*(C'\fR and threads.
.IP "t/op/pat_thr.t" 4
.IX Item "t/op/pat_thr.t"
Tests for the interaction of esoteric patterns and threads.
.IP "t/op/qr_gc.t" 4
.IX Item "t/op/qr_gc.t"
Test that \f(CW\*(C`qr\*(C'\fR doesn't leak.
.IP "t/op/reg_email_thr.t" 4
.IX Item "t/op/reg_email_thr.t"
Tests for the interaction of regex recursion and threads.
.IP "t/op/regexp_qr_embed_thr.t" 4
.IX Item "t/op/regexp_qr_embed_thr.t"
Tests for the interaction of patterns with embedded \f(CW\*(C`qr//\*(C'\fR and threads.
.IP "t/op/regexp_unicode_prop.t" 4
.IX Item "t/op/regexp_unicode_prop.t"
Tests for Unicode properties in regular expressions.
.IP "t/op/regexp_unicode_prop_thr.t" 4
.IX Item "t/op/regexp_unicode_prop_thr.t"
Tests for the interaction of Unicode properties and threads.
.IP "t/op/reg_nc_tie.t" 4
.IX Item "t/op/reg_nc_tie.t"
Test the tied methods of \f(CW\*(C`Tie::Hash::NamedCapture\*(C'\fR.
.IP "t/op/reg_posixcc.t" 4
.IX Item "t/op/reg_posixcc.t"
Check that \s-1POSIX\s0 character classes behave consistently.
.IP "t/op/re.t" 4
.IX Item "t/op/re.t"
Check that exportable \f(CW\*(C`re\*(C'\fR functions in \fIuniversal.c\fR work.
.IP "t/op/setpgrpstack.t" 4
.IX Item "t/op/setpgrpstack.t"
Check that \f(CW\*(C`setpgrp\*(C'\fR works.
.IP "t/op/substr_thr.t" 4
.IX Item "t/op/substr_thr.t"
Tests for the interaction of \f(CW\*(C`substr\*(C'\fR and threads.
.IP "t/op/upgrade.t" 4
.IX Item "t/op/upgrade.t"
Check that upgrading and assigning scalars works.
.IP "t/uni/lex_utf8.t" 4
.IX Item "t/uni/lex_utf8.t"
Check that Unicode in the lexer works.
.IP "t/uni/tie.t" 4
.IX Item "t/uni/tie.t"
Check that Unicode and \f(CW\*(C`tie\*(C'\fR work.
.SH "Known Problems"
.IX Header "Known Problems"
This is a list of some significant unfixed bugs, which are regressions
from either 5.10.0 or 5.8.x.
.IP "\(bu" 4
\&\f(CW\*(C`List::Util::first\*(C'\fR misbehaves in the presence of a lexical \f(CW$_\fR
(typically introduced by \f(CW\*(C`my $_\*(C'\fR or implicitly by \f(CW\*(C`given\*(C'\fR). The variable
which gets set for each iteration is the package variable \f(CW$_\fR, not the
lexical \f(CW$_\fR [\s-1RT\s0 #67694].
.Sp
A similar issue may occur in other modules that provide functions which
take a block as their first argument, like
.Sp
.Vb 1
\&    foo { ... $_ ...} list
.Ve
.IP "\(bu" 4
The \f(CW\*(C`charnames\*(C'\fR pragma may generate a run-time error when a regex is
interpolated [\s-1RT\s0 #56444]:
.Sp
.Vb 4
\&    use charnames \*(Aq:full\*(Aq;
\&    my $r1 = qr/\eN{THAI CHARACTER SARA I}/;
\&    "foo" =~ $r1;    # okay
\&    "foo" =~ /$r1+/; # runtime error
.Ve
.Sp
A workaround is to generate the character outside of the regex:
.Sp
.Vb 2
\&    my $a = "\eN{THAI CHARACTER SARA I}";
\&    my $r1 = qr/$a/;
.Ve
.IP "\(bu" 4
Some regexes may run much more slowly when run in a child thread compared
with the thread the pattern was compiled into [\s-1RT\s0 #55600].
.SH "Deprecations"
.IX Header "Deprecations"
The following items are now deprecated.
.IP "\(bu" 4
\&\f(CW\*(C`Switch\*(C'\fR is buggy and should be avoided. From perl 5.11.0 onwards, it is
intended that any use of the core version of this module will emit a
warning, and that the module will eventually be removed from the core
(probably in perl 5.14.0). See \*(L"Switch statements\*(R" in perlsyn for its
replacement.
.IP "\(bu" 4
\&\f(CW\*(C`suidperl\*(C'\fR will be removed in 5.12.0. This provides a mechanism to
emulate setuid permission bits on systems that don't support it properly.
.SH "Acknowledgements"
.IX Header "Acknowledgements"
Some of the work in this release was funded by a \s-1TPF\s0 grant.
.PP
Nicholas Clark officially retired from maintenance pumpking duty at the
end of 2008; however in reality he has put much effort in since then to
help get 5.10.1 into a fit state to be released, including writing a
considerable chunk of this perldelta.
.PP
Steffen Mueller and David Golden in particular helped getting \s-1CPAN\s0 modules
polished and synchronised with their in-core equivalents.
.PP
Craig Berry was tireless in getting maint to run under \s-1VMS,\s0 no matter how
many times we broke it for him.
.PP
The other core committers contributed most of the changes, and applied most
of the patches sent in by the hundreds of contributors listed in \fI\s-1AUTHORS\s0\fR.
.PP
(Sorry to all the people I haven't mentioned by name).
.PP
Finally, thanks to Larry Wall, without whom none of this would be
necessary.
.SH "Reporting Bugs"
.IX Header "Reporting Bugs"
If you find what you think is a bug, you might check the articles
recently posted to the comp.lang.perl.misc newsgroup and the perl
bug database at http://rt.perl.org/perlbug/ .  There may also be
information at http://www.perl.org/ , the Perl Home Page.
.PP
If you believe you have an unreported bug, please run the \fBperlbug\fR
program included with your release.  Be sure to trim your bug down
to a tiny but sufficient test case.  Your bug report, along with the
output of \f(CW\*(C`perl \-V\*(C'\fR, will be sent off to perlbug@perl.org to be
analysed by the Perl porting team.
.PP
If the bug you are reporting has security implications, which make it
inappropriate to send to a publicly archived mailing list, then please send
it to perl5\-security\-report@perl.org. This points to a closed subscription
unarchived mailing list, which includes
all the core committers, who will be able
to help assess the impact of issues, figure out a resolution, and help
co-ordinate the release of patches to mitigate or fix the problem across all
platforms on which Perl is supported. Please only use this address for
security issues in the Perl core, not for modules independently
distributed on \s-1CPAN.\s0
.SH "SEE ALSO"
.IX Header "SEE ALSO"
The \fIChanges\fR file for an explanation of how to view exhaustive details
on what changed.
.PP
The \fI\s-1INSTALL\s0\fR file for how to build Perl.
.PP
The \fI\s-1README\s0\fR file for general stuff.
.PP
The \fIArtistic\fR and \fICopying\fR files for copyright information.
                                                                                                                                                                                                                                                         osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perl5101delta5.16.1                          0100644 0001750 0001750 00000177066 12566207412 023553  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERL5101DELTA 1"
.TH PERL5101DELTA 1 "2013-03-04" "perl v5.16.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perl5101delta \- what is new for perl v5.10.1
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document describes differences between the 5.10.0 release and
the 5.10.1 release.
.PP
If you are upgrading from an earlier release such as 5.8.8, first read
the perl5100delta, which describes differences between 5.8.8 and
5.10.0
.SH "Incompatible Changes"
.IX Header "Incompatible Changes"
.SS "Switch statement changes"
.IX Subsection "Switch statement changes"
The handling of complex expressions by the \f(CW\*(C`given\*(C'\fR/\f(CW\*(C`when\*(C'\fR switch
statement has been enhanced. There are two new cases where \f(CW\*(C`when\*(C'\fR now
interprets its argument as a boolean, instead of an expression to be used
in a smart match:
.IP "flip-flop operators" 4
.IX Item "flip-flop operators"
The \f(CW\*(C`..\*(C'\fR and \f(CW\*(C`...\*(C'\fR flip-flop operators are now evaluated in boolean
context, following their usual semantics; see \*(L"Range Operators\*(R" in perlop.
.Sp
Note that, as in perl 5.10.0, \f(CW\*(C`when (1..10)\*(C'\fR will not work to test
whether a given value is an integer between 1 and 10; you should use
\&\f(CW\*(C`when ([1..10])\*(C'\fR instead (note the array reference).
.Sp
However, contrary to 5.10.0, evaluating the flip-flop operators in boolean
context ensures it can now be useful in a \f(CW\*(C`when()\*(C'\fR, notably for
implementing bistable conditions, like in:
.Sp
.Vb 3
\&    when (/^=begin/ .. /^=end/) {
\&      # do something
\&    }
.Ve
.IP "defined-or operator" 4
.IX Item "defined-or operator"
A compound expression involving the defined-or operator, as in
\&\f(CW\*(C`when (expr1 // expr2)\*(C'\fR, will be treated as boolean if the first
expression is boolean. (This just extends the existing rule that applies
to the regular or operator, as in \f(CW\*(C`when (expr1 || expr2)\*(C'\fR.)
.PP
The next section details more changes brought to the semantics to
the smart match operator, that naturally also modify the behaviour
of the switch statements where smart matching is implicitly used.
.SS "Smart match changes"
.IX Subsection "Smart match changes"
\fIChanges to type-based dispatch\fR
.IX Subsection "Changes to type-based dispatch"
.PP
The smart match operator \f(CW\*(C`~~\*(C'\fR is no longer commutative. The behaviour of
a smart match now depends primarily on the type of its right hand
argument. Moreover, its semantics have been adjusted for greater
consistency or usefulness in several cases. While the general backwards
compatibility is maintained, several changes must be noted:
.IP "\(bu" 4
Code references with an empty prototype are no longer treated specially.
They are passed an argument like the other code references (even if they
choose to ignore it).
.IP "\(bu" 4
\&\f(CW\*(C`%hash ~~ sub {}\*(C'\fR and \f(CW\*(C`@array ~~ sub {}\*(C'\fR now test that the subroutine
returns a true value for each key of the hash (or element of the
array), instead of passing the whole hash or array as a reference to
the subroutine.
.IP "\(bu" 4
Due to the commutativity breakage, code references are no longer
treated specially when appearing on the left of the \f(CW\*(C`~~\*(C'\fR operator,
but like any vulgar scalar.
.IP "\(bu" 4
\&\f(CW\*(C`undef ~~ %hash\*(C'\fR is always false (since \f(CW\*(C`undef\*(C'\fR can't be a key in a
hash). No implicit conversion to \f(CW""\fR is done (as was the case in perl
5.10.0).
.IP "\(bu" 4
\&\f(CW\*(C`$scalar ~~ @array\*(C'\fR now always distributes the smart match across the
elements of the array. It's true if one element in \f(CW@array\fR verifies
\&\f(CW\*(C`$scalar ~~ $element\*(C'\fR. This is a generalization of the old behaviour
that tested whether the array contained the scalar.
.PP
The full dispatch table for the smart match operator is given in
\&\*(L"Smart matching in detail\*(R" in perlsyn.
.PP
\fISmart match and overloading\fR
.IX Subsection "Smart match and overloading"
.PP
According to the rule of dispatch based on the rightmost argument type,
when an object overloading \f(CW\*(C`~~\*(C'\fR appears on the right side of the
operator, the overload routine will always be called (with a 3rd argument
set to a true value, see overload.) However, when the object will
appear on the left, the overload routine will be called only when the
rightmost argument is a simple scalar. This way distributivity of smart match
across arrays is not broken, as well as the other behaviours with complex
types (coderefs, hashes, regexes). Thus, writers of overloading routines
for smart match mostly need to worry only with comparing against a scalar,
and possibly with stringification overloading; the other common cases
will be automatically handled consistently.
.PP
\&\f(CW\*(C`~~\*(C'\fR will now refuse to work on objects that do not overload it (in order
to avoid relying on the object's underlying structure). (However, if the
object overloads the stringification or the numification operators, and
if overload fallback is active, it will be used instead, as usual.)
.SS "Other incompatible changes"
.IX Subsection "Other incompatible changes"
.IP "\(bu" 4
The semantics of \f(CW\*(C`use feature :5.10*\*(C'\fR have changed slightly.
See \*(L"Modules and Pragmata\*(R" for more information.
.IP "\(bu" 4
It is now a run-time error to use the smart match operator \f(CW\*(C`~~\*(C'\fR
with an object that has no overload defined for it. (This way
\&\f(CW\*(C`~~\*(C'\fR will not break encapsulation by matching against the
object's internal representation as a reference.)
.IP "\(bu" 4
The version control system used for the development of the perl
interpreter has been switched from Perforce to git.  This is mainly an
internal issue that only affects people actively working on the perl core;
but it may have minor external visibility, for example in some of details
of the output of \f(CW\*(C`perl \-V\*(C'\fR. See perlrepository for more information.
.IP "\(bu" 4
The internal structure of the \f(CW\*(C`ext/\*(C'\fR directory in the perl source has
been reorganised. In general, a module \f(CW\*(C`Foo::Bar\*(C'\fR whose source was
stored under \fIext/Foo/Bar/\fR is now located under \fIext/Foo\-Bar/\fR. Also,
some modules have been moved from \fIlib/\fR to \fIext/\fR. This is purely a
source tarball change, and should make no difference to the compilation or
installation of perl, unless you have a very customised build process that
explicitly relies on this structure, or which hard-codes the \f(CW\*(C`nonxs_ext\*(C'\fR
\&\fIConfigure\fR parameter. Specifically, this change does not by default
alter the location of any files in the final installation.
.IP "\(bu" 4
As part of the \f(CW\*(C`Test::Harness\*(C'\fR 2.x to 3.x upgrade, the experimental
\&\f(CW\*(C`Test::Harness::Straps\*(C'\fR module has been removed.
See \*(L"Updated Modules\*(R" for more details.
.IP "\(bu" 4
As part of the \f(CW\*(C`ExtUtils::MakeMaker\*(C'\fR upgrade, the
\&\f(CW\*(C`ExtUtils::MakeMaker::bytes\*(C'\fR and \f(CW\*(C`ExtUtils::MakeMaker::vmsish\*(C'\fR modules
have been removed from this distribution.
.IP "\(bu" 4
\&\f(CW\*(C`Module::CoreList\*(C'\fR no longer contains the \f(CW%:patchlevel\fR hash.
.IP "\(bu" 4
This one is actually a change introduced in 5.10.0, but it was missed
from that release's perldelta, so it is mentioned here instead.
.Sp
A bugfix related to the handling of the \f(CW\*(C`/m\*(C'\fR modifier and \f(CW\*(C`qr\*(C'\fR resulted
in a change of behaviour between 5.8.x and 5.10.0:
.Sp
.Vb 2
\&    # matches in 5.8.x, doesn\*(Aqt match in 5.10.0
\&    $re = qr/^bar/; "foo\enbar" =~ /$re/m;
.Ve
.SH "Core Enhancements"
.IX Header "Core Enhancements"
.SS "Unicode Character Database 5.1.0"
.IX Subsection "Unicode Character Database 5.1.0"
The copy of the Unicode Character Database included in Perl 5.10.1 has
been updated to 5.1.0 from 5.0.0. See
<http://www.unicode.org/versions/Unicode5.1.0/#Notable_Changes> for the
notable changes.
.SS "A proper interface for pluggable Method Resolution Orders"
.IX Subsection "A proper interface for pluggable Method Resolution Orders"
As of Perl 5.10.1 there is a new interface for plugging and using method
resolution orders other than the default (linear depth first search).
The C3 method resolution order added in 5.10.0 has been re-implemented as
a plugin, without changing its Perl-space interface. See perlmroapi for
more information.
.ie n .SS "The ""overloading"" pragma"
.el .SS "The \f(CWoverloading\fP pragma"
.IX Subsection "The overloading pragma"
This pragma allows you to lexically disable or enable overloading
for some or all operations. (Yuval Kogman)
.SS "Parallel tests"
.IX Subsection "Parallel tests"
The core distribution can now run its regression tests in parallel on
Unix-like platforms. Instead of running \f(CW\*(C`make test\*(C'\fR, set \f(CW\*(C`TEST_JOBS\*(C'\fR in
your environment to the number of tests to run in parallel, and run
\&\f(CW\*(C`make test_harness\*(C'\fR. On a Bourne-like shell, this can be done as
.PP
.Vb 1
\&    TEST_JOBS=3 make test_harness  # Run 3 tests in parallel
.Ve
.PP
An environment variable is used, rather than parallel make itself, because
TAP::Harness needs to be able to schedule individual non-conflicting test
scripts itself, and there is no standard interface to \f(CW\*(C`make\*(C'\fR utilities to
interact with their job schedulers.
.PP
Note that currently some test scripts may fail when run in parallel (most
notably \f(CW\*(C`ext/IO/t/io_dir.t\*(C'\fR). If necessary run just the failing scripts
again sequentially and see if the failures go away.
.SS "DTrace support"
.IX Subsection "DTrace support"
Some support for DTrace has been added. See \*(L"DTrace support\*(R" in \fI\s-1INSTALL\s0\fR.
.ie n .SS "Support for ""configure_requires"" in \s-1CPAN\s0 module metadata"
.el .SS "Support for \f(CWconfigure_requires\fP in \s-1CPAN\s0 module metadata"
.IX Subsection "Support for configure_requires in CPAN module metadata"
Both \f(CW\*(C`CPAN\*(C'\fR and \f(CW\*(C`CPANPLUS\*(C'\fR now support the \f(CW\*(C`configure_requires\*(C'\fR keyword
in the \f(CW\*(C`META.yml\*(C'\fR metadata file included in most recent \s-1CPAN\s0 distributions.
This allows distribution authors to specify configuration prerequisites that
must be installed before running \fIMakefile.PL\fR or \fIBuild.PL\fR.
.PP
See the documentation for \f(CW\*(C`ExtUtils::MakeMaker\*(C'\fR or \f(CW\*(C`Module::Build\*(C'\fR for more
on how to specify \f(CW\*(C`configure_requires\*(C'\fR when creating a distribution for \s-1CPAN\s0.
.SH "Modules and Pragmata"
.IX Header "Modules and Pragmata"
.SS "New Modules and Pragmata"
.IX Subsection "New Modules and Pragmata"
.ie n .IP """autodie""" 4
.el .IP "\f(CWautodie\fR" 4
.IX Item "autodie"
This is a new lexically-scoped alternative for the \f(CW\*(C`Fatal\*(C'\fR module.
The bundled version is 2.06_01. Note that in this release, using a string
eval when \f(CW\*(C`autodie\*(C'\fR is in effect can cause the autodie behaviour to leak
into the surrounding scope. See \*(L"\s-1BUGS\s0\*(R" in autodie for more details.
.ie n .IP """Compress::Raw::Bzip2""" 4
.el .IP "\f(CWCompress::Raw::Bzip2\fR" 4
.IX Item "Compress::Raw::Bzip2"
This has been added to the core (version 2.020).
.ie n .IP """parent""" 4
.el .IP "\f(CWparent\fR" 4
.IX Item "parent"
This pragma establishes an \s-1ISA\s0 relationship with base classes at compile
time. It provides the key feature of \f(CW\*(C`base\*(C'\fR without the feature creep.
.ie n .IP """Parse::CPAN::Meta""" 4
.el .IP "\f(CWParse::CPAN::Meta\fR" 4
.IX Item "Parse::CPAN::Meta"
This has been added to the core (version 1.39).
.SS "Pragmata Changes"
.IX Subsection "Pragmata Changes"
.ie n .IP """attributes""" 4
.el .IP "\f(CWattributes\fR" 4
.IX Item "attributes"
Upgraded from version 0.08 to 0.09.
.ie n .IP """attrs""" 4
.el .IP "\f(CWattrs\fR" 4
.IX Item "attrs"
Upgraded from version 1.02 to 1.03.
.ie n .IP """base""" 4
.el .IP "\f(CWbase\fR" 4
.IX Item "base"
Upgraded from version 2.13 to 2.14. See parent for a replacement.
.ie n .IP """bigint""" 4
.el .IP "\f(CWbigint\fR" 4
.IX Item "bigint"
Upgraded from version 0.22 to 0.23.
.ie n .IP """bignum""" 4
.el .IP "\f(CWbignum\fR" 4
.IX Item "bignum"
Upgraded from version 0.22 to 0.23.
.ie n .IP """bigrat""" 4
.el .IP "\f(CWbigrat\fR" 4
.IX Item "bigrat"
Upgraded from version 0.22 to 0.23.
.ie n .IP """charnames""" 4
.el .IP "\f(CWcharnames\fR" 4
.IX Item "charnames"
Upgraded from version 1.06 to 1.07.
.Sp
The Unicode \fINameAliases.txt\fR database file has been added. This has the
effect of adding some extra \f(CW\*(C`\eN\*(C'\fR character names that formerly wouldn't
have been recognised; for example, \f(CW"\eN{LATIN CAPITAL LETTER GHA}"\fR.
.ie n .IP """constant""" 4
.el .IP "\f(CWconstant\fR" 4
.IX Item "constant"
Upgraded from version 1.13 to 1.17.
.ie n .IP """feature""" 4
.el .IP "\f(CWfeature\fR" 4
.IX Item "feature"
The meaning of the \f(CW\*(C`:5.10\*(C'\fR and \f(CW\*(C`:5.10.X\*(C'\fR feature bundles has
changed slightly. The last component, if any (i.e. \f(CW\*(C`X\*(C'\fR) is simply ignored.
This is predicated on the assumption that new features will not, in
general, be added to maintenance releases. So \f(CW\*(C`:5.10\*(C'\fR and \f(CW\*(C`:5.10.X\*(C'\fR
have identical effect. This is a change to the behaviour documented for
5.10.0.
.ie n .IP """fields""" 4
.el .IP "\f(CWfields\fR" 4
.IX Item "fields"
Upgraded from version 2.13 to 2.14 (this was just a version bump; there
were no functional changes).
.ie n .IP """lib""" 4
.el .IP "\f(CWlib\fR" 4
.IX Item "lib"
Upgraded from version 0.5565 to 0.62.
.ie n .IP """open""" 4
.el .IP "\f(CWopen\fR" 4
.IX Item "open"
Upgraded from version 1.06 to 1.07.
.ie n .IP """overload""" 4
.el .IP "\f(CWoverload\fR" 4
.IX Item "overload"
Upgraded from version 1.06 to 1.07.
.ie n .IP """overloading""" 4
.el .IP "\f(CWoverloading\fR" 4
.IX Item "overloading"
See "The \f(CW\*(C`overloading\*(C'\fR pragma" above.
.ie n .IP """version""" 4
.el .IP "\f(CWversion\fR" 4
.IX Item "version"
Upgraded from version 0.74 to 0.77.
.SS "Updated Modules"
.IX Subsection "Updated Modules"
.ie n .IP """Archive::Extract""" 4
.el .IP "\f(CWArchive::Extract\fR" 4
.IX Item "Archive::Extract"
Upgraded from version 0.24 to 0.34.
.ie n .IP """Archive::Tar""" 4
.el .IP "\f(CWArchive::Tar\fR" 4
.IX Item "Archive::Tar"
Upgraded from version 1.38 to 1.52.
.ie n .IP """Attribute::Handlers""" 4
.el .IP "\f(CWAttribute::Handlers\fR" 4
.IX Item "Attribute::Handlers"
Upgraded from version 0.79 to 0.85.
.ie n .IP """AutoLoader""" 4
.el .IP "\f(CWAutoLoader\fR" 4
.IX Item "AutoLoader"
Upgraded from version 5.63 to 5.68.
.ie n .IP """AutoSplit""" 4
.el .IP "\f(CWAutoSplit\fR" 4
.IX Item "AutoSplit"
Upgraded from version 1.05 to 1.06.
.ie n .IP """B""" 4
.el .IP "\f(CWB\fR" 4
.IX Item "B"
Upgraded from version 1.17 to 1.22.
.ie n .IP """B::Debug""" 4
.el .IP "\f(CWB::Debug\fR" 4
.IX Item "B::Debug"
Upgraded from version 1.05 to 1.11.
.ie n .IP """B::Deparse""" 4
.el .IP "\f(CWB::Deparse\fR" 4
.IX Item "B::Deparse"
Upgraded from version 0.83 to 0.89.
.ie n .IP """B::Lint""" 4
.el .IP "\f(CWB::Lint\fR" 4
.IX Item "B::Lint"
Upgraded from version 1.09 to 1.11.
.ie n .IP """B::Xref""" 4
.el .IP "\f(CWB::Xref\fR" 4
.IX Item "B::Xref"
Upgraded from version 1.01 to 1.02.
.ie n .IP """Benchmark""" 4
.el .IP "\f(CWBenchmark\fR" 4
.IX Item "Benchmark"
Upgraded from version 1.10 to 1.11.
.ie n .IP """Carp""" 4
.el .IP "\f(CWCarp\fR" 4
.IX Item "Carp"
Upgraded from version 1.08 to 1.11.
.ie n .IP """CGI""" 4
.el .IP "\f(CWCGI\fR" 4
.IX Item "CGI"
Upgraded from version 3.29 to 3.43.
(also includes the \*(L"default_value for \fIpopup_menu()\fR\*(R" fix from 3.45).
.ie n .IP """Compress::Zlib""" 4
.el .IP "\f(CWCompress::Zlib\fR" 4
.IX Item "Compress::Zlib"
Upgraded from version 2.008 to 2.020.
.ie n .IP """CPAN""" 4
.el .IP "\f(CWCPAN\fR" 4
.IX Item "CPAN"
Upgraded from version 1.9205 to 1.9402. \f(CW\*(C`CPAN::FTP\*(C'\fR has a local fix to
stop it being too verbose on download failure.
.ie n .IP """CPANPLUS""" 4
.el .IP "\f(CWCPANPLUS\fR" 4
.IX Item "CPANPLUS"
Upgraded from version 0.84 to 0.88.
.ie n .IP """CPANPLUS::Dist::Build""" 4
.el .IP "\f(CWCPANPLUS::Dist::Build\fR" 4
.IX Item "CPANPLUS::Dist::Build"
Upgraded from version 0.06_02 to 0.36.
.ie n .IP """Cwd""" 4
.el .IP "\f(CWCwd\fR" 4
.IX Item "Cwd"
Upgraded from version 3.25_01 to 3.30.
.ie n .IP """Data::Dumper""" 4
.el .IP "\f(CWData::Dumper\fR" 4
.IX Item "Data::Dumper"
Upgraded from version 2.121_14 to 2.124.
.ie n .IP """DB""" 4
.el .IP "\f(CWDB\fR" 4
.IX Item "DB"
Upgraded from version 1.01 to 1.02.
.ie n .IP """DB_File""" 4
.el .IP "\f(CWDB_File\fR" 4
.IX Item "DB_File"
Upgraded from version 1.816_1 to 1.820.
.ie n .IP """Devel::PPPort""" 4
.el .IP "\f(CWDevel::PPPort\fR" 4
.IX Item "Devel::PPPort"
Upgraded from version 3.13 to 3.19.
.ie n .IP """Digest::MD5""" 4
.el .IP "\f(CWDigest::MD5\fR" 4
.IX Item "Digest::MD5"
Upgraded from version 2.36_01 to 2.39.
.ie n .IP """Digest::SHA""" 4
.el .IP "\f(CWDigest::SHA\fR" 4
.IX Item "Digest::SHA"
Upgraded from version 5.45 to 5.47.
.ie n .IP """DirHandle""" 4
.el .IP "\f(CWDirHandle\fR" 4
.IX Item "DirHandle"
Upgraded from version 1.01 to 1.03.
.ie n .IP """Dumpvalue""" 4
.el .IP "\f(CWDumpvalue\fR" 4
.IX Item "Dumpvalue"
Upgraded from version 1.12 to 1.13.
.ie n .IP """DynaLoader""" 4
.el .IP "\f(CWDynaLoader\fR" 4
.IX Item "DynaLoader"
Upgraded from version 1.08 to 1.10.
.ie n .IP """Encode""" 4
.el .IP "\f(CWEncode\fR" 4
.IX Item "Encode"
Upgraded from version 2.23 to 2.35.
.ie n .IP """Errno""" 4
.el .IP "\f(CWErrno\fR" 4
.IX Item "Errno"
Upgraded from version 1.10 to 1.11.
.ie n .IP """Exporter""" 4
.el .IP "\f(CWExporter\fR" 4
.IX Item "Exporter"
Upgraded from version 5.62 to 5.63.
.ie n .IP """ExtUtils::CBuilder""" 4
.el .IP "\f(CWExtUtils::CBuilder\fR" 4
.IX Item "ExtUtils::CBuilder"
Upgraded from version 0.21 to 0.2602.
.ie n .IP """ExtUtils::Command""" 4
.el .IP "\f(CWExtUtils::Command\fR" 4
.IX Item "ExtUtils::Command"
Upgraded from version 1.13 to 1.16.
.ie n .IP """ExtUtils::Constant""" 4
.el .IP "\f(CWExtUtils::Constant\fR" 4
.IX Item "ExtUtils::Constant"
Upgraded from 0.20 to 0.22. (Note that neither of these versions are
available on \s-1CPAN\s0.)
.ie n .IP """ExtUtils::Embed""" 4
.el .IP "\f(CWExtUtils::Embed\fR" 4
.IX Item "ExtUtils::Embed"
Upgraded from version 1.27 to 1.28.
.ie n .IP """ExtUtils::Install""" 4
.el .IP "\f(CWExtUtils::Install\fR" 4
.IX Item "ExtUtils::Install"
Upgraded from version 1.44 to 1.54.
.ie n .IP """ExtUtils::MakeMaker""" 4
.el .IP "\f(CWExtUtils::MakeMaker\fR" 4
.IX Item "ExtUtils::MakeMaker"
Upgraded from version 6.42 to 6.55_02.
.Sp
Note that \f(CW\*(C`ExtUtils::MakeMaker::bytes\*(C'\fR and \f(CW\*(C`ExtUtils::MakeMaker::vmsish\*(C'\fR
have been removed from this distribution.
.ie n .IP """ExtUtils::Manifest""" 4
.el .IP "\f(CWExtUtils::Manifest\fR" 4
.IX Item "ExtUtils::Manifest"
Upgraded from version 1.51_01 to 1.56.
.ie n .IP """ExtUtils::ParseXS""" 4
.el .IP "\f(CWExtUtils::ParseXS\fR" 4
.IX Item "ExtUtils::ParseXS"
Upgraded from version 2.18_02 to 2.2002.
.ie n .IP """Fatal""" 4
.el .IP "\f(CWFatal\fR" 4
.IX Item "Fatal"
Upgraded from version 1.05 to 2.06_01. See also the new pragma \f(CW\*(C`autodie\*(C'\fR.
.ie n .IP """File::Basename""" 4
.el .IP "\f(CWFile::Basename\fR" 4
.IX Item "File::Basename"
Upgraded from version 2.76 to 2.77.
.ie n .IP """File::Compare""" 4
.el .IP "\f(CWFile::Compare\fR" 4
.IX Item "File::Compare"
Upgraded from version 1.1005 to 1.1006.
.ie n .IP """File::Copy""" 4
.el .IP "\f(CWFile::Copy\fR" 4
.IX Item "File::Copy"
Upgraded from version 2.11 to 2.14.
.ie n .IP """File::Fetch""" 4
.el .IP "\f(CWFile::Fetch\fR" 4
.IX Item "File::Fetch"
Upgraded from version 0.14 to 0.20.
.ie n .IP """File::Find""" 4
.el .IP "\f(CWFile::Find\fR" 4
.IX Item "File::Find"
Upgraded from version 1.12 to 1.14.
.ie n .IP """File::Path""" 4
.el .IP "\f(CWFile::Path\fR" 4
.IX Item "File::Path"
Upgraded from version 2.04 to 2.07_03.
.ie n .IP """File::Spec""" 4
.el .IP "\f(CWFile::Spec\fR" 4
.IX Item "File::Spec"
Upgraded from version 3.2501 to 3.30.
.ie n .IP """File::stat""" 4
.el .IP "\f(CWFile::stat\fR" 4
.IX Item "File::stat"
Upgraded from version 1.00 to 1.01.
.ie n .IP """File::Temp""" 4
.el .IP "\f(CWFile::Temp\fR" 4
.IX Item "File::Temp"
Upgraded from version 0.18 to 0.22.
.ie n .IP """FileCache""" 4
.el .IP "\f(CWFileCache\fR" 4
.IX Item "FileCache"
Upgraded from version 1.07 to 1.08.
.ie n .IP """FileHandle""" 4
.el .IP "\f(CWFileHandle\fR" 4
.IX Item "FileHandle"
Upgraded from version 2.01 to 2.02.
.ie n .IP """Filter::Simple""" 4
.el .IP "\f(CWFilter::Simple\fR" 4
.IX Item "Filter::Simple"
Upgraded from version 0.82 to 0.84.
.ie n .IP """Filter::Util::Call""" 4
.el .IP "\f(CWFilter::Util::Call\fR" 4
.IX Item "Filter::Util::Call"
Upgraded from version 1.07 to 1.08.
.ie n .IP """FindBin""" 4
.el .IP "\f(CWFindBin\fR" 4
.IX Item "FindBin"
Upgraded from version 1.49 to 1.50.
.ie n .IP """GDBM_File""" 4
.el .IP "\f(CWGDBM_File\fR" 4
.IX Item "GDBM_File"
Upgraded from version 1.08 to 1.09.
.ie n .IP """Getopt::Long""" 4
.el .IP "\f(CWGetopt::Long\fR" 4
.IX Item "Getopt::Long"
Upgraded from version 2.37 to 2.38.
.ie n .IP """Hash::Util::FieldHash""" 4
.el .IP "\f(CWHash::Util::FieldHash\fR" 4
.IX Item "Hash::Util::FieldHash"
Upgraded from version 1.03 to 1.04. This fixes a memory leak.
.ie n .IP """I18N::Collate""" 4
.el .IP "\f(CWI18N::Collate\fR" 4
.IX Item "I18N::Collate"
Upgraded from version 1.00 to 1.01.
.ie n .IP """IO""" 4
.el .IP "\f(CWIO\fR" 4
.IX Item "IO"
Upgraded from version 1.23_01 to 1.25.
.Sp
This makes non-blocking mode work on Windows in \f(CW\*(C`IO::Socket::INET\*(C'\fR
[\s-1CPAN\s0 #43573].
.ie n .IP """IO::Compress::*""" 4
.el .IP "\f(CWIO::Compress::*\fR" 4
.IX Item "IO::Compress::*"
Upgraded from version 2.008 to 2.020.
.ie n .IP """IO::Dir""" 4
.el .IP "\f(CWIO::Dir\fR" 4
.IX Item "IO::Dir"
Upgraded from version 1.06 to 1.07.
.ie n .IP """IO::Handle""" 4
.el .IP "\f(CWIO::Handle\fR" 4
.IX Item "IO::Handle"
Upgraded from version 1.27 to 1.28.
.ie n .IP """IO::Socket""" 4
.el .IP "\f(CWIO::Socket\fR" 4
.IX Item "IO::Socket"
Upgraded from version 1.30_01 to 1.31.
.ie n .IP """IO::Zlib""" 4
.el .IP "\f(CWIO::Zlib\fR" 4
.IX Item "IO::Zlib"
Upgraded from version 1.07 to 1.09.
.ie n .IP """IPC::Cmd""" 4
.el .IP "\f(CWIPC::Cmd\fR" 4
.IX Item "IPC::Cmd"
Upgraded from version 0.40_1 to 0.46.
.ie n .IP """IPC::Open3""" 4
.el .IP "\f(CWIPC::Open3\fR" 4
.IX Item "IPC::Open3"
Upgraded from version 1.02 to 1.04.
.ie n .IP """IPC::SysV""" 4
.el .IP "\f(CWIPC::SysV\fR" 4
.IX Item "IPC::SysV"
Upgraded from version 1.05 to 2.01.
.ie n .IP """lib""" 4
.el .IP "\f(CWlib\fR" 4
.IX Item "lib"
Upgraded from version 0.5565 to 0.62.
.ie n .IP """List::Util""" 4
.el .IP "\f(CWList::Util\fR" 4
.IX Item "List::Util"
Upgraded from version 1.19 to 1.21.
.ie n .IP """Locale::MakeText""" 4
.el .IP "\f(CWLocale::MakeText\fR" 4
.IX Item "Locale::MakeText"
Upgraded from version 1.12 to 1.13.
.ie n .IP """Log::Message""" 4
.el .IP "\f(CWLog::Message\fR" 4
.IX Item "Log::Message"
Upgraded from version 0.01 to 0.02.
.ie n .IP """Math::BigFloat""" 4
.el .IP "\f(CWMath::BigFloat\fR" 4
.IX Item "Math::BigFloat"
Upgraded from version 1.59 to 1.60.
.ie n .IP """Math::BigInt""" 4
.el .IP "\f(CWMath::BigInt\fR" 4
.IX Item "Math::BigInt"
Upgraded from version 1.88 to 1.89.
.ie n .IP """Math::BigInt::FastCalc""" 4
.el .IP "\f(CWMath::BigInt::FastCalc\fR" 4
.IX Item "Math::BigInt::FastCalc"
Upgraded from version 0.16 to 0.19.
.ie n .IP """Math::BigRat""" 4
.el .IP "\f(CWMath::BigRat\fR" 4
.IX Item "Math::BigRat"
Upgraded from version 0.21 to 0.22.
.ie n .IP """Math::Complex""" 4
.el .IP "\f(CWMath::Complex\fR" 4
.IX Item "Math::Complex"
Upgraded from version 1.37 to 1.56.
.ie n .IP """Math::Trig""" 4
.el .IP "\f(CWMath::Trig\fR" 4
.IX Item "Math::Trig"
Upgraded from version 1.04 to 1.20.
.ie n .IP """Memoize""" 4
.el .IP "\f(CWMemoize\fR" 4
.IX Item "Memoize"
Upgraded from version 1.01_02 to 1.01_03 (just a minor documentation
change).
.ie n .IP """Module::Build""" 4
.el .IP "\f(CWModule::Build\fR" 4
.IX Item "Module::Build"
Upgraded from version 0.2808_01 to 0.34_02.
.ie n .IP """Module::CoreList""" 4
.el .IP "\f(CWModule::CoreList\fR" 4
.IX Item "Module::CoreList"
Upgraded from version 2.13 to 2.18. This release no longer contains the
\&\f(CW%Module::CoreList::patchlevel\fR hash.
.ie n .IP """Module::Load""" 4
.el .IP "\f(CWModule::Load\fR" 4
.IX Item "Module::Load"
Upgraded from version 0.12 to 0.16.
.ie n .IP """Module::Load::Conditional""" 4
.el .IP "\f(CWModule::Load::Conditional\fR" 4
.IX Item "Module::Load::Conditional"
Upgraded from version 0.22 to 0.30.
.ie n .IP """Module::Loaded""" 4
.el .IP "\f(CWModule::Loaded\fR" 4
.IX Item "Module::Loaded"
Upgraded from version 0.01 to 0.02.
.ie n .IP """Module::Pluggable""" 4
.el .IP "\f(CWModule::Pluggable\fR" 4
.IX Item "Module::Pluggable"
Upgraded from version 3.6 to 3.9.
.ie n .IP """NDBM_File""" 4
.el .IP "\f(CWNDBM_File\fR" 4
.IX Item "NDBM_File"
Upgraded from version 1.07 to 1.08.
.ie n .IP """Net::Ping""" 4
.el .IP "\f(CWNet::Ping\fR" 4
.IX Item "Net::Ping"
Upgraded from version 2.33 to 2.36.
.ie n .IP """NEXT""" 4
.el .IP "\f(CWNEXT\fR" 4
.IX Item "NEXT"
Upgraded from version 0.60_01 to 0.64.
.ie n .IP """Object::Accessor""" 4
.el .IP "\f(CWObject::Accessor\fR" 4
.IX Item "Object::Accessor"
Upgraded from version 0.32 to 0.34.
.ie n .IP """OS2::REXX""" 4
.el .IP "\f(CWOS2::REXX\fR" 4
.IX Item "OS2::REXX"
Upgraded from version 1.03 to 1.04.
.ie n .IP """Package::Constants""" 4
.el .IP "\f(CWPackage::Constants\fR" 4
.IX Item "Package::Constants"
Upgraded from version 0.01 to 0.02.
.ie n .IP """PerlIO""" 4
.el .IP "\f(CWPerlIO\fR" 4
.IX Item "PerlIO"
Upgraded from version 1.04 to 1.06.
.ie n .IP """PerlIO::via""" 4
.el .IP "\f(CWPerlIO::via\fR" 4
.IX Item "PerlIO::via"
Upgraded from version 0.04 to 0.07.
.ie n .IP """Pod::Man""" 4
.el .IP "\f(CWPod::Man\fR" 4
.IX Item "Pod::Man"
Upgraded from version 2.16 to 2.22.
.ie n .IP """Pod::Parser""" 4
.el .IP "\f(CWPod::Parser\fR" 4
.IX Item "Pod::Parser"
Upgraded from version 1.35 to 1.37.
.ie n .IP """Pod::Simple""" 4
.el .IP "\f(CWPod::Simple\fR" 4
.IX Item "Pod::Simple"
Upgraded from version 3.05 to 3.07.
.ie n .IP """Pod::Text""" 4
.el .IP "\f(CWPod::Text\fR" 4
.IX Item "Pod::Text"
Upgraded from version 3.08 to 3.13.
.ie n .IP """POSIX""" 4
.el .IP "\f(CWPOSIX\fR" 4
.IX Item "POSIX"
Upgraded from version 1.13 to 1.17.
.ie n .IP """Safe""" 4
.el .IP "\f(CWSafe\fR" 4
.IX Item "Safe"
Upgraded from 2.12 to 2.18.
.ie n .IP """Scalar::Util""" 4
.el .IP "\f(CWScalar::Util\fR" 4
.IX Item "Scalar::Util"
Upgraded from version 1.19 to 1.21.
.ie n .IP """SelectSaver""" 4
.el .IP "\f(CWSelectSaver\fR" 4
.IX Item "SelectSaver"
Upgraded from 1.01 to 1.02.
.ie n .IP """SelfLoader""" 4
.el .IP "\f(CWSelfLoader\fR" 4
.IX Item "SelfLoader"
Upgraded from 1.11 to 1.17.
.ie n .IP """Socket""" 4
.el .IP "\f(CWSocket\fR" 4
.IX Item "Socket"
Upgraded from 1.80 to 1.82.
.ie n .IP """Storable""" 4
.el .IP "\f(CWStorable\fR" 4
.IX Item "Storable"
Upgraded from 2.18 to 2.20.
.ie n .IP """Switch""" 4
.el .IP "\f(CWSwitch\fR" 4
.IX Item "Switch"
Upgraded from version 2.13 to 2.14. Please see \*(L"Deprecations\*(R".
.ie n .IP """Symbol""" 4
.el .IP "\f(CWSymbol\fR" 4
.IX Item "Symbol"
Upgraded from version 1.06 to 1.07.
.ie n .IP """Sys::Syslog""" 4
.el .IP "\f(CWSys::Syslog\fR" 4
.IX Item "Sys::Syslog"
Upgraded from version 0.22 to 0.27.
.ie n .IP """Term::ANSIColor""" 4
.el .IP "\f(CWTerm::ANSIColor\fR" 4
.IX Item "Term::ANSIColor"
Upgraded from version 1.12 to 2.00.
.ie n .IP """Term::ReadLine""" 4
.el .IP "\f(CWTerm::ReadLine\fR" 4
.IX Item "Term::ReadLine"
Upgraded from version 1.03 to 1.04.
.ie n .IP """Term::UI""" 4
.el .IP "\f(CWTerm::UI\fR" 4
.IX Item "Term::UI"
Upgraded from version 0.18 to 0.20.
.ie n .IP """Test::Harness""" 4
.el .IP "\f(CWTest::Harness\fR" 4
.IX Item "Test::Harness"
Upgraded from version 2.64 to 3.17.
.Sp
Note that one side-effect of the 2.x to 3.x upgrade is that the
experimental \f(CW\*(C`Test::Harness::Straps\*(C'\fR module (and its supporting
\&\f(CW\*(C`Assert\*(C'\fR, \f(CW\*(C`Iterator\*(C'\fR, \f(CW\*(C`Point\*(C'\fR and \f(CW\*(C`Results\*(C'\fR modules) have been
removed. If you still need this, then they are available in the
(unmaintained) \f(CW\*(C`Test\-Harness\-Straps\*(C'\fR distribution on \s-1CPAN\s0.
.ie n .IP """Test::Simple""" 4
.el .IP "\f(CWTest::Simple\fR" 4
.IX Item "Test::Simple"
Upgraded from version 0.72 to 0.92.
.ie n .IP """Text::ParseWords""" 4
.el .IP "\f(CWText::ParseWords\fR" 4
.IX Item "Text::ParseWords"
Upgraded from version 3.26 to 3.27.
.ie n .IP """Text::Tabs""" 4
.el .IP "\f(CWText::Tabs\fR" 4
.IX Item "Text::Tabs"
Upgraded from version 2007.1117 to 2009.0305.
.ie n .IP """Text::Wrap""" 4
.el .IP "\f(CWText::Wrap\fR" 4
.IX Item "Text::Wrap"
Upgraded from version 2006.1117 to 2009.0305.
.ie n .IP """Thread::Queue""" 4
.el .IP "\f(CWThread::Queue\fR" 4
.IX Item "Thread::Queue"
Upgraded from version 2.00 to 2.11.
.ie n .IP """Thread::Semaphore""" 4
.el .IP "\f(CWThread::Semaphore\fR" 4
.IX Item "Thread::Semaphore"
Upgraded from version 2.01 to 2.09.
.ie n .IP """threads""" 4
.el .IP "\f(CWthreads\fR" 4
.IX Item "threads"
Upgraded from version 1.67 to 1.72.
.ie n .IP """threads::shared""" 4
.el .IP "\f(CWthreads::shared\fR" 4
.IX Item "threads::shared"
Upgraded from version 1.14 to 1.29.
.ie n .IP """Tie::RefHash""" 4
.el .IP "\f(CWTie::RefHash\fR" 4
.IX Item "Tie::RefHash"
Upgraded from version 1.37 to 1.38.
.ie n .IP """Tie::StdHandle""" 4
.el .IP "\f(CWTie::StdHandle\fR" 4
.IX Item "Tie::StdHandle"
This has documentation changes, and has been assigned a version for the
first time: version 4.2.
.ie n .IP """Time::HiRes""" 4
.el .IP "\f(CWTime::HiRes\fR" 4
.IX Item "Time::HiRes"
Upgraded from version 1.9711 to 1.9719.
.ie n .IP """Time::Local""" 4
.el .IP "\f(CWTime::Local\fR" 4
.IX Item "Time::Local"
Upgraded from version 1.18 to 1.1901.
.ie n .IP """Time::Piece""" 4
.el .IP "\f(CWTime::Piece\fR" 4
.IX Item "Time::Piece"
Upgraded from version 1.12 to 1.15.
.ie n .IP """Unicode::Normalize""" 4
.el .IP "\f(CWUnicode::Normalize\fR" 4
.IX Item "Unicode::Normalize"
Upgraded from version 1.02 to 1.03.
.ie n .IP """Unicode::UCD""" 4
.el .IP "\f(CWUnicode::UCD\fR" 4
.IX Item "Unicode::UCD"
Upgraded from version 0.25 to 0.27.
.Sp
\&\f(CW\*(C`charinfo()\*(C'\fR now works on Unified \s-1CJK\s0 code points added to later versions
of Unicode.
.Sp
\&\f(CW\*(C`casefold()\*(C'\fR has new fields returned to provide both a simpler interface
and previously missing information. The old fields are retained for
backwards compatibility. Information about Turkic-specific code points is
now returned.
.Sp
The documentation has been corrected and expanded.
.ie n .IP """UNIVERSAL""" 4
.el .IP "\f(CWUNIVERSAL\fR" 4
.IX Item "UNIVERSAL"
Upgraded from version 1.04 to 1.05.
.ie n .IP """Win32""" 4
.el .IP "\f(CWWin32\fR" 4
.IX Item "Win32"
Upgraded from version 0.34 to 0.39.
.ie n .IP """Win32API::File""" 4
.el .IP "\f(CWWin32API::File\fR" 4
.IX Item "Win32API::File"
Upgraded from version 0.1001_01 to 0.1101.
.ie n .IP """XSLoader""" 4
.el .IP "\f(CWXSLoader\fR" 4
.IX Item "XSLoader"
Upgraded from version 0.08 to 0.10.
.SH "Utility Changes"
.IX Header "Utility Changes"
.IP "\fIh2ph\fR" 4
.IX Item "h2ph"
Now looks in \f(CW\*(C`include\-fixed\*(C'\fR too, which is a recent addition to gcc's
search path.
.IP "\fIh2xs\fR" 4
.IX Item "h2xs"
No longer incorrectly treats enum values like macros (Daniel Burr).
.Sp
Now handles \*(C+ style constants (\f(CW\*(C`//\*(C'\fR) properly in enums. (A patch from
Rainer Weikusat was used; Daniel Burr also proposed a similar fix).
.IP "\fIperl5db.pl\fR" 4
.IX Item "perl5db.pl"
\&\f(CW\*(C`LVALUE\*(C'\fR subroutines now work under the debugger.
.Sp
The debugger now correctly handles proxy constant subroutines, and
subroutine stubs.
.IP "\fIperlthanks\fR" 4
.IX Item "perlthanks"
Perl 5.10.1 adds a new utility \fIperlthanks\fR, which is a variant of
\&\fIperlbug\fR, but for sending non-bug-reports to the authors and maintainers
of Perl. Getting nothing but bug reports can become a bit demoralising:
we'll see if this changes things.
.SH "New Documentation"
.IX Header "New Documentation"
.IP "perlhaiku" 4
.IX Item "perlhaiku"
This contains instructions on how to build perl for the Haiku platform.
.IP "perlmroapi" 4
.IX Item "perlmroapi"
This describes the new interface for pluggable Method Resolution Orders.
.IP "perlperf" 4
.IX Item "perlperf"
This document, by Richard Foley, provides an introduction to the use of
performance and optimization techniques which can be used with particular
reference to perl programs.
.IP "perlrepository" 4
.IX Item "perlrepository"
This describes how to access the perl source using the \fIgit\fR version
control system.
.IP "perlthanks" 4
.IX Item "perlthanks"
This describes the new \fIperlthanks\fR utility.
.SH "Changes to Existing Documentation"
.IX Header "Changes to Existing Documentation"
The various large \f(CW\*(C`Changes*\*(C'\fR files (which listed every change made to perl
over the last 18 years) have been removed, and replaced by a small file,
also called \f(CW\*(C`Changes\*(C'\fR, which just explains how that same information may
be extracted from the git version control system.
.PP
The file \fIPorting/patching.pod\fR has been deleted, as it mainly described
interacting with the old Perforce-based repository, which is now obsolete.
Information still relevant has been moved to perlrepository.
.PP
perlapi, perlintern, perlmodlib and perltoc are now all
generated at build time, rather than being shipped as part of the release.
.SH "Performance Enhancements"
.IX Header "Performance Enhancements"
.IP "\(bu" 4
A new internal cache means that \f(CW\*(C`isa()\*(C'\fR will often be faster.
.IP "\(bu" 4
Under \f(CW\*(C`use locale\*(C'\fR, the locale-relevant information is now cached on
read-only values, such as the list returned by \f(CW\*(C`keys %hash\*(C'\fR. This makes
operations such as \f(CW\*(C`sort keys %hash\*(C'\fR in the scope of \f(CW\*(C`use locale\*(C'\fR much
faster.
.IP "\(bu" 4
Empty \f(CW\*(C`DESTROY\*(C'\fR methods are no longer called.
.SH "Installation and Configuration Improvements"
.IX Header "Installation and Configuration Improvements"
.SS "\fIext/\fP reorganisation"
.IX Subsection "ext/ reorganisation"
The layout of directories in \fIext\fR has been revised. Specifically, all
extensions are now flat, and at the top level, with \f(CW\*(C`/\*(C'\fR in pathnames
replaced by \f(CW\*(C`\-\*(C'\fR, so that \fIext/Data/Dumper/\fR is now \fIext/Data\-Dumper/\fR,
etc.  The names of the extensions as specified to \fIConfigure\fR, and as
reported by \f(CW%Config::Config\fR under the keys \f(CW\*(C`dynamic_ext\*(C'\fR,
\&\f(CW\*(C`known_extensions\*(C'\fR, \f(CW\*(C`nonxs_ext\*(C'\fR and \f(CW\*(C`static_ext\*(C'\fR have not changed, and
still use \f(CW\*(C`/\*(C'\fR. Hence this change will not have any affect once perl is
installed. However, \f(CW\*(C`Attribute::Handlers\*(C'\fR, \f(CW\*(C`Safe\*(C'\fR and \f(CW\*(C`mro\*(C'\fR have now
become extensions in their own right, so if you run \fIConfigure\fR with
options to specify an exact list of extensions to build, you will need to
change it to account for this.
.PP
For 5.10.2, it is planned that many dual-life modules will have been moved
from \fIlib\fR to \fIext\fR; again this will have no effect on an installed
perl, but will matter if you invoke \fIConfigure\fR with a pre-canned list of
extensions to build.
.SS "Configuration improvements"
.IX Subsection "Configuration improvements"
If \f(CW\*(C`vendorlib\*(C'\fR and \f(CW\*(C`vendorarch\*(C'\fR are the same, then they are only added to
\&\f(CW@INC\fR once.
.PP
\&\f(CW$Config{usedevel}\fR and the C\-level \f(CW\*(C`PERL_USE_DEVEL\*(C'\fR are now defined if
perl is built with  \f(CW\*(C`\-Dusedevel\*(C'\fR.
.PP
\&\fIConfigure\fR will enable use of \f(CW\*(C`\-fstack\-protector\*(C'\fR, to provide protection
against stack-smashing attacks, if the compiler supports it.
.PP
\&\fIConfigure\fR will now determine the correct prototypes for re-entrant
functions, and for \f(CW\*(C`gconvert\*(C'\fR, if you are using a \*(C+ compiler rather
than a C compiler.
.PP
On Unix, if you build from a tree containing a git repository, the
configuration process will note the commit hash you have checked out, for
display in the output of \f(CW\*(C`perl \-v\*(C'\fR and \f(CW\*(C`perl \-V\*(C'\fR. Unpushed local commits
are automatically added to the list of local patches displayed by
\&\f(CW\*(C`perl \-V\*(C'\fR.
.SS "Compilation improvements"
.IX Subsection "Compilation improvements"
As part of the flattening of \fIext\fR, all extensions on all platforms are
built by \fImake_ext.pl\fR. This replaces the Unix-specific
\&\fIext/util/make_ext\fR, VMS-specific \fImake_ext.com\fR and Win32\-specific
\&\fIwin32/buildext.pl\fR.
.SS "Platform Specific Changes"
.IX Subsection "Platform Specific Changes"
.IP "\s-1AIX\s0" 4
.IX Item "AIX"
Removed \fIlibbsd\fR for \s-1AIX\s0 5L and 6.1. Only \fIflock()\fR was used from \fIlibbsd\fR.
.Sp
Removed \fIlibgdbm\fR for \s-1AIX\s0 5L and 6.1. The \fIlibgdbm\fR is delivered as an
optional package with the \s-1AIX\s0 Toolbox. Unfortunately the 64 bit version 
is broken.
.Sp
Hints changes mean that \s-1AIX\s0 4.2 should work again.
.IP "Cygwin" 4
.IX Item "Cygwin"
On Cygwin we now strip the last number from the \s-1DLL\s0. This has been the
behaviour in the cygwin.com build for years. The hints files have been
updated.
.IP "FreeBSD" 4
.IX Item "FreeBSD"
The hints files now identify the correct threading libraries on FreeBSD 7
and later.
.IP "Irix" 4
.IX Item "Irix"
We now work around a bizarre preprocessor bug in the Irix 6.5 compiler:
\&\f(CW\*(C`cc \-E \-\*(C'\fR unfortunately goes into K&R mode, but \f(CW\*(C`cc \-E file.c\*(C'\fR doesn't.
.IP "Haiku" 4
.IX Item "Haiku"
Patches from the Haiku maintainers have been merged in. Perl should now
build on Haiku.
.IP "MirOS \s-1BSD\s0" 4
.IX Item "MirOS BSD"
Perl should now build on MirOS \s-1BSD\s0.
.IP "NetBSD" 4
.IX Item "NetBSD"
Hints now supports versions 5.*.
.IP "Stratus \s-1VOS\s0" 4
.IX Item "Stratus VOS"
Various changes from Stratus have been merged in.
.IP "Symbian" 4
.IX Item "Symbian"
There is now support for Symbian S60 3.2 \s-1SDK\s0 and S60 5.0 \s-1SDK\s0.
.IP "Win32" 4
.IX Item "Win32"
Improved message window handling means that \f(CW\*(C`alarm\*(C'\fR and \f(CW\*(C`kill\*(C'\fR messages
will no longer be dropped under race conditions.
.IP "\s-1VMS\s0" 4
.IX Item "VMS"
Reads from the in-memory temporary files of \f(CW\*(C`PerlIO::scalar\*(C'\fR used to fail
if \f(CW$/\fR was set to a numeric reference (to indicate record-style reads).
This is now fixed.
.Sp
\&\s-1VMS\s0 now supports \f(CW\*(C`getgrgid\*(C'\fR.
.Sp
Many improvements and cleanups have been made to the \s-1VMS\s0 file name handling
and conversion code.
.Sp
Enabling the \f(CW\*(C`PERL_VMS_POSIX_EXIT\*(C'\fR logical name now encodes a \s-1POSIX\s0 exit
status in a \s-1VMS\s0 condition value for better interaction with \s-1GNV\s0's bash
shell and other utilities that depend on \s-1POSIX\s0 exit values.  See
\&\*(L"$?\*(R" in perlvms for details.
.SH "Selected Bug Fixes"
.IX Header "Selected Bug Fixes"
.IP "\(bu" 4
5.10.0 inadvertently disabled an optimisation, which caused a measurable
performance drop in list assignment, such as is often used to assign
function parameters from \f(CW@_\fR. The optimisation has been re-instated, and
the performance regression fixed.
.IP "\(bu" 4
Fixed memory leak on \f(CW\*(C`while (1) { map 1, 1 }\*(C'\fR [\s-1RT\s0 #53038].
.IP "\(bu" 4
Some potential coredumps in PerlIO fixed [\s-1RT\s0 #57322,54828].
.IP "\(bu" 4
The debugger now works with lvalue subroutines.
.IP "\(bu" 4
The debugger's \f(CW\*(C`m\*(C'\fR command was broken on modules that defined constants
[\s-1RT\s0 #61222].
.IP "\(bu" 4
\&\f(CW\*(C`crypt()\*(C'\fR and string complement could return tainted values for untainted
arguments [\s-1RT\s0 #59998].
.IP "\(bu" 4
The \f(CW\*(C`\-i.suffix\*(C'\fR command-line switch now recreates the file using
restricted permissions, before changing its mode to match the original
file. This eliminates a potential race condition [\s-1RT\s0 #60904].
.IP "\(bu" 4
On some Unix systems, the value in \f(CW$?\fR would not have the top bit set
(\f(CW\*(C`$? & 128\*(C'\fR) even if the child core dumped.
.IP "\(bu" 4
Under some circumstances, $^R could incorrectly become undefined
[\s-1RT\s0 #57042].
.IP "\(bu" 4
(\s-1XS\s0) In various hash functions, passing a pre-computed hash to when the
key is \s-1UTF\-8\s0 might result in an incorrect lookup.
.IP "\(bu" 4
(\s-1XS\s0) Including \fI\s-1XSUB\s0.h\fR before \fIperl.h\fR gave a compile-time error
[\s-1RT\s0 #57176].
.IP "\(bu" 4
\&\f(CW\*(C`$object\->isa(\*(AqFoo\*(Aq)\*(C'\fR would report false if the package \f(CW\*(C`Foo\*(C'\fR didn't
exist, even if the object's \f(CW@ISA\fR contained \f(CW\*(C`Foo\*(C'\fR.
.IP "\(bu" 4
Various bugs in the new-to 5.10.0 mro code, triggered by manipulating
\&\f(CW@ISA\fR, have been found and fixed.
.IP "\(bu" 4
Bitwise operations on references could crash the interpreter, e.g.
\&\f(CW\*(C`$x=\e$y; $x |= "foo"\*(C'\fR [\s-1RT\s0 #54956].
.IP "\(bu" 4
Patterns including alternation might be sensitive to the internal \s-1UTF\-8\s0
representation, e.g.
.Sp
.Vb 3
\&    my $byte = chr(192);
\&    my $utf8 = chr(192); utf8::upgrade($utf8);
\&    $utf8 =~ /$byte|X}/i;       # failed in 5.10.0
.Ve
.IP "\(bu" 4
Within UTF8\-encoded Perl source files (i.e. where \f(CW\*(C`use utf8\*(C'\fR is in
effect), double-quoted literal strings could be corrupted where a \f(CW\*(C`\exNN\*(C'\fR,
\&\f(CW\*(C`\e0NNN\*(C'\fR or \f(CW\*(C`\eN{}\*(C'\fR is followed by a literal character with ordinal value
greater than 255 [\s-1RT\s0 #59908].
.IP "\(bu" 4
\&\f(CW\*(C`B::Deparse\*(C'\fR failed to correctly deparse various constructs:
\&\f(CW\*(C`readpipe STRING\*(C'\fR [\s-1RT\s0 #62428], \f(CW\*(C`CORE::require(STRING)\*(C'\fR [\s-1RT\s0 #62488],
\&\f(CW\*(C`sub foo(_)\*(C'\fR [\s-1RT\s0 #62484].
.IP "\(bu" 4
Using \f(CW\*(C`setpgrp()\*(C'\fR with no arguments could corrupt the perl stack.
.IP "\(bu" 4
The block form of \f(CW\*(C`eval\*(C'\fR is now specifically trappable by \f(CW\*(C`Safe\*(C'\fR and
\&\f(CW\*(C`ops\*(C'\fR.  Previously it was erroneously treated like string \f(CW\*(C`eval\*(C'\fR.
.IP "\(bu" 4
In 5.10.0, the two characters \f(CW\*(C`[~\*(C'\fR were sometimes parsed as the smart
match operator (\f(CW\*(C`~~\*(C'\fR) [\s-1RT\s0 #63854].
.IP "\(bu" 4
In 5.10.0, the \f(CW\*(C`*\*(C'\fR quantifier in patterns was sometimes treated as
\&\f(CW\*(C`{0,32767}\*(C'\fR [\s-1RT\s0 #60034, #60464]. For example, this match would fail:
.Sp
.Vb 1
\&    ("ab" x 32768) =~ /^(ab)*$/
.Ve
.IP "\(bu" 4
\&\f(CW\*(C`shmget\*(C'\fR was limited to a 32 bit segment size on a 64 bit \s-1OS\s0 [\s-1RT\s0 #63924].
.IP "\(bu" 4
Using \f(CW\*(C`next\*(C'\fR or \f(CW\*(C`last\*(C'\fR to exit a \f(CW\*(C`given\*(C'\fR block no longer produces a
spurious warning like the following:
.Sp
.Vb 1
\&    Exiting given via last at foo.pl line 123
.Ve
.IP "\(bu" 4
On Windows, \f(CW\*(Aq.\efoo\*(Aq\fR and \f(CW\*(Aq..\efoo\*(Aq\fR  were treated differently than
\&\f(CW\*(Aq./foo\*(Aq\fR and \f(CW\*(Aq../foo\*(Aq\fR by \f(CW\*(C`do\*(C'\fR and \f(CW\*(C`require\*(C'\fR [\s-1RT\s0 #63492].
.IP "\(bu" 4
Assigning a format to a glob could corrupt the format; e.g.:
.Sp
.Vb 1
\&     *bar=*foo{FORMAT}; # foo format now bad
.Ve
.IP "\(bu" 4
Attempting to coerce a typeglob to a string or number could cause an
assertion failure. The correct error message is now generated,
\&\f(CW\*(C`Can\*(Aqt coerce GLOB to \f(CI$type\f(CW\*(C'\fR.
.IP "\(bu" 4
Under \f(CW\*(C`use filetest \*(Aqaccess\*(Aq\*(C'\fR, \f(CW\*(C`\-x\*(C'\fR was using the wrong access mode. This
has been fixed [\s-1RT\s0 #49003].
.IP "\(bu" 4
\&\f(CW\*(C`length\*(C'\fR on a tied scalar that returned a Unicode value would not be
correct the first time. This has been fixed.
.IP "\(bu" 4
Using an array \f(CW\*(C`tie\*(C'\fR inside in array \f(CW\*(C`tie\*(C'\fR could \s-1SEGV\s0. This has been
fixed. [\s-1RT\s0 #51636]
.IP "\(bu" 4
A race condition inside \f(CW\*(C`PerlIOStdio_close()\*(C'\fR has been identified and
fixed. This used to cause various threading issues, including SEGVs.
.IP "\(bu" 4
In \f(CW\*(C`unpack\*(C'\fR, the use of \f(CW\*(C`()\*(C'\fR groups in scalar context was internally
placing a list on the interpreter's stack, which manifested in various
ways, including SEGVs.  This is now fixed [\s-1RT\s0 #50256].
.IP "\(bu" 4
Magic was called twice in \f(CW\*(C`substr\*(C'\fR, \f(CW\*(C`\e&$x\*(C'\fR, \f(CW\*(C`tie $x, $m\*(C'\fR and \f(CW\*(C`chop\*(C'\fR.
These have all been fixed.
.IP "\(bu" 4
A 5.10.0 optimisation to clear the temporary stack within the implicit
loop of \f(CW\*(C`s///ge\*(C'\fR has been reverted, as it turned out to be the cause of
obscure bugs in seemingly unrelated parts of the interpreter [commit 
ef0d4e17921ee3de].
.IP "\(bu" 4
The line numbers for warnings inside \f(CW\*(C`elsif\*(C'\fR are now correct.
.IP "\(bu" 4
The \f(CW\*(C`..\*(C'\fR operator now works correctly with ranges whose ends are at or
close to the values of the smallest and largest integers.
.IP "\(bu" 4
\&\f(CW\*(C`binmode STDIN, \*(Aq:raw\*(Aq\*(C'\fR could lead to segmentation faults on some platforms.
This has been fixed [\s-1RT\s0 #54828].
.IP "\(bu" 4
An off-by-one error meant that \f(CW\*(C`index $str, ...\*(C'\fR was effectively being
executed as \f(CW\*(C`index "$str\e0", ...\*(C'\fR. This has been fixed [\s-1RT\s0 #53746].
.IP "\(bu" 4
Various leaks associated with named captures in regexes have been fixed
[\s-1RT\s0 #57024].
.IP "\(bu" 4
A weak reference to a hash would leak. This was affecting \f(CW\*(C`DBI\*(C'\fR
[\s-1RT\s0 #56908].
.IP "\(bu" 4
Using (?|) in a regex could cause a segfault [\s-1RT\s0 #59734].
.IP "\(bu" 4
Use of a \s-1UTF\-8\s0 \f(CW\*(C`tr//\*(C'\fR within a closure could cause a segfault [\s-1RT\s0 #61520].
.IP "\(bu" 4
Calling \f(CW\*(C`sv_chop()\*(C'\fR or otherwise upgrading an \s-1SV\s0 could result in an
unaligned 64\-bit access on the \s-1SPARC\s0 architecture [\s-1RT\s0 #60574].
.IP "\(bu" 4
In the 5.10.0 release, \f(CW\*(C`inc_version_list\*(C'\fR would incorrectly list
\&\f(CW\*(C`5.10.*\*(C'\fR after \f(CW\*(C`5.8.*\*(C'\fR; this affected the \f(CW@INC\fR search order
[\s-1RT\s0 #67628].
.IP "\(bu" 4
In 5.10.0, \f(CW\*(C`pack "a*", $tainted_value\*(C'\fR returned a non-tainted value
[\s-1RT\s0 #52552].
.IP "\(bu" 4
In 5.10.0, \f(CW\*(C`printf\*(C'\fR and \f(CW\*(C`sprintf\*(C'\fR could produce the fatal error
\&\f(CW\*(C`panic: utf8_mg_pos_cache_update\*(C'\fR when printing \s-1UTF\-8\s0 strings
[\s-1RT\s0 #62666].
.IP "\(bu" 4
In the 5.10.0 release, a dynamically created \f(CW\*(C`AUTOLOAD\*(C'\fR method might be
missed (method cache issue) [\s-1RT\s0 #60220,60232].
.IP "\(bu" 4
In the 5.10.0 release, a combination of \f(CW\*(C`use feature\*(C'\fR and \f(CW\*(C`//ee\*(C'\fR could
cause a memory leak [\s-1RT\s0 #63110].
.IP "\(bu" 4
\&\f(CW\*(C`\-C\*(C'\fR on the shebang (\f(CW\*(C`#!\*(C'\fR) line is once more permitted if it is also
specified on the command line. \f(CW\*(C`\-C\*(C'\fR on the shebang line used to be a
silent no-op \fIif\fR it was not also on the command line, so perl 5.10.0
disallowed it, which broke some scripts. Now perl checks whether it is
also on the command line and only dies if it is not [\s-1RT\s0 #67880].
.IP "\(bu" 4
In 5.10.0, certain types of re-entrant regular expression could crash,
or cause the following assertion failure [\s-1RT\s0 #60508]:
.Sp
.Vb 1
\&    Assertion rx\->sublen >= (s \- rx\->subbeg) + i failed
.Ve
.SH "New or Changed Diagnostics"
.IX Header "New or Changed Diagnostics"
.ie n .IP """panic: sv_chop %s""" 4
.el .IP "\f(CWpanic: sv_chop %s\fR" 4
.IX Item "panic: sv_chop %s"
This new fatal error occurs when the C routine \f(CW\*(C`Perl_sv_chop()\*(C'\fR was
passed a position that is not within the scalar's string buffer. This
could be caused by buggy \s-1XS\s0 code, and at this point recovery is not
possible.
.ie n .IP """Can\*(Aqt locate package %s for the parents of %s""" 4
.el .IP "\f(CWCan\*(Aqt locate package %s for the parents of %s\fR" 4
.IX Item "Cant locate package %s for the parents of %s"
This warning has been removed. In general, it only got produced in
conjunction with other warnings, and removing it allowed an \s-1ISA\s0 lookup
optimisation to be added.
.ie n .IP """v\-string in use/require is non\-portable""" 4
.el .IP "\f(CWv\-string in use/require is non\-portable\fR" 4
.IX Item "v-string in use/require is non-portable"
This warning has been removed.
.ie n .IP """Deep recursion on subroutine ""%s""""" 4
.el .IP "\f(CWDeep recursion on subroutine ``%s''\fR" 4
.IX Item "Deep recursion on subroutine ""%s"""
It is now possible to change the depth threshold for this warning from the
default of 100, by recompiling the \fIperl\fR binary, setting the C
pre-processor macro \f(CW\*(C`PERL_SUB_DEPTH_WARN\*(C'\fR to the desired value.
.SH "Changed Internals"
.IX Header "Changed Internals"
.IP "\(bu" 4
The J.R.R. Tolkien quotes at the head of C source file have been checked and
proper citations added, thanks to a patch from Tom Christiansen.
.IP "\(bu" 4
\&\f(CW\*(C`vcroak()\*(C'\fR now accepts a null first argument. In addition, a full audit
was made of the \*(L"not \s-1NULL\s0\*(R" compiler annotations, and those for several
other internal functions were corrected.
.IP "\(bu" 4
New macros \f(CW\*(C`dSAVEDERRNO\*(C'\fR, \f(CW\*(C`dSAVE_ERRNO\*(C'\fR, \f(CW\*(C`SAVE_ERRNO\*(C'\fR, \f(CW\*(C`RESTORE_ERRNO\*(C'\fR
have been added to formalise the temporary saving of the \f(CW\*(C`errno\*(C'\fR
variable.
.IP "\(bu" 4
The function \f(CW\*(C`Perl_sv_insert_flags\*(C'\fR has been added to augment
\&\f(CW\*(C`Perl_sv_insert\*(C'\fR.
.IP "\(bu" 4
The function \f(CW\*(C`Perl_newSV_type(type)\*(C'\fR has been added, equivalent to
\&\f(CW\*(C`Perl_newSV()\*(C'\fR followed by \f(CW\*(C`Perl_sv_upgrade(type)\*(C'\fR.
.IP "\(bu" 4
The function \f(CW\*(C`Perl_newSVpvn_flags()\*(C'\fR has been added, equivalent to
\&\f(CW\*(C`Perl_newSVpvn()\*(C'\fR and then performing the action relevant to the flag.
.Sp
Two flag bits are currently supported.
.RS 4
.ie n .IP """SVf_UTF8""" 4
.el .IP "\f(CWSVf_UTF8\fR" 4
.IX Item "SVf_UTF8"
This will call \f(CW\*(C`SvUTF8_on()\*(C'\fR for you. (Note that this does not convert an
sequence of \s-1ISO\s0 8859\-1 characters to \s-1UTF\-8\s0). A wrapper, \f(CW\*(C`newSVpvn_utf8()\*(C'\fR
is available for this.
.ie n .IP """SVs_TEMP""" 4
.el .IP "\f(CWSVs_TEMP\fR" 4
.IX Item "SVs_TEMP"
Call \f(CW\*(C`sv_2mortal()\*(C'\fR on the new \s-1SV\s0.
.RE
.RS 4
.Sp
There is also a wrapper that takes constant strings, \f(CW\*(C`newSVpvs_flags()\*(C'\fR.
.RE
.IP "\(bu" 4
The function \f(CW\*(C`Perl_croak_xs_usage\*(C'\fR has been added as a wrapper to
\&\f(CW\*(C`Perl_croak\*(C'\fR.
.IP "\(bu" 4
The functions \f(CW\*(C`PerlIO_find_layer\*(C'\fR and \f(CW\*(C`PerlIO_list_alloc\*(C'\fR are now
exported.
.IP "\(bu" 4
\&\f(CW\*(C`PL_na\*(C'\fR has been exterminated from the core code, replaced by local \s-1STRLEN\s0
temporaries, or \f(CW\*(C`*_nolen()\*(C'\fR calls. Either approach is faster than \f(CW\*(C`PL_na\*(C'\fR,
which is a pointer deference into the interpreter structure under ithreads,
and a global variable otherwise.
.IP "\(bu" 4
\&\f(CW\*(C`Perl_mg_free()\*(C'\fR used to leave freed memory accessible via \fISvMAGIC()\fR on
the scalar. It now updates the linked list to remove each piece of magic
as it is freed.
.IP "\(bu" 4
Under ithreads, the regex in \f(CW\*(C`PL_reg_curpm\*(C'\fR is now reference counted. This
eliminates a lot of hackish workarounds to cope with it not being reference
counted.
.IP "\(bu" 4
\&\f(CW\*(C`Perl_mg_magical()\*(C'\fR would sometimes incorrectly turn on \f(CW\*(C`SvRMAGICAL()\*(C'\fR.
This has been fixed.
.IP "\(bu" 4
The \fIpublic\fR \s-1IV\s0 and \s-1NV\s0 flags are now not set if the string value has
trailing \*(L"garbage\*(R". This behaviour is consistent with not setting the
public \s-1IV\s0 or \s-1NV\s0 flags if the value is out of range for the type.
.IP "\(bu" 4
\&\s-1SV\s0 allocation tracing has been added to the diagnostics enabled by \f(CW\*(C`\-Dm\*(C'\fR.
The tracing can alternatively output via the \f(CW\*(C`PERL_MEM_LOG\*(C'\fR mechanism, if
that was enabled when the \fIperl\fR binary was compiled.
.IP "\(bu" 4
Uses of \f(CW\*(C`Nullav\*(C'\fR, \f(CW\*(C`Nullcv\*(C'\fR, \f(CW\*(C`Nullhv\*(C'\fR, \f(CW\*(C`Nullop\*(C'\fR, \f(CW\*(C`Nullsv\*(C'\fR etc have been
replaced by \f(CW\*(C`NULL\*(C'\fR in the core code, and non-dual-life modules, as \f(CW\*(C`NULL\*(C'\fR
is clearer to those unfamiliar with the core code.
.IP "\(bu" 4
A macro \f(CWMUTABLE_PTR(p)\fR has been added, which on (non-pedantic) gcc will
not cast away \f(CW\*(C`const\*(C'\fR, returning a \f(CW\*(C`void *\*(C'\fR. Macros \f(CW\*(C`MUTABLE_SV(av)\*(C'\fR,
\&\f(CW\*(C`MUTABLE_SV(cv)\*(C'\fR etc build on this, casting to \f(CW\*(C`AV *\*(C'\fR etc without
casting away \f(CW\*(C`const\*(C'\fR. This allows proper compile-time auditing of
\&\f(CW\*(C`const\*(C'\fR correctness in the core, and helped picked up some errors (now
fixed).
.IP "\(bu" 4
Macros \f(CW\*(C`mPUSHs()\*(C'\fR and \f(CW\*(C`mXPUSHs()\*(C'\fR have been added, for pushing SVs on the
stack and mortalizing them.
.IP "\(bu" 4
Use of the private structure \f(CW\*(C`mro_meta\*(C'\fR has changed slightly. Nothing
outside the core should be accessing this directly anyway.
.IP "\(bu" 4
A new tool, \f(CW\*(C`Porting/expand\-macro.pl\*(C'\fR has been added, that allows you
to view how a C preprocessor macro would be expanded when compiled.
This is handy when trying to decode the macro hell that is the perl
guts.
.SH "New Tests"
.IX Header "New Tests"
Many modules updated from \s-1CPAN\s0 incorporate new tests.
.PP
Several tests that have the potential to hang forever if they fail now
incorporate a \*(L"watchdog\*(R" functionality that will kill them after a timeout,
which helps ensure that \f(CW\*(C`make test\*(C'\fR and \f(CW\*(C`make test_harness\*(C'\fR run to
completion automatically. (Jerry Hedden).
.PP
Some core-specific tests have been added:
.IP "t/comp/retainedlines.t" 4
.IX Item "t/comp/retainedlines.t"
Check that the debugger can retain source lines from \f(CW\*(C`eval\*(C'\fR.
.IP "t/io/perlio_fail.t" 4
.IX Item "t/io/perlio_fail.t"
Check that bad layers fail.
.IP "t/io/perlio_leaks.t" 4
.IX Item "t/io/perlio_leaks.t"
Check that PerlIO layers are not leaking.
.IP "t/io/perlio_open.t" 4
.IX Item "t/io/perlio_open.t"
Check that certain special forms of open work.
.IP "t/io/perlio.t" 4
.IX Item "t/io/perlio.t"
General PerlIO tests.
.IP "t/io/pvbm.t" 4
.IX Item "t/io/pvbm.t"
Check that there is no unexpected interaction between the internal types
\&\f(CW\*(C`PVBM\*(C'\fR and \f(CW\*(C`PVGV\*(C'\fR.
.IP "t/mro/package_aliases.t" 4
.IX Item "t/mro/package_aliases.t"
Check that mro works properly in the presence of aliased packages.
.IP "t/op/dbm.t" 4
.IX Item "t/op/dbm.t"
Tests for \f(CW\*(C`dbmopen\*(C'\fR and \f(CW\*(C`dbmclose\*(C'\fR.
.IP "t/op/index_thr.t" 4
.IX Item "t/op/index_thr.t"
Tests for the interaction of \f(CW\*(C`index\*(C'\fR and threads.
.IP "t/op/pat_thr.t" 4
.IX Item "t/op/pat_thr.t"
Tests for the interaction of esoteric patterns and threads.
.IP "t/op/qr_gc.t" 4
.IX Item "t/op/qr_gc.t"
Test that \f(CW\*(C`qr\*(C'\fR doesn't leak.
.IP "t/op/reg_email_thr.t" 4
.IX Item "t/op/reg_email_thr.t"
Tests for the interaction of regex recursion and threads.
.IP "t/op/regexp_qr_embed_thr.t" 4
.IX Item "t/op/regexp_qr_embed_thr.t"
Tests for the interaction of patterns with embedded \f(CW\*(C`qr//\*(C'\fR and threads.
.IP "t/op/regexp_unicode_prop.t" 4
.IX Item "t/op/regexp_unicode_prop.t"
Tests for Unicode properties in regular expressions.
.IP "t/op/regexp_unicode_prop_thr.t" 4
.IX Item "t/op/regexp_unicode_prop_thr.t"
Tests for the interaction of Unicode properties and threads.
.IP "t/op/reg_nc_tie.t" 4
.IX Item "t/op/reg_nc_tie.t"
Test the tied methods of \f(CW\*(C`Tie::Hash::NamedCapture\*(C'\fR.
.IP "t/op/reg_posixcc.t" 4
.IX Item "t/op/reg_posixcc.t"
Check that \s-1POSIX\s0 character classes behave consistently.
.IP "t/op/re.t" 4
.IX Item "t/op/re.t"
Check that exportable \f(CW\*(C`re\*(C'\fR functions in \fIuniversal.c\fR work.
.IP "t/op/setpgrpstack.t" 4
.IX Item "t/op/setpgrpstack.t"
Check that \f(CW\*(C`setpgrp\*(C'\fR works.
.IP "t/op/substr_thr.t" 4
.IX Item "t/op/substr_thr.t"
Tests for the interaction of \f(CW\*(C`substr\*(C'\fR and threads.
.IP "t/op/upgrade.t" 4
.IX Item "t/op/upgrade.t"
Check that upgrading and assigning scalars works.
.IP "t/uni/lex_utf8.t" 4
.IX Item "t/uni/lex_utf8.t"
Check that Unicode in the lexer works.
.IP "t/uni/tie.t" 4
.IX Item "t/uni/tie.t"
Check that Unicode and \f(CW\*(C`tie\*(C'\fR work.
.SH "Known Problems"
.IX Header "Known Problems"
This is a list of some significant unfixed bugs, which are regressions
from either 5.10.0 or 5.8.x.
.IP "\(bu" 4
\&\f(CW\*(C`List::Util::first\*(C'\fR misbehaves in the presence of a lexical \f(CW$_\fR
(typically introduced by \f(CW\*(C`my $_\*(C'\fR or implicitly by \f(CW\*(C`given\*(C'\fR). The variable
which gets set for each iteration is the package variable \f(CW$_\fR, not the
lexical \f(CW$_\fR [\s-1RT\s0 #67694].
.Sp
A similar issue may occur in other modules that provide functions which
take a block as their first argument, like
.Sp
.Vb 1
\&    foo { ... $_ ...} list
.Ve
.IP "\(bu" 4
The \f(CW\*(C`charnames\*(C'\fR pragma may generate a run-time error when a regex is
interpolated [\s-1RT\s0 #56444]:
.Sp
.Vb 4
\&    use charnames \*(Aq:full\*(Aq;
\&    my $r1 = qr/\eN{THAI CHARACTER SARA I}/;
\&    "foo" =~ $r1;    # okay
\&    "foo" =~ /$r1+/; # runtime error
.Ve
.Sp
A workaround is to generate the character outside of the regex:
.Sp
.Vb 2
\&    my $a = "\eN{THAI CHARACTER SARA I}";
\&    my $r1 = qr/$a/;
.Ve
.IP "\(bu" 4
Some regexes may run much more slowly when run in a child thread compared
with the thread the pattern was compiled into [\s-1RT\s0 #55600].
.SH "Deprecations"
.IX Header "Deprecations"
The following items are now deprecated.
.IP "\(bu" 4
\&\f(CW\*(C`Switch\*(C'\fR is buggy and should be avoided. From perl 5.11.0 onwards, it is
intended that any use of the core version of this module will emit a
warning, and that the module will eventually be removed from the core
(probably in perl 5.14.0). See \*(L"Switch statements\*(R" in perlsyn for its
replacement.
.IP "\(bu" 4
\&\f(CW\*(C`suidperl\*(C'\fR will be removed in 5.12.0. This provides a mechanism to
emulate setuid permission bits on systems that don't support it properly.
.SH "Acknowledgements"
.IX Header "Acknowledgements"
Some of the work in this release was funded by a \s-1TPF\s0 grant.
.PP
Nicholas Clark officially retired from maintenance pumpking duty at the
end of 2008; however in reality he has put much effort in since then to
help get 5.10.1 into a fit state to be released, including writing a
considerable chunk of this perldelta.
.PP
Steffen Mueller and David Golden in particular helped getting \s-1CPAN\s0 modules
polished and synchronised with their in-core equivalents.
.PP
Craig Berry was tireless in getting maint to run under \s-1VMS\s0, no matter how
many times we broke it for him.
.PP
The other core committers contributed most of the changes, and applied most
of the patches sent in by the hundreds of contributors listed in \fI\s-1AUTHORS\s0\fR.
.PP
(Sorry to all the people I haven't mentioned by name).
.PP
Finally, thanks to Larry Wall, without whom none of this would be
necessary.
.SH "Reporting Bugs"
.IX Header "Reporting Bugs"
If you find what you think is a bug, you might check the articles
recently posted to the comp.lang.perl.misc newsgroup and the perl
bug database at http://rt.perl.org/perlbug/ .  There may also be
information at http://www.perl.org/ , the Perl Home Page.
.PP
If you believe you have an unreported bug, please run the \fBperlbug\fR
program included with your release.  Be sure to trim your bug down
to a tiny but sufficient test case.  Your bug report, along with the
output of \f(CW\*(C`perl \-V\*(C'\fR, will be sent off to perlbug@perl.org to be
analysed by the Perl porting team.
.PP
If the bug you are reporting has security implications, which make it
inappropriate to send to a publicly archived mailing list, then please send
it to perl5\-security\-report@perl.org. This points to a closed subscription
unarchived mailing list, which includes
all the core committers, who will be able
to help assess the impact of issues, figure out a resolution, and help
co-ordinate the release of patches to mitigate or fix the problem across all
platforms on which Perl is supported. Please only use this address for
security issues in the Perl core, not for modules independently
distributed on \s-1CPAN\s0.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
The \fIChanges\fR file for an explanation of how to view exhaustive details
on what changed.
.PP
The \fI\s-1INSTALL\s0\fR file for how to build Perl.
.PP
The \fI\s-1README\s0\fR file for general stuff.
.PP
The \fIArtistic\fR and \fICopying\fR files for copyright information.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perl5101delta5.18.1                          0100644 0001750 0001750 00000177407 12566207431 023555  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERL5101DELTA 1"
.TH PERL5101DELTA 1 "2013-11-04" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perl5101delta \- what is new for perl v5.10.1
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document describes differences between the 5.10.0 release and
the 5.10.1 release.
.PP
If you are upgrading from an earlier release such as 5.8.8, first read
the perl5100delta, which describes differences between 5.8.8 and
5.10.0
.SH "Incompatible Changes"
.IX Header "Incompatible Changes"
.SS "Switch statement changes"
.IX Subsection "Switch statement changes"
The handling of complex expressions by the \f(CW\*(C`given\*(C'\fR/\f(CW\*(C`when\*(C'\fR switch
statement has been enhanced. There are two new cases where \f(CW\*(C`when\*(C'\fR now
interprets its argument as a boolean, instead of an expression to be used
in a smart match:
.IP "flip-flop operators" 4
.IX Item "flip-flop operators"
The \f(CW\*(C`..\*(C'\fR and \f(CW\*(C`...\*(C'\fR flip-flop operators are now evaluated in boolean
context, following their usual semantics; see \*(L"Range Operators\*(R" in perlop.
.Sp
Note that, as in perl 5.10.0, \f(CW\*(C`when (1..10)\*(C'\fR will not work to test
whether a given value is an integer between 1 and 10; you should use
\&\f(CW\*(C`when ([1..10])\*(C'\fR instead (note the array reference).
.Sp
However, contrary to 5.10.0, evaluating the flip-flop operators in boolean
context ensures it can now be useful in a \f(CW\*(C`when()\*(C'\fR, notably for
implementing bistable conditions, like in:
.Sp
.Vb 3
\&    when (/^=begin/ .. /^=end/) {
\&      # do something
\&    }
.Ve
.IP "defined-or operator" 4
.IX Item "defined-or operator"
A compound expression involving the defined-or operator, as in
\&\f(CW\*(C`when (expr1 // expr2)\*(C'\fR, will be treated as boolean if the first
expression is boolean. (This just extends the existing rule that applies
to the regular or operator, as in \f(CW\*(C`when (expr1 || expr2)\*(C'\fR.)
.PP
The next section details more changes brought to the semantics to
the smart match operator, that naturally also modify the behaviour
of the switch statements where smart matching is implicitly used.
.SS "Smart match changes"
.IX Subsection "Smart match changes"
\fIChanges to type-based dispatch\fR
.IX Subsection "Changes to type-based dispatch"
.PP
The smart match operator \f(CW\*(C`~~\*(C'\fR is no longer commutative. The behaviour of
a smart match now depends primarily on the type of its right hand
argument. Moreover, its semantics have been adjusted for greater
consistency or usefulness in several cases. While the general backwards
compatibility is maintained, several changes must be noted:
.IP "\(bu" 4
Code references with an empty prototype are no longer treated specially.
They are passed an argument like the other code references (even if they
choose to ignore it).
.IP "\(bu" 4
\&\f(CW\*(C`%hash ~~ sub {}\*(C'\fR and \f(CW\*(C`@array ~~ sub {}\*(C'\fR now test that the subroutine
returns a true value for each key of the hash (or element of the
array), instead of passing the whole hash or array as a reference to
the subroutine.
.IP "\(bu" 4
Due to the commutativity breakage, code references are no longer
treated specially when appearing on the left of the \f(CW\*(C`~~\*(C'\fR operator,
but like any vulgar scalar.
.IP "\(bu" 4
\&\f(CW\*(C`undef ~~ %hash\*(C'\fR is always false (since \f(CW\*(C`undef\*(C'\fR can't be a key in a
hash). No implicit conversion to \f(CW""\fR is done (as was the case in perl
5.10.0).
.IP "\(bu" 4
\&\f(CW\*(C`$scalar ~~ @array\*(C'\fR now always distributes the smart match across the
elements of the array. It's true if one element in \f(CW@array\fR verifies
\&\f(CW\*(C`$scalar ~~ $element\*(C'\fR. This is a generalization of the old behaviour
that tested whether the array contained the scalar.
.PP
The full dispatch table for the smart match operator is given in
\&\*(L"Smart matching in detail\*(R" in perlsyn.
.PP
\fISmart match and overloading\fR
.IX Subsection "Smart match and overloading"
.PP
According to the rule of dispatch based on the rightmost argument type,
when an object overloading \f(CW\*(C`~~\*(C'\fR appears on the right side of the
operator, the overload routine will always be called (with a 3rd argument
set to a true value, see overload.) However, when the object will
appear on the left, the overload routine will be called only when the
rightmost argument is a simple scalar. This way distributivity of smart match
across arrays is not broken, as well as the other behaviours with complex
types (coderefs, hashes, regexes). Thus, writers of overloading routines
for smart match mostly need to worry only with comparing against a scalar,
and possibly with stringification overloading; the other common cases
will be automatically handled consistently.
.PP
\&\f(CW\*(C`~~\*(C'\fR will now refuse to work on objects that do not overload it (in order
to avoid relying on the object's underlying structure). (However, if the
object overloads the stringification or the numification operators, and
if overload fallback is active, it will be used instead, as usual.)
.SS "Other incompatible changes"
.IX Subsection "Other incompatible changes"
.IP "\(bu" 4
The semantics of \f(CW\*(C`use feature :5.10*\*(C'\fR have changed slightly.
See \*(L"Modules and Pragmata\*(R" for more information.
.IP "\(bu" 4
It is now a run-time error to use the smart match operator \f(CW\*(C`~~\*(C'\fR
with an object that has no overload defined for it. (This way
\&\f(CW\*(C`~~\*(C'\fR will not break encapsulation by matching against the
object's internal representation as a reference.)
.IP "\(bu" 4
The version control system used for the development of the perl
interpreter has been switched from Perforce to git.  This is mainly an
internal issue that only affects people actively working on the perl core;
but it may have minor external visibility, for example in some of details
of the output of \f(CW\*(C`perl \-V\*(C'\fR. See perlrepository for more information.
.IP "\(bu" 4
The internal structure of the \f(CW\*(C`ext/\*(C'\fR directory in the perl source has
been reorganised. In general, a module \f(CW\*(C`Foo::Bar\*(C'\fR whose source was
stored under \fIext/Foo/Bar/\fR is now located under \fIext/Foo\-Bar/\fR. Also,
some modules have been moved from \fIlib/\fR to \fIext/\fR. This is purely a
source tarball change, and should make no difference to the compilation or
installation of perl, unless you have a very customised build process that
explicitly relies on this structure, or which hard-codes the \f(CW\*(C`nonxs_ext\*(C'\fR
\&\fIConfigure\fR parameter. Specifically, this change does not by default
alter the location of any files in the final installation.
.IP "\(bu" 4
As part of the \f(CW\*(C`Test::Harness\*(C'\fR 2.x to 3.x upgrade, the experimental
\&\f(CW\*(C`Test::Harness::Straps\*(C'\fR module has been removed.
See \*(L"Updated Modules\*(R" for more details.
.IP "\(bu" 4
As part of the \f(CW\*(C`ExtUtils::MakeMaker\*(C'\fR upgrade, the
\&\f(CW\*(C`ExtUtils::MakeMaker::bytes\*(C'\fR and \f(CW\*(C`ExtUtils::MakeMaker::vmsish\*(C'\fR modules
have been removed from this distribution.
.IP "\(bu" 4
\&\f(CW\*(C`Module::CoreList\*(C'\fR no longer contains the \f(CW%:patchlevel\fR hash.
.IP "\(bu" 4
This one is actually a change introduced in 5.10.0, but it was missed
from that release's perldelta, so it is mentioned here instead.
.Sp
A bugfix related to the handling of the \f(CW\*(C`/m\*(C'\fR modifier and \f(CW\*(C`qr\*(C'\fR resulted
in a change of behaviour between 5.8.x and 5.10.0:
.Sp
.Vb 2
\&    # matches in 5.8.x, doesn\*(Aqt match in 5.10.0
\&    $re = qr/^bar/; "foo\enbar" =~ /$re/m;
.Ve
.SH "Core Enhancements"
.IX Header "Core Enhancements"
.SS "Unicode Character Database 5.1.0"
.IX Subsection "Unicode Character Database 5.1.0"
The copy of the Unicode Character Database included in Perl 5.10.1 has
been updated to 5.1.0 from 5.0.0. See
<http://www.unicode.org/versions/Unicode5.1.0/#Notable_Changes> for the
notable changes.
.SS "A proper interface for pluggable Method Resolution Orders"
.IX Subsection "A proper interface for pluggable Method Resolution Orders"
As of Perl 5.10.1 there is a new interface for plugging and using method
resolution orders other than the default (linear depth first search).
The C3 method resolution order added in 5.10.0 has been re-implemented as
a plugin, without changing its Perl-space interface. See perlmroapi for
more information.
.ie n .SS "The ""overloading"" pragma"
.el .SS "The \f(CWoverloading\fP pragma"
.IX Subsection "The overloading pragma"
This pragma allows you to lexically disable or enable overloading
for some or all operations. (Yuval Kogman)
.SS "Parallel tests"
.IX Subsection "Parallel tests"
The core distribution can now run its regression tests in parallel on
Unix-like platforms. Instead of running \f(CW\*(C`make test\*(C'\fR, set \f(CW\*(C`TEST_JOBS\*(C'\fR in
your environment to the number of tests to run in parallel, and run
\&\f(CW\*(C`make test_harness\*(C'\fR. On a Bourne-like shell, this can be done as
.PP
.Vb 1
\&    TEST_JOBS=3 make test_harness  # Run 3 tests in parallel
.Ve
.PP
An environment variable is used, rather than parallel make itself, because
TAP::Harness needs to be able to schedule individual non-conflicting test
scripts itself, and there is no standard interface to \f(CW\*(C`make\*(C'\fR utilities to
interact with their job schedulers.
.PP
Note that currently some test scripts may fail when run in parallel (most
notably \f(CW\*(C`ext/IO/t/io_dir.t\*(C'\fR). If necessary run just the failing scripts
again sequentially and see if the failures go away.
.SS "DTrace support"
.IX Subsection "DTrace support"
Some support for DTrace has been added. See \*(L"DTrace support\*(R" in \fI\s-1INSTALL\s0\fR.
.ie n .SS "Support for ""configure_requires"" in \s-1CPAN\s0 module metadata"
.el .SS "Support for \f(CWconfigure_requires\fP in \s-1CPAN\s0 module metadata"
.IX Subsection "Support for configure_requires in CPAN module metadata"
Both \f(CW\*(C`CPAN\*(C'\fR and \f(CW\*(C`CPANPLUS\*(C'\fR now support the \f(CW\*(C`configure_requires\*(C'\fR keyword
in the \f(CW\*(C`META.yml\*(C'\fR metadata file included in most recent \s-1CPAN\s0 distributions.
This allows distribution authors to specify configuration prerequisites that
must be installed before running \fIMakefile.PL\fR or \fIBuild.PL\fR.
.PP
See the documentation for \f(CW\*(C`ExtUtils::MakeMaker\*(C'\fR or \f(CW\*(C`Module::Build\*(C'\fR for more
on how to specify \f(CW\*(C`configure_requires\*(C'\fR when creating a distribution for \s-1CPAN.\s0
.SH "Modules and Pragmata"
.IX Header "Modules and Pragmata"
.SS "New Modules and Pragmata"
.IX Subsection "New Modules and Pragmata"
.ie n .IP """autodie""" 4
.el .IP "\f(CWautodie\fR" 4
.IX Item "autodie"
This is a new lexically-scoped alternative for the \f(CW\*(C`Fatal\*(C'\fR module.
The bundled version is 2.06_01. Note that in this release, using a string
eval when \f(CW\*(C`autodie\*(C'\fR is in effect can cause the autodie behaviour to leak
into the surrounding scope. See \*(L"\s-1BUGS\*(R"\s0 in autodie for more details.
.ie n .IP """Compress::Raw::Bzip2""" 4
.el .IP "\f(CWCompress::Raw::Bzip2\fR" 4
.IX Item "Compress::Raw::Bzip2"
This has been added to the core (version 2.020).
.ie n .IP """parent""" 4
.el .IP "\f(CWparent\fR" 4
.IX Item "parent"
This pragma establishes an \s-1ISA\s0 relationship with base classes at compile
time. It provides the key feature of \f(CW\*(C`base\*(C'\fR without the feature creep.
.ie n .IP """Parse::CPAN::Meta""" 4
.el .IP "\f(CWParse::CPAN::Meta\fR" 4
.IX Item "Parse::CPAN::Meta"
This has been added to the core (version 1.39).
.SS "Pragmata Changes"
.IX Subsection "Pragmata Changes"
.ie n .IP """attributes""" 4
.el .IP "\f(CWattributes\fR" 4
.IX Item "attributes"
Upgraded from version 0.08 to 0.09.
.ie n .IP """attrs""" 4
.el .IP "\f(CWattrs\fR" 4
.IX Item "attrs"
Upgraded from version 1.02 to 1.03.
.ie n .IP """base""" 4
.el .IP "\f(CWbase\fR" 4
.IX Item "base"
Upgraded from version 2.13 to 2.14. See parent for a replacement.
.ie n .IP """bigint""" 4
.el .IP "\f(CWbigint\fR" 4
.IX Item "bigint"
Upgraded from version 0.22 to 0.23.
.ie n .IP """bignum""" 4
.el .IP "\f(CWbignum\fR" 4
.IX Item "bignum"
Upgraded from version 0.22 to 0.23.
.ie n .IP """bigrat""" 4
.el .IP "\f(CWbigrat\fR" 4
.IX Item "bigrat"
Upgraded from version 0.22 to 0.23.
.ie n .IP """charnames""" 4
.el .IP "\f(CWcharnames\fR" 4
.IX Item "charnames"
Upgraded from version 1.06 to 1.07.
.Sp
The Unicode \fINameAliases.txt\fR database file has been added. This has the
effect of adding some extra \f(CW\*(C`\eN\*(C'\fR character names that formerly wouldn't
have been recognised; for example, \f(CW"\eN{LATIN CAPITAL LETTER GHA}"\fR.
.ie n .IP """constant""" 4
.el .IP "\f(CWconstant\fR" 4
.IX Item "constant"
Upgraded from version 1.13 to 1.17.
.ie n .IP """feature""" 4
.el .IP "\f(CWfeature\fR" 4
.IX Item "feature"
The meaning of the \f(CW\*(C`:5.10\*(C'\fR and \f(CW\*(C`:5.10.X\*(C'\fR feature bundles has
changed slightly. The last component, if any (i.e. \f(CW\*(C`X\*(C'\fR) is simply ignored.
This is predicated on the assumption that new features will not, in
general, be added to maintenance releases. So \f(CW\*(C`:5.10\*(C'\fR and \f(CW\*(C`:5.10.X\*(C'\fR
have identical effect. This is a change to the behaviour documented for
5.10.0.
.ie n .IP """fields""" 4
.el .IP "\f(CWfields\fR" 4
.IX Item "fields"
Upgraded from version 2.13 to 2.14 (this was just a version bump; there
were no functional changes).
.ie n .IP """lib""" 4
.el .IP "\f(CWlib\fR" 4
.IX Item "lib"
Upgraded from version 0.5565 to 0.62.
.ie n .IP """open""" 4
.el .IP "\f(CWopen\fR" 4
.IX Item "open"
Upgraded from version 1.06 to 1.07.
.ie n .IP """overload""" 4
.el .IP "\f(CWoverload\fR" 4
.IX Item "overload"
Upgraded from version 1.06 to 1.07.
.ie n .IP """overloading""" 4
.el .IP "\f(CWoverloading\fR" 4
.IX Item "overloading"
See "The \f(CW\*(C`overloading\*(C'\fR pragma" above.
.ie n .IP """version""" 4
.el .IP "\f(CWversion\fR" 4
.IX Item "version"
Upgraded from version 0.74 to 0.77.
.SS "Updated Modules"
.IX Subsection "Updated Modules"
.ie n .IP """Archive::Extract""" 4
.el .IP "\f(CWArchive::Extract\fR" 4
.IX Item "Archive::Extract"
Upgraded from version 0.24 to 0.34.
.ie n .IP """Archive::Tar""" 4
.el .IP "\f(CWArchive::Tar\fR" 4
.IX Item "Archive::Tar"
Upgraded from version 1.38 to 1.52.
.ie n .IP """Attribute::Handlers""" 4
.el .IP "\f(CWAttribute::Handlers\fR" 4
.IX Item "Attribute::Handlers"
Upgraded from version 0.79 to 0.85.
.ie n .IP """AutoLoader""" 4
.el .IP "\f(CWAutoLoader\fR" 4
.IX Item "AutoLoader"
Upgraded from version 5.63 to 5.68.
.ie n .IP """AutoSplit""" 4
.el .IP "\f(CWAutoSplit\fR" 4
.IX Item "AutoSplit"
Upgraded from version 1.05 to 1.06.
.ie n .IP """B""" 4
.el .IP "\f(CWB\fR" 4
.IX Item "B"
Upgraded from version 1.17 to 1.22.
.ie n .IP """B::Debug""" 4
.el .IP "\f(CWB::Debug\fR" 4
.IX Item "B::Debug"
Upgraded from version 1.05 to 1.11.
.ie n .IP """B::Deparse""" 4
.el .IP "\f(CWB::Deparse\fR" 4
.IX Item "B::Deparse"
Upgraded from version 0.83 to 0.89.
.ie n .IP """B::Lint""" 4
.el .IP "\f(CWB::Lint\fR" 4
.IX Item "B::Lint"
Upgraded from version 1.09 to 1.11.
.ie n .IP """B::Xref""" 4
.el .IP "\f(CWB::Xref\fR" 4
.IX Item "B::Xref"
Upgraded from version 1.01 to 1.02.
.ie n .IP """Benchmark""" 4
.el .IP "\f(CWBenchmark\fR" 4
.IX Item "Benchmark"
Upgraded from version 1.10 to 1.11.
.ie n .IP """Carp""" 4
.el .IP "\f(CWCarp\fR" 4
.IX Item "Carp"
Upgraded from version 1.08 to 1.11.
.ie n .IP """CGI""" 4
.el .IP "\f(CWCGI\fR" 4
.IX Item "CGI"
Upgraded from version 3.29 to 3.43.
(also includes the \*(L"default_value for \fIpopup_menu()\fR\*(R" fix from 3.45).
.ie n .IP """Compress::Zlib""" 4
.el .IP "\f(CWCompress::Zlib\fR" 4
.IX Item "Compress::Zlib"
Upgraded from version 2.008 to 2.020.
.ie n .IP """CPAN""" 4
.el .IP "\f(CWCPAN\fR" 4
.IX Item "CPAN"
Upgraded from version 1.9205 to 1.9402. \f(CW\*(C`CPAN::FTP\*(C'\fR has a local fix to
stop it being too verbose on download failure.
.ie n .IP """CPANPLUS""" 4
.el .IP "\f(CWCPANPLUS\fR" 4
.IX Item "CPANPLUS"
Upgraded from version 0.84 to 0.88.
.ie n .IP """CPANPLUS::Dist::Build""" 4
.el .IP "\f(CWCPANPLUS::Dist::Build\fR" 4
.IX Item "CPANPLUS::Dist::Build"
Upgraded from version 0.06_02 to 0.36.
.ie n .IP """Cwd""" 4
.el .IP "\f(CWCwd\fR" 4
.IX Item "Cwd"
Upgraded from version 3.25_01 to 3.30.
.ie n .IP """Data::Dumper""" 4
.el .IP "\f(CWData::Dumper\fR" 4
.IX Item "Data::Dumper"
Upgraded from version 2.121_14 to 2.124.
.ie n .IP """DB""" 4
.el .IP "\f(CWDB\fR" 4
.IX Item "DB"
Upgraded from version 1.01 to 1.02.
.ie n .IP """DB_File""" 4
.el .IP "\f(CWDB_File\fR" 4
.IX Item "DB_File"
Upgraded from version 1.816_1 to 1.820.
.ie n .IP """Devel::PPPort""" 4
.el .IP "\f(CWDevel::PPPort\fR" 4
.IX Item "Devel::PPPort"
Upgraded from version 3.13 to 3.19.
.ie n .IP """Digest::MD5""" 4
.el .IP "\f(CWDigest::MD5\fR" 4
.IX Item "Digest::MD5"
Upgraded from version 2.36_01 to 2.39.
.ie n .IP """Digest::SHA""" 4
.el .IP "\f(CWDigest::SHA\fR" 4
.IX Item "Digest::SHA"
Upgraded from version 5.45 to 5.47.
.ie n .IP """DirHandle""" 4
.el .IP "\f(CWDirHandle\fR" 4
.IX Item "DirHandle"
Upgraded from version 1.01 to 1.03.
.ie n .IP """Dumpvalue""" 4
.el .IP "\f(CWDumpvalue\fR" 4
.IX Item "Dumpvalue"
Upgraded from version 1.12 to 1.13.
.ie n .IP """DynaLoader""" 4
.el .IP "\f(CWDynaLoader\fR" 4
.IX Item "DynaLoader"
Upgraded from version 1.08 to 1.10.
.ie n .IP """Encode""" 4
.el .IP "\f(CWEncode\fR" 4
.IX Item "Encode"
Upgraded from version 2.23 to 2.35.
.ie n .IP """Errno""" 4
.el .IP "\f(CWErrno\fR" 4
.IX Item "Errno"
Upgraded from version 1.10 to 1.11.
.ie n .IP """Exporter""" 4
.el .IP "\f(CWExporter\fR" 4
.IX Item "Exporter"
Upgraded from version 5.62 to 5.63.
.ie n .IP """ExtUtils::CBuilder""" 4
.el .IP "\f(CWExtUtils::CBuilder\fR" 4
.IX Item "ExtUtils::CBuilder"
Upgraded from version 0.21 to 0.2602.
.ie n .IP """ExtUtils::Command""" 4
.el .IP "\f(CWExtUtils::Command\fR" 4
.IX Item "ExtUtils::Command"
Upgraded from version 1.13 to 1.16.
.ie n .IP """ExtUtils::Constant""" 4
.el .IP "\f(CWExtUtils::Constant\fR" 4
.IX Item "ExtUtils::Constant"
Upgraded from 0.20 to 0.22. (Note that neither of these versions are
available on \s-1CPAN.\s0)
.ie n .IP """ExtUtils::Embed""" 4
.el .IP "\f(CWExtUtils::Embed\fR" 4
.IX Item "ExtUtils::Embed"
Upgraded from version 1.27 to 1.28.
.ie n .IP """ExtUtils::Install""" 4
.el .IP "\f(CWExtUtils::Install\fR" 4
.IX Item "ExtUtils::Install"
Upgraded from version 1.44 to 1.54.
.ie n .IP """ExtUtils::MakeMaker""" 4
.el .IP "\f(CWExtUtils::MakeMaker\fR" 4
.IX Item "ExtUtils::MakeMaker"
Upgraded from version 6.42 to 6.55_02.
.Sp
Note that \f(CW\*(C`ExtUtils::MakeMaker::bytes\*(C'\fR and \f(CW\*(C`ExtUtils::MakeMaker::vmsish\*(C'\fR
have been removed from this distribution.
.ie n .IP """ExtUtils::Manifest""" 4
.el .IP "\f(CWExtUtils::Manifest\fR" 4
.IX Item "ExtUtils::Manifest"
Upgraded from version 1.51_01 to 1.56.
.ie n .IP """ExtUtils::ParseXS""" 4
.el .IP "\f(CWExtUtils::ParseXS\fR" 4
.IX Item "ExtUtils::ParseXS"
Upgraded from version 2.18_02 to 2.2002.
.ie n .IP """Fatal""" 4
.el .IP "\f(CWFatal\fR" 4
.IX Item "Fatal"
Upgraded from version 1.05 to 2.06_01. See also the new pragma \f(CW\*(C`autodie\*(C'\fR.
.ie n .IP """File::Basename""" 4
.el .IP "\f(CWFile::Basename\fR" 4
.IX Item "File::Basename"
Upgraded from version 2.76 to 2.77.
.ie n .IP """File::Compare""" 4
.el .IP "\f(CWFile::Compare\fR" 4
.IX Item "File::Compare"
Upgraded from version 1.1005 to 1.1006.
.ie n .IP """File::Copy""" 4
.el .IP "\f(CWFile::Copy\fR" 4
.IX Item "File::Copy"
Upgraded from version 2.11 to 2.14.
.ie n .IP """File::Fetch""" 4
.el .IP "\f(CWFile::Fetch\fR" 4
.IX Item "File::Fetch"
Upgraded from version 0.14 to 0.20.
.ie n .IP """File::Find""" 4
.el .IP "\f(CWFile::Find\fR" 4
.IX Item "File::Find"
Upgraded from version 1.12 to 1.14.
.ie n .IP """File::Path""" 4
.el .IP "\f(CWFile::Path\fR" 4
.IX Item "File::Path"
Upgraded from version 2.04 to 2.07_03.
.ie n .IP """File::Spec""" 4
.el .IP "\f(CWFile::Spec\fR" 4
.IX Item "File::Spec"
Upgraded from version 3.2501 to 3.30.
.ie n .IP """File::stat""" 4
.el .IP "\f(CWFile::stat\fR" 4
.IX Item "File::stat"
Upgraded from version 1.00 to 1.01.
.ie n .IP """File::Temp""" 4
.el .IP "\f(CWFile::Temp\fR" 4
.IX Item "File::Temp"
Upgraded from version 0.18 to 0.22.
.ie n .IP """FileCache""" 4
.el .IP "\f(CWFileCache\fR" 4
.IX Item "FileCache"
Upgraded from version 1.07 to 1.08.
.ie n .IP """FileHandle""" 4
.el .IP "\f(CWFileHandle\fR" 4
.IX Item "FileHandle"
Upgraded from version 2.01 to 2.02.
.ie n .IP """Filter::Simple""" 4
.el .IP "\f(CWFilter::Simple\fR" 4
.IX Item "Filter::Simple"
Upgraded from version 0.82 to 0.84.
.ie n .IP """Filter::Util::Call""" 4
.el .IP "\f(CWFilter::Util::Call\fR" 4
.IX Item "Filter::Util::Call"
Upgraded from version 1.07 to 1.08.
.ie n .IP """FindBin""" 4
.el .IP "\f(CWFindBin\fR" 4
.IX Item "FindBin"
Upgraded from version 1.49 to 1.50.
.ie n .IP """GDBM_File""" 4
.el .IP "\f(CWGDBM_File\fR" 4
.IX Item "GDBM_File"
Upgraded from version 1.08 to 1.09.
.ie n .IP """Getopt::Long""" 4
.el .IP "\f(CWGetopt::Long\fR" 4
.IX Item "Getopt::Long"
Upgraded from version 2.37 to 2.38.
.ie n .IP """Hash::Util::FieldHash""" 4
.el .IP "\f(CWHash::Util::FieldHash\fR" 4
.IX Item "Hash::Util::FieldHash"
Upgraded from version 1.03 to 1.04. This fixes a memory leak.
.ie n .IP """I18N::Collate""" 4
.el .IP "\f(CWI18N::Collate\fR" 4
.IX Item "I18N::Collate"
Upgraded from version 1.00 to 1.01.
.ie n .IP """IO""" 4
.el .IP "\f(CWIO\fR" 4
.IX Item "IO"
Upgraded from version 1.23_01 to 1.25.
.Sp
This makes non-blocking mode work on Windows in \f(CW\*(C`IO::Socket::INET\*(C'\fR
[\s-1CPAN\s0 #43573].
.ie n .IP """IO::Compress::*""" 4
.el .IP "\f(CWIO::Compress::*\fR" 4
.IX Item "IO::Compress::*"
Upgraded from version 2.008 to 2.020.
.ie n .IP """IO::Dir""" 4
.el .IP "\f(CWIO::Dir\fR" 4
.IX Item "IO::Dir"
Upgraded from version 1.06 to 1.07.
.ie n .IP """IO::Handle""" 4
.el .IP "\f(CWIO::Handle\fR" 4
.IX Item "IO::Handle"
Upgraded from version 1.27 to 1.28.
.ie n .IP """IO::Socket""" 4
.el .IP "\f(CWIO::Socket\fR" 4
.IX Item "IO::Socket"
Upgraded from version 1.30_01 to 1.31.
.ie n .IP """IO::Zlib""" 4
.el .IP "\f(CWIO::Zlib\fR" 4
.IX Item "IO::Zlib"
Upgraded from version 1.07 to 1.09.
.ie n .IP """IPC::Cmd""" 4
.el .IP "\f(CWIPC::Cmd\fR" 4
.IX Item "IPC::Cmd"
Upgraded from version 0.40_1 to 0.46.
.ie n .IP """IPC::Open3""" 4
.el .IP "\f(CWIPC::Open3\fR" 4
.IX Item "IPC::Open3"
Upgraded from version 1.02 to 1.04.
.ie n .IP """IPC::SysV""" 4
.el .IP "\f(CWIPC::SysV\fR" 4
.IX Item "IPC::SysV"
Upgraded from version 1.05 to 2.01.
.ie n .IP """lib""" 4
.el .IP "\f(CWlib\fR" 4
.IX Item "lib"
Upgraded from version 0.5565 to 0.62.
.ie n .IP """List::Util""" 4
.el .IP "\f(CWList::Util\fR" 4
.IX Item "List::Util"
Upgraded from version 1.19 to 1.21.
.ie n .IP """Locale::MakeText""" 4
.el .IP "\f(CWLocale::MakeText\fR" 4
.IX Item "Locale::MakeText"
Upgraded from version 1.12 to 1.13.
.ie n .IP """Log::Message""" 4
.el .IP "\f(CWLog::Message\fR" 4
.IX Item "Log::Message"
Upgraded from version 0.01 to 0.02.
.ie n .IP """Math::BigFloat""" 4
.el .IP "\f(CWMath::BigFloat\fR" 4
.IX Item "Math::BigFloat"
Upgraded from version 1.59 to 1.60.
.ie n .IP """Math::BigInt""" 4
.el .IP "\f(CWMath::BigInt\fR" 4
.IX Item "Math::BigInt"
Upgraded from version 1.88 to 1.89.
.ie n .IP """Math::BigInt::FastCalc""" 4
.el .IP "\f(CWMath::BigInt::FastCalc\fR" 4
.IX Item "Math::BigInt::FastCalc"
Upgraded from version 0.16 to 0.19.
.ie n .IP """Math::BigRat""" 4
.el .IP "\f(CWMath::BigRat\fR" 4
.IX Item "Math::BigRat"
Upgraded from version 0.21 to 0.22.
.ie n .IP """Math::Complex""" 4
.el .IP "\f(CWMath::Complex\fR" 4
.IX Item "Math::Complex"
Upgraded from version 1.37 to 1.56.
.ie n .IP """Math::Trig""" 4
.el .IP "\f(CWMath::Trig\fR" 4
.IX Item "Math::Trig"
Upgraded from version 1.04 to 1.20.
.ie n .IP """Memoize""" 4
.el .IP "\f(CWMemoize\fR" 4
.IX Item "Memoize"
Upgraded from version 1.01_02 to 1.01_03 (just a minor documentation
change).
.ie n .IP """Module::Build""" 4
.el .IP "\f(CWModule::Build\fR" 4
.IX Item "Module::Build"
Upgraded from version 0.2808_01 to 0.34_02.
.ie n .IP """Module::CoreList""" 4
.el .IP "\f(CWModule::CoreList\fR" 4
.IX Item "Module::CoreList"
Upgraded from version 2.13 to 2.18. This release no longer contains the
\&\f(CW%Module::CoreList::patchlevel\fR hash.
.ie n .IP """Module::Load""" 4
.el .IP "\f(CWModule::Load\fR" 4
.IX Item "Module::Load"
Upgraded from version 0.12 to 0.16.
.ie n .IP """Module::Load::Conditional""" 4
.el .IP "\f(CWModule::Load::Conditional\fR" 4
.IX Item "Module::Load::Conditional"
Upgraded from version 0.22 to 0.30.
.ie n .IP """Module::Loaded""" 4
.el .IP "\f(CWModule::Loaded\fR" 4
.IX Item "Module::Loaded"
Upgraded from version 0.01 to 0.02.
.ie n .IP """Module::Pluggable""" 4
.el .IP "\f(CWModule::Pluggable\fR" 4
.IX Item "Module::Pluggable"
Upgraded from version 3.6 to 3.9.
.ie n .IP """NDBM_File""" 4
.el .IP "\f(CWNDBM_File\fR" 4
.IX Item "NDBM_File"
Upgraded from version 1.07 to 1.08.
.ie n .IP """Net::Ping""" 4
.el .IP "\f(CWNet::Ping\fR" 4
.IX Item "Net::Ping"
Upgraded from version 2.33 to 2.36.
.ie n .IP """NEXT""" 4
.el .IP "\f(CWNEXT\fR" 4
.IX Item "NEXT"
Upgraded from version 0.60_01 to 0.64.
.ie n .IP """Object::Accessor""" 4
.el .IP "\f(CWObject::Accessor\fR" 4
.IX Item "Object::Accessor"
Upgraded from version 0.32 to 0.34.
.ie n .IP """OS2::REXX""" 4
.el .IP "\f(CWOS2::REXX\fR" 4
.IX Item "OS2::REXX"
Upgraded from version 1.03 to 1.04.
.ie n .IP """Package::Constants""" 4
.el .IP "\f(CWPackage::Constants\fR" 4
.IX Item "Package::Constants"
Upgraded from version 0.01 to 0.02.
.ie n .IP """PerlIO""" 4
.el .IP "\f(CWPerlIO\fR" 4
.IX Item "PerlIO"
Upgraded from version 1.04 to 1.06.
.ie n .IP """PerlIO::via""" 4
.el .IP "\f(CWPerlIO::via\fR" 4
.IX Item "PerlIO::via"
Upgraded from version 0.04 to 0.07.
.ie n .IP """Pod::Man""" 4
.el .IP "\f(CWPod::Man\fR" 4
.IX Item "Pod::Man"
Upgraded from version 2.16 to 2.22.
.ie n .IP """Pod::Parser""" 4
.el .IP "\f(CWPod::Parser\fR" 4
.IX Item "Pod::Parser"
Upgraded from version 1.35 to 1.37.
.ie n .IP """Pod::Simple""" 4
.el .IP "\f(CWPod::Simple\fR" 4
.IX Item "Pod::Simple"
Upgraded from version 3.05 to 3.07.
.ie n .IP """Pod::Text""" 4
.el .IP "\f(CWPod::Text\fR" 4
.IX Item "Pod::Text"
Upgraded from version 3.08 to 3.13.
.ie n .IP """POSIX""" 4
.el .IP "\f(CWPOSIX\fR" 4
.IX Item "POSIX"
Upgraded from version 1.13 to 1.17.
.ie n .IP """Safe""" 4
.el .IP "\f(CWSafe\fR" 4
.IX Item "Safe"
Upgraded from 2.12 to 2.18.
.ie n .IP """Scalar::Util""" 4
.el .IP "\f(CWScalar::Util\fR" 4
.IX Item "Scalar::Util"
Upgraded from version 1.19 to 1.21.
.ie n .IP """SelectSaver""" 4
.el .IP "\f(CWSelectSaver\fR" 4
.IX Item "SelectSaver"
Upgraded from 1.01 to 1.02.
.ie n .IP """SelfLoader""" 4
.el .IP "\f(CWSelfLoader\fR" 4
.IX Item "SelfLoader"
Upgraded from 1.11 to 1.17.
.ie n .IP """Socket""" 4
.el .IP "\f(CWSocket\fR" 4
.IX Item "Socket"
Upgraded from 1.80 to 1.82.
.ie n .IP """Storable""" 4
.el .IP "\f(CWStorable\fR" 4
.IX Item "Storable"
Upgraded from 2.18 to 2.20.
.ie n .IP """Switch""" 4
.el .IP "\f(CWSwitch\fR" 4
.IX Item "Switch"
Upgraded from version 2.13 to 2.14. Please see \*(L"Deprecations\*(R".
.ie n .IP """Symbol""" 4
.el .IP "\f(CWSymbol\fR" 4
.IX Item "Symbol"
Upgraded from version 1.06 to 1.07.
.ie n .IP """Sys::Syslog""" 4
.el .IP "\f(CWSys::Syslog\fR" 4
.IX Item "Sys::Syslog"
Upgraded from version 0.22 to 0.27.
.ie n .IP """Term::ANSIColor""" 4
.el .IP "\f(CWTerm::ANSIColor\fR" 4
.IX Item "Term::ANSIColor"
Upgraded from version 1.12 to 2.00.
.ie n .IP """Term::ReadLine""" 4
.el .IP "\f(CWTerm::ReadLine\fR" 4
.IX Item "Term::ReadLine"
Upgraded from version 1.03 to 1.04.
.ie n .IP """Term::UI""" 4
.el .IP "\f(CWTerm::UI\fR" 4
.IX Item "Term::UI"
Upgraded from version 0.18 to 0.20.
.ie n .IP """Test::Harness""" 4
.el .IP "\f(CWTest::Harness\fR" 4
.IX Item "Test::Harness"
Upgraded from version 2.64 to 3.17.
.Sp
Note that one side-effect of the 2.x to 3.x upgrade is that the
experimental \f(CW\*(C`Test::Harness::Straps\*(C'\fR module (and its supporting
\&\f(CW\*(C`Assert\*(C'\fR, \f(CW\*(C`Iterator\*(C'\fR, \f(CW\*(C`Point\*(C'\fR and \f(CW\*(C`Results\*(C'\fR modules) have been
removed. If you still need this, then they are available in the
(unmaintained) \f(CW\*(C`Test\-Harness\-Straps\*(C'\fR distribution on \s-1CPAN.\s0
.ie n .IP """Test::Simple""" 4
.el .IP "\f(CWTest::Simple\fR" 4
.IX Item "Test::Simple"
Upgraded from version 0.72 to 0.92.
.ie n .IP """Text::ParseWords""" 4
.el .IP "\f(CWText::ParseWords\fR" 4
.IX Item "Text::ParseWords"
Upgraded from version 3.26 to 3.27.
.ie n .IP """Text::Tabs""" 4
.el .IP "\f(CWText::Tabs\fR" 4
.IX Item "Text::Tabs"
Upgraded from version 2007.1117 to 2009.0305.
.ie n .IP """Text::Wrap""" 4
.el .IP "\f(CWText::Wrap\fR" 4
.IX Item "Text::Wrap"
Upgraded from version 2006.1117 to 2009.0305.
.ie n .IP """Thread::Queue""" 4
.el .IP "\f(CWThread::Queue\fR" 4
.IX Item "Thread::Queue"
Upgraded from version 2.00 to 2.11.
.ie n .IP """Thread::Semaphore""" 4
.el .IP "\f(CWThread::Semaphore\fR" 4
.IX Item "Thread::Semaphore"
Upgraded from version 2.01 to 2.09.
.ie n .IP """threads""" 4
.el .IP "\f(CWthreads\fR" 4
.IX Item "threads"
Upgraded from version 1.67 to 1.72.
.ie n .IP """threads::shared""" 4
.el .IP "\f(CWthreads::shared\fR" 4
.IX Item "threads::shared"
Upgraded from version 1.14 to 1.29.
.ie n .IP """Tie::RefHash""" 4
.el .IP "\f(CWTie::RefHash\fR" 4
.IX Item "Tie::RefHash"
Upgraded from version 1.37 to 1.38.
.ie n .IP """Tie::StdHandle""" 4
.el .IP "\f(CWTie::StdHandle\fR" 4
.IX Item "Tie::StdHandle"
This has documentation changes, and has been assigned a version for the
first time: version 4.2.
.ie n .IP """Time::HiRes""" 4
.el .IP "\f(CWTime::HiRes\fR" 4
.IX Item "Time::HiRes"
Upgraded from version 1.9711 to 1.9719.
.ie n .IP """Time::Local""" 4
.el .IP "\f(CWTime::Local\fR" 4
.IX Item "Time::Local"
Upgraded from version 1.18 to 1.1901.
.ie n .IP """Time::Piece""" 4
.el .IP "\f(CWTime::Piece\fR" 4
.IX Item "Time::Piece"
Upgraded from version 1.12 to 1.15.
.ie n .IP """Unicode::Normalize""" 4
.el .IP "\f(CWUnicode::Normalize\fR" 4
.IX Item "Unicode::Normalize"
Upgraded from version 1.02 to 1.03.
.ie n .IP """Unicode::UCD""" 4
.el .IP "\f(CWUnicode::UCD\fR" 4
.IX Item "Unicode::UCD"
Upgraded from version 0.25 to 0.27.
.Sp
\&\f(CW\*(C`charinfo()\*(C'\fR now works on Unified \s-1CJK\s0 code points added to later versions
of Unicode.
.Sp
\&\f(CW\*(C`casefold()\*(C'\fR has new fields returned to provide both a simpler interface
and previously missing information. The old fields are retained for
backwards compatibility. Information about Turkic-specific code points is
now returned.
.Sp
The documentation has been corrected and expanded.
.ie n .IP """UNIVERSAL""" 4
.el .IP "\f(CWUNIVERSAL\fR" 4
.IX Item "UNIVERSAL"
Upgraded from version 1.04 to 1.05.
.ie n .IP """Win32""" 4
.el .IP "\f(CWWin32\fR" 4
.IX Item "Win32"
Upgraded from version 0.34 to 0.39.
.ie n .IP """Win32API::File""" 4
.el .IP "\f(CWWin32API::File\fR" 4
.IX Item "Win32API::File"
Upgraded from version 0.1001_01 to 0.1101.
.ie n .IP """XSLoader""" 4
.el .IP "\f(CWXSLoader\fR" 4
.IX Item "XSLoader"
Upgraded from version 0.08 to 0.10.
.SH "Utility Changes"
.IX Header "Utility Changes"
.IP "\fIh2ph\fR" 4
.IX Item "h2ph"
Now looks in \f(CW\*(C`include\-fixed\*(C'\fR too, which is a recent addition to gcc's
search path.
.IP "\fIh2xs\fR" 4
.IX Item "h2xs"
No longer incorrectly treats enum values like macros (Daniel Burr).
.Sp
Now handles \*(C+ style constants (\f(CW\*(C`//\*(C'\fR) properly in enums. (A patch from
Rainer Weikusat was used; Daniel Burr also proposed a similar fix).
.IP "\fIperl5db.pl\fR" 4
.IX Item "perl5db.pl"
\&\f(CW\*(C`LVALUE\*(C'\fR subroutines now work under the debugger.
.Sp
The debugger now correctly handles proxy constant subroutines, and
subroutine stubs.
.IP "\fIperlthanks\fR" 4
.IX Item "perlthanks"
Perl 5.10.1 adds a new utility \fIperlthanks\fR, which is a variant of
\&\fIperlbug\fR, but for sending non-bug-reports to the authors and maintainers
of Perl. Getting nothing but bug reports can become a bit demoralising:
we'll see if this changes things.
.SH "New Documentation"
.IX Header "New Documentation"
.IP "perlhaiku" 4
.IX Item "perlhaiku"
This contains instructions on how to build perl for the Haiku platform.
.IP "perlmroapi" 4
.IX Item "perlmroapi"
This describes the new interface for pluggable Method Resolution Orders.
.IP "perlperf" 4
.IX Item "perlperf"
This document, by Richard Foley, provides an introduction to the use of
performance and optimization techniques which can be used with particular
reference to perl programs.
.IP "perlrepository" 4
.IX Item "perlrepository"
This describes how to access the perl source using the \fIgit\fR version
control system.
.IP "perlthanks" 4
.IX Item "perlthanks"
This describes the new \fIperlthanks\fR utility.
.SH "Changes to Existing Documentation"
.IX Header "Changes to Existing Documentation"
The various large \f(CW\*(C`Changes*\*(C'\fR files (which listed every change made to perl
over the last 18 years) have been removed, and replaced by a small file,
also called \f(CW\*(C`Changes\*(C'\fR, which just explains how that same information may
be extracted from the git version control system.
.PP
The file \fIPorting/patching.pod\fR has been deleted, as it mainly described
interacting with the old Perforce-based repository, which is now obsolete.
Information still relevant has been moved to perlrepository.
.PP
perlapi, perlintern, perlmodlib and perltoc are now all
generated at build time, rather than being shipped as part of the release.
.SH "Performance Enhancements"
.IX Header "Performance Enhancements"
.IP "\(bu" 4
A new internal cache means that \f(CW\*(C`isa()\*(C'\fR will often be faster.
.IP "\(bu" 4
Under \f(CW\*(C`use locale\*(C'\fR, the locale-relevant information is now cached on
read-only values, such as the list returned by \f(CW\*(C`keys %hash\*(C'\fR. This makes
operations such as \f(CW\*(C`sort keys %hash\*(C'\fR in the scope of \f(CW\*(C`use locale\*(C'\fR much
faster.
.IP "\(bu" 4
Empty \f(CW\*(C`DESTROY\*(C'\fR methods are no longer called.
.SH "Installation and Configuration Improvements"
.IX Header "Installation and Configuration Improvements"
.SS "\fIext/\fP reorganisation"
.IX Subsection "ext/ reorganisation"
The layout of directories in \fIext\fR has been revised. Specifically, all
extensions are now flat, and at the top level, with \f(CW\*(C`/\*(C'\fR in pathnames
replaced by \f(CW\*(C`\-\*(C'\fR, so that \fIext/Data/Dumper/\fR is now \fIext/Data\-Dumper/\fR,
etc.  The names of the extensions as specified to \fIConfigure\fR, and as
reported by \f(CW%Config::Config\fR under the keys \f(CW\*(C`dynamic_ext\*(C'\fR,
\&\f(CW\*(C`known_extensions\*(C'\fR, \f(CW\*(C`nonxs_ext\*(C'\fR and \f(CW\*(C`static_ext\*(C'\fR have not changed, and
still use \f(CW\*(C`/\*(C'\fR. Hence this change will not have any affect once perl is
installed. However, \f(CW\*(C`Attribute::Handlers\*(C'\fR, \f(CW\*(C`Safe\*(C'\fR and \f(CW\*(C`mro\*(C'\fR have now
become extensions in their own right, so if you run \fIConfigure\fR with
options to specify an exact list of extensions to build, you will need to
change it to account for this.
.PP
For 5.10.2, it is planned that many dual-life modules will have been moved
from \fIlib\fR to \fIext\fR; again this will have no effect on an installed
perl, but will matter if you invoke \fIConfigure\fR with a pre-canned list of
extensions to build.
.SS "Configuration improvements"
.IX Subsection "Configuration improvements"
If \f(CW\*(C`vendorlib\*(C'\fR and \f(CW\*(C`vendorarch\*(C'\fR are the same, then they are only added to
\&\f(CW@INC\fR once.
.PP
\&\f(CW$Config{usedevel}\fR and the C\-level \f(CW\*(C`PERL_USE_DEVEL\*(C'\fR are now defined if
perl is built with  \f(CW\*(C`\-Dusedevel\*(C'\fR.
.PP
\&\fIConfigure\fR will enable use of \f(CW\*(C`\-fstack\-protector\*(C'\fR, to provide protection
against stack-smashing attacks, if the compiler supports it.
.PP
\&\fIConfigure\fR will now determine the correct prototypes for re-entrant
functions, and for \f(CW\*(C`gconvert\*(C'\fR, if you are using a \*(C+ compiler rather
than a C compiler.
.PP
On Unix, if you build from a tree containing a git repository, the
configuration process will note the commit hash you have checked out, for
display in the output of \f(CW\*(C`perl \-v\*(C'\fR and \f(CW\*(C`perl \-V\*(C'\fR. Unpushed local commits
are automatically added to the list of local patches displayed by
\&\f(CW\*(C`perl \-V\*(C'\fR.
.SS "Compilation improvements"
.IX Subsection "Compilation improvements"
As part of the flattening of \fIext\fR, all extensions on all platforms are
built by \fImake_ext.pl\fR. This replaces the Unix-specific
\&\fIext/util/make_ext\fR, VMS-specific \fImake_ext.com\fR and Win32\-specific
\&\fIwin32/buildext.pl\fR.
.SS "Platform Specific Changes"
.IX Subsection "Platform Specific Changes"
.IP "\s-1AIX\s0" 4
.IX Item "AIX"
Removed \fIlibbsd\fR for \s-1AIX 5L\s0 and 6.1. Only \fIflock()\fR was used from \fIlibbsd\fR.
.Sp
Removed \fIlibgdbm\fR for \s-1AIX 5L\s0 and 6.1. The \fIlibgdbm\fR is delivered as an
optional package with the \s-1AIX\s0 Toolbox. Unfortunately the 64 bit version 
is broken.
.Sp
Hints changes mean that \s-1AIX 4.2\s0 should work again.
.IP "Cygwin" 4
.IX Item "Cygwin"
On Cygwin we now strip the last number from the \s-1DLL.\s0 This has been the
behaviour in the cygwin.com build for years. The hints files have been
updated.
.IP "FreeBSD" 4
.IX Item "FreeBSD"
The hints files now identify the correct threading libraries on FreeBSD 7
and later.
.IP "Irix" 4
.IX Item "Irix"
We now work around a bizarre preprocessor bug in the Irix 6.5 compiler:
\&\f(CW\*(C`cc \-E \-\*(C'\fR unfortunately goes into K&R mode, but \f(CW\*(C`cc \-E file.c\*(C'\fR doesn't.
.IP "Haiku" 4
.IX Item "Haiku"
Patches from the Haiku maintainers have been merged in. Perl should now
build on Haiku.
.IP "MirOS \s-1BSD\s0" 4
.IX Item "MirOS BSD"
Perl should now build on MirOS \s-1BSD.\s0
.IP "NetBSD" 4
.IX Item "NetBSD"
Hints now supports versions 5.*.
.IP "Stratus \s-1VOS\s0" 4
.IX Item "Stratus VOS"
Various changes from Stratus have been merged in.
.IP "Symbian" 4
.IX Item "Symbian"
There is now support for Symbian S60 3.2 \s-1SDK\s0 and S60 5.0 \s-1SDK.\s0
.IP "Win32" 4
.IX Item "Win32"
Improved message window handling means that \f(CW\*(C`alarm\*(C'\fR and \f(CW\*(C`kill\*(C'\fR messages
will no longer be dropped under race conditions.
.IP "\s-1VMS\s0" 4
.IX Item "VMS"
Reads from the in-memory temporary files of \f(CW\*(C`PerlIO::scalar\*(C'\fR used to fail
if \f(CW$/\fR was set to a numeric reference (to indicate record-style reads).
This is now fixed.
.Sp
\&\s-1VMS\s0 now supports \f(CW\*(C`getgrgid\*(C'\fR.
.Sp
Many improvements and cleanups have been made to the \s-1VMS\s0 file name handling
and conversion code.
.Sp
Enabling the \f(CW\*(C`PERL_VMS_POSIX_EXIT\*(C'\fR logical name now encodes a \s-1POSIX\s0 exit
status in a \s-1VMS\s0 condition value for better interaction with \s-1GNV\s0's bash
shell and other utilities that depend on \s-1POSIX\s0 exit values.  See
\&\*(L"$?\*(R" in perlvms for details.
.SH "Selected Bug Fixes"
.IX Header "Selected Bug Fixes"
.IP "\(bu" 4
5.10.0 inadvertently disabled an optimisation, which caused a measurable
performance drop in list assignment, such as is often used to assign
function parameters from \f(CW@_\fR. The optimisation has been re-instated, and
the performance regression fixed.
.IP "\(bu" 4
Fixed memory leak on \f(CW\*(C`while (1) { map 1, 1 }\*(C'\fR [\s-1RT\s0 #53038].
.IP "\(bu" 4
Some potential coredumps in PerlIO fixed [\s-1RT\s0 #57322,54828].
.IP "\(bu" 4
The debugger now works with lvalue subroutines.
.IP "\(bu" 4
The debugger's \f(CW\*(C`m\*(C'\fR command was broken on modules that defined constants
[\s-1RT\s0 #61222].
.IP "\(bu" 4
\&\f(CW\*(C`crypt()\*(C'\fR and string complement could return tainted values for untainted
arguments [\s-1RT\s0 #59998].
.IP "\(bu" 4
The \f(CW\*(C`\-i.suffix\*(C'\fR command-line switch now recreates the file using
restricted permissions, before changing its mode to match the original
file. This eliminates a potential race condition [\s-1RT\s0 #60904].
.IP "\(bu" 4
On some Unix systems, the value in \f(CW$?\fR would not have the top bit set
(\f(CW\*(C`$? & 128\*(C'\fR) even if the child core dumped.
.IP "\(bu" 4
Under some circumstances, $^R could incorrectly become undefined
[\s-1RT\s0 #57042].
.IP "\(bu" 4
(\s-1XS\s0) In various hash functions, passing a pre-computed hash to when the
key is \s-1UTF\-8\s0 might result in an incorrect lookup.
.IP "\(bu" 4
(\s-1XS\s0) Including \fI\s-1XSUB\s0.h\fR before \fIperl.h\fR gave a compile-time error
[\s-1RT\s0 #57176].
.IP "\(bu" 4
\&\f(CW\*(C`$object\->isa(\*(AqFoo\*(Aq)\*(C'\fR would report false if the package \f(CW\*(C`Foo\*(C'\fR didn't
exist, even if the object's \f(CW@ISA\fR contained \f(CW\*(C`Foo\*(C'\fR.
.IP "\(bu" 4
Various bugs in the new-to 5.10.0 mro code, triggered by manipulating
\&\f(CW@ISA\fR, have been found and fixed.
.IP "\(bu" 4
Bitwise operations on references could crash the interpreter, e.g.
\&\f(CW\*(C`$x=\e$y; $x |= "foo"\*(C'\fR [\s-1RT\s0 #54956].
.IP "\(bu" 4
Patterns including alternation might be sensitive to the internal \s-1UTF\-8\s0
representation, e.g.
.Sp
.Vb 3
\&    my $byte = chr(192);
\&    my $utf8 = chr(192); utf8::upgrade($utf8);
\&    $utf8 =~ /$byte|X}/i;       # failed in 5.10.0
.Ve
.IP "\(bu" 4
Within UTF8\-encoded Perl source files (i.e. where \f(CW\*(C`use utf8\*(C'\fR is in
effect), double-quoted literal strings could be corrupted where a \f(CW\*(C`\exNN\*(C'\fR,
\&\f(CW\*(C`\e0NNN\*(C'\fR or \f(CW\*(C`\eN{}\*(C'\fR is followed by a literal character with ordinal value
greater than 255 [\s-1RT\s0 #59908].
.IP "\(bu" 4
\&\f(CW\*(C`B::Deparse\*(C'\fR failed to correctly deparse various constructs:
\&\f(CW\*(C`readpipe STRING\*(C'\fR [\s-1RT\s0 #62428], \f(CW\*(C`CORE::require(STRING)\*(C'\fR [\s-1RT\s0 #62488],
\&\f(CW\*(C`sub foo(_)\*(C'\fR [\s-1RT\s0 #62484].
.IP "\(bu" 4
Using \f(CW\*(C`setpgrp()\*(C'\fR with no arguments could corrupt the perl stack.
.IP "\(bu" 4
The block form of \f(CW\*(C`eval\*(C'\fR is now specifically trappable by \f(CW\*(C`Safe\*(C'\fR and
\&\f(CW\*(C`ops\*(C'\fR.  Previously it was erroneously treated like string \f(CW\*(C`eval\*(C'\fR.
.IP "\(bu" 4
In 5.10.0, the two characters \f(CW\*(C`[~\*(C'\fR were sometimes parsed as the smart
match operator (\f(CW\*(C`~~\*(C'\fR) [\s-1RT\s0 #63854].
.IP "\(bu" 4
In 5.10.0, the \f(CW\*(C`*\*(C'\fR quantifier in patterns was sometimes treated as
\&\f(CW\*(C`{0,32767}\*(C'\fR [\s-1RT\s0 #60034, #60464]. For example, this match would fail:
.Sp
.Vb 1
\&    ("ab" x 32768) =~ /^(ab)*$/
.Ve
.IP "\(bu" 4
\&\f(CW\*(C`shmget\*(C'\fR was limited to a 32 bit segment size on a 64 bit \s-1OS\s0 [\s-1RT\s0 #63924].
.IP "\(bu" 4
Using \f(CW\*(C`next\*(C'\fR or \f(CW\*(C`last\*(C'\fR to exit a \f(CW\*(C`given\*(C'\fR block no longer produces a
spurious warning like the following:
.Sp
.Vb 1
\&    Exiting given via last at foo.pl line 123
.Ve
.IP "\(bu" 4
On Windows, \f(CW\*(Aq.\efoo\*(Aq\fR and \f(CW\*(Aq..\efoo\*(Aq\fR  were treated differently than
\&\f(CW\*(Aq./foo\*(Aq\fR and \f(CW\*(Aq../foo\*(Aq\fR by \f(CW\*(C`do\*(C'\fR and \f(CW\*(C`require\*(C'\fR [\s-1RT\s0 #63492].
.IP "\(bu" 4
Assigning a format to a glob could corrupt the format; e.g.:
.Sp
.Vb 1
\&     *bar=*foo{FORMAT}; # foo format now bad
.Ve
.IP "\(bu" 4
Attempting to coerce a typeglob to a string or number could cause an
assertion failure. The correct error message is now generated,
\&\f(CW\*(C`Can\*(Aqt coerce GLOB to \f(CI$type\f(CW\*(C'\fR.
.IP "\(bu" 4
Under \f(CW\*(C`use filetest \*(Aqaccess\*(Aq\*(C'\fR, \f(CW\*(C`\-x\*(C'\fR was using the wrong access mode. This
has been fixed [\s-1RT\s0 #49003].
.IP "\(bu" 4
\&\f(CW\*(C`length\*(C'\fR on a tied scalar that returned a Unicode value would not be
correct the first time. This has been fixed.
.IP "\(bu" 4
Using an array \f(CW\*(C`tie\*(C'\fR inside in array \f(CW\*(C`tie\*(C'\fR could \s-1SEGV.\s0 This has been
fixed. [\s-1RT\s0 #51636]
.IP "\(bu" 4
A race condition inside \f(CW\*(C`PerlIOStdio_close()\*(C'\fR has been identified and
fixed. This used to cause various threading issues, including SEGVs.
.IP "\(bu" 4
In \f(CW\*(C`unpack\*(C'\fR, the use of \f(CW\*(C`()\*(C'\fR groups in scalar context was internally
placing a list on the interpreter's stack, which manifested in various
ways, including SEGVs.  This is now fixed [\s-1RT\s0 #50256].
.IP "\(bu" 4
Magic was called twice in \f(CW\*(C`substr\*(C'\fR, \f(CW\*(C`\e&$x\*(C'\fR, \f(CW\*(C`tie $x, $m\*(C'\fR and \f(CW\*(C`chop\*(C'\fR.
These have all been fixed.
.IP "\(bu" 4
A 5.10.0 optimisation to clear the temporary stack within the implicit
loop of \f(CW\*(C`s///ge\*(C'\fR has been reverted, as it turned out to be the cause of
obscure bugs in seemingly unrelated parts of the interpreter [commit 
ef0d4e17921ee3de].
.IP "\(bu" 4
The line numbers for warnings inside \f(CW\*(C`elsif\*(C'\fR are now correct.
.IP "\(bu" 4
The \f(CW\*(C`..\*(C'\fR operator now works correctly with ranges whose ends are at or
close to the values of the smallest and largest integers.
.IP "\(bu" 4
\&\f(CW\*(C`binmode STDIN, \*(Aq:raw\*(Aq\*(C'\fR could lead to segmentation faults on some platforms.
This has been fixed [\s-1RT\s0 #54828].
.IP "\(bu" 4
An off-by-one error meant that \f(CW\*(C`index $str, ...\*(C'\fR was effectively being
executed as \f(CW\*(C`index "$str\e0", ...\*(C'\fR. This has been fixed [\s-1RT\s0 #53746].
.IP "\(bu" 4
Various leaks associated with named captures in regexes have been fixed
[\s-1RT\s0 #57024].
.IP "\(bu" 4
A weak reference to a hash would leak. This was affecting \f(CW\*(C`DBI\*(C'\fR
[\s-1RT\s0 #56908].
.IP "\(bu" 4
Using (?|) in a regex could cause a segfault [\s-1RT\s0 #59734].
.IP "\(bu" 4
Use of a \s-1UTF\-8 \s0\f(CW\*(C`tr//\*(C'\fR within a closure could cause a segfault [\s-1RT\s0 #61520].
.IP "\(bu" 4
Calling \f(CW\*(C`sv_chop()\*(C'\fR or otherwise upgrading an \s-1SV\s0 could result in an
unaligned 64\-bit access on the \s-1SPARC\s0 architecture [\s-1RT\s0 #60574].
.IP "\(bu" 4
In the 5.10.0 release, \f(CW\*(C`inc_version_list\*(C'\fR would incorrectly list
\&\f(CW\*(C`5.10.*\*(C'\fR after \f(CW\*(C`5.8.*\*(C'\fR; this affected the \f(CW@INC\fR search order
[\s-1RT\s0 #67628].
.IP "\(bu" 4
In 5.10.0, \f(CW\*(C`pack "a*", $tainted_value\*(C'\fR returned a non-tainted value
[\s-1RT\s0 #52552].
.IP "\(bu" 4
In 5.10.0, \f(CW\*(C`printf\*(C'\fR and \f(CW\*(C`sprintf\*(C'\fR could produce the fatal error
\&\f(CW\*(C`panic: utf8_mg_pos_cache_update\*(C'\fR when printing \s-1UTF\-8\s0 strings
[\s-1RT\s0 #62666].
.IP "\(bu" 4
In the 5.10.0 release, a dynamically created \f(CW\*(C`AUTOLOAD\*(C'\fR method might be
missed (method cache issue) [\s-1RT\s0 #60220,60232].
.IP "\(bu" 4
In the 5.10.0 release, a combination of \f(CW\*(C`use feature\*(C'\fR and \f(CW\*(C`//ee\*(C'\fR could
cause a memory leak [\s-1RT\s0 #63110].
.IP "\(bu" 4
\&\f(CW\*(C`\-C\*(C'\fR on the shebang (\f(CW\*(C`#!\*(C'\fR) line is once more permitted if it is also
specified on the command line. \f(CW\*(C`\-C\*(C'\fR on the shebang line used to be a
silent no-op \fIif\fR it was not also on the command line, so perl 5.10.0
disallowed it, which broke some scripts. Now perl checks whether it is
also on the command line and only dies if it is not [\s-1RT\s0 #67880].
.IP "\(bu" 4
In 5.10.0, certain types of re-entrant regular expression could crash,
or cause the following assertion failure [\s-1RT\s0 #60508]:
.Sp
.Vb 1
\&    Assertion rx\->sublen >= (s \- rx\->subbeg) + i failed
.Ve
.SH "New or Changed Diagnostics"
.IX Header "New or Changed Diagnostics"
.ie n .IP """panic: sv_chop %s""" 4
.el .IP "\f(CWpanic: sv_chop %s\fR" 4
.IX Item "panic: sv_chop %s"
This new fatal error occurs when the C routine \f(CW\*(C`Perl_sv_chop()\*(C'\fR was
passed a position that is not within the scalar's string buffer. This
could be caused by buggy \s-1XS\s0 code, and at this point recovery is not
possible.
.ie n .IP """Can\*(Aqt locate package %s for the parents of %s""" 4
.el .IP "\f(CWCan\*(Aqt locate package %s for the parents of %s\fR" 4
.IX Item "Cant locate package %s for the parents of %s"
This warning has been removed. In general, it only got produced in
conjunction with other warnings, and removing it allowed an \s-1ISA\s0 lookup
optimisation to be added.
.ie n .IP """v\-string in use/require is non\-portable""" 4
.el .IP "\f(CWv\-string in use/require is non\-portable\fR" 4
.IX Item "v-string in use/require is non-portable"
This warning has been removed.
.ie n .IP """Deep recursion on subroutine ""%s""""" 4
.el .IP "\f(CWDeep recursion on subroutine ``%s''\fR" 4
.IX Item "Deep recursion on subroutine ""%s"""
It is now possible to change the depth threshold for this warning from the
default of 100, by recompiling the \fIperl\fR binary, setting the C
pre-processor macro \f(CW\*(C`PERL_SUB_DEPTH_WARN\*(C'\fR to the desired value.
.SH "Changed Internals"
.IX Header "Changed Internals"
.IP "\(bu" 4
The J.R.R. Tolkien quotes at the head of C source file have been checked and
proper citations added, thanks to a patch from Tom Christiansen.
.IP "\(bu" 4
\&\f(CW\*(C`vcroak()\*(C'\fR now accepts a null first argument. In addition, a full audit
was made of the \*(L"not \s-1NULL\*(R"\s0 compiler annotations, and those for several
other internal functions were corrected.
.IP "\(bu" 4
New macros \f(CW\*(C`dSAVEDERRNO\*(C'\fR, \f(CW\*(C`dSAVE_ERRNO\*(C'\fR, \f(CW\*(C`SAVE_ERRNO\*(C'\fR, \f(CW\*(C`RESTORE_ERRNO\*(C'\fR
have been added to formalise the temporary saving of the \f(CW\*(C`errno\*(C'\fR
variable.
.IP "\(bu" 4
The function \f(CW\*(C`Perl_sv_insert_flags\*(C'\fR has been added to augment
\&\f(CW\*(C`Perl_sv_insert\*(C'\fR.
.IP "\(bu" 4
The function \f(CW\*(C`Perl_newSV_type(type)\*(C'\fR has been added, equivalent to
\&\f(CW\*(C`Perl_newSV()\*(C'\fR followed by \f(CW\*(C`Perl_sv_upgrade(type)\*(C'\fR.
.IP "\(bu" 4
The function \f(CW\*(C`Perl_newSVpvn_flags()\*(C'\fR has been added, equivalent to
\&\f(CW\*(C`Perl_newSVpvn()\*(C'\fR and then performing the action relevant to the flag.
.Sp
Two flag bits are currently supported.
.RS 4
.ie n .IP """SVf_UTF8""" 4
.el .IP "\f(CWSVf_UTF8\fR" 4
.IX Item "SVf_UTF8"
This will call \f(CW\*(C`SvUTF8_on()\*(C'\fR for you. (Note that this does not convert an
sequence of \s-1ISO 8859\-1\s0 characters to \s-1UTF\-8\s0). A wrapper, \f(CW\*(C`newSVpvn_utf8()\*(C'\fR
is available for this.
.ie n .IP """SVs_TEMP""" 4
.el .IP "\f(CWSVs_TEMP\fR" 4
.IX Item "SVs_TEMP"
Call \f(CW\*(C`sv_2mortal()\*(C'\fR on the new \s-1SV.\s0
.RE
.RS 4
.Sp
There is also a wrapper that takes constant strings, \f(CW\*(C`newSVpvs_flags()\*(C'\fR.
.RE
.IP "\(bu" 4
The function \f(CW\*(C`Perl_croak_xs_usage\*(C'\fR has been added as a wrapper to
\&\f(CW\*(C`Perl_croak\*(C'\fR.
.IP "\(bu" 4
The functions \f(CW\*(C`PerlIO_find_layer\*(C'\fR and \f(CW\*(C`PerlIO_list_alloc\*(C'\fR are now
exported.
.IP "\(bu" 4
\&\f(CW\*(C`PL_na\*(C'\fR has been exterminated from the core code, replaced by local \s-1STRLEN\s0
temporaries, or \f(CW\*(C`*_nolen()\*(C'\fR calls. Either approach is faster than \f(CW\*(C`PL_na\*(C'\fR,
which is a pointer deference into the interpreter structure under ithreads,
and a global variable otherwise.
.IP "\(bu" 4
\&\f(CW\*(C`Perl_mg_free()\*(C'\fR used to leave freed memory accessible via \fISvMAGIC()\fR on
the scalar. It now updates the linked list to remove each piece of magic
as it is freed.
.IP "\(bu" 4
Under ithreads, the regex in \f(CW\*(C`PL_reg_curpm\*(C'\fR is now reference counted. This
eliminates a lot of hackish workarounds to cope with it not being reference
counted.
.IP "\(bu" 4
\&\f(CW\*(C`Perl_mg_magical()\*(C'\fR would sometimes incorrectly turn on \f(CW\*(C`SvRMAGICAL()\*(C'\fR.
This has been fixed.
.IP "\(bu" 4
The \fIpublic\fR \s-1IV\s0 and \s-1NV\s0 flags are now not set if the string value has
trailing \*(L"garbage\*(R". This behaviour is consistent with not setting the
public \s-1IV\s0 or \s-1NV\s0 flags if the value is out of range for the type.
.IP "\(bu" 4
\&\s-1SV\s0 allocation tracing has been added to the diagnostics enabled by \f(CW\*(C`\-Dm\*(C'\fR.
The tracing can alternatively output via the \f(CW\*(C`PERL_MEM_LOG\*(C'\fR mechanism, if
that was enabled when the \fIperl\fR binary was compiled.
.IP "\(bu" 4
Uses of \f(CW\*(C`Nullav\*(C'\fR, \f(CW\*(C`Nullcv\*(C'\fR, \f(CW\*(C`Nullhv\*(C'\fR, \f(CW\*(C`Nullop\*(C'\fR, \f(CW\*(C`Nullsv\*(C'\fR etc have been
replaced by \f(CW\*(C`NULL\*(C'\fR in the core code, and non-dual-life modules, as \f(CW\*(C`NULL\*(C'\fR
is clearer to those unfamiliar with the core code.
.IP "\(bu" 4
A macro \f(CWMUTABLE_PTR(p)\fR has been added, which on (non-pedantic) gcc will
not cast away \f(CW\*(C`const\*(C'\fR, returning a \f(CW\*(C`void *\*(C'\fR. Macros \f(CW\*(C`MUTABLE_SV(av)\*(C'\fR,
\&\f(CW\*(C`MUTABLE_SV(cv)\*(C'\fR etc build on this, casting to \f(CW\*(C`AV *\*(C'\fR etc without
casting away \f(CW\*(C`const\*(C'\fR. This allows proper compile-time auditing of
\&\f(CW\*(C`const\*(C'\fR correctness in the core, and helped picked up some errors (now
fixed).
.IP "\(bu" 4
Macros \f(CW\*(C`mPUSHs()\*(C'\fR and \f(CW\*(C`mXPUSHs()\*(C'\fR have been added, for pushing SVs on the
stack and mortalizing them.
.IP "\(bu" 4
Use of the private structure \f(CW\*(C`mro_meta\*(C'\fR has changed slightly. Nothing
outside the core should be accessing this directly anyway.
.IP "\(bu" 4
A new tool, \f(CW\*(C`Porting/expand\-macro.pl\*(C'\fR has been added, that allows you
to view how a C preprocessor macro would be expanded when compiled.
This is handy when trying to decode the macro hell that is the perl
guts.
.SH "New Tests"
.IX Header "New Tests"
Many modules updated from \s-1CPAN\s0 incorporate new tests.
.PP
Several tests that have the potential to hang forever if they fail now
incorporate a \*(L"watchdog\*(R" functionality that will kill them after a timeout,
which helps ensure that \f(CW\*(C`make test\*(C'\fR and \f(CW\*(C`make test_harness\*(C'\fR run to
completion automatically. (Jerry Hedden).
.PP
Some core-specific tests have been added:
.IP "t/comp/retainedlines.t" 4
.IX Item "t/comp/retainedlines.t"
Check that the debugger can retain source lines from \f(CW\*(C`eval\*(C'\fR.
.IP "t/io/perlio_fail.t" 4
.IX Item "t/io/perlio_fail.t"
Check that bad layers fail.
.IP "t/io/perlio_leaks.t" 4
.IX Item "t/io/perlio_leaks.t"
Check that PerlIO layers are not leaking.
.IP "t/io/perlio_open.t" 4
.IX Item "t/io/perlio_open.t"
Check that certain special forms of open work.
.IP "t/io/perlio.t" 4
.IX Item "t/io/perlio.t"
General PerlIO tests.
.IP "t/io/pvbm.t" 4
.IX Item "t/io/pvbm.t"
Check that there is no unexpected interaction between the internal types
\&\f(CW\*(C`PVBM\*(C'\fR and \f(CW\*(C`PVGV\*(C'\fR.
.IP "t/mro/package_aliases.t" 4
.IX Item "t/mro/package_aliases.t"
Check that mro works properly in the presence of aliased packages.
.IP "t/op/dbm.t" 4
.IX Item "t/op/dbm.t"
Tests for \f(CW\*(C`dbmopen\*(C'\fR and \f(CW\*(C`dbmclose\*(C'\fR.
.IP "t/op/index_thr.t" 4
.IX Item "t/op/index_thr.t"
Tests for the interaction of \f(CW\*(C`index\*(C'\fR and threads.
.IP "t/op/pat_thr.t" 4
.IX Item "t/op/pat_thr.t"
Tests for the interaction of esoteric patterns and threads.
.IP "t/op/qr_gc.t" 4
.IX Item "t/op/qr_gc.t"
Test that \f(CW\*(C`qr\*(C'\fR doesn't leak.
.IP "t/op/reg_email_thr.t" 4
.IX Item "t/op/reg_email_thr.t"
Tests for the interaction of regex recursion and threads.
.IP "t/op/regexp_qr_embed_thr.t" 4
.IX Item "t/op/regexp_qr_embed_thr.t"
Tests for the interaction of patterns with embedded \f(CW\*(C`qr//\*(C'\fR and threads.
.IP "t/op/regexp_unicode_prop.t" 4
.IX Item "t/op/regexp_unicode_prop.t"
Tests for Unicode properties in regular expressions.
.IP "t/op/regexp_unicode_prop_thr.t" 4
.IX Item "t/op/regexp_unicode_prop_thr.t"
Tests for the interaction of Unicode properties and threads.
.IP "t/op/reg_nc_tie.t" 4
.IX Item "t/op/reg_nc_tie.t"
Test the tied methods of \f(CW\*(C`Tie::Hash::NamedCapture\*(C'\fR.
.IP "t/op/reg_posixcc.t" 4
.IX Item "t/op/reg_posixcc.t"
Check that \s-1POSIX\s0 character classes behave consistently.
.IP "t/op/re.t" 4
.IX Item "t/op/re.t"
Check that exportable \f(CW\*(C`re\*(C'\fR functions in \fIuniversal.c\fR work.
.IP "t/op/setpgrpstack.t" 4
.IX Item "t/op/setpgrpstack.t"
Check that \f(CW\*(C`setpgrp\*(C'\fR works.
.IP "t/op/substr_thr.t" 4
.IX Item "t/op/substr_thr.t"
Tests for the interaction of \f(CW\*(C`substr\*(C'\fR and threads.
.IP "t/op/upgrade.t" 4
.IX Item "t/op/upgrade.t"
Check that upgrading and assigning scalars works.
.IP "t/uni/lex_utf8.t" 4
.IX Item "t/uni/lex_utf8.t"
Check that Unicode in the lexer works.
.IP "t/uni/tie.t" 4
.IX Item "t/uni/tie.t"
Check that Unicode and \f(CW\*(C`tie\*(C'\fR work.
.SH "Known Problems"
.IX Header "Known Problems"
This is a list of some significant unfixed bugs, which are regressions
from either 5.10.0 or 5.8.x.
.IP "\(bu" 4
\&\f(CW\*(C`List::Util::first\*(C'\fR misbehaves in the presence of a lexical \f(CW$_\fR
(typically introduced by \f(CW\*(C`my $_\*(C'\fR or implicitly by \f(CW\*(C`given\*(C'\fR). The variable
which gets set for each iteration is the package variable \f(CW$_\fR, not the
lexical \f(CW$_\fR [\s-1RT\s0 #67694].
.Sp
A similar issue may occur in other modules that provide functions which
take a block as their first argument, like
.Sp
.Vb 1
\&    foo { ... $_ ...} list
.Ve
.IP "\(bu" 4
The \f(CW\*(C`charnames\*(C'\fR pragma may generate a run-time error when a regex is
interpolated [\s-1RT\s0 #56444]:
.Sp
.Vb 4
\&    use charnames \*(Aq:full\*(Aq;
\&    my $r1 = qr/\eN{THAI CHARACTER SARA I}/;
\&    "foo" =~ $r1;    # okay
\&    "foo" =~ /$r1+/; # runtime error
.Ve
.Sp
A workaround is to generate the character outside of the regex:
.Sp
.Vb 2
\&    my $a = "\eN{THAI CHARACTER SARA I}";
\&    my $r1 = qr/$a/;
.Ve
.IP "\(bu" 4
Some regexes may run much more slowly when run in a child thread compared
with the thread the pattern was compiled into [\s-1RT\s0 #55600].
.SH "Deprecations"
.IX Header "Deprecations"
The following items are now deprecated.
.IP "\(bu" 4
\&\f(CW\*(C`Switch\*(C'\fR is buggy and should be avoided. From perl 5.11.0 onwards, it is
intended that any use of the core version of this module will emit a
warning, and that the module will eventually be removed from the core
(probably in perl 5.14.0). See \*(L"Switch statements\*(R" in perlsyn for its
replacement.
.IP "\(bu" 4
\&\f(CW\*(C`suidperl\*(C'\fR will be removed in 5.12.0. This provides a mechanism to
emulate setuid permission bits on systems that don't support it properly.
.SH "Acknowledgements"
.IX Header "Acknowledgements"
Some of the work in this release was funded by a \s-1TPF\s0 grant.
.PP
Nicholas Clark officially retired from maintenance pumpking duty at the
end of 2008; however in reality he has put much effort in since then to
help get 5.10.1 into a fit state to be released, including writing a
considerable chunk of this perldelta.
.PP
Steffen Mueller and David Golden in particular helped getting \s-1CPAN\s0 modules
polished and synchronised with their in-core equivalents.
.PP
Craig Berry was tireless in getting maint to run under \s-1VMS,\s0 no matter how
many times we broke it for him.
.PP
The other core committers contributed most of the changes, and applied most
of the patches sent in by the hundreds of contributors listed in \fI\s-1AUTHORS\s0\fR.
.PP
(Sorry to all the people I haven't mentioned by name).
.PP
Finally, thanks to Larry Wall, without whom none of this would be
necessary.
.SH "Reporting Bugs"
.IX Header "Reporting Bugs"
If you find what you think is a bug, you might check the articles
recently posted to the comp.lang.perl.misc newsgroup and the perl
bug database at http://rt.perl.org/perlbug/ .  There may also be
information at http://www.perl.org/ , the Perl Home Page.
.PP
If you believe you have an unreported bug, please run the \fBperlbug\fR
program included with your release.  Be sure to trim your bug down
to a tiny but sufficient test case.  Your bug report, along with the
output of \f(CW\*(C`perl \-V\*(C'\fR, will be sent off to perlbug@perl.org to be
analysed by the Perl porting team.
.PP
If the bug you are reporting has security implications, which make it
inappropriate to send to a publicly archived mailing list, then please send
it to perl5\-security\-report@perl.org. This points to a closed subscription
unarchived mailing list, which includes
all the core committers, who will be able
to help assess the impact of issues, figure out a resolution, and help
co-ordinate the release of patches to mitigate or fix the problem across all
platforms on which Perl is supported. Please only use this address for
security issues in the Perl core, not for modules independently
distributed on \s-1CPAN.\s0
.SH "SEE ALSO"
.IX Header "SEE ALSO"
The \fIChanges\fR file for an explanation of how to view exhaustive details
on what changed.
.PP
The \fI\s-1INSTALL\s0\fR file for how to build Perl.
.PP
The \fI\s-1README\s0\fR file for general stuff.
.PP
The \fIArtistic\fR and \fICopying\fR files for copyright information.
                                                                                                                                                                                                                                                         osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perl5120delta.1                              0100644 0001750 0001750 00000345224 12566207431 023234  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERL5120DELTA 1"
.TH PERL5120DELTA 1 "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perl5120delta \- what is new for perl v5.12.0
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document describes differences between the 5.10.0 release and the
5.12.0 release.
.PP
Many of the bug fixes in 5.12.0 are already included in the 5.10.1
maintenance release.
.PP
You can see the list of those changes in the 5.10.1 release notes
(perl5101delta).
.SH "Core Enhancements"
.IX Header "Core Enhancements"
.ie n .SS "New ""package NAME VERSION"" syntax"
.el .SS "New \f(CWpackage NAME VERSION\fP syntax"
.IX Subsection "New package NAME VERSION syntax"
This new syntax allows a module author to set the \f(CW$VERSION\fR of a namespace
when the namespace is declared with 'package'. It eliminates the need
for \f(CW\*(C`our $VERSION = ...\*(C'\fR and similar constructs. E.g.
.PP
.Vb 2
\&      package Foo::Bar 1.23;
\&      # $Foo::Bar::VERSION == 1.23
.Ve
.PP
There are several advantages to this:
.IP "\(bu" 4
\&\f(CW$VERSION\fR is parsed in exactly the same way as \f(CW\*(C`use NAME VERSION\*(C'\fR
.IP "\(bu" 4
\&\f(CW$VERSION\fR is set at compile time
.IP "\(bu" 4
\&\f(CW$VERSION\fR is a version object that provides proper overloading of
comparison operators so comparing \f(CW$VERSION\fR to decimal (1.23) or
dotted-decimal (v1.2.3) version numbers works correctly.
.IP "\(bu" 4
Eliminates \f(CW\*(C`$VERSION = ...\*(C'\fR and \f(CW\*(C`eval $VERSION\*(C'\fR clutter
.IP "\(bu" 4
As it requires \s-1VERSION\s0 to be a numeric literal or v\-string
literal, it can be statically parsed by toolchain modules
without \f(CW\*(C`eval\*(C'\fR the way \s-1MM\-\s0>parse_version does for \f(CW\*(C`$VERSION = ...\*(C'\fR
.PP
It does not break old code with only \f(CW\*(C`package NAME\*(C'\fR, but code that uses
\&\f(CW\*(C`package NAME VERSION\*(C'\fR will need to be restricted to perl 5.12.0 or newer
This is analogous to the change to \f(CW\*(C`open\*(C'\fR from two-args to three-args.
Users requiring the latest Perl will benefit, and perhaps after several
years, it will become a standard practice.
.PP
However, \f(CW\*(C`package NAME VERSION\*(C'\fR requires a new, 'strict' version
number format. See \*(L"Version number formats\*(R" for details.
.ie n .SS "The ""..."" operator"
.el .SS "The \f(CW...\fP operator"
.IX Subsection "The ... operator"
A new operator, \f(CW\*(C`...\*(C'\fR, nicknamed the Yada Yada operator, has been added.
It is intended to mark placeholder code that is not yet implemented.
See \*(L"Yada Yada Operator\*(R" in perlop.
.SS "Implicit strictures"
.IX Subsection "Implicit strictures"
Using the \f(CW\*(C`use VERSION\*(C'\fR syntax with a version number greater or equal
to 5.11.0 will lexically enable strictures just like \f(CW\*(C`use strict\*(C'\fR
would do (in addition to enabling features.) The following:
.PP
.Vb 1
\&    use 5.12.0;
.Ve
.PP
means:
.PP
.Vb 2
\&    use strict;
\&    use feature \*(Aq:5.12\*(Aq;
.Ve
.SS "Unicode improvements"
.IX Subsection "Unicode improvements"
Perl 5.12 comes with Unicode 5.2, the latest version available to
us at the time of release.  This version of Unicode was released in
October 2009. See <http://www.unicode.org/versions/Unicode5.2.0> for
further details about what's changed in this version of the standard.
See perlunicode for instructions on installing and using other versions
of Unicode.
.PP
Additionally, Perl's developers have significantly improved Perl's Unicode
implementation. For full details, see \*(L"Unicode overhaul\*(R" below.
.SS "Y2038 compliance"
.IX Subsection "Y2038 compliance"
Perl's core time-related functions are now Y2038 compliant. (It may not mean much to you, but your kids will love it!)
.SS "qr overloading"
.IX Subsection "qr overloading"
It is now possible to overload the \f(CW\*(C`qr//\*(C'\fR operator, that is,
conversion to regexp, like it was already possible to overload
conversion to boolean, string or number of objects. It is invoked when
an object appears on the right hand side of the \f(CW\*(C`=~\*(C'\fR operator or when
it is interpolated into a regexp. See overload.
.SS "Pluggable keywords"
.IX Subsection "Pluggable keywords"
Extension modules can now cleanly hook into the Perl parser to define
new kinds of keyword-headed expression and compound statement. The
syntax following the keyword is defined entirely by the extension. This
allows a completely non-Perl sublanguage to be parsed inline, with the
correct ops cleanly generated.
.PP
See \*(L"PL_keyword_plugin\*(R" in perlapi for the mechanism. The Perl core
source distribution also includes a new module
XS::APItest::KeywordRPN, which implements reverse Polish notation
arithmetic via pluggable keywords. This module is mainly used for test
purposes, and is not normally installed, but also serves as an example
of how to use the new mechanism.
.PP
Perl's developers consider this feature to be experimental. We may remove
it or change it in a backwards-incompatible way in Perl 5.14.
.SS "APIs for more internals"
.IX Subsection "APIs for more internals"
The lowest layers of the lexer and parts of the pad system now have C
APIs available to \s-1XS\s0 extensions. These are necessary to support proper
use of pluggable keywords, but have other uses too. The new APIs are
experimental, and only cover a small proportion of what would be
necessary to take full advantage of the core's facilities in these
areas. It is intended that the Perl 5.13 development cycle will see the
addition of a full range of clean, supported interfaces.
.PP
Perl's developers consider this feature to be experimental. We may remove
it or change it in a backwards-incompatible way in Perl 5.14.
.SS "Overridable function lookup"
.IX Subsection "Overridable function lookup"
Where an extension module hooks the creation of rv2cv ops to modify the
subroutine lookup process, this now works correctly for bareword
subroutine calls. This means that prototypes on subroutines referenced
this way will be processed correctly. (Previously bareword subroutine
names were initially looked up, for parsing purposes, by an unhookable
mechanism, so extensions could only properly influence subroutine names
that appeared with an \f(CW\*(C`&\*(C'\fR sigil.)
.SS "A proper interface for pluggable Method Resolution Orders"
.IX Subsection "A proper interface for pluggable Method Resolution Orders"
As of Perl 5.12.0 there is a new interface for plugging and using method
resolution orders other than the default linear depth first search.
The C3 method resolution order added in 5.10.0 has been re-implemented as
a plugin, without changing its Perl-space interface. See perlmroapi for
more information.
.ie n .SS """\eN"" experimental regex escape"
.el .SS "\f(CW\eN\fP experimental regex escape"
.IX Subsection "N experimental regex escape"
Perl now supports \f(CW\*(C`\eN\*(C'\fR, a new regex escape which you can think of as
the inverse of \f(CW\*(C`\en\*(C'\fR. It will match any character that is not a newline,
independently from the presence or absence of the single line match
modifier \f(CW\*(C`/s\*(C'\fR. It is not usable within a character class.  \f(CW\*(C`\eN{3}\*(C'\fR
means to match 3 non-newlines; \f(CW\*(C`\eN{5,}\*(C'\fR means to match at least 5.
\&\f(CW\*(C`\eN{NAME}\*(C'\fR still means the character or sequence named \f(CW\*(C`NAME\*(C'\fR, but
\&\f(CW\*(C`NAME\*(C'\fR no longer can be things like \f(CW3\fR, or \f(CW\*(C`5,\*(C'\fR.
.PP
This will break a custom charnames translator which allows numbers for character names, as \f(CW\*(C`\eN{3}\*(C'\fR will
now mean to match 3 non-newline characters, and not the character whose
name is \f(CW3\fR. (No name defined by the Unicode standard is a number,
so only custom translators might be affected.)
.PP
Perl's developers are somewhat concerned about possible user confusion
with the existing \f(CW\*(C`\eN{...}\*(C'\fR construct which matches characters by their
Unicode name. Consequently, this feature is experimental. We may remove
it or change it in a backwards-incompatible way in Perl 5.14.
.SS "DTrace support"
.IX Subsection "DTrace support"
Perl now has some support for DTrace. See \*(L"DTrace support\*(R" in \fI\s-1INSTALL\s0\fR.
.ie n .SS "Support for ""configure_requires"" in \s-1CPAN\s0 module metadata"
.el .SS "Support for \f(CWconfigure_requires\fP in \s-1CPAN\s0 module metadata"
.IX Subsection "Support for configure_requires in CPAN module metadata"
Both \f(CW\*(C`CPAN\*(C'\fR and \f(CW\*(C`CPANPLUS\*(C'\fR now support the \f(CW\*(C`configure_requires\*(C'\fR
keyword in the \fI\s-1META\s0.yml\fR metadata file included in most recent \s-1CPAN\s0
distributions.  This allows distribution authors to specify configuration
prerequisites that must be installed before running \fIMakefile.PL\fR
or \fIBuild.PL\fR.
.PP
See the documentation for \f(CW\*(C`ExtUtils::MakeMaker\*(C'\fR or \f(CW\*(C`Module::Build\*(C'\fR for
more on how to specify \f(CW\*(C`configure_requires\*(C'\fR when creating a distribution
for \s-1CPAN.\s0
.ie n .SS """each"", ""keys"", ""values"" are now more flexible"
.el .SS "\f(CWeach\fP, \f(CWkeys\fP, \f(CWvalues\fP are now more flexible"
.IX Subsection "each, keys, values are now more flexible"
The \f(CW\*(C`each\*(C'\fR, \f(CW\*(C`keys\*(C'\fR, \f(CW\*(C`values\*(C'\fR function can now operate on arrays.
.ie n .SS """when"" as a statement modifier"
.el .SS "\f(CWwhen\fP as a statement modifier"
.IX Subsection "when as a statement modifier"
\&\f(CW\*(C`when\*(C'\fR is now allowed to be used as a statement modifier.
.ie n .SS "$, flexibility"
.el .SS "\f(CW$,\fP flexibility"
.IX Subsection "$, flexibility"
The variable \f(CW$,\fR may now be tied.
.SS "// in when clauses"
.IX Subsection "// in when clauses"
// now behaves like || in when clauses
.SS "Enabling warnings from your shell environment"
.IX Subsection "Enabling warnings from your shell environment"
You can now set \f(CW\*(C`\-W\*(C'\fR from the \f(CW\*(C`PERL5OPT\*(C'\fR environment variable
.ie n .SS """delete local"""
.el .SS "\f(CWdelete local\fP"
.IX Subsection "delete local"
\&\f(CW\*(C`delete local\*(C'\fR now allows you to locally delete a hash entry.
.SS "New support for Abstract namespace sockets"
.IX Subsection "New support for Abstract namespace sockets"
Abstract namespace sockets are Linux-specific socket type that live in
\&\s-1AF_UNIX\s0 family, slightly abusing it to be able to use arbitrary
character arrays as addresses: They start with nul byte and are not
terminated by nul byte, but with the length passed to the \fIsocket()\fR
system call.
.SS "32\-bit limit on substr arguments removed"
.IX Subsection "32-bit limit on substr arguments removed"
The 32\-bit limit on \f(CW\*(C`substr\*(C'\fR arguments has now been removed. The full
range of the system's signed and unsigned integers is now available for
the \f(CW\*(C`pos\*(C'\fR and \f(CW\*(C`len\*(C'\fR arguments.
.SH "Potentially Incompatible Changes"
.IX Header "Potentially Incompatible Changes"
.SS "Deprecations warn by default"
.IX Subsection "Deprecations warn by default"
Over the years, Perl's developers have deprecated a number of language
features for a variety of reasons.  Perl now defaults to issuing a
warning if a deprecated language feature is used. Many of the deprecations
Perl now warns you about have been deprecated for many years.  You can
find a list of what was deprecated in a given release of Perl in the
\&\f(CW\*(C`perl5xxdelta.pod\*(C'\fR file for that release.
.PP
To disable this feature in a given lexical scope, you should use \f(CW\*(C`no
warnings \*(Aqdeprecated\*(Aq;\*(C'\fR For information about which language features
are deprecated and explanations of various deprecation warnings, please
see perldiag. See \*(L"Deprecations\*(R" below for the list of features
and modules Perl's developers have deprecated as part of this release.
.SS "Version number formats"
.IX Subsection "Version number formats"
Acceptable version number formats have been formalized into \*(L"strict\*(R" and
\&\*(L"lax\*(R" rules. \f(CW\*(C`package NAME VERSION\*(C'\fR takes a strict version number.
\&\f(CW\*(C`UNIVERSAL::VERSION\*(C'\fR and the version object constructors take lax
version numbers. Providing an invalid version will result in a fatal
error. The version argument in \f(CW\*(C`use NAME VERSION\*(C'\fR is first parsed as a
numeric literal or v\-string and then passed to \f(CW\*(C`UNIVERSAL::VERSION\*(C'\fR
(and must then pass the \*(L"lax\*(R" format test).
.PP
These formats are documented fully in the version module. To a first
approximation, a \*(L"strict\*(R" version number is a positive decimal number
(integer or decimal-fraction) without exponentiation or else a
dotted-decimal v\-string with a leading 'v' character and at least three
components. A \*(L"lax\*(R" version number allows v\-strings with fewer than
three components or without a leading 'v'. Under \*(L"lax\*(R" rules, both
decimal and dotted-decimal versions may have a trailing \*(L"alpha\*(R"
component separated by an underscore character after a fractional or
dotted-decimal component.
.PP
The version module adds \f(CW\*(C`version::is_strict\*(C'\fR and \f(CW\*(C`version::is_lax\*(C'\fR
functions to check a scalar against these rules.
.ie n .SS "@INC reorganization"
.el .SS "\f(CW@INC\fP reorganization"
.IX Subsection "@INC reorganization"
In \f(CW@INC\fR, \f(CW\*(C`ARCHLIB\*(C'\fR and \f(CW\*(C`PRIVLIB\*(C'\fR now occur after after the current
version's \f(CW\*(C`site_perl\*(C'\fR and \f(CW\*(C`vendor_perl\*(C'\fR.  Modules installed into
\&\f(CW\*(C`site_perl\*(C'\fR and \f(CW\*(C`vendor_perl\*(C'\fR will now be loaded in preference to
those installed in \f(CW\*(C`ARCHLIB\*(C'\fR and \f(CW\*(C`PRIVLIB\*(C'\fR.
.SS "REGEXPs are now first class"
.IX Subsection "REGEXPs are now first class"
Internally, Perl now treats compiled regular expressions (such as
those created with \f(CW\*(C`qr//\*(C'\fR) as first class entities. Perl modules which
serialize, deserialize or otherwise have deep interaction with Perl's
internal data structures need to be updated for this change.  Most
affected \s-1CPAN\s0 modules have already been updated as of this writing.
.SS "Switch statement changes"
.IX Subsection "Switch statement changes"
The \f(CW\*(C`given\*(C'\fR/\f(CW\*(C`when\*(C'\fR switch statement handles complex statements better
than Perl 5.10.0 did (These enhancements are also available in
5.10.1 and subsequent 5.10 releases.) There are two new cases where
\&\f(CW\*(C`when\*(C'\fR now interprets its argument as a boolean, instead of an
expression to be used in a smart match:
.IP "flip-flop operators" 4
.IX Item "flip-flop operators"
The \f(CW\*(C`..\*(C'\fR and \f(CW\*(C`...\*(C'\fR flip-flop operators are now evaluated in boolean
context, following their usual semantics; see \*(L"Range Operators\*(R" in perlop.
.Sp
Note that, as in perl 5.10.0, \f(CW\*(C`when (1..10)\*(C'\fR will not work to test
whether a given value is an integer between 1 and 10; you should use
\&\f(CW\*(C`when ([1..10])\*(C'\fR instead (note the array reference).
.Sp
However, contrary to 5.10.0, evaluating the flip-flop operators in
boolean context ensures it can now be useful in a \f(CW\*(C`when()\*(C'\fR, notably
for implementing bistable conditions, like in:
.Sp
.Vb 3
\&    when (/^=begin/ .. /^=end/) {
\&      # do something
\&    }
.Ve
.IP "defined-or operator" 4
.IX Item "defined-or operator"
A compound expression involving the defined-or operator, as in
\&\f(CW\*(C`when (expr1 // expr2)\*(C'\fR, will be treated as boolean if the first
expression is boolean. (This just extends the existing rule that applies
to the regular or operator, as in \f(CW\*(C`when (expr1 || expr2)\*(C'\fR.)
.SS "Smart match changes"
.IX Subsection "Smart match changes"
Since Perl 5.10.0, Perl's developers have made a number of changes to
the smart match operator. These, of course, also alter the behaviour
of the switch statements where smart matching is implicitly used.
These changes were also made for the 5.10.1 release, and will remain in
subsequent 5.10 releases.
.PP
\fIChanges to type-based dispatch\fR
.IX Subsection "Changes to type-based dispatch"
.PP
The smart match operator \f(CW\*(C`~~\*(C'\fR is no longer commutative. The behaviour of
a smart match now depends primarily on the type of its right hand
argument. Moreover, its semantics have been adjusted for greater
consistency or usefulness in several cases. While the general backwards
compatibility is maintained, several changes must be noted:
.IP "\(bu" 4
Code references with an empty prototype are no longer treated specially.
They are passed an argument like the other code references (even if they
choose to ignore it).
.IP "\(bu" 4
\&\f(CW\*(C`%hash ~~ sub {}\*(C'\fR and \f(CW\*(C`@array ~~ sub {}\*(C'\fR now test that the subroutine
returns a true value for each key of the hash (or element of the
array), instead of passing the whole hash or array as a reference to
the subroutine.
.IP "\(bu" 4
Due to the commutativity breakage, code references are no longer
treated specially when appearing on the left of the \f(CW\*(C`~~\*(C'\fR operator,
but like any vulgar scalar.
.IP "\(bu" 4
\&\f(CW\*(C`undef ~~ %hash\*(C'\fR is always false (since \f(CW\*(C`undef\*(C'\fR can't be a key in a
hash). No implicit conversion to \f(CW""\fR is done (as was the case in perl
5.10.0).
.IP "\(bu" 4
\&\f(CW\*(C`$scalar ~~ @array\*(C'\fR now always distributes the smart match across the
elements of the array. It's true if one element in \f(CW@array\fR verifies
\&\f(CW\*(C`$scalar ~~ $element\*(C'\fR. This is a generalization of the old behaviour
that tested whether the array contained the scalar.
.PP
The full dispatch table for the smart match operator is given in
\&\*(L"Smart matching in detail\*(R" in perlsyn.
.PP
\fISmart match and overloading\fR
.IX Subsection "Smart match and overloading"
.PP
According to the rule of dispatch based on the rightmost argument type,
when an object overloading \f(CW\*(C`~~\*(C'\fR appears on the right side of the
operator, the overload routine will always be called (with a 3rd argument
set to a true value, see overload.) However, when the object will
appear on the left, the overload routine will be called only when the
rightmost argument is a simple scalar. This way, distributivity of smart
match across arrays is not broken, as well as the other behaviours with
complex types (coderefs, hashes, regexes). Thus, writers of overloading
routines for smart match mostly need to worry only with comparing
against a scalar, and possibly with stringification overloading; the
other common cases will be automatically handled consistently.
.PP
\&\f(CW\*(C`~~\*(C'\fR will now refuse to work on objects that do not overload it (in order
to avoid relying on the object's underlying structure). (However, if the
object overloads the stringification or the numification operators, and
if overload fallback is active, it will be used instead, as usual.)
.SS "Other potentially incompatible changes"
.IX Subsection "Other potentially incompatible changes"
.IP "\(bu" 4
The definitions of a number of Unicode properties have changed to match
those of the current Unicode standard. These are listed above under
\&\*(L"Unicode overhaul\*(R". This change may break code that expects the old
definitions.
.IP "\(bu" 4
The boolkeys op has moved to the group of hash ops. This breaks binary
compatibility.
.IP "\(bu" 4
Filehandles are now always blessed into \f(CW\*(C`IO::File\*(C'\fR.
.Sp
The previous behaviour was to bless Filehandles into FileHandle
(an empty proxy class) if it was loaded into memory and otherwise
to bless them into \f(CW\*(C`IO::Handle\*(C'\fR.
.IP "\(bu" 4
The semantics of \f(CW\*(C`use feature :5.10*\*(C'\fR have changed slightly.
See \*(L"Modules and Pragmata\*(R" for more information.
.IP "\(bu" 4
Perl's developers now use git, rather than Perforce.  This should be
a purely internal change only relevant to people actively working on
the core.  However, you may see minor difference in perl as a consequence
of the change.  For example in some of details of the output of \f(CW\*(C`perl
\&\-V\*(C'\fR. See perlrepository for more information.
.IP "\(bu" 4
As part of the \f(CW\*(C`Test::Harness\*(C'\fR 2.x to 3.x upgrade, the experimental
\&\f(CW\*(C`Test::Harness::Straps\*(C'\fR module has been removed.
See \*(L"Modules and Pragmata\*(R" for more details.
.IP "\(bu" 4
As part of the \f(CW\*(C`ExtUtils::MakeMaker\*(C'\fR upgrade, the
\&\f(CW\*(C`ExtUtils::MakeMaker::bytes\*(C'\fR and \f(CW\*(C`ExtUtils::MakeMaker::vmsish\*(C'\fR modules
have been removed from this distribution.
.IP "\(bu" 4
\&\f(CW\*(C`Module::CoreList\*(C'\fR no longer contains the \f(CW%:patchlevel\fR hash.
.IP "\(bu" 4
\&\f(CW\*(C`length undef\*(C'\fR now returns undef.
.IP "\(bu" 4
Unsupported private C \s-1API\s0 functions are now declared \*(L"static\*(R" to prevent
leakage to Perl's public \s-1API.\s0
.IP "\(bu" 4
To support the bootstrapping process, \fIminiperl\fR no longer builds with
\&\s-1UTF\-8\s0 support in the regexp engine.
.Sp
This allows a build to complete with \s-1PERL_UNICODE\s0 set and a \s-1UTF\-8\s0 locale.
Without this there's a bootstrapping problem, as miniperl can't load
the \s-1UTF\-8\s0 components of the regexp engine, because they're not yet built.
.IP "\(bu" 4
\&\fIminiperl\fR's \f(CW@INC\fR is now restricted to just \f(CW\*(C`\-I...\*(C'\fR, the split of
\&\f(CW$ENV{PERL5LIB}\fR, and "\f(CW\*(C`.\*(C'\fR"
.IP "\(bu" 4
A space or a newline is now required after a \f(CW"#line XXX"\fR directive.
.IP "\(bu" 4
Tied filehandles now have an additional method \s-1EOF\s0 which provides the
\&\s-1EOF\s0 type.
.IP "\(bu" 4
To better match all other flow control statements, \f(CW\*(C`foreach\*(C'\fR may no
longer be used as an attribute.
.IP "\(bu" 4
Perl's command-line switch \*(L"\-P\*(R", which was deprecated in version 5.10.0, has
now been removed. The \s-1CPAN\s0 module \f(CW\*(C`Filter::cpp\*(C'\fR can be used as an 
alternative.
.SH "Deprecations"
.IX Header "Deprecations"
From time to time, Perl's developers find it necessary to deprecate
features or modules we've previously shipped as part of the core
distribution. We are well aware of the pain and frustration that a
backwards-incompatible change to Perl can cause for developers building
or maintaining software in Perl. You can be sure that when we deprecate
a functionality or syntax, it isn't a choice we make lightly. Sometimes,
we choose to deprecate functionality or syntax because it was found to
be poorly designed or implemented. Sometimes, this is because they're
holding back other features or causing performance problems. Sometimes,
the reasons are more complex. Wherever possible, we try to keep deprecated
functionality available to developers in its previous form for at least
one major release. So long as a deprecated feature isn't actively
disrupting our ability to maintain and extend Perl, we'll try to leave
it in place as long as possible.
.PP
The following items are now deprecated:
.IP "suidperl" 4
.IX Item "suidperl"
\&\f(CW\*(C`suidperl\*(C'\fR is no longer part of Perl. It used to provide a mechanism to
emulate setuid permission bits on systems that don't support it properly.
.ie n .IP "Use of "":="" to mean an empty attribute list" 4
.el .IP "Use of \f(CW:=\fR to mean an empty attribute list" 4
.IX Item "Use of := to mean an empty attribute list"
An accident of Perl's parser meant that these constructions were all
equivalent:
.Sp
.Vb 3
\&    my $pi := 4;
\&    my $pi : = 4;
\&    my $pi :  = 4;
.Ve
.Sp
with the \f(CW\*(C`:\*(C'\fR being treated as the start of an attribute list, which
ends before the \f(CW\*(C`=\*(C'\fR. As whitespace is not significant here, all are
parsed as an empty attribute list, hence all the above are equivalent
to, and better written as
.Sp
.Vb 1
\&    my $pi = 4;
.Ve
.Sp
because no attribute processing is done for an empty list.
.Sp
As is, this meant that \f(CW\*(C`:=\*(C'\fR cannot be used as a new token, without
silently changing the meaning of existing code. Hence that particular
form is now deprecated, and will become a syntax error. If it is
absolutely necessary to have empty attribute lists (for example,
because of a code generator) then avoid the warning by adding a space
before the \f(CW\*(C`=\*(C'\fR.
.ie n .IP """UNIVERSAL\->import()""" 4
.el .IP "\f(CWUNIVERSAL\->import()\fR" 4
.IX Item "UNIVERSAL->import()"
The method \f(CW\*(C`UNIVERSAL\->import()\*(C'\fR is now deprecated. Attempting to
pass import arguments to a \f(CW\*(C`use UNIVERSAL\*(C'\fR statement will result in a
deprecation warning.
.ie n .IP "Use of ""goto"" to jump into a construct" 4
.el .IP "Use of ``goto'' to jump into a construct" 4
.IX Item "Use of goto to jump into a construct"
Using \f(CW\*(C`goto\*(C'\fR to jump from an outer scope into an inner scope is now
deprecated. This rare use case was causing problems in the
implementation of scopes.
.IP "Custom character names in \eN{name} that don't look like names" 4
.IX Item "Custom character names in N{name} that don't look like names"
In \f(CW\*(C`\eN{\f(CIname\f(CW}\*(C'\fR, \fIname\fR can be just about anything. The standard
Unicode names have a very limited domain, but a custom name translator
could create names that are, for example, made up entirely of punctuation
symbols. It is now deprecated to make names that don't begin with an
alphabetic character, and aren't alphanumeric or contain other than
a very few other characters, namely spaces, dashes, parentheses
and colons. Because of the added meaning of \f(CW\*(C`\eN\*(C'\fR (See "\f(CW\*(C`\eN\*(C'\fR
experimental regex escape"), names that look like curly brace \-enclosed
quantifiers won't work. For example, \f(CW\*(C`\eN{3,4}\*(C'\fR now means to match 3 to
4 non-newlines; before a custom name \f(CW\*(C`3,4\*(C'\fR could have been created.
.IP "Deprecated Modules" 4
.IX Item "Deprecated Modules"
The following modules will be removed from the core distribution in a
future release, and should be installed from \s-1CPAN\s0 instead. Distributions
on \s-1CPAN\s0 which require these should add them to their prerequisites. The
core versions of these modules warnings will issue a deprecation warning.
.Sp
If you ship a packaged version of Perl, either alone or as part of a
larger system, then you should carefully consider the repercussions of
core module deprecations. You may want to consider shipping your default
build of Perl with packages for some or all deprecated modules which
install into \f(CW\*(C`vendor\*(C'\fR or \f(CW\*(C`site\*(C'\fR perl library directories. This will
inhibit the deprecation warnings.
.Sp
Alternatively, you may want to consider patching \fIlib/deprecate.pm\fR
to provide deprecation warnings specific to your packaging system
or distribution of Perl, consistent with how your packaging system
or distribution manages a staged transition from a release where the
installation of a single package provides the given functionality, to
a later release where the system administrator needs to know to install
multiple packages to get that same functionality.
.Sp
You can silence these deprecation warnings by installing the modules
in question from \s-1CPAN. \s0 To install the latest version of all of them,
just install \f(CW\*(C`Task::Deprecations::5_12\*(C'\fR.
.RS 4
.IP "Class::ISA" 4
.IX Item "Class::ISA"
.PD 0
.IP "Pod::Plainer" 4
.IX Item "Pod::Plainer"
.IP "Shell" 4
.IX Item "Shell"
.IP "Switch" 4
.IX Item "Switch"
.PD
Switch is buggy and should be avoided. You may find Perl's new
\&\f(CW\*(C`given\*(C'\fR/\f(CW\*(C`when\*(C'\fR feature a suitable replacement.  See \*(L"Switch
statements\*(R" in perlsyn for more information.
.RE
.RS 4
.RE
.IP "Assignment to $[" 4
.IX Item "Assignment to $["
.PD 0
.IP "Use of the attribute :locked on subroutines" 4
.IX Item "Use of the attribute :locked on subroutines"
.ie n .IP "Use of ""locked"" with the attributes pragma" 4
.el .IP "Use of ``locked'' with the attributes pragma" 4
.IX Item "Use of locked with the attributes pragma"
.ie n .IP "Use of ""unique"" with the attributes pragma" 4
.el .IP "Use of ``unique'' with the attributes pragma" 4
.IX Item "Use of unique with the attributes pragma"
.IP "Perl_pmflag" 4
.IX Item "Perl_pmflag"
.PD
\&\f(CW\*(C`Perl_pmflag\*(C'\fR is no longer part of Perl's public \s-1API.\s0 Calling it now
generates a deprecation warning, and it will be removed in a future
release. Although listed as part of the \s-1API,\s0 it was never documented,
and only ever used in \fItoke.c\fR, and prior to 5.10, \fIregcomp.c\fR. In
core, it has been replaced by a static function.
.IP "Numerous Perl 4\-era libraries" 4
.IX Item "Numerous Perl 4-era libraries"
\&\fItermcap.pl\fR, \fItainted.pl\fR, \fIstat.pl\fR, \fIshellwords.pl\fR, \fIpwd.pl\fR,
\&\fIopen3.pl\fR, \fIopen2.pl\fR, \fInewgetopt.pl\fR, \fIlook.pl\fR, \fIfind.pl\fR,
\&\fIfinddepth.pl\fR, \fIimportenv.pl\fR, \fIhostname.pl\fR, \fIgetopts.pl\fR,
\&\fIgetopt.pl\fR, \fIgetcwd.pl\fR, \fIflush.pl\fR, \fIfastcwd.pl\fR, \fIexceptions.pl\fR,
\&\fIctime.pl\fR, \fIcomplete.pl\fR, \fIcacheout.pl\fR, \fIbigrat.pl\fR, \fIbigint.pl\fR,
\&\fIbigfloat.pl\fR, \fIassert.pl\fR, \fIabbrev.pl\fR, \fIdotsh.pl\fR, and
\&\fItimelocal.pl\fR are all now deprecated.  Earlier, Perl's developers
intended to remove these libraries from Perl's core for the 5.14.0 release.
.Sp
During final testing before the release of 5.12.0, several developers
discovered current production code using these ancient libraries, some
inside the Perl core itself.  Accordingly, the pumpking granted them
a stay of execution. They will begin to warn about their deprecation
in the 5.14.0 release and will be removed in the 5.16.0 release.
.SH "Unicode overhaul"
.IX Header "Unicode overhaul"
Perl's developers have made a concerted effort to update Perl to be in
sync with the latest Unicode standard. Changes for this include:
.PP
Perl can now handle every Unicode character property. New documentation,
perluniprops, lists all available non-Unihan character properties. By
default, perl does not expose Unihan, deprecated or Unicode-internal
properties.  See below for more details on these; there is also a section
in the pod listing them, and explaining why they are not exposed.
.PP
Perl now fully supports the Unicode compound-style of using \f(CW\*(C`=\*(C'\fR
and \f(CW\*(C`:\*(C'\fR in writing regular expressions: \f(CW\*(C`\ep{property=value}\*(C'\fR and
\&\f(CW\*(C`\ep{property:value}\*(C'\fR (both of which mean the same thing).
.PP
Perl now fully supports the Unicode loose matching rules for text between
the braces in \f(CW\*(C`\ep{...}\*(C'\fR constructs. In addition, Perl allows underscores
between digits of numbers.
.PP
Perl now accepts all the Unicode-defined synonyms for properties and
property values.
.PP
\&\f(CW\*(C`qr/\eX/\*(C'\fR, which matches a Unicode logical character, has
been expanded to work better with various Asian languages. It
now is defined as an \fIextended grapheme cluster\fR. (See
<http://www.unicode.org/reports/tr29/>).  Anything matched previously
and that made sense will continue to be accepted.   Additionally:
.IP "\(bu" 4
\&\f(CW\*(C`\eX\*(C'\fR will not break apart a \f(CW\*(C`CR\ LF\*(C'\fR sequence.
.IP "\(bu" 4
\&\f(CW\*(C`\eX\*(C'\fR will now match a sequence which includes the \f(CW\*(C`ZWJ\*(C'\fR and \f(CW\*(C`ZWNJ\*(C'\fR
characters.
.IP "\(bu" 4
\&\f(CW\*(C`\eX\*(C'\fR will now always match at least one character, including an initial
mark.  Marks generally come after a base character, but it is possible in
Unicode to have them in isolation, and \f(CW\*(C`\eX\*(C'\fR will now handle that case,
for example at the beginning of a line, or after a \f(CW\*(C`ZWSP\*(C'\fR. And this is
the part where \f(CW\*(C`\eX\*(C'\fR doesn't match the things that it used to that don't
make sense. Formerly, for example, you could have the nonsensical case
of an accented \s-1LF.\s0
.IP "\(bu" 4
\&\f(CW\*(C`\eX\*(C'\fR will now match a (Korean) Hangul syllable sequence, and the Thai
and Lao exception cases.
.PP
Otherwise, this change should be transparent for the non-affected
languages.
.PP
\&\f(CW\*(C`\ep{...}\*(C'\fR matches using the Canonical_Combining_Class property were
completely broken in previous releases of Perl.  They should now work
correctly.
.PP
Before Perl 5.12, the Unicode \f(CW\*(C`Decomposition_Type=Compat\*(C'\fR property
and a Perl extension had the same name, which led to neither matching
all the correct values (with more than 100 mistakes in one, and several
thousand in the other). The Perl extension has now been renamed to be
\&\f(CW\*(C`Decomposition_Type=Noncanonical\*(C'\fR (short: \f(CW\*(C`dt=noncanon\*(C'\fR). It has the
same meaning as was previously intended, namely the union of all the
non-canonical Decomposition types, with Unicode \f(CW\*(C`Compat\*(C'\fR being just
one of those.
.PP
\&\f(CW\*(C`\ep{Decomposition_Type=Canonical}\*(C'\fR now includes the Hangul syllables.
.PP
\&\f(CW\*(C`\ep{Uppercase}\*(C'\fR and \f(CW\*(C`\ep{Lowercase}\*(C'\fR now work as the Unicode standard
says they should.  This means they each match a few more characters than
they used to.
.PP
\&\f(CW\*(C`\ep{Cntrl}\*(C'\fR now matches the same characters as \f(CW\*(C`\ep{Control}\*(C'\fR. This
means it no longer will match Private Use (gc=co), Surrogates (gc=cs),
nor Format (gc=cf) code points. The Format code points represent the
biggest possible problem. All but 36 of them are either officially
deprecated or strongly discouraged from being used. Of those 36, likely
the most widely used are the soft hyphen (U+00AD), and \s-1BOM, ZWSP, ZWNJ,
WJ,\s0 and similar characters, plus bidirectional controls.
.PP
\&\f(CW\*(C`\ep{Alpha}\*(C'\fR now matches the same characters as \f(CW\*(C`\ep{Alphabetic}\*(C'\fR. Before
5.12, Perl's definition definition included a number of things that aren't
really alpha (all marks) while omitting many that were. The definitions
of \f(CW\*(C`\ep{Alnum}\*(C'\fR and \f(CW\*(C`\ep{Word}\*(C'\fR depend on Alpha's definition and have
changed accordingly.
.PP
\&\f(CW\*(C`\ep{Word}\*(C'\fR no longer incorrectly matches non-word characters such
as fractions.
.PP
\&\f(CW\*(C`\ep{Print}\*(C'\fR no longer matches the line control characters: Tab, \s-1LF,
CR, FF, VT,\s0 and \s-1NEL.\s0 This brings it in line with standards and the
documentation.
.PP
\&\f(CW\*(C`\ep{XDigit}\*(C'\fR now matches the same characters as \f(CW\*(C`\ep{Hex_Digit}\*(C'\fR. This
means that in addition to the characters it currently matches,
\&\f(CW\*(C`[A\-Fa\-f0\-9]\*(C'\fR, it will also match the 22 fullwidth equivalents, for
example U+FF10: \s-1FULLWIDTH DIGIT ZERO.\s0
.PP
The Numeric type property has been extended to include the Unihan
characters.
.PP
There is a new Perl extension, the 'Present_In', or simply 'In',
property. This is an extension of the Unicode Age property, but
\&\f(CW\*(C`\ep{In=5.0}\*(C'\fR matches any code point whose usage has been determined
\&\fIas of\fR Unicode version 5.0. The \f(CW\*(C`\ep{Age=5.0}\*(C'\fR only matches code points
added in \fIprecisely\fR version 5.0.
.PP
A number of properties now have the correct values for unassigned
code points. The affected properties are Bidi_Class, East_Asian_Width,
Joining_Type, Decomposition_Type, Hangul_Syllable_Type, Numeric_Type,
and Line_Break.
.PP
The Default_Ignorable_Code_Point, ID_Continue, and ID_Start properties
are now up to date with current Unicode definitions.
.PP
Earlier versions of Perl erroneously exposed certain properties that
are supposed to be Unicode internal-only.  Use of these in regular
expressions will now generate, if enabled, a deprecation warning message.
The properties are: Other_Alphabetic, Other_Default_Ignorable_Code_Point,
Other_Grapheme_Extend, Other_ID_Continue, Other_ID_Start, Other_Lowercase,
Other_Math, and Other_Uppercase.
.PP
It is now possible to change which Unicode properties Perl understands
on a per-installation basis. As mentioned above, certain properties
are turned off by default.  These include all the Unihan properties
(which should be accessible via the \s-1CPAN\s0 module Unicode::Unihan) and any
deprecated or Unicode internal-only property that Perl has never exposed.
.PP
The generated files in the \f(CW\*(C`lib/unicore/To\*(C'\fR directory are now more
clearly marked as being stable, directly usable by applications.  New hash
entries in them give the format of the normal entries, which allows for
easier machine parsing. Perl can generate files in this directory for
any property, though most are suppressed.  You can find instructions
for changing which are written in perluniprops.
.SH "Modules and Pragmata"
.IX Header "Modules and Pragmata"
.SS "New Modules and Pragmata"
.IX Subsection "New Modules and Pragmata"
.ie n .IP """autodie""" 4
.el .IP "\f(CWautodie\fR" 4
.IX Item "autodie"
\&\f(CW\*(C`autodie\*(C'\fR is a new lexically-scoped alternative for the \f(CW\*(C`Fatal\*(C'\fR module.
The bundled version is 2.06_01. Note that in this release, using a string
eval when \f(CW\*(C`autodie\*(C'\fR is in effect can cause the autodie behaviour to leak
into the surrounding scope. See \*(L"\s-1BUGS\*(R"\s0 in autodie for more details.
.Sp
Version 2.06_01 has been added to the Perl core.
.ie n .IP """Compress::Raw::Bzip2""" 4
.el .IP "\f(CWCompress::Raw::Bzip2\fR" 4
.IX Item "Compress::Raw::Bzip2"
Version 2.024 has been added to the Perl core.
.ie n .IP """overloading""" 4
.el .IP "\f(CWoverloading\fR" 4
.IX Item "overloading"
\&\f(CW\*(C`overloading\*(C'\fR allows you to lexically disable or enable overloading
for some or all operations.
.Sp
Version 0.001 has been added to the Perl core.
.ie n .IP """parent""" 4
.el .IP "\f(CWparent\fR" 4
.IX Item "parent"
\&\f(CW\*(C`parent\*(C'\fR establishes an \s-1ISA\s0 relationship with base classes at compile
time. It provides the key feature of \f(CW\*(C`base\*(C'\fR without further unwanted
behaviors.
.Sp
Version 0.223 has been added to the Perl core.
.ie n .IP """Parse::CPAN::Meta""" 4
.el .IP "\f(CWParse::CPAN::Meta\fR" 4
.IX Item "Parse::CPAN::Meta"
Version 1.40 has been added to the Perl core.
.ie n .IP """VMS::DCLsym""" 4
.el .IP "\f(CWVMS::DCLsym\fR" 4
.IX Item "VMS::DCLsym"
Version 1.03 has been added to the Perl core.
.ie n .IP """VMS::Stdio""" 4
.el .IP "\f(CWVMS::Stdio\fR" 4
.IX Item "VMS::Stdio"
Version 2.4 has been added to the Perl core.
.ie n .IP """XS::APItest::KeywordRPN""" 4
.el .IP "\f(CWXS::APItest::KeywordRPN\fR" 4
.IX Item "XS::APItest::KeywordRPN"
Version 0.003 has been added to the Perl core.
.SS "Updated Pragmata"
.IX Subsection "Updated Pragmata"
.ie n .IP """base""" 4
.el .IP "\f(CWbase\fR" 4
.IX Item "base"
Upgraded from version 2.13 to 2.15.
.ie n .IP """bignum""" 4
.el .IP "\f(CWbignum\fR" 4
.IX Item "bignum"
Upgraded from version 0.22 to 0.23.
.ie n .IP """charnames""" 4
.el .IP "\f(CWcharnames\fR" 4
.IX Item "charnames"
\&\f(CW\*(C`charnames\*(C'\fR now contains the Unicode \fINameAliases.txt\fR database file.
This has the effect of adding some extra \f(CW\*(C`\eN\*(C'\fR character names that
formerly wouldn't have been recognised; for example, \f(CW"\eN{LATIN CAPITAL
LETTER GHA}"\fR.
.Sp
Upgraded from version 1.06 to 1.07.
.ie n .IP """constant""" 4
.el .IP "\f(CWconstant\fR" 4
.IX Item "constant"
Upgraded from version 1.13 to 1.20.
.ie n .IP """diagnostics""" 4
.el .IP "\f(CWdiagnostics\fR" 4
.IX Item "diagnostics"
\&\f(CW\*(C`diagnostics\*(C'\fR now supports %.0f formatting internally.
.Sp
\&\f(CW\*(C`diagnostics\*(C'\fR no longer suppresses \f(CW\*(C`Use of uninitialized value in range
(or flip)\*(C'\fR warnings. [perl #71204]
.Sp
Upgraded from version 1.17 to 1.19.
.ie n .IP """feature""" 4
.el .IP "\f(CWfeature\fR" 4
.IX Item "feature"
In \f(CW\*(C`feature\*(C'\fR, the meaning of the \f(CW\*(C`:5.10\*(C'\fR and \f(CW\*(C`:5.10.X\*(C'\fR feature
bundles has changed slightly. The last component, if any (i.e. \f(CW\*(C`X\*(C'\fR) is
simply ignored.  This is predicated on the assumption that new features
will not, in general, be added to maintenance releases. So \f(CW\*(C`:5.10\*(C'\fR
and \f(CW\*(C`:5.10.X\*(C'\fR have identical effect. This is a change to the behaviour
documented for 5.10.0.
.Sp
\&\f(CW\*(C`feature\*(C'\fR now includes the \f(CW\*(C`unicode_strings\*(C'\fR feature:
.Sp
.Vb 1
\&    use feature "unicode_strings";
.Ve
.Sp
This pragma turns on Unicode semantics for the case-changing operations
(\f(CW\*(C`uc\*(C'\fR, \f(CW\*(C`lc\*(C'\fR, \f(CW\*(C`ucfirst\*(C'\fR, \f(CW\*(C`lcfirst\*(C'\fR) on strings that don't have the
internal \s-1UTF\-8\s0 flag set, but that contain single-byte characters between
128 and 255.
.Sp
Upgraded from version 1.11 to 1.16.
.ie n .IP """less""" 4
.el .IP "\f(CWless\fR" 4
.IX Item "less"
\&\f(CW\*(C`less\*(C'\fR now includes the \f(CW\*(C`stash_name\*(C'\fR method to allow subclasses of
\&\f(CW\*(C`less\*(C'\fR to pick where in %^H to store their stash.
.Sp
Upgraded from version 0.02 to 0.03.
.ie n .IP """lib""" 4
.el .IP "\f(CWlib\fR" 4
.IX Item "lib"
Upgraded from version 0.5565 to 0.62.
.ie n .IP """mro""" 4
.el .IP "\f(CWmro\fR" 4
.IX Item "mro"
\&\f(CW\*(C`mro\*(C'\fR is now implemented as an \s-1XS\s0 extension. The documented interface has
not changed. Code relying on the implementation detail that some \f(CW\*(C`mro::\*(C'\fR
methods happened to be available at all times gets to \*(L"keep both pieces\*(R".
.Sp
Upgraded from version 1.00 to 1.02.
.ie n .IP """overload""" 4
.el .IP "\f(CWoverload\fR" 4
.IX Item "overload"
\&\f(CW\*(C`overload\*(C'\fR now allow overloading of 'qr'.
.Sp
Upgraded from version 1.06 to 1.10.
.ie n .IP """threads""" 4
.el .IP "\f(CWthreads\fR" 4
.IX Item "threads"
Upgraded from version 1.67 to 1.75.
.ie n .IP """threads::shared""" 4
.el .IP "\f(CWthreads::shared\fR" 4
.IX Item "threads::shared"
Upgraded from version 1.14 to 1.32.
.ie n .IP """version""" 4
.el .IP "\f(CWversion\fR" 4
.IX Item "version"
\&\f(CW\*(C`version\*(C'\fR now has support for \*(L"Version number formats\*(R" as described
earlier in this document and in its own documentation.
.Sp
Upgraded from version 0.74 to 0.82.
.ie n .IP """warnings""" 4
.el .IP "\f(CWwarnings\fR" 4
.IX Item "warnings"
\&\f(CW\*(C`warnings\*(C'\fR has a new \f(CW\*(C`warnings::fatal_enabled()\*(C'\fR function.  It also
includes a new \f(CW\*(C`illegalproto\*(C'\fR warning category. See also \*(L"New or
Changed Diagnostics\*(R" for this change.
.Sp
Upgraded from version 1.06 to 1.09.
.SS "Updated Modules"
.IX Subsection "Updated Modules"
.ie n .IP """Archive::Extract""" 4
.el .IP "\f(CWArchive::Extract\fR" 4
.IX Item "Archive::Extract"
Upgraded from version 0.24 to 0.38.
.ie n .IP """Archive::Tar""" 4
.el .IP "\f(CWArchive::Tar\fR" 4
.IX Item "Archive::Tar"
Upgraded from version 1.38 to 1.54.
.ie n .IP """Attribute::Handlers""" 4
.el .IP "\f(CWAttribute::Handlers\fR" 4
.IX Item "Attribute::Handlers"
Upgraded from version 0.79 to 0.87.
.ie n .IP """AutoLoader""" 4
.el .IP "\f(CWAutoLoader\fR" 4
.IX Item "AutoLoader"
Upgraded from version 5.63 to 5.70.
.ie n .IP """B::Concise""" 4
.el .IP "\f(CWB::Concise\fR" 4
.IX Item "B::Concise"
Upgraded from version 0.74 to 0.78.
.ie n .IP """B::Debug""" 4
.el .IP "\f(CWB::Debug\fR" 4
.IX Item "B::Debug"
Upgraded from version 1.05 to 1.12.
.ie n .IP """B::Deparse""" 4
.el .IP "\f(CWB::Deparse\fR" 4
.IX Item "B::Deparse"
Upgraded from version 0.83 to 0.96.
.ie n .IP """B::Lint""" 4
.el .IP "\f(CWB::Lint\fR" 4
.IX Item "B::Lint"
Upgraded from version 1.09 to 1.11_01.
.ie n .IP """CGI""" 4
.el .IP "\f(CWCGI\fR" 4
.IX Item "CGI"
Upgraded from version 3.29 to 3.48.
.ie n .IP """Class::ISA""" 4
.el .IP "\f(CWClass::ISA\fR" 4
.IX Item "Class::ISA"
Upgraded from version 0.33 to 0.36.
.Sp
\&\s-1NOTE: \s0\f(CW\*(C`Class::ISA\*(C'\fR is deprecated and may be removed from a future
version of Perl.
.ie n .IP """Compress::Raw::Zlib""" 4
.el .IP "\f(CWCompress::Raw::Zlib\fR" 4
.IX Item "Compress::Raw::Zlib"
Upgraded from version 2.008 to 2.024.
.ie n .IP """CPAN""" 4
.el .IP "\f(CWCPAN\fR" 4
.IX Item "CPAN"
Upgraded from version 1.9205 to 1.94_56.
.ie n .IP """CPANPLUS""" 4
.el .IP "\f(CWCPANPLUS\fR" 4
.IX Item "CPANPLUS"
Upgraded from version 0.84 to 0.90.
.ie n .IP """CPANPLUS::Dist::Build""" 4
.el .IP "\f(CWCPANPLUS::Dist::Build\fR" 4
.IX Item "CPANPLUS::Dist::Build"
Upgraded from version 0.06_02 to 0.46.
.ie n .IP """Data::Dumper""" 4
.el .IP "\f(CWData::Dumper\fR" 4
.IX Item "Data::Dumper"
Upgraded from version 2.121_14 to 2.125.
.ie n .IP """DB_File""" 4
.el .IP "\f(CWDB_File\fR" 4
.IX Item "DB_File"
Upgraded from version 1.816_1 to 1.820.
.ie n .IP """Devel::PPPort""" 4
.el .IP "\f(CWDevel::PPPort\fR" 4
.IX Item "Devel::PPPort"
Upgraded from version 3.13 to 3.19.
.ie n .IP """Digest""" 4
.el .IP "\f(CWDigest\fR" 4
.IX Item "Digest"
Upgraded from version 1.15 to 1.16.
.ie n .IP """Digest::MD5""" 4
.el .IP "\f(CWDigest::MD5\fR" 4
.IX Item "Digest::MD5"
Upgraded from version 2.36_01 to 2.39.
.ie n .IP """Digest::SHA""" 4
.el .IP "\f(CWDigest::SHA\fR" 4
.IX Item "Digest::SHA"
Upgraded from version 5.45 to 5.47.
.ie n .IP """Encode""" 4
.el .IP "\f(CWEncode\fR" 4
.IX Item "Encode"
Upgraded from version 2.23 to 2.39.
.ie n .IP """Exporter""" 4
.el .IP "\f(CWExporter\fR" 4
.IX Item "Exporter"
Upgraded from version 5.62 to 5.64_01.
.ie n .IP """ExtUtils::CBuilder""" 4
.el .IP "\f(CWExtUtils::CBuilder\fR" 4
.IX Item "ExtUtils::CBuilder"
Upgraded from version 0.21 to 0.27.
.ie n .IP """ExtUtils::Command""" 4
.el .IP "\f(CWExtUtils::Command\fR" 4
.IX Item "ExtUtils::Command"
Upgraded from version 1.13 to 1.16.
.ie n .IP """ExtUtils::Constant""" 4
.el .IP "\f(CWExtUtils::Constant\fR" 4
.IX Item "ExtUtils::Constant"
Upgraded from version 0.2 to 0.22.
.ie n .IP """ExtUtils::Install""" 4
.el .IP "\f(CWExtUtils::Install\fR" 4
.IX Item "ExtUtils::Install"
Upgraded from version 1.44 to 1.55.
.ie n .IP """ExtUtils::MakeMaker""" 4
.el .IP "\f(CWExtUtils::MakeMaker\fR" 4
.IX Item "ExtUtils::MakeMaker"
Upgraded from version 6.42 to 6.56.
.ie n .IP """ExtUtils::Manifest""" 4
.el .IP "\f(CWExtUtils::Manifest\fR" 4
.IX Item "ExtUtils::Manifest"
Upgraded from version 1.51_01 to 1.57.
.ie n .IP """ExtUtils::ParseXS""" 4
.el .IP "\f(CWExtUtils::ParseXS\fR" 4
.IX Item "ExtUtils::ParseXS"
Upgraded from version 2.18_02 to 2.21.
.ie n .IP """File::Fetch""" 4
.el .IP "\f(CWFile::Fetch\fR" 4
.IX Item "File::Fetch"
Upgraded from version 0.14 to 0.24.
.ie n .IP """File::Path""" 4
.el .IP "\f(CWFile::Path\fR" 4
.IX Item "File::Path"
Upgraded from version 2.04 to 2.08_01.
.ie n .IP """File::Temp""" 4
.el .IP "\f(CWFile::Temp\fR" 4
.IX Item "File::Temp"
Upgraded from version 0.18 to 0.22.
.ie n .IP """Filter::Simple""" 4
.el .IP "\f(CWFilter::Simple\fR" 4
.IX Item "Filter::Simple"
Upgraded from version 0.82 to 0.84.
.ie n .IP """Filter::Util::Call""" 4
.el .IP "\f(CWFilter::Util::Call\fR" 4
.IX Item "Filter::Util::Call"
Upgraded from version 1.07 to 1.08.
.ie n .IP """Getopt::Long""" 4
.el .IP "\f(CWGetopt::Long\fR" 4
.IX Item "Getopt::Long"
Upgraded from version 2.37 to 2.38.
.ie n .IP """IO""" 4
.el .IP "\f(CWIO\fR" 4
.IX Item "IO"
Upgraded from version 1.23_01 to 1.25_02.
.ie n .IP """IO::Zlib""" 4
.el .IP "\f(CWIO::Zlib\fR" 4
.IX Item "IO::Zlib"
Upgraded from version 1.07 to 1.10.
.ie n .IP """IPC::Cmd""" 4
.el .IP "\f(CWIPC::Cmd\fR" 4
.IX Item "IPC::Cmd"
Upgraded from version 0.40_1 to 0.54.
.ie n .IP """IPC::SysV""" 4
.el .IP "\f(CWIPC::SysV\fR" 4
.IX Item "IPC::SysV"
Upgraded from version 1.05 to 2.01.
.ie n .IP """Locale::Maketext""" 4
.el .IP "\f(CWLocale::Maketext\fR" 4
.IX Item "Locale::Maketext"
Upgraded from version 1.12 to 1.14.
.ie n .IP """Locale::Maketext::Simple""" 4
.el .IP "\f(CWLocale::Maketext::Simple\fR" 4
.IX Item "Locale::Maketext::Simple"
Upgraded from version 0.18 to 0.21.
.ie n .IP """Log::Message""" 4
.el .IP "\f(CWLog::Message\fR" 4
.IX Item "Log::Message"
Upgraded from version 0.01 to 0.02.
.ie n .IP """Log::Message::Simple""" 4
.el .IP "\f(CWLog::Message::Simple\fR" 4
.IX Item "Log::Message::Simple"
Upgraded from version 0.04 to 0.06.
.ie n .IP """Math::BigInt""" 4
.el .IP "\f(CWMath::BigInt\fR" 4
.IX Item "Math::BigInt"
Upgraded from version 1.88 to 1.89_01.
.ie n .IP """Math::BigInt::FastCalc""" 4
.el .IP "\f(CWMath::BigInt::FastCalc\fR" 4
.IX Item "Math::BigInt::FastCalc"
Upgraded from version 0.16 to 0.19.
.ie n .IP """Math::BigRat""" 4
.el .IP "\f(CWMath::BigRat\fR" 4
.IX Item "Math::BigRat"
Upgraded from version 0.21 to 0.24.
.ie n .IP """Math::Complex""" 4
.el .IP "\f(CWMath::Complex\fR" 4
.IX Item "Math::Complex"
Upgraded from version 1.37 to 1.56.
.ie n .IP """Memoize""" 4
.el .IP "\f(CWMemoize\fR" 4
.IX Item "Memoize"
Upgraded from version 1.01_02 to 1.01_03.
.ie n .IP """MIME::Base64""" 4
.el .IP "\f(CWMIME::Base64\fR" 4
.IX Item "MIME::Base64"
Upgraded from version 3.07_01 to 3.08.
.ie n .IP """Module::Build""" 4
.el .IP "\f(CWModule::Build\fR" 4
.IX Item "Module::Build"
Upgraded from version 0.2808_01 to 0.3603.
.ie n .IP """Module::CoreList""" 4
.el .IP "\f(CWModule::CoreList\fR" 4
.IX Item "Module::CoreList"
Upgraded from version 2.12 to 2.29.
.ie n .IP """Module::Load""" 4
.el .IP "\f(CWModule::Load\fR" 4
.IX Item "Module::Load"
Upgraded from version 0.12 to 0.16.
.ie n .IP """Module::Load::Conditional""" 4
.el .IP "\f(CWModule::Load::Conditional\fR" 4
.IX Item "Module::Load::Conditional"
Upgraded from version 0.22 to 0.34.
.ie n .IP """Module::Loaded""" 4
.el .IP "\f(CWModule::Loaded\fR" 4
.IX Item "Module::Loaded"
Upgraded from version 0.01 to 0.06.
.ie n .IP """Module::Pluggable""" 4
.el .IP "\f(CWModule::Pluggable\fR" 4
.IX Item "Module::Pluggable"
Upgraded from version 3.6 to 3.9.
.ie n .IP """Net::Ping""" 4
.el .IP "\f(CWNet::Ping\fR" 4
.IX Item "Net::Ping"
Upgraded from version 2.33 to 2.36.
.ie n .IP """NEXT""" 4
.el .IP "\f(CWNEXT\fR" 4
.IX Item "NEXT"
Upgraded from version 0.60_01 to 0.64.
.ie n .IP """Object::Accessor""" 4
.el .IP "\f(CWObject::Accessor\fR" 4
.IX Item "Object::Accessor"
Upgraded from version 0.32 to 0.36.
.ie n .IP """Package::Constants""" 4
.el .IP "\f(CWPackage::Constants\fR" 4
.IX Item "Package::Constants"
Upgraded from version 0.01 to 0.02.
.ie n .IP """PerlIO""" 4
.el .IP "\f(CWPerlIO\fR" 4
.IX Item "PerlIO"
Upgraded from version 1.04 to 1.06.
.ie n .IP """Pod::Parser""" 4
.el .IP "\f(CWPod::Parser\fR" 4
.IX Item "Pod::Parser"
Upgraded from version 1.35 to 1.37.
.ie n .IP """Pod::Perldoc""" 4
.el .IP "\f(CWPod::Perldoc\fR" 4
.IX Item "Pod::Perldoc"
Upgraded from version 3.14_02 to 3.15_02.
.ie n .IP """Pod::Plainer""" 4
.el .IP "\f(CWPod::Plainer\fR" 4
.IX Item "Pod::Plainer"
Upgraded from version 0.01 to 1.02.
.Sp
\&\s-1NOTE: \s0\f(CW\*(C`Pod::Plainer\*(C'\fR is deprecated and may be removed from a future
version of Perl.
.ie n .IP """Pod::Simple""" 4
.el .IP "\f(CWPod::Simple\fR" 4
.IX Item "Pod::Simple"
Upgraded from version 3.05 to 3.13.
.ie n .IP """Safe""" 4
.el .IP "\f(CWSafe\fR" 4
.IX Item "Safe"
Upgraded from version 2.12 to 2.22.
.ie n .IP """SelfLoader""" 4
.el .IP "\f(CWSelfLoader\fR" 4
.IX Item "SelfLoader"
Upgraded from version 1.11 to 1.17.
.ie n .IP """Storable""" 4
.el .IP "\f(CWStorable\fR" 4
.IX Item "Storable"
Upgraded from version 2.18 to 2.22.
.ie n .IP """Switch""" 4
.el .IP "\f(CWSwitch\fR" 4
.IX Item "Switch"
Upgraded from version 2.13 to 2.16.
.Sp
\&\s-1NOTE: \s0\f(CW\*(C`Switch\*(C'\fR is deprecated and may be removed from a future version
of Perl.
.ie n .IP """Sys::Syslog""" 4
.el .IP "\f(CWSys::Syslog\fR" 4
.IX Item "Sys::Syslog"
Upgraded from version 0.22 to 0.27.
.ie n .IP """Term::ANSIColor""" 4
.el .IP "\f(CWTerm::ANSIColor\fR" 4
.IX Item "Term::ANSIColor"
Upgraded from version 1.12 to 2.02.
.ie n .IP """Term::UI""" 4
.el .IP "\f(CWTerm::UI\fR" 4
.IX Item "Term::UI"
Upgraded from version 0.18 to 0.20.
.ie n .IP """Test""" 4
.el .IP "\f(CWTest\fR" 4
.IX Item "Test"
Upgraded from version 1.25 to 1.25_02.
.ie n .IP """Test::Harness""" 4
.el .IP "\f(CWTest::Harness\fR" 4
.IX Item "Test::Harness"
Upgraded from version 2.64 to 3.17.
.ie n .IP """Test::Simple""" 4
.el .IP "\f(CWTest::Simple\fR" 4
.IX Item "Test::Simple"
Upgraded from version 0.72 to 0.94.
.ie n .IP """Text::Balanced""" 4
.el .IP "\f(CWText::Balanced\fR" 4
.IX Item "Text::Balanced"
Upgraded from version 2.0.0 to 2.02.
.ie n .IP """Text::ParseWords""" 4
.el .IP "\f(CWText::ParseWords\fR" 4
.IX Item "Text::ParseWords"
Upgraded from version 3.26 to 3.27.
.ie n .IP """Text::Soundex""" 4
.el .IP "\f(CWText::Soundex\fR" 4
.IX Item "Text::Soundex"
Upgraded from version 3.03 to 3.03_01.
.ie n .IP """Thread::Queue""" 4
.el .IP "\f(CWThread::Queue\fR" 4
.IX Item "Thread::Queue"
Upgraded from version 2.00 to 2.11.
.ie n .IP """Thread::Semaphore""" 4
.el .IP "\f(CWThread::Semaphore\fR" 4
.IX Item "Thread::Semaphore"
Upgraded from version 2.01 to 2.09.
.ie n .IP """Tie::RefHash""" 4
.el .IP "\f(CWTie::RefHash\fR" 4
.IX Item "Tie::RefHash"
Upgraded from version 1.37 to 1.38.
.ie n .IP """Time::HiRes""" 4
.el .IP "\f(CWTime::HiRes\fR" 4
.IX Item "Time::HiRes"
Upgraded from version 1.9711 to 1.9719.
.ie n .IP """Time::Local""" 4
.el .IP "\f(CWTime::Local\fR" 4
.IX Item "Time::Local"
Upgraded from version 1.18 to 1.1901_01.
.ie n .IP """Time::Piece""" 4
.el .IP "\f(CWTime::Piece\fR" 4
.IX Item "Time::Piece"
Upgraded from version 1.12 to 1.15.
.ie n .IP """Unicode::Collate""" 4
.el .IP "\f(CWUnicode::Collate\fR" 4
.IX Item "Unicode::Collate"
Upgraded from version 0.52 to 0.52_01.
.ie n .IP """Unicode::Normalize""" 4
.el .IP "\f(CWUnicode::Normalize\fR" 4
.IX Item "Unicode::Normalize"
Upgraded from version 1.02 to 1.03.
.ie n .IP """Win32""" 4
.el .IP "\f(CWWin32\fR" 4
.IX Item "Win32"
Upgraded from version 0.34 to 0.39.
.ie n .IP """Win32API::File""" 4
.el .IP "\f(CWWin32API::File\fR" 4
.IX Item "Win32API::File"
Upgraded from version 0.1001_01 to 0.1101.
.ie n .IP """XSLoader""" 4
.el .IP "\f(CWXSLoader\fR" 4
.IX Item "XSLoader"
Upgraded from version 0.08 to 0.10.
.SS "Removed Modules and Pragmata"
.IX Subsection "Removed Modules and Pragmata"
.ie n .IP """attrs""" 4
.el .IP "\f(CWattrs\fR" 4
.IX Item "attrs"
Removed from the Perl core.  Prior version was 1.02.
.ie n .IP """CPAN::API::HOWTO""" 4
.el .IP "\f(CWCPAN::API::HOWTO\fR" 4
.IX Item "CPAN::API::HOWTO"
Removed from the Perl core.  Prior version was 'undef'.
.ie n .IP """CPAN::DeferedCode""" 4
.el .IP "\f(CWCPAN::DeferedCode\fR" 4
.IX Item "CPAN::DeferedCode"
Removed from the Perl core.  Prior version was 5.50.
.ie n .IP """CPANPLUS::inc""" 4
.el .IP "\f(CWCPANPLUS::inc\fR" 4
.IX Item "CPANPLUS::inc"
Removed from the Perl core.  Prior version was 'undef'.
.ie n .IP """DCLsym""" 4
.el .IP "\f(CWDCLsym\fR" 4
.IX Item "DCLsym"
Removed from the Perl core.  Prior version was 1.03.
.ie n .IP """ExtUtils::MakeMaker::bytes""" 4
.el .IP "\f(CWExtUtils::MakeMaker::bytes\fR" 4
.IX Item "ExtUtils::MakeMaker::bytes"
Removed from the Perl core.  Prior version was 6.42.
.ie n .IP """ExtUtils::MakeMaker::vmsish""" 4
.el .IP "\f(CWExtUtils::MakeMaker::vmsish\fR" 4
.IX Item "ExtUtils::MakeMaker::vmsish"
Removed from the Perl core.  Prior version was 6.42.
.ie n .IP """Stdio""" 4
.el .IP "\f(CWStdio\fR" 4
.IX Item "Stdio"
Removed from the Perl core.  Prior version was 2.3.
.ie n .IP """Test::Harness::Assert""" 4
.el .IP "\f(CWTest::Harness::Assert\fR" 4
.IX Item "Test::Harness::Assert"
Removed from the Perl core.  Prior version was 0.02.
.ie n .IP """Test::Harness::Iterator""" 4
.el .IP "\f(CWTest::Harness::Iterator\fR" 4
.IX Item "Test::Harness::Iterator"
Removed from the Perl core.  Prior version was 0.02.
.ie n .IP """Test::Harness::Point""" 4
.el .IP "\f(CWTest::Harness::Point\fR" 4
.IX Item "Test::Harness::Point"
Removed from the Perl core.  Prior version was 0.01.
.ie n .IP """Test::Harness::Results""" 4
.el .IP "\f(CWTest::Harness::Results\fR" 4
.IX Item "Test::Harness::Results"
Removed from the Perl core.  Prior version was 0.01.
.ie n .IP """Test::Harness::Straps""" 4
.el .IP "\f(CWTest::Harness::Straps\fR" 4
.IX Item "Test::Harness::Straps"
Removed from the Perl core.  Prior version was 0.26_01.
.ie n .IP """Test::Harness::Util""" 4
.el .IP "\f(CWTest::Harness::Util\fR" 4
.IX Item "Test::Harness::Util"
Removed from the Perl core.  Prior version was 0.01.
.ie n .IP """XSSymSet""" 4
.el .IP "\f(CWXSSymSet\fR" 4
.IX Item "XSSymSet"
Removed from the Perl core.  Prior version was 1.1.
.SS "Deprecated Modules and Pragmata"
.IX Subsection "Deprecated Modules and Pragmata"
See \*(L"Deprecated Modules\*(R" above.
.SH "Documentation"
.IX Header "Documentation"
.SS "New Documentation"
.IX Subsection "New Documentation"
.IP "\(bu" 4
perlhaiku contains instructions on how to build perl for the Haiku
platform.
.IP "\(bu" 4
perlmroapi describes the new interface for pluggable Method Resolution
Orders.
.IP "\(bu" 4
perlperf, by Richard Foley, provides an introduction to the use of
performance and optimization techniques which can be used with particular
reference to perl programs.
.IP "\(bu" 4
perlrepository describes how to access the perl source using the \fIgit\fR
version control system.
.IP "\(bu" 4
perlpolicy extends the \*(L"Social contract about contributed modules\*(R" into
the beginnings of a document on Perl porting policies.
.SS "Changes to Existing Documentation"
.IX Subsection "Changes to Existing Documentation"
.IP "\(bu" 4
The various large \fIChanges*\fR files (which listed every change made
to perl over the last 18 years) have been removed, and replaced by a
small file, also called \fIChanges\fR, which just explains how that same
information may be extracted from the git version control system.
.IP "\(bu" 4
\&\fIPorting/patching.pod\fR has been deleted, as it mainly described
interacting with the old Perforce-based repository, which is now obsolete.
Information still relevant has been moved to perlrepository.
.IP "\(bu" 4
The syntax \f(CW\*(C`unless (EXPR) BLOCK else BLOCK\*(C'\fR is now documented as valid,
as is the syntax \f(CW\*(C`unless (EXPR) BLOCK elsif (EXPR) BLOCK ... else
BLOCK\*(C'\fR, although actually using the latter may not be the best idea for
the readability of your source code.
.IP "\(bu" 4
Documented \-X overloading.
.IP "\(bu" 4
Documented that \f(CW\*(C`when()\*(C'\fR treats specially most of the filetest operators
.IP "\(bu" 4
Documented \f(CW\*(C`when\*(C'\fR as a syntax modifier.
.IP "\(bu" 4
Eliminated \*(L"Old Perl threads tutorial\*(R", which described 5005 threads.
.Sp
\&\fIpod/perlthrtut.pod\fR is the same material reworked for ithreads.
.IP "\(bu" 4
Correct previous documentation: v\-strings are not deprecated
.Sp
With version objects, we need them to use \s-1MODULE VERSION\s0 syntax. This
patch removes the deprecation notice.
.IP "\(bu" 4
Security contact information is now part of perlsec.
.IP "\(bu" 4
A significant fraction of the core documentation has been updated to
clarify the behavior of Perl's Unicode handling.
.Sp
Much of the remaining core documentation has been reviewed and edited
for clarity, consistent use of language, and to fix the spelling of Tom
Christiansen's name.
.IP "\(bu" 4
The Pod specification (perlpodspec) has been updated to bring the
specification in line with modern usage already supported by most Pod
systems. A parameter string may now follow the format name in a
\&\*(L"begin/end\*(R" region. Links to URIs with a text description are now
allowed. The usage of \f(CW\*(C`L<"section">\*(C'\fR has been marked as
deprecated.
.IP "\(bu" 4
if.pm has been documented in \*(L"use\*(R" in perlfunc as a means to get
conditional loading of modules despite the implicit \s-1BEGIN\s0 block around
\&\f(CW\*(C`use\*(C'\fR.
.IP "\(bu" 4
The documentation for \f(CW$1\fR in perlvar.pod has been clarified.
.IP "\(bu" 4
\&\f(CW\*(C`\eN{U+\f(CIcode point\f(CW}\*(C'\fR is now documented.
.SH "Selected Performance Enhancements"
.IX Header "Selected Performance Enhancements"
.IP "\(bu" 4
A new internal cache means that \f(CW\*(C`isa()\*(C'\fR will often be faster.
.IP "\(bu" 4
The implementation of \f(CW\*(C`C3\*(C'\fR Method Resolution Order has been
optimised \- linearisation for classes with single inheritance is 40%
faster. Performance for multiple inheritance is unchanged.
.IP "\(bu" 4
Under \f(CW\*(C`use locale\*(C'\fR, the locale-relevant information is now cached on
read-only values, such as the list returned by \f(CW\*(C`keys %hash\*(C'\fR. This makes
operations such as \f(CW\*(C`sort keys %hash\*(C'\fR in the scope of \f(CW\*(C`use locale\*(C'\fR
much faster.
.IP "\(bu" 4
Empty \f(CW\*(C`DESTROY\*(C'\fR methods are no longer called.
.IP "\(bu" 4
\&\f(CW\*(C`Perl_sv_utf8_upgrade()\*(C'\fR is now faster.
.IP "\(bu" 4
\&\f(CW\*(C`keys\*(C'\fR on empty hash is now faster.
.IP "\(bu" 4
\&\f(CW\*(C`if (%foo)\*(C'\fR has been optimized to be faster than \f(CW\*(C`if (keys %foo)\*(C'\fR.
.IP "\(bu" 4
The string repetition operator (\f(CW\*(C`$str x $num\*(C'\fR) is now several times
faster when \f(CW$str\fR has length one or \f(CW$num\fR is large.
.IP "\(bu" 4
Reversing an array to itself (as in \f(CW\*(C`@a = reverse @a\*(C'\fR) in void context
now happens in-place and is several orders of magnitude faster than
it used to be. It will also preserve non-existent elements whenever
possible, i.e. for non magical arrays or tied arrays with \f(CW\*(C`EXISTS\*(C'\fR
and \f(CW\*(C`DELETE\*(C'\fR methods.
.SH "Installation and Configuration Improvements"
.IX Header "Installation and Configuration Improvements"
.IP "\(bu" 4
perlapi, perlintern, perlmodlib and perltoc are now all
generated at build time, rather than being shipped as part of the release.
.IP "\(bu" 4
If \f(CW\*(C`vendorlib\*(C'\fR and \f(CW\*(C`vendorarch\*(C'\fR are the same, then they are only added
to \f(CW@INC\fR once.
.IP "\(bu" 4
\&\f(CW$Config{usedevel}\fR and the C\-level \f(CW\*(C`PERL_USE_DEVEL\*(C'\fR are now defined if
perl is built with  \f(CW\*(C`\-Dusedevel\*(C'\fR.
.IP "\(bu" 4
\&\fIConfigure\fR will enable use of \f(CW\*(C`\-fstack\-protector\*(C'\fR, to provide protection
against stack-smashing attacks, if the compiler supports it.
.IP "\(bu" 4
\&\fIConfigure\fR will now determine the correct prototypes for re-entrant
functions and for \f(CW\*(C`gconvert\*(C'\fR if you are using a \*(C+ compiler rather
than a C compiler.
.IP "\(bu" 4
On Unix, if you build from a tree containing a git repository, the
configuration process will note the commit hash you have checked out, for
display in the output of \f(CW\*(C`perl \-v\*(C'\fR and \f(CW\*(C`perl \-V\*(C'\fR. Unpushed local commits
are automatically added to the list of local patches displayed by
\&\f(CW\*(C`perl \-V\*(C'\fR.
.IP "\(bu" 4
Perl now supports SystemTap's \f(CW\*(C`dtrace\*(C'\fR compatibility layer and an
issue with linking \f(CW\*(C`miniperl\*(C'\fR has been fixed in the process.
.IP "\(bu" 4
perldoc now uses \f(CW\*(C`less \-R\*(C'\fR instead of \f(CW\*(C`less\*(C'\fR for improved behaviour
in the face of \f(CW\*(C`groff\*(C'\fR's new usage of \s-1ANSI\s0 escape codes.
.IP "\(bu" 4
\&\f(CW\*(C`perl \-V\*(C'\fR now reports use of the compile-time options \f(CW\*(C`USE_PERL_ATOF\*(C'\fR and
\&\f(CW\*(C`USE_ATTRIBUTES_FOR_PERLIO\*(C'\fR.
.IP "\(bu" 4
As part of the flattening of \fIext\fR, all extensions on all platforms are
built by \fImake_ext.pl\fR. This replaces the Unix-specific
\&\fIext/util/make_ext\fR, VMS-specific \fImake_ext.com\fR and Win32\-specific
\&\fIwin32/buildext.pl\fR.
.SH "Internal Changes"
.IX Header "Internal Changes"
Each release of Perl sees numerous internal changes which shouldn't
affect day to day usage but may still be notable for developers working
with Perl's source code.
.IP "\(bu" 4
The J.R.R. Tolkien quotes at the head of C source file have been checked
and proper citations added, thanks to a patch from Tom Christiansen.
.IP "\(bu" 4
The internal structure of the dual-life modules traditionally found in
the \fIlib/\fR and \fIext/\fR directories in the perl source has changed
significantly. Where possible, dual-lifed modules have been extracted
from \fIlib/\fR and \fIext/\fR.
.Sp
Dual-lifed modules maintained by Perl's developers as part of the Perl
core now live in \fIdist/\fR.  Dual-lifed modules maintained primarily on
\&\s-1CPAN\s0 now live in \fIcpan/\fR.  When reporting a bug in a module located
under \fIcpan/\fR, please send your bug report directly to the module's
bug tracker or author, rather than Perl's bug tracker.
.IP "\(bu" 4
\&\f(CW\*(C`\eN{...}\*(C'\fR now compiles better, always forces \s-1UTF\-8\s0 internal representation
.Sp
Perl's developers have fixed several problems with the recognition of
\&\f(CW\*(C`\eN{...}\*(C'\fR constructs.  As part of this, perl will store any scalar
or regex containing \f(CW\*(C`\eN{\f(CIname\f(CW}\*(C'\fR or \f(CW\*(C`\eN{U+\f(CIcode point\f(CW}\*(C'\fR in its
definition in \s-1UTF\-8\s0 format. (This was true previously for all occurrences
of \f(CW\*(C`\eN{\f(CIname\f(CW}\*(C'\fR that did not use a custom translator, but now it's
always true.)
.IP "\(bu" 4
Perl_magic_setmglob now knows about globs, fixing \s-1RT\s0 #71254.
.IP "\(bu" 4
\&\f(CW\*(C`SVt_RV\*(C'\fR no longer exists. RVs are now stored in IVs.
.IP "\(bu" 4
\&\f(CW\*(C`Perl_vcroak()\*(C'\fR now accepts a null first argument. In addition, a full
audit was made of the \*(L"not \s-1NULL\*(R"\s0 compiler annotations, and those for
several other internal functions were corrected.
.IP "\(bu" 4
New macros \f(CW\*(C`dSAVEDERRNO\*(C'\fR, \f(CW\*(C`dSAVE_ERRNO\*(C'\fR, \f(CW\*(C`SAVE_ERRNO\*(C'\fR, \f(CW\*(C`RESTORE_ERRNO\*(C'\fR
have been added to formalise the temporary saving of the \f(CW\*(C`errno\*(C'\fR
variable.
.IP "\(bu" 4
The function \f(CW\*(C`Perl_sv_insert_flags\*(C'\fR has been added to augment
\&\f(CW\*(C`Perl_sv_insert\*(C'\fR.
.IP "\(bu" 4
The function \f(CW\*(C`Perl_newSV_type(type)\*(C'\fR has been added, equivalent to
\&\f(CW\*(C`Perl_newSV()\*(C'\fR followed by \f(CW\*(C`Perl_sv_upgrade(type)\*(C'\fR.
.IP "\(bu" 4
The function \f(CW\*(C`Perl_newSVpvn_flags()\*(C'\fR has been added, equivalent to
\&\f(CW\*(C`Perl_newSVpvn()\*(C'\fR and then performing the action relevant to the flag.
.Sp
Two flag bits are currently supported.
.RS 4
.IP "\(bu" 4
\&\f(CW\*(C`SVf_UTF8\*(C'\fR will call \f(CW\*(C`SvUTF8_on()\*(C'\fR for you. (Note that this does
not convert an sequence of \s-1ISO 8859\-1\s0 characters to \s-1UTF\-8\s0). A wrapper,
\&\f(CW\*(C`newSVpvn_utf8()\*(C'\fR is available for this.
.IP "\(bu" 4
\&\f(CW\*(C`SVs_TEMP\*(C'\fR now calls \f(CW\*(C`Perl_sv_2mortal()\*(C'\fR on the new \s-1SV.\s0
.RE
.RS 4
.Sp
There is also a wrapper that takes constant strings, \f(CW\*(C`newSVpvs_flags()\*(C'\fR.
.RE
.IP "\(bu" 4
The function \f(CW\*(C`Perl_croak_xs_usage\*(C'\fR has been added as a wrapper to
\&\f(CW\*(C`Perl_croak\*(C'\fR.
.IP "\(bu" 4
Perl now exports the functions \f(CW\*(C`PerlIO_find_layer\*(C'\fR and \f(CW\*(C`PerlIO_list_alloc\*(C'\fR.
.IP "\(bu" 4
\&\f(CW\*(C`PL_na\*(C'\fR has been exterminated from the core code, replaced by local
\&\s-1STRLEN\s0 temporaries, or \f(CW\*(C`*_nolen()\*(C'\fR calls. Either approach is faster than
\&\f(CW\*(C`PL_na\*(C'\fR, which is a pointer dereference into the interpreter structure
under ithreads, and a global variable otherwise.
.IP "\(bu" 4
\&\f(CW\*(C`Perl_mg_free()\*(C'\fR used to leave freed memory accessible via \f(CW\*(C`SvMAGIC()\*(C'\fR
on the scalar. It now updates the linked list to remove each piece of
magic as it is freed.
.IP "\(bu" 4
Under ithreads, the regex in \f(CW\*(C`PL_reg_curpm\*(C'\fR is now reference
counted. This eliminates a lot of hackish workarounds to cope with it
not being reference counted.
.IP "\(bu" 4
\&\f(CW\*(C`Perl_mg_magical()\*(C'\fR would sometimes incorrectly turn on \f(CW\*(C`SvRMAGICAL()\*(C'\fR.
This has been fixed.
.IP "\(bu" 4
The \fIpublic\fR \s-1IV\s0 and \s-1NV\s0 flags are now not set if the string value has
trailing \*(L"garbage\*(R". This behaviour is consistent with not setting the
public \s-1IV\s0 or \s-1NV\s0 flags if the value is out of range for the type.
.IP "\(bu" 4
Uses of \f(CW\*(C`Nullav\*(C'\fR, \f(CW\*(C`Nullcv\*(C'\fR, \f(CW\*(C`Nullhv\*(C'\fR, \f(CW\*(C`Nullop\*(C'\fR, \f(CW\*(C`Nullsv\*(C'\fR etc have
been replaced by \f(CW\*(C`NULL\*(C'\fR in the core code, and non-dual-life modules,
as \f(CW\*(C`NULL\*(C'\fR is clearer to those unfamiliar with the core code.
.IP "\(bu" 4
A macro \f(CWMUTABLE_PTR(p)\fR has been added, which on (non-pedantic) gcc will
not cast away \f(CW\*(C`const\*(C'\fR, returning a \f(CW\*(C`void *\*(C'\fR. Macros \f(CW\*(C`MUTABLE_SV(av)\*(C'\fR,
\&\f(CW\*(C`MUTABLE_SV(cv)\*(C'\fR etc build on this, casting to \f(CW\*(C`AV *\*(C'\fR etc without
casting away \f(CW\*(C`const\*(C'\fR. This allows proper compile-time auditing of
\&\f(CW\*(C`const\*(C'\fR correctness in the core, and helped picked up some errors
(now fixed).
.IP "\(bu" 4
Macros \f(CW\*(C`mPUSHs()\*(C'\fR and \f(CW\*(C`mXPUSHs()\*(C'\fR have been added, for pushing SVs on the
stack and mortalizing them.
.IP "\(bu" 4
Use of the private structure \f(CW\*(C`mro_meta\*(C'\fR has changed slightly. Nothing
outside the core should be accessing this directly anyway.
.IP "\(bu" 4
A new tool, \fIPorting/expand\-macro.pl\fR has been added, that allows you
to view how a C preprocessor macro would be expanded when compiled.
This is handy when trying to decode the macro hell that is the perl
guts.
.SH "Testing"
.IX Header "Testing"
.SS "Testing improvements"
.IX Subsection "Testing improvements"
.IP "Parallel tests" 4
.IX Item "Parallel tests"
The core distribution can now run its regression tests in parallel on
Unix-like platforms. Instead of running \f(CW\*(C`make test\*(C'\fR, set \f(CW\*(C`TEST_JOBS\*(C'\fR in
your environment to the number of tests to run in parallel, and run
\&\f(CW\*(C`make test_harness\*(C'\fR. On a Bourne-like shell, this can be done as
.Sp
.Vb 1
\&    TEST_JOBS=3 make test_harness  # Run 3 tests in parallel
.Ve
.Sp
An environment variable is used, rather than parallel make itself, because
TAP::Harness needs to be able to schedule individual non-conflicting test
scripts itself, and there is no standard interface to \f(CW\*(C`make\*(C'\fR utilities to
interact with their job schedulers.
.Sp
Note that currently some test scripts may fail when run in parallel (most
notably \f(CW\*(C`ext/IO/t/io_dir.t\*(C'\fR). If necessary run just the failing scripts
again sequentially and see if the failures go away.
.IP "Test harness flexibility" 4
.IX Item "Test harness flexibility"
It's now possible to override \f(CW\*(C`PERL5OPT\*(C'\fR and friends in \fIt/TEST\fR
.IP "Test watchdog" 4
.IX Item "Test watchdog"
Several tests that have the potential to hang forever if they fail now
incorporate a \*(L"watchdog\*(R" functionality that will kill them after a timeout,
which helps ensure that \f(CW\*(C`make test\*(C'\fR and \f(CW\*(C`make test_harness\*(C'\fR run to
completion automatically.
.SS "New Tests"
.IX Subsection "New Tests"
Perl's developers have added a number of new tests to the core.
In addition to the items listed below, many modules updated from \s-1CPAN\s0
incorporate new tests.
.IP "\(bu" 4
Significant cleanups to core tests to ensure that language and
interpreter features are not used before they're tested.
.IP "\(bu" 4
\&\f(CW\*(C`make test_porting\*(C'\fR now runs a number of important pre-commit checks
which might be of use to anyone working on the Perl core.
.IP "\(bu" 4
\&\fIt/porting/podcheck.t\fR automatically checks the well-formedness of
\&\s-1POD\s0 found in all .pl, .pm and .pod files in the \fI\s-1MANIFEST\s0\fR, other than in
dual-lifed modules which are primarily maintained outside the Perl core.
.IP "\(bu" 4
\&\fIt/porting/manifest.t\fR now tests that all files listed in \s-1MANIFEST\s0
are present.
.IP "\(bu" 4
\&\fIt/op/while_readdir.t\fR tests that a bare readdir in while loop sets \f(CW$_\fR.
.IP "\(bu" 4
\&\fIt/comp/retainedlines.t\fR checks that the debugger can retain source
lines from \f(CW\*(C`eval\*(C'\fR.
.IP "\(bu" 4
\&\fIt/io/perlio_fail.t\fR checks that bad layers fail.
.IP "\(bu" 4
\&\fIt/io/perlio_leaks.t\fR checks that PerlIO layers are not leaking.
.IP "\(bu" 4
\&\fIt/io/perlio_open.t\fR checks that certain special forms of open work.
.IP "\(bu" 4
\&\fIt/io/perlio.t\fR includes general PerlIO tests.
.IP "\(bu" 4
\&\fIt/io/pvbm.t\fR checks that there is no unexpected interaction between
the internal types \f(CW\*(C`PVBM\*(C'\fR and \f(CW\*(C`PVGV\*(C'\fR.
.IP "\(bu" 4
\&\fIt/mro/package_aliases.t\fR checks that mro works properly in the presence
of aliased packages.
.IP "\(bu" 4
\&\fIt/op/dbm.t\fR tests \f(CW\*(C`dbmopen\*(C'\fR and \f(CW\*(C`dbmclose\*(C'\fR.
.IP "\(bu" 4
\&\fIt/op/index_thr.t\fR tests the interaction of \f(CW\*(C`index\*(C'\fR and threads.
.IP "\(bu" 4
\&\fIt/op/pat_thr.t\fR tests the interaction of esoteric patterns and threads.
.IP "\(bu" 4
\&\fIt/op/qr_gc.t\fR tests that \f(CW\*(C`qr\*(C'\fR doesn't leak.
.IP "\(bu" 4
\&\fIt/op/reg_email_thr.t\fR tests the interaction of regex recursion and threads.
.IP "\(bu" 4
\&\fIt/op/regexp_qr_embed_thr.t\fR tests the interaction of patterns with
embedded \f(CW\*(C`qr//\*(C'\fR and threads.
.IP "\(bu" 4
\&\fIt/op/regexp_unicode_prop.t\fR tests Unicode properties in regular
expressions.
.IP "\(bu" 4
\&\fIt/op/regexp_unicode_prop_thr.t\fR tests the interaction of Unicode
properties and threads.
.IP "\(bu" 4
\&\fIt/op/reg_nc_tie.t\fR tests the tied methods of \f(CW\*(C`Tie::Hash::NamedCapture\*(C'\fR.
.IP "\(bu" 4
\&\fIt/op/reg_posixcc.t\fR checks that \s-1POSIX\s0 character classes behave
consistently.
.IP "\(bu" 4
\&\fIt/op/re.t\fR checks that exportable \f(CW\*(C`re\*(C'\fR functions in \fIuniversal.c\fR work.
.IP "\(bu" 4
\&\fIt/op/setpgrpstack.t\fR checks that \f(CW\*(C`setpgrp\*(C'\fR works.
.IP "\(bu" 4
\&\fIt/op/substr_thr.t\fR tests the interaction of \f(CW\*(C`substr\*(C'\fR and threads.
.IP "\(bu" 4
\&\fIt/op/upgrade.t\fR checks that upgrading and assigning scalars works.
.IP "\(bu" 4
\&\fIt/uni/lex_utf8.t\fR checks that Unicode in the lexer works.
.IP "\(bu" 4
\&\fIt/uni/tie.t\fR checks that Unicode and \f(CW\*(C`tie\*(C'\fR work.
.IP "\(bu" 4
\&\fIt/comp/final_line_num.t\fR tests whether line numbers are correct at \s-1EOF\s0
.IP "\(bu" 4
\&\fIt/comp/form_scope.t\fR tests format scoping.
.IP "\(bu" 4
\&\fIt/comp/line_debug.t\fR tests whether \f(CW\*(C`@{"_<$file"}\*(C'\fR works.
.IP "\(bu" 4
\&\fIt/op/filetest_t.t\fR tests if \-t file test works.
.IP "\(bu" 4
\&\fIt/op/qr.t\fR tests \f(CW\*(C`qr\*(C'\fR.
.IP "\(bu" 4
\&\fIt/op/utf8cache.t\fR tests malfunctions of the utf8 cache.
.IP "\(bu" 4
\&\fIt/re/uniprops.t\fR test unicodes \f(CW\*(C`\ep{}\*(C'\fR regex constructs.
.IP "\(bu" 4
\&\fIt/op/filehandle.t\fR tests some suitably portable filetest operators
to check that they work as expected, particularly in the light of some
internal changes made in how filehandles are blessed.
.IP "\(bu" 4
\&\fIt/op/time_loop.t\fR tests that unix times greater than \f(CW\*(C`2**63\*(C'\fR, which
can now be handed to \f(CW\*(C`gmtime\*(C'\fR and \f(CW\*(C`localtime\*(C'\fR, do not cause an internal
overflow or an excessively long loop.
.SH "New or Changed Diagnostics"
.IX Header "New or Changed Diagnostics"
.SS "New Diagnostics"
.IX Subsection "New Diagnostics"
.IP "\(bu" 4
\&\s-1SV\s0 allocation tracing has been added to the diagnostics enabled by \f(CW\*(C`\-Dm\*(C'\fR.
The tracing can alternatively output via the \f(CW\*(C`PERL_MEM_LOG\*(C'\fR mechanism, if
that was enabled when the \fIperl\fR binary was compiled.
.IP "\(bu" 4
Smartmatch resolution tracing has been added as a new diagnostic. Use
\&\f(CW\*(C`\-DM\*(C'\fR to enable it.
.IP "\(bu" 4
A new debugging flag \f(CW\*(C`\-DB\*(C'\fR now dumps subroutine definitions, leaving
\&\f(CW\*(C`\-Dx\*(C'\fR for its original purpose of dumping syntax trees.
.IP "\(bu" 4
Perl 5.12 provides a number of new diagnostic messages to help you write
better code.  See perldiag for details of these new messages.
.RS 4
.IP "\(bu" 4
\&\f(CW\*(C`Bad plugin affecting keyword \*(Aq%s\*(Aq\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`gmtime(%.0f) too large\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`Lexing code attempted to stuff non\-Latin\-1 character into Latin\-1 input\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`Lexing code internal error (%s)\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`localtime(%.0f) too large\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`Overloaded dereference did not return a reference\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`Overloaded qr did not return a REGEXP\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`Perl_pmflag() is deprecated, and will be removed from the XS API\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`lvalue attribute ignored after the subroutine has been defined\*(C'\fR
.Sp
This new warning is issued when one attempts to mark a subroutine as
lvalue after it has been defined.
.IP "\(bu" 4
Perl now warns you if \f(CW\*(C`++\*(C'\fR or \f(CW\*(C`\-\-\*(C'\fR are unable to change the value
because it's beyond the limit of representation.
.Sp
This uses a new warnings category: \*(L"imprecision\*(R".
.IP "\(bu" 4
\&\f(CW\*(C`lc\*(C'\fR, \f(CW\*(C`uc\*(C'\fR, \f(CW\*(C`lcfirst\*(C'\fR, and \f(CW\*(C`ucfirst\*(C'\fR warn when passed undef.
.IP "\(bu" 4
\&\f(CW\*(C`Show constant in "Useless use of a constant in void context"\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`Prototype after \*(Aq%s\*(Aq\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`panic: sv_chop %s\*(C'\fR
.Sp
This new fatal error occurs when the C routine \f(CW\*(C`Perl_sv_chop()\*(C'\fR was
passed a position that is not within the scalar's string buffer. This
could be caused by buggy \s-1XS\s0 code, and at this point recovery is not
possible.
.IP "\(bu" 4
The fatal error \f(CW\*(C`Malformed UTF\-8 returned by \eN\*(C'\fR is now produced if the
\&\f(CW\*(C`charnames\*(C'\fR handler returns malformed \s-1UTF\-8.\s0
.IP "\(bu" 4
If an unresolved named character or sequence was encountered when
compiling a regex pattern then the fatal error \f(CW\*(C`\eN{NAME} must be resolved
by the lexer\*(C'\fR is now produced. This can happen, for example, when using a
single-quotish context like \f(CW\*(C`$re = \*(Aq\eN{SPACE}\*(Aq; /$re/;\*(C'\fR. See perldiag
for more examples of how the lexer can get bypassed.
.IP "\(bu" 4
\&\f(CW\*(C`Invalid hexadecimal number in \eN{U+...}\*(C'\fR is a new fatal error
triggered when the character constant represented by \f(CW\*(C`...\*(C'\fR is not a
valid hexadecimal number.
.IP "\(bu" 4
The new meaning of \f(CW\*(C`\eN\*(C'\fR as \f(CW\*(C`[^\en]\*(C'\fR is not valid in a bracketed character
class, just like \f(CW\*(C`.\*(C'\fR in a character class loses its special meaning,
and will cause the fatal error \f(CW\*(C`\eN in a character class must be a named
character: \eN{...}\*(C'\fR.
.IP "\(bu" 4
The rules on what is legal for the \f(CW\*(C`...\*(C'\fR in \f(CW\*(C`\eN{...}\*(C'\fR have been
tightened up so that unless the \f(CW\*(C`...\*(C'\fR begins with an alphabetic
character and continues with a combination of alphanumerics, dashes,
spaces, parentheses or colons then the warning \f(CW\*(C`Deprecated character(s)
in \eN{...} starting at \*(Aq%s\*(Aq\*(C'\fR is now issued.
.IP "\(bu" 4
The warning \f(CW\*(C`Using just the first characters returned by \eN{}\*(C'\fR will
be issued if the \f(CW\*(C`charnames\*(C'\fR handler returns a sequence of characters
which exceeds the limit of the number of characters that can be used. The
message will indicate which characters were used and which were discarded.
.RE
.RS 4
.RE
.SS "Changed Diagnostics"
.IX Subsection "Changed Diagnostics"
A number of existing diagnostic messages have been improved or corrected:
.IP "\(bu" 4
A new warning category \f(CW\*(C`illegalproto\*(C'\fR allows finer-grained control of
warnings around function prototypes.
.Sp
The two warnings:
.RS 4
.ie n .IP """Illegal character in prototype for %s : %s""" 4
.el .IP "\f(CWIllegal character in prototype for %s : %s\fR" 4
.IX Item "Illegal character in prototype for %s : %s"
.PD 0
.ie n .IP """Prototype after \*(Aq%c\*(Aq for %s : %s""" 4
.el .IP "\f(CWPrototype after \*(Aq%c\*(Aq for %s : %s\fR" 4
.IX Item "Prototype after %c for %s : %s"
.RE
.RS 4
.PD
.Sp
have been moved from the \f(CW\*(C`syntax\*(C'\fR top-level warnings category into a new
first-level category, \f(CW\*(C`illegalproto\*(C'\fR. These two warnings are currently
the only ones emitted during parsing of an invalid/illegal prototype,
so one can now use
.Sp
.Vb 1
\&  no warnings \*(Aqillegalproto\*(Aq;
.Ve
.Sp
to suppress only those, but not other syntax-related warnings. Warnings
where prototypes are changed, ignored, or not met are still in the
\&\f(CW\*(C`prototype\*(C'\fR category as before.
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Deep recursion on subroutine "%s"\*(C'\fR
.Sp
It is now possible to change the depth threshold for this warning from the
default of 100, by recompiling the \fIperl\fR binary, setting the C
pre-processor macro \f(CW\*(C`PERL_SUB_DEPTH_WARN\*(C'\fR to the desired value.
.IP "\(bu" 4
\&\f(CW\*(C`Illegal character in prototype\*(C'\fR warning is now more precise
when reporting illegal characters after _
.IP "\(bu" 4
mro merging error messages are now very similar to those produced by
Algorithm::C3.
.IP "\(bu" 4
Amelioration of the error message \*(L"Unrecognized character \f(CW%s\fR in column \f(CW%d\fR\*(R"
.Sp
Changes the error message to \*(L"Unrecognized character \f(CW%s\fR; marked by <\-\-
\&\s-1HERE\s0 after \f(CW%s\fR<\-\- \s-1HERE\s0 near column \f(CW%d\fR\*(R". This should make it a little
simpler to spot and correct the suspicious character.
.IP "\(bu" 4
Perl now explicitly points to \f(CW$.\fR when it causes an uninitialized
warning for ranges in scalar context.
.IP "\(bu" 4
\&\f(CW\*(C`split\*(C'\fR now warns when called in void context.
.IP "\(bu" 4
\&\f(CW\*(C`printf\*(C'\fR\-style functions called with too few arguments will now issue the
warning \f(CW"Missing argument in %s"\fR [perl #71000]
.IP "\(bu" 4
Perl now properly returns a syntax error instead of segfaulting
if \f(CW\*(C`each\*(C'\fR, \f(CW\*(C`keys\*(C'\fR, or \f(CW\*(C`values\*(C'\fR is used without an argument.
.IP "\(bu" 4
\&\f(CW\*(C`tell()\*(C'\fR now fails properly if called without an argument and when no
previous file was read.
.Sp
\&\f(CW\*(C`tell()\*(C'\fR now returns \f(CW\*(C`\-1\*(C'\fR, and sets errno to \f(CW\*(C`EBADF\*(C'\fR, thus restoring
the 5.8.x behaviour.
.IP "\(bu" 4
\&\f(CW\*(C`overload\*(C'\fR no longer implicitly unsets fallback on repeated 'use
overload' lines.
.IP "\(bu" 4
\&\fIPOSIX::strftime()\fR can now handle Unicode characters in the format string.
.IP "\(bu" 4
The \f(CW\*(C`syntax\*(C'\fR category was removed from 5 warnings that should only be in
\&\f(CW\*(C`deprecated\*(C'\fR.
.IP "\(bu" 4
Three fatal \f(CW\*(C`pack\*(C'\fR/\f(CW\*(C`unpack\*(C'\fR error messages have been normalized to
\&\f(CW\*(C`panic: %s\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`Unicode character is illegal\*(C'\fR has been rephrased to be more accurate
.Sp
It now reads \f(CW\*(C`Unicode non\-character is illegal in interchange\*(C'\fR and the
perldiag documentation has been expanded a bit.
.IP "\(bu" 4
Currently, all but the first of the several characters that the
\&\f(CW\*(C`charnames\*(C'\fR handler may return are discarded when used in a regular
expression pattern bracketed character class. If this happens then the
warning \f(CW\*(C`Using just the first character returned by \eN{} in character
class\*(C'\fR will be issued.
.IP "\(bu" 4
The warning \f(CW\*(C`Missing right brace on \eN{} or unescaped left brace after
\&\eN.  Assuming the latter\*(C'\fR will be issued if Perl encounters a \f(CW\*(C`\eN{\*(C'\fR
but doesn't find a matching \f(CW\*(C`}\*(C'\fR. In this case Perl doesn't know if it
was mistakenly omitted, or if \*(L"match non-newline\*(R" followed by "match
a \f(CW\*(C`{\*(C'\fR" was desired.  It assumes the latter because that is actually a
valid interpretation as written, unlike the other case.  If you meant
the former, you need to add the matching right brace.  If you did mean
the latter, you can silence this warning by writing instead \f(CW\*(C`\eN\e{\*(C'\fR.
.IP "\(bu" 4
\&\f(CW\*(C`gmtime\*(C'\fR and \f(CW\*(C`localtime\*(C'\fR called with numbers smaller than they can
reliably handle will now issue the warnings \f(CW\*(C`gmtime(%.0f) too small\*(C'\fR
and \f(CW\*(C`localtime(%.0f) too small\*(C'\fR.
.PP
The following diagnostic messages have been removed:
.IP "\(bu" 4
\&\f(CW\*(C`Runaway format\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`Can\*(Aqt locate package %s for the parents of %s\*(C'\fR
.Sp
In general this warning it only got produced in
conjunction with other warnings, and removing it allowed an \s-1ISA\s0 lookup
optimisation to be added.
.IP "\(bu" 4
\&\f(CW\*(C`v\-string in use/require is non\-portable\*(C'\fR
.SH "Utility Changes"
.IX Header "Utility Changes"
.IP "\(bu" 4
\&\fIh2ph\fR now looks in \f(CW\*(C`include\-fixed\*(C'\fR too, which is a recent addition
to gcc's search path.
.IP "\(bu" 4
\&\fIh2xs\fR no longer incorrectly treats enum values like macros.
It also now handles \*(C+ style comments (\f(CW\*(C`//\*(C'\fR) properly in enums.
.IP "\(bu" 4
\&\fIperl5db.pl\fR now supports \f(CW\*(C`LVALUE\*(C'\fR subroutines.  Additionally, the
debugger now correctly handles proxy constant subroutines, and
subroutine stubs.
.IP "\(bu" 4
\&\fIperlbug\fR now uses \f(CW%Module::CoreList::bug_tracker\fR to print out
upstream bug tracker URLs.  If a user identifies a particular module
as the topic of their bug report and we're able to divine the \s-1URL\s0 for
its upstream bug tracker, perlbug now provide a message to the user
explaining that the core copies the \s-1CPAN\s0 version directly, and provide
the \s-1URL\s0 for reporting the bug directly to the upstream author.
.Sp
\&\fIperlbug\fR no longer reports \*(L"Message sent\*(R" when it hasn't actually sent
the message
.IP "\(bu" 4
\&\fIperlthanks\fR is a new utility for sending non-bug-reports to the
authors and maintainers of Perl. Getting nothing but bug reports can
become a bit demoralising. If Perl 5.12 works well for you, please try
out \fIperlthanks\fR. It will make the developers smile.
.IP "\(bu" 4
Perl's developers have fixed bugs in \fIa2p\fR having to do with the
\&\f(CW\*(C`match()\*(C'\fR operator in list context.  Additionally, \fIa2p\fR no longer
generates code that uses the \f(CW$[\fR variable.
.SH "Selected Bug Fixes"
.IX Header "Selected Bug Fixes"
.IP "\(bu" 4
U+0FFFF is now a legal character in regular expressions.
.IP "\(bu" 4
pp_qr now always returns a new regexp \s-1SV.\s0 Resolves \s-1RT\s0 #69852.
.Sp
Instead of returning a(nother) reference to the (pre-compiled) regexp
in the optree, use \fIreg_temp_copy()\fR to create a copy of it, and return a
reference to that. This resolves issues about Regexp::DESTROY not being
called in a timely fashion (the original bug tracked by \s-1RT\s0 #69852), as
well as bugs related to blessing regexps, and of assigning to regexps,
as described in correspondence added to the ticket.
.Sp
It transpires that we also need to undo the \fISvPVX()\fR sharing when ithreads
cloning a Regexp \s-1SV,\s0 because mother_re is set to \s-1NULL,\s0 instead of a
cloned copy of the mother_re. This change might fix bugs with regexps
and threads in certain other situations, but as yet neither tests nor
bug reports have indicated any problems, so it might not actually be an
edge case that it's possible to reach.
.IP "\(bu" 4
Several compilation errors and segfaults when perl was built with \f(CW\*(C`\-Dmad\*(C'\fR
were fixed.
.IP "\(bu" 4
Fixes for lexer \s-1API\s0 changes in 5.11.2 which broke NYTProf's savesrc option.
.IP "\(bu" 4
\&\f(CW\*(C`\-t\*(C'\fR should only return \s-1TRUE\s0 for file handles connected to a \s-1TTY\s0
.Sp
The Microsoft C version of \f(CW\*(C`isatty()\*(C'\fR returns \s-1TRUE\s0 for all character mode
devices, including the \fI/dev/null\fR\-style \*(L"nul\*(R" device and printers like
\&\*(L"lpt1\*(R".
.IP "\(bu" 4
Fixed a regression caused by commit fafafbaf which caused a panic during
parameter passing [perl #70171]
.IP "\(bu" 4
On systems which in-place edits without backup files, \-i'*' now works as
the documentation says it does [perl #70802]
.IP "\(bu" 4
Saving and restoring magic flags no longer loses readonly flag.
.IP "\(bu" 4
The malformed syntax \f(CW\*(C`grep EXPR LIST\*(C'\fR (note the missing comma) no longer
causes abrupt and total failure.
.IP "\(bu" 4
Regular expressions compiled with \f(CW\*(C`qr{}\*(C'\fR literals properly set \f(CW\*(C`$\*(Aq\*(C'\fR when
matching again.
.IP "\(bu" 4
Using named subroutines with \f(CW\*(C`sort\*(C'\fR should no longer lead to bus errors
[perl #71076]
.IP "\(bu" 4
Numerous bugfixes catch small issues caused by the recently-added Lexer \s-1API.\s0
.IP "\(bu" 4
Smart match against \f(CW@_\fR sometimes gave false negatives. [perl #71078]
.IP "\(bu" 4
\&\f(CW$@\fR may now be assigned a read-only value (without error or busting
the stack).
.IP "\(bu" 4
\&\f(CW\*(C`sort\*(C'\fR called recursively from within an active comparison subroutine no
longer causes a bus error if run multiple times. [perl #71076]
.IP "\(bu" 4
Tie::Hash::NamedCapture::* will not abort if passed bad input (\s-1RT\s0 #71828)
.IP "\(bu" 4
\&\f(CW@_\fR and \f(CW$_\fR no longer leak under threads (\s-1RT\s0 #34342 and #41138, also
#70602, #70974)
.IP "\(bu" 4
\&\f(CW\*(C`\-I\*(C'\fR on shebang line now adds directories in front of \f(CW@INC\fR
as documented, and as does \f(CW\*(C`\-I\*(C'\fR when specified on the command-line.
.IP "\(bu" 4
\&\f(CW\*(C`kill\*(C'\fR is now fatal when called on non-numeric process identifiers.
Previously, an \f(CW\*(C`undef\*(C'\fR process identifier would be interpreted as a
request to kill process 0, which would terminate the current process
group on \s-1POSIX\s0 systems. Since process identifiers are always integers,
killing a non-numeric process is now fatal.
.IP "\(bu" 4
5.10.0 inadvertently disabled an optimisation, which caused a measurable
performance drop in list assignment, such as is often used to assign
function parameters from \f(CW@_\fR. The optimisation has been re-instated, and
the performance regression fixed. (This fix is also present in 5.10.1)
.IP "\(bu" 4
Fixed memory leak on \f(CW\*(C`while (1) { map 1, 1 }\*(C'\fR [\s-1RT\s0 #53038].
.IP "\(bu" 4
Some potential coredumps in PerlIO fixed [\s-1RT\s0 #57322,54828].
.IP "\(bu" 4
The debugger now works with lvalue subroutines.
.IP "\(bu" 4
The debugger's \f(CW\*(C`m\*(C'\fR command was broken on modules that defined constants
[\s-1RT\s0 #61222].
.IP "\(bu" 4
\&\f(CW\*(C`crypt\*(C'\fR and string complement could return tainted values for untainted
arguments [\s-1RT\s0 #59998].
.IP "\(bu" 4
The \f(CW\*(C`\-i\*(C'\fR\fI.suffix\fR command-line switch now recreates the file using
restricted permissions, before changing its mode to match the original
file. This eliminates a potential race condition [\s-1RT\s0 #60904].
.IP "\(bu" 4
On some Unix systems, the value in \f(CW$?\fR would not have the top bit set
(\f(CW\*(C`$? & 128\*(C'\fR) even if the child core dumped.
.IP "\(bu" 4
Under some circumstances, \f(CW$^R\fR could incorrectly become undefined
[\s-1RT\s0 #57042].
.IP "\(bu" 4
In the \s-1XS API,\s0 various hash functions, when passed a pre-computed hash where
the key is \s-1UTF\-8,\s0 might result in an incorrect lookup.
.IP "\(bu" 4
\&\s-1XS\s0 code including \fI\s-1XSUB\s0.h\fR before \fIperl.h\fR gave a compile-time error
[\s-1RT\s0 #57176].
.IP "\(bu" 4
\&\f(CW\*(C`$object\->isa(\*(AqFoo\*(Aq)\*(C'\fR would report false if the package \f(CW\*(C`Foo\*(C'\fR
didn't exist, even if the object's \f(CW@ISA\fR contained \f(CW\*(C`Foo\*(C'\fR.
.IP "\(bu" 4
Various bugs in the new-to 5.10.0 mro code, triggered by manipulating
\&\f(CW@ISA\fR, have been found and fixed.
.IP "\(bu" 4
Bitwise operations on references could crash the interpreter, e.g.
\&\f(CW\*(C`$x=\e$y; $x |= "foo"\*(C'\fR [\s-1RT\s0 #54956].
.IP "\(bu" 4
Patterns including alternation might be sensitive to the internal \s-1UTF\-8\s0
representation, e.g.
.Sp
.Vb 3
\&    my $byte = chr(192);
\&    my $utf8 = chr(192); utf8::upgrade($utf8);
\&    $utf8 =~ /$byte|X}/i;       # failed in 5.10.0
.Ve
.IP "\(bu" 4
Within UTF8\-encoded Perl source files (i.e. where \f(CW\*(C`use utf8\*(C'\fR is in
effect), double-quoted literal strings could be corrupted where a \f(CW\*(C`\exNN\*(C'\fR,
\&\f(CW\*(C`\e0NNN\*(C'\fR or \f(CW\*(C`\eN{}\*(C'\fR is followed by a literal character with ordinal value
greater than 255 [\s-1RT\s0 #59908].
.IP "\(bu" 4
\&\f(CW\*(C`B::Deparse\*(C'\fR failed to correctly deparse various constructs:
\&\f(CW\*(C`readpipe STRING\*(C'\fR [\s-1RT\s0 #62428], \f(CW\*(C`CORE::require(STRING)\*(C'\fR [\s-1RT\s0 #62488],
\&\f(CW\*(C`sub foo(_)\*(C'\fR [\s-1RT\s0 #62484].
.IP "\(bu" 4
Using \f(CW\*(C`setpgrp\*(C'\fR with no arguments could corrupt the perl stack.
.IP "\(bu" 4
The block form of \f(CW\*(C`eval\*(C'\fR is now specifically trappable by \f(CW\*(C`Safe\*(C'\fR and
\&\f(CW\*(C`ops\*(C'\fR. Previously it was erroneously treated like string \f(CW\*(C`eval\*(C'\fR.
.IP "\(bu" 4
In 5.10.0, the two characters \f(CW\*(C`[~\*(C'\fR were sometimes parsed as the smart
match operator (\f(CW\*(C`~~\*(C'\fR) [\s-1RT\s0 #63854].
.IP "\(bu" 4
In 5.10.0, the \f(CW\*(C`*\*(C'\fR quantifier in patterns was sometimes treated as
\&\f(CW\*(C`{0,32767}\*(C'\fR [\s-1RT\s0 #60034, #60464]. For example, this match would fail:
.Sp
.Vb 1
\&    ("ab" x 32768) =~ /^(ab)*$/
.Ve
.IP "\(bu" 4
\&\f(CW\*(C`shmget\*(C'\fR was limited to a 32 bit segment size on a 64 bit \s-1OS\s0 [\s-1RT\s0 #63924].
.IP "\(bu" 4
Using \f(CW\*(C`next\*(C'\fR or \f(CW\*(C`last\*(C'\fR to exit a \f(CW\*(C`given\*(C'\fR block no longer produces a
spurious warning like the following:
.Sp
.Vb 1
\&    Exiting given via last at foo.pl line 123
.Ve
.IP "\(bu" 4
Assigning a format to a glob could corrupt the format; e.g.:
.Sp
.Vb 1
\&     *bar=*foo{FORMAT}; # foo format now bad
.Ve
.IP "\(bu" 4
Attempting to coerce a typeglob to a string or number could cause an
assertion failure. The correct error message is now generated,
\&\f(CW\*(C`Can\*(Aqt coerce GLOB to \f(CI$type\f(CW\*(C'\fR.
.IP "\(bu" 4
Under \f(CW\*(C`use filetest \*(Aqaccess\*(Aq\*(C'\fR, \f(CW\*(C`\-x\*(C'\fR was using the wrong access
mode. This has been fixed [\s-1RT\s0 #49003].
.IP "\(bu" 4
\&\f(CW\*(C`length\*(C'\fR on a tied scalar that returned a Unicode value would not be
correct the first time. This has been fixed.
.IP "\(bu" 4
Using an array \f(CW\*(C`tie\*(C'\fR inside in array \f(CW\*(C`tie\*(C'\fR could \s-1SEGV.\s0 This has been
fixed. [\s-1RT\s0 #51636]
.IP "\(bu" 4
A race condition inside \f(CW\*(C`PerlIOStdio_close()\*(C'\fR has been identified and
fixed. This used to cause various threading issues, including SEGVs.
.IP "\(bu" 4
In \f(CW\*(C`unpack\*(C'\fR, the use of \f(CW\*(C`()\*(C'\fR groups in scalar context was internally
placing a list on the interpreter's stack, which manifested in various
ways, including SEGVs. This is now fixed [\s-1RT\s0 #50256].
.IP "\(bu" 4
Magic was called twice in \f(CW\*(C`substr\*(C'\fR, \f(CW\*(C`\e&$x\*(C'\fR, \f(CW\*(C`tie $x, $m\*(C'\fR and \f(CW\*(C`chop\*(C'\fR.
These have all been fixed.
.IP "\(bu" 4
A 5.10.0 optimisation to clear the temporary stack within the implicit
loop of \f(CW\*(C`s///ge\*(C'\fR has been reverted, as it turned out to be the cause of
obscure bugs in seemingly unrelated parts of the interpreter [commit
ef0d4e17921ee3de].
.IP "\(bu" 4
The line numbers for warnings inside \f(CW\*(C`elsif\*(C'\fR are now correct.
.IP "\(bu" 4
The \f(CW\*(C`..\*(C'\fR operator now works correctly with ranges whose ends are at or
close to the values of the smallest and largest integers.
.IP "\(bu" 4
\&\f(CW\*(C`binmode STDIN, \*(Aq:raw\*(Aq\*(C'\fR could lead to segmentation faults on some platforms.
This has been fixed [\s-1RT\s0 #54828].
.IP "\(bu" 4
An off-by-one error meant that \f(CW\*(C`index $str, ...\*(C'\fR was effectively being
executed as \f(CW\*(C`index "$str\e0", ...\*(C'\fR. This has been fixed [\s-1RT\s0 #53746].
.IP "\(bu" 4
Various leaks associated with named captures in regexes have been fixed
[\s-1RT\s0 #57024].
.IP "\(bu" 4
A weak reference to a hash would leak. This was affecting \f(CW\*(C`DBI\*(C'\fR
[\s-1RT\s0 #56908].
.IP "\(bu" 4
Using (?|) in a regex could cause a segfault [\s-1RT\s0 #59734].
.IP "\(bu" 4
Use of a \s-1UTF\-8 \s0\f(CW\*(C`tr//\*(C'\fR within a closure could cause a segfault [\s-1RT\s0 #61520].
.IP "\(bu" 4
Calling \f(CW\*(C`Perl_sv_chop()\*(C'\fR or otherwise upgrading an \s-1SV\s0 could result in an
unaligned 64\-bit access on the \s-1SPARC\s0 architecture [\s-1RT\s0 #60574].
.IP "\(bu" 4
In the 5.10.0 release, \f(CW\*(C`inc_version_list\*(C'\fR would incorrectly list
\&\f(CW\*(C`5.10.*\*(C'\fR after \f(CW\*(C`5.8.*\*(C'\fR; this affected the \f(CW@INC\fR search order
[\s-1RT\s0 #67628].
.IP "\(bu" 4
In 5.10.0, \f(CW\*(C`pack "a*", $tainted_value\*(C'\fR returned a non-tainted value
[\s-1RT\s0 #52552].
.IP "\(bu" 4
In 5.10.0, \f(CW\*(C`printf\*(C'\fR and \f(CW\*(C`sprintf\*(C'\fR could produce the fatal error
\&\f(CW\*(C`panic: utf8_mg_pos_cache_update\*(C'\fR when printing \s-1UTF\-8\s0 strings
[\s-1RT\s0 #62666].
.IP "\(bu" 4
In the 5.10.0 release, a dynamically created \f(CW\*(C`AUTOLOAD\*(C'\fR method might be
missed (method cache issue) [\s-1RT\s0 #60220,60232].
.IP "\(bu" 4
In the 5.10.0 release, a combination of \f(CW\*(C`use feature\*(C'\fR and \f(CW\*(C`//ee\*(C'\fR could
cause a memory leak [\s-1RT\s0 #63110].
.IP "\(bu" 4
\&\f(CW\*(C`\-C\*(C'\fR on the shebang (\f(CW\*(C`#!\*(C'\fR) line is once more permitted if it is also
specified on the command line. \f(CW\*(C`\-C\*(C'\fR on the shebang line used to be a
silent no-op \fIif\fR it was not also on the command line, so perl 5.10.0
disallowed it, which broke some scripts. Now perl checks whether it is
also on the command line and only dies if it is not [\s-1RT\s0 #67880].
.IP "\(bu" 4
In 5.10.0, certain types of re-entrant regular expression could crash,
or cause the following assertion failure [\s-1RT\s0 #60508]:
.Sp
.Vb 1
\&    Assertion rx\->sublen >= (s \- rx\->subbeg) + i failed
.Ve
.IP "\(bu" 4
Perl now includes previously missing files from the Unicode Character
Database.
.IP "\(bu" 4
Perl now honors \f(CW\*(C`TMPDIR\*(C'\fR when opening an anonymous temporary file.
.SH "Platform Specific Changes"
.IX Header "Platform Specific Changes"
Perl is incredibly portable. In general, if a platform has a C compiler,
someone has ported Perl to it (or will soon).  We're happy to announce
that Perl 5.12 includes support for several new platforms.  At the same
time, it's time to bid farewell to some (very) old friends.
.SS "New Platforms"
.IX Subsection "New Platforms"
.IP "Haiku" 4
.IX Item "Haiku"
Perl's developers have merged patches from Haiku's maintainers. Perl
should now build on Haiku.
.IP "MirOS \s-1BSD\s0" 4
.IX Item "MirOS BSD"
Perl should now build on MirOS \s-1BSD.\s0
.SS "Discontinued Platforms"
.IX Subsection "Discontinued Platforms"
.IP "Domain/OS" 4
.IX Item "Domain/OS"
.PD 0
.IP "MiNT" 4
.IX Item "MiNT"
.IP "Tenon MachTen" 4
.IX Item "Tenon MachTen"
.PD
.SS "Updated Platforms"
.IX Subsection "Updated Platforms"
.IP "\s-1AIX\s0" 4
.IX Item "AIX"
.RS 4
.PD 0
.IP "\(bu" 4
.PD
Removed \fIlibbsd\fR for \s-1AIX 5L\s0 and 6.1. Only \f(CW\*(C`flock()\*(C'\fR was used from
\&\fIlibbsd\fR.
.IP "\(bu" 4
Removed \fIlibgdbm\fR for \s-1AIX 5L\s0 and 6.1 if \fIlibgdbm\fR < 1.8.3\-5 is
installed.  The \fIlibgdbm\fR is delivered as an optional package with the
\&\s-1AIX\s0 Toolbox.  Unfortunately the versions below 1.8.3\-5 are broken.
.IP "\(bu" 4
Hints changes mean that \s-1AIX 4.2\s0 should work again.
.RE
.RS 4
.RE
.IP "Cygwin" 4
.IX Item "Cygwin"
.RS 4
.PD 0
.IP "\(bu" 4
.PD
Perl now supports IPv6 on Cygwin 1.7 and newer.
.IP "\(bu" 4
On Cygwin we now strip the last number from the \s-1DLL.\s0 This has been the
behaviour in the cygwin.com build for years. The hints files have been
updated.
.RE
.RS 4
.RE
.IP "Darwin (Mac \s-1OS X\s0)" 4
.IX Item "Darwin (Mac OS X)"
.RS 4
.PD 0
.IP "\(bu" 4
.PD
Skip testing the be_BY.CP1131 locale on Darwin 10 (Mac \s-1OS X 10.6\s0),
as it's still buggy.
.IP "\(bu" 4
Correct infelicities in the regexp used to identify buggy locales
on Darwin 8 and 9 (Mac \s-1OS X 10.4\s0 and 10.5, respectively).
.RE
.RS 4
.RE
.IP "DragonFly \s-1BSD\s0" 4
.IX Item "DragonFly BSD"
.RS 4
.PD 0
.IP "\(bu" 4
.PD
Fix thread library selection [perl #69686]
.RE
.RS 4
.RE
.IP "FreeBSD" 4
.IX Item "FreeBSD"
.RS 4
.PD 0
.IP "\(bu" 4
.PD
The hints files now identify the correct threading libraries on FreeBSD 7
and later.
.RE
.RS 4
.RE
.IP "Irix" 4
.IX Item "Irix"
.RS 4
.PD 0
.IP "\(bu" 4
.PD
We now work around a bizarre preprocessor bug in the Irix 6.5 compiler:
\&\f(CW\*(C`cc \-E \-\*(C'\fR unfortunately goes into K&R mode, but \f(CW\*(C`cc \-E file.c\*(C'\fR doesn't.
.RE
.RS 4
.RE
.IP "NetBSD" 4
.IX Item "NetBSD"
.RS 4
.PD 0
.IP "\(bu" 4
.PD
Hints now supports versions 5.*.
.RE
.RS 4
.RE
.IP "OpenVMS" 4
.IX Item "OpenVMS"
.RS 4
.PD 0
.IP "\(bu" 4
.PD
\&\f(CW\*(C`\-UDEBUGGING\*(C'\fR is now the default on \s-1VMS.\s0
.Sp
Like it has been everywhere else for ages and ages. Also make command-line
selection of \-UDEBUGGING and \-DDEBUGGING work in configure.com; before
the only way to turn it off was by saying no in answer to the interactive
question.
.IP "\(bu" 4
The default pipe buffer size on \s-1VMS\s0 has been updated to 8192 on 64\-bit
systems.
.IP "\(bu" 4
Reads from the in-memory temporary files of \f(CW\*(C`PerlIO::scalar\*(C'\fR used to fail
if \f(CW$/\fR was set to a numeric reference (to indicate record-style reads).
This is now fixed.
.IP "\(bu" 4
\&\s-1VMS\s0 now supports \f(CW\*(C`getgrgid\*(C'\fR.
.IP "\(bu" 4
Many improvements and cleanups have been made to the \s-1VMS\s0 file name handling
and conversion code.
.IP "\(bu" 4
Enabling the \f(CW\*(C`PERL_VMS_POSIX_EXIT\*(C'\fR logical name now encodes a \s-1POSIX\s0 exit
status in a \s-1VMS\s0 condition value for better interaction with \s-1GNV\s0's bash
shell and other utilities that depend on \s-1POSIX\s0 exit values. See
\&\*(L"$?\*(R" in perlvms for details.
.IP "\(bu" 4
\&\f(CW\*(C`File::Copy\*(C'\fR now detects Unix compatibility mode on \s-1VMS.\s0
.RE
.RS 4
.RE
.IP "Stratus \s-1VOS\s0" 4
.IX Item "Stratus VOS"
.RS 4
.PD 0
.IP "\(bu" 4
.PD
Various changes from Stratus have been merged in.
.RE
.RS 4
.RE
.IP "Symbian" 4
.IX Item "Symbian"
.RS 4
.PD 0
.IP "\(bu" 4
.PD
There is now support for Symbian S60 3.2 \s-1SDK\s0 and S60 5.0 \s-1SDK.\s0
.RE
.RS 4
.RE
.IP "Windows" 4
.IX Item "Windows"
.RS 4
.PD 0
.IP "\(bu" 4
.PD
Perl 5.12 supports Windows 2000 and later. The supporting code for
legacy versions of Windows is still included, but will be removed
during the next development cycle.
.IP "\(bu" 4
Initial support for building Perl with MinGW\-w64 is now available.
.IP "\(bu" 4
\&\fIperl.exe\fR now includes a manifest resource to specify the \f(CW\*(C`trustInfo\*(C'\fR
settings for Windows Vista and later. Without this setting Windows
would treat \fIperl.exe\fR as a legacy application and apply various
heuristics like redirecting access to protected file system areas
(like the \*(L"Program Files\*(R" folder) to the users \*(L"VirtualStore\*(R"
instead of generating a proper \*(L"permission denied\*(R" error.
.Sp
The manifest resource also requests the Microsoft Common-Controls
version 6.0 (themed controls introduced in Windows \s-1XP\s0).  Check out the
Win32::VisualStyles module on \s-1CPAN\s0 to switch back to old style
unthemed controls for legacy applications.
.IP "\(bu" 4
The \f(CW\*(C`\-t\*(C'\fR filetest operator now only returns true if the filehandle
is connected to a console window.  In previous versions of Perl it
would return true for all character mode devices, including \fI\s-1NUL\s0\fR
and \fI\s-1LPT1\s0\fR.
.IP "\(bu" 4
The \f(CW\*(C`\-p\*(C'\fR filetest operator now works correctly, and the
Fcntl::S_IFIFO constant is defined when Perl is compiled with
Microsoft Visual C.  In previous Perl versions \f(CW\*(C`\-p\*(C'\fR always
returned a false value, and the Fcntl::S_IFIFO constant
was not defined.
.Sp
This bug is specific to Microsoft Visual C and never affected
Perl binaries built with MinGW.
.IP "\(bu" 4
The socket error codes are now more widely supported:  The \s-1POSIX\s0
module will define the symbolic names, like \s-1POSIX::EWOULDBLOCK,\s0
and stringification of socket error codes in $! works as well
now;
.Sp
.Vb 2
\&  C:\e>perl \-MPOSIX \-E "$!=POSIX::EWOULDBLOCK; say $!"
\&  A non\-blocking socket operation could not be completed immediately.
.Ve
.IP "\(bu" 4
\&\fIflock()\fR will now set sensible error codes in $!.  Previous Perl versions
copied the value of $^E into $!, which caused much confusion.
.IP "\(bu" 4
\&\fIselect()\fR now supports all empty \f(CW\*(C`fd_set\*(C'\fRs more correctly.
.IP "\(bu" 4
\&\f(CW\*(Aq.\efoo\*(Aq\fR and \f(CW\*(Aq..\efoo\*(Aq\fR  were treated differently than
\&\f(CW\*(Aq./foo\*(Aq\fR and \f(CW\*(Aq../foo\*(Aq\fR by \f(CW\*(C`do\*(C'\fR and \f(CW\*(C`require\*(C'\fR [\s-1RT\s0 #63492].
.IP "\(bu" 4
Improved message window handling means that \f(CW\*(C`alarm\*(C'\fR and \f(CW\*(C`kill\*(C'\fR messages
will no longer be dropped under race conditions.
.IP "\(bu" 4
Various bits of Perl's build infrastructure are no longer converted to
win32 line endings at release time. If this hurts you, please report the
problem with the perlbug program included with perl.
.RE
.RS 4
.RE
.SH "Known Problems"
.IX Header "Known Problems"
This is a list of some significant unfixed bugs, which are regressions
from either 5.10.x or 5.8.x.
.IP "\(bu" 4
Some \s-1CPANPLUS\s0 tests may fail if there is a functioning file
\&\fI../../cpanp\-run\-perl\fR outside your build directory. The failure
shouldn't imply there's a problem with the actual functional
software. The bug is already fixed in [\s-1RT\s0 #74188] and is scheduled for
inclusion in perl\-v5.12.1.
.IP "\(bu" 4
\&\f(CW\*(C`List::Util::first\*(C'\fR misbehaves in the presence of a lexical \f(CW$_\fR
(typically introduced by \f(CW\*(C`my $_\*(C'\fR or implicitly by \f(CW\*(C`given\*(C'\fR). The variable
which gets set for each iteration is the package variable \f(CW$_\fR, not the
lexical \f(CW$_\fR [\s-1RT\s0 #67694].
.Sp
A similar issue may occur in other modules that provide functions which
take a block as their first argument, like
.Sp
.Vb 1
\&    foo { ... $_ ...} list
.Ve
.IP "\(bu" 4
Some regexes may run much more slowly when run in a child thread compared
with the thread the pattern was compiled into [\s-1RT\s0 #55600].
.IP "\(bu" 4
Things like \f(CW\*(C`"\eN{LATIN SMALL LIGATURE FF}" =~ /\eN{LATIN SMALL LETTER F}+/\*(C'\fR
will appear to hang as they get into a very long running loop [\s-1RT\s0 #72998].
.IP "\(bu" 4
Several porters have reported mysterious crashes when Perl's entire
test suite is run after a build on certain Windows 2000 systems. When
run by hand, the individual tests reportedly work fine.
.SH "Errata"
.IX Header "Errata"
.IP "\(bu" 4
This one is actually a change introduced in 5.10.0, but it was missed
from that release's perldelta, so it is mentioned here instead.
.Sp
A bugfix related to the handling of the \f(CW\*(C`/m\*(C'\fR modifier and \f(CW\*(C`qr\*(C'\fR resulted
in a change of behaviour between 5.8.x and 5.10.0:
.Sp
.Vb 2
\&    # matches in 5.8.x, doesn\*(Aqt match in 5.10.0
\&    $re = qr/^bar/; "foo\enbar" =~ /$re/m;
.Ve
.SH "Acknowledgements"
.IX Header "Acknowledgements"
Perl 5.12.0 represents approximately two years of development since
Perl 5.10.0 and contains over 750,000 lines of changes across over
3,000 files from over 200 authors and committers.
.PP
Perl continues to flourish into its third decade thanks to a vibrant
community of users and developers.  The following people are known to
have contributed the improvements that became Perl 5.12.0:
.PP
Aaron Crane, Abe Timmerman, Abhijit Menon-Sen, Abigail, Adam Russell,
Adriano Ferreira, \*(Aevar Arnfjo\*:r\*(d- Bjarmason, Alan Grover, Alexandr
Ciornii, Alex Davies, Alex Vandiver, Andreas Koenig, Andrew Rodland,
andrew@sundale.net, Andy Armstrong, Andy Dougherty, Jose AUGUSTE-ETIENNE,
Benjamin Smith, Ben Morrow, bharanee rathna, Bo Borgerson, Bo Lindbergh,
Brad Gilbert, Bram, Brendan O'Dea, brian d foy, Charles Bailey,
Chip Salzenberg, Chris 'BinGOs' Williams, Christoph Lamprecht, Chris
Williams, chromatic, Claes Jakobsson, Craig A. Berry, Dan Dascalescu,
Daniel Frederick Crisman, Daniel M. Quinlan, Dan Jacobson, Dan Kogai,
Dave Mitchell, Dave Rolsky, David Cantrell, David Dick, David Golden,
David Mitchell, David M. Syzdek, David Nicol, David Wheeler, Dennis
Kaarsemaker, Dintelmann, Peter, Dominic Dunlop, Dr.Ruud, Duke Leto,
Enrico Sorcinelli, Eric Brine, Father Chrysostomos, Florian Ragwitz,
Frank Wiegand, Gabor Szabo, Gene Sullivan, Geoffrey T. Dairiki, George
Greer, Gerard Goossen, Gisle Aas, Goro Fuji, Graham Barr, Green, Paul,
Hans Dieter Pearcey, Harmen, H. Merijn Brand, Hugo van der Sanden,
Ian Goodacre, Igor Sutton, Ingo Weinhold, James Bence, James Mastros,
Jan Dubois, Jari Aalto, Jarkko Hietaniemi, Jay Hannah, Jerry Hedden,
Jesse Vincent, Jim Cromie, Jody Belka, John E. Malmberg, John Malmberg,
John Peacock, John Peacock via \s-1RT,\s0 John P. Linderman, John Wright,
Josh ben Jore, Jos I. Boumans, Karl Williamson, Kenichi Ishigaki, Ken
Williams, Kevin Brintnall, Kevin Ryde, Kurt Starsinic, Leon Brocard,
Lubomir Rintel, Luke Ross, Marcel Gru\*:nauer, Marcus Holland-Moritz, Mark
Jason Dominus, Marko Asplund, Martin Hasch, Mashrab Kuvatov, Matt Kraai,
Matt S Trout, Max Maischein, Michael Breen, Michael Cartmell, Michael
G Schwern, Michael Witten, Mike Giroux, Milosz Tanski, Moritz Lenz,
Nicholas Clark, Nick Cleaton, Niko Tyni, Offer Kaye, Osvaldo Villalon,
Paul Fenwick, Paul Gaborit, Paul Green, Paul Johnson, Paul Marquess,
Philip Hazel, Philippe Bruhat, Rafael Garcia-Suarez, Rainer Tammer,
Rajesh Mandalemula, Reini Urban, Rene\*'e Ba\*:cker, Ricardo Signes,
Ricardo \s-1SIGNES,\s0 Richard Foley, Rich Rauenzahn, Rick Delaney, Risto
Kankkunen, Robert May, Roberto C. Sanchez, Robin Barker, \s-1SADAHIRO\s0
Tomoyuki, Salvador Ortiz Garcia, Sam Vilain, Scott Lanning, Se\*'bastien
Aperghis-Tramoni, Se\*'rgio Durigan Ju\*'nior, Shlomi Fish, Simon 'corecode'
Schubert, Sisyphus, Slaven Rezic, Smylers, Steffen Mu\*:ller, Steffen
Ullrich, Stepan Kasal, Steve Hay, Steven Schubiger, Steve Peters, Tels,
The Doctor, Tim Bunce, Tim Jenness, Todd Rinaldo, Tom Christiansen,
Tom Hukins, Tom Wyant, Tony Cook, Torsten Schoenfeld, Tye McQueen,
Vadim Konovalov, Vincent Pit, Hio \s-1YAMASHINA,\s0 Yasuhiro Matsumoto,
Yitzchak Scott-Thoennes, Yuval Kogman, Yves Orton, Zefram, Zsban Ambrus
.PP
This is woefully incomplete as it's automatically generated from version
control history.  In particular, it doesn't include the names of the
(very much appreciated) contributors who reported issues in previous
versions of Perl that helped make Perl 5.12.0 better. For a more complete
list of all of Perl's historical contributors, please see the \f(CW\*(C`AUTHORS\*(C'\fR
file in the Perl 5.12.0 distribution.
.PP
Our \*(L"retired\*(R" pumpkings Nicholas Clark and Rafael Garcia-Suarez
deserve special thanks for their brilliant and substantive ongoing
contributions. Nicholas personally authored over 30% of the patches
since 5.10.0. Rafael comes in second in patch authorship with 11%,
but is first by a long shot in committing patches authored by others,
pushing 44% of the commits since 5.10.0 in this category, often after
providing considerable coaching to the patch authors. These statistics
in no way comprise all of their contributions, but express in shorthand
that we couldn't have done it without them.
.PP
Many of the changes included in this version originated in the \s-1CPAN\s0
modules included in Perl's core. We're grateful to the entire \s-1CPAN\s0
community for helping Perl to flourish.
.SH "Reporting Bugs"
.IX Header "Reporting Bugs"
If you find what you think is a bug, you might check the articles
recently posted to the comp.lang.perl.misc newsgroup and the perl
bug database at <http://rt.perl.org/perlbug/>. There may also be
information at <http://www.perl.org/>, the Perl Home Page.
.PP
If you believe you have an unreported bug, please run the \fBperlbug\fR
program included with your release. Be sure to trim your bug down
to a tiny but sufficient test case. Your bug report, along with the
output of \f(CW\*(C`perl \-V\*(C'\fR, will be sent off to perlbug@perl.org to be
analyzed by the Perl porting team.
.PP
If the bug you are reporting has security implications, which make it
inappropriate to send to a publicly archived mailing list, then please send
it to perl5\-security\-report@perl.org. This points to a closed subscription
unarchived mailing list, which includes
all the core committers, who will be able
to help assess the impact of issues, figure out a resolution, and help
co-ordinate the release of patches to mitigate or fix the problem across all
platforms on which Perl is supported. Please only use this address for
security issues in the Perl core, not for modules independently
distributed on \s-1CPAN.\s0
.SH "SEE ALSO"
.IX Header "SEE ALSO"
The \fIChanges\fR file for an explanation of how to view exhaustive details
on what changed.
.PP
The \fI\s-1INSTALL\s0\fR file for how to build Perl.
.PP
The \fI\s-1README\s0\fR file for general stuff.
.PP
The \fIArtistic\fR and \fICopying\fR files for copyright information.
.PP
<http://dev.perl.org/perl5/errata.html> for a list of issues
found after this release, as well as a list of \s-1CPAN\s0 modules known
to be incompatible with this release.
                                                                                                                                                                                                                                                                                                                                                                            osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perl5120delta5.16.1                          0100644 0001750 0001750 00000345014 12566207412 023542  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERL5120DELTA 1"
.TH PERL5120DELTA 1 "2013-03-04" "perl v5.16.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perl5120delta \- what is new for perl v5.12.0
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document describes differences between the 5.10.0 release and the
5.12.0 release.
.PP
Many of the bug fixes in 5.12.0 are already included in the 5.10.1
maintenance release.
.PP
You can see the list of those changes in the 5.10.1 release notes
(perl5101delta).
.SH "Core Enhancements"
.IX Header "Core Enhancements"
.ie n .SS "New ""package NAME VERSION"" syntax"
.el .SS "New \f(CWpackage NAME VERSION\fP syntax"
.IX Subsection "New package NAME VERSION syntax"
This new syntax allows a module author to set the \f(CW$VERSION\fR of a namespace
when the namespace is declared with 'package'. It eliminates the need
for \f(CW\*(C`our $VERSION = ...\*(C'\fR and similar constructs. E.g.
.PP
.Vb 2
\&      package Foo::Bar 1.23;
\&      # $Foo::Bar::VERSION == 1.23
.Ve
.PP
There are several advantages to this:
.IP "\(bu" 4
\&\f(CW$VERSION\fR is parsed in exactly the same way as \f(CW\*(C`use NAME VERSION\*(C'\fR
.IP "\(bu" 4
\&\f(CW$VERSION\fR is set at compile time
.IP "\(bu" 4
\&\f(CW$VERSION\fR is a version object that provides proper overloading of
comparison operators so comparing \f(CW$VERSION\fR to decimal (1.23) or
dotted-decimal (v1.2.3) version numbers works correctly.
.IP "\(bu" 4
Eliminates \f(CW\*(C`$VERSION = ...\*(C'\fR and \f(CW\*(C`eval $VERSION\*(C'\fR clutter
.IP "\(bu" 4
As it requires \s-1VERSION\s0 to be a numeric literal or v\-string
literal, it can be statically parsed by toolchain modules
without \f(CW\*(C`eval\*(C'\fR the way \s-1MM\-\s0>parse_version does for \f(CW\*(C`$VERSION = ...\*(C'\fR
.PP
It does not break old code with only \f(CW\*(C`package NAME\*(C'\fR, but code that uses
\&\f(CW\*(C`package NAME VERSION\*(C'\fR will need to be restricted to perl 5.12.0 or newer
This is analogous to the change to \f(CW\*(C`open\*(C'\fR from two-args to three-args.
Users requiring the latest Perl will benefit, and perhaps after several
years, it will become a standard practice.
.PP
However, \f(CW\*(C`package NAME VERSION\*(C'\fR requires a new, 'strict' version
number format. See \*(L"Version number formats\*(R" for details.
.ie n .SS "The ""..."" operator"
.el .SS "The \f(CW...\fP operator"
.IX Subsection "The ... operator"
A new operator, \f(CW\*(C`...\*(C'\fR, nicknamed the Yada Yada operator, has been added.
It is intended to mark placeholder code that is not yet implemented.
See \*(L"Yada Yada Operator\*(R" in perlop.
.SS "Implicit strictures"
.IX Subsection "Implicit strictures"
Using the \f(CW\*(C`use VERSION\*(C'\fR syntax with a version number greater or equal
to 5.11.0 will lexically enable strictures just like \f(CW\*(C`use strict\*(C'\fR
would do (in addition to enabling features.) The following:
.PP
.Vb 1
\&    use 5.12.0;
.Ve
.PP
means:
.PP
.Vb 2
\&    use strict;
\&    use feature \*(Aq:5.12\*(Aq;
.Ve
.SS "Unicode improvements"
.IX Subsection "Unicode improvements"
Perl 5.12 comes with Unicode 5.2, the latest version available to
us at the time of release.  This version of Unicode was released in
October 2009. See <http://www.unicode.org/versions/Unicode5.2.0> for
further details about what's changed in this version of the standard.
See perlunicode for instructions on installing and using other versions
of Unicode.
.PP
Additionally, Perl's developers have significantly improved Perl's Unicode
implementation. For full details, see \*(L"Unicode overhaul\*(R" below.
.SS "Y2038 compliance"
.IX Subsection "Y2038 compliance"
Perl's core time-related functions are now Y2038 compliant. (It may not mean much to you, but your kids will love it!)
.SS "qr overloading"
.IX Subsection "qr overloading"
It is now possible to overload the \f(CW\*(C`qr//\*(C'\fR operator, that is,
conversion to regexp, like it was already possible to overload
conversion to boolean, string or number of objects. It is invoked when
an object appears on the right hand side of the \f(CW\*(C`=~\*(C'\fR operator or when
it is interpolated into a regexp. See overload.
.SS "Pluggable keywords"
.IX Subsection "Pluggable keywords"
Extension modules can now cleanly hook into the Perl parser to define
new kinds of keyword-headed expression and compound statement. The
syntax following the keyword is defined entirely by the extension. This
allow a completely non-Perl sublanguage to be parsed inline, with the
correct ops cleanly generated.
.PP
See \*(L"PL_keyword_plugin\*(R" in perlapi for the mechanism. The Perl core
source distribution also includes a new module
XS::APItest::KeywordRPN, which implements reverse Polish notation
arithmetic via pluggable keywords. This module is mainly used for test
purposes, and is not normally installed, but also serves as an example
of how to use the new mechanism.
.PP
Perl's developers consider this feature to be experimental. We may remove
it or change it in a backwards-incompatible way in Perl 5.14.
.SS "APIs for more internals"
.IX Subsection "APIs for more internals"
The lowest layers of the lexer and parts of the pad system now have C
APIs available to \s-1XS\s0 extensions. These are necessary to support proper
use of pluggable keywords, but have other uses too. The new APIs are
experimental, and only cover a small proportion of what would be
necessary to take full advantage of the core's facilities in these
areas. It is intended that the Perl 5.13 development cycle will see the
addition of a full range of clean, supported interfaces.
.PP
Perl's developers consider this feature to be experimental. We may remove
it or change it in a backwards-incompatible way in Perl 5.14.
.SS "Overridable function lookup"
.IX Subsection "Overridable function lookup"
Where an extension module hooks the creation of rv2cv ops to modify the
subroutine lookup process, this now works correctly for bareword
subroutine calls. This means that prototypes on subroutines referenced
this way will be processed correctly. (Previously bareword subroutine
names were initially looked up, for parsing purposes, by an unhookable
mechanism, so extensions could only properly influence subroutine names
that appeared with an \f(CW\*(C`&\*(C'\fR sigil.)
.SS "A proper interface for pluggable Method Resolution Orders"
.IX Subsection "A proper interface for pluggable Method Resolution Orders"
As of Perl 5.12.0 there is a new interface for plugging and using method
resolution orders other than the default linear depth first search.
The C3 method resolution order added in 5.10.0 has been re-implemented as
a plugin, without changing its Perl-space interface. See perlmroapi for
more information.
.ie n .SS """\eN"" experimental regex escape"
.el .SS "\f(CW\eN\fP experimental regex escape"
.IX Subsection "N experimental regex escape"
Perl now supports \f(CW\*(C`\eN\*(C'\fR, a new regex escape which you can think of as
the inverse of \f(CW\*(C`\en\*(C'\fR. It will match any character that is not a newline,
independently from the presence or absence of the single line match
modifier \f(CW\*(C`/s\*(C'\fR. It is not usable within a character class.  \f(CW\*(C`\eN{3}\*(C'\fR
means to match 3 non-newlines; \f(CW\*(C`\eN{5,}\*(C'\fR means to match at least 5.
\&\f(CW\*(C`\eN{NAME}\*(C'\fR still means the character or sequence named \f(CW\*(C`NAME\*(C'\fR, but
\&\f(CW\*(C`NAME\*(C'\fR no longer can be things like \f(CW3\fR, or \f(CW\*(C`5,\*(C'\fR.
.PP
This will break a custom charnames translator which allows numbers for character names, as \f(CW\*(C`\eN{3}\*(C'\fR will
now mean to match 3 non-newline characters, and not the character whose
name is \f(CW3\fR. (No name defined by the Unicode standard is a number,
so only custom translators might be affected.)
.PP
Perl's developers are somewhat concerned about possible user confusion
with the existing \f(CW\*(C`\eN{...}\*(C'\fR construct which matches characters by their
Unicode name. Consequently, this feature is experimental. We may remove
it or change it in a backwards-incompatible way in Perl 5.14.
.SS "DTrace support"
.IX Subsection "DTrace support"
Perl now has some support for DTrace. See \*(L"DTrace support\*(R" in \fI\s-1INSTALL\s0\fR.
.ie n .SS "Support for ""configure_requires"" in \s-1CPAN\s0 module metadata"
.el .SS "Support for \f(CWconfigure_requires\fP in \s-1CPAN\s0 module metadata"
.IX Subsection "Support for configure_requires in CPAN module metadata"
Both \f(CW\*(C`CPAN\*(C'\fR and \f(CW\*(C`CPANPLUS\*(C'\fR now support the \f(CW\*(C`configure_requires\*(C'\fR
keyword in the \fI\s-1META\s0.yml\fR metadata file included in most recent \s-1CPAN\s0
distributions.  This allows distribution authors to specify configuration
prerequisites that must be installed before running \fIMakefile.PL\fR
or \fIBuild.PL\fR.
.PP
See the documentation for \f(CW\*(C`ExtUtils::MakeMaker\*(C'\fR or \f(CW\*(C`Module::Build\*(C'\fR for
more on how to specify \f(CW\*(C`configure_requires\*(C'\fR when creating a distribution
for \s-1CPAN\s0.
.ie n .SS """each"", ""keys"", ""values"" are now more flexible"
.el .SS "\f(CWeach\fP, \f(CWkeys\fP, \f(CWvalues\fP are now more flexible"
.IX Subsection "each, keys, values are now more flexible"
The \f(CW\*(C`each\*(C'\fR, \f(CW\*(C`keys\*(C'\fR, \f(CW\*(C`values\*(C'\fR function can now operate on arrays.
.ie n .SS """when"" as a statement modifier"
.el .SS "\f(CWwhen\fP as a statement modifier"
.IX Subsection "when as a statement modifier"
\&\f(CW\*(C`when\*(C'\fR is now allowed to be used as a statement modifier.
.ie n .SS "$, flexibility"
.el .SS "\f(CW$,\fP flexibility"
.IX Subsection "$, flexibility"
The variable \f(CW$,\fR may now be tied.
.SS "// in when clauses"
.IX Subsection "// in when clauses"
// now behaves like || in when clauses
.SS "Enabling warnings from your shell environment"
.IX Subsection "Enabling warnings from your shell environment"
You can now set \f(CW\*(C`\-W\*(C'\fR from the \f(CW\*(C`PERL5OPT\*(C'\fR environment variable
.ie n .SS """delete local"""
.el .SS "\f(CWdelete local\fP"
.IX Subsection "delete local"
\&\f(CW\*(C`delete local\*(C'\fR now allows you to locally delete a hash entry.
.SS "New support for Abstract namespace sockets"
.IX Subsection "New support for Abstract namespace sockets"
Abstract namespace sockets are Linux-specific socket type that live in
\&\s-1AF_UNIX\s0 family, slightly abusing it to be able to use arbitrary
character arrays as addresses: They start with nul byte and are not
terminated by nul byte, but with the length passed to the \fIsocket()\fR
system call.
.SS "32\-bit limit on substr arguments removed"
.IX Subsection "32-bit limit on substr arguments removed"
The 32\-bit limit on \f(CW\*(C`substr\*(C'\fR arguments has now been removed. The full
range of the system's signed and unsigned integers is now available for
the \f(CW\*(C`pos\*(C'\fR and \f(CW\*(C`len\*(C'\fR arguments.
.SH "Potentially Incompatible Changes"
.IX Header "Potentially Incompatible Changes"
.SS "Deprecations warn by default"
.IX Subsection "Deprecations warn by default"
Over the years, Perl's developers have deprecated a number of language
features for a variety of reasons.  Perl now defaults to issuing a
warning if a deprecated language feature is used. Many of the deprecations
Perl now warns you about have been deprecated for many years.  You can
find a list of what was deprecated in a given release of Perl in the
\&\f(CW\*(C`perl5xxdelta.pod\*(C'\fR file for that release.
.PP
To disable this feature in a given lexical scope, you should use \f(CW\*(C`no
warnings \*(Aqdeprecated\*(Aq;\*(C'\fR For information about which language features
are deprecated and explanations of various deprecation warnings, please
see perldiag. See \*(L"Deprecations\*(R" below for the list of features
and modules Perl's developers have deprecated as part of this release.
.SS "Version number formats"
.IX Subsection "Version number formats"
Acceptable version number formats have been formalized into \*(L"strict\*(R" and
\&\*(L"lax\*(R" rules. \f(CW\*(C`package NAME VERSION\*(C'\fR takes a strict version number.
\&\f(CW\*(C`UNIVERSAL::VERSION\*(C'\fR and the version object constructors take lax
version numbers. Providing an invalid version will result in a fatal
error. The version argument in \f(CW\*(C`use NAME VERSION\*(C'\fR is first parsed as a
numeric literal or v\-string and then passed to \f(CW\*(C`UNIVERSAL::VERSION\*(C'\fR
(and must then pass the \*(L"lax\*(R" format test).
.PP
These formats are documented fully in the version module. To a first
approximation, a \*(L"strict\*(R" version number is a positive decimal number
(integer or decimal-fraction) without exponentiation or else a
dotted-decimal v\-string with a leading 'v' character and at least three
components. A \*(L"lax\*(R" version number allows v\-strings with fewer than
three components or without a leading 'v'. Under \*(L"lax\*(R" rules, both
decimal and dotted-decimal versions may have a trailing \*(L"alpha\*(R"
component separated by an underscore character after a fractional or
dotted-decimal component.
.PP
The version module adds \f(CW\*(C`version::is_strict\*(C'\fR and \f(CW\*(C`version::is_lax\*(C'\fR
functions to check a scalar against these rules.
.ie n .SS "@INC reorganization"
.el .SS "\f(CW@INC\fP reorganization"
.IX Subsection "@INC reorganization"
In \f(CW@INC\fR, \f(CW\*(C`ARCHLIB\*(C'\fR and \f(CW\*(C`PRIVLIB\*(C'\fR now occur after after the current
version's \f(CW\*(C`site_perl\*(C'\fR and \f(CW\*(C`vendor_perl\*(C'\fR.  Modules installed into
\&\f(CW\*(C`site_perl\*(C'\fR and \f(CW\*(C`vendor_perl\*(C'\fR will now be loaded in preference to
those installed in \f(CW\*(C`ARCHLIB\*(C'\fR and \f(CW\*(C`PRIVLIB\*(C'\fR.
.SS "REGEXPs are now first class"
.IX Subsection "REGEXPs are now first class"
Internally, Perl now treats compiled regular expressions (such as
those created with \f(CW\*(C`qr//\*(C'\fR) as first class entities. Perl modules which
serialize, deserialize or otherwise have deep interaction with Perl's
internal data structures need to be updated for this change.  Most
affected \s-1CPAN\s0 modules have already been updated as of this writing.
.SS "Switch statement changes"
.IX Subsection "Switch statement changes"
The \f(CW\*(C`given\*(C'\fR/\f(CW\*(C`when\*(C'\fR switch statement handles complex statements better
than Perl 5.10.0 did (These enhancements are also available in
5.10.1 and subsequent 5.10 releases.) There are two new cases where
\&\f(CW\*(C`when\*(C'\fR now interprets its argument as a boolean, instead of an
expression to be used in a smart match:
.IP "flip-flop operators" 4
.IX Item "flip-flop operators"
The \f(CW\*(C`..\*(C'\fR and \f(CW\*(C`...\*(C'\fR flip-flop operators are now evaluated in boolean
context, following their usual semantics; see \*(L"Range Operators\*(R" in perlop.
.Sp
Note that, as in perl 5.10.0, \f(CW\*(C`when (1..10)\*(C'\fR will not work to test
whether a given value is an integer between 1 and 10; you should use
\&\f(CW\*(C`when ([1..10])\*(C'\fR instead (note the array reference).
.Sp
However, contrary to 5.10.0, evaluating the flip-flop operators in
boolean context ensures it can now be useful in a \f(CW\*(C`when()\*(C'\fR, notably
for implementing bistable conditions, like in:
.Sp
.Vb 3
\&    when (/^=begin/ .. /^=end/) {
\&      # do something
\&    }
.Ve
.IP "defined-or operator" 4
.IX Item "defined-or operator"
A compound expression involving the defined-or operator, as in
\&\f(CW\*(C`when (expr1 // expr2)\*(C'\fR, will be treated as boolean if the first
expression is boolean. (This just extends the existing rule that applies
to the regular or operator, as in \f(CW\*(C`when (expr1 || expr2)\*(C'\fR.)
.SS "Smart match changes"
.IX Subsection "Smart match changes"
Since Perl 5.10.0, Perl's developers have made a number of changes to
the smart match operator. These, of course, also alter the behaviour
of the switch statements where smart matching is implicitly used.
These changes were also made for the 5.10.1 release, and will remain in
subsequent 5.10 releases.
.PP
\fIChanges to type-based dispatch\fR
.IX Subsection "Changes to type-based dispatch"
.PP
The smart match operator \f(CW\*(C`~~\*(C'\fR is no longer commutative. The behaviour of
a smart match now depends primarily on the type of its right hand
argument. Moreover, its semantics have been adjusted for greater
consistency or usefulness in several cases. While the general backwards
compatibility is maintained, several changes must be noted:
.IP "\(bu" 4
Code references with an empty prototype are no longer treated specially.
They are passed an argument like the other code references (even if they
choose to ignore it).
.IP "\(bu" 4
\&\f(CW\*(C`%hash ~~ sub {}\*(C'\fR and \f(CW\*(C`@array ~~ sub {}\*(C'\fR now test that the subroutine
returns a true value for each key of the hash (or element of the
array), instead of passing the whole hash or array as a reference to
the subroutine.
.IP "\(bu" 4
Due to the commutativity breakage, code references are no longer
treated specially when appearing on the left of the \f(CW\*(C`~~\*(C'\fR operator,
but like any vulgar scalar.
.IP "\(bu" 4
\&\f(CW\*(C`undef ~~ %hash\*(C'\fR is always false (since \f(CW\*(C`undef\*(C'\fR can't be a key in a
hash). No implicit conversion to \f(CW""\fR is done (as was the case in perl
5.10.0).
.IP "\(bu" 4
\&\f(CW\*(C`$scalar ~~ @array\*(C'\fR now always distributes the smart match across the
elements of the array. It's true if one element in \f(CW@array\fR verifies
\&\f(CW\*(C`$scalar ~~ $element\*(C'\fR. This is a generalization of the old behaviour
that tested whether the array contained the scalar.
.PP
The full dispatch table for the smart match operator is given in
\&\*(L"Smart matching in detail\*(R" in perlsyn.
.PP
\fISmart match and overloading\fR
.IX Subsection "Smart match and overloading"
.PP
According to the rule of dispatch based on the rightmost argument type,
when an object overloading \f(CW\*(C`~~\*(C'\fR appears on the right side of the
operator, the overload routine will always be called (with a 3rd argument
set to a true value, see overload.) However, when the object will
appear on the left, the overload routine will be called only when the
rightmost argument is a simple scalar. This way, distributivity of smart
match across arrays is not broken, as well as the other behaviours with
complex types (coderefs, hashes, regexes). Thus, writers of overloading
routines for smart match mostly need to worry only with comparing
against a scalar, and possibly with stringification overloading; the
other common cases will be automatically handled consistently.
.PP
\&\f(CW\*(C`~~\*(C'\fR will now refuse to work on objects that do not overload it (in order
to avoid relying on the object's underlying structure). (However, if the
object overloads the stringification or the numification operators, and
if overload fallback is active, it will be used instead, as usual.)
.SS "Other potentially incompatible changes"
.IX Subsection "Other potentially incompatible changes"
.IP "\(bu" 4
The definitions of a number of Unicode properties have changed to match
those of the current Unicode standard. These are listed above under
\&\*(L"Unicode overhaul\*(R". This change may break code that expects the old
definitions.
.IP "\(bu" 4
The boolkeys op has moved to the group of hash ops. This breaks binary
compatibility.
.IP "\(bu" 4
Filehandles are now always blessed into \f(CW\*(C`IO::File\*(C'\fR.
.Sp
The previous behaviour was to bless Filehandles into FileHandle
(an empty proxy class) if it was loaded into memory and otherwise
to bless them into \f(CW\*(C`IO::Handle\*(C'\fR.
.IP "\(bu" 4
The semantics of \f(CW\*(C`use feature :5.10*\*(C'\fR have changed slightly.
See \*(L"Modules and Pragmata\*(R" for more information.
.IP "\(bu" 4
Perl's developers now use git, rather than Perforce.  This should be
a purely internal change only relevant to people actively working on
the core.  However, you may see minor difference in perl as a consequence
of the change.  For example in some of details of the output of \f(CW\*(C`perl
\&\-V\*(C'\fR. See perlrepository for more information.
.IP "\(bu" 4
As part of the \f(CW\*(C`Test::Harness\*(C'\fR 2.x to 3.x upgrade, the experimental
\&\f(CW\*(C`Test::Harness::Straps\*(C'\fR module has been removed.
See \*(L"Modules and Pragmata\*(R" for more details.
.IP "\(bu" 4
As part of the \f(CW\*(C`ExtUtils::MakeMaker\*(C'\fR upgrade, the
\&\f(CW\*(C`ExtUtils::MakeMaker::bytes\*(C'\fR and \f(CW\*(C`ExtUtils::MakeMaker::vmsish\*(C'\fR modules
have been removed from this distribution.
.IP "\(bu" 4
\&\f(CW\*(C`Module::CoreList\*(C'\fR no longer contains the \f(CW%:patchlevel\fR hash.
.IP "\(bu" 4
\&\f(CW\*(C`length undef\*(C'\fR now returns undef.
.IP "\(bu" 4
Unsupported private C \s-1API\s0 functions are now declared \*(L"static\*(R" to prevent
leakage to Perl's public \s-1API\s0.
.IP "\(bu" 4
To support the bootstrapping process, \fIminiperl\fR no longer builds with
\&\s-1UTF\-8\s0 support in the regexp engine.
.Sp
This allows a build to complete with \s-1PERL_UNICODE\s0 set and a \s-1UTF\-8\s0 locale.
Without this there's a bootstrapping problem, as miniperl can't load
the \s-1UTF\-8\s0 components of the regexp engine, because they're not yet built.
.IP "\(bu" 4
\&\fIminiperl\fR's \f(CW@INC\fR is now restricted to just \f(CW\*(C`\-I...\*(C'\fR, the split of
\&\f(CW$ENV{PERL5LIB}\fR, and "\f(CW\*(C`.\*(C'\fR"
.IP "\(bu" 4
A space or a newline is now required after a \f(CW"#line XXX"\fR directive.
.IP "\(bu" 4
Tied filehandles now have an additional method \s-1EOF\s0 which provides the
\&\s-1EOF\s0 type.
.IP "\(bu" 4
To better match all other flow control statements, \f(CW\*(C`foreach\*(C'\fR may no
longer be used as an attribute.
.IP "\(bu" 4
Perl's command-line switch \*(L"\-P\*(R", which was deprecated in version 5.10.0, has
now been removed. The \s-1CPAN\s0 module \f(CW\*(C`Filter::cpp\*(C'\fR can be used as an 
alternative.
.SH "Deprecations"
.IX Header "Deprecations"
From time to time, Perl's developers find it necessary to deprecate
features or modules we've previously shipped as part of the core
distribution. We are well aware of the pain and frustration that a
backwards-incompatible change to Perl can cause for developers building
or maintaining software in Perl. You can be sure that when we deprecate
a functionality or syntax, it isn't a choice we make lightly. Sometimes,
we choose to deprecate functionality or syntax because it was found to
be poorly designed or implemented. Sometimes, this is because they're
holding back other features or causing performance problems. Sometimes,
the reasons are more complex. Wherever possible, we try to keep deprecated
functionality available to developers in its previous form for at least
one major release. So long as a deprecated feature isn't actively
disrupting our ability to maintain and extend Perl, we'll try to leave
it in place as long as possible.
.PP
The following items are now deprecated:
.IP "suidperl" 4
.IX Item "suidperl"
\&\f(CW\*(C`suidperl\*(C'\fR is no longer part of Perl. It used to provide a mechanism to
emulate setuid permission bits on systems that don't support it properly.
.ie n .IP "Use of "":="" to mean an empty attribute list" 4
.el .IP "Use of \f(CW:=\fR to mean an empty attribute list" 4
.IX Item "Use of := to mean an empty attribute list"
An accident of Perl's parser meant that these constructions were all
equivalent:
.Sp
.Vb 3
\&    my $pi := 4;
\&    my $pi : = 4;
\&    my $pi :  = 4;
.Ve
.Sp
with the \f(CW\*(C`:\*(C'\fR being treated as the start of an attribute list, which
ends before the \f(CW\*(C`=\*(C'\fR. As whitespace is not significant here, all are
parsed as an empty attribute list, hence all the above are equivalent
to, and better written as
.Sp
.Vb 1
\&    my $pi = 4;
.Ve
.Sp
because no attribute processing is done for an empty list.
.Sp
As is, this meant that \f(CW\*(C`:=\*(C'\fR cannot be used as a new token, without
silently changing the meaning of existing code. Hence that particular
form is now deprecated, and will become a syntax error. If it is
absolutely necessary to have empty attribute lists (for example,
because of a code generator) then avoid the warning by adding a space
before the \f(CW\*(C`=\*(C'\fR.
.ie n .IP """UNIVERSAL\->import()""" 4
.el .IP "\f(CWUNIVERSAL\->import()\fR" 4
.IX Item "UNIVERSAL->import()"
The method \f(CW\*(C`UNIVERSAL\->import()\*(C'\fR is now deprecated. Attempting to
pass import arguments to a \f(CW\*(C`use UNIVERSAL\*(C'\fR statement will result in a
deprecation warning.
.ie n .IP "Use of ""goto"" to jump into a construct" 4
.el .IP "Use of ``goto'' to jump into a construct" 4
.IX Item "Use of goto to jump into a construct"
Using \f(CW\*(C`goto\*(C'\fR to jump from an outer scope into an inner scope is now
deprecated. This rare use case was causing problems in the
implementation of scopes.
.IP "Custom character names in \eN{name} that don't look like names" 4
.IX Item "Custom character names in N{name} that don't look like names"
In \f(CW\*(C`\eN{\f(CIname\f(CW}\*(C'\fR, \fIname\fR can be just about anything. The standard
Unicode names have a very limited domain, but a custom name translator
could create names that are, for example, made up entirely of punctuation
symbols. It is now deprecated to make names that don't begin with an
alphabetic character, and aren't alphanumeric or contain other than
a very few other characters, namely spaces, dashes, parentheses
and colons. Because of the added meaning of \f(CW\*(C`\eN\*(C'\fR (See "\f(CW\*(C`\eN\*(C'\fR
experimental regex escape"), names that look like curly brace \-enclosed
quantifiers won't work. For example, \f(CW\*(C`\eN{3,4}\*(C'\fR now means to match 3 to
4 non-newlines; before a custom name \f(CW\*(C`3,4\*(C'\fR could have been created.
.IP "Deprecated Modules" 4
.IX Item "Deprecated Modules"
The following modules will be removed from the core distribution in a
future release, and should be installed from \s-1CPAN\s0 instead. Distributions
on \s-1CPAN\s0 which require these should add them to their prerequisites. The
core versions of these modules warnings will issue a deprecation warning.
.Sp
If you ship a packaged version of Perl, either alone or as part of a
larger system, then you should carefully consider the repercussions of
core module deprecations. You may want to consider shipping your default
build of Perl with packages for some or all deprecated modules which
install into \f(CW\*(C`vendor\*(C'\fR or \f(CW\*(C`site\*(C'\fR perl library directories. This will
inhibit the deprecation warnings.
.Sp
Alternatively, you may want to consider patching \fIlib/deprecate.pm\fR
to provide deprecation warnings specific to your packaging system
or distribution of Perl, consistent with how your packaging system
or distribution manages a staged transition from a release where the
installation of a single package provides the given functionality, to
a later release where the system administrator needs to know to install
multiple packages to get that same functionality.
.Sp
You can silence these deprecation warnings by installing the modules
in question from \s-1CPAN\s0.  To install the latest version of all of them,
just install \f(CW\*(C`Task::Deprecations::5_12\*(C'\fR.
.RS 4
.IP "Class::ISA" 4
.IX Item "Class::ISA"
.PD 0
.IP "Pod::Plainer" 4
.IX Item "Pod::Plainer"
.IP "Shell" 4
.IX Item "Shell"
.IP "Switch" 4
.IX Item "Switch"
.PD
Switch is buggy and should be avoided. You may find Perl's new
\&\f(CW\*(C`given\*(C'\fR/\f(CW\*(C`when\*(C'\fR feature a suitable replacement.  See \*(L"Switch
statements\*(R" in perlsyn for more information.
.RE
.RS 4
.RE
.IP "Assignment to $[" 4
.IX Item "Assignment to $["
.PD 0
.IP "Use of the attribute :locked on subroutines" 4
.IX Item "Use of the attribute :locked on subroutines"
.ie n .IP "Use of ""locked"" with the attributes pragma" 4
.el .IP "Use of ``locked'' with the attributes pragma" 4
.IX Item "Use of locked with the attributes pragma"
.ie n .IP "Use of ""unique"" with the attributes pragma" 4
.el .IP "Use of ``unique'' with the attributes pragma" 4
.IX Item "Use of unique with the attributes pragma"
.IP "Perl_pmflag" 4
.IX Item "Perl_pmflag"
.PD
\&\f(CW\*(C`Perl_pmflag\*(C'\fR is no longer part of Perl's public \s-1API\s0. Calling it now
generates a deprecation warning, and it will be removed in a future
release. Although listed as part of the \s-1API\s0, it was never documented,
and only ever used in \fItoke.c\fR, and prior to 5.10, \fIregcomp.c\fR. In
core, it has been replaced by a static function.
.IP "Numerous Perl 4\-era libraries" 4
.IX Item "Numerous Perl 4-era libraries"
\&\fItermcap.pl\fR, \fItainted.pl\fR, \fIstat.pl\fR, \fIshellwords.pl\fR, \fIpwd.pl\fR,
\&\fIopen3.pl\fR, \fIopen2.pl\fR, \fInewgetopt.pl\fR, \fIlook.pl\fR, \fIfind.pl\fR,
\&\fIfinddepth.pl\fR, \fIimportenv.pl\fR, \fIhostname.pl\fR, \fIgetopts.pl\fR,
\&\fIgetopt.pl\fR, \fIgetcwd.pl\fR, \fIflush.pl\fR, \fIfastcwd.pl\fR, \fIexceptions.pl\fR,
\&\fIctime.pl\fR, \fIcomplete.pl\fR, \fIcacheout.pl\fR, \fIbigrat.pl\fR, \fIbigint.pl\fR,
\&\fIbigfloat.pl\fR, \fIassert.pl\fR, \fIabbrev.pl\fR, \fIdotsh.pl\fR, and
\&\fItimelocal.pl\fR are all now deprecated.  Earlier, Perl's developers
intended to remove these libraries from Perl's core for the 5.14.0 release.
.Sp
During final testing before the release of 5.12.0, several developers
discovered current production code using these ancient libraries, some
inside the Perl core itself.  Accordingly, the pumpking granted them
a stay of execution. They will begin to warn about their deprecation
in the 5.14.0 release and will be removed in the 5.16.0 release.
.SH "Unicode overhaul"
.IX Header "Unicode overhaul"
Perl's developers have made a concerted effort to update Perl to be in
sync with the latest Unicode standard. Changes for this include:
.PP
Perl can now handle every Unicode character property. New documentation,
perluniprops, lists all available non-Unihan character properties. By
default, perl does not expose Unihan, deprecated or Unicode-internal
properties.  See below for more details on these; there is also a section
in the pod listing them, and explaining why they are not exposed.
.PP
Perl now fully supports the Unicode compound-style of using \f(CW\*(C`=\*(C'\fR
and \f(CW\*(C`:\*(C'\fR in writing regular expressions: \f(CW\*(C`\ep{property=value}\*(C'\fR and
\&\f(CW\*(C`\ep{property:value}\*(C'\fR (both of which mean the same thing).
.PP
Perl now fully supports the Unicode loose matching rules for text between
the braces in \f(CW\*(C`\ep{...}\*(C'\fR constructs. In addition, Perl allows underscores
between digits of numbers.
.PP
Perl now accepts all the Unicode-defined synonyms for properties and
property values.
.PP
\&\f(CW\*(C`qr/\eX/\*(C'\fR, which matches a Unicode logical character, has
been expanded to work better with various Asian languages. It
now is defined as an \fIextended grapheme cluster\fR. (See
<http://www.unicode.org/reports/tr29/>).  Anything matched previously
and that made sense will continue to be accepted.   Additionally:
.IP "\(bu" 4
\&\f(CW\*(C`\eX\*(C'\fR will not break apart a \f(CW\*(C`CR\ LF\*(C'\fR sequence.
.IP "\(bu" 4
\&\f(CW\*(C`\eX\*(C'\fR will now match a sequence which includes the \f(CW\*(C`ZWJ\*(C'\fR and \f(CW\*(C`ZWNJ\*(C'\fR
characters.
.IP "\(bu" 4
\&\f(CW\*(C`\eX\*(C'\fR will now always match at least one character, including an initial
mark.  Marks generally come after a base character, but it is possible in
Unicode to have them in isolation, and \f(CW\*(C`\eX\*(C'\fR will now handle that case,
for example at the beginning of a line, or after a \f(CW\*(C`ZWSP\*(C'\fR. And this is
the part where \f(CW\*(C`\eX\*(C'\fR doesn't match the things that it used to that don't
make sense. Formerly, for example, you could have the nonsensical case
of an accented \s-1LF\s0.
.IP "\(bu" 4
\&\f(CW\*(C`\eX\*(C'\fR will now match a (Korean) Hangul syllable sequence, and the Thai
and Lao exception cases.
.PP
Otherwise, this change should be transparent for the non-affected
languages.
.PP
\&\f(CW\*(C`\ep{...}\*(C'\fR matches using the Canonical_Combining_Class property were
completely broken in previous releases of Perl.  They should now work
correctly.
.PP
Before Perl 5.12, the Unicode \f(CW\*(C`Decomposition_Type=Compat\*(C'\fR property
and a Perl extension had the same name, which led to neither matching
all the correct values (with more than 100 mistakes in one, and several
thousand in the other). The Perl extension has now been renamed to be
\&\f(CW\*(C`Decomposition_Type=Noncanonical\*(C'\fR (short: \f(CW\*(C`dt=noncanon\*(C'\fR). It has the
same meaning as was previously intended, namely the union of all the
non-canonical Decomposition types, with Unicode \f(CW\*(C`Compat\*(C'\fR being just
one of those.
.PP
\&\f(CW\*(C`\ep{Decomposition_Type=Canonical}\*(C'\fR now includes the Hangul syllables.
.PP
\&\f(CW\*(C`\ep{Uppercase}\*(C'\fR and \f(CW\*(C`\ep{Lowercase}\*(C'\fR now work as the Unicode standard
says they should.  This means they each match a few more characters than
they used to.
.PP
\&\f(CW\*(C`\ep{Cntrl}\*(C'\fR now matches the same characters as \f(CW\*(C`\ep{Control}\*(C'\fR. This
means it no longer will match Private Use (gc=co), Surrogates (gc=cs),
nor Format (gc=cf) code points. The Format code points represent the
biggest possible problem. All but 36 of them are either officially
deprecated or strongly discouraged from being used. Of those 36, likely
the most widely used are the soft hyphen (U+00AD), and \s-1BOM\s0, \s-1ZWSP\s0, \s-1ZWNJ\s0,
\&\s-1WJ\s0, and similar characters, plus bidirectional controls.
.PP
\&\f(CW\*(C`\ep{Alpha}\*(C'\fR now matches the same characters as \f(CW\*(C`\ep{Alphabetic}\*(C'\fR. Before
5.12, Perl's definition definition included a number of things that aren't
really alpha (all marks) while omitting many that were. The definitions
of \f(CW\*(C`\ep{Alnum}\*(C'\fR and \f(CW\*(C`\ep{Word}\*(C'\fR depend on Alpha's definition and have
changed accordingly.
.PP
\&\f(CW\*(C`\ep{Word}\*(C'\fR no longer incorrectly matches non-word characters such
as fractions.
.PP
\&\f(CW\*(C`\ep{Print}\*(C'\fR no longer matches the line control characters: Tab, \s-1LF\s0,
\&\s-1CR\s0, \s-1FF\s0, \s-1VT\s0, and \s-1NEL\s0. This brings it in line with standards and the
documentation.
.PP
\&\f(CW\*(C`\ep{XDigit}\*(C'\fR now matches the same characters as \f(CW\*(C`\ep{Hex_Digit}\*(C'\fR. This
means that in addition to the characters it currently matches,
\&\f(CW\*(C`[A\-Fa\-f0\-9]\*(C'\fR, it will also match the 22 fullwidth equivalents, for
example U+FF10: \s-1FULLWIDTH\s0 \s-1DIGIT\s0 \s-1ZERO\s0.
.PP
The Numeric type property has been extended to include the Unihan
characters.
.PP
There is a new Perl extension, the 'Present_In', or simply 'In',
property. This is an extension of the Unicode Age property, but
\&\f(CW\*(C`\ep{In=5.0}\*(C'\fR matches any code point whose usage has been determined
\&\fIas of\fR Unicode version 5.0. The \f(CW\*(C`\ep{Age=5.0}\*(C'\fR only matches code points
added in \fIprecisely\fR version 5.0.
.PP
A number of properties now have the correct values for unassigned
code points. The affected properties are Bidi_Class, East_Asian_Width,
Joining_Type, Decomposition_Type, Hangul_Syllable_Type, Numeric_Type,
and Line_Break.
.PP
The Default_Ignorable_Code_Point, ID_Continue, and ID_Start properties
are now up to date with current Unicode definitions.
.PP
Earlier versions of Perl erroneously exposed certain properties that
are supposed to be Unicode internal-only.  Use of these in regular
expressions will now generate, if enabled, a deprecation warning message.
The properties are: Other_Alphabetic, Other_Default_Ignorable_Code_Point,
Other_Grapheme_Extend, Other_ID_Continue, Other_ID_Start, Other_Lowercase,
Other_Math, and Other_Uppercase.
.PP
It is now possible to change which Unicode properties Perl understands
on a per-installation basis. As mentioned above, certain properties
are turned off by default.  These include all the Unihan properties
(which should be accessible via the \s-1CPAN\s0 module Unicode::Unihan) and any
deprecated or Unicode internal-only property that Perl has never exposed.
.PP
The generated files in the \f(CW\*(C`lib/unicore/To\*(C'\fR directory are now more
clearly marked as being stable, directly usable by applications.  New hash
entries in them give the format of the normal entries, which allows for
easier machine parsing. Perl can generate files in this directory for
any property, though most are suppressed.  You can find instructions
for changing which are written in perluniprops.
.SH "Modules and Pragmata"
.IX Header "Modules and Pragmata"
.SS "New Modules and Pragmata"
.IX Subsection "New Modules and Pragmata"
.ie n .IP """autodie""" 4
.el .IP "\f(CWautodie\fR" 4
.IX Item "autodie"
\&\f(CW\*(C`autodie\*(C'\fR is a new lexically-scoped alternative for the \f(CW\*(C`Fatal\*(C'\fR module.
The bundled version is 2.06_01. Note that in this release, using a string
eval when \f(CW\*(C`autodie\*(C'\fR is in effect can cause the autodie behaviour to leak
into the surrounding scope. See \*(L"\s-1BUGS\s0\*(R" in autodie for more details.
.Sp
Version 2.06_01 has been added to the Perl core.
.ie n .IP """Compress::Raw::Bzip2""" 4
.el .IP "\f(CWCompress::Raw::Bzip2\fR" 4
.IX Item "Compress::Raw::Bzip2"
Version 2.024 has been added to the Perl core.
.ie n .IP """overloading""" 4
.el .IP "\f(CWoverloading\fR" 4
.IX Item "overloading"
\&\f(CW\*(C`overloading\*(C'\fR allows you to lexically disable or enable overloading
for some or all operations.
.Sp
Version 0.001 has been added to the Perl core.
.ie n .IP """parent""" 4
.el .IP "\f(CWparent\fR" 4
.IX Item "parent"
\&\f(CW\*(C`parent\*(C'\fR establishes an \s-1ISA\s0 relationship with base classes at compile
time. It provides the key feature of \f(CW\*(C`base\*(C'\fR without further unwanted
behaviors.
.Sp
Version 0.223 has been added to the Perl core.
.ie n .IP """Parse::CPAN::Meta""" 4
.el .IP "\f(CWParse::CPAN::Meta\fR" 4
.IX Item "Parse::CPAN::Meta"
Version 1.40 has been added to the Perl core.
.ie n .IP """VMS::DCLsym""" 4
.el .IP "\f(CWVMS::DCLsym\fR" 4
.IX Item "VMS::DCLsym"
Version 1.03 has been added to the Perl core.
.ie n .IP """VMS::Stdio""" 4
.el .IP "\f(CWVMS::Stdio\fR" 4
.IX Item "VMS::Stdio"
Version 2.4 has been added to the Perl core.
.ie n .IP """XS::APItest::KeywordRPN""" 4
.el .IP "\f(CWXS::APItest::KeywordRPN\fR" 4
.IX Item "XS::APItest::KeywordRPN"
Version 0.003 has been added to the Perl core.
.SS "Updated Pragmata"
.IX Subsection "Updated Pragmata"
.ie n .IP """base""" 4
.el .IP "\f(CWbase\fR" 4
.IX Item "base"
Upgraded from version 2.13 to 2.15.
.ie n .IP """bignum""" 4
.el .IP "\f(CWbignum\fR" 4
.IX Item "bignum"
Upgraded from version 0.22 to 0.23.
.ie n .IP """charnames""" 4
.el .IP "\f(CWcharnames\fR" 4
.IX Item "charnames"
\&\f(CW\*(C`charnames\*(C'\fR now contains the Unicode \fINameAliases.txt\fR database file.
This has the effect of adding some extra \f(CW\*(C`\eN\*(C'\fR character names that
formerly wouldn't have been recognised; for example, \f(CW"\eN{LATIN CAPITAL
LETTER GHA}"\fR.
.Sp
Upgraded from version 1.06 to 1.07.
.ie n .IP """constant""" 4
.el .IP "\f(CWconstant\fR" 4
.IX Item "constant"
Upgraded from version 1.13 to 1.20.
.ie n .IP """diagnostics""" 4
.el .IP "\f(CWdiagnostics\fR" 4
.IX Item "diagnostics"
\&\f(CW\*(C`diagnostics\*(C'\fR now supports %.0f formatting internally.
.Sp
\&\f(CW\*(C`diagnostics\*(C'\fR no longer suppresses \f(CW\*(C`Use of uninitialized value in range
(or flip)\*(C'\fR warnings. [perl #71204]
.Sp
Upgraded from version 1.17 to 1.19.
.ie n .IP """feature""" 4
.el .IP "\f(CWfeature\fR" 4
.IX Item "feature"
In \f(CW\*(C`feature\*(C'\fR, the meaning of the \f(CW\*(C`:5.10\*(C'\fR and \f(CW\*(C`:5.10.X\*(C'\fR feature
bundles has changed slightly. The last component, if any (i.e. \f(CW\*(C`X\*(C'\fR) is
simply ignored.  This is predicated on the assumption that new features
will not, in general, be added to maintenance releases. So \f(CW\*(C`:5.10\*(C'\fR
and \f(CW\*(C`:5.10.X\*(C'\fR have identical effect. This is a change to the behaviour
documented for 5.10.0.
.Sp
\&\f(CW\*(C`feature\*(C'\fR now includes the \f(CW\*(C`unicode_strings\*(C'\fR feature:
.Sp
.Vb 1
\&    use feature "unicode_strings";
.Ve
.Sp
This pragma turns on Unicode semantics for the case-changing operations
(\f(CW\*(C`uc\*(C'\fR, \f(CW\*(C`lc\*(C'\fR, \f(CW\*(C`ucfirst\*(C'\fR, \f(CW\*(C`lcfirst\*(C'\fR) on strings that don't have the
internal \s-1UTF\-8\s0 flag set, but that contain single-byte characters between
128 and 255.
.Sp
Upgraded from version 1.11 to 1.16.
.ie n .IP """less""" 4
.el .IP "\f(CWless\fR" 4
.IX Item "less"
\&\f(CW\*(C`less\*(C'\fR now includes the \f(CW\*(C`stash_name\*(C'\fR method to allow subclasses of
\&\f(CW\*(C`less\*(C'\fR to pick where in %^H to store their stash.
.Sp
Upgraded from version 0.02 to 0.03.
.ie n .IP """lib""" 4
.el .IP "\f(CWlib\fR" 4
.IX Item "lib"
Upgraded from version 0.5565 to 0.62.
.ie n .IP """mro""" 4
.el .IP "\f(CWmro\fR" 4
.IX Item "mro"
\&\f(CW\*(C`mro\*(C'\fR is now implemented as an \s-1XS\s0 extension. The documented interface has
not changed. Code relying on the implementation detail that some \f(CW\*(C`mro::\*(C'\fR
methods happened to be available at all times gets to \*(L"keep both pieces\*(R".
.Sp
Upgraded from version 1.00 to 1.02.
.ie n .IP """overload""" 4
.el .IP "\f(CWoverload\fR" 4
.IX Item "overload"
\&\f(CW\*(C`overload\*(C'\fR now allow overloading of 'qr'.
.Sp
Upgraded from version 1.06 to 1.10.
.ie n .IP """threads""" 4
.el .IP "\f(CWthreads\fR" 4
.IX Item "threads"
Upgraded from version 1.67 to 1.75.
.ie n .IP """threads::shared""" 4
.el .IP "\f(CWthreads::shared\fR" 4
.IX Item "threads::shared"
Upgraded from version 1.14 to 1.32.
.ie n .IP """version""" 4
.el .IP "\f(CWversion\fR" 4
.IX Item "version"
\&\f(CW\*(C`version\*(C'\fR now has support for \*(L"Version number formats\*(R" as described
earlier in this document and in its own documentation.
.Sp
Upgraded from version 0.74 to 0.82.
.ie n .IP """warnings""" 4
.el .IP "\f(CWwarnings\fR" 4
.IX Item "warnings"
\&\f(CW\*(C`warnings\*(C'\fR has a new \f(CW\*(C`warnings::fatal_enabled()\*(C'\fR function.  It also
includes a new \f(CW\*(C`illegalproto\*(C'\fR warning category. See also \*(L"New or
Changed Diagnostics\*(R" for this change.
.Sp
Upgraded from version 1.06 to 1.09.
.SS "Updated Modules"
.IX Subsection "Updated Modules"
.ie n .IP """Archive::Extract""" 4
.el .IP "\f(CWArchive::Extract\fR" 4
.IX Item "Archive::Extract"
Upgraded from version 0.24 to 0.38.
.ie n .IP """Archive::Tar""" 4
.el .IP "\f(CWArchive::Tar\fR" 4
.IX Item "Archive::Tar"
Upgraded from version 1.38 to 1.54.
.ie n .IP """Attribute::Handlers""" 4
.el .IP "\f(CWAttribute::Handlers\fR" 4
.IX Item "Attribute::Handlers"
Upgraded from version 0.79 to 0.87.
.ie n .IP """AutoLoader""" 4
.el .IP "\f(CWAutoLoader\fR" 4
.IX Item "AutoLoader"
Upgraded from version 5.63 to 5.70.
.ie n .IP """B::Concise""" 4
.el .IP "\f(CWB::Concise\fR" 4
.IX Item "B::Concise"
Upgraded from version 0.74 to 0.78.
.ie n .IP """B::Debug""" 4
.el .IP "\f(CWB::Debug\fR" 4
.IX Item "B::Debug"
Upgraded from version 1.05 to 1.12.
.ie n .IP """B::Deparse""" 4
.el .IP "\f(CWB::Deparse\fR" 4
.IX Item "B::Deparse"
Upgraded from version 0.83 to 0.96.
.ie n .IP """B::Lint""" 4
.el .IP "\f(CWB::Lint\fR" 4
.IX Item "B::Lint"
Upgraded from version 1.09 to 1.11_01.
.ie n .IP """CGI""" 4
.el .IP "\f(CWCGI\fR" 4
.IX Item "CGI"
Upgraded from version 3.29 to 3.48.
.ie n .IP """Class::ISA""" 4
.el .IP "\f(CWClass::ISA\fR" 4
.IX Item "Class::ISA"
Upgraded from version 0.33 to 0.36.
.Sp
\&\s-1NOTE:\s0 \f(CW\*(C`Class::ISA\*(C'\fR is deprecated and may be removed from a future
version of Perl.
.ie n .IP """Compress::Raw::Zlib""" 4
.el .IP "\f(CWCompress::Raw::Zlib\fR" 4
.IX Item "Compress::Raw::Zlib"
Upgraded from version 2.008 to 2.024.
.ie n .IP """CPAN""" 4
.el .IP "\f(CWCPAN\fR" 4
.IX Item "CPAN"
Upgraded from version 1.9205 to 1.94_56.
.ie n .IP """CPANPLUS""" 4
.el .IP "\f(CWCPANPLUS\fR" 4
.IX Item "CPANPLUS"
Upgraded from version 0.84 to 0.90.
.ie n .IP """CPANPLUS::Dist::Build""" 4
.el .IP "\f(CWCPANPLUS::Dist::Build\fR" 4
.IX Item "CPANPLUS::Dist::Build"
Upgraded from version 0.06_02 to 0.46.
.ie n .IP """Data::Dumper""" 4
.el .IP "\f(CWData::Dumper\fR" 4
.IX Item "Data::Dumper"
Upgraded from version 2.121_14 to 2.125.
.ie n .IP """DB_File""" 4
.el .IP "\f(CWDB_File\fR" 4
.IX Item "DB_File"
Upgraded from version 1.816_1 to 1.820.
.ie n .IP """Devel::PPPort""" 4
.el .IP "\f(CWDevel::PPPort\fR" 4
.IX Item "Devel::PPPort"
Upgraded from version 3.13 to 3.19.
.ie n .IP """Digest""" 4
.el .IP "\f(CWDigest\fR" 4
.IX Item "Digest"
Upgraded from version 1.15 to 1.16.
.ie n .IP """Digest::MD5""" 4
.el .IP "\f(CWDigest::MD5\fR" 4
.IX Item "Digest::MD5"
Upgraded from version 2.36_01 to 2.39.
.ie n .IP """Digest::SHA""" 4
.el .IP "\f(CWDigest::SHA\fR" 4
.IX Item "Digest::SHA"
Upgraded from version 5.45 to 5.47.
.ie n .IP """Encode""" 4
.el .IP "\f(CWEncode\fR" 4
.IX Item "Encode"
Upgraded from version 2.23 to 2.39.
.ie n .IP """Exporter""" 4
.el .IP "\f(CWExporter\fR" 4
.IX Item "Exporter"
Upgraded from version 5.62 to 5.64_01.
.ie n .IP """ExtUtils::CBuilder""" 4
.el .IP "\f(CWExtUtils::CBuilder\fR" 4
.IX Item "ExtUtils::CBuilder"
Upgraded from version 0.21 to 0.27.
.ie n .IP """ExtUtils::Command""" 4
.el .IP "\f(CWExtUtils::Command\fR" 4
.IX Item "ExtUtils::Command"
Upgraded from version 1.13 to 1.16.
.ie n .IP """ExtUtils::Constant""" 4
.el .IP "\f(CWExtUtils::Constant\fR" 4
.IX Item "ExtUtils::Constant"
Upgraded from version 0.2 to 0.22.
.ie n .IP """ExtUtils::Install""" 4
.el .IP "\f(CWExtUtils::Install\fR" 4
.IX Item "ExtUtils::Install"
Upgraded from version 1.44 to 1.55.
.ie n .IP """ExtUtils::MakeMaker""" 4
.el .IP "\f(CWExtUtils::MakeMaker\fR" 4
.IX Item "ExtUtils::MakeMaker"
Upgraded from version 6.42 to 6.56.
.ie n .IP """ExtUtils::Manifest""" 4
.el .IP "\f(CWExtUtils::Manifest\fR" 4
.IX Item "ExtUtils::Manifest"
Upgraded from version 1.51_01 to 1.57.
.ie n .IP """ExtUtils::ParseXS""" 4
.el .IP "\f(CWExtUtils::ParseXS\fR" 4
.IX Item "ExtUtils::ParseXS"
Upgraded from version 2.18_02 to 2.21.
.ie n .IP """File::Fetch""" 4
.el .IP "\f(CWFile::Fetch\fR" 4
.IX Item "File::Fetch"
Upgraded from version 0.14 to 0.24.
.ie n .IP """File::Path""" 4
.el .IP "\f(CWFile::Path\fR" 4
.IX Item "File::Path"
Upgraded from version 2.04 to 2.08_01.
.ie n .IP """File::Temp""" 4
.el .IP "\f(CWFile::Temp\fR" 4
.IX Item "File::Temp"
Upgraded from version 0.18 to 0.22.
.ie n .IP """Filter::Simple""" 4
.el .IP "\f(CWFilter::Simple\fR" 4
.IX Item "Filter::Simple"
Upgraded from version 0.82 to 0.84.
.ie n .IP """Filter::Util::Call""" 4
.el .IP "\f(CWFilter::Util::Call\fR" 4
.IX Item "Filter::Util::Call"
Upgraded from version 1.07 to 1.08.
.ie n .IP """Getopt::Long""" 4
.el .IP "\f(CWGetopt::Long\fR" 4
.IX Item "Getopt::Long"
Upgraded from version 2.37 to 2.38.
.ie n .IP """IO""" 4
.el .IP "\f(CWIO\fR" 4
.IX Item "IO"
Upgraded from version 1.23_01 to 1.25_02.
.ie n .IP """IO::Zlib""" 4
.el .IP "\f(CWIO::Zlib\fR" 4
.IX Item "IO::Zlib"
Upgraded from version 1.07 to 1.10.
.ie n .IP """IPC::Cmd""" 4
.el .IP "\f(CWIPC::Cmd\fR" 4
.IX Item "IPC::Cmd"
Upgraded from version 0.40_1 to 0.54.
.ie n .IP """IPC::SysV""" 4
.el .IP "\f(CWIPC::SysV\fR" 4
.IX Item "IPC::SysV"
Upgraded from version 1.05 to 2.01.
.ie n .IP """Locale::Maketext""" 4
.el .IP "\f(CWLocale::Maketext\fR" 4
.IX Item "Locale::Maketext"
Upgraded from version 1.12 to 1.14.
.ie n .IP """Locale::Maketext::Simple""" 4
.el .IP "\f(CWLocale::Maketext::Simple\fR" 4
.IX Item "Locale::Maketext::Simple"
Upgraded from version 0.18 to 0.21.
.ie n .IP """Log::Message""" 4
.el .IP "\f(CWLog::Message\fR" 4
.IX Item "Log::Message"
Upgraded from version 0.01 to 0.02.
.ie n .IP """Log::Message::Simple""" 4
.el .IP "\f(CWLog::Message::Simple\fR" 4
.IX Item "Log::Message::Simple"
Upgraded from version 0.04 to 0.06.
.ie n .IP """Math::BigInt""" 4
.el .IP "\f(CWMath::BigInt\fR" 4
.IX Item "Math::BigInt"
Upgraded from version 1.88 to 1.89_01.
.ie n .IP """Math::BigInt::FastCalc""" 4
.el .IP "\f(CWMath::BigInt::FastCalc\fR" 4
.IX Item "Math::BigInt::FastCalc"
Upgraded from version 0.16 to 0.19.
.ie n .IP """Math::BigRat""" 4
.el .IP "\f(CWMath::BigRat\fR" 4
.IX Item "Math::BigRat"
Upgraded from version 0.21 to 0.24.
.ie n .IP """Math::Complex""" 4
.el .IP "\f(CWMath::Complex\fR" 4
.IX Item "Math::Complex"
Upgraded from version 1.37 to 1.56.
.ie n .IP """Memoize""" 4
.el .IP "\f(CWMemoize\fR" 4
.IX Item "Memoize"
Upgraded from version 1.01_02 to 1.01_03.
.ie n .IP """MIME::Base64""" 4
.el .IP "\f(CWMIME::Base64\fR" 4
.IX Item "MIME::Base64"
Upgraded from version 3.07_01 to 3.08.
.ie n .IP """Module::Build""" 4
.el .IP "\f(CWModule::Build\fR" 4
.IX Item "Module::Build"
Upgraded from version 0.2808_01 to 0.3603.
.ie n .IP """Module::CoreList""" 4
.el .IP "\f(CWModule::CoreList\fR" 4
.IX Item "Module::CoreList"
Upgraded from version 2.12 to 2.29.
.ie n .IP """Module::Load""" 4
.el .IP "\f(CWModule::Load\fR" 4
.IX Item "Module::Load"
Upgraded from version 0.12 to 0.16.
.ie n .IP """Module::Load::Conditional""" 4
.el .IP "\f(CWModule::Load::Conditional\fR" 4
.IX Item "Module::Load::Conditional"
Upgraded from version 0.22 to 0.34.
.ie n .IP """Module::Loaded""" 4
.el .IP "\f(CWModule::Loaded\fR" 4
.IX Item "Module::Loaded"
Upgraded from version 0.01 to 0.06.
.ie n .IP """Module::Pluggable""" 4
.el .IP "\f(CWModule::Pluggable\fR" 4
.IX Item "Module::Pluggable"
Upgraded from version 3.6 to 3.9.
.ie n .IP """Net::Ping""" 4
.el .IP "\f(CWNet::Ping\fR" 4
.IX Item "Net::Ping"
Upgraded from version 2.33 to 2.36.
.ie n .IP """NEXT""" 4
.el .IP "\f(CWNEXT\fR" 4
.IX Item "NEXT"
Upgraded from version 0.60_01 to 0.64.
.ie n .IP """Object::Accessor""" 4
.el .IP "\f(CWObject::Accessor\fR" 4
.IX Item "Object::Accessor"
Upgraded from version 0.32 to 0.36.
.ie n .IP """Package::Constants""" 4
.el .IP "\f(CWPackage::Constants\fR" 4
.IX Item "Package::Constants"
Upgraded from version 0.01 to 0.02.
.ie n .IP """PerlIO""" 4
.el .IP "\f(CWPerlIO\fR" 4
.IX Item "PerlIO"
Upgraded from version 1.04 to 1.06.
.ie n .IP """Pod::Parser""" 4
.el .IP "\f(CWPod::Parser\fR" 4
.IX Item "Pod::Parser"
Upgraded from version 1.35 to 1.37.
.ie n .IP """Pod::Perldoc""" 4
.el .IP "\f(CWPod::Perldoc\fR" 4
.IX Item "Pod::Perldoc"
Upgraded from version 3.14_02 to 3.15_02.
.ie n .IP """Pod::Plainer""" 4
.el .IP "\f(CWPod::Plainer\fR" 4
.IX Item "Pod::Plainer"
Upgraded from version 0.01 to 1.02.
.Sp
\&\s-1NOTE:\s0 \f(CW\*(C`Pod::Plainer\*(C'\fR is deprecated and may be removed from a future
version of Perl.
.ie n .IP """Pod::Simple""" 4
.el .IP "\f(CWPod::Simple\fR" 4
.IX Item "Pod::Simple"
Upgraded from version 3.05 to 3.13.
.ie n .IP """Safe""" 4
.el .IP "\f(CWSafe\fR" 4
.IX Item "Safe"
Upgraded from version 2.12 to 2.22.
.ie n .IP """SelfLoader""" 4
.el .IP "\f(CWSelfLoader\fR" 4
.IX Item "SelfLoader"
Upgraded from version 1.11 to 1.17.
.ie n .IP """Storable""" 4
.el .IP "\f(CWStorable\fR" 4
.IX Item "Storable"
Upgraded from version 2.18 to 2.22.
.ie n .IP """Switch""" 4
.el .IP "\f(CWSwitch\fR" 4
.IX Item "Switch"
Upgraded from version 2.13 to 2.16.
.Sp
\&\s-1NOTE:\s0 \f(CW\*(C`Switch\*(C'\fR is deprecated and may be removed from a future version
of Perl.
.ie n .IP """Sys::Syslog""" 4
.el .IP "\f(CWSys::Syslog\fR" 4
.IX Item "Sys::Syslog"
Upgraded from version 0.22 to 0.27.
.ie n .IP """Term::ANSIColor""" 4
.el .IP "\f(CWTerm::ANSIColor\fR" 4
.IX Item "Term::ANSIColor"
Upgraded from version 1.12 to 2.02.
.ie n .IP """Term::UI""" 4
.el .IP "\f(CWTerm::UI\fR" 4
.IX Item "Term::UI"
Upgraded from version 0.18 to 0.20.
.ie n .IP """Test""" 4
.el .IP "\f(CWTest\fR" 4
.IX Item "Test"
Upgraded from version 1.25 to 1.25_02.
.ie n .IP """Test::Harness""" 4
.el .IP "\f(CWTest::Harness\fR" 4
.IX Item "Test::Harness"
Upgraded from version 2.64 to 3.17.
.ie n .IP """Test::Simple""" 4
.el .IP "\f(CWTest::Simple\fR" 4
.IX Item "Test::Simple"
Upgraded from version 0.72 to 0.94.
.ie n .IP """Text::Balanced""" 4
.el .IP "\f(CWText::Balanced\fR" 4
.IX Item "Text::Balanced"
Upgraded from version 2.0.0 to 2.02.
.ie n .IP """Text::ParseWords""" 4
.el .IP "\f(CWText::ParseWords\fR" 4
.IX Item "Text::ParseWords"
Upgraded from version 3.26 to 3.27.
.ie n .IP """Text::Soundex""" 4
.el .IP "\f(CWText::Soundex\fR" 4
.IX Item "Text::Soundex"
Upgraded from version 3.03 to 3.03_01.
.ie n .IP """Thread::Queue""" 4
.el .IP "\f(CWThread::Queue\fR" 4
.IX Item "Thread::Queue"
Upgraded from version 2.00 to 2.11.
.ie n .IP """Thread::Semaphore""" 4
.el .IP "\f(CWThread::Semaphore\fR" 4
.IX Item "Thread::Semaphore"
Upgraded from version 2.01 to 2.09.
.ie n .IP """Tie::RefHash""" 4
.el .IP "\f(CWTie::RefHash\fR" 4
.IX Item "Tie::RefHash"
Upgraded from version 1.37 to 1.38.
.ie n .IP """Time::HiRes""" 4
.el .IP "\f(CWTime::HiRes\fR" 4
.IX Item "Time::HiRes"
Upgraded from version 1.9711 to 1.9719.
.ie n .IP """Time::Local""" 4
.el .IP "\f(CWTime::Local\fR" 4
.IX Item "Time::Local"
Upgraded from version 1.18 to 1.1901_01.
.ie n .IP """Time::Piece""" 4
.el .IP "\f(CWTime::Piece\fR" 4
.IX Item "Time::Piece"
Upgraded from version 1.12 to 1.15.
.ie n .IP """Unicode::Collate""" 4
.el .IP "\f(CWUnicode::Collate\fR" 4
.IX Item "Unicode::Collate"
Upgraded from version 0.52 to 0.52_01.
.ie n .IP """Unicode::Normalize""" 4
.el .IP "\f(CWUnicode::Normalize\fR" 4
.IX Item "Unicode::Normalize"
Upgraded from version 1.02 to 1.03.
.ie n .IP """Win32""" 4
.el .IP "\f(CWWin32\fR" 4
.IX Item "Win32"
Upgraded from version 0.34 to 0.39.
.ie n .IP """Win32API::File""" 4
.el .IP "\f(CWWin32API::File\fR" 4
.IX Item "Win32API::File"
Upgraded from version 0.1001_01 to 0.1101.
.ie n .IP """XSLoader""" 4
.el .IP "\f(CWXSLoader\fR" 4
.IX Item "XSLoader"
Upgraded from version 0.08 to 0.10.
.SS "Removed Modules and Pragmata"
.IX Subsection "Removed Modules and Pragmata"
.ie n .IP """attrs""" 4
.el .IP "\f(CWattrs\fR" 4
.IX Item "attrs"
Removed from the Perl core.  Prior version was 1.02.
.ie n .IP """CPAN::API::HOWTO""" 4
.el .IP "\f(CWCPAN::API::HOWTO\fR" 4
.IX Item "CPAN::API::HOWTO"
Removed from the Perl core.  Prior version was 'undef'.
.ie n .IP """CPAN::DeferedCode""" 4
.el .IP "\f(CWCPAN::DeferedCode\fR" 4
.IX Item "CPAN::DeferedCode"
Removed from the Perl core.  Prior version was 5.50.
.ie n .IP """CPANPLUS::inc""" 4
.el .IP "\f(CWCPANPLUS::inc\fR" 4
.IX Item "CPANPLUS::inc"
Removed from the Perl core.  Prior version was 'undef'.
.ie n .IP """DCLsym""" 4
.el .IP "\f(CWDCLsym\fR" 4
.IX Item "DCLsym"
Removed from the Perl core.  Prior version was 1.03.
.ie n .IP """ExtUtils::MakeMaker::bytes""" 4
.el .IP "\f(CWExtUtils::MakeMaker::bytes\fR" 4
.IX Item "ExtUtils::MakeMaker::bytes"
Removed from the Perl core.  Prior version was 6.42.
.ie n .IP """ExtUtils::MakeMaker::vmsish""" 4
.el .IP "\f(CWExtUtils::MakeMaker::vmsish\fR" 4
.IX Item "ExtUtils::MakeMaker::vmsish"
Removed from the Perl core.  Prior version was 6.42.
.ie n .IP """Stdio""" 4
.el .IP "\f(CWStdio\fR" 4
.IX Item "Stdio"
Removed from the Perl core.  Prior version was 2.3.
.ie n .IP """Test::Harness::Assert""" 4
.el .IP "\f(CWTest::Harness::Assert\fR" 4
.IX Item "Test::Harness::Assert"
Removed from the Perl core.  Prior version was 0.02.
.ie n .IP """Test::Harness::Iterator""" 4
.el .IP "\f(CWTest::Harness::Iterator\fR" 4
.IX Item "Test::Harness::Iterator"
Removed from the Perl core.  Prior version was 0.02.
.ie n .IP """Test::Harness::Point""" 4
.el .IP "\f(CWTest::Harness::Point\fR" 4
.IX Item "Test::Harness::Point"
Removed from the Perl core.  Prior version was 0.01.
.ie n .IP """Test::Harness::Results""" 4
.el .IP "\f(CWTest::Harness::Results\fR" 4
.IX Item "Test::Harness::Results"
Removed from the Perl core.  Prior version was 0.01.
.ie n .IP """Test::Harness::Straps""" 4
.el .IP "\f(CWTest::Harness::Straps\fR" 4
.IX Item "Test::Harness::Straps"
Removed from the Perl core.  Prior version was 0.26_01.
.ie n .IP """Test::Harness::Util""" 4
.el .IP "\f(CWTest::Harness::Util\fR" 4
.IX Item "Test::Harness::Util"
Removed from the Perl core.  Prior version was 0.01.
.ie n .IP """XSSymSet""" 4
.el .IP "\f(CWXSSymSet\fR" 4
.IX Item "XSSymSet"
Removed from the Perl core.  Prior version was 1.1.
.SS "Deprecated Modules and Pragmata"
.IX Subsection "Deprecated Modules and Pragmata"
See \*(L"Deprecated Modules\*(R" above.
.SH "Documentation"
.IX Header "Documentation"
.SS "New Documentation"
.IX Subsection "New Documentation"
.IP "\(bu" 4
perlhaiku contains instructions on how to build perl for the Haiku
platform.
.IP "\(bu" 4
perlmroapi describes the new interface for pluggable Method Resolution
Orders.
.IP "\(bu" 4
perlperf, by Richard Foley, provides an introduction to the use of
performance and optimization techniques which can be used with particular
reference to perl programs.
.IP "\(bu" 4
perlrepository describes how to access the perl source using the \fIgit\fR
version control system.
.IP "\(bu" 4
perlpolicy extends the \*(L"Social contract about contributed modules\*(R" into
the beginnings of a document on Perl porting policies.
.SS "Changes to Existing Documentation"
.IX Subsection "Changes to Existing Documentation"
.IP "\(bu" 4
The various large \fIChanges*\fR files (which listed every change made
to perl over the last 18 years) have been removed, and replaced by a
small file, also called \fIChanges\fR, which just explains how that same
information may be extracted from the git version control system.
.IP "\(bu" 4
\&\fIPorting/patching.pod\fR has been deleted, as it mainly described
interacting with the old Perforce-based repository, which is now obsolete.
Information still relevant has been moved to perlrepository.
.IP "\(bu" 4
The syntax \f(CW\*(C`unless (EXPR) BLOCK else BLOCK\*(C'\fR is now documented as valid,
as is the syntax \f(CW\*(C`unless (EXPR) BLOCK elsif (EXPR) BLOCK ... else
BLOCK\*(C'\fR, although actually using the latter may not be the best idea for
the readability of your source code.
.IP "\(bu" 4
Documented \-X overloading.
.IP "\(bu" 4
Documented that \f(CW\*(C`when()\*(C'\fR treats specially most of the filetest operators
.IP "\(bu" 4
Documented \f(CW\*(C`when\*(C'\fR as a syntax modifier.
.IP "\(bu" 4
Eliminated \*(L"Old Perl threads tutorial\*(R", which described 5005 threads.
.Sp
\&\fIpod/perlthrtut.pod\fR is the same material reworked for ithreads.
.IP "\(bu" 4
Correct previous documentation: v\-strings are not deprecated
.Sp
With version objects, we need them to use \s-1MODULE\s0 \s-1VERSION\s0 syntax. This
patch removes the deprecation notice.
.IP "\(bu" 4
Security contact information is now part of perlsec.
.IP "\(bu" 4
A significant fraction of the core documentation has been updated to
clarify the behavior of Perl's Unicode handling.
.Sp
Much of the remaining core documentation has been reviewed and edited
for clarity, consistent use of language, and to fix the spelling of Tom
Christiansen's name.
.IP "\(bu" 4
The Pod specification (perlpodspec) has been updated to bring the
specification in line with modern usage already supported by most Pod
systems. A parameter string may now follow the format name in a
\&\*(L"begin/end\*(R" region. Links to URIs with a text description are now
allowed. The usage of \f(CW\*(C`L<"section">\*(C'\fR has been marked as
deprecated.
.IP "\(bu" 4
if.pm has been documented in \*(L"use\*(R" in perlfunc as a means to get
conditional loading of modules despite the implicit \s-1BEGIN\s0 block around
\&\f(CW\*(C`use\*(C'\fR.
.IP "\(bu" 4
The documentation for \f(CW$1\fR in perlvar.pod has been clarified.
.IP "\(bu" 4
\&\f(CW\*(C`\eN{U+\f(CIcode point\f(CW}\*(C'\fR is now documented.
.SH "Selected Performance Enhancements"
.IX Header "Selected Performance Enhancements"
.IP "\(bu" 4
A new internal cache means that \f(CW\*(C`isa()\*(C'\fR will often be faster.
.IP "\(bu" 4
The implementation of \f(CW\*(C`C3\*(C'\fR Method Resolution Order has been
optimised \- linearisation for classes with single inheritance is 40%
faster. Performance for multiple inheritance is unchanged.
.IP "\(bu" 4
Under \f(CW\*(C`use locale\*(C'\fR, the locale-relevant information is now cached on
read-only values, such as the list returned by \f(CW\*(C`keys %hash\*(C'\fR. This makes
operations such as \f(CW\*(C`sort keys %hash\*(C'\fR in the scope of \f(CW\*(C`use locale\*(C'\fR
much faster.
.IP "\(bu" 4
Empty \f(CW\*(C`DESTROY\*(C'\fR methods are no longer called.
.IP "\(bu" 4
\&\f(CW\*(C`Perl_sv_utf8_upgrade()\*(C'\fR is now faster.
.IP "\(bu" 4
\&\f(CW\*(C`keys\*(C'\fR on empty hash is now faster.
.IP "\(bu" 4
\&\f(CW\*(C`if (%foo)\*(C'\fR has been optimized to be faster than \f(CW\*(C`if (keys %foo)\*(C'\fR.
.IP "\(bu" 4
The string repetition operator (\f(CW\*(C`$str x $num\*(C'\fR) is now several times
faster when \f(CW$str\fR has length one or \f(CW$num\fR is large.
.IP "\(bu" 4
Reversing an array to itself (as in \f(CW\*(C`@a = reverse @a\*(C'\fR) in void context
now happens in-place and is several orders of magnitude faster than
it used to be. It will also preserve non-existent elements whenever
possible, i.e. for non magical arrays or tied arrays with \f(CW\*(C`EXISTS\*(C'\fR
and \f(CW\*(C`DELETE\*(C'\fR methods.
.SH "Installation and Configuration Improvements"
.IX Header "Installation and Configuration Improvements"
.IP "\(bu" 4
perlapi, perlintern, perlmodlib and perltoc are now all
generated at build time, rather than being shipped as part of the release.
.IP "\(bu" 4
If \f(CW\*(C`vendorlib\*(C'\fR and \f(CW\*(C`vendorarch\*(C'\fR are the same, then they are only added
to \f(CW@INC\fR once.
.IP "\(bu" 4
\&\f(CW$Config{usedevel}\fR and the C\-level \f(CW\*(C`PERL_USE_DEVEL\*(C'\fR are now defined if
perl is built with  \f(CW\*(C`\-Dusedevel\*(C'\fR.
.IP "\(bu" 4
\&\fIConfigure\fR will enable use of \f(CW\*(C`\-fstack\-protector\*(C'\fR, to provide protection
against stack-smashing attacks, if the compiler supports it.
.IP "\(bu" 4
\&\fIConfigure\fR will now determine the correct prototypes for re-entrant
functions and for \f(CW\*(C`gconvert\*(C'\fR if you are using a \*(C+ compiler rather
than a C compiler.
.IP "\(bu" 4
On Unix, if you build from a tree containing a git repository, the
configuration process will note the commit hash you have checked out, for
display in the output of \f(CW\*(C`perl \-v\*(C'\fR and \f(CW\*(C`perl \-V\*(C'\fR. Unpushed local commits
are automatically added to the list of local patches displayed by
\&\f(CW\*(C`perl \-V\*(C'\fR.
.IP "\(bu" 4
Perl now supports SystemTap's \f(CW\*(C`dtrace\*(C'\fR compatibility layer and an
issue with linking \f(CW\*(C`miniperl\*(C'\fR has been fixed in the process.
.IP "\(bu" 4
perldoc now uses \f(CW\*(C`less \-R\*(C'\fR instead of \f(CW\*(C`less\*(C'\fR for improved behaviour
in the face of \f(CW\*(C`groff\*(C'\fR's new usage of \s-1ANSI\s0 escape codes.
.IP "\(bu" 4
\&\f(CW\*(C`perl \-V\*(C'\fR now reports use of the compile-time options \f(CW\*(C`USE_PERL_ATOF\*(C'\fR and
\&\f(CW\*(C`USE_ATTRIBUTES_FOR_PERLIO\*(C'\fR.
.IP "\(bu" 4
As part of the flattening of \fIext\fR, all extensions on all platforms are
built by \fImake_ext.pl\fR. This replaces the Unix-specific
\&\fIext/util/make_ext\fR, VMS-specific \fImake_ext.com\fR and Win32\-specific
\&\fIwin32/buildext.pl\fR.
.SH "Internal Changes"
.IX Header "Internal Changes"
Each release of Perl sees numerous internal changes which shouldn't
affect day to day usage but may still be notable for developers working
with Perl's source code.
.IP "\(bu" 4
The J.R.R. Tolkien quotes at the head of C source file have been checked
and proper citations added, thanks to a patch from Tom Christiansen.
.IP "\(bu" 4
The internal structure of the dual-life modules traditionally found in
the \fIlib/\fR and \fIext/\fR directories in the perl source has changed
significantly. Where possible, dual-lifed modules have been extracted
from \fIlib/\fR and \fIext/\fR.
.Sp
Dual-lifed modules maintained by Perl's developers as part of the Perl
core now live in \fIdist/\fR.  Dual-lifed modules maintained primarily on
\&\s-1CPAN\s0 now live in \fIcpan/\fR.  When reporting a bug in a module located
under \fIcpan/\fR, please send your bug report directly to the module's
bug tracker or author, rather than Perl's bug tracker.
.IP "\(bu" 4
\&\f(CW\*(C`\eN{...}\*(C'\fR now compiles better, always forces \s-1UTF\-8\s0 internal representation
.Sp
Perl's developers have fixed several problems with the recognition of
\&\f(CW\*(C`\eN{...}\*(C'\fR constructs.  As part of this, perl will store any scalar
or regex containing \f(CW\*(C`\eN{\f(CIname\f(CW}\*(C'\fR or \f(CW\*(C`\eN{U+\f(CIcode point\f(CW}\*(C'\fR in its
definition in \s-1UTF\-8\s0 format. (This was true previously for all occurrences
of \f(CW\*(C`\eN{\f(CIname\f(CW}\*(C'\fR that did not use a custom translator, but now it's
always true.)
.IP "\(bu" 4
Perl_magic_setmglob now knows about globs, fixing \s-1RT\s0 #71254.
.IP "\(bu" 4
\&\f(CW\*(C`SVt_RV\*(C'\fR no longer exists. RVs are now stored in IVs.
.IP "\(bu" 4
\&\f(CW\*(C`Perl_vcroak()\*(C'\fR now accepts a null first argument. In addition, a full
audit was made of the \*(L"not \s-1NULL\s0\*(R" compiler annotations, and those for
several other internal functions were corrected.
.IP "\(bu" 4
New macros \f(CW\*(C`dSAVEDERRNO\*(C'\fR, \f(CW\*(C`dSAVE_ERRNO\*(C'\fR, \f(CW\*(C`SAVE_ERRNO\*(C'\fR, \f(CW\*(C`RESTORE_ERRNO\*(C'\fR
have been added to formalise the temporary saving of the \f(CW\*(C`errno\*(C'\fR
variable.
.IP "\(bu" 4
The function \f(CW\*(C`Perl_sv_insert_flags\*(C'\fR has been added to augment
\&\f(CW\*(C`Perl_sv_insert\*(C'\fR.
.IP "\(bu" 4
The function \f(CW\*(C`Perl_newSV_type(type)\*(C'\fR has been added, equivalent to
\&\f(CW\*(C`Perl_newSV()\*(C'\fR followed by \f(CW\*(C`Perl_sv_upgrade(type)\*(C'\fR.
.IP "\(bu" 4
The function \f(CW\*(C`Perl_newSVpvn_flags()\*(C'\fR has been added, equivalent to
\&\f(CW\*(C`Perl_newSVpvn()\*(C'\fR and then performing the action relevant to the flag.
.Sp
Two flag bits are currently supported.
.RS 4
.IP "\(bu" 4
\&\f(CW\*(C`SVf_UTF8\*(C'\fR will call \f(CW\*(C`SvUTF8_on()\*(C'\fR for you. (Note that this does
not convert an sequence of \s-1ISO\s0 8859\-1 characters to \s-1UTF\-8\s0). A wrapper,
\&\f(CW\*(C`newSVpvn_utf8()\*(C'\fR is available for this.
.IP "\(bu" 4
\&\f(CW\*(C`SVs_TEMP\*(C'\fR now calls \f(CW\*(C`Perl_sv_2mortal()\*(C'\fR on the new \s-1SV\s0.
.RE
.RS 4
.Sp
There is also a wrapper that takes constant strings, \f(CW\*(C`newSVpvs_flags()\*(C'\fR.
.RE
.IP "\(bu" 4
The function \f(CW\*(C`Perl_croak_xs_usage\*(C'\fR has been added as a wrapper to
\&\f(CW\*(C`Perl_croak\*(C'\fR.
.IP "\(bu" 4
Perl now exports the functions \f(CW\*(C`PerlIO_find_layer\*(C'\fR and \f(CW\*(C`PerlIO_list_alloc\*(C'\fR.
.IP "\(bu" 4
\&\f(CW\*(C`PL_na\*(C'\fR has been exterminated from the core code, replaced by local
\&\s-1STRLEN\s0 temporaries, or \f(CW\*(C`*_nolen()\*(C'\fR calls. Either approach is faster than
\&\f(CW\*(C`PL_na\*(C'\fR, which is a pointer dereference into the interpreter structure
under ithreads, and a global variable otherwise.
.IP "\(bu" 4
\&\f(CW\*(C`Perl_mg_free()\*(C'\fR used to leave freed memory accessible via \f(CW\*(C`SvMAGIC()\*(C'\fR
on the scalar. It now updates the linked list to remove each piece of
magic as it is freed.
.IP "\(bu" 4
Under ithreads, the regex in \f(CW\*(C`PL_reg_curpm\*(C'\fR is now reference
counted. This eliminates a lot of hackish workarounds to cope with it
not being reference counted.
.IP "\(bu" 4
\&\f(CW\*(C`Perl_mg_magical()\*(C'\fR would sometimes incorrectly turn on \f(CW\*(C`SvRMAGICAL()\*(C'\fR.
This has been fixed.
.IP "\(bu" 4
The \fIpublic\fR \s-1IV\s0 and \s-1NV\s0 flags are now not set if the string value has
trailing \*(L"garbage\*(R". This behaviour is consistent with not setting the
public \s-1IV\s0 or \s-1NV\s0 flags if the value is out of range for the type.
.IP "\(bu" 4
Uses of \f(CW\*(C`Nullav\*(C'\fR, \f(CW\*(C`Nullcv\*(C'\fR, \f(CW\*(C`Nullhv\*(C'\fR, \f(CW\*(C`Nullop\*(C'\fR, \f(CW\*(C`Nullsv\*(C'\fR etc have
been replaced by \f(CW\*(C`NULL\*(C'\fR in the core code, and non-dual-life modules,
as \f(CW\*(C`NULL\*(C'\fR is clearer to those unfamiliar with the core code.
.IP "\(bu" 4
A macro \f(CWMUTABLE_PTR(p)\fR has been added, which on (non-pedantic) gcc will
not cast away \f(CW\*(C`const\*(C'\fR, returning a \f(CW\*(C`void *\*(C'\fR. Macros \f(CW\*(C`MUTABLE_SV(av)\*(C'\fR,
\&\f(CW\*(C`MUTABLE_SV(cv)\*(C'\fR etc build on this, casting to \f(CW\*(C`AV *\*(C'\fR etc without
casting away \f(CW\*(C`const\*(C'\fR. This allows proper compile-time auditing of
\&\f(CW\*(C`const\*(C'\fR correctness in the core, and helped picked up some errors
(now fixed).
.IP "\(bu" 4
Macros \f(CW\*(C`mPUSHs()\*(C'\fR and \f(CW\*(C`mXPUSHs()\*(C'\fR have been added, for pushing SVs on the
stack and mortalizing them.
.IP "\(bu" 4
Use of the private structure \f(CW\*(C`mro_meta\*(C'\fR has changed slightly. Nothing
outside the core should be accessing this directly anyway.
.IP "\(bu" 4
A new tool, \fIPorting/expand\-macro.pl\fR has been added, that allows you
to view how a C preprocessor macro would be expanded when compiled.
This is handy when trying to decode the macro hell that is the perl
guts.
.SH "Testing"
.IX Header "Testing"
.SS "Testing improvements"
.IX Subsection "Testing improvements"
.IP "Parallel tests" 4
.IX Item "Parallel tests"
The core distribution can now run its regression tests in parallel on
Unix-like platforms. Instead of running \f(CW\*(C`make test\*(C'\fR, set \f(CW\*(C`TEST_JOBS\*(C'\fR in
your environment to the number of tests to run in parallel, and run
\&\f(CW\*(C`make test_harness\*(C'\fR. On a Bourne-like shell, this can be done as
.Sp
.Vb 1
\&    TEST_JOBS=3 make test_harness  # Run 3 tests in parallel
.Ve
.Sp
An environment variable is used, rather than parallel make itself, because
TAP::Harness needs to be able to schedule individual non-conflicting test
scripts itself, and there is no standard interface to \f(CW\*(C`make\*(C'\fR utilities to
interact with their job schedulers.
.Sp
Note that currently some test scripts may fail when run in parallel (most
notably \f(CW\*(C`ext/IO/t/io_dir.t\*(C'\fR). If necessary run just the failing scripts
again sequentially and see if the failures go away.
.IP "Test harness flexibility" 4
.IX Item "Test harness flexibility"
It's now possible to override \f(CW\*(C`PERL5OPT\*(C'\fR and friends in \fIt/TEST\fR
.IP "Test watchdog" 4
.IX Item "Test watchdog"
Several tests that have the potential to hang forever if they fail now
incorporate a \*(L"watchdog\*(R" functionality that will kill them after a timeout,
which helps ensure that \f(CW\*(C`make test\*(C'\fR and \f(CW\*(C`make test_harness\*(C'\fR run to
completion automatically.
.SS "New Tests"
.IX Subsection "New Tests"
Perl's developers have added a number of new tests to the core.
In addition to the items listed below, many modules updated from \s-1CPAN\s0
incorporate new tests.
.IP "\(bu" 4
Significant cleanups to core tests to ensure that language and
interpreter features are not used before they're tested.
.IP "\(bu" 4
\&\f(CW\*(C`make test_porting\*(C'\fR now runs a number of important pre-commit checks
which might be of use to anyone working on the Perl core.
.IP "\(bu" 4
\&\fIt/porting/podcheck.t\fR automatically checks the well-formedness of
\&\s-1POD\s0 found in all .pl, .pm and .pod files in the \fI\s-1MANIFEST\s0\fR, other than in
dual-lifed modules which are primarily maintained outside the Perl core.
.IP "\(bu" 4
\&\fIt/porting/manifest.t\fR now tests that all files listed in \s-1MANIFEST\s0
are present.
.IP "\(bu" 4
\&\fIt/op/while_readdir.t\fR tests that a bare readdir in while loop sets \f(CW$_\fR.
.IP "\(bu" 4
\&\fIt/comp/retainedlines.t\fR checks that the debugger can retain source
lines from \f(CW\*(C`eval\*(C'\fR.
.IP "\(bu" 4
\&\fIt/io/perlio_fail.t\fR checks that bad layers fail.
.IP "\(bu" 4
\&\fIt/io/perlio_leaks.t\fR checks that PerlIO layers are not leaking.
.IP "\(bu" 4
\&\fIt/io/perlio_open.t\fR checks that certain special forms of open work.
.IP "\(bu" 4
\&\fIt/io/perlio.t\fR includes general PerlIO tests.
.IP "\(bu" 4
\&\fIt/io/pvbm.t\fR checks that there is no unexpected interaction between
the internal types \f(CW\*(C`PVBM\*(C'\fR and \f(CW\*(C`PVGV\*(C'\fR.
.IP "\(bu" 4
\&\fIt/mro/package_aliases.t\fR checks that mro works properly in the presence
of aliased packages.
.IP "\(bu" 4
\&\fIt/op/dbm.t\fR tests \f(CW\*(C`dbmopen\*(C'\fR and \f(CW\*(C`dbmclose\*(C'\fR.
.IP "\(bu" 4
\&\fIt/op/index_thr.t\fR tests the interaction of \f(CW\*(C`index\*(C'\fR and threads.
.IP "\(bu" 4
\&\fIt/op/pat_thr.t\fR tests the interaction of esoteric patterns and threads.
.IP "\(bu" 4
\&\fIt/op/qr_gc.t\fR tests that \f(CW\*(C`qr\*(C'\fR doesn't leak.
.IP "\(bu" 4
\&\fIt/op/reg_email_thr.t\fR tests the interaction of regex recursion and threads.
.IP "\(bu" 4
\&\fIt/op/regexp_qr_embed_thr.t\fR tests the interaction of patterns with
embedded \f(CW\*(C`qr//\*(C'\fR and threads.
.IP "\(bu" 4
\&\fIt/op/regexp_unicode_prop.t\fR tests Unicode properties in regular
expressions.
.IP "\(bu" 4
\&\fIt/op/regexp_unicode_prop_thr.t\fR tests the interaction of Unicode
properties and threads.
.IP "\(bu" 4
\&\fIt/op/reg_nc_tie.t\fR tests the tied methods of \f(CW\*(C`Tie::Hash::NamedCapture\*(C'\fR.
.IP "\(bu" 4
\&\fIt/op/reg_posixcc.t\fR checks that \s-1POSIX\s0 character classes behave
consistently.
.IP "\(bu" 4
\&\fIt/op/re.t\fR checks that exportable \f(CW\*(C`re\*(C'\fR functions in \fIuniversal.c\fR work.
.IP "\(bu" 4
\&\fIt/op/setpgrpstack.t\fR checks that \f(CW\*(C`setpgrp\*(C'\fR works.
.IP "\(bu" 4
\&\fIt/op/substr_thr.t\fR tests the interaction of \f(CW\*(C`substr\*(C'\fR and threads.
.IP "\(bu" 4
\&\fIt/op/upgrade.t\fR checks that upgrading and assigning scalars works.
.IP "\(bu" 4
\&\fIt/uni/lex_utf8.t\fR checks that Unicode in the lexer works.
.IP "\(bu" 4
\&\fIt/uni/tie.t\fR checks that Unicode and \f(CW\*(C`tie\*(C'\fR work.
.IP "\(bu" 4
\&\fIt/comp/final_line_num.t\fR tests whether line numbers are correct at \s-1EOF\s0
.IP "\(bu" 4
\&\fIt/comp/form_scope.t\fR tests format scoping.
.IP "\(bu" 4
\&\fIt/comp/line_debug.t\fR tests whether \f(CW\*(C`@{"_<$file"}\*(C'\fR works.
.IP "\(bu" 4
\&\fIt/op/filetest_t.t\fR tests if \-t file test works.
.IP "\(bu" 4
\&\fIt/op/qr.t\fR tests \f(CW\*(C`qr\*(C'\fR.
.IP "\(bu" 4
\&\fIt/op/utf8cache.t\fR tests malfunctions of the utf8 cache.
.IP "\(bu" 4
\&\fIt/re/uniprops.t\fR test unicodes \f(CW\*(C`\ep{}\*(C'\fR regex constructs.
.IP "\(bu" 4
\&\fIt/op/filehandle.t\fR tests some suitably portable filetest operators
to check that they work as expected, particularly in the light of some
internal changes made in how filehandles are blessed.
.IP "\(bu" 4
\&\fIt/op/time_loop.t\fR tests that unix times greater than \f(CW\*(C`2**63\*(C'\fR, which
can now be handed to \f(CW\*(C`gmtime\*(C'\fR and \f(CW\*(C`localtime\*(C'\fR, do not cause an internal
overflow or an excessively long loop.
.SH "New or Changed Diagnostics"
.IX Header "New or Changed Diagnostics"
.SS "New Diagnostics"
.IX Subsection "New Diagnostics"
.IP "\(bu" 4
\&\s-1SV\s0 allocation tracing has been added to the diagnostics enabled by \f(CW\*(C`\-Dm\*(C'\fR.
The tracing can alternatively output via the \f(CW\*(C`PERL_MEM_LOG\*(C'\fR mechanism, if
that was enabled when the \fIperl\fR binary was compiled.
.IP "\(bu" 4
Smartmatch resolution tracing has been added as a new diagnostic. Use
\&\f(CW\*(C`\-DM\*(C'\fR to enable it.
.IP "\(bu" 4
A new debugging flag \f(CW\*(C`\-DB\*(C'\fR now dumps subroutine definitions, leaving
\&\f(CW\*(C`\-Dx\*(C'\fR for its original purpose of dumping syntax trees.
.IP "\(bu" 4
Perl 5.12 provides a number of new diagnostic messages to help you write
better code.  See perldiag for details of these new messages.
.RS 4
.IP "\(bu" 4
\&\f(CW\*(C`Bad plugin affecting keyword \*(Aq%s\*(Aq\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`gmtime(%.0f) too large\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`Lexing code attempted to stuff non\-Latin\-1 character into Latin\-1 input\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`Lexing code internal error (%s)\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`localtime(%.0f) too large\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`Overloaded dereference did not return a reference\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`Overloaded qr did not return a REGEXP\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`Perl_pmflag() is deprecated, and will be removed from the XS API\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`lvalue attribute ignored after the subroutine has been defined\*(C'\fR
.Sp
This new warning is issued when one attempts to mark a subroutine as
lvalue after it has been defined.
.IP "\(bu" 4
Perl now warns you if \f(CW\*(C`++\*(C'\fR or \f(CW\*(C`\-\-\*(C'\fR are unable to change the value
because it's beyond the limit of representation.
.Sp
This uses a new warnings category: \*(L"imprecision\*(R".
.IP "\(bu" 4
\&\f(CW\*(C`lc\*(C'\fR, \f(CW\*(C`uc\*(C'\fR, \f(CW\*(C`lcfirst\*(C'\fR, and \f(CW\*(C`ucfirst\*(C'\fR warn when passed undef.
.IP "\(bu" 4
\&\f(CW\*(C`Show constant in "Useless use of a constant in void context"\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`Prototype after \*(Aq%s\*(Aq\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`panic: sv_chop %s\*(C'\fR
.Sp
This new fatal error occurs when the C routine \f(CW\*(C`Perl_sv_chop()\*(C'\fR was
passed a position that is not within the scalar's string buffer. This
could be caused by buggy \s-1XS\s0 code, and at this point recovery is not
possible.
.IP "\(bu" 4
The fatal error \f(CW\*(C`Malformed UTF\-8 returned by \eN\*(C'\fR is now produced if the
\&\f(CW\*(C`charnames\*(C'\fR handler returns malformed \s-1UTF\-8\s0.
.IP "\(bu" 4
If an unresolved named character or sequence was encountered when
compiling a regex pattern then the fatal error \f(CW\*(C`\eN{NAME} must be resolved
by the lexer\*(C'\fR is now produced. This can happen, for example, when using a
single-quotish context like \f(CW\*(C`$re = \*(Aq\eN{SPACE}\*(Aq; /$re/;\*(C'\fR. See perldiag
for more examples of how the lexer can get bypassed.
.IP "\(bu" 4
\&\f(CW\*(C`Invalid hexadecimal number in \eN{U+...}\*(C'\fR is a new fatal error
triggered when the character constant represented by \f(CW\*(C`...\*(C'\fR is not a
valid hexadecimal number.
.IP "\(bu" 4
The new meaning of \f(CW\*(C`\eN\*(C'\fR as \f(CW\*(C`[^\en]\*(C'\fR is not valid in a bracketed character
class, just like \f(CW\*(C`.\*(C'\fR in a character class loses its special meaning,
and will cause the fatal error \f(CW\*(C`\eN in a character class must be a named
character: \eN{...}\*(C'\fR.
.IP "\(bu" 4
The rules on what is legal for the \f(CW\*(C`...\*(C'\fR in \f(CW\*(C`\eN{...}\*(C'\fR have been
tightened up so that unless the \f(CW\*(C`...\*(C'\fR begins with an alphabetic
character and continues with a combination of alphanumerics, dashes,
spaces, parentheses or colons then the warning \f(CW\*(C`Deprecated character(s)
in \eN{...} starting at \*(Aq%s\*(Aq\*(C'\fR is now issued.
.IP "\(bu" 4
The warning \f(CW\*(C`Using just the first characters returned by \eN{}\*(C'\fR will
be issued if the \f(CW\*(C`charnames\*(C'\fR handler returns a sequence of characters
which exceeds the limit of the number of characters that can be used. The
message will indicate which characters were used and which were discarded.
.RE
.RS 4
.RE
.SS "Changed Diagnostics"
.IX Subsection "Changed Diagnostics"
A number of existing diagnostic messages have been improved or corrected:
.IP "\(bu" 4
A new warning category \f(CW\*(C`illegalproto\*(C'\fR allows finer-grained control of
warnings around function prototypes.
.Sp
The two warnings:
.RS 4
.ie n .IP """Illegal character in prototype for %s : %s""" 4
.el .IP "\f(CWIllegal character in prototype for %s : %s\fR" 4
.IX Item "Illegal character in prototype for %s : %s"
.PD 0
.ie n .IP """Prototype after \*(Aq%c\*(Aq for %s : %s""" 4
.el .IP "\f(CWPrototype after \*(Aq%c\*(Aq for %s : %s\fR" 4
.IX Item "Prototype after %c for %s : %s"
.RE
.RS 4
.PD
.Sp
have been moved from the \f(CW\*(C`syntax\*(C'\fR top-level warnings category into a new
first-level category, \f(CW\*(C`illegalproto\*(C'\fR. These two warnings are currently
the only ones emitted during parsing of an invalid/illegal prototype,
so one can now use
.Sp
.Vb 1
\&  no warnings \*(Aqillegalproto\*(Aq;
.Ve
.Sp
to suppress only those, but not other syntax-related warnings. Warnings
where prototypes are changed, ignored, or not met are still in the
\&\f(CW\*(C`prototype\*(C'\fR category as before.
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Deep recursion on subroutine "%s"\*(C'\fR
.Sp
It is now possible to change the depth threshold for this warning from the
default of 100, by recompiling the \fIperl\fR binary, setting the C
pre-processor macro \f(CW\*(C`PERL_SUB_DEPTH_WARN\*(C'\fR to the desired value.
.IP "\(bu" 4
\&\f(CW\*(C`Illegal character in prototype\*(C'\fR warning is now more precise
when reporting illegal characters after _
.IP "\(bu" 4
mro merging error messages are now very similar to those produced by
Algorithm::C3.
.IP "\(bu" 4
Amelioration of the error message \*(L"Unrecognized character \f(CW%s\fR in column \f(CW%d\fR\*(R"
.Sp
Changes the error message to \*(L"Unrecognized character \f(CW%s\fR; marked by <\-\-
\&\s-1HERE\s0 after \f(CW%s\fR<\-\- \s-1HERE\s0 near column \f(CW%d\fR\*(R". This should make it a little
simpler to spot and correct the suspicious character.
.IP "\(bu" 4
Perl now explicitly points to \f(CW$.\fR when it causes an uninitialized
warning for ranges in scalar context.
.IP "\(bu" 4
\&\f(CW\*(C`split\*(C'\fR now warns when called in void context.
.IP "\(bu" 4
\&\f(CW\*(C`printf\*(C'\fR\-style functions called with too few arguments will now issue the
warning \f(CW"Missing argument in %s"\fR [perl #71000]
.IP "\(bu" 4
Perl now properly returns a syntax error instead of segfaulting
if \f(CW\*(C`each\*(C'\fR, \f(CW\*(C`keys\*(C'\fR, or \f(CW\*(C`values\*(C'\fR is used without an argument.
.IP "\(bu" 4
\&\f(CW\*(C`tell()\*(C'\fR now fails properly if called without an argument and when no
previous file was read.
.Sp
\&\f(CW\*(C`tell()\*(C'\fR now returns \f(CW\*(C`\-1\*(C'\fR, and sets errno to \f(CW\*(C`EBADF\*(C'\fR, thus restoring
the 5.8.x behaviour.
.IP "\(bu" 4
\&\f(CW\*(C`overload\*(C'\fR no longer implicitly unsets fallback on repeated 'use
overload' lines.
.IP "\(bu" 4
\&\fIPOSIX::strftime()\fR can now handle Unicode characters in the format string.
.IP "\(bu" 4
The \f(CW\*(C`syntax\*(C'\fR category was removed from 5 warnings that should only be in
\&\f(CW\*(C`deprecated\*(C'\fR.
.IP "\(bu" 4
Three fatal \f(CW\*(C`pack\*(C'\fR/\f(CW\*(C`unpack\*(C'\fR error messages have been normalized to
\&\f(CW\*(C`panic: %s\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`Unicode character is illegal\*(C'\fR has been rephrased to be more accurate
.Sp
It now reads \f(CW\*(C`Unicode non\-character is illegal in interchange\*(C'\fR and the
perldiag documentation has been expanded a bit.
.IP "\(bu" 4
Currently, all but the first of the several characters that the
\&\f(CW\*(C`charnames\*(C'\fR handler may return are discarded when used in a regular
expression pattern bracketed character class. If this happens then the
warning \f(CW\*(C`Using just the first character returned by \eN{} in character
class\*(C'\fR will be issued.
.IP "\(bu" 4
The warning \f(CW\*(C`Missing right brace on \eN{} or unescaped left brace after
\&\eN.  Assuming the latter\*(C'\fR will be issued if Perl encounters a \f(CW\*(C`\eN{\*(C'\fR
but doesn't find a matching \f(CW\*(C`}\*(C'\fR. In this case Perl doesn't know if it
was mistakenly omitted, or if \*(L"match non-newline\*(R" followed by "match
a \f(CW\*(C`{\*(C'\fR" was desired.  It assumes the latter because that is actually a
valid interpretation as written, unlike the other case.  If you meant
the former, you need to add the matching right brace.  If you did mean
the latter, you can silence this warning by writing instead \f(CW\*(C`\eN\e{\*(C'\fR.
.IP "\(bu" 4
\&\f(CW\*(C`gmtime\*(C'\fR and \f(CW\*(C`localtime\*(C'\fR called with numbers smaller than they can
reliably handle will now issue the warnings \f(CW\*(C`gmtime(%.0f) too small\*(C'\fR
and \f(CW\*(C`localtime(%.0f) too small\*(C'\fR.
.PP
The following diagnostic messages have been removed:
.IP "\(bu" 4
\&\f(CW\*(C`Runaway format\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`Can\*(Aqt locate package %s for the parents of %s\*(C'\fR
.Sp
In general this warning it only got produced in
conjunction with other warnings, and removing it allowed an \s-1ISA\s0 lookup
optimisation to be added.
.IP "\(bu" 4
\&\f(CW\*(C`v\-string in use/require is non\-portable\*(C'\fR
.SH "Utility Changes"
.IX Header "Utility Changes"
.IP "\(bu" 4
\&\fIh2ph\fR now looks in \f(CW\*(C`include\-fixed\*(C'\fR too, which is a recent addition
to gcc's search path.
.IP "\(bu" 4
\&\fIh2xs\fR no longer incorrectly treats enum values like macros.
It also now handles \*(C+ style comments (\f(CW\*(C`//\*(C'\fR) properly in enums.
.IP "\(bu" 4
\&\fIperl5db.pl\fR now supports \f(CW\*(C`LVALUE\*(C'\fR subroutines.  Additionally, the
debugger now correctly handles proxy constant subroutines, and
subroutine stubs.
.IP "\(bu" 4
\&\fIperlbug\fR now uses \f(CW%Module::CoreList::bug_tracker\fR to print out
upstream bug tracker URLs.  If a user identifies a particular module
as the topic of their bug report and we're able to divine the \s-1URL\s0 for
its upstream bug tracker, perlbug now provide a message to the user
explaining that the core copies the \s-1CPAN\s0 version directly, and provide
the \s-1URL\s0 for reporting the bug directly to the upstream author.
.Sp
\&\fIperlbug\fR no longer reports \*(L"Message sent\*(R" when it hasn't actually sent
the message
.IP "\(bu" 4
\&\fIperlthanks\fR is a new utility for sending non-bug-reports to the
authors and maintainers of Perl. Getting nothing but bug reports can
become a bit demoralising. If Perl 5.12 works well for you, please try
out \fIperlthanks\fR. It will make the developers smile.
.IP "\(bu" 4
Perl's developers have fixed bugs in \fIa2p\fR having to do with the
\&\f(CW\*(C`match()\*(C'\fR operator in list context.  Additionally, \fIa2p\fR no longer
generates code that uses the \f(CW$[\fR variable.
.SH "Selected Bug Fixes"
.IX Header "Selected Bug Fixes"
.IP "\(bu" 4
U+0FFFF is now a legal character in regular expressions.
.IP "\(bu" 4
pp_qr now always returns a new regexp \s-1SV\s0. Resolves \s-1RT\s0 #69852.
.Sp
Instead of returning a(nother) reference to the (pre-compiled) regexp
in the optree, use \fIreg_temp_copy()\fR to create a copy of it, and return a
reference to that. This resolves issues about Regexp::DESTROY not being
called in a timely fashion (the original bug tracked by \s-1RT\s0 #69852), as
well as bugs related to blessing regexps, and of assigning to regexps,
as described in correspondence added to the ticket.
.Sp
It transpires that we also need to undo the \fISvPVX()\fR sharing when ithreads
cloning a Regexp \s-1SV\s0, because mother_re is set to \s-1NULL\s0, instead of a
cloned copy of the mother_re. This change might fix bugs with regexps
and threads in certain other situations, but as yet neither tests nor
bug reports have indicated any problems, so it might not actually be an
edge case that it's possible to reach.
.IP "\(bu" 4
Several compilation errors and segfaults when perl was built with \f(CW\*(C`\-Dmad\*(C'\fR
were fixed.
.IP "\(bu" 4
Fixes for lexer \s-1API\s0 changes in 5.11.2 which broke NYTProf's savesrc option.
.IP "\(bu" 4
\&\f(CW\*(C`\-t\*(C'\fR should only return \s-1TRUE\s0 for file handles connected to a \s-1TTY\s0
.Sp
The Microsoft C version of \f(CW\*(C`isatty()\*(C'\fR returns \s-1TRUE\s0 for all character mode
devices, including the \fI/dev/null\fR\-style \*(L"nul\*(R" device and printers like
\&\*(L"lpt1\*(R".
.IP "\(bu" 4
Fixed a regression caused by commit fafafbaf which caused a panic during
parameter passing [perl #70171]
.IP "\(bu" 4
On systems which in-place edits without backup files, \-i'*' now works as
the documentation says it does [perl #70802]
.IP "\(bu" 4
Saving and restoring magic flags no longer loses readonly flag.
.IP "\(bu" 4
The malformed syntax \f(CW\*(C`grep EXPR LIST\*(C'\fR (note the missing comma) no longer
causes abrupt and total failure.
.IP "\(bu" 4
Regular expressions compiled with \f(CW\*(C`qr{}\*(C'\fR literals properly set \f(CW\*(C`$\*(Aq\*(C'\fR when
matching again.
.IP "\(bu" 4
Using named subroutines with \f(CW\*(C`sort\*(C'\fR should no longer lead to bus errors
[perl #71076]
.IP "\(bu" 4
Numerous bugfixes catch small issues caused by the recently-added Lexer \s-1API\s0.
.IP "\(bu" 4
Smart match against \f(CW@_\fR sometimes gave false negatives. [perl #71078]
.IP "\(bu" 4
\&\f(CW$@\fR may now be assigned a read-only value (without error or busting
the stack).
.IP "\(bu" 4
\&\f(CW\*(C`sort\*(C'\fR called recursively from within an active comparison subroutine no
longer causes a bus error if run multiple times. [perl #71076]
.IP "\(bu" 4
Tie::Hash::NamedCapture::* will not abort if passed bad input (\s-1RT\s0 #71828)
.IP "\(bu" 4
\&\f(CW@_\fR and \f(CW$_\fR no longer leak under threads (\s-1RT\s0 #34342 and #41138, also
#70602, #70974)
.IP "\(bu" 4
\&\f(CW\*(C`\-I\*(C'\fR on shebang line now adds directories in front of \f(CW@INC\fR
as documented, and as does \f(CW\*(C`\-I\*(C'\fR when specified on the command-line.
.IP "\(bu" 4
\&\f(CW\*(C`kill\*(C'\fR is now fatal when called on non-numeric process identifiers.
Previously, an \f(CW\*(C`undef\*(C'\fR process identifier would be interpreted as a
request to kill process 0, which would terminate the current process
group on \s-1POSIX\s0 systems. Since process identifiers are always integers,
killing a non-numeric process is now fatal.
.IP "\(bu" 4
5.10.0 inadvertently disabled an optimisation, which caused a measurable
performance drop in list assignment, such as is often used to assign
function parameters from \f(CW@_\fR. The optimisation has been re-instated, and
the performance regression fixed. (This fix is also present in 5.10.1)
.IP "\(bu" 4
Fixed memory leak on \f(CW\*(C`while (1) { map 1, 1 }\*(C'\fR [\s-1RT\s0 #53038].
.IP "\(bu" 4
Some potential coredumps in PerlIO fixed [\s-1RT\s0 #57322,54828].
.IP "\(bu" 4
The debugger now works with lvalue subroutines.
.IP "\(bu" 4
The debugger's \f(CW\*(C`m\*(C'\fR command was broken on modules that defined constants
[\s-1RT\s0 #61222].
.IP "\(bu" 4
\&\f(CW\*(C`crypt\*(C'\fR and string complement could return tainted values for untainted
arguments [\s-1RT\s0 #59998].
.IP "\(bu" 4
The \f(CW\*(C`\-i\*(C'\fR\fI.suffix\fR command-line switch now recreates the file using
restricted permissions, before changing its mode to match the original
file. This eliminates a potential race condition [\s-1RT\s0 #60904].
.IP "\(bu" 4
On some Unix systems, the value in \f(CW$?\fR would not have the top bit set
(\f(CW\*(C`$? & 128\*(C'\fR) even if the child core dumped.
.IP "\(bu" 4
Under some circumstances, \f(CW$^R\fR could incorrectly become undefined
[\s-1RT\s0 #57042].
.IP "\(bu" 4
In the \s-1XS\s0 \s-1API\s0, various hash functions, when passed a pre-computed hash where
the key is \s-1UTF\-8\s0, might result in an incorrect lookup.
.IP "\(bu" 4
\&\s-1XS\s0 code including \fI\s-1XSUB\s0.h\fR before \fIperl.h\fR gave a compile-time error
[\s-1RT\s0 #57176].
.IP "\(bu" 4
\&\f(CW\*(C`$object\->isa(\*(AqFoo\*(Aq)\*(C'\fR would report false if the package \f(CW\*(C`Foo\*(C'\fR
didn't exist, even if the object's \f(CW@ISA\fR contained \f(CW\*(C`Foo\*(C'\fR.
.IP "\(bu" 4
Various bugs in the new-to 5.10.0 mro code, triggered by manipulating
\&\f(CW@ISA\fR, have been found and fixed.
.IP "\(bu" 4
Bitwise operations on references could crash the interpreter, e.g.
\&\f(CW\*(C`$x=\e$y; $x |= "foo"\*(C'\fR [\s-1RT\s0 #54956].
.IP "\(bu" 4
Patterns including alternation might be sensitive to the internal \s-1UTF\-8\s0
representation, e.g.
.Sp
.Vb 3
\&    my $byte = chr(192);
\&    my $utf8 = chr(192); utf8::upgrade($utf8);
\&    $utf8 =~ /$byte|X}/i;       # failed in 5.10.0
.Ve
.IP "\(bu" 4
Within UTF8\-encoded Perl source files (i.e. where \f(CW\*(C`use utf8\*(C'\fR is in
effect), double-quoted literal strings could be corrupted where a \f(CW\*(C`\exNN\*(C'\fR,
\&\f(CW\*(C`\e0NNN\*(C'\fR or \f(CW\*(C`\eN{}\*(C'\fR is followed by a literal character with ordinal value
greater than 255 [\s-1RT\s0 #59908].
.IP "\(bu" 4
\&\f(CW\*(C`B::Deparse\*(C'\fR failed to correctly deparse various constructs:
\&\f(CW\*(C`readpipe STRING\*(C'\fR [\s-1RT\s0 #62428], \f(CW\*(C`CORE::require(STRING)\*(C'\fR [\s-1RT\s0 #62488],
\&\f(CW\*(C`sub foo(_)\*(C'\fR [\s-1RT\s0 #62484].
.IP "\(bu" 4
Using \f(CW\*(C`setpgrp\*(C'\fR with no arguments could corrupt the perl stack.
.IP "\(bu" 4
The block form of \f(CW\*(C`eval\*(C'\fR is now specifically trappable by \f(CW\*(C`Safe\*(C'\fR and
\&\f(CW\*(C`ops\*(C'\fR. Previously it was erroneously treated like string \f(CW\*(C`eval\*(C'\fR.
.IP "\(bu" 4
In 5.10.0, the two characters \f(CW\*(C`[~\*(C'\fR were sometimes parsed as the smart
match operator (\f(CW\*(C`~~\*(C'\fR) [\s-1RT\s0 #63854].
.IP "\(bu" 4
In 5.10.0, the \f(CW\*(C`*\*(C'\fR quantifier in patterns was sometimes treated as
\&\f(CW\*(C`{0,32767}\*(C'\fR [\s-1RT\s0 #60034, #60464]. For example, this match would fail:
.Sp
.Vb 1
\&    ("ab" x 32768) =~ /^(ab)*$/
.Ve
.IP "\(bu" 4
\&\f(CW\*(C`shmget\*(C'\fR was limited to a 32 bit segment size on a 64 bit \s-1OS\s0 [\s-1RT\s0 #63924].
.IP "\(bu" 4
Using \f(CW\*(C`next\*(C'\fR or \f(CW\*(C`last\*(C'\fR to exit a \f(CW\*(C`given\*(C'\fR block no longer produces a
spurious warning like the following:
.Sp
.Vb 1
\&    Exiting given via last at foo.pl line 123
.Ve
.IP "\(bu" 4
Assigning a format to a glob could corrupt the format; e.g.:
.Sp
.Vb 1
\&     *bar=*foo{FORMAT}; # foo format now bad
.Ve
.IP "\(bu" 4
Attempting to coerce a typeglob to a string or number could cause an
assertion failure. The correct error message is now generated,
\&\f(CW\*(C`Can\*(Aqt coerce GLOB to \f(CI$type\f(CW\*(C'\fR.
.IP "\(bu" 4
Under \f(CW\*(C`use filetest \*(Aqaccess\*(Aq\*(C'\fR, \f(CW\*(C`\-x\*(C'\fR was using the wrong access
mode. This has been fixed [\s-1RT\s0 #49003].
.IP "\(bu" 4
\&\f(CW\*(C`length\*(C'\fR on a tied scalar that returned a Unicode value would not be
correct the first time. This has been fixed.
.IP "\(bu" 4
Using an array \f(CW\*(C`tie\*(C'\fR inside in array \f(CW\*(C`tie\*(C'\fR could \s-1SEGV\s0. This has been
fixed. [\s-1RT\s0 #51636]
.IP "\(bu" 4
A race condition inside \f(CW\*(C`PerlIOStdio_close()\*(C'\fR has been identified and
fixed. This used to cause various threading issues, including SEGVs.
.IP "\(bu" 4
In \f(CW\*(C`unpack\*(C'\fR, the use of \f(CW\*(C`()\*(C'\fR groups in scalar context was internally
placing a list on the interpreter's stack, which manifested in various
ways, including SEGVs. This is now fixed [\s-1RT\s0 #50256].
.IP "\(bu" 4
Magic was called twice in \f(CW\*(C`substr\*(C'\fR, \f(CW\*(C`\e&$x\*(C'\fR, \f(CW\*(C`tie $x, $m\*(C'\fR and \f(CW\*(C`chop\*(C'\fR.
These have all been fixed.
.IP "\(bu" 4
A 5.10.0 optimisation to clear the temporary stack within the implicit
loop of \f(CW\*(C`s///ge\*(C'\fR has been reverted, as it turned out to be the cause of
obscure bugs in seemingly unrelated parts of the interpreter [commit
ef0d4e17921ee3de].
.IP "\(bu" 4
The line numbers for warnings inside \f(CW\*(C`elsif\*(C'\fR are now correct.
.IP "\(bu" 4
The \f(CW\*(C`..\*(C'\fR operator now works correctly with ranges whose ends are at or
close to the values of the smallest and largest integers.
.IP "\(bu" 4
\&\f(CW\*(C`binmode STDIN, \*(Aq:raw\*(Aq\*(C'\fR could lead to segmentation faults on some platforms.
This has been fixed [\s-1RT\s0 #54828].
.IP "\(bu" 4
An off-by-one error meant that \f(CW\*(C`index $str, ...\*(C'\fR was effectively being
executed as \f(CW\*(C`index "$str\e0", ...\*(C'\fR. This has been fixed [\s-1RT\s0 #53746].
.IP "\(bu" 4
Various leaks associated with named captures in regexes have been fixed
[\s-1RT\s0 #57024].
.IP "\(bu" 4
A weak reference to a hash would leak. This was affecting \f(CW\*(C`DBI\*(C'\fR
[\s-1RT\s0 #56908].
.IP "\(bu" 4
Using (?|) in a regex could cause a segfault [\s-1RT\s0 #59734].
.IP "\(bu" 4
Use of a \s-1UTF\-8\s0 \f(CW\*(C`tr//\*(C'\fR within a closure could cause a segfault [\s-1RT\s0 #61520].
.IP "\(bu" 4
Calling \f(CW\*(C`Perl_sv_chop()\*(C'\fR or otherwise upgrading an \s-1SV\s0 could result in an
unaligned 64\-bit access on the \s-1SPARC\s0 architecture [\s-1RT\s0 #60574].
.IP "\(bu" 4
In the 5.10.0 release, \f(CW\*(C`inc_version_list\*(C'\fR would incorrectly list
\&\f(CW\*(C`5.10.*\*(C'\fR after \f(CW\*(C`5.8.*\*(C'\fR; this affected the \f(CW@INC\fR search order
[\s-1RT\s0 #67628].
.IP "\(bu" 4
In 5.10.0, \f(CW\*(C`pack "a*", $tainted_value\*(C'\fR returned a non-tainted value
[\s-1RT\s0 #52552].
.IP "\(bu" 4
In 5.10.0, \f(CW\*(C`printf\*(C'\fR and \f(CW\*(C`sprintf\*(C'\fR could produce the fatal error
\&\f(CW\*(C`panic: utf8_mg_pos_cache_update\*(C'\fR when printing \s-1UTF\-8\s0 strings
[\s-1RT\s0 #62666].
.IP "\(bu" 4
In the 5.10.0 release, a dynamically created \f(CW\*(C`AUTOLOAD\*(C'\fR method might be
missed (method cache issue) [\s-1RT\s0 #60220,60232].
.IP "\(bu" 4
In the 5.10.0 release, a combination of \f(CW\*(C`use feature\*(C'\fR and \f(CW\*(C`//ee\*(C'\fR could
cause a memory leak [\s-1RT\s0 #63110].
.IP "\(bu" 4
\&\f(CW\*(C`\-C\*(C'\fR on the shebang (\f(CW\*(C`#!\*(C'\fR) line is once more permitted if it is also
specified on the command line. \f(CW\*(C`\-C\*(C'\fR on the shebang line used to be a
silent no-op \fIif\fR it was not also on the command line, so perl 5.10.0
disallowed it, which broke some scripts. Now perl checks whether it is
also on the command line and only dies if it is not [\s-1RT\s0 #67880].
.IP "\(bu" 4
In 5.10.0, certain types of re-entrant regular expression could crash,
or cause the following assertion failure [\s-1RT\s0 #60508]:
.Sp
.Vb 1
\&    Assertion rx\->sublen >= (s \- rx\->subbeg) + i failed
.Ve
.IP "\(bu" 4
Perl now includes previously missing files from the Unicode Character
Database.
.IP "\(bu" 4
Perl now honors \f(CW\*(C`TMPDIR\*(C'\fR when opening an anonymous temporary file.
.SH "Platform Specific Changes"
.IX Header "Platform Specific Changes"
Perl is incredibly portable. In general, if a platform has a C compiler,
someone has ported Perl to it (or will soon).  We're happy to announce
that Perl 5.12 includes support for several new platforms.  At the same
time, it's time to bid farewell to some (very) old friends.
.SS "New Platforms"
.IX Subsection "New Platforms"
.IP "Haiku" 4
.IX Item "Haiku"
Perl's developers have merged patches from Haiku's maintainers. Perl
should now build on Haiku.
.IP "MirOS \s-1BSD\s0" 4
.IX Item "MirOS BSD"
Perl should now build on MirOS \s-1BSD\s0.
.SS "Discontinued Platforms"
.IX Subsection "Discontinued Platforms"
.IP "Domain/OS" 4
.IX Item "Domain/OS"
.PD 0
.IP "MiNT" 4
.IX Item "MiNT"
.IP "Tenon MachTen" 4
.IX Item "Tenon MachTen"
.PD
.SS "Updated Platforms"
.IX Subsection "Updated Platforms"
.IP "\s-1AIX\s0" 4
.IX Item "AIX"
.RS 4
.PD 0
.IP "\(bu" 4
.PD
Removed \fIlibbsd\fR for \s-1AIX\s0 5L and 6.1. Only \f(CW\*(C`flock()\*(C'\fR was used from
\&\fIlibbsd\fR.
.IP "\(bu" 4
Removed \fIlibgdbm\fR for \s-1AIX\s0 5L and 6.1 if \fIlibgdbm\fR < 1.8.3\-5 is
installed.  The \fIlibgdbm\fR is delivered as an optional package with the
\&\s-1AIX\s0 Toolbox.  Unfortunately the versions below 1.8.3\-5 are broken.
.IP "\(bu" 4
Hints changes mean that \s-1AIX\s0 4.2 should work again.
.RE
.RS 4
.RE
.IP "Cygwin" 4
.IX Item "Cygwin"
.RS 4
.PD 0
.IP "\(bu" 4
.PD
Perl now supports IPv6 on Cygwin 1.7 and newer.
.IP "\(bu" 4
On Cygwin we now strip the last number from the \s-1DLL\s0. This has been the
behaviour in the cygwin.com build for years. The hints files have been
updated.
.RE
.RS 4
.RE
.IP "Darwin (Mac \s-1OS\s0 X)" 4
.IX Item "Darwin (Mac OS X)"
.RS 4
.PD 0
.IP "\(bu" 4
.PD
Skip testing the be_BY.CP1131 locale on Darwin 10 (Mac \s-1OS\s0 X 10.6),
as it's still buggy.
.IP "\(bu" 4
Correct infelicities in the regexp used to identify buggy locales
on Darwin 8 and 9 (Mac \s-1OS\s0 X 10.4 and 10.5, respectively).
.RE
.RS 4
.RE
.IP "DragonFly \s-1BSD\s0" 4
.IX Item "DragonFly BSD"
.RS 4
.PD 0
.IP "\(bu" 4
.PD
Fix thread library selection [perl #69686]
.RE
.RS 4
.RE
.IP "FreeBSD" 4
.IX Item "FreeBSD"
.RS 4
.PD 0
.IP "\(bu" 4
.PD
The hints files now identify the correct threading libraries on FreeBSD 7
and later.
.RE
.RS 4
.RE
.IP "Irix" 4
.IX Item "Irix"
.RS 4
.PD 0
.IP "\(bu" 4
.PD
We now work around a bizarre preprocessor bug in the Irix 6.5 compiler:
\&\f(CW\*(C`cc \-E \-\*(C'\fR unfortunately goes into K&R mode, but \f(CW\*(C`cc \-E file.c\*(C'\fR doesn't.
.RE
.RS 4
.RE
.IP "NetBSD" 4
.IX Item "NetBSD"
.RS 4
.PD 0
.IP "\(bu" 4
.PD
Hints now supports versions 5.*.
.RE
.RS 4
.RE
.IP "OpenVMS" 4
.IX Item "OpenVMS"
.RS 4
.PD 0
.IP "\(bu" 4
.PD
\&\f(CW\*(C`\-UDEBUGGING\*(C'\fR is now the default on \s-1VMS\s0.
.Sp
Like it has been everywhere else for ages and ages. Also make command-line
selection of \-UDEBUGGING and \-DDEBUGGING work in configure.com; before
the only way to turn it off was by saying no in answer to the interactive
question.
.IP "\(bu" 4
The default pipe buffer size on \s-1VMS\s0 has been updated to 8192 on 64\-bit
systems.
.IP "\(bu" 4
Reads from the in-memory temporary files of \f(CW\*(C`PerlIO::scalar\*(C'\fR used to fail
if \f(CW$/\fR was set to a numeric reference (to indicate record-style reads).
This is now fixed.
.IP "\(bu" 4
\&\s-1VMS\s0 now supports \f(CW\*(C`getgrgid\*(C'\fR.
.IP "\(bu" 4
Many improvements and cleanups have been made to the \s-1VMS\s0 file name handling
and conversion code.
.IP "\(bu" 4
Enabling the \f(CW\*(C`PERL_VMS_POSIX_EXIT\*(C'\fR logical name now encodes a \s-1POSIX\s0 exit
status in a \s-1VMS\s0 condition value for better interaction with \s-1GNV\s0's bash
shell and other utilities that depend on \s-1POSIX\s0 exit values. See
\&\*(L"$?\*(R" in perlvms for details.
.IP "\(bu" 4
\&\f(CW\*(C`File::Copy\*(C'\fR now detects Unix compatibility mode on \s-1VMS\s0.
.RE
.RS 4
.RE
.IP "Stratus \s-1VOS\s0" 4
.IX Item "Stratus VOS"
.RS 4
.PD 0
.IP "\(bu" 4
.PD
Various changes from Stratus have been merged in.
.RE
.RS 4
.RE
.IP "Symbian" 4
.IX Item "Symbian"
.RS 4
.PD 0
.IP "\(bu" 4
.PD
There is now support for Symbian S60 3.2 \s-1SDK\s0 and S60 5.0 \s-1SDK\s0.
.RE
.RS 4
.RE
.IP "Windows" 4
.IX Item "Windows"
.RS 4
.PD 0
.IP "\(bu" 4
.PD
Perl 5.12 supports Windows 2000 and later. The supporting code for
legacy versions of Windows is still included, but will be removed
during the next development cycle.
.IP "\(bu" 4
Initial support for building Perl with MinGW\-w64 is now available.
.IP "\(bu" 4
\&\fIperl.exe\fR now includes a manifest resource to specify the \f(CW\*(C`trustInfo\*(C'\fR
settings for Windows Vista and later. Without this setting Windows
would treat \fIperl.exe\fR as a legacy application and apply various
heuristics like redirecting access to protected file system areas
(like the \*(L"Program Files\*(R" folder) to the users \*(L"VirtualStore\*(R"
instead of generating a proper \*(L"permission denied\*(R" error.
.Sp
The manifest resource also requests the Microsoft Common-Controls
version 6.0 (themed controls introduced in Windows \s-1XP\s0).  Check out the
Win32::VisualStyles module on \s-1CPAN\s0 to switch back to old style
unthemed controls for legacy applications.
.IP "\(bu" 4
The \f(CW\*(C`\-t\*(C'\fR filetest operator now only returns true if the filehandle
is connected to a console window.  In previous versions of Perl it
would return true for all character mode devices, including \fI\s-1NUL\s0\fR
and \fI\s-1LPT1\s0\fR.
.IP "\(bu" 4
The \f(CW\*(C`\-p\*(C'\fR filetest operator now works correctly, and the
Fcntl::S_IFIFO constant is defined when Perl is compiled with
Microsoft Visual C.  In previous Perl versions \f(CW\*(C`\-p\*(C'\fR always
returned a false value, and the Fcntl::S_IFIFO constant
was not defined.
.Sp
This bug is specific to Microsoft Visual C and never affected
Perl binaries built with MinGW.
.IP "\(bu" 4
The socket error codes are now more widely supported:  The \s-1POSIX\s0
module will define the symbolic names, like \s-1POSIX::EWOULDBLOCK\s0,
and stringification of socket error codes in $! works as well
now;
.Sp
.Vb 2
\&  C:\e>perl \-MPOSIX \-E "$!=POSIX::EWOULDBLOCK; say $!"
\&  A non\-blocking socket operation could not be completed immediately.
.Ve
.IP "\(bu" 4
\&\fIflock()\fR will now set sensible error codes in $!.  Previous Perl versions
copied the value of $^E into $!, which caused much confusion.
.IP "\(bu" 4
\&\fIselect()\fR now supports all empty \f(CW\*(C`fd_set\*(C'\fRs more correctly.
.IP "\(bu" 4
\&\f(CW\*(Aq.\efoo\*(Aq\fR and \f(CW\*(Aq..\efoo\*(Aq\fR  were treated differently than
\&\f(CW\*(Aq./foo\*(Aq\fR and \f(CW\*(Aq../foo\*(Aq\fR by \f(CW\*(C`do\*(C'\fR and \f(CW\*(C`require\*(C'\fR [\s-1RT\s0 #63492].
.IP "\(bu" 4
Improved message window handling means that \f(CW\*(C`alarm\*(C'\fR and \f(CW\*(C`kill\*(C'\fR messages
will no longer be dropped under race conditions.
.IP "\(bu" 4
Various bits of Perl's build infrastructure are no longer converted to
win32 line endings at release time. If this hurts you, please report the
problem with the perlbug program included with perl.
.RE
.RS 4
.RE
.SH "Known Problems"
.IX Header "Known Problems"
This is a list of some significant unfixed bugs, which are regressions
from either 5.10.x or 5.8.x.
.IP "\(bu" 4
Some \s-1CPANPLUS\s0 tests may fail if there is a functioning file
\&\fI../../cpanp\-run\-perl\fR outside your build directory. The failure
shouldn't imply there's a problem with the actual functional
software. The bug is already fixed in [\s-1RT\s0 #74188] and is scheduled for
inclusion in perl\-v5.12.1.
.IP "\(bu" 4
\&\f(CW\*(C`List::Util::first\*(C'\fR misbehaves in the presence of a lexical \f(CW$_\fR
(typically introduced by \f(CW\*(C`my $_\*(C'\fR or implicitly by \f(CW\*(C`given\*(C'\fR). The variable
which gets set for each iteration is the package variable \f(CW$_\fR, not the
lexical \f(CW$_\fR [\s-1RT\s0 #67694].
.Sp
A similar issue may occur in other modules that provide functions which
take a block as their first argument, like
.Sp
.Vb 1
\&    foo { ... $_ ...} list
.Ve
.IP "\(bu" 4
Some regexes may run much more slowly when run in a child thread compared
with the thread the pattern was compiled into [\s-1RT\s0 #55600].
.IP "\(bu" 4
Things like \f(CW\*(C`"\eN{LATIN SMALL LIGATURE FF}" =~ /\eN{LATIN SMALL LETTER F}+/\*(C'\fR
will appear to hang as they get into a very long running loop [\s-1RT\s0 #72998].
.IP "\(bu" 4
Several porters have reported mysterious crashes when Perl's entire
test suite is run after a build on certain Windows 2000 systems. When
run by hand, the individual tests reportedly work fine.
.SH "Errata"
.IX Header "Errata"
.IP "\(bu" 4
This one is actually a change introduced in 5.10.0, but it was missed
from that release's perldelta, so it is mentioned here instead.
.Sp
A bugfix related to the handling of the \f(CW\*(C`/m\*(C'\fR modifier and \f(CW\*(C`qr\*(C'\fR resulted
in a change of behaviour between 5.8.x and 5.10.0:
.Sp
.Vb 2
\&    # matches in 5.8.x, doesn\*(Aqt match in 5.10.0
\&    $re = qr/^bar/; "foo\enbar" =~ /$re/m;
.Ve
.SH "Acknowledgements"
.IX Header "Acknowledgements"
Perl 5.12.0 represents approximately two years of development since
Perl 5.10.0 and contains over 750,000 lines of changes across over
3,000 files from over 200 authors and committers.
.PP
Perl continues to flourish into its third decade thanks to a vibrant
community of users and developers.  The following people are known to
have contributed the improvements that became Perl 5.12.0:
.PP
Aaron Crane, Abe Timmerman, Abhijit Menon-Sen, Abigail, Adam Russell,
Adriano Ferreira, \*(AEvar Arnfjo\*:r\*(d- Bjarmason, Alan Grover, Alexandr
Ciornii, Alex Davies, Alex Vandiver, Andreas Koenig, Andrew Rodland,
andrew@sundale.net, Andy Armstrong, Andy Dougherty, Jose AUGUSTE-ETIENNE,
Benjamin Smith, Ben Morrow, bharanee rathna, Bo Borgerson, Bo Lindbergh,
Brad Gilbert, Bram, Brendan O'Dea, brian d foy, Charles Bailey,
Chip Salzenberg, Chris 'BinGOs' Williams, Christoph Lamprecht, Chris
Williams, chromatic, Claes Jakobsson, Craig A. Berry, Dan Dascalescu,
Daniel Frederick Crisman, Daniel M. Quinlan, Dan Jacobson, Dan Kogai,
Dave Mitchell, Dave Rolsky, David Cantrell, David Dick, David Golden,
David Mitchell, David M. Syzdek, David Nicol, David Wheeler, Dennis
Kaarsemaker, Dintelmann, Peter, Dominic Dunlop, Dr.Ruud, Duke Leto,
Enrico Sorcinelli, Eric Brine, Father Chrysostomos, Florian Ragwitz,
Frank Wiegand, Gabor Szabo, Gene Sullivan, Geoffrey T. Dairiki, George
Greer, Gerard Goossen, Gisle Aas, Goro Fuji, Graham Barr, Green, Paul,
Hans Dieter Pearcey, Harmen, H. Merijn Brand, Hugo van der Sanden,
Ian Goodacre, Igor Sutton, Ingo Weinhold, James Bence, James Mastros,
Jan Dubois, Jari Aalto, Jarkko Hietaniemi, Jay Hannah, Jerry Hedden,
Jesse Vincent, Jim Cromie, Jody Belka, John E. Malmberg, John Malmberg,
John Peacock, John Peacock via \s-1RT\s0, John P. Linderman, John Wright,
Josh ben Jore, Jos I. Boumans, Karl Williamson, Kenichi Ishigaki, Ken
Williams, Kevin Brintnall, Kevin Ryde, Kurt Starsinic, Leon Brocard,
Lubomir Rintel, Luke Ross, Marcel Gru\*:nauer, Marcus Holland-Moritz, Mark
Jason Dominus, Marko Asplund, Martin Hasch, Mashrab Kuvatov, Matt Kraai,
Matt S Trout, Max Maischein, Michael Breen, Michael Cartmell, Michael
G Schwern, Michael Witten, Mike Giroux, Milosz Tanski, Moritz Lenz,
Nicholas Clark, Nick Cleaton, Niko Tyni, Offer Kaye, Osvaldo Villalon,
Paul Fenwick, Paul Gaborit, Paul Green, Paul Johnson, Paul Marquess,
Philip Hazel, Philippe Bruhat, Rafael Garcia-Suarez, Rainer Tammer,
Rajesh Mandalemula, Reini Urban, Rene\*'e Ba\*:cker, Ricardo Signes,
Ricardo \s-1SIGNES\s0, Richard Foley, Rich Rauenzahn, Rick Delaney, Risto
Kankkunen, Robert May, Roberto C. Sanchez, Robin Barker, \s-1SADAHIRO\s0
Tomoyuki, Salvador Ortiz Garcia, Sam Vilain, Scott Lanning, Se\*'bastien
Aperghis-Tramoni, Se\*'rgio Durigan Ju\*'nior, Shlomi Fish, Simon 'corecode'
Schubert, Sisyphus, Slaven Rezic, Smylers, Steffen Mu\*:ller, Steffen
Ullrich, Stepan Kasal, Steve Hay, Steven Schubiger, Steve Peters, Tels,
The Doctor, Tim Bunce, Tim Jenness, Todd Rinaldo, Tom Christiansen,
Tom Hukins, Tom Wyant, Tony Cook, Torsten Schoenfeld, Tye McQueen,
Vadim Konovalov, Vincent Pit, Hio \s-1YAMASHINA\s0, Yasuhiro Matsumoto,
Yitzchak Scott-Thoennes, Yuval Kogman, Yves Orton, Zefram, Zsban Ambrus
.PP
This is woefully incomplete as it's automatically generated from version
control history.  In particular, it doesn't include the names of the
(very much appreciated) contributors who reported issues in previous
versions of Perl that helped make Perl 5.12.0 better. For a more complete
list of all of Perl's historical contributors, please see the \f(CW\*(C`AUTHORS\*(C'\fR
file in the Perl 5.12.0 distribution.
.PP
Our \*(L"retired\*(R" pumpkings Nicholas Clark and Rafael Garcia-Suarez
deserve special thanks for their brilliant and substantive ongoing
contributions. Nicholas personally authored over 30% of the patches
since 5.10.0. Rafael comes in second in patch authorship with 11%,
but is first by a long shot in committing patches authored by others,
pushing 44% of the commits since 5.10.0 in this category, often after
providing considerable coaching to the patch authors. These statistics
in no way comprise all of their contributions, but express in shorthand
that we couldn't have done it without them.
.PP
Many of the changes included in this version originated in the \s-1CPAN\s0
modules included in Perl's core. We're grateful to the entire \s-1CPAN\s0
community for helping Perl to flourish.
.SH "Reporting Bugs"
.IX Header "Reporting Bugs"
If you find what you think is a bug, you might check the articles
recently posted to the comp.lang.perl.misc newsgroup and the perl
bug database at <http://rt.perl.org/perlbug/>. There may also be
information at <http://www.perl.org/>, the Perl Home Page.
.PP
If you believe you have an unreported bug, please run the \fBperlbug\fR
program included with your release. Be sure to trim your bug down
to a tiny but sufficient test case. Your bug report, along with the
output of \f(CW\*(C`perl \-V\*(C'\fR, will be sent off to perlbug@perl.org to be
analyzed by the Perl porting team.
.PP
If the bug you are reporting has security implications, which make it
inappropriate to send to a publicly archived mailing list, then please send
it to perl5\-security\-report@perl.org. This points to a closed subscription
unarchived mailing list, which includes
all the core committers, who will be able
to help assess the impact of issues, figure out a resolution, and help
co-ordinate the release of patches to mitigate or fix the problem across all
platforms on which Perl is supported. Please only use this address for
security issues in the Perl core, not for modules independently
distributed on \s-1CPAN\s0.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
The \fIChanges\fR file for an explanation of how to view exhaustive details
on what changed.
.PP
The \fI\s-1INSTALL\s0\fR file for how to build Perl.
.PP
The \fI\s-1README\s0\fR file for general stuff.
.PP
The \fIArtistic\fR and \fICopying\fR files for copyright information.
.PP
<http://dev.perl.org/perl5/errata.html> for a list of issues
found after this release, as well as a list of \s-1CPAN\s0 modules known
to be incompatible with this release.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perl5120delta5.18.1                          0100644 0001750 0001750 00000345224 12566207431 023550  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERL5120DELTA 1"
.TH PERL5120DELTA 1 "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perl5120delta \- what is new for perl v5.12.0
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document describes differences between the 5.10.0 release and the
5.12.0 release.
.PP
Many of the bug fixes in 5.12.0 are already included in the 5.10.1
maintenance release.
.PP
You can see the list of those changes in the 5.10.1 release notes
(perl5101delta).
.SH "Core Enhancements"
.IX Header "Core Enhancements"
.ie n .SS "New ""package NAME VERSION"" syntax"
.el .SS "New \f(CWpackage NAME VERSION\fP syntax"
.IX Subsection "New package NAME VERSION syntax"
This new syntax allows a module author to set the \f(CW$VERSION\fR of a namespace
when the namespace is declared with 'package'. It eliminates the need
for \f(CW\*(C`our $VERSION = ...\*(C'\fR and similar constructs. E.g.
.PP
.Vb 2
\&      package Foo::Bar 1.23;
\&      # $Foo::Bar::VERSION == 1.23
.Ve
.PP
There are several advantages to this:
.IP "\(bu" 4
\&\f(CW$VERSION\fR is parsed in exactly the same way as \f(CW\*(C`use NAME VERSION\*(C'\fR
.IP "\(bu" 4
\&\f(CW$VERSION\fR is set at compile time
.IP "\(bu" 4
\&\f(CW$VERSION\fR is a version object that provides proper overloading of
comparison operators so comparing \f(CW$VERSION\fR to decimal (1.23) or
dotted-decimal (v1.2.3) version numbers works correctly.
.IP "\(bu" 4
Eliminates \f(CW\*(C`$VERSION = ...\*(C'\fR and \f(CW\*(C`eval $VERSION\*(C'\fR clutter
.IP "\(bu" 4
As it requires \s-1VERSION\s0 to be a numeric literal or v\-string
literal, it can be statically parsed by toolchain modules
without \f(CW\*(C`eval\*(C'\fR the way \s-1MM\-\s0>parse_version does for \f(CW\*(C`$VERSION = ...\*(C'\fR
.PP
It does not break old code with only \f(CW\*(C`package NAME\*(C'\fR, but code that uses
\&\f(CW\*(C`package NAME VERSION\*(C'\fR will need to be restricted to perl 5.12.0 or newer
This is analogous to the change to \f(CW\*(C`open\*(C'\fR from two-args to three-args.
Users requiring the latest Perl will benefit, and perhaps after several
years, it will become a standard practice.
.PP
However, \f(CW\*(C`package NAME VERSION\*(C'\fR requires a new, 'strict' version
number format. See \*(L"Version number formats\*(R" for details.
.ie n .SS "The ""..."" operator"
.el .SS "The \f(CW...\fP operator"
.IX Subsection "The ... operator"
A new operator, \f(CW\*(C`...\*(C'\fR, nicknamed the Yada Yada operator, has been added.
It is intended to mark placeholder code that is not yet implemented.
See \*(L"Yada Yada Operator\*(R" in perlop.
.SS "Implicit strictures"
.IX Subsection "Implicit strictures"
Using the \f(CW\*(C`use VERSION\*(C'\fR syntax with a version number greater or equal
to 5.11.0 will lexically enable strictures just like \f(CW\*(C`use strict\*(C'\fR
would do (in addition to enabling features.) The following:
.PP
.Vb 1
\&    use 5.12.0;
.Ve
.PP
means:
.PP
.Vb 2
\&    use strict;
\&    use feature \*(Aq:5.12\*(Aq;
.Ve
.SS "Unicode improvements"
.IX Subsection "Unicode improvements"
Perl 5.12 comes with Unicode 5.2, the latest version available to
us at the time of release.  This version of Unicode was released in
October 2009. See <http://www.unicode.org/versions/Unicode5.2.0> for
further details about what's changed in this version of the standard.
See perlunicode for instructions on installing and using other versions
of Unicode.
.PP
Additionally, Perl's developers have significantly improved Perl's Unicode
implementation. For full details, see \*(L"Unicode overhaul\*(R" below.
.SS "Y2038 compliance"
.IX Subsection "Y2038 compliance"
Perl's core time-related functions are now Y2038 compliant. (It may not mean much to you, but your kids will love it!)
.SS "qr overloading"
.IX Subsection "qr overloading"
It is now possible to overload the \f(CW\*(C`qr//\*(C'\fR operator, that is,
conversion to regexp, like it was already possible to overload
conversion to boolean, string or number of objects. It is invoked when
an object appears on the right hand side of the \f(CW\*(C`=~\*(C'\fR operator or when
it is interpolated into a regexp. See overload.
.SS "Pluggable keywords"
.IX Subsection "Pluggable keywords"
Extension modules can now cleanly hook into the Perl parser to define
new kinds of keyword-headed expression and compound statement. The
syntax following the keyword is defined entirely by the extension. This
allows a completely non-Perl sublanguage to be parsed inline, with the
correct ops cleanly generated.
.PP
See \*(L"PL_keyword_plugin\*(R" in perlapi for the mechanism. The Perl core
source distribution also includes a new module
XS::APItest::KeywordRPN, which implements reverse Polish notation
arithmetic via pluggable keywords. This module is mainly used for test
purposes, and is not normally installed, but also serves as an example
of how to use the new mechanism.
.PP
Perl's developers consider this feature to be experimental. We may remove
it or change it in a backwards-incompatible way in Perl 5.14.
.SS "APIs for more internals"
.IX Subsection "APIs for more internals"
The lowest layers of the lexer and parts of the pad system now have C
APIs available to \s-1XS\s0 extensions. These are necessary to support proper
use of pluggable keywords, but have other uses too. The new APIs are
experimental, and only cover a small proportion of what would be
necessary to take full advantage of the core's facilities in these
areas. It is intended that the Perl 5.13 development cycle will see the
addition of a full range of clean, supported interfaces.
.PP
Perl's developers consider this feature to be experimental. We may remove
it or change it in a backwards-incompatible way in Perl 5.14.
.SS "Overridable function lookup"
.IX Subsection "Overridable function lookup"
Where an extension module hooks the creation of rv2cv ops to modify the
subroutine lookup process, this now works correctly for bareword
subroutine calls. This means that prototypes on subroutines referenced
this way will be processed correctly. (Previously bareword subroutine
names were initially looked up, for parsing purposes, by an unhookable
mechanism, so extensions could only properly influence subroutine names
that appeared with an \f(CW\*(C`&\*(C'\fR sigil.)
.SS "A proper interface for pluggable Method Resolution Orders"
.IX Subsection "A proper interface for pluggable Method Resolution Orders"
As of Perl 5.12.0 there is a new interface for plugging and using method
resolution orders other than the default linear depth first search.
The C3 method resolution order added in 5.10.0 has been re-implemented as
a plugin, without changing its Perl-space interface. See perlmroapi for
more information.
.ie n .SS """\eN"" experimental regex escape"
.el .SS "\f(CW\eN\fP experimental regex escape"
.IX Subsection "N experimental regex escape"
Perl now supports \f(CW\*(C`\eN\*(C'\fR, a new regex escape which you can think of as
the inverse of \f(CW\*(C`\en\*(C'\fR. It will match any character that is not a newline,
independently from the presence or absence of the single line match
modifier \f(CW\*(C`/s\*(C'\fR. It is not usable within a character class.  \f(CW\*(C`\eN{3}\*(C'\fR
means to match 3 non-newlines; \f(CW\*(C`\eN{5,}\*(C'\fR means to match at least 5.
\&\f(CW\*(C`\eN{NAME}\*(C'\fR still means the character or sequence named \f(CW\*(C`NAME\*(C'\fR, but
\&\f(CW\*(C`NAME\*(C'\fR no longer can be things like \f(CW3\fR, or \f(CW\*(C`5,\*(C'\fR.
.PP
This will break a custom charnames translator which allows numbers for character names, as \f(CW\*(C`\eN{3}\*(C'\fR will
now mean to match 3 non-newline characters, and not the character whose
name is \f(CW3\fR. (No name defined by the Unicode standard is a number,
so only custom translators might be affected.)
.PP
Perl's developers are somewhat concerned about possible user confusion
with the existing \f(CW\*(C`\eN{...}\*(C'\fR construct which matches characters by their
Unicode name. Consequently, this feature is experimental. We may remove
it or change it in a backwards-incompatible way in Perl 5.14.
.SS "DTrace support"
.IX Subsection "DTrace support"
Perl now has some support for DTrace. See \*(L"DTrace support\*(R" in \fI\s-1INSTALL\s0\fR.
.ie n .SS "Support for ""configure_requires"" in \s-1CPAN\s0 module metadata"
.el .SS "Support for \f(CWconfigure_requires\fP in \s-1CPAN\s0 module metadata"
.IX Subsection "Support for configure_requires in CPAN module metadata"
Both \f(CW\*(C`CPAN\*(C'\fR and \f(CW\*(C`CPANPLUS\*(C'\fR now support the \f(CW\*(C`configure_requires\*(C'\fR
keyword in the \fI\s-1META\s0.yml\fR metadata file included in most recent \s-1CPAN\s0
distributions.  This allows distribution authors to specify configuration
prerequisites that must be installed before running \fIMakefile.PL\fR
or \fIBuild.PL\fR.
.PP
See the documentation for \f(CW\*(C`ExtUtils::MakeMaker\*(C'\fR or \f(CW\*(C`Module::Build\*(C'\fR for
more on how to specify \f(CW\*(C`configure_requires\*(C'\fR when creating a distribution
for \s-1CPAN.\s0
.ie n .SS """each"", ""keys"", ""values"" are now more flexible"
.el .SS "\f(CWeach\fP, \f(CWkeys\fP, \f(CWvalues\fP are now more flexible"
.IX Subsection "each, keys, values are now more flexible"
The \f(CW\*(C`each\*(C'\fR, \f(CW\*(C`keys\*(C'\fR, \f(CW\*(C`values\*(C'\fR function can now operate on arrays.
.ie n .SS """when"" as a statement modifier"
.el .SS "\f(CWwhen\fP as a statement modifier"
.IX Subsection "when as a statement modifier"
\&\f(CW\*(C`when\*(C'\fR is now allowed to be used as a statement modifier.
.ie n .SS "$, flexibility"
.el .SS "\f(CW$,\fP flexibility"
.IX Subsection "$, flexibility"
The variable \f(CW$,\fR may now be tied.
.SS "// in when clauses"
.IX Subsection "// in when clauses"
// now behaves like || in when clauses
.SS "Enabling warnings from your shell environment"
.IX Subsection "Enabling warnings from your shell environment"
You can now set \f(CW\*(C`\-W\*(C'\fR from the \f(CW\*(C`PERL5OPT\*(C'\fR environment variable
.ie n .SS """delete local"""
.el .SS "\f(CWdelete local\fP"
.IX Subsection "delete local"
\&\f(CW\*(C`delete local\*(C'\fR now allows you to locally delete a hash entry.
.SS "New support for Abstract namespace sockets"
.IX Subsection "New support for Abstract namespace sockets"
Abstract namespace sockets are Linux-specific socket type that live in
\&\s-1AF_UNIX\s0 family, slightly abusing it to be able to use arbitrary
character arrays as addresses: They start with nul byte and are not
terminated by nul byte, but with the length passed to the \fIsocket()\fR
system call.
.SS "32\-bit limit on substr arguments removed"
.IX Subsection "32-bit limit on substr arguments removed"
The 32\-bit limit on \f(CW\*(C`substr\*(C'\fR arguments has now been removed. The full
range of the system's signed and unsigned integers is now available for
the \f(CW\*(C`pos\*(C'\fR and \f(CW\*(C`len\*(C'\fR arguments.
.SH "Potentially Incompatible Changes"
.IX Header "Potentially Incompatible Changes"
.SS "Deprecations warn by default"
.IX Subsection "Deprecations warn by default"
Over the years, Perl's developers have deprecated a number of language
features for a variety of reasons.  Perl now defaults to issuing a
warning if a deprecated language feature is used. Many of the deprecations
Perl now warns you about have been deprecated for many years.  You can
find a list of what was deprecated in a given release of Perl in the
\&\f(CW\*(C`perl5xxdelta.pod\*(C'\fR file for that release.
.PP
To disable this feature in a given lexical scope, you should use \f(CW\*(C`no
warnings \*(Aqdeprecated\*(Aq;\*(C'\fR For information about which language features
are deprecated and explanations of various deprecation warnings, please
see perldiag. See \*(L"Deprecations\*(R" below for the list of features
and modules Perl's developers have deprecated as part of this release.
.SS "Version number formats"
.IX Subsection "Version number formats"
Acceptable version number formats have been formalized into \*(L"strict\*(R" and
\&\*(L"lax\*(R" rules. \f(CW\*(C`package NAME VERSION\*(C'\fR takes a strict version number.
\&\f(CW\*(C`UNIVERSAL::VERSION\*(C'\fR and the version object constructors take lax
version numbers. Providing an invalid version will result in a fatal
error. The version argument in \f(CW\*(C`use NAME VERSION\*(C'\fR is first parsed as a
numeric literal or v\-string and then passed to \f(CW\*(C`UNIVERSAL::VERSION\*(C'\fR
(and must then pass the \*(L"lax\*(R" format test).
.PP
These formats are documented fully in the version module. To a first
approximation, a \*(L"strict\*(R" version number is a positive decimal number
(integer or decimal-fraction) without exponentiation or else a
dotted-decimal v\-string with a leading 'v' character and at least three
components. A \*(L"lax\*(R" version number allows v\-strings with fewer than
three components or without a leading 'v'. Under \*(L"lax\*(R" rules, both
decimal and dotted-decimal versions may have a trailing \*(L"alpha\*(R"
component separated by an underscore character after a fractional or
dotted-decimal component.
.PP
The version module adds \f(CW\*(C`version::is_strict\*(C'\fR and \f(CW\*(C`version::is_lax\*(C'\fR
functions to check a scalar against these rules.
.ie n .SS "@INC reorganization"
.el .SS "\f(CW@INC\fP reorganization"
.IX Subsection "@INC reorganization"
In \f(CW@INC\fR, \f(CW\*(C`ARCHLIB\*(C'\fR and \f(CW\*(C`PRIVLIB\*(C'\fR now occur after after the current
version's \f(CW\*(C`site_perl\*(C'\fR and \f(CW\*(C`vendor_perl\*(C'\fR.  Modules installed into
\&\f(CW\*(C`site_perl\*(C'\fR and \f(CW\*(C`vendor_perl\*(C'\fR will now be loaded in preference to
those installed in \f(CW\*(C`ARCHLIB\*(C'\fR and \f(CW\*(C`PRIVLIB\*(C'\fR.
.SS "REGEXPs are now first class"
.IX Subsection "REGEXPs are now first class"
Internally, Perl now treats compiled regular expressions (such as
those created with \f(CW\*(C`qr//\*(C'\fR) as first class entities. Perl modules which
serialize, deserialize or otherwise have deep interaction with Perl's
internal data structures need to be updated for this change.  Most
affected \s-1CPAN\s0 modules have already been updated as of this writing.
.SS "Switch statement changes"
.IX Subsection "Switch statement changes"
The \f(CW\*(C`given\*(C'\fR/\f(CW\*(C`when\*(C'\fR switch statement handles complex statements better
than Perl 5.10.0 did (These enhancements are also available in
5.10.1 and subsequent 5.10 releases.) There are two new cases where
\&\f(CW\*(C`when\*(C'\fR now interprets its argument as a boolean, instead of an
expression to be used in a smart match:
.IP "flip-flop operators" 4
.IX Item "flip-flop operators"
The \f(CW\*(C`..\*(C'\fR and \f(CW\*(C`...\*(C'\fR flip-flop operators are now evaluated in boolean
context, following their usual semantics; see \*(L"Range Operators\*(R" in perlop.
.Sp
Note that, as in perl 5.10.0, \f(CW\*(C`when (1..10)\*(C'\fR will not work to test
whether a given value is an integer between 1 and 10; you should use
\&\f(CW\*(C`when ([1..10])\*(C'\fR instead (note the array reference).
.Sp
However, contrary to 5.10.0, evaluating the flip-flop operators in
boolean context ensures it can now be useful in a \f(CW\*(C`when()\*(C'\fR, notably
for implementing bistable conditions, like in:
.Sp
.Vb 3
\&    when (/^=begin/ .. /^=end/) {
\&      # do something
\&    }
.Ve
.IP "defined-or operator" 4
.IX Item "defined-or operator"
A compound expression involving the defined-or operator, as in
\&\f(CW\*(C`when (expr1 // expr2)\*(C'\fR, will be treated as boolean if the first
expression is boolean. (This just extends the existing rule that applies
to the regular or operator, as in \f(CW\*(C`when (expr1 || expr2)\*(C'\fR.)
.SS "Smart match changes"
.IX Subsection "Smart match changes"
Since Perl 5.10.0, Perl's developers have made a number of changes to
the smart match operator. These, of course, also alter the behaviour
of the switch statements where smart matching is implicitly used.
These changes were also made for the 5.10.1 release, and will remain in
subsequent 5.10 releases.
.PP
\fIChanges to type-based dispatch\fR
.IX Subsection "Changes to type-based dispatch"
.PP
The smart match operator \f(CW\*(C`~~\*(C'\fR is no longer commutative. The behaviour of
a smart match now depends primarily on the type of its right hand
argument. Moreover, its semantics have been adjusted for greater
consistency or usefulness in several cases. While the general backwards
compatibility is maintained, several changes must be noted:
.IP "\(bu" 4
Code references with an empty prototype are no longer treated specially.
They are passed an argument like the other code references (even if they
choose to ignore it).
.IP "\(bu" 4
\&\f(CW\*(C`%hash ~~ sub {}\*(C'\fR and \f(CW\*(C`@array ~~ sub {}\*(C'\fR now test that the subroutine
returns a true value for each key of the hash (or element of the
array), instead of passing the whole hash or array as a reference to
the subroutine.
.IP "\(bu" 4
Due to the commutativity breakage, code references are no longer
treated specially when appearing on the left of the \f(CW\*(C`~~\*(C'\fR operator,
but like any vulgar scalar.
.IP "\(bu" 4
\&\f(CW\*(C`undef ~~ %hash\*(C'\fR is always false (since \f(CW\*(C`undef\*(C'\fR can't be a key in a
hash). No implicit conversion to \f(CW""\fR is done (as was the case in perl
5.10.0).
.IP "\(bu" 4
\&\f(CW\*(C`$scalar ~~ @array\*(C'\fR now always distributes the smart match across the
elements of the array. It's true if one element in \f(CW@array\fR verifies
\&\f(CW\*(C`$scalar ~~ $element\*(C'\fR. This is a generalization of the old behaviour
that tested whether the array contained the scalar.
.PP
The full dispatch table for the smart match operator is given in
\&\*(L"Smart matching in detail\*(R" in perlsyn.
.PP
\fISmart match and overloading\fR
.IX Subsection "Smart match and overloading"
.PP
According to the rule of dispatch based on the rightmost argument type,
when an object overloading \f(CW\*(C`~~\*(C'\fR appears on the right side of the
operator, the overload routine will always be called (with a 3rd argument
set to a true value, see overload.) However, when the object will
appear on the left, the overload routine will be called only when the
rightmost argument is a simple scalar. This way, distributivity of smart
match across arrays is not broken, as well as the other behaviours with
complex types (coderefs, hashes, regexes). Thus, writers of overloading
routines for smart match mostly need to worry only with comparing
against a scalar, and possibly with stringification overloading; the
other common cases will be automatically handled consistently.
.PP
\&\f(CW\*(C`~~\*(C'\fR will now refuse to work on objects that do not overload it (in order
to avoid relying on the object's underlying structure). (However, if the
object overloads the stringification or the numification operators, and
if overload fallback is active, it will be used instead, as usual.)
.SS "Other potentially incompatible changes"
.IX Subsection "Other potentially incompatible changes"
.IP "\(bu" 4
The definitions of a number of Unicode properties have changed to match
those of the current Unicode standard. These are listed above under
\&\*(L"Unicode overhaul\*(R". This change may break code that expects the old
definitions.
.IP "\(bu" 4
The boolkeys op has moved to the group of hash ops. This breaks binary
compatibility.
.IP "\(bu" 4
Filehandles are now always blessed into \f(CW\*(C`IO::File\*(C'\fR.
.Sp
The previous behaviour was to bless Filehandles into FileHandle
(an empty proxy class) if it was loaded into memory and otherwise
to bless them into \f(CW\*(C`IO::Handle\*(C'\fR.
.IP "\(bu" 4
The semantics of \f(CW\*(C`use feature :5.10*\*(C'\fR have changed slightly.
See \*(L"Modules and Pragmata\*(R" for more information.
.IP "\(bu" 4
Perl's developers now use git, rather than Perforce.  This should be
a purely internal change only relevant to people actively working on
the core.  However, you may see minor difference in perl as a consequence
of the change.  For example in some of details of the output of \f(CW\*(C`perl
\&\-V\*(C'\fR. See perlrepository for more information.
.IP "\(bu" 4
As part of the \f(CW\*(C`Test::Harness\*(C'\fR 2.x to 3.x upgrade, the experimental
\&\f(CW\*(C`Test::Harness::Straps\*(C'\fR module has been removed.
See \*(L"Modules and Pragmata\*(R" for more details.
.IP "\(bu" 4
As part of the \f(CW\*(C`ExtUtils::MakeMaker\*(C'\fR upgrade, the
\&\f(CW\*(C`ExtUtils::MakeMaker::bytes\*(C'\fR and \f(CW\*(C`ExtUtils::MakeMaker::vmsish\*(C'\fR modules
have been removed from this distribution.
.IP "\(bu" 4
\&\f(CW\*(C`Module::CoreList\*(C'\fR no longer contains the \f(CW%:patchlevel\fR hash.
.IP "\(bu" 4
\&\f(CW\*(C`length undef\*(C'\fR now returns undef.
.IP "\(bu" 4
Unsupported private C \s-1API\s0 functions are now declared \*(L"static\*(R" to prevent
leakage to Perl's public \s-1API.\s0
.IP "\(bu" 4
To support the bootstrapping process, \fIminiperl\fR no longer builds with
\&\s-1UTF\-8\s0 support in the regexp engine.
.Sp
This allows a build to complete with \s-1PERL_UNICODE\s0 set and a \s-1UTF\-8\s0 locale.
Without this there's a bootstrapping problem, as miniperl can't load
the \s-1UTF\-8\s0 components of the regexp engine, because they're not yet built.
.IP "\(bu" 4
\&\fIminiperl\fR's \f(CW@INC\fR is now restricted to just \f(CW\*(C`\-I...\*(C'\fR, the split of
\&\f(CW$ENV{PERL5LIB}\fR, and "\f(CW\*(C`.\*(C'\fR"
.IP "\(bu" 4
A space or a newline is now required after a \f(CW"#line XXX"\fR directive.
.IP "\(bu" 4
Tied filehandles now have an additional method \s-1EOF\s0 which provides the
\&\s-1EOF\s0 type.
.IP "\(bu" 4
To better match all other flow control statements, \f(CW\*(C`foreach\*(C'\fR may no
longer be used as an attribute.
.IP "\(bu" 4
Perl's command-line switch \*(L"\-P\*(R", which was deprecated in version 5.10.0, has
now been removed. The \s-1CPAN\s0 module \f(CW\*(C`Filter::cpp\*(C'\fR can be used as an 
alternative.
.SH "Deprecations"
.IX Header "Deprecations"
From time to time, Perl's developers find it necessary to deprecate
features or modules we've previously shipped as part of the core
distribution. We are well aware of the pain and frustration that a
backwards-incompatible change to Perl can cause for developers building
or maintaining software in Perl. You can be sure that when we deprecate
a functionality or syntax, it isn't a choice we make lightly. Sometimes,
we choose to deprecate functionality or syntax because it was found to
be poorly designed or implemented. Sometimes, this is because they're
holding back other features or causing performance problems. Sometimes,
the reasons are more complex. Wherever possible, we try to keep deprecated
functionality available to developers in its previous form for at least
one major release. So long as a deprecated feature isn't actively
disrupting our ability to maintain and extend Perl, we'll try to leave
it in place as long as possible.
.PP
The following items are now deprecated:
.IP "suidperl" 4
.IX Item "suidperl"
\&\f(CW\*(C`suidperl\*(C'\fR is no longer part of Perl. It used to provide a mechanism to
emulate setuid permission bits on systems that don't support it properly.
.ie n .IP "Use of "":="" to mean an empty attribute list" 4
.el .IP "Use of \f(CW:=\fR to mean an empty attribute list" 4
.IX Item "Use of := to mean an empty attribute list"
An accident of Perl's parser meant that these constructions were all
equivalent:
.Sp
.Vb 3
\&    my $pi := 4;
\&    my $pi : = 4;
\&    my $pi :  = 4;
.Ve
.Sp
with the \f(CW\*(C`:\*(C'\fR being treated as the start of an attribute list, which
ends before the \f(CW\*(C`=\*(C'\fR. As whitespace is not significant here, all are
parsed as an empty attribute list, hence all the above are equivalent
to, and better written as
.Sp
.Vb 1
\&    my $pi = 4;
.Ve
.Sp
because no attribute processing is done for an empty list.
.Sp
As is, this meant that \f(CW\*(C`:=\*(C'\fR cannot be used as a new token, without
silently changing the meaning of existing code. Hence that particular
form is now deprecated, and will become a syntax error. If it is
absolutely necessary to have empty attribute lists (for example,
because of a code generator) then avoid the warning by adding a space
before the \f(CW\*(C`=\*(C'\fR.
.ie n .IP """UNIVERSAL\->import()""" 4
.el .IP "\f(CWUNIVERSAL\->import()\fR" 4
.IX Item "UNIVERSAL->import()"
The method \f(CW\*(C`UNIVERSAL\->import()\*(C'\fR is now deprecated. Attempting to
pass import arguments to a \f(CW\*(C`use UNIVERSAL\*(C'\fR statement will result in a
deprecation warning.
.ie n .IP "Use of ""goto"" to jump into a construct" 4
.el .IP "Use of ``goto'' to jump into a construct" 4
.IX Item "Use of goto to jump into a construct"
Using \f(CW\*(C`goto\*(C'\fR to jump from an outer scope into an inner scope is now
deprecated. This rare use case was causing problems in the
implementation of scopes.
.IP "Custom character names in \eN{name} that don't look like names" 4
.IX Item "Custom character names in N{name} that don't look like names"
In \f(CW\*(C`\eN{\f(CIname\f(CW}\*(C'\fR, \fIname\fR can be just about anything. The standard
Unicode names have a very limited domain, but a custom name translator
could create names that are, for example, made up entirely of punctuation
symbols. It is now deprecated to make names that don't begin with an
alphabetic character, and aren't alphanumeric or contain other than
a very few other characters, namely spaces, dashes, parentheses
and colons. Because of the added meaning of \f(CW\*(C`\eN\*(C'\fR (See "\f(CW\*(C`\eN\*(C'\fR
experimental regex escape"), names that look like curly brace \-enclosed
quantifiers won't work. For example, \f(CW\*(C`\eN{3,4}\*(C'\fR now means to match 3 to
4 non-newlines; before a custom name \f(CW\*(C`3,4\*(C'\fR could have been created.
.IP "Deprecated Modules" 4
.IX Item "Deprecated Modules"
The following modules will be removed from the core distribution in a
future release, and should be installed from \s-1CPAN\s0 instead. Distributions
on \s-1CPAN\s0 which require these should add them to their prerequisites. The
core versions of these modules warnings will issue a deprecation warning.
.Sp
If you ship a packaged version of Perl, either alone or as part of a
larger system, then you should carefully consider the repercussions of
core module deprecations. You may want to consider shipping your default
build of Perl with packages for some or all deprecated modules which
install into \f(CW\*(C`vendor\*(C'\fR or \f(CW\*(C`site\*(C'\fR perl library directories. This will
inhibit the deprecation warnings.
.Sp
Alternatively, you may want to consider patching \fIlib/deprecate.pm\fR
to provide deprecation warnings specific to your packaging system
or distribution of Perl, consistent with how your packaging system
or distribution manages a staged transition from a release where the
installation of a single package provides the given functionality, to
a later release where the system administrator needs to know to install
multiple packages to get that same functionality.
.Sp
You can silence these deprecation warnings by installing the modules
in question from \s-1CPAN. \s0 To install the latest version of all of them,
just install \f(CW\*(C`Task::Deprecations::5_12\*(C'\fR.
.RS 4
.IP "Class::ISA" 4
.IX Item "Class::ISA"
.PD 0
.IP "Pod::Plainer" 4
.IX Item "Pod::Plainer"
.IP "Shell" 4
.IX Item "Shell"
.IP "Switch" 4
.IX Item "Switch"
.PD
Switch is buggy and should be avoided. You may find Perl's new
\&\f(CW\*(C`given\*(C'\fR/\f(CW\*(C`when\*(C'\fR feature a suitable replacement.  See \*(L"Switch
statements\*(R" in perlsyn for more information.
.RE
.RS 4
.RE
.IP "Assignment to $[" 4
.IX Item "Assignment to $["
.PD 0
.IP "Use of the attribute :locked on subroutines" 4
.IX Item "Use of the attribute :locked on subroutines"
.ie n .IP "Use of ""locked"" with the attributes pragma" 4
.el .IP "Use of ``locked'' with the attributes pragma" 4
.IX Item "Use of locked with the attributes pragma"
.ie n .IP "Use of ""unique"" with the attributes pragma" 4
.el .IP "Use of ``unique'' with the attributes pragma" 4
.IX Item "Use of unique with the attributes pragma"
.IP "Perl_pmflag" 4
.IX Item "Perl_pmflag"
.PD
\&\f(CW\*(C`Perl_pmflag\*(C'\fR is no longer part of Perl's public \s-1API.\s0 Calling it now
generates a deprecation warning, and it will be removed in a future
release. Although listed as part of the \s-1API,\s0 it was never documented,
and only ever used in \fItoke.c\fR, and prior to 5.10, \fIregcomp.c\fR. In
core, it has been replaced by a static function.
.IP "Numerous Perl 4\-era libraries" 4
.IX Item "Numerous Perl 4-era libraries"
\&\fItermcap.pl\fR, \fItainted.pl\fR, \fIstat.pl\fR, \fIshellwords.pl\fR, \fIpwd.pl\fR,
\&\fIopen3.pl\fR, \fIopen2.pl\fR, \fInewgetopt.pl\fR, \fIlook.pl\fR, \fIfind.pl\fR,
\&\fIfinddepth.pl\fR, \fIimportenv.pl\fR, \fIhostname.pl\fR, \fIgetopts.pl\fR,
\&\fIgetopt.pl\fR, \fIgetcwd.pl\fR, \fIflush.pl\fR, \fIfastcwd.pl\fR, \fIexceptions.pl\fR,
\&\fIctime.pl\fR, \fIcomplete.pl\fR, \fIcacheout.pl\fR, \fIbigrat.pl\fR, \fIbigint.pl\fR,
\&\fIbigfloat.pl\fR, \fIassert.pl\fR, \fIabbrev.pl\fR, \fIdotsh.pl\fR, and
\&\fItimelocal.pl\fR are all now deprecated.  Earlier, Perl's developers
intended to remove these libraries from Perl's core for the 5.14.0 release.
.Sp
During final testing before the release of 5.12.0, several developers
discovered current production code using these ancient libraries, some
inside the Perl core itself.  Accordingly, the pumpking granted them
a stay of execution. They will begin to warn about their deprecation
in the 5.14.0 release and will be removed in the 5.16.0 release.
.SH "Unicode overhaul"
.IX Header "Unicode overhaul"
Perl's developers have made a concerted effort to update Perl to be in
sync with the latest Unicode standard. Changes for this include:
.PP
Perl can now handle every Unicode character property. New documentation,
perluniprops, lists all available non-Unihan character properties. By
default, perl does not expose Unihan, deprecated or Unicode-internal
properties.  See below for more details on these; there is also a section
in the pod listing them, and explaining why they are not exposed.
.PP
Perl now fully supports the Unicode compound-style of using \f(CW\*(C`=\*(C'\fR
and \f(CW\*(C`:\*(C'\fR in writing regular expressions: \f(CW\*(C`\ep{property=value}\*(C'\fR and
\&\f(CW\*(C`\ep{property:value}\*(C'\fR (both of which mean the same thing).
.PP
Perl now fully supports the Unicode loose matching rules for text between
the braces in \f(CW\*(C`\ep{...}\*(C'\fR constructs. In addition, Perl allows underscores
between digits of numbers.
.PP
Perl now accepts all the Unicode-defined synonyms for properties and
property values.
.PP
\&\f(CW\*(C`qr/\eX/\*(C'\fR, which matches a Unicode logical character, has
been expanded to work better with various Asian languages. It
now is defined as an \fIextended grapheme cluster\fR. (See
<http://www.unicode.org/reports/tr29/>).  Anything matched previously
and that made sense will continue to be accepted.   Additionally:
.IP "\(bu" 4
\&\f(CW\*(C`\eX\*(C'\fR will not break apart a \f(CW\*(C`CR\ LF\*(C'\fR sequence.
.IP "\(bu" 4
\&\f(CW\*(C`\eX\*(C'\fR will now match a sequence which includes the \f(CW\*(C`ZWJ\*(C'\fR and \f(CW\*(C`ZWNJ\*(C'\fR
characters.
.IP "\(bu" 4
\&\f(CW\*(C`\eX\*(C'\fR will now always match at least one character, including an initial
mark.  Marks generally come after a base character, but it is possible in
Unicode to have them in isolation, and \f(CW\*(C`\eX\*(C'\fR will now handle that case,
for example at the beginning of a line, or after a \f(CW\*(C`ZWSP\*(C'\fR. And this is
the part where \f(CW\*(C`\eX\*(C'\fR doesn't match the things that it used to that don't
make sense. Formerly, for example, you could have the nonsensical case
of an accented \s-1LF.\s0
.IP "\(bu" 4
\&\f(CW\*(C`\eX\*(C'\fR will now match a (Korean) Hangul syllable sequence, and the Thai
and Lao exception cases.
.PP
Otherwise, this change should be transparent for the non-affected
languages.
.PP
\&\f(CW\*(C`\ep{...}\*(C'\fR matches using the Canonical_Combining_Class property were
completely broken in previous releases of Perl.  They should now work
correctly.
.PP
Before Perl 5.12, the Unicode \f(CW\*(C`Decomposition_Type=Compat\*(C'\fR property
and a Perl extension had the same name, which led to neither matching
all the correct values (with more than 100 mistakes in one, and several
thousand in the other). The Perl extension has now been renamed to be
\&\f(CW\*(C`Decomposition_Type=Noncanonical\*(C'\fR (short: \f(CW\*(C`dt=noncanon\*(C'\fR). It has the
same meaning as was previously intended, namely the union of all the
non-canonical Decomposition types, with Unicode \f(CW\*(C`Compat\*(C'\fR being just
one of those.
.PP
\&\f(CW\*(C`\ep{Decomposition_Type=Canonical}\*(C'\fR now includes the Hangul syllables.
.PP
\&\f(CW\*(C`\ep{Uppercase}\*(C'\fR and \f(CW\*(C`\ep{Lowercase}\*(C'\fR now work as the Unicode standard
says they should.  This means they each match a few more characters than
they used to.
.PP
\&\f(CW\*(C`\ep{Cntrl}\*(C'\fR now matches the same characters as \f(CW\*(C`\ep{Control}\*(C'\fR. This
means it no longer will match Private Use (gc=co), Surrogates (gc=cs),
nor Format (gc=cf) code points. The Format code points represent the
biggest possible problem. All but 36 of them are either officially
deprecated or strongly discouraged from being used. Of those 36, likely
the most widely used are the soft hyphen (U+00AD), and \s-1BOM, ZWSP, ZWNJ,
WJ,\s0 and similar characters, plus bidirectional controls.
.PP
\&\f(CW\*(C`\ep{Alpha}\*(C'\fR now matches the same characters as \f(CW\*(C`\ep{Alphabetic}\*(C'\fR. Before
5.12, Perl's definition definition included a number of things that aren't
really alpha (all marks) while omitting many that were. The definitions
of \f(CW\*(C`\ep{Alnum}\*(C'\fR and \f(CW\*(C`\ep{Word}\*(C'\fR depend on Alpha's definition and have
changed accordingly.
.PP
\&\f(CW\*(C`\ep{Word}\*(C'\fR no longer incorrectly matches non-word characters such
as fractions.
.PP
\&\f(CW\*(C`\ep{Print}\*(C'\fR no longer matches the line control characters: Tab, \s-1LF,
CR, FF, VT,\s0 and \s-1NEL.\s0 This brings it in line with standards and the
documentation.
.PP
\&\f(CW\*(C`\ep{XDigit}\*(C'\fR now matches the same characters as \f(CW\*(C`\ep{Hex_Digit}\*(C'\fR. This
means that in addition to the characters it currently matches,
\&\f(CW\*(C`[A\-Fa\-f0\-9]\*(C'\fR, it will also match the 22 fullwidth equivalents, for
example U+FF10: \s-1FULLWIDTH DIGIT ZERO.\s0
.PP
The Numeric type property has been extended to include the Unihan
characters.
.PP
There is a new Perl extension, the 'Present_In', or simply 'In',
property. This is an extension of the Unicode Age property, but
\&\f(CW\*(C`\ep{In=5.0}\*(C'\fR matches any code point whose usage has been determined
\&\fIas of\fR Unicode version 5.0. The \f(CW\*(C`\ep{Age=5.0}\*(C'\fR only matches code points
added in \fIprecisely\fR version 5.0.
.PP
A number of properties now have the correct values for unassigned
code points. The affected properties are Bidi_Class, East_Asian_Width,
Joining_Type, Decomposition_Type, Hangul_Syllable_Type, Numeric_Type,
and Line_Break.
.PP
The Default_Ignorable_Code_Point, ID_Continue, and ID_Start properties
are now up to date with current Unicode definitions.
.PP
Earlier versions of Perl erroneously exposed certain properties that
are supposed to be Unicode internal-only.  Use of these in regular
expressions will now generate, if enabled, a deprecation warning message.
The properties are: Other_Alphabetic, Other_Default_Ignorable_Code_Point,
Other_Grapheme_Extend, Other_ID_Continue, Other_ID_Start, Other_Lowercase,
Other_Math, and Other_Uppercase.
.PP
It is now possible to change which Unicode properties Perl understands
on a per-installation basis. As mentioned above, certain properties
are turned off by default.  These include all the Unihan properties
(which should be accessible via the \s-1CPAN\s0 module Unicode::Unihan) and any
deprecated or Unicode internal-only property that Perl has never exposed.
.PP
The generated files in the \f(CW\*(C`lib/unicore/To\*(C'\fR directory are now more
clearly marked as being stable, directly usable by applications.  New hash
entries in them give the format of the normal entries, which allows for
easier machine parsing. Perl can generate files in this directory for
any property, though most are suppressed.  You can find instructions
for changing which are written in perluniprops.
.SH "Modules and Pragmata"
.IX Header "Modules and Pragmata"
.SS "New Modules and Pragmata"
.IX Subsection "New Modules and Pragmata"
.ie n .IP """autodie""" 4
.el .IP "\f(CWautodie\fR" 4
.IX Item "autodie"
\&\f(CW\*(C`autodie\*(C'\fR is a new lexically-scoped alternative for the \f(CW\*(C`Fatal\*(C'\fR module.
The bundled version is 2.06_01. Note that in this release, using a string
eval when \f(CW\*(C`autodie\*(C'\fR is in effect can cause the autodie behaviour to leak
into the surrounding scope. See \*(L"\s-1BUGS\*(R"\s0 in autodie for more details.
.Sp
Version 2.06_01 has been added to the Perl core.
.ie n .IP """Compress::Raw::Bzip2""" 4
.el .IP "\f(CWCompress::Raw::Bzip2\fR" 4
.IX Item "Compress::Raw::Bzip2"
Version 2.024 has been added to the Perl core.
.ie n .IP """overloading""" 4
.el .IP "\f(CWoverloading\fR" 4
.IX Item "overloading"
\&\f(CW\*(C`overloading\*(C'\fR allows you to lexically disable or enable overloading
for some or all operations.
.Sp
Version 0.001 has been added to the Perl core.
.ie n .IP """parent""" 4
.el .IP "\f(CWparent\fR" 4
.IX Item "parent"
\&\f(CW\*(C`parent\*(C'\fR establishes an \s-1ISA\s0 relationship with base classes at compile
time. It provides the key feature of \f(CW\*(C`base\*(C'\fR without further unwanted
behaviors.
.Sp
Version 0.223 has been added to the Perl core.
.ie n .IP """Parse::CPAN::Meta""" 4
.el .IP "\f(CWParse::CPAN::Meta\fR" 4
.IX Item "Parse::CPAN::Meta"
Version 1.40 has been added to the Perl core.
.ie n .IP """VMS::DCLsym""" 4
.el .IP "\f(CWVMS::DCLsym\fR" 4
.IX Item "VMS::DCLsym"
Version 1.03 has been added to the Perl core.
.ie n .IP """VMS::Stdio""" 4
.el .IP "\f(CWVMS::Stdio\fR" 4
.IX Item "VMS::Stdio"
Version 2.4 has been added to the Perl core.
.ie n .IP """XS::APItest::KeywordRPN""" 4
.el .IP "\f(CWXS::APItest::KeywordRPN\fR" 4
.IX Item "XS::APItest::KeywordRPN"
Version 0.003 has been added to the Perl core.
.SS "Updated Pragmata"
.IX Subsection "Updated Pragmata"
.ie n .IP """base""" 4
.el .IP "\f(CWbase\fR" 4
.IX Item "base"
Upgraded from version 2.13 to 2.15.
.ie n .IP """bignum""" 4
.el .IP "\f(CWbignum\fR" 4
.IX Item "bignum"
Upgraded from version 0.22 to 0.23.
.ie n .IP """charnames""" 4
.el .IP "\f(CWcharnames\fR" 4
.IX Item "charnames"
\&\f(CW\*(C`charnames\*(C'\fR now contains the Unicode \fINameAliases.txt\fR database file.
This has the effect of adding some extra \f(CW\*(C`\eN\*(C'\fR character names that
formerly wouldn't have been recognised; for example, \f(CW"\eN{LATIN CAPITAL
LETTER GHA}"\fR.
.Sp
Upgraded from version 1.06 to 1.07.
.ie n .IP """constant""" 4
.el .IP "\f(CWconstant\fR" 4
.IX Item "constant"
Upgraded from version 1.13 to 1.20.
.ie n .IP """diagnostics""" 4
.el .IP "\f(CWdiagnostics\fR" 4
.IX Item "diagnostics"
\&\f(CW\*(C`diagnostics\*(C'\fR now supports %.0f formatting internally.
.Sp
\&\f(CW\*(C`diagnostics\*(C'\fR no longer suppresses \f(CW\*(C`Use of uninitialized value in range
(or flip)\*(C'\fR warnings. [perl #71204]
.Sp
Upgraded from version 1.17 to 1.19.
.ie n .IP """feature""" 4
.el .IP "\f(CWfeature\fR" 4
.IX Item "feature"
In \f(CW\*(C`feature\*(C'\fR, the meaning of the \f(CW\*(C`:5.10\*(C'\fR and \f(CW\*(C`:5.10.X\*(C'\fR feature
bundles has changed slightly. The last component, if any (i.e. \f(CW\*(C`X\*(C'\fR) is
simply ignored.  This is predicated on the assumption that new features
will not, in general, be added to maintenance releases. So \f(CW\*(C`:5.10\*(C'\fR
and \f(CW\*(C`:5.10.X\*(C'\fR have identical effect. This is a change to the behaviour
documented for 5.10.0.
.Sp
\&\f(CW\*(C`feature\*(C'\fR now includes the \f(CW\*(C`unicode_strings\*(C'\fR feature:
.Sp
.Vb 1
\&    use feature "unicode_strings";
.Ve
.Sp
This pragma turns on Unicode semantics for the case-changing operations
(\f(CW\*(C`uc\*(C'\fR, \f(CW\*(C`lc\*(C'\fR, \f(CW\*(C`ucfirst\*(C'\fR, \f(CW\*(C`lcfirst\*(C'\fR) on strings that don't have the
internal \s-1UTF\-8\s0 flag set, but that contain single-byte characters between
128 and 255.
.Sp
Upgraded from version 1.11 to 1.16.
.ie n .IP """less""" 4
.el .IP "\f(CWless\fR" 4
.IX Item "less"
\&\f(CW\*(C`less\*(C'\fR now includes the \f(CW\*(C`stash_name\*(C'\fR method to allow subclasses of
\&\f(CW\*(C`less\*(C'\fR to pick where in %^H to store their stash.
.Sp
Upgraded from version 0.02 to 0.03.
.ie n .IP """lib""" 4
.el .IP "\f(CWlib\fR" 4
.IX Item "lib"
Upgraded from version 0.5565 to 0.62.
.ie n .IP """mro""" 4
.el .IP "\f(CWmro\fR" 4
.IX Item "mro"
\&\f(CW\*(C`mro\*(C'\fR is now implemented as an \s-1XS\s0 extension. The documented interface has
not changed. Code relying on the implementation detail that some \f(CW\*(C`mro::\*(C'\fR
methods happened to be available at all times gets to \*(L"keep both pieces\*(R".
.Sp
Upgraded from version 1.00 to 1.02.
.ie n .IP """overload""" 4
.el .IP "\f(CWoverload\fR" 4
.IX Item "overload"
\&\f(CW\*(C`overload\*(C'\fR now allow overloading of 'qr'.
.Sp
Upgraded from version 1.06 to 1.10.
.ie n .IP """threads""" 4
.el .IP "\f(CWthreads\fR" 4
.IX Item "threads"
Upgraded from version 1.67 to 1.75.
.ie n .IP """threads::shared""" 4
.el .IP "\f(CWthreads::shared\fR" 4
.IX Item "threads::shared"
Upgraded from version 1.14 to 1.32.
.ie n .IP """version""" 4
.el .IP "\f(CWversion\fR" 4
.IX Item "version"
\&\f(CW\*(C`version\*(C'\fR now has support for \*(L"Version number formats\*(R" as described
earlier in this document and in its own documentation.
.Sp
Upgraded from version 0.74 to 0.82.
.ie n .IP """warnings""" 4
.el .IP "\f(CWwarnings\fR" 4
.IX Item "warnings"
\&\f(CW\*(C`warnings\*(C'\fR has a new \f(CW\*(C`warnings::fatal_enabled()\*(C'\fR function.  It also
includes a new \f(CW\*(C`illegalproto\*(C'\fR warning category. See also \*(L"New or
Changed Diagnostics\*(R" for this change.
.Sp
Upgraded from version 1.06 to 1.09.
.SS "Updated Modules"
.IX Subsection "Updated Modules"
.ie n .IP """Archive::Extract""" 4
.el .IP "\f(CWArchive::Extract\fR" 4
.IX Item "Archive::Extract"
Upgraded from version 0.24 to 0.38.
.ie n .IP """Archive::Tar""" 4
.el .IP "\f(CWArchive::Tar\fR" 4
.IX Item "Archive::Tar"
Upgraded from version 1.38 to 1.54.
.ie n .IP """Attribute::Handlers""" 4
.el .IP "\f(CWAttribute::Handlers\fR" 4
.IX Item "Attribute::Handlers"
Upgraded from version 0.79 to 0.87.
.ie n .IP """AutoLoader""" 4
.el .IP "\f(CWAutoLoader\fR" 4
.IX Item "AutoLoader"
Upgraded from version 5.63 to 5.70.
.ie n .IP """B::Concise""" 4
.el .IP "\f(CWB::Concise\fR" 4
.IX Item "B::Concise"
Upgraded from version 0.74 to 0.78.
.ie n .IP """B::Debug""" 4
.el .IP "\f(CWB::Debug\fR" 4
.IX Item "B::Debug"
Upgraded from version 1.05 to 1.12.
.ie n .IP """B::Deparse""" 4
.el .IP "\f(CWB::Deparse\fR" 4
.IX Item "B::Deparse"
Upgraded from version 0.83 to 0.96.
.ie n .IP """B::Lint""" 4
.el .IP "\f(CWB::Lint\fR" 4
.IX Item "B::Lint"
Upgraded from version 1.09 to 1.11_01.
.ie n .IP """CGI""" 4
.el .IP "\f(CWCGI\fR" 4
.IX Item "CGI"
Upgraded from version 3.29 to 3.48.
.ie n .IP """Class::ISA""" 4
.el .IP "\f(CWClass::ISA\fR" 4
.IX Item "Class::ISA"
Upgraded from version 0.33 to 0.36.
.Sp
\&\s-1NOTE: \s0\f(CW\*(C`Class::ISA\*(C'\fR is deprecated and may be removed from a future
version of Perl.
.ie n .IP """Compress::Raw::Zlib""" 4
.el .IP "\f(CWCompress::Raw::Zlib\fR" 4
.IX Item "Compress::Raw::Zlib"
Upgraded from version 2.008 to 2.024.
.ie n .IP """CPAN""" 4
.el .IP "\f(CWCPAN\fR" 4
.IX Item "CPAN"
Upgraded from version 1.9205 to 1.94_56.
.ie n .IP """CPANPLUS""" 4
.el .IP "\f(CWCPANPLUS\fR" 4
.IX Item "CPANPLUS"
Upgraded from version 0.84 to 0.90.
.ie n .IP """CPANPLUS::Dist::Build""" 4
.el .IP "\f(CWCPANPLUS::Dist::Build\fR" 4
.IX Item "CPANPLUS::Dist::Build"
Upgraded from version 0.06_02 to 0.46.
.ie n .IP """Data::Dumper""" 4
.el .IP "\f(CWData::Dumper\fR" 4
.IX Item "Data::Dumper"
Upgraded from version 2.121_14 to 2.125.
.ie n .IP """DB_File""" 4
.el .IP "\f(CWDB_File\fR" 4
.IX Item "DB_File"
Upgraded from version 1.816_1 to 1.820.
.ie n .IP """Devel::PPPort""" 4
.el .IP "\f(CWDevel::PPPort\fR" 4
.IX Item "Devel::PPPort"
Upgraded from version 3.13 to 3.19.
.ie n .IP """Digest""" 4
.el .IP "\f(CWDigest\fR" 4
.IX Item "Digest"
Upgraded from version 1.15 to 1.16.
.ie n .IP """Digest::MD5""" 4
.el .IP "\f(CWDigest::MD5\fR" 4
.IX Item "Digest::MD5"
Upgraded from version 2.36_01 to 2.39.
.ie n .IP """Digest::SHA""" 4
.el .IP "\f(CWDigest::SHA\fR" 4
.IX Item "Digest::SHA"
Upgraded from version 5.45 to 5.47.
.ie n .IP """Encode""" 4
.el .IP "\f(CWEncode\fR" 4
.IX Item "Encode"
Upgraded from version 2.23 to 2.39.
.ie n .IP """Exporter""" 4
.el .IP "\f(CWExporter\fR" 4
.IX Item "Exporter"
Upgraded from version 5.62 to 5.64_01.
.ie n .IP """ExtUtils::CBuilder""" 4
.el .IP "\f(CWExtUtils::CBuilder\fR" 4
.IX Item "ExtUtils::CBuilder"
Upgraded from version 0.21 to 0.27.
.ie n .IP """ExtUtils::Command""" 4
.el .IP "\f(CWExtUtils::Command\fR" 4
.IX Item "ExtUtils::Command"
Upgraded from version 1.13 to 1.16.
.ie n .IP """ExtUtils::Constant""" 4
.el .IP "\f(CWExtUtils::Constant\fR" 4
.IX Item "ExtUtils::Constant"
Upgraded from version 0.2 to 0.22.
.ie n .IP """ExtUtils::Install""" 4
.el .IP "\f(CWExtUtils::Install\fR" 4
.IX Item "ExtUtils::Install"
Upgraded from version 1.44 to 1.55.
.ie n .IP """ExtUtils::MakeMaker""" 4
.el .IP "\f(CWExtUtils::MakeMaker\fR" 4
.IX Item "ExtUtils::MakeMaker"
Upgraded from version 6.42 to 6.56.
.ie n .IP """ExtUtils::Manifest""" 4
.el .IP "\f(CWExtUtils::Manifest\fR" 4
.IX Item "ExtUtils::Manifest"
Upgraded from version 1.51_01 to 1.57.
.ie n .IP """ExtUtils::ParseXS""" 4
.el .IP "\f(CWExtUtils::ParseXS\fR" 4
.IX Item "ExtUtils::ParseXS"
Upgraded from version 2.18_02 to 2.21.
.ie n .IP """File::Fetch""" 4
.el .IP "\f(CWFile::Fetch\fR" 4
.IX Item "File::Fetch"
Upgraded from version 0.14 to 0.24.
.ie n .IP """File::Path""" 4
.el .IP "\f(CWFile::Path\fR" 4
.IX Item "File::Path"
Upgraded from version 2.04 to 2.08_01.
.ie n .IP """File::Temp""" 4
.el .IP "\f(CWFile::Temp\fR" 4
.IX Item "File::Temp"
Upgraded from version 0.18 to 0.22.
.ie n .IP """Filter::Simple""" 4
.el .IP "\f(CWFilter::Simple\fR" 4
.IX Item "Filter::Simple"
Upgraded from version 0.82 to 0.84.
.ie n .IP """Filter::Util::Call""" 4
.el .IP "\f(CWFilter::Util::Call\fR" 4
.IX Item "Filter::Util::Call"
Upgraded from version 1.07 to 1.08.
.ie n .IP """Getopt::Long""" 4
.el .IP "\f(CWGetopt::Long\fR" 4
.IX Item "Getopt::Long"
Upgraded from version 2.37 to 2.38.
.ie n .IP """IO""" 4
.el .IP "\f(CWIO\fR" 4
.IX Item "IO"
Upgraded from version 1.23_01 to 1.25_02.
.ie n .IP """IO::Zlib""" 4
.el .IP "\f(CWIO::Zlib\fR" 4
.IX Item "IO::Zlib"
Upgraded from version 1.07 to 1.10.
.ie n .IP """IPC::Cmd""" 4
.el .IP "\f(CWIPC::Cmd\fR" 4
.IX Item "IPC::Cmd"
Upgraded from version 0.40_1 to 0.54.
.ie n .IP """IPC::SysV""" 4
.el .IP "\f(CWIPC::SysV\fR" 4
.IX Item "IPC::SysV"
Upgraded from version 1.05 to 2.01.
.ie n .IP """Locale::Maketext""" 4
.el .IP "\f(CWLocale::Maketext\fR" 4
.IX Item "Locale::Maketext"
Upgraded from version 1.12 to 1.14.
.ie n .IP """Locale::Maketext::Simple""" 4
.el .IP "\f(CWLocale::Maketext::Simple\fR" 4
.IX Item "Locale::Maketext::Simple"
Upgraded from version 0.18 to 0.21.
.ie n .IP """Log::Message""" 4
.el .IP "\f(CWLog::Message\fR" 4
.IX Item "Log::Message"
Upgraded from version 0.01 to 0.02.
.ie n .IP """Log::Message::Simple""" 4
.el .IP "\f(CWLog::Message::Simple\fR" 4
.IX Item "Log::Message::Simple"
Upgraded from version 0.04 to 0.06.
.ie n .IP """Math::BigInt""" 4
.el .IP "\f(CWMath::BigInt\fR" 4
.IX Item "Math::BigInt"
Upgraded from version 1.88 to 1.89_01.
.ie n .IP """Math::BigInt::FastCalc""" 4
.el .IP "\f(CWMath::BigInt::FastCalc\fR" 4
.IX Item "Math::BigInt::FastCalc"
Upgraded from version 0.16 to 0.19.
.ie n .IP """Math::BigRat""" 4
.el .IP "\f(CWMath::BigRat\fR" 4
.IX Item "Math::BigRat"
Upgraded from version 0.21 to 0.24.
.ie n .IP """Math::Complex""" 4
.el .IP "\f(CWMath::Complex\fR" 4
.IX Item "Math::Complex"
Upgraded from version 1.37 to 1.56.
.ie n .IP """Memoize""" 4
.el .IP "\f(CWMemoize\fR" 4
.IX Item "Memoize"
Upgraded from version 1.01_02 to 1.01_03.
.ie n .IP """MIME::Base64""" 4
.el .IP "\f(CWMIME::Base64\fR" 4
.IX Item "MIME::Base64"
Upgraded from version 3.07_01 to 3.08.
.ie n .IP """Module::Build""" 4
.el .IP "\f(CWModule::Build\fR" 4
.IX Item "Module::Build"
Upgraded from version 0.2808_01 to 0.3603.
.ie n .IP """Module::CoreList""" 4
.el .IP "\f(CWModule::CoreList\fR" 4
.IX Item "Module::CoreList"
Upgraded from version 2.12 to 2.29.
.ie n .IP """Module::Load""" 4
.el .IP "\f(CWModule::Load\fR" 4
.IX Item "Module::Load"
Upgraded from version 0.12 to 0.16.
.ie n .IP """Module::Load::Conditional""" 4
.el .IP "\f(CWModule::Load::Conditional\fR" 4
.IX Item "Module::Load::Conditional"
Upgraded from version 0.22 to 0.34.
.ie n .IP """Module::Loaded""" 4
.el .IP "\f(CWModule::Loaded\fR" 4
.IX Item "Module::Loaded"
Upgraded from version 0.01 to 0.06.
.ie n .IP """Module::Pluggable""" 4
.el .IP "\f(CWModule::Pluggable\fR" 4
.IX Item "Module::Pluggable"
Upgraded from version 3.6 to 3.9.
.ie n .IP """Net::Ping""" 4
.el .IP "\f(CWNet::Ping\fR" 4
.IX Item "Net::Ping"
Upgraded from version 2.33 to 2.36.
.ie n .IP """NEXT""" 4
.el .IP "\f(CWNEXT\fR" 4
.IX Item "NEXT"
Upgraded from version 0.60_01 to 0.64.
.ie n .IP """Object::Accessor""" 4
.el .IP "\f(CWObject::Accessor\fR" 4
.IX Item "Object::Accessor"
Upgraded from version 0.32 to 0.36.
.ie n .IP """Package::Constants""" 4
.el .IP "\f(CWPackage::Constants\fR" 4
.IX Item "Package::Constants"
Upgraded from version 0.01 to 0.02.
.ie n .IP """PerlIO""" 4
.el .IP "\f(CWPerlIO\fR" 4
.IX Item "PerlIO"
Upgraded from version 1.04 to 1.06.
.ie n .IP """Pod::Parser""" 4
.el .IP "\f(CWPod::Parser\fR" 4
.IX Item "Pod::Parser"
Upgraded from version 1.35 to 1.37.
.ie n .IP """Pod::Perldoc""" 4
.el .IP "\f(CWPod::Perldoc\fR" 4
.IX Item "Pod::Perldoc"
Upgraded from version 3.14_02 to 3.15_02.
.ie n .IP """Pod::Plainer""" 4
.el .IP "\f(CWPod::Plainer\fR" 4
.IX Item "Pod::Plainer"
Upgraded from version 0.01 to 1.02.
.Sp
\&\s-1NOTE: \s0\f(CW\*(C`Pod::Plainer\*(C'\fR is deprecated and may be removed from a future
version of Perl.
.ie n .IP """Pod::Simple""" 4
.el .IP "\f(CWPod::Simple\fR" 4
.IX Item "Pod::Simple"
Upgraded from version 3.05 to 3.13.
.ie n .IP """Safe""" 4
.el .IP "\f(CWSafe\fR" 4
.IX Item "Safe"
Upgraded from version 2.12 to 2.22.
.ie n .IP """SelfLoader""" 4
.el .IP "\f(CWSelfLoader\fR" 4
.IX Item "SelfLoader"
Upgraded from version 1.11 to 1.17.
.ie n .IP """Storable""" 4
.el .IP "\f(CWStorable\fR" 4
.IX Item "Storable"
Upgraded from version 2.18 to 2.22.
.ie n .IP """Switch""" 4
.el .IP "\f(CWSwitch\fR" 4
.IX Item "Switch"
Upgraded from version 2.13 to 2.16.
.Sp
\&\s-1NOTE: \s0\f(CW\*(C`Switch\*(C'\fR is deprecated and may be removed from a future version
of Perl.
.ie n .IP """Sys::Syslog""" 4
.el .IP "\f(CWSys::Syslog\fR" 4
.IX Item "Sys::Syslog"
Upgraded from version 0.22 to 0.27.
.ie n .IP """Term::ANSIColor""" 4
.el .IP "\f(CWTerm::ANSIColor\fR" 4
.IX Item "Term::ANSIColor"
Upgraded from version 1.12 to 2.02.
.ie n .IP """Term::UI""" 4
.el .IP "\f(CWTerm::UI\fR" 4
.IX Item "Term::UI"
Upgraded from version 0.18 to 0.20.
.ie n .IP """Test""" 4
.el .IP "\f(CWTest\fR" 4
.IX Item "Test"
Upgraded from version 1.25 to 1.25_02.
.ie n .IP """Test::Harness""" 4
.el .IP "\f(CWTest::Harness\fR" 4
.IX Item "Test::Harness"
Upgraded from version 2.64 to 3.17.
.ie n .IP """Test::Simple""" 4
.el .IP "\f(CWTest::Simple\fR" 4
.IX Item "Test::Simple"
Upgraded from version 0.72 to 0.94.
.ie n .IP """Text::Balanced""" 4
.el .IP "\f(CWText::Balanced\fR" 4
.IX Item "Text::Balanced"
Upgraded from version 2.0.0 to 2.02.
.ie n .IP """Text::ParseWords""" 4
.el .IP "\f(CWText::ParseWords\fR" 4
.IX Item "Text::ParseWords"
Upgraded from version 3.26 to 3.27.
.ie n .IP """Text::Soundex""" 4
.el .IP "\f(CWText::Soundex\fR" 4
.IX Item "Text::Soundex"
Upgraded from version 3.03 to 3.03_01.
.ie n .IP """Thread::Queue""" 4
.el .IP "\f(CWThread::Queue\fR" 4
.IX Item "Thread::Queue"
Upgraded from version 2.00 to 2.11.
.ie n .IP """Thread::Semaphore""" 4
.el .IP "\f(CWThread::Semaphore\fR" 4
.IX Item "Thread::Semaphore"
Upgraded from version 2.01 to 2.09.
.ie n .IP """Tie::RefHash""" 4
.el .IP "\f(CWTie::RefHash\fR" 4
.IX Item "Tie::RefHash"
Upgraded from version 1.37 to 1.38.
.ie n .IP """Time::HiRes""" 4
.el .IP "\f(CWTime::HiRes\fR" 4
.IX Item "Time::HiRes"
Upgraded from version 1.9711 to 1.9719.
.ie n .IP """Time::Local""" 4
.el .IP "\f(CWTime::Local\fR" 4
.IX Item "Time::Local"
Upgraded from version 1.18 to 1.1901_01.
.ie n .IP """Time::Piece""" 4
.el .IP "\f(CWTime::Piece\fR" 4
.IX Item "Time::Piece"
Upgraded from version 1.12 to 1.15.
.ie n .IP """Unicode::Collate""" 4
.el .IP "\f(CWUnicode::Collate\fR" 4
.IX Item "Unicode::Collate"
Upgraded from version 0.52 to 0.52_01.
.ie n .IP """Unicode::Normalize""" 4
.el .IP "\f(CWUnicode::Normalize\fR" 4
.IX Item "Unicode::Normalize"
Upgraded from version 1.02 to 1.03.
.ie n .IP """Win32""" 4
.el .IP "\f(CWWin32\fR" 4
.IX Item "Win32"
Upgraded from version 0.34 to 0.39.
.ie n .IP """Win32API::File""" 4
.el .IP "\f(CWWin32API::File\fR" 4
.IX Item "Win32API::File"
Upgraded from version 0.1001_01 to 0.1101.
.ie n .IP """XSLoader""" 4
.el .IP "\f(CWXSLoader\fR" 4
.IX Item "XSLoader"
Upgraded from version 0.08 to 0.10.
.SS "Removed Modules and Pragmata"
.IX Subsection "Removed Modules and Pragmata"
.ie n .IP """attrs""" 4
.el .IP "\f(CWattrs\fR" 4
.IX Item "attrs"
Removed from the Perl core.  Prior version was 1.02.
.ie n .IP """CPAN::API::HOWTO""" 4
.el .IP "\f(CWCPAN::API::HOWTO\fR" 4
.IX Item "CPAN::API::HOWTO"
Removed from the Perl core.  Prior version was 'undef'.
.ie n .IP """CPAN::DeferedCode""" 4
.el .IP "\f(CWCPAN::DeferedCode\fR" 4
.IX Item "CPAN::DeferedCode"
Removed from the Perl core.  Prior version was 5.50.
.ie n .IP """CPANPLUS::inc""" 4
.el .IP "\f(CWCPANPLUS::inc\fR" 4
.IX Item "CPANPLUS::inc"
Removed from the Perl core.  Prior version was 'undef'.
.ie n .IP """DCLsym""" 4
.el .IP "\f(CWDCLsym\fR" 4
.IX Item "DCLsym"
Removed from the Perl core.  Prior version was 1.03.
.ie n .IP """ExtUtils::MakeMaker::bytes""" 4
.el .IP "\f(CWExtUtils::MakeMaker::bytes\fR" 4
.IX Item "ExtUtils::MakeMaker::bytes"
Removed from the Perl core.  Prior version was 6.42.
.ie n .IP """ExtUtils::MakeMaker::vmsish""" 4
.el .IP "\f(CWExtUtils::MakeMaker::vmsish\fR" 4
.IX Item "ExtUtils::MakeMaker::vmsish"
Removed from the Perl core.  Prior version was 6.42.
.ie n .IP """Stdio""" 4
.el .IP "\f(CWStdio\fR" 4
.IX Item "Stdio"
Removed from the Perl core.  Prior version was 2.3.
.ie n .IP """Test::Harness::Assert""" 4
.el .IP "\f(CWTest::Harness::Assert\fR" 4
.IX Item "Test::Harness::Assert"
Removed from the Perl core.  Prior version was 0.02.
.ie n .IP """Test::Harness::Iterator""" 4
.el .IP "\f(CWTest::Harness::Iterator\fR" 4
.IX Item "Test::Harness::Iterator"
Removed from the Perl core.  Prior version was 0.02.
.ie n .IP """Test::Harness::Point""" 4
.el .IP "\f(CWTest::Harness::Point\fR" 4
.IX Item "Test::Harness::Point"
Removed from the Perl core.  Prior version was 0.01.
.ie n .IP """Test::Harness::Results""" 4
.el .IP "\f(CWTest::Harness::Results\fR" 4
.IX Item "Test::Harness::Results"
Removed from the Perl core.  Prior version was 0.01.
.ie n .IP """Test::Harness::Straps""" 4
.el .IP "\f(CWTest::Harness::Straps\fR" 4
.IX Item "Test::Harness::Straps"
Removed from the Perl core.  Prior version was 0.26_01.
.ie n .IP """Test::Harness::Util""" 4
.el .IP "\f(CWTest::Harness::Util\fR" 4
.IX Item "Test::Harness::Util"
Removed from the Perl core.  Prior version was 0.01.
.ie n .IP """XSSymSet""" 4
.el .IP "\f(CWXSSymSet\fR" 4
.IX Item "XSSymSet"
Removed from the Perl core.  Prior version was 1.1.
.SS "Deprecated Modules and Pragmata"
.IX Subsection "Deprecated Modules and Pragmata"
See \*(L"Deprecated Modules\*(R" above.
.SH "Documentation"
.IX Header "Documentation"
.SS "New Documentation"
.IX Subsection "New Documentation"
.IP "\(bu" 4
perlhaiku contains instructions on how to build perl for the Haiku
platform.
.IP "\(bu" 4
perlmroapi describes the new interface for pluggable Method Resolution
Orders.
.IP "\(bu" 4
perlperf, by Richard Foley, provides an introduction to the use of
performance and optimization techniques which can be used with particular
reference to perl programs.
.IP "\(bu" 4
perlrepository describes how to access the perl source using the \fIgit\fR
version control system.
.IP "\(bu" 4
perlpolicy extends the \*(L"Social contract about contributed modules\*(R" into
the beginnings of a document on Perl porting policies.
.SS "Changes to Existing Documentation"
.IX Subsection "Changes to Existing Documentation"
.IP "\(bu" 4
The various large \fIChanges*\fR files (which listed every change made
to perl over the last 18 years) have been removed, and replaced by a
small file, also called \fIChanges\fR, which just explains how that same
information may be extracted from the git version control system.
.IP "\(bu" 4
\&\fIPorting/patching.pod\fR has been deleted, as it mainly described
interacting with the old Perforce-based repository, which is now obsolete.
Information still relevant has been moved to perlrepository.
.IP "\(bu" 4
The syntax \f(CW\*(C`unless (EXPR) BLOCK else BLOCK\*(C'\fR is now documented as valid,
as is the syntax \f(CW\*(C`unless (EXPR) BLOCK elsif (EXPR) BLOCK ... else
BLOCK\*(C'\fR, although actually using the latter may not be the best idea for
the readability of your source code.
.IP "\(bu" 4
Documented \-X overloading.
.IP "\(bu" 4
Documented that \f(CW\*(C`when()\*(C'\fR treats specially most of the filetest operators
.IP "\(bu" 4
Documented \f(CW\*(C`when\*(C'\fR as a syntax modifier.
.IP "\(bu" 4
Eliminated \*(L"Old Perl threads tutorial\*(R", which described 5005 threads.
.Sp
\&\fIpod/perlthrtut.pod\fR is the same material reworked for ithreads.
.IP "\(bu" 4
Correct previous documentation: v\-strings are not deprecated
.Sp
With version objects, we need them to use \s-1MODULE VERSION\s0 syntax. This
patch removes the deprecation notice.
.IP "\(bu" 4
Security contact information is now part of perlsec.
.IP "\(bu" 4
A significant fraction of the core documentation has been updated to
clarify the behavior of Perl's Unicode handling.
.Sp
Much of the remaining core documentation has been reviewed and edited
for clarity, consistent use of language, and to fix the spelling of Tom
Christiansen's name.
.IP "\(bu" 4
The Pod specification (perlpodspec) has been updated to bring the
specification in line with modern usage already supported by most Pod
systems. A parameter string may now follow the format name in a
\&\*(L"begin/end\*(R" region. Links to URIs with a text description are now
allowed. The usage of \f(CW\*(C`L<"section">\*(C'\fR has been marked as
deprecated.
.IP "\(bu" 4
if.pm has been documented in \*(L"use\*(R" in perlfunc as a means to get
conditional loading of modules despite the implicit \s-1BEGIN\s0 block around
\&\f(CW\*(C`use\*(C'\fR.
.IP "\(bu" 4
The documentation for \f(CW$1\fR in perlvar.pod has been clarified.
.IP "\(bu" 4
\&\f(CW\*(C`\eN{U+\f(CIcode point\f(CW}\*(C'\fR is now documented.
.SH "Selected Performance Enhancements"
.IX Header "Selected Performance Enhancements"
.IP "\(bu" 4
A new internal cache means that \f(CW\*(C`isa()\*(C'\fR will often be faster.
.IP "\(bu" 4
The implementation of \f(CW\*(C`C3\*(C'\fR Method Resolution Order has been
optimised \- linearisation for classes with single inheritance is 40%
faster. Performance for multiple inheritance is unchanged.
.IP "\(bu" 4
Under \f(CW\*(C`use locale\*(C'\fR, the locale-relevant information is now cached on
read-only values, such as the list returned by \f(CW\*(C`keys %hash\*(C'\fR. This makes
operations such as \f(CW\*(C`sort keys %hash\*(C'\fR in the scope of \f(CW\*(C`use locale\*(C'\fR
much faster.
.IP "\(bu" 4
Empty \f(CW\*(C`DESTROY\*(C'\fR methods are no longer called.
.IP "\(bu" 4
\&\f(CW\*(C`Perl_sv_utf8_upgrade()\*(C'\fR is now faster.
.IP "\(bu" 4
\&\f(CW\*(C`keys\*(C'\fR on empty hash is now faster.
.IP "\(bu" 4
\&\f(CW\*(C`if (%foo)\*(C'\fR has been optimized to be faster than \f(CW\*(C`if (keys %foo)\*(C'\fR.
.IP "\(bu" 4
The string repetition operator (\f(CW\*(C`$str x $num\*(C'\fR) is now several times
faster when \f(CW$str\fR has length one or \f(CW$num\fR is large.
.IP "\(bu" 4
Reversing an array to itself (as in \f(CW\*(C`@a = reverse @a\*(C'\fR) in void context
now happens in-place and is several orders of magnitude faster than
it used to be. It will also preserve non-existent elements whenever
possible, i.e. for non magical arrays or tied arrays with \f(CW\*(C`EXISTS\*(C'\fR
and \f(CW\*(C`DELETE\*(C'\fR methods.
.SH "Installation and Configuration Improvements"
.IX Header "Installation and Configuration Improvements"
.IP "\(bu" 4
perlapi, perlintern, perlmodlib and perltoc are now all
generated at build time, rather than being shipped as part of the release.
.IP "\(bu" 4
If \f(CW\*(C`vendorlib\*(C'\fR and \f(CW\*(C`vendorarch\*(C'\fR are the same, then they are only added
to \f(CW@INC\fR once.
.IP "\(bu" 4
\&\f(CW$Config{usedevel}\fR and the C\-level \f(CW\*(C`PERL_USE_DEVEL\*(C'\fR are now defined if
perl is built with  \f(CW\*(C`\-Dusedevel\*(C'\fR.
.IP "\(bu" 4
\&\fIConfigure\fR will enable use of \f(CW\*(C`\-fstack\-protector\*(C'\fR, to provide protection
against stack-smashing attacks, if the compiler supports it.
.IP "\(bu" 4
\&\fIConfigure\fR will now determine the correct prototypes for re-entrant
functions and for \f(CW\*(C`gconvert\*(C'\fR if you are using a \*(C+ compiler rather
than a C compiler.
.IP "\(bu" 4
On Unix, if you build from a tree containing a git repository, the
configuration process will note the commit hash you have checked out, for
display in the output of \f(CW\*(C`perl \-v\*(C'\fR and \f(CW\*(C`perl \-V\*(C'\fR. Unpushed local commits
are automatically added to the list of local patches displayed by
\&\f(CW\*(C`perl \-V\*(C'\fR.
.IP "\(bu" 4
Perl now supports SystemTap's \f(CW\*(C`dtrace\*(C'\fR compatibility layer and an
issue with linking \f(CW\*(C`miniperl\*(C'\fR has been fixed in the process.
.IP "\(bu" 4
perldoc now uses \f(CW\*(C`less \-R\*(C'\fR instead of \f(CW\*(C`less\*(C'\fR for improved behaviour
in the face of \f(CW\*(C`groff\*(C'\fR's new usage of \s-1ANSI\s0 escape codes.
.IP "\(bu" 4
\&\f(CW\*(C`perl \-V\*(C'\fR now reports use of the compile-time options \f(CW\*(C`USE_PERL_ATOF\*(C'\fR and
\&\f(CW\*(C`USE_ATTRIBUTES_FOR_PERLIO\*(C'\fR.
.IP "\(bu" 4
As part of the flattening of \fIext\fR, all extensions on all platforms are
built by \fImake_ext.pl\fR. This replaces the Unix-specific
\&\fIext/util/make_ext\fR, VMS-specific \fImake_ext.com\fR and Win32\-specific
\&\fIwin32/buildext.pl\fR.
.SH "Internal Changes"
.IX Header "Internal Changes"
Each release of Perl sees numerous internal changes which shouldn't
affect day to day usage but may still be notable for developers working
with Perl's source code.
.IP "\(bu" 4
The J.R.R. Tolkien quotes at the head of C source file have been checked
and proper citations added, thanks to a patch from Tom Christiansen.
.IP "\(bu" 4
The internal structure of the dual-life modules traditionally found in
the \fIlib/\fR and \fIext/\fR directories in the perl source has changed
significantly. Where possible, dual-lifed modules have been extracted
from \fIlib/\fR and \fIext/\fR.
.Sp
Dual-lifed modules maintained by Perl's developers as part of the Perl
core now live in \fIdist/\fR.  Dual-lifed modules maintained primarily on
\&\s-1CPAN\s0 now live in \fIcpan/\fR.  When reporting a bug in a module located
under \fIcpan/\fR, please send your bug report directly to the module's
bug tracker or author, rather than Perl's bug tracker.
.IP "\(bu" 4
\&\f(CW\*(C`\eN{...}\*(C'\fR now compiles better, always forces \s-1UTF\-8\s0 internal representation
.Sp
Perl's developers have fixed several problems with the recognition of
\&\f(CW\*(C`\eN{...}\*(C'\fR constructs.  As part of this, perl will store any scalar
or regex containing \f(CW\*(C`\eN{\f(CIname\f(CW}\*(C'\fR or \f(CW\*(C`\eN{U+\f(CIcode point\f(CW}\*(C'\fR in its
definition in \s-1UTF\-8\s0 format. (This was true previously for all occurrences
of \f(CW\*(C`\eN{\f(CIname\f(CW}\*(C'\fR that did not use a custom translator, but now it's
always true.)
.IP "\(bu" 4
Perl_magic_setmglob now knows about globs, fixing \s-1RT\s0 #71254.
.IP "\(bu" 4
\&\f(CW\*(C`SVt_RV\*(C'\fR no longer exists. RVs are now stored in IVs.
.IP "\(bu" 4
\&\f(CW\*(C`Perl_vcroak()\*(C'\fR now accepts a null first argument. In addition, a full
audit was made of the \*(L"not \s-1NULL\*(R"\s0 compiler annotations, and those for
several other internal functions were corrected.
.IP "\(bu" 4
New macros \f(CW\*(C`dSAVEDERRNO\*(C'\fR, \f(CW\*(C`dSAVE_ERRNO\*(C'\fR, \f(CW\*(C`SAVE_ERRNO\*(C'\fR, \f(CW\*(C`RESTORE_ERRNO\*(C'\fR
have been added to formalise the temporary saving of the \f(CW\*(C`errno\*(C'\fR
variable.
.IP "\(bu" 4
The function \f(CW\*(C`Perl_sv_insert_flags\*(C'\fR has been added to augment
\&\f(CW\*(C`Perl_sv_insert\*(C'\fR.
.IP "\(bu" 4
The function \f(CW\*(C`Perl_newSV_type(type)\*(C'\fR has been added, equivalent to
\&\f(CW\*(C`Perl_newSV()\*(C'\fR followed by \f(CW\*(C`Perl_sv_upgrade(type)\*(C'\fR.
.IP "\(bu" 4
The function \f(CW\*(C`Perl_newSVpvn_flags()\*(C'\fR has been added, equivalent to
\&\f(CW\*(C`Perl_newSVpvn()\*(C'\fR and then performing the action relevant to the flag.
.Sp
Two flag bits are currently supported.
.RS 4
.IP "\(bu" 4
\&\f(CW\*(C`SVf_UTF8\*(C'\fR will call \f(CW\*(C`SvUTF8_on()\*(C'\fR for you. (Note that this does
not convert an sequence of \s-1ISO 8859\-1\s0 characters to \s-1UTF\-8\s0). A wrapper,
\&\f(CW\*(C`newSVpvn_utf8()\*(C'\fR is available for this.
.IP "\(bu" 4
\&\f(CW\*(C`SVs_TEMP\*(C'\fR now calls \f(CW\*(C`Perl_sv_2mortal()\*(C'\fR on the new \s-1SV.\s0
.RE
.RS 4
.Sp
There is also a wrapper that takes constant strings, \f(CW\*(C`newSVpvs_flags()\*(C'\fR.
.RE
.IP "\(bu" 4
The function \f(CW\*(C`Perl_croak_xs_usage\*(C'\fR has been added as a wrapper to
\&\f(CW\*(C`Perl_croak\*(C'\fR.
.IP "\(bu" 4
Perl now exports the functions \f(CW\*(C`PerlIO_find_layer\*(C'\fR and \f(CW\*(C`PerlIO_list_alloc\*(C'\fR.
.IP "\(bu" 4
\&\f(CW\*(C`PL_na\*(C'\fR has been exterminated from the core code, replaced by local
\&\s-1STRLEN\s0 temporaries, or \f(CW\*(C`*_nolen()\*(C'\fR calls. Either approach is faster than
\&\f(CW\*(C`PL_na\*(C'\fR, which is a pointer dereference into the interpreter structure
under ithreads, and a global variable otherwise.
.IP "\(bu" 4
\&\f(CW\*(C`Perl_mg_free()\*(C'\fR used to leave freed memory accessible via \f(CW\*(C`SvMAGIC()\*(C'\fR
on the scalar. It now updates the linked list to remove each piece of
magic as it is freed.
.IP "\(bu" 4
Under ithreads, the regex in \f(CW\*(C`PL_reg_curpm\*(C'\fR is now reference
counted. This eliminates a lot of hackish workarounds to cope with it
not being reference counted.
.IP "\(bu" 4
\&\f(CW\*(C`Perl_mg_magical()\*(C'\fR would sometimes incorrectly turn on \f(CW\*(C`SvRMAGICAL()\*(C'\fR.
This has been fixed.
.IP "\(bu" 4
The \fIpublic\fR \s-1IV\s0 and \s-1NV\s0 flags are now not set if the string value has
trailing \*(L"garbage\*(R". This behaviour is consistent with not setting the
public \s-1IV\s0 or \s-1NV\s0 flags if the value is out of range for the type.
.IP "\(bu" 4
Uses of \f(CW\*(C`Nullav\*(C'\fR, \f(CW\*(C`Nullcv\*(C'\fR, \f(CW\*(C`Nullhv\*(C'\fR, \f(CW\*(C`Nullop\*(C'\fR, \f(CW\*(C`Nullsv\*(C'\fR etc have
been replaced by \f(CW\*(C`NULL\*(C'\fR in the core code, and non-dual-life modules,
as \f(CW\*(C`NULL\*(C'\fR is clearer to those unfamiliar with the core code.
.IP "\(bu" 4
A macro \f(CWMUTABLE_PTR(p)\fR has been added, which on (non-pedantic) gcc will
not cast away \f(CW\*(C`const\*(C'\fR, returning a \f(CW\*(C`void *\*(C'\fR. Macros \f(CW\*(C`MUTABLE_SV(av)\*(C'\fR,
\&\f(CW\*(C`MUTABLE_SV(cv)\*(C'\fR etc build on this, casting to \f(CW\*(C`AV *\*(C'\fR etc without
casting away \f(CW\*(C`const\*(C'\fR. This allows proper compile-time auditing of
\&\f(CW\*(C`const\*(C'\fR correctness in the core, and helped picked up some errors
(now fixed).
.IP "\(bu" 4
Macros \f(CW\*(C`mPUSHs()\*(C'\fR and \f(CW\*(C`mXPUSHs()\*(C'\fR have been added, for pushing SVs on the
stack and mortalizing them.
.IP "\(bu" 4
Use of the private structure \f(CW\*(C`mro_meta\*(C'\fR has changed slightly. Nothing
outside the core should be accessing this directly anyway.
.IP "\(bu" 4
A new tool, \fIPorting/expand\-macro.pl\fR has been added, that allows you
to view how a C preprocessor macro would be expanded when compiled.
This is handy when trying to decode the macro hell that is the perl
guts.
.SH "Testing"
.IX Header "Testing"
.SS "Testing improvements"
.IX Subsection "Testing improvements"
.IP "Parallel tests" 4
.IX Item "Parallel tests"
The core distribution can now run its regression tests in parallel on
Unix-like platforms. Instead of running \f(CW\*(C`make test\*(C'\fR, set \f(CW\*(C`TEST_JOBS\*(C'\fR in
your environment to the number of tests to run in parallel, and run
\&\f(CW\*(C`make test_harness\*(C'\fR. On a Bourne-like shell, this can be done as
.Sp
.Vb 1
\&    TEST_JOBS=3 make test_harness  # Run 3 tests in parallel
.Ve
.Sp
An environment variable is used, rather than parallel make itself, because
TAP::Harness needs to be able to schedule individual non-conflicting test
scripts itself, and there is no standard interface to \f(CW\*(C`make\*(C'\fR utilities to
interact with their job schedulers.
.Sp
Note that currently some test scripts may fail when run in parallel (most
notably \f(CW\*(C`ext/IO/t/io_dir.t\*(C'\fR). If necessary run just the failing scripts
again sequentially and see if the failures go away.
.IP "Test harness flexibility" 4
.IX Item "Test harness flexibility"
It's now possible to override \f(CW\*(C`PERL5OPT\*(C'\fR and friends in \fIt/TEST\fR
.IP "Test watchdog" 4
.IX Item "Test watchdog"
Several tests that have the potential to hang forever if they fail now
incorporate a \*(L"watchdog\*(R" functionality that will kill them after a timeout,
which helps ensure that \f(CW\*(C`make test\*(C'\fR and \f(CW\*(C`make test_harness\*(C'\fR run to
completion automatically.
.SS "New Tests"
.IX Subsection "New Tests"
Perl's developers have added a number of new tests to the core.
In addition to the items listed below, many modules updated from \s-1CPAN\s0
incorporate new tests.
.IP "\(bu" 4
Significant cleanups to core tests to ensure that language and
interpreter features are not used before they're tested.
.IP "\(bu" 4
\&\f(CW\*(C`make test_porting\*(C'\fR now runs a number of important pre-commit checks
which might be of use to anyone working on the Perl core.
.IP "\(bu" 4
\&\fIt/porting/podcheck.t\fR automatically checks the well-formedness of
\&\s-1POD\s0 found in all .pl, .pm and .pod files in the \fI\s-1MANIFEST\s0\fR, other than in
dual-lifed modules which are primarily maintained outside the Perl core.
.IP "\(bu" 4
\&\fIt/porting/manifest.t\fR now tests that all files listed in \s-1MANIFEST\s0
are present.
.IP "\(bu" 4
\&\fIt/op/while_readdir.t\fR tests that a bare readdir in while loop sets \f(CW$_\fR.
.IP "\(bu" 4
\&\fIt/comp/retainedlines.t\fR checks that the debugger can retain source
lines from \f(CW\*(C`eval\*(C'\fR.
.IP "\(bu" 4
\&\fIt/io/perlio_fail.t\fR checks that bad layers fail.
.IP "\(bu" 4
\&\fIt/io/perlio_leaks.t\fR checks that PerlIO layers are not leaking.
.IP "\(bu" 4
\&\fIt/io/perlio_open.t\fR checks that certain special forms of open work.
.IP "\(bu" 4
\&\fIt/io/perlio.t\fR includes general PerlIO tests.
.IP "\(bu" 4
\&\fIt/io/pvbm.t\fR checks that there is no unexpected interaction between
the internal types \f(CW\*(C`PVBM\*(C'\fR and \f(CW\*(C`PVGV\*(C'\fR.
.IP "\(bu" 4
\&\fIt/mro/package_aliases.t\fR checks that mro works properly in the presence
of aliased packages.
.IP "\(bu" 4
\&\fIt/op/dbm.t\fR tests \f(CW\*(C`dbmopen\*(C'\fR and \f(CW\*(C`dbmclose\*(C'\fR.
.IP "\(bu" 4
\&\fIt/op/index_thr.t\fR tests the interaction of \f(CW\*(C`index\*(C'\fR and threads.
.IP "\(bu" 4
\&\fIt/op/pat_thr.t\fR tests the interaction of esoteric patterns and threads.
.IP "\(bu" 4
\&\fIt/op/qr_gc.t\fR tests that \f(CW\*(C`qr\*(C'\fR doesn't leak.
.IP "\(bu" 4
\&\fIt/op/reg_email_thr.t\fR tests the interaction of regex recursion and threads.
.IP "\(bu" 4
\&\fIt/op/regexp_qr_embed_thr.t\fR tests the interaction of patterns with
embedded \f(CW\*(C`qr//\*(C'\fR and threads.
.IP "\(bu" 4
\&\fIt/op/regexp_unicode_prop.t\fR tests Unicode properties in regular
expressions.
.IP "\(bu" 4
\&\fIt/op/regexp_unicode_prop_thr.t\fR tests the interaction of Unicode
properties and threads.
.IP "\(bu" 4
\&\fIt/op/reg_nc_tie.t\fR tests the tied methods of \f(CW\*(C`Tie::Hash::NamedCapture\*(C'\fR.
.IP "\(bu" 4
\&\fIt/op/reg_posixcc.t\fR checks that \s-1POSIX\s0 character classes behave
consistently.
.IP "\(bu" 4
\&\fIt/op/re.t\fR checks that exportable \f(CW\*(C`re\*(C'\fR functions in \fIuniversal.c\fR work.
.IP "\(bu" 4
\&\fIt/op/setpgrpstack.t\fR checks that \f(CW\*(C`setpgrp\*(C'\fR works.
.IP "\(bu" 4
\&\fIt/op/substr_thr.t\fR tests the interaction of \f(CW\*(C`substr\*(C'\fR and threads.
.IP "\(bu" 4
\&\fIt/op/upgrade.t\fR checks that upgrading and assigning scalars works.
.IP "\(bu" 4
\&\fIt/uni/lex_utf8.t\fR checks that Unicode in the lexer works.
.IP "\(bu" 4
\&\fIt/uni/tie.t\fR checks that Unicode and \f(CW\*(C`tie\*(C'\fR work.
.IP "\(bu" 4
\&\fIt/comp/final_line_num.t\fR tests whether line numbers are correct at \s-1EOF\s0
.IP "\(bu" 4
\&\fIt/comp/form_scope.t\fR tests format scoping.
.IP "\(bu" 4
\&\fIt/comp/line_debug.t\fR tests whether \f(CW\*(C`@{"_<$file"}\*(C'\fR works.
.IP "\(bu" 4
\&\fIt/op/filetest_t.t\fR tests if \-t file test works.
.IP "\(bu" 4
\&\fIt/op/qr.t\fR tests \f(CW\*(C`qr\*(C'\fR.
.IP "\(bu" 4
\&\fIt/op/utf8cache.t\fR tests malfunctions of the utf8 cache.
.IP "\(bu" 4
\&\fIt/re/uniprops.t\fR test unicodes \f(CW\*(C`\ep{}\*(C'\fR regex constructs.
.IP "\(bu" 4
\&\fIt/op/filehandle.t\fR tests some suitably portable filetest operators
to check that they work as expected, particularly in the light of some
internal changes made in how filehandles are blessed.
.IP "\(bu" 4
\&\fIt/op/time_loop.t\fR tests that unix times greater than \f(CW\*(C`2**63\*(C'\fR, which
can now be handed to \f(CW\*(C`gmtime\*(C'\fR and \f(CW\*(C`localtime\*(C'\fR, do not cause an internal
overflow or an excessively long loop.
.SH "New or Changed Diagnostics"
.IX Header "New or Changed Diagnostics"
.SS "New Diagnostics"
.IX Subsection "New Diagnostics"
.IP "\(bu" 4
\&\s-1SV\s0 allocation tracing has been added to the diagnostics enabled by \f(CW\*(C`\-Dm\*(C'\fR.
The tracing can alternatively output via the \f(CW\*(C`PERL_MEM_LOG\*(C'\fR mechanism, if
that was enabled when the \fIperl\fR binary was compiled.
.IP "\(bu" 4
Smartmatch resolution tracing has been added as a new diagnostic. Use
\&\f(CW\*(C`\-DM\*(C'\fR to enable it.
.IP "\(bu" 4
A new debugging flag \f(CW\*(C`\-DB\*(C'\fR now dumps subroutine definitions, leaving
\&\f(CW\*(C`\-Dx\*(C'\fR for its original purpose of dumping syntax trees.
.IP "\(bu" 4
Perl 5.12 provides a number of new diagnostic messages to help you write
better code.  See perldiag for details of these new messages.
.RS 4
.IP "\(bu" 4
\&\f(CW\*(C`Bad plugin affecting keyword \*(Aq%s\*(Aq\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`gmtime(%.0f) too large\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`Lexing code attempted to stuff non\-Latin\-1 character into Latin\-1 input\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`Lexing code internal error (%s)\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`localtime(%.0f) too large\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`Overloaded dereference did not return a reference\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`Overloaded qr did not return a REGEXP\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`Perl_pmflag() is deprecated, and will be removed from the XS API\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`lvalue attribute ignored after the subroutine has been defined\*(C'\fR
.Sp
This new warning is issued when one attempts to mark a subroutine as
lvalue after it has been defined.
.IP "\(bu" 4
Perl now warns you if \f(CW\*(C`++\*(C'\fR or \f(CW\*(C`\-\-\*(C'\fR are unable to change the value
because it's beyond the limit of representation.
.Sp
This uses a new warnings category: \*(L"imprecision\*(R".
.IP "\(bu" 4
\&\f(CW\*(C`lc\*(C'\fR, \f(CW\*(C`uc\*(C'\fR, \f(CW\*(C`lcfirst\*(C'\fR, and \f(CW\*(C`ucfirst\*(C'\fR warn when passed undef.
.IP "\(bu" 4
\&\f(CW\*(C`Show constant in "Useless use of a constant in void context"\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`Prototype after \*(Aq%s\*(Aq\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`panic: sv_chop %s\*(C'\fR
.Sp
This new fatal error occurs when the C routine \f(CW\*(C`Perl_sv_chop()\*(C'\fR was
passed a position that is not within the scalar's string buffer. This
could be caused by buggy \s-1XS\s0 code, and at this point recovery is not
possible.
.IP "\(bu" 4
The fatal error \f(CW\*(C`Malformed UTF\-8 returned by \eN\*(C'\fR is now produced if the
\&\f(CW\*(C`charnames\*(C'\fR handler returns malformed \s-1UTF\-8.\s0
.IP "\(bu" 4
If an unresolved named character or sequence was encountered when
compiling a regex pattern then the fatal error \f(CW\*(C`\eN{NAME} must be resolved
by the lexer\*(C'\fR is now produced. This can happen, for example, when using a
single-quotish context like \f(CW\*(C`$re = \*(Aq\eN{SPACE}\*(Aq; /$re/;\*(C'\fR. See perldiag
for more examples of how the lexer can get bypassed.
.IP "\(bu" 4
\&\f(CW\*(C`Invalid hexadecimal number in \eN{U+...}\*(C'\fR is a new fatal error
triggered when the character constant represented by \f(CW\*(C`...\*(C'\fR is not a
valid hexadecimal number.
.IP "\(bu" 4
The new meaning of \f(CW\*(C`\eN\*(C'\fR as \f(CW\*(C`[^\en]\*(C'\fR is not valid in a bracketed character
class, just like \f(CW\*(C`.\*(C'\fR in a character class loses its special meaning,
and will cause the fatal error \f(CW\*(C`\eN in a character class must be a named
character: \eN{...}\*(C'\fR.
.IP "\(bu" 4
The rules on what is legal for the \f(CW\*(C`...\*(C'\fR in \f(CW\*(C`\eN{...}\*(C'\fR have been
tightened up so that unless the \f(CW\*(C`...\*(C'\fR begins with an alphabetic
character and continues with a combination of alphanumerics, dashes,
spaces, parentheses or colons then the warning \f(CW\*(C`Deprecated character(s)
in \eN{...} starting at \*(Aq%s\*(Aq\*(C'\fR is now issued.
.IP "\(bu" 4
The warning \f(CW\*(C`Using just the first characters returned by \eN{}\*(C'\fR will
be issued if the \f(CW\*(C`charnames\*(C'\fR handler returns a sequence of characters
which exceeds the limit of the number of characters that can be used. The
message will indicate which characters were used and which were discarded.
.RE
.RS 4
.RE
.SS "Changed Diagnostics"
.IX Subsection "Changed Diagnostics"
A number of existing diagnostic messages have been improved or corrected:
.IP "\(bu" 4
A new warning category \f(CW\*(C`illegalproto\*(C'\fR allows finer-grained control of
warnings around function prototypes.
.Sp
The two warnings:
.RS 4
.ie n .IP """Illegal character in prototype for %s : %s""" 4
.el .IP "\f(CWIllegal character in prototype for %s : %s\fR" 4
.IX Item "Illegal character in prototype for %s : %s"
.PD 0
.ie n .IP """Prototype after \*(Aq%c\*(Aq for %s : %s""" 4
.el .IP "\f(CWPrototype after \*(Aq%c\*(Aq for %s : %s\fR" 4
.IX Item "Prototype after %c for %s : %s"
.RE
.RS 4
.PD
.Sp
have been moved from the \f(CW\*(C`syntax\*(C'\fR top-level warnings category into a new
first-level category, \f(CW\*(C`illegalproto\*(C'\fR. These two warnings are currently
the only ones emitted during parsing of an invalid/illegal prototype,
so one can now use
.Sp
.Vb 1
\&  no warnings \*(Aqillegalproto\*(Aq;
.Ve
.Sp
to suppress only those, but not other syntax-related warnings. Warnings
where prototypes are changed, ignored, or not met are still in the
\&\f(CW\*(C`prototype\*(C'\fR category as before.
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Deep recursion on subroutine "%s"\*(C'\fR
.Sp
It is now possible to change the depth threshold for this warning from the
default of 100, by recompiling the \fIperl\fR binary, setting the C
pre-processor macro \f(CW\*(C`PERL_SUB_DEPTH_WARN\*(C'\fR to the desired value.
.IP "\(bu" 4
\&\f(CW\*(C`Illegal character in prototype\*(C'\fR warning is now more precise
when reporting illegal characters after _
.IP "\(bu" 4
mro merging error messages are now very similar to those produced by
Algorithm::C3.
.IP "\(bu" 4
Amelioration of the error message \*(L"Unrecognized character \f(CW%s\fR in column \f(CW%d\fR\*(R"
.Sp
Changes the error message to \*(L"Unrecognized character \f(CW%s\fR; marked by <\-\-
\&\s-1HERE\s0 after \f(CW%s\fR<\-\- \s-1HERE\s0 near column \f(CW%d\fR\*(R". This should make it a little
simpler to spot and correct the suspicious character.
.IP "\(bu" 4
Perl now explicitly points to \f(CW$.\fR when it causes an uninitialized
warning for ranges in scalar context.
.IP "\(bu" 4
\&\f(CW\*(C`split\*(C'\fR now warns when called in void context.
.IP "\(bu" 4
\&\f(CW\*(C`printf\*(C'\fR\-style functions called with too few arguments will now issue the
warning \f(CW"Missing argument in %s"\fR [perl #71000]
.IP "\(bu" 4
Perl now properly returns a syntax error instead of segfaulting
if \f(CW\*(C`each\*(C'\fR, \f(CW\*(C`keys\*(C'\fR, or \f(CW\*(C`values\*(C'\fR is used without an argument.
.IP "\(bu" 4
\&\f(CW\*(C`tell()\*(C'\fR now fails properly if called without an argument and when no
previous file was read.
.Sp
\&\f(CW\*(C`tell()\*(C'\fR now returns \f(CW\*(C`\-1\*(C'\fR, and sets errno to \f(CW\*(C`EBADF\*(C'\fR, thus restoring
the 5.8.x behaviour.
.IP "\(bu" 4
\&\f(CW\*(C`overload\*(C'\fR no longer implicitly unsets fallback on repeated 'use
overload' lines.
.IP "\(bu" 4
\&\fIPOSIX::strftime()\fR can now handle Unicode characters in the format string.
.IP "\(bu" 4
The \f(CW\*(C`syntax\*(C'\fR category was removed from 5 warnings that should only be in
\&\f(CW\*(C`deprecated\*(C'\fR.
.IP "\(bu" 4
Three fatal \f(CW\*(C`pack\*(C'\fR/\f(CW\*(C`unpack\*(C'\fR error messages have been normalized to
\&\f(CW\*(C`panic: %s\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`Unicode character is illegal\*(C'\fR has been rephrased to be more accurate
.Sp
It now reads \f(CW\*(C`Unicode non\-character is illegal in interchange\*(C'\fR and the
perldiag documentation has been expanded a bit.
.IP "\(bu" 4
Currently, all but the first of the several characters that the
\&\f(CW\*(C`charnames\*(C'\fR handler may return are discarded when used in a regular
expression pattern bracketed character class. If this happens then the
warning \f(CW\*(C`Using just the first character returned by \eN{} in character
class\*(C'\fR will be issued.
.IP "\(bu" 4
The warning \f(CW\*(C`Missing right brace on \eN{} or unescaped left brace after
\&\eN.  Assuming the latter\*(C'\fR will be issued if Perl encounters a \f(CW\*(C`\eN{\*(C'\fR
but doesn't find a matching \f(CW\*(C`}\*(C'\fR. In this case Perl doesn't know if it
was mistakenly omitted, or if \*(L"match non-newline\*(R" followed by "match
a \f(CW\*(C`{\*(C'\fR" was desired.  It assumes the latter because that is actually a
valid interpretation as written, unlike the other case.  If you meant
the former, you need to add the matching right brace.  If you did mean
the latter, you can silence this warning by writing instead \f(CW\*(C`\eN\e{\*(C'\fR.
.IP "\(bu" 4
\&\f(CW\*(C`gmtime\*(C'\fR and \f(CW\*(C`localtime\*(C'\fR called with numbers smaller than they can
reliably handle will now issue the warnings \f(CW\*(C`gmtime(%.0f) too small\*(C'\fR
and \f(CW\*(C`localtime(%.0f) too small\*(C'\fR.
.PP
The following diagnostic messages have been removed:
.IP "\(bu" 4
\&\f(CW\*(C`Runaway format\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`Can\*(Aqt locate package %s for the parents of %s\*(C'\fR
.Sp
In general this warning it only got produced in
conjunction with other warnings, and removing it allowed an \s-1ISA\s0 lookup
optimisation to be added.
.IP "\(bu" 4
\&\f(CW\*(C`v\-string in use/require is non\-portable\*(C'\fR
.SH "Utility Changes"
.IX Header "Utility Changes"
.IP "\(bu" 4
\&\fIh2ph\fR now looks in \f(CW\*(C`include\-fixed\*(C'\fR too, which is a recent addition
to gcc's search path.
.IP "\(bu" 4
\&\fIh2xs\fR no longer incorrectly treats enum values like macros.
It also now handles \*(C+ style comments (\f(CW\*(C`//\*(C'\fR) properly in enums.
.IP "\(bu" 4
\&\fIperl5db.pl\fR now supports \f(CW\*(C`LVALUE\*(C'\fR subroutines.  Additionally, the
debugger now correctly handles proxy constant subroutines, and
subroutine stubs.
.IP "\(bu" 4
\&\fIperlbug\fR now uses \f(CW%Module::CoreList::bug_tracker\fR to print out
upstream bug tracker URLs.  If a user identifies a particular module
as the topic of their bug report and we're able to divine the \s-1URL\s0 for
its upstream bug tracker, perlbug now provide a message to the user
explaining that the core copies the \s-1CPAN\s0 version directly, and provide
the \s-1URL\s0 for reporting the bug directly to the upstream author.
.Sp
\&\fIperlbug\fR no longer reports \*(L"Message sent\*(R" when it hasn't actually sent
the message
.IP "\(bu" 4
\&\fIperlthanks\fR is a new utility for sending non-bug-reports to the
authors and maintainers of Perl. Getting nothing but bug reports can
become a bit demoralising. If Perl 5.12 works well for you, please try
out \fIperlthanks\fR. It will make the developers smile.
.IP "\(bu" 4
Perl's developers have fixed bugs in \fIa2p\fR having to do with the
\&\f(CW\*(C`match()\*(C'\fR operator in list context.  Additionally, \fIa2p\fR no longer
generates code that uses the \f(CW$[\fR variable.
.SH "Selected Bug Fixes"
.IX Header "Selected Bug Fixes"
.IP "\(bu" 4
U+0FFFF is now a legal character in regular expressions.
.IP "\(bu" 4
pp_qr now always returns a new regexp \s-1SV.\s0 Resolves \s-1RT\s0 #69852.
.Sp
Instead of returning a(nother) reference to the (pre-compiled) regexp
in the optree, use \fIreg_temp_copy()\fR to create a copy of it, and return a
reference to that. This resolves issues about Regexp::DESTROY not being
called in a timely fashion (the original bug tracked by \s-1RT\s0 #69852), as
well as bugs related to blessing regexps, and of assigning to regexps,
as described in correspondence added to the ticket.
.Sp
It transpires that we also need to undo the \fISvPVX()\fR sharing when ithreads
cloning a Regexp \s-1SV,\s0 because mother_re is set to \s-1NULL,\s0 instead of a
cloned copy of the mother_re. This change might fix bugs with regexps
and threads in certain other situations, but as yet neither tests nor
bug reports have indicated any problems, so it might not actually be an
edge case that it's possible to reach.
.IP "\(bu" 4
Several compilation errors and segfaults when perl was built with \f(CW\*(C`\-Dmad\*(C'\fR
were fixed.
.IP "\(bu" 4
Fixes for lexer \s-1API\s0 changes in 5.11.2 which broke NYTProf's savesrc option.
.IP "\(bu" 4
\&\f(CW\*(C`\-t\*(C'\fR should only return \s-1TRUE\s0 for file handles connected to a \s-1TTY\s0
.Sp
The Microsoft C version of \f(CW\*(C`isatty()\*(C'\fR returns \s-1TRUE\s0 for all character mode
devices, including the \fI/dev/null\fR\-style \*(L"nul\*(R" device and printers like
\&\*(L"lpt1\*(R".
.IP "\(bu" 4
Fixed a regression caused by commit fafafbaf which caused a panic during
parameter passing [perl #70171]
.IP "\(bu" 4
On systems which in-place edits without backup files, \-i'*' now works as
the documentation says it does [perl #70802]
.IP "\(bu" 4
Saving and restoring magic flags no longer loses readonly flag.
.IP "\(bu" 4
The malformed syntax \f(CW\*(C`grep EXPR LIST\*(C'\fR (note the missing comma) no longer
causes abrupt and total failure.
.IP "\(bu" 4
Regular expressions compiled with \f(CW\*(C`qr{}\*(C'\fR literals properly set \f(CW\*(C`$\*(Aq\*(C'\fR when
matching again.
.IP "\(bu" 4
Using named subroutines with \f(CW\*(C`sort\*(C'\fR should no longer lead to bus errors
[perl #71076]
.IP "\(bu" 4
Numerous bugfixes catch small issues caused by the recently-added Lexer \s-1API.\s0
.IP "\(bu" 4
Smart match against \f(CW@_\fR sometimes gave false negatives. [perl #71078]
.IP "\(bu" 4
\&\f(CW$@\fR may now be assigned a read-only value (without error or busting
the stack).
.IP "\(bu" 4
\&\f(CW\*(C`sort\*(C'\fR called recursively from within an active comparison subroutine no
longer causes a bus error if run multiple times. [perl #71076]
.IP "\(bu" 4
Tie::Hash::NamedCapture::* will not abort if passed bad input (\s-1RT\s0 #71828)
.IP "\(bu" 4
\&\f(CW@_\fR and \f(CW$_\fR no longer leak under threads (\s-1RT\s0 #34342 and #41138, also
#70602, #70974)
.IP "\(bu" 4
\&\f(CW\*(C`\-I\*(C'\fR on shebang line now adds directories in front of \f(CW@INC\fR
as documented, and as does \f(CW\*(C`\-I\*(C'\fR when specified on the command-line.
.IP "\(bu" 4
\&\f(CW\*(C`kill\*(C'\fR is now fatal when called on non-numeric process identifiers.
Previously, an \f(CW\*(C`undef\*(C'\fR process identifier would be interpreted as a
request to kill process 0, which would terminate the current process
group on \s-1POSIX\s0 systems. Since process identifiers are always integers,
killing a non-numeric process is now fatal.
.IP "\(bu" 4
5.10.0 inadvertently disabled an optimisation, which caused a measurable
performance drop in list assignment, such as is often used to assign
function parameters from \f(CW@_\fR. The optimisation has been re-instated, and
the performance regression fixed. (This fix is also present in 5.10.1)
.IP "\(bu" 4
Fixed memory leak on \f(CW\*(C`while (1) { map 1, 1 }\*(C'\fR [\s-1RT\s0 #53038].
.IP "\(bu" 4
Some potential coredumps in PerlIO fixed [\s-1RT\s0 #57322,54828].
.IP "\(bu" 4
The debugger now works with lvalue subroutines.
.IP "\(bu" 4
The debugger's \f(CW\*(C`m\*(C'\fR command was broken on modules that defined constants
[\s-1RT\s0 #61222].
.IP "\(bu" 4
\&\f(CW\*(C`crypt\*(C'\fR and string complement could return tainted values for untainted
arguments [\s-1RT\s0 #59998].
.IP "\(bu" 4
The \f(CW\*(C`\-i\*(C'\fR\fI.suffix\fR command-line switch now recreates the file using
restricted permissions, before changing its mode to match the original
file. This eliminates a potential race condition [\s-1RT\s0 #60904].
.IP "\(bu" 4
On some Unix systems, the value in \f(CW$?\fR would not have the top bit set
(\f(CW\*(C`$? & 128\*(C'\fR) even if the child core dumped.
.IP "\(bu" 4
Under some circumstances, \f(CW$^R\fR could incorrectly become undefined
[\s-1RT\s0 #57042].
.IP "\(bu" 4
In the \s-1XS API,\s0 various hash functions, when passed a pre-computed hash where
the key is \s-1UTF\-8,\s0 might result in an incorrect lookup.
.IP "\(bu" 4
\&\s-1XS\s0 code including \fI\s-1XSUB\s0.h\fR before \fIperl.h\fR gave a compile-time error
[\s-1RT\s0 #57176].
.IP "\(bu" 4
\&\f(CW\*(C`$object\->isa(\*(AqFoo\*(Aq)\*(C'\fR would report false if the package \f(CW\*(C`Foo\*(C'\fR
didn't exist, even if the object's \f(CW@ISA\fR contained \f(CW\*(C`Foo\*(C'\fR.
.IP "\(bu" 4
Various bugs in the new-to 5.10.0 mro code, triggered by manipulating
\&\f(CW@ISA\fR, have been found and fixed.
.IP "\(bu" 4
Bitwise operations on references could crash the interpreter, e.g.
\&\f(CW\*(C`$x=\e$y; $x |= "foo"\*(C'\fR [\s-1RT\s0 #54956].
.IP "\(bu" 4
Patterns including alternation might be sensitive to the internal \s-1UTF\-8\s0
representation, e.g.
.Sp
.Vb 3
\&    my $byte = chr(192);
\&    my $utf8 = chr(192); utf8::upgrade($utf8);
\&    $utf8 =~ /$byte|X}/i;       # failed in 5.10.0
.Ve
.IP "\(bu" 4
Within UTF8\-encoded Perl source files (i.e. where \f(CW\*(C`use utf8\*(C'\fR is in
effect), double-quoted literal strings could be corrupted where a \f(CW\*(C`\exNN\*(C'\fR,
\&\f(CW\*(C`\e0NNN\*(C'\fR or \f(CW\*(C`\eN{}\*(C'\fR is followed by a literal character with ordinal value
greater than 255 [\s-1RT\s0 #59908].
.IP "\(bu" 4
\&\f(CW\*(C`B::Deparse\*(C'\fR failed to correctly deparse various constructs:
\&\f(CW\*(C`readpipe STRING\*(C'\fR [\s-1RT\s0 #62428], \f(CW\*(C`CORE::require(STRING)\*(C'\fR [\s-1RT\s0 #62488],
\&\f(CW\*(C`sub foo(_)\*(C'\fR [\s-1RT\s0 #62484].
.IP "\(bu" 4
Using \f(CW\*(C`setpgrp\*(C'\fR with no arguments could corrupt the perl stack.
.IP "\(bu" 4
The block form of \f(CW\*(C`eval\*(C'\fR is now specifically trappable by \f(CW\*(C`Safe\*(C'\fR and
\&\f(CW\*(C`ops\*(C'\fR. Previously it was erroneously treated like string \f(CW\*(C`eval\*(C'\fR.
.IP "\(bu" 4
In 5.10.0, the two characters \f(CW\*(C`[~\*(C'\fR were sometimes parsed as the smart
match operator (\f(CW\*(C`~~\*(C'\fR) [\s-1RT\s0 #63854].
.IP "\(bu" 4
In 5.10.0, the \f(CW\*(C`*\*(C'\fR quantifier in patterns was sometimes treated as
\&\f(CW\*(C`{0,32767}\*(C'\fR [\s-1RT\s0 #60034, #60464]. For example, this match would fail:
.Sp
.Vb 1
\&    ("ab" x 32768) =~ /^(ab)*$/
.Ve
.IP "\(bu" 4
\&\f(CW\*(C`shmget\*(C'\fR was limited to a 32 bit segment size on a 64 bit \s-1OS\s0 [\s-1RT\s0 #63924].
.IP "\(bu" 4
Using \f(CW\*(C`next\*(C'\fR or \f(CW\*(C`last\*(C'\fR to exit a \f(CW\*(C`given\*(C'\fR block no longer produces a
spurious warning like the following:
.Sp
.Vb 1
\&    Exiting given via last at foo.pl line 123
.Ve
.IP "\(bu" 4
Assigning a format to a glob could corrupt the format; e.g.:
.Sp
.Vb 1
\&     *bar=*foo{FORMAT}; # foo format now bad
.Ve
.IP "\(bu" 4
Attempting to coerce a typeglob to a string or number could cause an
assertion failure. The correct error message is now generated,
\&\f(CW\*(C`Can\*(Aqt coerce GLOB to \f(CI$type\f(CW\*(C'\fR.
.IP "\(bu" 4
Under \f(CW\*(C`use filetest \*(Aqaccess\*(Aq\*(C'\fR, \f(CW\*(C`\-x\*(C'\fR was using the wrong access
mode. This has been fixed [\s-1RT\s0 #49003].
.IP "\(bu" 4
\&\f(CW\*(C`length\*(C'\fR on a tied scalar that returned a Unicode value would not be
correct the first time. This has been fixed.
.IP "\(bu" 4
Using an array \f(CW\*(C`tie\*(C'\fR inside in array \f(CW\*(C`tie\*(C'\fR could \s-1SEGV.\s0 This has been
fixed. [\s-1RT\s0 #51636]
.IP "\(bu" 4
A race condition inside \f(CW\*(C`PerlIOStdio_close()\*(C'\fR has been identified and
fixed. This used to cause various threading issues, including SEGVs.
.IP "\(bu" 4
In \f(CW\*(C`unpack\*(C'\fR, the use of \f(CW\*(C`()\*(C'\fR groups in scalar context was internally
placing a list on the interpreter's stack, which manifested in various
ways, including SEGVs. This is now fixed [\s-1RT\s0 #50256].
.IP "\(bu" 4
Magic was called twice in \f(CW\*(C`substr\*(C'\fR, \f(CW\*(C`\e&$x\*(C'\fR, \f(CW\*(C`tie $x, $m\*(C'\fR and \f(CW\*(C`chop\*(C'\fR.
These have all been fixed.
.IP "\(bu" 4
A 5.10.0 optimisation to clear the temporary stack within the implicit
loop of \f(CW\*(C`s///ge\*(C'\fR has been reverted, as it turned out to be the cause of
obscure bugs in seemingly unrelated parts of the interpreter [commit
ef0d4e17921ee3de].
.IP "\(bu" 4
The line numbers for warnings inside \f(CW\*(C`elsif\*(C'\fR are now correct.
.IP "\(bu" 4
The \f(CW\*(C`..\*(C'\fR operator now works correctly with ranges whose ends are at or
close to the values of the smallest and largest integers.
.IP "\(bu" 4
\&\f(CW\*(C`binmode STDIN, \*(Aq:raw\*(Aq\*(C'\fR could lead to segmentation faults on some platforms.
This has been fixed [\s-1RT\s0 #54828].
.IP "\(bu" 4
An off-by-one error meant that \f(CW\*(C`index $str, ...\*(C'\fR was effectively being
executed as \f(CW\*(C`index "$str\e0", ...\*(C'\fR. This has been fixed [\s-1RT\s0 #53746].
.IP "\(bu" 4
Various leaks associated with named captures in regexes have been fixed
[\s-1RT\s0 #57024].
.IP "\(bu" 4
A weak reference to a hash would leak. This was affecting \f(CW\*(C`DBI\*(C'\fR
[\s-1RT\s0 #56908].
.IP "\(bu" 4
Using (?|) in a regex could cause a segfault [\s-1RT\s0 #59734].
.IP "\(bu" 4
Use of a \s-1UTF\-8 \s0\f(CW\*(C`tr//\*(C'\fR within a closure could cause a segfault [\s-1RT\s0 #61520].
.IP "\(bu" 4
Calling \f(CW\*(C`Perl_sv_chop()\*(C'\fR or otherwise upgrading an \s-1SV\s0 could result in an
unaligned 64\-bit access on the \s-1SPARC\s0 architecture [\s-1RT\s0 #60574].
.IP "\(bu" 4
In the 5.10.0 release, \f(CW\*(C`inc_version_list\*(C'\fR would incorrectly list
\&\f(CW\*(C`5.10.*\*(C'\fR after \f(CW\*(C`5.8.*\*(C'\fR; this affected the \f(CW@INC\fR search order
[\s-1RT\s0 #67628].
.IP "\(bu" 4
In 5.10.0, \f(CW\*(C`pack "a*", $tainted_value\*(C'\fR returned a non-tainted value
[\s-1RT\s0 #52552].
.IP "\(bu" 4
In 5.10.0, \f(CW\*(C`printf\*(C'\fR and \f(CW\*(C`sprintf\*(C'\fR could produce the fatal error
\&\f(CW\*(C`panic: utf8_mg_pos_cache_update\*(C'\fR when printing \s-1UTF\-8\s0 strings
[\s-1RT\s0 #62666].
.IP "\(bu" 4
In the 5.10.0 release, a dynamically created \f(CW\*(C`AUTOLOAD\*(C'\fR method might be
missed (method cache issue) [\s-1RT\s0 #60220,60232].
.IP "\(bu" 4
In the 5.10.0 release, a combination of \f(CW\*(C`use feature\*(C'\fR and \f(CW\*(C`//ee\*(C'\fR could
cause a memory leak [\s-1RT\s0 #63110].
.IP "\(bu" 4
\&\f(CW\*(C`\-C\*(C'\fR on the shebang (\f(CW\*(C`#!\*(C'\fR) line is once more permitted if it is also
specified on the command line. \f(CW\*(C`\-C\*(C'\fR on the shebang line used to be a
silent no-op \fIif\fR it was not also on the command line, so perl 5.10.0
disallowed it, which broke some scripts. Now perl checks whether it is
also on the command line and only dies if it is not [\s-1RT\s0 #67880].
.IP "\(bu" 4
In 5.10.0, certain types of re-entrant regular expression could crash,
or cause the following assertion failure [\s-1RT\s0 #60508]:
.Sp
.Vb 1
\&    Assertion rx\->sublen >= (s \- rx\->subbeg) + i failed
.Ve
.IP "\(bu" 4
Perl now includes previously missing files from the Unicode Character
Database.
.IP "\(bu" 4
Perl now honors \f(CW\*(C`TMPDIR\*(C'\fR when opening an anonymous temporary file.
.SH "Platform Specific Changes"
.IX Header "Platform Specific Changes"
Perl is incredibly portable. In general, if a platform has a C compiler,
someone has ported Perl to it (or will soon).  We're happy to announce
that Perl 5.12 includes support for several new platforms.  At the same
time, it's time to bid farewell to some (very) old friends.
.SS "New Platforms"
.IX Subsection "New Platforms"
.IP "Haiku" 4
.IX Item "Haiku"
Perl's developers have merged patches from Haiku's maintainers. Perl
should now build on Haiku.
.IP "MirOS \s-1BSD\s0" 4
.IX Item "MirOS BSD"
Perl should now build on MirOS \s-1BSD.\s0
.SS "Discontinued Platforms"
.IX Subsection "Discontinued Platforms"
.IP "Domain/OS" 4
.IX Item "Domain/OS"
.PD 0
.IP "MiNT" 4
.IX Item "MiNT"
.IP "Tenon MachTen" 4
.IX Item "Tenon MachTen"
.PD
.SS "Updated Platforms"
.IX Subsection "Updated Platforms"
.IP "\s-1AIX\s0" 4
.IX Item "AIX"
.RS 4
.PD 0
.IP "\(bu" 4
.PD
Removed \fIlibbsd\fR for \s-1AIX 5L\s0 and 6.1. Only \f(CW\*(C`flock()\*(C'\fR was used from
\&\fIlibbsd\fR.
.IP "\(bu" 4
Removed \fIlibgdbm\fR for \s-1AIX 5L\s0 and 6.1 if \fIlibgdbm\fR < 1.8.3\-5 is
installed.  The \fIlibgdbm\fR is delivered as an optional package with the
\&\s-1AIX\s0 Toolbox.  Unfortunately the versions below 1.8.3\-5 are broken.
.IP "\(bu" 4
Hints changes mean that \s-1AIX 4.2\s0 should work again.
.RE
.RS 4
.RE
.IP "Cygwin" 4
.IX Item "Cygwin"
.RS 4
.PD 0
.IP "\(bu" 4
.PD
Perl now supports IPv6 on Cygwin 1.7 and newer.
.IP "\(bu" 4
On Cygwin we now strip the last number from the \s-1DLL.\s0 This has been the
behaviour in the cygwin.com build for years. The hints files have been
updated.
.RE
.RS 4
.RE
.IP "Darwin (Mac \s-1OS X\s0)" 4
.IX Item "Darwin (Mac OS X)"
.RS 4
.PD 0
.IP "\(bu" 4
.PD
Skip testing the be_BY.CP1131 locale on Darwin 10 (Mac \s-1OS X 10.6\s0),
as it's still buggy.
.IP "\(bu" 4
Correct infelicities in the regexp used to identify buggy locales
on Darwin 8 and 9 (Mac \s-1OS X 10.4\s0 and 10.5, respectively).
.RE
.RS 4
.RE
.IP "DragonFly \s-1BSD\s0" 4
.IX Item "DragonFly BSD"
.RS 4
.PD 0
.IP "\(bu" 4
.PD
Fix thread library selection [perl #69686]
.RE
.RS 4
.RE
.IP "FreeBSD" 4
.IX Item "FreeBSD"
.RS 4
.PD 0
.IP "\(bu" 4
.PD
The hints files now identify the correct threading libraries on FreeBSD 7
and later.
.RE
.RS 4
.RE
.IP "Irix" 4
.IX Item "Irix"
.RS 4
.PD 0
.IP "\(bu" 4
.PD
We now work around a bizarre preprocessor bug in the Irix 6.5 compiler:
\&\f(CW\*(C`cc \-E \-\*(C'\fR unfortunately goes into K&R mode, but \f(CW\*(C`cc \-E file.c\*(C'\fR doesn't.
.RE
.RS 4
.RE
.IP "NetBSD" 4
.IX Item "NetBSD"
.RS 4
.PD 0
.IP "\(bu" 4
.PD
Hints now supports versions 5.*.
.RE
.RS 4
.RE
.IP "OpenVMS" 4
.IX Item "OpenVMS"
.RS 4
.PD 0
.IP "\(bu" 4
.PD
\&\f(CW\*(C`\-UDEBUGGING\*(C'\fR is now the default on \s-1VMS.\s0
.Sp
Like it has been everywhere else for ages and ages. Also make command-line
selection of \-UDEBUGGING and \-DDEBUGGING work in configure.com; before
the only way to turn it off was by saying no in answer to the interactive
question.
.IP "\(bu" 4
The default pipe buffer size on \s-1VMS\s0 has been updated to 8192 on 64\-bit
systems.
.IP "\(bu" 4
Reads from the in-memory temporary files of \f(CW\*(C`PerlIO::scalar\*(C'\fR used to fail
if \f(CW$/\fR was set to a numeric reference (to indicate record-style reads).
This is now fixed.
.IP "\(bu" 4
\&\s-1VMS\s0 now supports \f(CW\*(C`getgrgid\*(C'\fR.
.IP "\(bu" 4
Many improvements and cleanups have been made to the \s-1VMS\s0 file name handling
and conversion code.
.IP "\(bu" 4
Enabling the \f(CW\*(C`PERL_VMS_POSIX_EXIT\*(C'\fR logical name now encodes a \s-1POSIX\s0 exit
status in a \s-1VMS\s0 condition value for better interaction with \s-1GNV\s0's bash
shell and other utilities that depend on \s-1POSIX\s0 exit values. See
\&\*(L"$?\*(R" in perlvms for details.
.IP "\(bu" 4
\&\f(CW\*(C`File::Copy\*(C'\fR now detects Unix compatibility mode on \s-1VMS.\s0
.RE
.RS 4
.RE
.IP "Stratus \s-1VOS\s0" 4
.IX Item "Stratus VOS"
.RS 4
.PD 0
.IP "\(bu" 4
.PD
Various changes from Stratus have been merged in.
.RE
.RS 4
.RE
.IP "Symbian" 4
.IX Item "Symbian"
.RS 4
.PD 0
.IP "\(bu" 4
.PD
There is now support for Symbian S60 3.2 \s-1SDK\s0 and S60 5.0 \s-1SDK.\s0
.RE
.RS 4
.RE
.IP "Windows" 4
.IX Item "Windows"
.RS 4
.PD 0
.IP "\(bu" 4
.PD
Perl 5.12 supports Windows 2000 and later. The supporting code for
legacy versions of Windows is still included, but will be removed
during the next development cycle.
.IP "\(bu" 4
Initial support for building Perl with MinGW\-w64 is now available.
.IP "\(bu" 4
\&\fIperl.exe\fR now includes a manifest resource to specify the \f(CW\*(C`trustInfo\*(C'\fR
settings for Windows Vista and later. Without this setting Windows
would treat \fIperl.exe\fR as a legacy application and apply various
heuristics like redirecting access to protected file system areas
(like the \*(L"Program Files\*(R" folder) to the users \*(L"VirtualStore\*(R"
instead of generating a proper \*(L"permission denied\*(R" error.
.Sp
The manifest resource also requests the Microsoft Common-Controls
version 6.0 (themed controls introduced in Windows \s-1XP\s0).  Check out the
Win32::VisualStyles module on \s-1CPAN\s0 to switch back to old style
unthemed controls for legacy applications.
.IP "\(bu" 4
The \f(CW\*(C`\-t\*(C'\fR filetest operator now only returns true if the filehandle
is connected to a console window.  In previous versions of Perl it
would return true for all character mode devices, including \fI\s-1NUL\s0\fR
and \fI\s-1LPT1\s0\fR.
.IP "\(bu" 4
The \f(CW\*(C`\-p\*(C'\fR filetest operator now works correctly, and the
Fcntl::S_IFIFO constant is defined when Perl is compiled with
Microsoft Visual C.  In previous Perl versions \f(CW\*(C`\-p\*(C'\fR always
returned a false value, and the Fcntl::S_IFIFO constant
was not defined.
.Sp
This bug is specific to Microsoft Visual C and never affected
Perl binaries built with MinGW.
.IP "\(bu" 4
The socket error codes are now more widely supported:  The \s-1POSIX\s0
module will define the symbolic names, like \s-1POSIX::EWOULDBLOCK,\s0
and stringification of socket error codes in $! works as well
now;
.Sp
.Vb 2
\&  C:\e>perl \-MPOSIX \-E "$!=POSIX::EWOULDBLOCK; say $!"
\&  A non\-blocking socket operation could not be completed immediately.
.Ve
.IP "\(bu" 4
\&\fIflock()\fR will now set sensible error codes in $!.  Previous Perl versions
copied the value of $^E into $!, which caused much confusion.
.IP "\(bu" 4
\&\fIselect()\fR now supports all empty \f(CW\*(C`fd_set\*(C'\fRs more correctly.
.IP "\(bu" 4
\&\f(CW\*(Aq.\efoo\*(Aq\fR and \f(CW\*(Aq..\efoo\*(Aq\fR  were treated differently than
\&\f(CW\*(Aq./foo\*(Aq\fR and \f(CW\*(Aq../foo\*(Aq\fR by \f(CW\*(C`do\*(C'\fR and \f(CW\*(C`require\*(C'\fR [\s-1RT\s0 #63492].
.IP "\(bu" 4
Improved message window handling means that \f(CW\*(C`alarm\*(C'\fR and \f(CW\*(C`kill\*(C'\fR messages
will no longer be dropped under race conditions.
.IP "\(bu" 4
Various bits of Perl's build infrastructure are no longer converted to
win32 line endings at release time. If this hurts you, please report the
problem with the perlbug program included with perl.
.RE
.RS 4
.RE
.SH "Known Problems"
.IX Header "Known Problems"
This is a list of some significant unfixed bugs, which are regressions
from either 5.10.x or 5.8.x.
.IP "\(bu" 4
Some \s-1CPANPLUS\s0 tests may fail if there is a functioning file
\&\fI../../cpanp\-run\-perl\fR outside your build directory. The failure
shouldn't imply there's a problem with the actual functional
software. The bug is already fixed in [\s-1RT\s0 #74188] and is scheduled for
inclusion in perl\-v5.12.1.
.IP "\(bu" 4
\&\f(CW\*(C`List::Util::first\*(C'\fR misbehaves in the presence of a lexical \f(CW$_\fR
(typically introduced by \f(CW\*(C`my $_\*(C'\fR or implicitly by \f(CW\*(C`given\*(C'\fR). The variable
which gets set for each iteration is the package variable \f(CW$_\fR, not the
lexical \f(CW$_\fR [\s-1RT\s0 #67694].
.Sp
A similar issue may occur in other modules that provide functions which
take a block as their first argument, like
.Sp
.Vb 1
\&    foo { ... $_ ...} list
.Ve
.IP "\(bu" 4
Some regexes may run much more slowly when run in a child thread compared
with the thread the pattern was compiled into [\s-1RT\s0 #55600].
.IP "\(bu" 4
Things like \f(CW\*(C`"\eN{LATIN SMALL LIGATURE FF}" =~ /\eN{LATIN SMALL LETTER F}+/\*(C'\fR
will appear to hang as they get into a very long running loop [\s-1RT\s0 #72998].
.IP "\(bu" 4
Several porters have reported mysterious crashes when Perl's entire
test suite is run after a build on certain Windows 2000 systems. When
run by hand, the individual tests reportedly work fine.
.SH "Errata"
.IX Header "Errata"
.IP "\(bu" 4
This one is actually a change introduced in 5.10.0, but it was missed
from that release's perldelta, so it is mentioned here instead.
.Sp
A bugfix related to the handling of the \f(CW\*(C`/m\*(C'\fR modifier and \f(CW\*(C`qr\*(C'\fR resulted
in a change of behaviour between 5.8.x and 5.10.0:
.Sp
.Vb 2
\&    # matches in 5.8.x, doesn\*(Aqt match in 5.10.0
\&    $re = qr/^bar/; "foo\enbar" =~ /$re/m;
.Ve
.SH "Acknowledgements"
.IX Header "Acknowledgements"
Perl 5.12.0 represents approximately two years of development since
Perl 5.10.0 and contains over 750,000 lines of changes across over
3,000 files from over 200 authors and committers.
.PP
Perl continues to flourish into its third decade thanks to a vibrant
community of users and developers.  The following people are known to
have contributed the improvements that became Perl 5.12.0:
.PP
Aaron Crane, Abe Timmerman, Abhijit Menon-Sen, Abigail, Adam Russell,
Adriano Ferreira, \*(Aevar Arnfjo\*:r\*(d- Bjarmason, Alan Grover, Alexandr
Ciornii, Alex Davies, Alex Vandiver, Andreas Koenig, Andrew Rodland,
andrew@sundale.net, Andy Armstrong, Andy Dougherty, Jose AUGUSTE-ETIENNE,
Benjamin Smith, Ben Morrow, bharanee rathna, Bo Borgerson, Bo Lindbergh,
Brad Gilbert, Bram, Brendan O'Dea, brian d foy, Charles Bailey,
Chip Salzenberg, Chris 'BinGOs' Williams, Christoph Lamprecht, Chris
Williams, chromatic, Claes Jakobsson, Craig A. Berry, Dan Dascalescu,
Daniel Frederick Crisman, Daniel M. Quinlan, Dan Jacobson, Dan Kogai,
Dave Mitchell, Dave Rolsky, David Cantrell, David Dick, David Golden,
David Mitchell, David M. Syzdek, David Nicol, David Wheeler, Dennis
Kaarsemaker, Dintelmann, Peter, Dominic Dunlop, Dr.Ruud, Duke Leto,
Enrico Sorcinelli, Eric Brine, Father Chrysostomos, Florian Ragwitz,
Frank Wiegand, Gabor Szabo, Gene Sullivan, Geoffrey T. Dairiki, George
Greer, Gerard Goossen, Gisle Aas, Goro Fuji, Graham Barr, Green, Paul,
Hans Dieter Pearcey, Harmen, H. Merijn Brand, Hugo van der Sanden,
Ian Goodacre, Igor Sutton, Ingo Weinhold, James Bence, James Mastros,
Jan Dubois, Jari Aalto, Jarkko Hietaniemi, Jay Hannah, Jerry Hedden,
Jesse Vincent, Jim Cromie, Jody Belka, John E. Malmberg, John Malmberg,
John Peacock, John Peacock via \s-1RT,\s0 John P. Linderman, John Wright,
Josh ben Jore, Jos I. Boumans, Karl Williamson, Kenichi Ishigaki, Ken
Williams, Kevin Brintnall, Kevin Ryde, Kurt Starsinic, Leon Brocard,
Lubomir Rintel, Luke Ross, Marcel Gru\*:nauer, Marcus Holland-Moritz, Mark
Jason Dominus, Marko Asplund, Martin Hasch, Mashrab Kuvatov, Matt Kraai,
Matt S Trout, Max Maischein, Michael Breen, Michael Cartmell, Michael
G Schwern, Michael Witten, Mike Giroux, Milosz Tanski, Moritz Lenz,
Nicholas Clark, Nick Cleaton, Niko Tyni, Offer Kaye, Osvaldo Villalon,
Paul Fenwick, Paul Gaborit, Paul Green, Paul Johnson, Paul Marquess,
Philip Hazel, Philippe Bruhat, Rafael Garcia-Suarez, Rainer Tammer,
Rajesh Mandalemula, Reini Urban, Rene\*'e Ba\*:cker, Ricardo Signes,
Ricardo \s-1SIGNES,\s0 Richard Foley, Rich Rauenzahn, Rick Delaney, Risto
Kankkunen, Robert May, Roberto C. Sanchez, Robin Barker, \s-1SADAHIRO\s0
Tomoyuki, Salvador Ortiz Garcia, Sam Vilain, Scott Lanning, Se\*'bastien
Aperghis-Tramoni, Se\*'rgio Durigan Ju\*'nior, Shlomi Fish, Simon 'corecode'
Schubert, Sisyphus, Slaven Rezic, Smylers, Steffen Mu\*:ller, Steffen
Ullrich, Stepan Kasal, Steve Hay, Steven Schubiger, Steve Peters, Tels,
The Doctor, Tim Bunce, Tim Jenness, Todd Rinaldo, Tom Christiansen,
Tom Hukins, Tom Wyant, Tony Cook, Torsten Schoenfeld, Tye McQueen,
Vadim Konovalov, Vincent Pit, Hio \s-1YAMASHINA,\s0 Yasuhiro Matsumoto,
Yitzchak Scott-Thoennes, Yuval Kogman, Yves Orton, Zefram, Zsban Ambrus
.PP
This is woefully incomplete as it's automatically generated from version
control history.  In particular, it doesn't include the names of the
(very much appreciated) contributors who reported issues in previous
versions of Perl that helped make Perl 5.12.0 better. For a more complete
list of all of Perl's historical contributors, please see the \f(CW\*(C`AUTHORS\*(C'\fR
file in the Perl 5.12.0 distribution.
.PP
Our \*(L"retired\*(R" pumpkings Nicholas Clark and Rafael Garcia-Suarez
deserve special thanks for their brilliant and substantive ongoing
contributions. Nicholas personally authored over 30% of the patches
since 5.10.0. Rafael comes in second in patch authorship with 11%,
but is first by a long shot in committing patches authored by others,
pushing 44% of the commits since 5.10.0 in this category, often after
providing considerable coaching to the patch authors. These statistics
in no way comprise all of their contributions, but express in shorthand
that we couldn't have done it without them.
.PP
Many of the changes included in this version originated in the \s-1CPAN\s0
modules included in Perl's core. We're grateful to the entire \s-1CPAN\s0
community for helping Perl to flourish.
.SH "Reporting Bugs"
.IX Header "Reporting Bugs"
If you find what you think is a bug, you might check the articles
recently posted to the comp.lang.perl.misc newsgroup and the perl
bug database at <http://rt.perl.org/perlbug/>. There may also be
information at <http://www.perl.org/>, the Perl Home Page.
.PP
If you believe you have an unreported bug, please run the \fBperlbug\fR
program included with your release. Be sure to trim your bug down
to a tiny but sufficient test case. Your bug report, along with the
output of \f(CW\*(C`perl \-V\*(C'\fR, will be sent off to perlbug@perl.org to be
analyzed by the Perl porting team.
.PP
If the bug you are reporting has security implications, which make it
inappropriate to send to a publicly archived mailing list, then please send
it to perl5\-security\-report@perl.org. This points to a closed subscription
unarchived mailing list, which includes
all the core committers, who will be able
to help assess the impact of issues, figure out a resolution, and help
co-ordinate the release of patches to mitigate or fix the problem across all
platforms on which Perl is supported. Please only use this address for
security issues in the Perl core, not for modules independently
distributed on \s-1CPAN.\s0
.SH "SEE ALSO"
.IX Header "SEE ALSO"
The \fIChanges\fR file for an explanation of how to view exhaustive details
on what changed.
.PP
The \fI\s-1INSTALL\s0\fR file for how to build Perl.
.PP
The \fI\s-1README\s0\fR file for general stuff.
.PP
The \fIArtistic\fR and \fICopying\fR files for copyright information.
.PP
<http://dev.perl.org/perl5/errata.html> for a list of issues
found after this release, as well as a list of \s-1CPAN\s0 modules known
to be incompatible with this release.
                                                                                                                                                                                                                                                                                                                                                                            osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perl5121delta.1                              0100644 0001750 0001750 00000035704 12566207431 023234  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERL5121DELTA 1"
.TH PERL5121DELTA 1 "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perl5121delta \- what is new for perl v5.12.1
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document describes differences between the 5.12.0 release and
the 5.12.1 release.
.PP
If you are upgrading from an earlier release such as 5.10.1, first read
perl5120delta, which describes differences between 5.10.1 and
5.12.0.
.SH "Incompatible Changes"
.IX Header "Incompatible Changes"
There are no changes intentionally incompatible with 5.12.0. If any
incompatibilities with 5.12.0 exist, they are bugs. Please report them.
.SH "Core Enhancements"
.IX Header "Core Enhancements"
Other than the bug fixes listed below, there should be no user-visible
changes to the core language in this release.
.SH "Modules and Pragmata"
.IX Header "Modules and Pragmata"
.SS "Pragmata Changes"
.IX Subsection "Pragmata Changes"
.IP "\(bu" 4
We fixed exporting of \f(CW\*(C`is_strict\*(C'\fR and \f(CW\*(C`is_lax\*(C'\fR from version.
.Sp
These were being exported with a wrapper that treated them as method
calls, which caused them to fail.  They are just functions, are
documented as such, and should never be subclassed, so this patch
just exports them directly as functions without the wrapper.
.SS "Updated Modules"
.IX Subsection "Updated Modules"
.IP "\(bu" 4
We upgraded \s-1CGI\s0.pm to version 3.49 to incorporate fixes for regressions
introduced in the release we shipped with Perl 5.12.0.
.IP "\(bu" 4
We upgraded Pod::Simple to version 3.14 to get an improvement to \eC\e<\e< \e>\e>
parsing.
.IP "\(bu" 4
We made a small fix to the \s-1CPANPLUS\s0 test suite to fix an occasional spurious test failure.
.IP "\(bu" 4
We upgraded Safe to version 2.27 to wrap coderefs returned by \f(CW\*(C`reval()\*(C'\fR and \f(CW\*(C`rdo()\*(C'\fR.
.SH "Changes to Existing Documentation"
.IX Header "Changes to Existing Documentation"
.IP "\(bu" 4
We added the new maintenance release policy to perlpolicy.pod
.IP "\(bu" 4
We've clarified the multiple-angle-bracket construct in the spec for \s-1POD\s0
in perlpodspec
.IP "\(bu" 4
We added a missing explanation for a warning about \f(CW\*(C`:=\*(C'\fR to perldiag.pod
.IP "\(bu" 4
We removed a false claim in perlunitut that all text strings are Unicode strings in Perl.
.IP "\(bu" 4
We updated the Github mirror link in perlrepository to mirrors/perl, not github/perl
.IP "\(bu" 4
We fixed a a minor error in perl5114delta.pod.
.IP "\(bu" 4
We replaced a mention of the now-obsolete Switch.pm with \fIgiven\fR/\fIwhen\fR.
.IP "\(bu" 4
We improved documentation about \fI\f(CI$sitelibexp\fI/sitecustomize.pl\fR in perlrun.
.IP "\(bu" 4
We corrected perlmodlib.pod which had unintentionally omitted a number of modules.
.IP "\(bu" 4
We updated the documentation for 'require' in perlfunc.pod relating to putting Perl code in \f(CW@INC\fR.
.IP "\(bu" 4
We reinstated some erroneously-removed documentation about quotemeta in perlfunc.
.IP "\(bu" 4
We fixed an \fIa2p\fR example in perlutil.pod.
.IP "\(bu" 4
We filled in a blank in perlport.pod with the release date of Perl 5.12.
.IP "\(bu" 4
We fixed broken links in a number of perldelta files.
.IP "\(bu" 4
The documentation for Carp.pm incorrectly stated that the \f(CW$Carp::Verbose\fR
variable makes cluck generate stack backtraces.
.IP "\(bu" 4
We fixed a number of typos in Pod::Functions
.IP "\(bu" 4
We improved documentation of case-changing functions in perlfunc.pod
.IP "\(bu" 4
We corrected perlgpl.pod to contain the correct version of the \s-1GNU\s0
General Public License.
.SH "Testing"
.IX Header "Testing"
.SS "Testing Improvements"
.IX Subsection "Testing Improvements"
.IP "\(bu" 4
\&\fIt/op/sselect.t\fR is now less prone to clock jitter during timing checks
on Windows.
.Sp
\&\fIsleep()\fR time on Win32 may be rounded down to multiple of
the clock tick interval.
.IP "\(bu" 4
\&\fIlib/blib.t\fR and \fIlib/locale.t\fR: Fixes for test failures on Darwin/PPC
.IP "\(bu" 4
\&\fIperl5db.t\fR: Fix for test failures when \f(CW\*(C`Term::ReadLine::Gnu\*(C'\fR is installed.
.SH "Installation and Configuration Improvements"
.IX Header "Installation and Configuration Improvements"
.SS "Configuration improvements"
.IX Subsection "Configuration improvements"
.IP "\(bu" 4
We updated \fI\s-1INSTALL\s0\fR with notes about how to deal with broken \fIdbm.h\fR
on OpenSUSE (and possibly other platforms)
.SH "Bug Fixes"
.IX Header "Bug Fixes"
.IP "\(bu" 4
A bug in how we process filetest operations could cause a segfault.
Filetests don't always expect an op on the stack, so we now use
TOPs only if we're sure that we're not stat'ing the _ filehandle.
This is indicated by OPf_KIDS (as checked in ck_ftst).
.Sp
See also: <http://rt.perl.org/rt3/Public/Bug/Display.html?id=74542>
.IP "\(bu" 4
When deparsing a nextstate op that has both a change of package (relative
to the previous nextstate) and a label, the package declaration is now
emitted first, because it is syntactically impermissible for a label to
prefix a package declaration.
.IP "\(bu" 4
\&\s-1XSUB\s0.h now correctly redefines fgets under \s-1PERL_IMPLICIT_SYS\s0
.Sp
See also: <http://rt.cpan.org/Public/Bug/Display.html?id=55049>
.IP "\(bu" 4
utf8::is_utf8 now respects \s-1GMAGIC \s0(e.g. \f(CW$1\fR)
.IP "\(bu" 4
\&\s-1XS\s0 code using \f(CW\*(C`fputc()\*(C'\fR or \f(CW\*(C`fputs()\*(C'\fR: on Windows could cause an error
due to their arguments being swapped.
.Sp
See also: <http://rt.perl.org/rt3/Public/Bug/Display.html?id=72704>
.IP "\(bu" 4
We fixed a small bug in \fIlex_stuff_pvn()\fR that caused spurious syntax errors
in an obscure situation.  It happened when stuffing was performed on the
last line of a file and the line ended with a statement that lacked a
terminating semicolon.
.Sp
See also: <http://rt.perl.org/rt3/Public/Bug/Display.html?id=74006>
.IP "\(bu" 4
We fixed a bug that could cause \eN{} constructs followed by a single . to
be parsed incorrectly.
.Sp
See also: <http://rt.perl.org/rt3/Public/Bug/Display.html?id=74978>
.IP "\(bu" 4
We fixed a bug that caused when(scalar) without an argument not to be
treated as a syntax error.
.Sp
See also: <http://rt.perl.org/rt3/Public/Bug/Display.html?id=74114>
.IP "\(bu" 4
We fixed a regression in the handling of labels immediately before string
evals that was introduced in Perl 5.12.0.
.Sp
See also: <http://rt.perl.org/rt3/Public/Bug/Display.html?id=74290>
.IP "\(bu" 4
We fixed a regression in case-insensitive matching of folded characters
in regular expressions introduced in Perl 5.10.1.
.Sp
See also: <http://rt.perl.org/rt3/Public/Bug/Display.html?id=72998>
.SH "Platform Specific Notes"
.IX Header "Platform Specific Notes"
.SS "HP-UX"
.IX Subsection "HP-UX"
.IP "\(bu" 4
Perl now allows \-Duse64bitint without promoting to use64bitall on HP-UX
.SS "\s-1AIX\s0"
.IX Subsection "AIX"
.IP "\(bu" 4
Perl now builds on \s-1AIX 4.2\s0
.Sp
The changes required work around \s-1AIX 4\s0.2s' lack of support for IPv6,
and limited support for \s-1POSIX \s0\f(CW\*(C`sigaction()\*(C'\fR.
.SS "FreeBSD 7"
.IX Subsection "FreeBSD 7"
.IP "\(bu" 4
FreeBSD 7 no longer contains \fI/usr/bin/objformat\fR. At build time,
Perl now skips the \fIobjformat\fR check for versions 7 and higher and
assumes \s-1ELF.\s0
.SS "\s-1VMS\s0"
.IX Subsection "VMS"
.IP "\(bu" 4
It's now possible to build extensions on older (pre 7.3\-2) \s-1VMS\s0 systems.
.Sp
\&\s-1DCL\s0 symbol length was limited to 1K up until about seven years or
so ago, but there was no particularly deep reason to prevent those
older systems from configuring and building Perl.
.IP "\(bu" 4
We fixed the previously-broken \f(CW\*(C`\-Uuseperlio\*(C'\fR build on \s-1VMS.\s0
.Sp
We were checking a variable that doesn't exist in the non-default
case of disabling perlio.  Now we only look at it when it exists.
.IP "\(bu" 4
We fixed the \-Uuseperlio command-line option in configure.com.
.Sp
Formerly it only worked if you went through all the questions
interactively and explicitly answered no.
.SH "Known Problems"
.IX Header "Known Problems"
.IP "\(bu" 4
\&\f(CW\*(C`List::Util::first\*(C'\fR misbehaves in the presence of a lexical \f(CW$_\fR
(typically introduced by \f(CW\*(C`my $_\*(C'\fR or implicitly by \f(CW\*(C`given\*(C'\fR). The variable
which gets set for each iteration is the package variable \f(CW$_\fR, not the
lexical \f(CW$_\fR.
.Sp
A similar issue may occur in other modules that provide functions which
take a block as their first argument, like
.Sp
.Vb 1
\&    foo { ... $_ ...} list
.Ve
.Sp
See also: <http://rt.perl.org/rt3/Public/Bug/Display.html?id=67694>
.IP "\(bu" 4
\&\f(CW\*(C`Module::Load::Conditional\*(C'\fR and \f(CW\*(C`version\*(C'\fR have an unfortunate
interaction which can cause \f(CW\*(C`CPANPLUS\*(C'\fR to crash when it encounters
an unparseable version string.  Upgrading to \f(CW\*(C`CPANPLUS\*(C'\fR 0.9004 or
\&\f(CW\*(C`Module::Load::Conditional\*(C'\fR 0.38 from \s-1CPAN\s0 will resolve this issue.
.SH "Acknowledgements"
.IX Header "Acknowledgements"
Perl 5.12.1 represents approximately four weeks of development since
Perl 5.12.0 and contains approximately 4,000 lines of changes
across 142 files from 28 authors.
.PP
Perl continues to flourish into its third decade thanks to a vibrant
community of users and developers.  The following people are known to
have contributed the improvements that became Perl 5.12.1:
.PP
\&\*(Aevar Arnfjo\*:r\*(d- Bjarmason, Chris Williams, chromatic, Craig A. Berry,
David Golden, Father Chrysostomos, Florian Ragwitz, Frank Wiegand,
Gene Sullivan, Goro Fuji, H.Merijn Brand, James E Keenan, Jan Dubois,
Jesse Vincent, Josh ben Jore, Karl Williamson, Leon Brocard, Michael
Schwern, Nga Tang Chan, Nicholas Clark, Niko Tyni, Philippe Bruhat,
Rafael Garcia-Suarez, Ricardo Signes, Steffen Mueller, Todd Rinaldo,
Vincent Pit and Zefram.
.SH "Reporting Bugs"
.IX Header "Reporting Bugs"
If you find what you think is a bug, you might check the articles
recently posted to the comp.lang.perl.misc newsgroup and the perl
bug database at http://rt.perl.org/perlbug/ .  There may also be
information at http://www.perl.org/ , the Perl Home Page.
.PP
If you believe you have an unreported bug, please run the \fBperlbug\fR
program included with your release.  Be sure to trim your bug down
to a tiny but sufficient test case.  Your bug report, along with the
output of \f(CW\*(C`perl \-V\*(C'\fR, will be sent off to perlbug@perl.org to be
analysed by the Perl porting team.
.PP
If the bug you are reporting has security implications, which make it
inappropriate to send to a publicly archived mailing list, then please send
it to perl5\-security\-report@perl.org. This points to a closed subscription
unarchived mailing list, which includes
all the core committers, who will be able
to help assess the impact of issues, figure out a resolution, and help
co-ordinate the release of patches to mitigate or fix the problem across all
platforms on which Perl is supported. Please only use this address for
security issues in the Perl core, not for modules independently
distributed on \s-1CPAN.\s0
.SH "SEE ALSO"
.IX Header "SEE ALSO"
The \fIChanges\fR file for an explanation of how to view exhaustive details
on what changed.
.PP
The \fI\s-1INSTALL\s0\fR file for how to build Perl.
.PP
The \fI\s-1README\s0\fR file for general stuff.
.PP
The \fIArtistic\fR and \fICopying\fR files for copyright information.
                                                            osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perl5121delta5.16.1                          0100644 0001750 0001750 00000035363 12566207412 023546  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERL5121DELTA 1"
.TH PERL5121DELTA 1 "2013-03-04" "perl v5.16.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perl5121delta \- what is new for perl v5.12.1
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document describes differences between the 5.12.0 release and
the 5.12.1 release.
.PP
If you are upgrading from an earlier release such as 5.10.1, first read
perl5120delta, which describes differences between 5.10.1 and
5.12.0.
.SH "Incompatible Changes"
.IX Header "Incompatible Changes"
There are no changes intentionally incompatible with 5.12.0. If any
incompatibilities with 5.12.0 exist, they are bugs. Please report them.
.SH "Core Enhancements"
.IX Header "Core Enhancements"
Other than the bug fixes listed below, there should be no user-visible
changes to the core language in this release.
.SH "Modules and Pragmata"
.IX Header "Modules and Pragmata"
.SS "Pragmata Changes"
.IX Subsection "Pragmata Changes"
.IP "\(bu" 4
We fixed exporting of \f(CW\*(C`is_strict\*(C'\fR and \f(CW\*(C`is_lax\*(C'\fR from version.
.Sp
These were being exported with a wrapper that treated them as method
calls, which caused them to fail.  They are just functions, are
documented as such, and should never be subclassed, so this patch
just exports them directly as functions without the wrapper.
.SS "Updated Modules"
.IX Subsection "Updated Modules"
.IP "\(bu" 4
We upgraded \s-1CGI\s0.pm to version 3.49 to incorporate fixes for regressions
introduced in the release we shipped with Perl 5.12.0.
.IP "\(bu" 4
We upgraded Pod::Simple to version 3.14 to get an improvement to \eC\e<\e< \e>\e>
parsing.
.IP "\(bu" 4
We made a small fix to the \s-1CPANPLUS\s0 test suite to fix an occasional spurious test failure.
.IP "\(bu" 4
We upgraded Safe to version 2.27 to wrap coderefs returned by \f(CW\*(C`reval()\*(C'\fR and \f(CW\*(C`rdo()\*(C'\fR.
.SH "Changes to Existing Documentation"
.IX Header "Changes to Existing Documentation"
.IP "\(bu" 4
We added the new maintenance release policy to perlpolicy.pod
.IP "\(bu" 4
We've clarified the multiple-angle-bracket construct in the spec for \s-1POD\s0
in perlpodspec
.IP "\(bu" 4
We added a missing explanation for a warning about \f(CW\*(C`:=\*(C'\fR to perldiag.pod
.IP "\(bu" 4
We removed a false claim in perlunitut that all text strings are Unicode strings in Perl.
.IP "\(bu" 4
We updated the Github mirror link in perlrepository to mirrors/perl, not github/perl
.IP "\(bu" 4
We fixed a a minor error in perl5114delta.pod.
.IP "\(bu" 4
We replaced a mention of the now-obsolete Switch.pm with \fIgiven\fR/\fIwhen\fR.
.IP "\(bu" 4
We improved documentation about \fI\f(CI$sitelibexp\fI/sitecustomize.pl\fR in perlrun.
.IP "\(bu" 4
We corrected perlmodlib.pod which had unintentionally omitted a number of modules.
.IP "\(bu" 4
We updated the documentation for 'require' in perlfunc.pod relating to putting Perl code in \f(CW@INC\fR.
.IP "\(bu" 4
We reinstated some erroneously-removed documentation about quotemeta in perlfunc.
.IP "\(bu" 4
We fixed an \fIa2p\fR example in perlutil.pod.
.IP "\(bu" 4
We filled in a blank in perlport.pod with the release date of Perl 5.12.
.IP "\(bu" 4
We fixed broken links in a number of perldelta files.
.IP "\(bu" 4
The documentation for Carp.pm incorrectly stated that the \f(CW$Carp::Verbose\fR
variable makes cluck generate stack backtraces.
.IP "\(bu" 4
We fixed a number of typos in Pod::Functions
.IP "\(bu" 4
We improved documentation of case-changing functions in perlfunc.pod
.IP "\(bu" 4
We corrected perlgpl.pod to contain the correct version of the \s-1GNU\s0
General Public License.
.SH "Testing"
.IX Header "Testing"
.SS "Testing Improvements"
.IX Subsection "Testing Improvements"
.IP "\(bu" 4
\&\fIt/op/sselect.t\fR is now less prone to clock jitter during timing checks
on Windows.
.Sp
\&\fIsleep()\fR time on Win32 may be rounded down to multiple of
the clock tick interval.
.IP "\(bu" 4
\&\fIlib/blib.t\fR and \fIlib/locale.t\fR: Fixes for test failures on Darwin/PPC
.IP "\(bu" 4
\&\fIperl5db.t\fR: Fix for test failures when \f(CW\*(C`Term::ReadLine::Gnu\*(C'\fR is installed.
.SH "Installation and Configuration Improvements"
.IX Header "Installation and Configuration Improvements"
.SS "Configuration improvements"
.IX Subsection "Configuration improvements"
.IP "\(bu" 4
We updated \fI\s-1INSTALL\s0\fR with notes about how to deal with broken \fIdbm.h\fR
on OpenSUSE (and possibly other platforms)
.SH "Bug Fixes"
.IX Header "Bug Fixes"
.IP "\(bu" 4
A bug in how we process filetest operations could cause a segfault.
Filetests don't always expect an op on the stack, so we now use
TOPs only if we're sure that we're not stat'ing the _ filehandle.
This is indicated by OPf_KIDS (as checked in ck_ftst).
.Sp
See also: <http://rt.perl.org/rt3/Public/Bug/Display.html?id=74542>
.IP "\(bu" 4
When deparsing a nextstate op that has both a change of package (relative
to the previous nextstate) and a label, the package declaration is now
emitted first, because it is syntactically impermissible for a label to
prefix a package declaration.
.IP "\(bu" 4
\&\s-1XSUB\s0.h now correctly redefines fgets under \s-1PERL_IMPLICIT_SYS\s0
.Sp
See also: <http://rt.cpan.org/Public/Bug/Display.html?id=55049>
.IP "\(bu" 4
utf8::is_utf8 now respects \s-1GMAGIC\s0 (e.g. \f(CW$1\fR)
.IP "\(bu" 4
\&\s-1XS\s0 code using \f(CW\*(C`fputc()\*(C'\fR or \f(CW\*(C`fputs()\*(C'\fR: on Windows could cause an error
due to their arguments being swapped.
.Sp
See also: <http://rt.perl.org/rt3/Public/Bug/Display.html?id=72704>
.IP "\(bu" 4
We fixed a small bug in \fIlex_stuff_pvn()\fR that caused spurious syntax errors
in an obscure situation.  It happened when stuffing was performed on the
last line of a file and the line ended with a statement that lacked a
terminating semicolon.
.Sp
See also: <http://rt.perl.org/rt3/Public/Bug/Display.html?id=74006>
.IP "\(bu" 4
We fixed a bug that could cause \eN{} constructs followed by a single . to
be parsed incorrectly.
.Sp
See also: <http://rt.perl.org/rt3/Public/Bug/Display.html?id=74978>
.IP "\(bu" 4
We fixed a bug that caused when(scalar) without an argument not to be
treated as a syntax error.
.Sp
See also: <http://rt.perl.org/rt3/Public/Bug/Display.html?id=74114>
.IP "\(bu" 4
We fixed a regression in the handling of labels immediately before string
evals that was introduced in Perl 5.12.0.
.Sp
See also: <http://rt.perl.org/rt3/Public/Bug/Display.html?id=74290>
.IP "\(bu" 4
We fixed a regression in case-insensitive matching of folded characters
in regular expressions introduced in Perl 5.10.1.
.Sp
See also: <http://rt.perl.org/rt3/Public/Bug/Display.html?id=72998>
.SH "Platform Specific Notes"
.IX Header "Platform Specific Notes"
.SS "HP-UX"
.IX Subsection "HP-UX"
.IP "\(bu" 4
Perl now allows \-Duse64bitint without promoting to use64bitall on HP-UX
.SS "\s-1AIX\s0"
.IX Subsection "AIX"
.IP "\(bu" 4
Perl now builds on \s-1AIX\s0 4.2
.Sp
The changes required work around \s-1AIX\s0 4.2s' lack of support for IPv6,
and limited support for \s-1POSIX\s0 \f(CW\*(C`sigaction()\*(C'\fR.
.SS "FreeBSD 7"
.IX Subsection "FreeBSD 7"
.IP "\(bu" 4
FreeBSD 7 no longer contains \fI/usr/bin/objformat\fR. At build time,
Perl now skips the \fIobjformat\fR check for versions 7 and higher and
assumes \s-1ELF\s0.
.SS "\s-1VMS\s0"
.IX Subsection "VMS"
.IP "\(bu" 4
It's now possible to build extensions on older (pre 7.3\-2) \s-1VMS\s0 systems.
.Sp
\&\s-1DCL\s0 symbol length was limited to 1K up until about seven years or
so ago, but there was no particularly deep reason to prevent those
older systems from configuring and building Perl.
.IP "\(bu" 4
We fixed the previously-broken \f(CW\*(C`\-Uuseperlio\*(C'\fR build on \s-1VMS\s0.
.Sp
We were checking a variable that doesn't exist in the non-default
case of disabling perlio.  Now we only look at it when it exists.
.IP "\(bu" 4
We fixed the \-Uuseperlio command-line option in configure.com.
.Sp
Formerly it only worked if you went through all the questions
interactively and explicitly answered no.
.SH "Known Problems"
.IX Header "Known Problems"
.IP "\(bu" 4
\&\f(CW\*(C`List::Util::first\*(C'\fR misbehaves in the presence of a lexical \f(CW$_\fR
(typically introduced by \f(CW\*(C`my $_\*(C'\fR or implicitly by \f(CW\*(C`given\*(C'\fR). The variable
which gets set for each iteration is the package variable \f(CW$_\fR, not the
lexical \f(CW$_\fR.
.Sp
A similar issue may occur in other modules that provide functions which
take a block as their first argument, like
.Sp
.Vb 1
\&    foo { ... $_ ...} list
.Ve
.Sp
See also: <http://rt.perl.org/rt3/Public/Bug/Display.html?id=67694>
.IP "\(bu" 4
\&\f(CW\*(C`Module::Load::Conditional\*(C'\fR and \f(CW\*(C`version\*(C'\fR have an unfortunate
interaction which can cause \f(CW\*(C`CPANPLUS\*(C'\fR to crash when it encounters
an unparseable version string.  Upgrading to \f(CW\*(C`CPANPLUS\*(C'\fR 0.9004 or
\&\f(CW\*(C`Module::Load::Conditional\*(C'\fR 0.38 from \s-1CPAN\s0 will resolve this issue.
.SH "Acknowledgements"
.IX Header "Acknowledgements"
Perl 5.12.1 represents approximately four weeks of development since
Perl 5.12.0 and contains approximately 4,000 lines of changes
across 142 files from 28 authors.
.PP
Perl continues to flourish into its third decade thanks to a vibrant
community of users and developers.  The following people are known to
have contributed the improvements that became Perl 5.12.1:
.PP
\&\*(AEvar Arnfjo\*:r\*(d- Bjarmason, Chris Williams, chromatic, Craig A. Berry,
David Golden, Father Chrysostomos, Florian Ragwitz, Frank Wiegand,
Gene Sullivan, Goro Fuji, H.Merijn Brand, James E Keenan, Jan Dubois,
Jesse Vincent, Josh ben Jore, Karl Williamson, Leon Brocard, Michael
Schwern, Nga Tang Chan, Nicholas Clark, Niko Tyni, Philippe Bruhat,
Rafael Garcia-Suarez, Ricardo Signes, Steffen Mueller, Todd Rinaldo,
Vincent Pit and Zefram.
.SH "Reporting Bugs"
.IX Header "Reporting Bugs"
If you find what you think is a bug, you might check the articles
recently posted to the comp.lang.perl.misc newsgroup and the perl
bug database at http://rt.perl.org/perlbug/ .  There may also be
information at http://www.perl.org/ , the Perl Home Page.
.PP
If you believe you have an unreported bug, please run the \fBperlbug\fR
program included with your release.  Be sure to trim your bug down
to a tiny but sufficient test case.  Your bug report, along with the
output of \f(CW\*(C`perl \-V\*(C'\fR, will be sent off to perlbug@perl.org to be
analysed by the Perl porting team.
.PP
If the bug you are reporting has security implications, which make it
inappropriate to send to a publicly archived mailing list, then please send
it to perl5\-security\-report@perl.org. This points to a closed subscription
unarchived mailing list, which includes
all the core committers, who will be able
to help assess the impact of issues, figure out a resolution, and help
co-ordinate the release of patches to mitigate or fix the problem across all
platforms on which Perl is supported. Please only use this address for
security issues in the Perl core, not for modules independently
distributed on \s-1CPAN\s0.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
The \fIChanges\fR file for an explanation of how to view exhaustive details
on what changed.
.PP
The \fI\s-1INSTALL\s0\fR file for how to build Perl.
.PP
The \fI\s-1README\s0\fR file for general stuff.
.PP
The \fIArtistic\fR and \fICopying\fR files for copyright information.
                                                                                                                                                                                                                                                                             osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perl5121delta5.18.1                          0100644 0001750 0001750 00000035704 12566207431 023550  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERL5121DELTA 1"
.TH PERL5121DELTA 1 "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perl5121delta \- what is new for perl v5.12.1
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document describes differences between the 5.12.0 release and
the 5.12.1 release.
.PP
If you are upgrading from an earlier release such as 5.10.1, first read
perl5120delta, which describes differences between 5.10.1 and
5.12.0.
.SH "Incompatible Changes"
.IX Header "Incompatible Changes"
There are no changes intentionally incompatible with 5.12.0. If any
incompatibilities with 5.12.0 exist, they are bugs. Please report them.
.SH "Core Enhancements"
.IX Header "Core Enhancements"
Other than the bug fixes listed below, there should be no user-visible
changes to the core language in this release.
.SH "Modules and Pragmata"
.IX Header "Modules and Pragmata"
.SS "Pragmata Changes"
.IX Subsection "Pragmata Changes"
.IP "\(bu" 4
We fixed exporting of \f(CW\*(C`is_strict\*(C'\fR and \f(CW\*(C`is_lax\*(C'\fR from version.
.Sp
These were being exported with a wrapper that treated them as method
calls, which caused them to fail.  They are just functions, are
documented as such, and should never be subclassed, so this patch
just exports them directly as functions without the wrapper.
.SS "Updated Modules"
.IX Subsection "Updated Modules"
.IP "\(bu" 4
We upgraded \s-1CGI\s0.pm to version 3.49 to incorporate fixes for regressions
introduced in the release we shipped with Perl 5.12.0.
.IP "\(bu" 4
We upgraded Pod::Simple to version 3.14 to get an improvement to \eC\e<\e< \e>\e>
parsing.
.IP "\(bu" 4
We made a small fix to the \s-1CPANPLUS\s0 test suite to fix an occasional spurious test failure.
.IP "\(bu" 4
We upgraded Safe to version 2.27 to wrap coderefs returned by \f(CW\*(C`reval()\*(C'\fR and \f(CW\*(C`rdo()\*(C'\fR.
.SH "Changes to Existing Documentation"
.IX Header "Changes to Existing Documentation"
.IP "\(bu" 4
We added the new maintenance release policy to perlpolicy.pod
.IP "\(bu" 4
We've clarified the multiple-angle-bracket construct in the spec for \s-1POD\s0
in perlpodspec
.IP "\(bu" 4
We added a missing explanation for a warning about \f(CW\*(C`:=\*(C'\fR to perldiag.pod
.IP "\(bu" 4
We removed a false claim in perlunitut that all text strings are Unicode strings in Perl.
.IP "\(bu" 4
We updated the Github mirror link in perlrepository to mirrors/perl, not github/perl
.IP "\(bu" 4
We fixed a a minor error in perl5114delta.pod.
.IP "\(bu" 4
We replaced a mention of the now-obsolete Switch.pm with \fIgiven\fR/\fIwhen\fR.
.IP "\(bu" 4
We improved documentation about \fI\f(CI$sitelibexp\fI/sitecustomize.pl\fR in perlrun.
.IP "\(bu" 4
We corrected perlmodlib.pod which had unintentionally omitted a number of modules.
.IP "\(bu" 4
We updated the documentation for 'require' in perlfunc.pod relating to putting Perl code in \f(CW@INC\fR.
.IP "\(bu" 4
We reinstated some erroneously-removed documentation about quotemeta in perlfunc.
.IP "\(bu" 4
We fixed an \fIa2p\fR example in perlutil.pod.
.IP "\(bu" 4
We filled in a blank in perlport.pod with the release date of Perl 5.12.
.IP "\(bu" 4
We fixed broken links in a number of perldelta files.
.IP "\(bu" 4
The documentation for Carp.pm incorrectly stated that the \f(CW$Carp::Verbose\fR
variable makes cluck generate stack backtraces.
.IP "\(bu" 4
We fixed a number of typos in Pod::Functions
.IP "\(bu" 4
We improved documentation of case-changing functions in perlfunc.pod
.IP "\(bu" 4
We corrected perlgpl.pod to contain the correct version of the \s-1GNU\s0
General Public License.
.SH "Testing"
.IX Header "Testing"
.SS "Testing Improvements"
.IX Subsection "Testing Improvements"
.IP "\(bu" 4
\&\fIt/op/sselect.t\fR is now less prone to clock jitter during timing checks
on Windows.
.Sp
\&\fIsleep()\fR time on Win32 may be rounded down to multiple of
the clock tick interval.
.IP "\(bu" 4
\&\fIlib/blib.t\fR and \fIlib/locale.t\fR: Fixes for test failures on Darwin/PPC
.IP "\(bu" 4
\&\fIperl5db.t\fR: Fix for test failures when \f(CW\*(C`Term::ReadLine::Gnu\*(C'\fR is installed.
.SH "Installation and Configuration Improvements"
.IX Header "Installation and Configuration Improvements"
.SS "Configuration improvements"
.IX Subsection "Configuration improvements"
.IP "\(bu" 4
We updated \fI\s-1INSTALL\s0\fR with notes about how to deal with broken \fIdbm.h\fR
on OpenSUSE (and possibly other platforms)
.SH "Bug Fixes"
.IX Header "Bug Fixes"
.IP "\(bu" 4
A bug in how we process filetest operations could cause a segfault.
Filetests don't always expect an op on the stack, so we now use
TOPs only if we're sure that we're not stat'ing the _ filehandle.
This is indicated by OPf_KIDS (as checked in ck_ftst).
.Sp
See also: <http://rt.perl.org/rt3/Public/Bug/Display.html?id=74542>
.IP "\(bu" 4
When deparsing a nextstate op that has both a change of package (relative
to the previous nextstate) and a label, the package declaration is now
emitted first, because it is syntactically impermissible for a label to
prefix a package declaration.
.IP "\(bu" 4
\&\s-1XSUB\s0.h now correctly redefines fgets under \s-1PERL_IMPLICIT_SYS\s0
.Sp
See also: <http://rt.cpan.org/Public/Bug/Display.html?id=55049>
.IP "\(bu" 4
utf8::is_utf8 now respects \s-1GMAGIC \s0(e.g. \f(CW$1\fR)
.IP "\(bu" 4
\&\s-1XS\s0 code using \f(CW\*(C`fputc()\*(C'\fR or \f(CW\*(C`fputs()\*(C'\fR: on Windows could cause an error
due to their arguments being swapped.
.Sp
See also: <http://rt.perl.org/rt3/Public/Bug/Display.html?id=72704>
.IP "\(bu" 4
We fixed a small bug in \fIlex_stuff_pvn()\fR that caused spurious syntax errors
in an obscure situation.  It happened when stuffing was performed on the
last line of a file and the line ended with a statement that lacked a
terminating semicolon.
.Sp
See also: <http://rt.perl.org/rt3/Public/Bug/Display.html?id=74006>
.IP "\(bu" 4
We fixed a bug that could cause \eN{} constructs followed by a single . to
be parsed incorrectly.
.Sp
See also: <http://rt.perl.org/rt3/Public/Bug/Display.html?id=74978>
.IP "\(bu" 4
We fixed a bug that caused when(scalar) without an argument not to be
treated as a syntax error.
.Sp
See also: <http://rt.perl.org/rt3/Public/Bug/Display.html?id=74114>
.IP "\(bu" 4
We fixed a regression in the handling of labels immediately before string
evals that was introduced in Perl 5.12.0.
.Sp
See also: <http://rt.perl.org/rt3/Public/Bug/Display.html?id=74290>
.IP "\(bu" 4
We fixed a regression in case-insensitive matching of folded characters
in regular expressions introduced in Perl 5.10.1.
.Sp
See also: <http://rt.perl.org/rt3/Public/Bug/Display.html?id=72998>
.SH "Platform Specific Notes"
.IX Header "Platform Specific Notes"
.SS "HP-UX"
.IX Subsection "HP-UX"
.IP "\(bu" 4
Perl now allows \-Duse64bitint without promoting to use64bitall on HP-UX
.SS "\s-1AIX\s0"
.IX Subsection "AIX"
.IP "\(bu" 4
Perl now builds on \s-1AIX 4.2\s0
.Sp
The changes required work around \s-1AIX 4\s0.2s' lack of support for IPv6,
and limited support for \s-1POSIX \s0\f(CW\*(C`sigaction()\*(C'\fR.
.SS "FreeBSD 7"
.IX Subsection "FreeBSD 7"
.IP "\(bu" 4
FreeBSD 7 no longer contains \fI/usr/bin/objformat\fR. At build time,
Perl now skips the \fIobjformat\fR check for versions 7 and higher and
assumes \s-1ELF.\s0
.SS "\s-1VMS\s0"
.IX Subsection "VMS"
.IP "\(bu" 4
It's now possible to build extensions on older (pre 7.3\-2) \s-1VMS\s0 systems.
.Sp
\&\s-1DCL\s0 symbol length was limited to 1K up until about seven years or
so ago, but there was no particularly deep reason to prevent those
older systems from configuring and building Perl.
.IP "\(bu" 4
We fixed the previously-broken \f(CW\*(C`\-Uuseperlio\*(C'\fR build on \s-1VMS.\s0
.Sp
We were checking a variable that doesn't exist in the non-default
case of disabling perlio.  Now we only look at it when it exists.
.IP "\(bu" 4
We fixed the \-Uuseperlio command-line option in configure.com.
.Sp
Formerly it only worked if you went through all the questions
interactively and explicitly answered no.
.SH "Known Problems"
.IX Header "Known Problems"
.IP "\(bu" 4
\&\f(CW\*(C`List::Util::first\*(C'\fR misbehaves in the presence of a lexical \f(CW$_\fR
(typically introduced by \f(CW\*(C`my $_\*(C'\fR or implicitly by \f(CW\*(C`given\*(C'\fR). The variable
which gets set for each iteration is the package variable \f(CW$_\fR, not the
lexical \f(CW$_\fR.
.Sp
A similar issue may occur in other modules that provide functions which
take a block as their first argument, like
.Sp
.Vb 1
\&    foo { ... $_ ...} list
.Ve
.Sp
See also: <http://rt.perl.org/rt3/Public/Bug/Display.html?id=67694>
.IP "\(bu" 4
\&\f(CW\*(C`Module::Load::Conditional\*(C'\fR and \f(CW\*(C`version\*(C'\fR have an unfortunate
interaction which can cause \f(CW\*(C`CPANPLUS\*(C'\fR to crash when it encounters
an unparseable version string.  Upgrading to \f(CW\*(C`CPANPLUS\*(C'\fR 0.9004 or
\&\f(CW\*(C`Module::Load::Conditional\*(C'\fR 0.38 from \s-1CPAN\s0 will resolve this issue.
.SH "Acknowledgements"
.IX Header "Acknowledgements"
Perl 5.12.1 represents approximately four weeks of development since
Perl 5.12.0 and contains approximately 4,000 lines of changes
across 142 files from 28 authors.
.PP
Perl continues to flourish into its third decade thanks to a vibrant
community of users and developers.  The following people are known to
have contributed the improvements that became Perl 5.12.1:
.PP
\&\*(Aevar Arnfjo\*:r\*(d- Bjarmason, Chris Williams, chromatic, Craig A. Berry,
David Golden, Father Chrysostomos, Florian Ragwitz, Frank Wiegand,
Gene Sullivan, Goro Fuji, H.Merijn Brand, James E Keenan, Jan Dubois,
Jesse Vincent, Josh ben Jore, Karl Williamson, Leon Brocard, Michael
Schwern, Nga Tang Chan, Nicholas Clark, Niko Tyni, Philippe Bruhat,
Rafael Garcia-Suarez, Ricardo Signes, Steffen Mueller, Todd Rinaldo,
Vincent Pit and Zefram.
.SH "Reporting Bugs"
.IX Header "Reporting Bugs"
If you find what you think is a bug, you might check the articles
recently posted to the comp.lang.perl.misc newsgroup and the perl
bug database at http://rt.perl.org/perlbug/ .  There may also be
information at http://www.perl.org/ , the Perl Home Page.
.PP
If you believe you have an unreported bug, please run the \fBperlbug\fR
program included with your release.  Be sure to trim your bug down
to a tiny but sufficient test case.  Your bug report, along with the
output of \f(CW\*(C`perl \-V\*(C'\fR, will be sent off to perlbug@perl.org to be
analysed by the Perl porting team.
.PP
If the bug you are reporting has security implications, which make it
inappropriate to send to a publicly archived mailing list, then please send
it to perl5\-security\-report@perl.org. This points to a closed subscription
unarchived mailing list, which includes
all the core committers, who will be able
to help assess the impact of issues, figure out a resolution, and help
co-ordinate the release of patches to mitigate or fix the problem across all
platforms on which Perl is supported. Please only use this address for
security issues in the Perl core, not for modules independently
distributed on \s-1CPAN.\s0
.SH "SEE ALSO"
.IX Header "SEE ALSO"
The \fIChanges\fR file for an explanation of how to view exhaustive details
on what changed.
.PP
The \fI\s-1INSTALL\s0\fR file for how to build Perl.
.PP
The \fI\s-1README\s0\fR file for general stuff.
.PP
The \fIArtistic\fR and \fICopying\fR files for copyright information.
                                                            osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perl5122delta.1                              0100644 0001750 0001750 00000036001 12566207432 023225  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERL5122DELTA 1"
.TH PERL5122DELTA 1 "2013-11-04" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perl5122delta \- what is new for perl v5.12.2
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document describes differences between the 5.12.1 release and
the 5.12.2 release.
.PP
If you are upgrading from an earlier major version, such as 5.10.1,
first read perl5120delta, which describes differences between 5.10.1
and 5.12.0, as well as perl5121delta, which describes earlier changes
in the 5.12 stable release series.
.SH "Incompatible Changes"
.IX Header "Incompatible Changes"
There are no changes intentionally incompatible with 5.12.1. If any exist, they
are bugs and reports are welcome.
.SH "Core Enhancements"
.IX Header "Core Enhancements"
Other than the bug fixes listed below, there should be no user-visible
changes to the core language in this release.
.SH "Modules and Pragmata"
.IX Header "Modules and Pragmata"
.SS "New Modules and Pragmata"
.IX Subsection "New Modules and Pragmata"
This release does not introduce any new modules or pragmata.
.SS "Pragmata Changes"
.IX Subsection "Pragmata Changes"
In the previous release, \f(CW\*(C`no \f(CIVERSION\f(CW;\*(C'\fR statements triggered a bug
which could cause feature bundles to be loaded and strict mode to
be enabled unintentionally.
.SS "Updated Modules"
.IX Subsection "Updated Modules"
.ie n .IP """Carp""" 4
.el .IP "\f(CWCarp\fR" 4
.IX Item "Carp"
Upgraded from version 1.16 to 1.17.
.Sp
Carp now detects incomplete \fIcaller()\fR
overrides and avoids using bogus \f(CW@DB::args\fR. To provide backtraces, Carp
relies on particular behaviour of the caller built-in. Carp now detects
if other code has overridden this with an incomplete implementation, and
modifies its backtrace accordingly. Previously incomplete overrides would
cause incorrect values in backtraces (best case), or obscure fatal errors
(worst case)
.Sp
This fixes certain cases of \f(CW\*(C`Bizarre copy of ARRAY\*(C'\fR caused by modules
overriding \f(CW\*(C`caller()\*(C'\fR incorrectly.
.ie n .IP """CPANPLUS""" 4
.el .IP "\f(CWCPANPLUS\fR" 4
.IX Item "CPANPLUS"
A patch to \fIcpanp-run-perl\fR has been backported from \s-1CPANPLUS \s0\f(CW0.9004\fR. This
resolves \s-1RT\s0 #55964 <http://rt.cpan.org/Public/Bug/Display.html?id=55964>
and \s-1RT\s0 #57106 <http://rt.cpan.org/Public/Bug/Display.html?id=57106>, both
of which related to failures to install distributions that use
\&\f(CW\*(C`Module::Install::DSL\*(C'\fR.
.ie n .IP """File::Glob""" 4
.el .IP "\f(CWFile::Glob\fR" 4
.IX Item "File::Glob"
A regression which caused a failure to find \f(CW\*(C`CORE::GLOBAL::glob\*(C'\fR after
loading \f(CW\*(C`File::Glob\*(C'\fR to crash has been fixed.  Now, it correctly falls back
to external globbing via \f(CW\*(C`pp_glob\*(C'\fR.
.ie n .IP """File::Copy""" 4
.el .IP "\f(CWFile::Copy\fR" 4
.IX Item "File::Copy"
\&\f(CW\*(C`File::Copy::copy(FILE, DIR)\*(C'\fR is now documented.
.ie n .IP """File::Spec""" 4
.el .IP "\f(CWFile::Spec\fR" 4
.IX Item "File::Spec"
Upgraded from version 3.31 to 3.31_01.
.Sp
Several portability fixes were made in \f(CW\*(C`File::Spec::VMS\*(C'\fR: a colon is now
recognized as a delimiter in native filespecs; caret-escaped delimiters are
recognized for better handling of extended filespecs; \f(CW\*(C`catpath()\*(C'\fR returns
an empty directory rather than the current directory if the input directory
name is empty; \f(CW\*(C`abs2rel()\*(C'\fR properly handles Unix-style input.
.SH "Utility Changes"
.IX Header "Utility Changes"
.IP "\(bu" 4
\&\fIperlbug\fR now always gives the reporter a chance to change the email address it
guesses for them.
.IP "\(bu" 4
\&\fIperlbug\fR should no longer warn about uninitialized values when using the \f(CW\*(C`\-d\*(C'\fR
and \f(CW\*(C`\-v\*(C'\fR options.
.SH "Changes to Existing Documentation"
.IX Header "Changes to Existing Documentation"
.IP "\(bu" 4
The existing policy on backward-compatibility and deprecation has
been added to perlpolicy, along with definitions of terms like
\&\fIdeprecation\fR.
.IP "\(bu" 4
\&\*(L"srand\*(R" in perlfunc's usage has been clarified.
.IP "\(bu" 4
The entry for \*(L"die\*(R" in perlfunc was reorganized to emphasize its
role in the exception mechanism.
.IP "\(bu" 4
Perl's \s-1INSTALL\s0 file has been clarified to explicitly state that Perl
requires a C89 compliant \s-1ANSI C\s0 Compiler.
.IP "\(bu" 4
IO::Socket's \f(CW\*(C`getsockopt()\*(C'\fR and \f(CW\*(C`setsockopt()\*(C'\fR have been documented.
.IP "\(bu" 4
\&\fI\fIalarm()\fI\fR's inability to interrupt blocking \s-1IO\s0 on Windows has been documented.
.IP "\(bu" 4
Math::TrulyRandom hasn't been updated since 1996 and has been removed
as a recommended solution for random number generation.
.IP "\(bu" 4
perlrun has been updated to clarify the behaviour of octal flags to \fIperl\fR.
.IP "\(bu" 4
To ease user confusion, \f(CW$#\fR and \f(CW$*\fR, two special variables that were
removed in earlier versions of Perl have been documented.
.IP "\(bu" 4
The version of perlfaq shipped with the Perl core has been updated from the
official \s-1FAQ\s0 version, which is now maintained in the \f(CW\*(C`briandfoy/perlfaq\*(C'\fR
branch of the Perl repository at <git://perl5.git.perl.org/perl.git>.
.SH "Installation and Configuration Improvements"
.IX Header "Installation and Configuration Improvements"
.SS "Configuration improvements"
.IX Subsection "Configuration improvements"
.IP "\(bu" 4
The \f(CW\*(C`d_u32align\*(C'\fR configuration probe on \s-1ARM\s0 has been fixed.
.SS "Compilation improvements"
.IX Subsection "Compilation improvements"
.IP "\(bu" 4
An "\f(CW\*(C`incompatible operand types\*(C'\fR" error in ternary expressions when building
with \f(CW\*(C`clang\*(C'\fR has been fixed.
.IP "\(bu" 4
Perl now skips setuid \f(CW\*(C`File::Copy\*(C'\fR tests on partitions it detects to be mounted
as \f(CW\*(C`nosuid\*(C'\fR.
.SH "Selected Bug Fixes"
.IX Header "Selected Bug Fixes"
.IP "\(bu" 4
A possible segfault in the \f(CW\*(C`T_PRTOBJ\*(C'\fR default typemap has been fixed.
.IP "\(bu" 4
A possible memory leak when using \fIcaller()\fR to set
\&\f(CW@DB::args\fR has been fixed.
.IP "\(bu" 4
Several memory leaks when loading \s-1XS\s0 modules were fixed.
.IP "\(bu" 4
\&\f(CW\*(C`unpack()\*(C'\fR now handles scalar context correctly for \f(CW%32H\fR and \f(CW%32u\fR,
fixing a potential crash.  \f(CW\*(C`split()\*(C'\fR would crash because the third item
on the stack wasn't the regular expression it expected.  \f(CW\*(C`unpack("%2H",
\&...)\*(C'\fR would return both the unpacked result and the checksum on the stack,
as would \f(CW\*(C`unpack("%2u", ...)\*(C'\fR.
[perl #73814] <http://rt.perl.org/rt3/Ticket/Display.html?id=73814>
.IP "\(bu" 4
Perl now avoids using memory after calling \f(CW\*(C`free()\*(C'\fR in \fIpp_require\fR
when there are CODEREFs in \f(CW@INC\fR.
.IP "\(bu" 4
A bug that could cause "\f(CW\*(C`Unknown error\*(C'\fR\*(L" messages when
\&\*(R"\f(CW\*(C`call_sv(code, G_EVAL)\*(C'\fR" is called from an \s-1XS\s0 destructor has been fixed.
.IP "\(bu" 4
The implementation of the \f(CW\*(C`open $fh, \*(Aq>\*(Aq \e$buffer\*(C'\fR feature
now supports get/set magic and thus tied buffers correctly.
.IP "\(bu" 4
The \f(CW\*(C`pp_getc\*(C'\fR, \f(CW\*(C`pp_tell\*(C'\fR, and \f(CW\*(C`pp_eof\*(C'\fR opcodes now make room on the
stack for their return values in cases where no argument was passed in.
.IP "\(bu" 4
When matching unicode strings under some conditions inappropriate backtracking would
result in a \f(CW\*(C`Malformed UTF\-8 character (fatal)\*(C'\fR error. This should no longer occur.
See  [perl #75680] <http://rt.perl.org/rt3/Public/Bug/Display.html?id=75680>
.SH "Platform Specific Notes"
.IX Header "Platform Specific Notes"
.SS "\s-1AIX\s0"
.IX Subsection "AIX"
.IP "\(bu" 4
\&\fI\s-1README\s0.aix\fR has been updated with information about the \s-1XL C/\*(C+ V11\s0 compiler
suite.
.SS "Windows"
.IX Subsection "Windows"
.IP "\(bu" 4
When building Perl with the mingw64 x64 cross-compiler \f(CW\*(C`incpath\*(C'\fR,
\&\f(CW\*(C`libpth\*(C'\fR, \f(CW\*(C`ldflags\*(C'\fR, \f(CW\*(C`lddlflags\*(C'\fR and \f(CW\*(C`ldflags_nolargefiles\*(C'\fR values
in \fIConfig.pm\fR and \fIConfig_heavy.pl\fR were not previously being set
correctly because, with that compiler, the include and lib directories
are not immediately below \f(CW\*(C`$(CCHOME)\*(C'\fR.
.SS "\s-1VMS\s0"
.IX Subsection "VMS"
.IP "\(bu" 4
\&\fIgit_version.h\fR is now installed on \s-1VMS.\s0 This was an oversight in v5.12.0 which
caused some extensions to fail to build.
.IP "\(bu" 4
Several memory leaks in \fIstat()\fR have been fixed.
.IP "\(bu" 4
A memory leak in \f(CW\*(C`Perl_rename()\*(C'\fR due to a double allocation has been
fixed.
.IP "\(bu" 4
A memory leak in \f(CW\*(C`vms_fid_to_name()\*(C'\fR (used by \f(CW\*(C`realpath()\*(C'\fR and
\&\f(CW\*(C`realname()\*(C'\fR) has been fixed.
.SH "Acknowledgements"
.IX Header "Acknowledgements"
Perl 5.12.2 represents approximately three months of development since
Perl 5.12.1 and contains approximately 2,000 lines of changes across
100 files from 36 authors.
.PP
Perl continues to flourish into its third decade thanks to a vibrant
community of users and developers.  The following people are known to
have contributed the improvements that became Perl 5.12.2:
.PP
Abigail, \*(Aevar Arnfjo\*:r\*(d- Bjarmason, Ben Morrow, brian d foy, Brian
Phillips, Chas. Owens, Chris 'BinGOs' Williams, Chris Williams,
Craig A. Berry, Curtis Jewell, Dan Dascalescu, David Golden, David
Mitchell, Father Chrysostomos, Florian Ragwitz, George Greer, H.Merijn
Brand, Jan Dubois, Jesse Vincent, Jim Cromie, Karl Williamson, Lars
\&\s-1DXXXXXX XXX,\s0 Leon Brocard, Maik Hentsche, Matt S Trout,
Nicholas Clark, Rafael Garcia-Suarez, Rainer Tammer, Ricardo Signes,
Salvador Ortiz Garcia, Sisyphus, Slaven Rezic, Steffen Mueller, Tony Cook,
Vincent Pit and Yves Orton.
.SH "Reporting Bugs"
.IX Header "Reporting Bugs"
If you find what you think is a bug, you might check the articles
recently posted to the comp.lang.perl.misc newsgroup and the perl
bug database at http://rt.perl.org/perlbug/ .  There may also be
information at http://www.perl.org/ , the Perl Home Page.
.PP
If you believe you have an unreported bug, please run the \fBperlbug\fR
program included with your release.  Be sure to trim your bug down
to a tiny but sufficient test case.  Your bug report, along with the
output of \f(CW\*(C`perl \-V\*(C'\fR, will be sent off to perlbug@perl.org to be
analysed by the Perl porting team.
.PP
If the bug you are reporting has security implications, which make it
inappropriate to send to a publicly archived mailing list, then please send
it to perl5\-security\-report@perl.org. This points to a closed subscription
unarchived mailing list, which includes
all the core committers, who will be able
to help assess the impact of issues, figure out a resolution, and help
co-ordinate the release of patches to mitigate or fix the problem across all
platforms on which Perl is supported. Please only use this address for
security issues in the Perl core, not for modules independently
distributed on \s-1CPAN.\s0
.SH "SEE ALSO"
.IX Header "SEE ALSO"
The \fIChanges\fR file for an explanation of how to view exhaustive details
on what changed.
.PP
The \fI\s-1INSTALL\s0\fR file for how to build Perl.
.PP
The \fI\s-1README\s0\fR file for general stuff.
.PP
The \fIArtistic\fR and \fICopying\fR files for copyright information.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perl5122delta5.16.1                          0100644 0001750 0001750 00000035467 12566207412 023554  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERL5122DELTA 1"
.TH PERL5122DELTA 1 "2013-03-04" "perl v5.16.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perl5122delta \- what is new for perl v5.12.2
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document describes differences between the 5.12.1 release and
the 5.12.2 release.
.PP
If you are upgrading from an earlier major version, such as 5.10.1,
first read perl5120delta, which describes differences between 5.10.1
and 5.12.0, as well as perl5121delta, which describes earlier changes
in the 5.12 stable release series.
.SH "Incompatible Changes"
.IX Header "Incompatible Changes"
There are no changes intentionally incompatible with 5.12.1. If any exist, they
are bugs and reports are welcome.
.SH "Core Enhancements"
.IX Header "Core Enhancements"
Other than the bug fixes listed below, there should be no user-visible
changes to the core language in this release.
.SH "Modules and Pragmata"
.IX Header "Modules and Pragmata"
.SS "New Modules and Pragmata"
.IX Subsection "New Modules and Pragmata"
This release does not introduce any new modules or pragmata.
.SS "Pragmata Changes"
.IX Subsection "Pragmata Changes"
In the previous release, \f(CW\*(C`no \f(CIVERSION\f(CW;\*(C'\fR statements triggered a bug
which could cause feature bundles to be loaded and strict mode to
be enabled unintentionally.
.SS "Updated Modules"
.IX Subsection "Updated Modules"
.ie n .IP """Carp""" 4
.el .IP "\f(CWCarp\fR" 4
.IX Item "Carp"
Upgraded from version 1.16 to 1.17.
.Sp
Carp now detects incomplete \fIcaller()\fR
overrides and avoids using bogus \f(CW@DB::args\fR. To provide backtraces, Carp
relies on particular behaviour of the caller built-in. Carp now detects
if other code has overridden this with an incomplete implementation, and
modifies its backtrace accordingly. Previously incomplete overrides would
cause incorrect values in backtraces (best case), or obscure fatal errors
(worst case)
.Sp
This fixes certain cases of \f(CW\*(C`Bizarre copy of ARRAY\*(C'\fR caused by modules
overriding \f(CW\*(C`caller()\*(C'\fR incorrectly.
.ie n .IP """CPANPLUS""" 4
.el .IP "\f(CWCPANPLUS\fR" 4
.IX Item "CPANPLUS"
A patch to \fIcpanp-run-perl\fR has been backported from \s-1CPANPLUS\s0 \f(CW0.9004\fR. This
resolves \s-1RT\s0 #55964 <http://rt.cpan.org/Public/Bug/Display.html?id=55964>
and \s-1RT\s0 #57106 <http://rt.cpan.org/Public/Bug/Display.html?id=57106>, both
of which related to failures to install distributions that use
\&\f(CW\*(C`Module::Install::DSL\*(C'\fR.
.ie n .IP """File::Glob""" 4
.el .IP "\f(CWFile::Glob\fR" 4
.IX Item "File::Glob"
A regression which caused a failure to find \f(CW\*(C`CORE::GLOBAL::glob\*(C'\fR after
loading \f(CW\*(C`File::Glob\*(C'\fR to crash has been fixed.  Now, it correctly falls back
to external globbing via \f(CW\*(C`pp_glob\*(C'\fR.
.ie n .IP """File::Copy""" 4
.el .IP "\f(CWFile::Copy\fR" 4
.IX Item "File::Copy"
\&\f(CW\*(C`File::Copy::copy(FILE, DIR)\*(C'\fR is now documented.
.ie n .IP """File::Spec""" 4
.el .IP "\f(CWFile::Spec\fR" 4
.IX Item "File::Spec"
Upgraded from version 3.31 to 3.31_01.
.Sp
Several portability fixes were made in \f(CW\*(C`File::Spec::VMS\*(C'\fR: a colon is now
recognized as a delimiter in native filespecs; caret-escaped delimiters are
recognized for better handling of extended filespecs; \f(CW\*(C`catpath()\*(C'\fR returns
an empty directory rather than the current directory if the input directory
name is empty; \f(CW\*(C`abs2rel()\*(C'\fR properly handles Unix-style input.
.SH "Utility Changes"
.IX Header "Utility Changes"
.IP "\(bu" 4
\&\fIperlbug\fR now always gives the reporter a chance to change the email address it
guesses for them.
.IP "\(bu" 4
\&\fIperlbug\fR should no longer warn about uninitialized values when using the \f(CW\*(C`\-d\*(C'\fR
and \f(CW\*(C`\-v\*(C'\fR options.
.SH "Changes to Existing Documentation"
.IX Header "Changes to Existing Documentation"
.IP "\(bu" 4
The existing policy on backward-compatibility and deprecation has
been added to perlpolicy, along with definitions of terms like
\&\fIdeprecation\fR.
.IP "\(bu" 4
\&\*(L"srand\*(R" in perlfunc's usage has been clarified.
.IP "\(bu" 4
The entry for \*(L"die\*(R" in perlfunc was reorganized to emphasize its
role in the exception mechanism.
.IP "\(bu" 4
Perl's \s-1INSTALL\s0 file has been clarified to explicitly state that Perl
requires a C89 compliant \s-1ANSI\s0 C Compiler.
.IP "\(bu" 4
IO::Socket's \f(CW\*(C`getsockopt()\*(C'\fR and \f(CW\*(C`setsockopt()\*(C'\fR have been documented.
.IP "\(bu" 4
\&\fI\fIalarm()\fI\fR's inability to interrupt blocking \s-1IO\s0 on Windows has been documented.
.IP "\(bu" 4
Math::TrulyRandom hasn't been updated since 1996 and has been removed
as a recommended solution for random number generation.
.IP "\(bu" 4
perlrun has been updated to clarify the behaviour of octal flags to \fIperl\fR.
.IP "\(bu" 4
To ease user confusion, \f(CW$#\fR and \f(CW$*\fR, two special variables that were
removed in earlier versions of Perl have been documented.
.IP "\(bu" 4
The version of perlfaq shipped with the Perl core has been updated from the
official \s-1FAQ\s0 version, which is now maintained in the \f(CW\*(C`briandfoy/perlfaq\*(C'\fR
branch of the Perl repository at <git://perl5.git.perl.org/perl.git>.
.SH "Installation and Configuration Improvements"
.IX Header "Installation and Configuration Improvements"
.SS "Configuration improvements"
.IX Subsection "Configuration improvements"
.IP "\(bu" 4
The \f(CW\*(C`d_u32align\*(C'\fR configuration probe on \s-1ARM\s0 has been fixed.
.SS "Compilation improvements"
.IX Subsection "Compilation improvements"
.IP "\(bu" 4
An "\f(CW\*(C`incompatible operand types\*(C'\fR" error in ternary expressions when building
with \f(CW\*(C`clang\*(C'\fR has been fixed.
.IP "\(bu" 4
Perl now skips setuid \f(CW\*(C`File::Copy\*(C'\fR tests on partitions it detects to be mounted
as \f(CW\*(C`nosuid\*(C'\fR.
.SH "Selected Bug Fixes"
.IX Header "Selected Bug Fixes"
.IP "\(bu" 4
A possible segfault in the \f(CW\*(C`T_PRTOBJ\*(C'\fR default typemap has been fixed.
.IP "\(bu" 4
A possible memory leak when using \fIcaller()\fR to set
\&\f(CW@DB::args\fR has been fixed.
.IP "\(bu" 4
Several memory leaks when loading \s-1XS\s0 modules were fixed.
.IP "\(bu" 4
\&\f(CW\*(C`unpack()\*(C'\fR now handles scalar context correctly for \f(CW%32H\fR and \f(CW%32u\fR,
fixing a potential crash.  \f(CW\*(C`split()\*(C'\fR would crash because the third item
on the stack wasn't the regular expression it expected.  \f(CW\*(C`unpack("%2H",
\&...)\*(C'\fR would return both the unpacked result and the checksum on the stack,
as would \f(CW\*(C`unpack("%2u", ...)\*(C'\fR.
[perl #73814] <http://rt.perl.org/rt3/Ticket/Display.html?id=73814>
.IP "\(bu" 4
Perl now avoids using memory after calling \f(CW\*(C`free()\*(C'\fR in \fIpp_require\fR
when there are CODEREFs in \f(CW@INC\fR.
.IP "\(bu" 4
A bug that could cause "\f(CW\*(C`Unknown error\*(C'\fR\*(L" messages when
\&\*(R"\f(CW\*(C`call_sv(code, G_EVAL)\*(C'\fR" is called from an \s-1XS\s0 destructor has been fixed.
.IP "\(bu" 4
The implementation of the \f(CW\*(C`open $fh, \*(Aq>\*(Aq \e$buffer\*(C'\fR feature
now supports get/set magic and thus tied buffers correctly.
.IP "\(bu" 4
The \f(CW\*(C`pp_getc\*(C'\fR, \f(CW\*(C`pp_tell\*(C'\fR, and \f(CW\*(C`pp_eof\*(C'\fR opcodes now make room on the
stack for their return values in cases where no argument was passed in.
.IP "\(bu" 4
When matching unicode strings under some conditions inappropriate backtracking would
result in a \f(CW\*(C`Malformed UTF\-8 character (fatal)\*(C'\fR error. This should no longer occur.
See  [perl #75680] <http://rt.perl.org/rt3/Public/Bug/Display.html?id=75680>
.SH "Platform Specific Notes"
.IX Header "Platform Specific Notes"
.SS "\s-1AIX\s0"
.IX Subsection "AIX"
.IP "\(bu" 4
\&\fI\s-1README\s0.aix\fR has been updated with information about the \s-1XL\s0 C/\*(C+ V11 compiler
suite.
.SS "Windows"
.IX Subsection "Windows"
.IP "\(bu" 4
When building Perl with the mingw64 x64 cross-compiler \f(CW\*(C`incpath\*(C'\fR,
\&\f(CW\*(C`libpth\*(C'\fR, \f(CW\*(C`ldflags\*(C'\fR, \f(CW\*(C`lddlflags\*(C'\fR and \f(CW\*(C`ldflags_nolargefiles\*(C'\fR values
in \fIConfig.pm\fR and \fIConfig_heavy.pl\fR were not previously being set
correctly because, with that compiler, the include and lib directories
are not immediately below \f(CW\*(C`$(CCHOME)\*(C'\fR.
.SS "\s-1VMS\s0"
.IX Subsection "VMS"
.IP "\(bu" 4
\&\fIgit_version.h\fR is now installed on \s-1VMS\s0. This was an oversight in v5.12.0 which
caused some extensions to fail to build.
.IP "\(bu" 4
Several memory leaks in \fIstat()\fR have been fixed.
.IP "\(bu" 4
A memory leak in \f(CW\*(C`Perl_rename()\*(C'\fR due to a double allocation has been
fixed.
.IP "\(bu" 4
A memory leak in \f(CW\*(C`vms_fid_to_name()\*(C'\fR (used by \f(CW\*(C`realpath()\*(C'\fR and
\&\f(CW\*(C`realname()\*(C'\fR) has been fixed.
.SH "Acknowledgements"
.IX Header "Acknowledgements"
Perl 5.12.2 represents approximately three months of development since
Perl 5.12.1 and contains approximately 2,000 lines of changes across
100 files from 36 authors.
.PP
Perl continues to flourish into its third decade thanks to a vibrant
community of users and developers.  The following people are known to
have contributed the improvements that became Perl 5.12.2:
.PP
Abigail, \*(AEvar Arnfjo\*:r\*(d- Bjarmason, Ben Morrow, brian d foy, Brian
Phillips, Chas. Owens, Chris 'BinGOs' Williams, Chris Williams,
Craig A. Berry, Curtis Jewell, Dan Dascalescu, David Golden, David
Mitchell, Father Chrysostomos, Florian Ragwitz, George Greer, H.Merijn
Brand, Jan Dubois, Jesse Vincent, Jim Cromie, Karl Williamson, Lars
\&\s-1DXXXXXX\s0 \s-1XXX\s0, Leon Brocard, Maik Hentsche, Matt S Trout,
Nicholas Clark, Rafael Garcia-Suarez, Rainer Tammer, Ricardo Signes,
Salvador Ortiz Garcia, Sisyphus, Slaven Rezic, Steffen Mueller, Tony Cook,
Vincent Pit and Yves Orton.
.SH "Reporting Bugs"
.IX Header "Reporting Bugs"
If you find what you think is a bug, you might check the articles
recently posted to the comp.lang.perl.misc newsgroup and the perl
bug database at http://rt.perl.org/perlbug/ .  There may also be
information at http://www.perl.org/ , the Perl Home Page.
.PP
If you believe you have an unreported bug, please run the \fBperlbug\fR
program included with your release.  Be sure to trim your bug down
to a tiny but sufficient test case.  Your bug report, along with the
output of \f(CW\*(C`perl \-V\*(C'\fR, will be sent off to perlbug@perl.org to be
analysed by the Perl porting team.
.PP
If the bug you are reporting has security implications, which make it
inappropriate to send to a publicly archived mailing list, then please send
it to perl5\-security\-report@perl.org. This points to a closed subscription
unarchived mailing list, which includes
all the core committers, who will be able
to help assess the impact of issues, figure out a resolution, and help
co-ordinate the release of patches to mitigate or fix the problem across all
platforms on which Perl is supported. Please only use this address for
security issues in the Perl core, not for modules independently
distributed on \s-1CPAN\s0.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
The \fIChanges\fR file for an explanation of how to view exhaustive details
on what changed.
.PP
The \fI\s-1INSTALL\s0\fR file for how to build Perl.
.PP
The \fI\s-1README\s0\fR file for general stuff.
.PP
The \fIArtistic\fR and \fICopying\fR files for copyright information.
                                                                                                                                                                                                         osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perl5122delta5.18.1                          0100644 0001750 0001750 00000036001 12566207432 023541  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERL5122DELTA 1"
.TH PERL5122DELTA 1 "2013-11-04" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perl5122delta \- what is new for perl v5.12.2
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document describes differences between the 5.12.1 release and
the 5.12.2 release.
.PP
If you are upgrading from an earlier major version, such as 5.10.1,
first read perl5120delta, which describes differences between 5.10.1
and 5.12.0, as well as perl5121delta, which describes earlier changes
in the 5.12 stable release series.
.SH "Incompatible Changes"
.IX Header "Incompatible Changes"
There are no changes intentionally incompatible with 5.12.1. If any exist, they
are bugs and reports are welcome.
.SH "Core Enhancements"
.IX Header "Core Enhancements"
Other than the bug fixes listed below, there should be no user-visible
changes to the core language in this release.
.SH "Modules and Pragmata"
.IX Header "Modules and Pragmata"
.SS "New Modules and Pragmata"
.IX Subsection "New Modules and Pragmata"
This release does not introduce any new modules or pragmata.
.SS "Pragmata Changes"
.IX Subsection "Pragmata Changes"
In the previous release, \f(CW\*(C`no \f(CIVERSION\f(CW;\*(C'\fR statements triggered a bug
which could cause feature bundles to be loaded and strict mode to
be enabled unintentionally.
.SS "Updated Modules"
.IX Subsection "Updated Modules"
.ie n .IP """Carp""" 4
.el .IP "\f(CWCarp\fR" 4
.IX Item "Carp"
Upgraded from version 1.16 to 1.17.
.Sp
Carp now detects incomplete \fIcaller()\fR
overrides and avoids using bogus \f(CW@DB::args\fR. To provide backtraces, Carp
relies on particular behaviour of the caller built-in. Carp now detects
if other code has overridden this with an incomplete implementation, and
modifies its backtrace accordingly. Previously incomplete overrides would
cause incorrect values in backtraces (best case), or obscure fatal errors
(worst case)
.Sp
This fixes certain cases of \f(CW\*(C`Bizarre copy of ARRAY\*(C'\fR caused by modules
overriding \f(CW\*(C`caller()\*(C'\fR incorrectly.
.ie n .IP """CPANPLUS""" 4
.el .IP "\f(CWCPANPLUS\fR" 4
.IX Item "CPANPLUS"
A patch to \fIcpanp-run-perl\fR has been backported from \s-1CPANPLUS \s0\f(CW0.9004\fR. This
resolves \s-1RT\s0 #55964 <http://rt.cpan.org/Public/Bug/Display.html?id=55964>
and \s-1RT\s0 #57106 <http://rt.cpan.org/Public/Bug/Display.html?id=57106>, both
of which related to failures to install distributions that use
\&\f(CW\*(C`Module::Install::DSL\*(C'\fR.
.ie n .IP """File::Glob""" 4
.el .IP "\f(CWFile::Glob\fR" 4
.IX Item "File::Glob"
A regression which caused a failure to find \f(CW\*(C`CORE::GLOBAL::glob\*(C'\fR after
loading \f(CW\*(C`File::Glob\*(C'\fR to crash has been fixed.  Now, it correctly falls back
to external globbing via \f(CW\*(C`pp_glob\*(C'\fR.
.ie n .IP """File::Copy""" 4
.el .IP "\f(CWFile::Copy\fR" 4
.IX Item "File::Copy"
\&\f(CW\*(C`File::Copy::copy(FILE, DIR)\*(C'\fR is now documented.
.ie n .IP """File::Spec""" 4
.el .IP "\f(CWFile::Spec\fR" 4
.IX Item "File::Spec"
Upgraded from version 3.31 to 3.31_01.
.Sp
Several portability fixes were made in \f(CW\*(C`File::Spec::VMS\*(C'\fR: a colon is now
recognized as a delimiter in native filespecs; caret-escaped delimiters are
recognized for better handling of extended filespecs; \f(CW\*(C`catpath()\*(C'\fR returns
an empty directory rather than the current directory if the input directory
name is empty; \f(CW\*(C`abs2rel()\*(C'\fR properly handles Unix-style input.
.SH "Utility Changes"
.IX Header "Utility Changes"
.IP "\(bu" 4
\&\fIperlbug\fR now always gives the reporter a chance to change the email address it
guesses for them.
.IP "\(bu" 4
\&\fIperlbug\fR should no longer warn about uninitialized values when using the \f(CW\*(C`\-d\*(C'\fR
and \f(CW\*(C`\-v\*(C'\fR options.
.SH "Changes to Existing Documentation"
.IX Header "Changes to Existing Documentation"
.IP "\(bu" 4
The existing policy on backward-compatibility and deprecation has
been added to perlpolicy, along with definitions of terms like
\&\fIdeprecation\fR.
.IP "\(bu" 4
\&\*(L"srand\*(R" in perlfunc's usage has been clarified.
.IP "\(bu" 4
The entry for \*(L"die\*(R" in perlfunc was reorganized to emphasize its
role in the exception mechanism.
.IP "\(bu" 4
Perl's \s-1INSTALL\s0 file has been clarified to explicitly state that Perl
requires a C89 compliant \s-1ANSI C\s0 Compiler.
.IP "\(bu" 4
IO::Socket's \f(CW\*(C`getsockopt()\*(C'\fR and \f(CW\*(C`setsockopt()\*(C'\fR have been documented.
.IP "\(bu" 4
\&\fI\fIalarm()\fI\fR's inability to interrupt blocking \s-1IO\s0 on Windows has been documented.
.IP "\(bu" 4
Math::TrulyRandom hasn't been updated since 1996 and has been removed
as a recommended solution for random number generation.
.IP "\(bu" 4
perlrun has been updated to clarify the behaviour of octal flags to \fIperl\fR.
.IP "\(bu" 4
To ease user confusion, \f(CW$#\fR and \f(CW$*\fR, two special variables that were
removed in earlier versions of Perl have been documented.
.IP "\(bu" 4
The version of perlfaq shipped with the Perl core has been updated from the
official \s-1FAQ\s0 version, which is now maintained in the \f(CW\*(C`briandfoy/perlfaq\*(C'\fR
branch of the Perl repository at <git://perl5.git.perl.org/perl.git>.
.SH "Installation and Configuration Improvements"
.IX Header "Installation and Configuration Improvements"
.SS "Configuration improvements"
.IX Subsection "Configuration improvements"
.IP "\(bu" 4
The \f(CW\*(C`d_u32align\*(C'\fR configuration probe on \s-1ARM\s0 has been fixed.
.SS "Compilation improvements"
.IX Subsection "Compilation improvements"
.IP "\(bu" 4
An "\f(CW\*(C`incompatible operand types\*(C'\fR" error in ternary expressions when building
with \f(CW\*(C`clang\*(C'\fR has been fixed.
.IP "\(bu" 4
Perl now skips setuid \f(CW\*(C`File::Copy\*(C'\fR tests on partitions it detects to be mounted
as \f(CW\*(C`nosuid\*(C'\fR.
.SH "Selected Bug Fixes"
.IX Header "Selected Bug Fixes"
.IP "\(bu" 4
A possible segfault in the \f(CW\*(C`T_PRTOBJ\*(C'\fR default typemap has been fixed.
.IP "\(bu" 4
A possible memory leak when using \fIcaller()\fR to set
\&\f(CW@DB::args\fR has been fixed.
.IP "\(bu" 4
Several memory leaks when loading \s-1XS\s0 modules were fixed.
.IP "\(bu" 4
\&\f(CW\*(C`unpack()\*(C'\fR now handles scalar context correctly for \f(CW%32H\fR and \f(CW%32u\fR,
fixing a potential crash.  \f(CW\*(C`split()\*(C'\fR would crash because the third item
on the stack wasn't the regular expression it expected.  \f(CW\*(C`unpack("%2H",
\&...)\*(C'\fR would return both the unpacked result and the checksum on the stack,
as would \f(CW\*(C`unpack("%2u", ...)\*(C'\fR.
[perl #73814] <http://rt.perl.org/rt3/Ticket/Display.html?id=73814>
.IP "\(bu" 4
Perl now avoids using memory after calling \f(CW\*(C`free()\*(C'\fR in \fIpp_require\fR
when there are CODEREFs in \f(CW@INC\fR.
.IP "\(bu" 4
A bug that could cause "\f(CW\*(C`Unknown error\*(C'\fR\*(L" messages when
\&\*(R"\f(CW\*(C`call_sv(code, G_EVAL)\*(C'\fR" is called from an \s-1XS\s0 destructor has been fixed.
.IP "\(bu" 4
The implementation of the \f(CW\*(C`open $fh, \*(Aq>\*(Aq \e$buffer\*(C'\fR feature
now supports get/set magic and thus tied buffers correctly.
.IP "\(bu" 4
The \f(CW\*(C`pp_getc\*(C'\fR, \f(CW\*(C`pp_tell\*(C'\fR, and \f(CW\*(C`pp_eof\*(C'\fR opcodes now make room on the
stack for their return values in cases where no argument was passed in.
.IP "\(bu" 4
When matching unicode strings under some conditions inappropriate backtracking would
result in a \f(CW\*(C`Malformed UTF\-8 character (fatal)\*(C'\fR error. This should no longer occur.
See  [perl #75680] <http://rt.perl.org/rt3/Public/Bug/Display.html?id=75680>
.SH "Platform Specific Notes"
.IX Header "Platform Specific Notes"
.SS "\s-1AIX\s0"
.IX Subsection "AIX"
.IP "\(bu" 4
\&\fI\s-1README\s0.aix\fR has been updated with information about the \s-1XL C/\*(C+ V11\s0 compiler
suite.
.SS "Windows"
.IX Subsection "Windows"
.IP "\(bu" 4
When building Perl with the mingw64 x64 cross-compiler \f(CW\*(C`incpath\*(C'\fR,
\&\f(CW\*(C`libpth\*(C'\fR, \f(CW\*(C`ldflags\*(C'\fR, \f(CW\*(C`lddlflags\*(C'\fR and \f(CW\*(C`ldflags_nolargefiles\*(C'\fR values
in \fIConfig.pm\fR and \fIConfig_heavy.pl\fR were not previously being set
correctly because, with that compiler, the include and lib directories
are not immediately below \f(CW\*(C`$(CCHOME)\*(C'\fR.
.SS "\s-1VMS\s0"
.IX Subsection "VMS"
.IP "\(bu" 4
\&\fIgit_version.h\fR is now installed on \s-1VMS.\s0 This was an oversight in v5.12.0 which
caused some extensions to fail to build.
.IP "\(bu" 4
Several memory leaks in \fIstat()\fR have been fixed.
.IP "\(bu" 4
A memory leak in \f(CW\*(C`Perl_rename()\*(C'\fR due to a double allocation has been
fixed.
.IP "\(bu" 4
A memory leak in \f(CW\*(C`vms_fid_to_name()\*(C'\fR (used by \f(CW\*(C`realpath()\*(C'\fR and
\&\f(CW\*(C`realname()\*(C'\fR) has been fixed.
.SH "Acknowledgements"
.IX Header "Acknowledgements"
Perl 5.12.2 represents approximately three months of development since
Perl 5.12.1 and contains approximately 2,000 lines of changes across
100 files from 36 authors.
.PP
Perl continues to flourish into its third decade thanks to a vibrant
community of users and developers.  The following people are known to
have contributed the improvements that became Perl 5.12.2:
.PP
Abigail, \*(Aevar Arnfjo\*:r\*(d- Bjarmason, Ben Morrow, brian d foy, Brian
Phillips, Chas. Owens, Chris 'BinGOs' Williams, Chris Williams,
Craig A. Berry, Curtis Jewell, Dan Dascalescu, David Golden, David
Mitchell, Father Chrysostomos, Florian Ragwitz, George Greer, H.Merijn
Brand, Jan Dubois, Jesse Vincent, Jim Cromie, Karl Williamson, Lars
\&\s-1DXXXXXX XXX,\s0 Leon Brocard, Maik Hentsche, Matt S Trout,
Nicholas Clark, Rafael Garcia-Suarez, Rainer Tammer, Ricardo Signes,
Salvador Ortiz Garcia, Sisyphus, Slaven Rezic, Steffen Mueller, Tony Cook,
Vincent Pit and Yves Orton.
.SH "Reporting Bugs"
.IX Header "Reporting Bugs"
If you find what you think is a bug, you might check the articles
recently posted to the comp.lang.perl.misc newsgroup and the perl
bug database at http://rt.perl.org/perlbug/ .  There may also be
information at http://www.perl.org/ , the Perl Home Page.
.PP
If you believe you have an unreported bug, please run the \fBperlbug\fR
program included with your release.  Be sure to trim your bug down
to a tiny but sufficient test case.  Your bug report, along with the
output of \f(CW\*(C`perl \-V\*(C'\fR, will be sent off to perlbug@perl.org to be
analysed by the Perl porting team.
.PP
If the bug you are reporting has security implications, which make it
inappropriate to send to a publicly archived mailing list, then please send
it to perl5\-security\-report@perl.org. This points to a closed subscription
unarchived mailing list, which includes
all the core committers, who will be able
to help assess the impact of issues, figure out a resolution, and help
co-ordinate the release of patches to mitigate or fix the problem across all
platforms on which Perl is supported. Please only use this address for
security issues in the Perl core, not for modules independently
distributed on \s-1CPAN.\s0
.SH "SEE ALSO"
.IX Header "SEE ALSO"
The \fIChanges\fR file for an explanation of how to view exhaustive details
on what changed.
.PP
The \fI\s-1INSTALL\s0\fR file for how to build Perl.
.PP
The \fI\s-1README\s0\fR file for general stuff.
.PP
The \fIArtistic\fR and \fICopying\fR files for copyright information.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perl5123delta.1                              0100644 0001750 0001750 00000020711 12566207432 023227  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERL5123DELTA 1"
.TH PERL5123DELTA 1 "2013-11-04" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perl5123delta \- what is new for perl v5.12.3
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document describes differences between the 5.12.2 release and
the 5.12.3 release.
.PP
If you are upgrading from an earlier release such as 5.12.1, first read
perl5122delta, which describes differences between 5.12.1 and
5.12.2.  The major changes made in 5.12.0 are described in perl5120delta.
.SH "Incompatible Changes"
.IX Header "Incompatible Changes"
.Vb 2
\&    There are no changes intentionally incompatible with 5.12.2. If any
\&    exist, they are bugs and reports are welcome.
.Ve
.SH "Core Enhancements"
.IX Header "Core Enhancements"
.ie n .SS """keys"", ""values"" work on arrays"
.el .SS "\f(CWkeys\fP, \f(CWvalues\fP work on arrays"
.IX Subsection "keys, values work on arrays"
You can now use the \f(CW\*(C`keys\*(C'\fR, \f(CW\*(C`values\*(C'\fR, \f(CW\*(C`each\*(C'\fR builtin functions on arrays
(previously you could only use them on hashes).  See perlfunc for details.
This is actually a change introduced in perl 5.12.0, but it was missed from
that release's perldelta.
.SH "Bug Fixes"
.IX Header "Bug Fixes"
\&\*(L"no \s-1VERSION\*(R"\s0 will now correctly deparse with B::Deparse, as will certain
constant expressions.
.PP
Module::Build should be more reliably pass its tests under cygwin.
.PP
Lvalue subroutines are again able to return copy-on-write scalars.  This
had been broken since version 5.10.0.
.SH "Platform Specific Notes"
.IX Header "Platform Specific Notes"
.IP "Solaris" 4
.IX Item "Solaris"
A separate DTrace is now build for miniperl, which means that perl can be
compiled with \-Dusedtrace on Solaris again.
.IP "\s-1VMS\s0" 4
.IX Item "VMS"
A number of regressions on \s-1VMS\s0 have been fixed.  In addition to minor cleanup
of questionable expressions in \fIvms.c\fR, file permissions should no longer be
garbled by the PerlIO layer, and spurious record boundaries should no longer be
introduced by the PerlIO layer during output.
.Sp
For more details and discussion on the latter, see:
.Sp
.Vb 1
\&    http://www.nntp.perl.org/group/perl.vmsperl/2010/11/msg15419.html
.Ve
.IP "\s-1VOS\s0" 4
.IX Item "VOS"
A few very small changes were made to the build process on \s-1VOS\s0 to better
support the platform.  Longer\-than\-32\-character filenames are now supported on
OpenVOS, and build properly without IPv6 support.
.SH "Acknowledgements"
.IX Header "Acknowledgements"
Perl 5.12.3 represents approximately four months of development since
Perl 5.12.2 and contains approximately 2500 lines of changes across
54 files from 16 authors.
.PP
Perl continues to flourish into its third decade thanks to a vibrant
community of users and developers.  The following people are known to
have contributed the improvements that became Perl 5.12.3:
.PP
Craig A. Berry, David Golden, David Leadbeater, Father Chrysostomos, Florian
Ragwitz, Jesse Vincent, Karl Williamson, Nick Johnston, Nicolas Kaiser, Paul
Green, Rafael Garcia-Suarez, Rainer Tammer, Ricardo Signes, Steffen Mueller,
Zsba\*'n Ambrus, \*(Aevar Arnfjo\*:r\*(d- Bjarmason
.SH "Reporting Bugs"
.IX Header "Reporting Bugs"
If you find what you think is a bug, you might check the articles
recently posted to the comp.lang.perl.misc newsgroup and the perl
bug database at http://rt.perl.org/perlbug/ .  There may also be
information at http://www.perl.org/ , the Perl Home Page.
.PP
If you believe you have an unreported bug, please run the \fBperlbug\fR
program included with your release.  Be sure to trim your bug down
to a tiny but sufficient test case.  Your bug report, along with the
output of \f(CW\*(C`perl \-V\*(C'\fR, will be sent off to perlbug@perl.org to be
analysed by the Perl porting team.
.PP
If the bug you are reporting has security implications, which make it
inappropriate to send to a publicly archived mailing list, then please send
it to perl5\-security\-report@perl.org. This points to a closed subscription
unarchived mailing list, which includes
all the core committers, who will be able
to help assess the impact of issues, figure out a resolution, and help
co-ordinate the release of patches to mitigate or fix the problem across all
platforms on which Perl is supported. Please only use this address for
security issues in the Perl core, not for modules independently
distributed on \s-1CPAN.\s0
.SH "SEE ALSO"
.IX Header "SEE ALSO"
The \fIChanges\fR file for an explanation of how to view exhaustive details
on what changed.
.PP
The \fI\s-1INSTALL\s0\fR file for how to build Perl.
.PP
The \fI\s-1README\s0\fR file for general stuff.
.PP
The \fIArtistic\fR and \fICopying\fR files for copyright information.
                                                       osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perl5123delta5.16.1                          0100644 0001750 0001750 00000020370 12566207412 023540  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERL5123DELTA 1"
.TH PERL5123DELTA 1 "2013-03-04" "perl v5.16.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perl5123delta \- what is new for perl v5.12.3
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document describes differences between the 5.12.2 release and
the 5.12.3 release.
.PP
If you are upgrading from an earlier release such as 5.12.1, first read
perl5122delta, which describes differences between 5.12.1 and
5.12.2.  The major changes made in 5.12.0 are described in perl5120delta.
.SH "Incompatible Changes"
.IX Header "Incompatible Changes"
.Vb 2
\&    There are no changes intentionally incompatible with 5.12.2. If any
\&    exist, they are bugs and reports are welcome.
.Ve
.SH "Core Enhancements"
.IX Header "Core Enhancements"
.ie n .SS """keys"", ""values"" work on arrays"
.el .SS "\f(CWkeys\fP, \f(CWvalues\fP work on arrays"
.IX Subsection "keys, values work on arrays"
You can now use the \f(CW\*(C`keys\*(C'\fR, \f(CW\*(C`values\*(C'\fR, \f(CW\*(C`each\*(C'\fR builtin functions on arrays
(previously you could only use them on hashes).  See perlfunc for details.
This is actually a change introduced in perl 5.12.0, but it was missed from
that release's perldelta.
.SH "Bug Fixes"
.IX Header "Bug Fixes"
\&\*(L"no \s-1VERSION\s0\*(R" will now correctly deparse with B::Deparse, as will certain
constant expressions.
.PP
Module::Build should be more reliably pass its tests under cygwin.
.PP
Lvalue subroutines are again able to return copy-on-write scalars.  This
had been broken since version 5.10.0.
.SH "Platform Specific Notes"
.IX Header "Platform Specific Notes"
.IP "Solaris" 4
.IX Item "Solaris"
A separate DTrace is now build for miniperl, which means that perl can be
compiled with \-Dusedtrace on Solaris again.
.IP "\s-1VMS\s0" 4
.IX Item "VMS"
A number of regressions on \s-1VMS\s0 have been fixed.  In addition to minor cleanup
of questionable expressions in \fIvms.c\fR, file permissions should no longer be
garbled by the PerlIO layer, and spurious record boundaries should no longer be
introduced by the PerlIO layer during output.
.Sp
For more details and discussion on the latter, see:
.Sp
.Vb 1
\&    http://www.nntp.perl.org/group/perl.vmsperl/2010/11/msg15419.html
.Ve
.IP "\s-1VOS\s0" 4
.IX Item "VOS"
A few very small changes were made to the build process on \s-1VOS\s0 to better
support the platform.  Longer\-than\-32\-character filenames are now supported on
OpenVOS, and build properly without IPv6 support.
.SH "Acknowledgements"
.IX Header "Acknowledgements"
Perl 5.12.3 represents approximately four months of development since
Perl 5.12.2 and contains approximately 2500 lines of changes across
54 files from 16 authors.
.PP
Perl continues to flourish into its third decade thanks to a vibrant
community of users and developers.  The following people are known to
have contributed the improvements that became Perl 5.12.3:
.PP
Craig A. Berry, David Golden, David Leadbeater, Father Chrysostomos, Florian
Ragwitz, Jesse Vincent, Karl Williamson, Nick Johnston, Nicolas Kaiser, Paul
Green, Rafael Garcia-Suarez, Rainer Tammer, Ricardo Signes, Steffen Mueller,
Zsba\*'n Ambrus, \*(AEvar Arnfjo\*:r\*(d- Bjarmason
.SH "Reporting Bugs"
.IX Header "Reporting Bugs"
If you find what you think is a bug, you might check the articles
recently posted to the comp.lang.perl.misc newsgroup and the perl
bug database at http://rt.perl.org/perlbug/ .  There may also be
information at http://www.perl.org/ , the Perl Home Page.
.PP
If you believe you have an unreported bug, please run the \fBperlbug\fR
program included with your release.  Be sure to trim your bug down
to a tiny but sufficient test case.  Your bug report, along with the
output of \f(CW\*(C`perl \-V\*(C'\fR, will be sent off to perlbug@perl.org to be
analysed by the Perl porting team.
.PP
If the bug you are reporting has security implications, which make it
inappropriate to send to a publicly archived mailing list, then please send
it to perl5\-security\-report@perl.org. This points to a closed subscription
unarchived mailing list, which includes
all the core committers, who will be able
to help assess the impact of issues, figure out a resolution, and help
co-ordinate the release of patches to mitigate or fix the problem across all
platforms on which Perl is supported. Please only use this address for
security issues in the Perl core, not for modules independently
distributed on \s-1CPAN\s0.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
The \fIChanges\fR file for an explanation of how to view exhaustive details
on what changed.
.PP
The \fI\s-1INSTALL\s0\fR file for how to build Perl.
.PP
The \fI\s-1README\s0\fR file for general stuff.
.PP
The \fIArtistic\fR and \fICopying\fR files for copyright information.
                                                                                                                                                                                                                                                                        osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perl5123delta5.18.1                          0100644 0001750 0001750 00000020711 12566207432 023543  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERL5123DELTA 1"
.TH PERL5123DELTA 1 "2013-11-04" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perl5123delta \- what is new for perl v5.12.3
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document describes differences between the 5.12.2 release and
the 5.12.3 release.
.PP
If you are upgrading from an earlier release such as 5.12.1, first read
perl5122delta, which describes differences between 5.12.1 and
5.12.2.  The major changes made in 5.12.0 are described in perl5120delta.
.SH "Incompatible Changes"
.IX Header "Incompatible Changes"
.Vb 2
\&    There are no changes intentionally incompatible with 5.12.2. If any
\&    exist, they are bugs and reports are welcome.
.Ve
.SH "Core Enhancements"
.IX Header "Core Enhancements"
.ie n .SS """keys"", ""values"" work on arrays"
.el .SS "\f(CWkeys\fP, \f(CWvalues\fP work on arrays"
.IX Subsection "keys, values work on arrays"
You can now use the \f(CW\*(C`keys\*(C'\fR, \f(CW\*(C`values\*(C'\fR, \f(CW\*(C`each\*(C'\fR builtin functions on arrays
(previously you could only use them on hashes).  See perlfunc for details.
This is actually a change introduced in perl 5.12.0, but it was missed from
that release's perldelta.
.SH "Bug Fixes"
.IX Header "Bug Fixes"
\&\*(L"no \s-1VERSION\*(R"\s0 will now correctly deparse with B::Deparse, as will certain
constant expressions.
.PP
Module::Build should be more reliably pass its tests under cygwin.
.PP
Lvalue subroutines are again able to return copy-on-write scalars.  This
had been broken since version 5.10.0.
.SH "Platform Specific Notes"
.IX Header "Platform Specific Notes"
.IP "Solaris" 4
.IX Item "Solaris"
A separate DTrace is now build for miniperl, which means that perl can be
compiled with \-Dusedtrace on Solaris again.
.IP "\s-1VMS\s0" 4
.IX Item "VMS"
A number of regressions on \s-1VMS\s0 have been fixed.  In addition to minor cleanup
of questionable expressions in \fIvms.c\fR, file permissions should no longer be
garbled by the PerlIO layer, and spurious record boundaries should no longer be
introduced by the PerlIO layer during output.
.Sp
For more details and discussion on the latter, see:
.Sp
.Vb 1
\&    http://www.nntp.perl.org/group/perl.vmsperl/2010/11/msg15419.html
.Ve
.IP "\s-1VOS\s0" 4
.IX Item "VOS"
A few very small changes were made to the build process on \s-1VOS\s0 to better
support the platform.  Longer\-than\-32\-character filenames are now supported on
OpenVOS, and build properly without IPv6 support.
.SH "Acknowledgements"
.IX Header "Acknowledgements"
Perl 5.12.3 represents approximately four months of development since
Perl 5.12.2 and contains approximately 2500 lines of changes across
54 files from 16 authors.
.PP
Perl continues to flourish into its third decade thanks to a vibrant
community of users and developers.  The following people are known to
have contributed the improvements that became Perl 5.12.3:
.PP
Craig A. Berry, David Golden, David Leadbeater, Father Chrysostomos, Florian
Ragwitz, Jesse Vincent, Karl Williamson, Nick Johnston, Nicolas Kaiser, Paul
Green, Rafael Garcia-Suarez, Rainer Tammer, Ricardo Signes, Steffen Mueller,
Zsba\*'n Ambrus, \*(Aevar Arnfjo\*:r\*(d- Bjarmason
.SH "Reporting Bugs"
.IX Header "Reporting Bugs"
If you find what you think is a bug, you might check the articles
recently posted to the comp.lang.perl.misc newsgroup and the perl
bug database at http://rt.perl.org/perlbug/ .  There may also be
information at http://www.perl.org/ , the Perl Home Page.
.PP
If you believe you have an unreported bug, please run the \fBperlbug\fR
program included with your release.  Be sure to trim your bug down
to a tiny but sufficient test case.  Your bug report, along with the
output of \f(CW\*(C`perl \-V\*(C'\fR, will be sent off to perlbug@perl.org to be
analysed by the Perl porting team.
.PP
If the bug you are reporting has security implications, which make it
inappropriate to send to a publicly archived mailing list, then please send
it to perl5\-security\-report@perl.org. This points to a closed subscription
unarchived mailing list, which includes
all the core committers, who will be able
to help assess the impact of issues, figure out a resolution, and help
co-ordinate the release of patches to mitigate or fix the problem across all
platforms on which Perl is supported. Please only use this address for
security issues in the Perl core, not for modules independently
distributed on \s-1CPAN.\s0
.SH "SEE ALSO"
.IX Header "SEE ALSO"
The \fIChanges\fR file for an explanation of how to view exhaustive details
on what changed.
.PP
The \fI\s-1INSTALL\s0\fR file for how to build Perl.
.PP
The \fI\s-1README\s0\fR file for general stuff.
.PP
The \fIArtistic\fR and \fICopying\fR files for copyright information.
                                                       osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perl5124delta.1                              0100644 0001750 0001750 00000017750 12566207432 023241  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERL5124DELTA 1"
.TH PERL5124DELTA 1 "2013-11-04" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perl5124delta \- what is new for perl v5.12.4
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document describes differences between the 5.12.3 release and
the 5.12.4 release.
.PP
If you are upgrading from an earlier release such as 5.12.2, first read
perl5123delta, which describes differences between 5.12.2
and 5.12.3. The major changes made in 5.12.0 are described in perl5120delta.
.SH "Incompatible Changes"
.IX Header "Incompatible Changes"
There are no changes intentionally incompatible with 5.12.3. If any
exist, they are bugs and reports are welcome.
.SH "Selected Bug Fixes"
.IX Header "Selected Bug Fixes"
When strict \*(L"refs\*(R" mode is off, \f(CW\*(C`%{...}\*(C'\fR in rvalue context returns
\&\f(CW\*(C`undef\*(C'\fR if its argument is undefined.  An optimisation introduced in Perl
5.12.0 to make \f(CW\*(C`keys %{...}\*(C'\fR faster when used as a boolean did not take
this into account, causing \f(CW\*(C`keys %{+undef}\*(C'\fR (and \f(CW\*(C`keys %$foo\*(C'\fR when
\&\f(CW$foo\fR is undefined) to be an error, which it should be so in strict
mode only [perl #81750].
.PP
\&\f(CW\*(C`lc\*(C'\fR, \f(CW\*(C`uc\*(C'\fR, \f(CW\*(C`lcfirst\*(C'\fR, and \f(CW\*(C`ucfirst\*(C'\fR no longer return untainted strings
when the argument is tainted. This has been broken since perl 5.8.9
[perl #87336].
.PP
Fixed a case where it was possible that a freed buffer may have been read
from when parsing a here document.
.SH "Modules and Pragmata"
.IX Header "Modules and Pragmata"
Module::CoreList has been upgraded from version 2.43 to 2.50.
.SH "Testing"
.IX Header "Testing"
The \fIcpan/CGI/t/http.t\fR test script has been fixed to work when the
environment has HTTPS_* environment variables, such as \s-1HTTPS_PROXY.\s0
.SH "Documentation"
.IX Header "Documentation"
Updated the documentation for \fIrand()\fR in perlfunc to note that it is not
cryptographically secure.
.SH "Platform Specific Notes"
.IX Header "Platform Specific Notes"
.IP "Linux" 4
.IX Item "Linux"
Support Ubuntu 11.04's new multi-arch library layout.
.SH "Acknowledgements"
.IX Header "Acknowledgements"
Perl 5.12.4 represents approximately 5 months of development since
Perl 5.12.3 and contains approximately 200 lines of changes across
11 files from 8 authors.
.PP
Perl continues to flourish into its third decade thanks to a vibrant
community of users and developers.  The following people are known to
have contributed the improvements that became Perl 5.12.4:
.PP
Andy Dougherty, David Golden, David Leadbeater, Father Chrysostomos,
Florian Ragwitz, Jesse Vincent, Leon Brocard, Zsba\*'n Ambrus.
.SH "Reporting Bugs"
.IX Header "Reporting Bugs"
If you find what you think is a bug, you might check the articles
recently posted to the comp.lang.perl.misc newsgroup and the perl
bug database at http://rt.perl.org/perlbug/ .  There may also be
information at http://www.perl.org/ , the Perl Home Page.
.PP
If you believe you have an unreported bug, please run the \fBperlbug\fR
program included with your release.  Be sure to trim your bug down
to a tiny but sufficient test case.  Your bug report, along with the
output of \f(CW\*(C`perl \-V\*(C'\fR, will be sent off to perlbug@perl.org to be
analysed by the Perl porting team.
.PP
If the bug you are reporting has security implications, which make it
inappropriate to send to a publicly archived mailing list, then please send
it to perl5\-security\-report@perl.org. This points to a closed subscription
unarchived mailing list, which includes all the core committers, who be able
to help assess the impact of issues, figure out a resolution, and help
co-ordinate the release of patches to mitigate or fix the problem across all
platforms on which Perl is supported. Please only use this address for
security issues in the Perl core, not for modules independently
distributed on \s-1CPAN.\s0
.SH "SEE ALSO"
.IX Header "SEE ALSO"
The \fIChanges\fR file for an explanation of how to view exhaustive details
on what changed.
.PP
The \fI\s-1INSTALL\s0\fR file for how to build Perl.
.PP
The \fI\s-1README\s0\fR file for general stuff.
.PP
The \fIArtistic\fR and \fICopying\fR files for copyright information.
                        osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perl5124delta5.16.1                          0100644 0001750 0001750 00000017427 12566207412 023552  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERL5124DELTA 1"
.TH PERL5124DELTA 1 "2013-02-26" "perl v5.16.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perl5124delta \- what is new for perl v5.12.4
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document describes differences between the 5.12.3 release and
the 5.12.4 release.
.PP
If you are upgrading from an earlier release such as 5.12.2, first read
perl5123delta, which describes differences between 5.12.2
and 5.12.3. The major changes made in 5.12.0 are described in perl5120delta.
.SH "Incompatible Changes"
.IX Header "Incompatible Changes"
There are no changes intentionally incompatible with 5.12.3. If any
exist, they are bugs and reports are welcome.
.SH "Selected Bug Fixes"
.IX Header "Selected Bug Fixes"
When strict \*(L"refs\*(R" mode is off, \f(CW\*(C`%{...}\*(C'\fR in rvalue context returns
\&\f(CW\*(C`undef\*(C'\fR if its argument is undefined.  An optimisation introduced in Perl
5.12.0 to make \f(CW\*(C`keys %{...}\*(C'\fR faster when used as a boolean did not take
this into account, causing \f(CW\*(C`keys %{+undef}\*(C'\fR (and \f(CW\*(C`keys %$foo\*(C'\fR when
\&\f(CW$foo\fR is undefined) to be an error, which it should be so in strict
mode only [perl #81750].
.PP
\&\f(CW\*(C`lc\*(C'\fR, \f(CW\*(C`uc\*(C'\fR, \f(CW\*(C`lcfirst\*(C'\fR, and \f(CW\*(C`ucfirst\*(C'\fR no longer return untainted strings
when the argument is tainted. This has been broken since perl 5.8.9
[perl #87336].
.PP
Fixed a case where it was possible that a freed buffer may have been read
from when parsing a here document.
.SH "Modules and Pragmata"
.IX Header "Modules and Pragmata"
Module::CoreList has been upgraded from version 2.43 to 2.50.
.SH "Testing"
.IX Header "Testing"
The \fIcpan/CGI/t/http.t\fR test script has been fixed to work when the
environment has HTTPS_* environment variables, such as \s-1HTTPS_PROXY\s0.
.SH "Documentation"
.IX Header "Documentation"
Updated the documentation for \fIrand()\fR in perlfunc to note that it is not
cryptographically secure.
.SH "Platform Specific Notes"
.IX Header "Platform Specific Notes"
.IP "Linux" 4
.IX Item "Linux"
Support Ubuntu 11.04's new multi-arch library layout.
.SH "Acknowledgements"
.IX Header "Acknowledgements"
Perl 5.12.4 represents approximately 5 months of development since
Perl 5.12.3 and contains approximately 200 lines of changes across
11 files from 8 authors.
.PP
Perl continues to flourish into its third decade thanks to a vibrant
community of users and developers.  The following people are known to
have contributed the improvements that became Perl 5.12.4:
.PP
Andy Dougherty, David Golden, David Leadbeater, Father Chrysostomos,
Florian Ragwitz, Jesse Vincent, Leon Brocard, Zsba\*'n Ambrus.
.SH "Reporting Bugs"
.IX Header "Reporting Bugs"
If you find what you think is a bug, you might check the articles
recently posted to the comp.lang.perl.misc newsgroup and the perl
bug database at http://rt.perl.org/perlbug/ .  There may also be
information at http://www.perl.org/ , the Perl Home Page.
.PP
If you believe you have an unreported bug, please run the \fBperlbug\fR
program included with your release.  Be sure to trim your bug down
to a tiny but sufficient test case.  Your bug report, along with the
output of \f(CW\*(C`perl \-V\*(C'\fR, will be sent off to perlbug@perl.org to be
analysed by the Perl porting team.
.PP
If the bug you are reporting has security implications, which make it
inappropriate to send to a publicly archived mailing list, then please send
it to perl5\-security\-report@perl.org. This points to a closed subscription
unarchived mailing list, which includes all the core committers, who be able
to help assess the impact of issues, figure out a resolution, and help
co-ordinate the release of patches to mitigate or fix the problem across all
platforms on which Perl is supported. Please only use this address for
security issues in the Perl core, not for modules independently
distributed on \s-1CPAN\s0.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
The \fIChanges\fR file for an explanation of how to view exhaustive details
on what changed.
.PP
The \fI\s-1INSTALL\s0\fR file for how to build Perl.
.PP
The \fI\s-1README\s0\fR file for general stuff.
.PP
The \fIArtistic\fR and \fICopying\fR files for copyright information.
                                                                                                                                                                                                                                         osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perl5124delta5.18.1                          0100644 0001750 0001750 00000017750 12566207432 023555  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERL5124DELTA 1"
.TH PERL5124DELTA 1 "2013-11-04" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perl5124delta \- what is new for perl v5.12.4
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document describes differences between the 5.12.3 release and
the 5.12.4 release.
.PP
If you are upgrading from an earlier release such as 5.12.2, first read
perl5123delta, which describes differences between 5.12.2
and 5.12.3. The major changes made in 5.12.0 are described in perl5120delta.
.SH "Incompatible Changes"
.IX Header "Incompatible Changes"
There are no changes intentionally incompatible with 5.12.3. If any
exist, they are bugs and reports are welcome.
.SH "Selected Bug Fixes"
.IX Header "Selected Bug Fixes"
When strict \*(L"refs\*(R" mode is off, \f(CW\*(C`%{...}\*(C'\fR in rvalue context returns
\&\f(CW\*(C`undef\*(C'\fR if its argument is undefined.  An optimisation introduced in Perl
5.12.0 to make \f(CW\*(C`keys %{...}\*(C'\fR faster when used as a boolean did not take
this into account, causing \f(CW\*(C`keys %{+undef}\*(C'\fR (and \f(CW\*(C`keys %$foo\*(C'\fR when
\&\f(CW$foo\fR is undefined) to be an error, which it should be so in strict
mode only [perl #81750].
.PP
\&\f(CW\*(C`lc\*(C'\fR, \f(CW\*(C`uc\*(C'\fR, \f(CW\*(C`lcfirst\*(C'\fR, and \f(CW\*(C`ucfirst\*(C'\fR no longer return untainted strings
when the argument is tainted. This has been broken since perl 5.8.9
[perl #87336].
.PP
Fixed a case where it was possible that a freed buffer may have been read
from when parsing a here document.
.SH "Modules and Pragmata"
.IX Header "Modules and Pragmata"
Module::CoreList has been upgraded from version 2.43 to 2.50.
.SH "Testing"
.IX Header "Testing"
The \fIcpan/CGI/t/http.t\fR test script has been fixed to work when the
environment has HTTPS_* environment variables, such as \s-1HTTPS_PROXY.\s0
.SH "Documentation"
.IX Header "Documentation"
Updated the documentation for \fIrand()\fR in perlfunc to note that it is not
cryptographically secure.
.SH "Platform Specific Notes"
.IX Header "Platform Specific Notes"
.IP "Linux" 4
.IX Item "Linux"
Support Ubuntu 11.04's new multi-arch library layout.
.SH "Acknowledgements"
.IX Header "Acknowledgements"
Perl 5.12.4 represents approximately 5 months of development since
Perl 5.12.3 and contains approximately 200 lines of changes across
11 files from 8 authors.
.PP
Perl continues to flourish into its third decade thanks to a vibrant
community of users and developers.  The following people are known to
have contributed the improvements that became Perl 5.12.4:
.PP
Andy Dougherty, David Golden, David Leadbeater, Father Chrysostomos,
Florian Ragwitz, Jesse Vincent, Leon Brocard, Zsba\*'n Ambrus.
.SH "Reporting Bugs"
.IX Header "Reporting Bugs"
If you find what you think is a bug, you might check the articles
recently posted to the comp.lang.perl.misc newsgroup and the perl
bug database at http://rt.perl.org/perlbug/ .  There may also be
information at http://www.perl.org/ , the Perl Home Page.
.PP
If you believe you have an unreported bug, please run the \fBperlbug\fR
program included with your release.  Be sure to trim your bug down
to a tiny but sufficient test case.  Your bug report, along with the
output of \f(CW\*(C`perl \-V\*(C'\fR, will be sent off to perlbug@perl.org to be
analysed by the Perl porting team.
.PP
If the bug you are reporting has security implications, which make it
inappropriate to send to a publicly archived mailing list, then please send
it to perl5\-security\-report@perl.org. This points to a closed subscription
unarchived mailing list, which includes all the core committers, who be able
to help assess the impact of issues, figure out a resolution, and help
co-ordinate the release of patches to mitigate or fix the problem across all
platforms on which Perl is supported. Please only use this address for
security issues in the Perl core, not for modules independently
distributed on \s-1CPAN.\s0
.SH "SEE ALSO"
.IX Header "SEE ALSO"
The \fIChanges\fR file for an explanation of how to view exhaustive details
on what changed.
.PP
The \fI\s-1INSTALL\s0\fR file for how to build Perl.
.PP
The \fI\s-1README\s0\fR file for general stuff.
.PP
The \fIArtistic\fR and \fICopying\fR files for copyright information.
                        osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perl5125delta.1                              0100644 0001750 0001750 00000032255 12566207432 023237  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERL5125DELTA 1"
.TH PERL5125DELTA 1 "2013-11-04" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perl5125delta \- what is new for perl v5.12.5
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document describes differences between the 5.12.4 release and
the 5.12.5 release.
.PP
If you are upgrading from an earlier release such as 5.12.3, first read
perl5124delta, which describes differences between 5.12.3 and
5.12.4.
.SH "Security"
.IX Header "Security"
.ie n .SS """Encode"" decode_xs n\-byte heap-overflow (\s-1CVE\-2011\-2939\s0)"
.el .SS "\f(CWEncode\fP decode_xs n\-byte heap-overflow (\s-1CVE\-2011\-2939\s0)"
.IX Subsection "Encode decode_xs n-byte heap-overflow (CVE-2011-2939)"
A bug in \f(CW\*(C`Encode\*(C'\fR could, on certain inputs, cause the heap to overflow.
This problem has been corrected.  Bug reported by Robert Zacek.
.ie n .SS """File::Glob::bsd_glob()"" memory error with \s-1GLOB_ALTDIRFUNC \s0(\s-1CVE\-2011\-2728\s0)."
.el .SS "\f(CWFile::Glob::bsd_glob()\fP memory error with \s-1GLOB_ALTDIRFUNC \s0(\s-1CVE\-2011\-2728\s0)."
.IX Subsection "File::Glob::bsd_glob() memory error with GLOB_ALTDIRFUNC (CVE-2011-2728)."
Calling \f(CW\*(C`File::Glob::bsd_glob\*(C'\fR with the unsupported flag \s-1GLOB_ALTDIRFUNC\s0 would 
cause an access violation / segfault.  A Perl program that accepts a flags value from
an external source could expose itself to denial of service or arbitrary code
execution attacks.  There are no known exploits in the wild.  The problem has been
corrected by explicitly disabling all unsupported flags and setting unused function
pointers to null.  Bug reported by Cle\*'ment Lecigne.
.SS "Heap buffer overrun in 'x' string repeat operator (\s-1CVE\-2012\-5195\s0)"
.IX Subsection "Heap buffer overrun in 'x' string repeat operator (CVE-2012-5195)"
Poorly written perl code that allows an attacker to specify the count to
perl's 'x' string repeat operator can already cause a memory exhaustion
denial-of-service attack. A flaw in versions of perl before 5.15.5 can
escalate that into a heap buffer overrun; coupled with versions of glibc
before 2.16, it possibly allows the execution of arbitrary code.
.PP
This problem has been fixed.
.SH "Incompatible Changes"
.IX Header "Incompatible Changes"
There are no changes intentionally incompatible with 5.12.4. If any
exist, they are bugs and reports are welcome.
.SH "Modules and Pragmata"
.IX Header "Modules and Pragmata"
.SS "Updated Modules"
.IX Subsection "Updated Modules"
\fIB::Concise\fR
.IX Subsection "B::Concise"
.PP
B::Concise no longer produces mangled output with the \fB\-tree\fR option
[perl #80632].
.PP
\fIcharnames\fR
.IX Subsection "charnames"
.PP
A regression introduced in Perl 5.8.8 has been fixed, that caused
\&\f(CWcharnames::viacode(0)\fR to return \f(CW\*(C`undef\*(C'\fR instead of the string \*(L"\s-1NULL\*(R"\s0
[perl #72624].
.PP
\fIEncode has been upgraded from version 2.39 to version 2.39_01.\fR
.IX Subsection "Encode has been upgraded from version 2.39 to version 2.39_01."
.PP
See \*(L"Security\*(R".
.PP
\fIFile::Glob has been upgraded from version 1.07 to version 1.07_01.\fR
.IX Subsection "File::Glob has been upgraded from version 1.07 to version 1.07_01."
.PP
See \*(L"Security\*(R".
.PP
\fIUnicode::UCD\fR
.IX Subsection "Unicode::UCD"
.PP
The documentation for the \f(CW\*(C`upper\*(C'\fR function now actually says \*(L"upper\*(R", not
\&\*(L"lower\*(R".
.PP
\fIModule::CoreList\fR
.IX Subsection "Module::CoreList"
.PP
Module::CoreList has been updated to version 2.50_02 to add data for
this release.
.SH "Changes to Existing Documentation"
.IX Header "Changes to Existing Documentation"
.SS "perlebcdic"
.IX Subsection "perlebcdic"
The perlebcdic document contains a helpful table to use in \f(CW\*(C`tr///\*(C'\fR to
convert between \s-1EBCDIC\s0 and Latin1/ASCII.  Unfortunately, the table was the
inverse of the one it describes.  This has been corrected.
.SS "perlunicode"
.IX Subsection "perlunicode"
The section on
User-Defined Case Mappings had
some bad markup and unclear sentences, making parts of it unreadable.  This
has been rectified.
.SS "perluniprops"
.IX Subsection "perluniprops"
This document has been corrected to take non-ASCII platforms into account.
.SH "Installation and Configuration Improvements"
.IX Header "Installation and Configuration Improvements"
.SS "Platform Specific Changes"
.IX Subsection "Platform Specific Changes"
.IP "Mac \s-1OS X\s0" 4
.IX Item "Mac OS X"
There have been configuration and test fixes to make Perl build cleanly on
Lion and Mountain Lion.
.IP "NetBSD" 4
.IX Item "NetBSD"
The NetBSD hints file was corrected to be compatible with NetBSD 6.*
.SH "Selected Bug Fixes"
.IX Header "Selected Bug Fixes"
.IP "\(bu" 4
\&\f(CW\*(C`chop\*(C'\fR now correctly handles characters above \*(L"\ex{7fffffff}\*(R"
[perl #73246].
.IP "\(bu" 4
\&\f(CW\*(C`($<,$>) = (...)\*(C'\fR stopped working properly in 5.12.0.  It is supposed
to make a single \f(CW\*(C`setreuid()\*(C'\fR call, rather than calling \f(CW\*(C`setruid()\*(C'\fR and
\&\f(CW\*(C`seteuid()\*(C'\fR separately.  Consequently it did not work properly.  This has
been fixed [perl #75212].
.IP "\(bu" 4
Fixed a regression of \fIkill()\fR when a match variable is used for the
process \s-1ID\s0 to kill [perl #75812].
.IP "\(bu" 4
\&\f(CW\*(C`UNIVERSAL::VERSION\*(C'\fR no longer leaks memory.  It started leaking in Perl
5.10.0.
.IP "\(bu" 4
The C\-level \f(CW\*(C`my_strftime\*(C'\fR functions no longer leaks memory.  This fixes a
memory leak in \f(CW\*(C`POSIX::strftime\*(C'\fR [perl #73520].
.IP "\(bu" 4
\&\f(CW\*(C`caller\*(C'\fR no longer leaks memory when called from the \s-1DB\s0 package if
\&\f(CW@DB::args\fR was assigned to after the first call to \f(CW\*(C`caller\*(C'\fR.  Carp
was triggering this bug [perl #97010].
.IP "\(bu" 4
Passing to \f(CW\*(C`index\*(C'\fR an offset beyond the end of the string when the string
is encoded internally in \s-1UTF8\s0 no longer causes panics [perl #75898].
.IP "\(bu" 4
Syntax errors in \f(CW\*(C`(?{...})\*(C'\fR blocks in regular expressions no longer
cause panic messages [perl #2353].
.IP "\(bu" 4
Perl 5.10.0 introduced some faulty logic that made \*(L"U*\*(R" in the middle of
a pack template equivalent to \*(L"U0\*(R" if the input string was empty.  This has
been fixed [perl #90160].
.SH "Errata"
.IX Header "Errata"
.ie n .SS "\fIsplit()\fP and @_"
.el .SS "\fIsplit()\fP and \f(CW@_\fP"
.IX Subsection "split() and @_"
\&\fIsplit()\fR no longer modifies \f(CW@_\fR when called in scalar or void context.
In void context it now produces a \*(L"Useless use of split\*(R" warning.
This is actually a change introduced in perl 5.12.0, but it was missed from
that release's perl5120delta.
.SH "Acknowledgements"
.IX Header "Acknowledgements"
Perl 5.12.5 represents approximately 17 months of development since Perl 5.12.4
and contains approximately 1,900 lines of changes across 64 files from 18
authors.
.PP
Perl continues to flourish into its third decade thanks to a vibrant community
of users and developers. The following people are known to have contributed the
improvements that became Perl 5.12.5:
.PP
Andy Dougherty, Chris 'BinGOs' Williams, Craig A. Berry, David Mitchell,
Dominic Hargreaves, Father Chrysostomos, Florian Ragwitz, George Greer, Goro
Fuji, Jesse Vincent, Karl Williamson, Leon Brocard, Nicholas Clark, Rafael
Garcia-Suarez, Reini Urban, Ricardo Signes, Steve Hay, Tony Cook.
.PP
The list above is almost certainly incomplete as it is automatically generated
from version control history. In particular, it does not include the names of
the (very much appreciated) contributors who reported issues to the Perl bug
tracker.
.PP
Many of the changes included in this version originated in the \s-1CPAN\s0 modules
included in Perl's core. We're grateful to the entire \s-1CPAN\s0 community for
helping Perl to flourish.
.PP
For a more complete list of all of Perl's historical contributors, please see
the \fI\s-1AUTHORS\s0\fR file in the Perl source distribution.
.SH "Reporting Bugs"
.IX Header "Reporting Bugs"
If you find what you think is a bug, you might check the articles
recently posted to the comp.lang.perl.misc newsgroup and the perl
bug database at http://rt.perl.org/perlbug/ .  There may also be
information at http://www.perl.org/ , the Perl Home Page.
.PP
If you believe you have an unreported bug, please run the \fBperlbug\fR
program included with your release.  Be sure to trim your bug down
to a tiny but sufficient test case.  Your bug report, along with the
output of \f(CW\*(C`perl \-V\*(C'\fR, will be sent off to perlbug@perl.org to be
analysed by the Perl porting team.
.PP
If the bug you are reporting has security implications, which make it
inappropriate to send to a publicly archived mailing list, then please send
it to perl5\-security\-report@perl.org. This points to a closed subscription
unarchived mailing list, which includes all the core committers, who be able
to help assess the impact of issues, figure out a resolution, and help
co-ordinate the release of patches to mitigate or fix the problem across all
platforms on which Perl is supported. Please only use this address for
security issues in the Perl core, not for modules independently
distributed on \s-1CPAN.\s0
.SH "SEE ALSO"
.IX Header "SEE ALSO"
The \fIChanges\fR file for an explanation of how to view exhaustive details
on what changed.
.PP
The \fI\s-1INSTALL\s0\fR file for how to build Perl.
.PP
The \fI\s-1README\s0\fR file for general stuff.
.PP
The \fIArtistic\fR and \fICopying\fR files for copyright information.
                                                                                                                                                                                                                                                                                                                                                   osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perl5125delta5.18.1                          0100644 0001750 0001750 00000032255 12566207432 023553  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERL5125DELTA 1"
.TH PERL5125DELTA 1 "2013-11-04" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perl5125delta \- what is new for perl v5.12.5
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document describes differences between the 5.12.4 release and
the 5.12.5 release.
.PP
If you are upgrading from an earlier release such as 5.12.3, first read
perl5124delta, which describes differences between 5.12.3 and
5.12.4.
.SH "Security"
.IX Header "Security"
.ie n .SS """Encode"" decode_xs n\-byte heap-overflow (\s-1CVE\-2011\-2939\s0)"
.el .SS "\f(CWEncode\fP decode_xs n\-byte heap-overflow (\s-1CVE\-2011\-2939\s0)"
.IX Subsection "Encode decode_xs n-byte heap-overflow (CVE-2011-2939)"
A bug in \f(CW\*(C`Encode\*(C'\fR could, on certain inputs, cause the heap to overflow.
This problem has been corrected.  Bug reported by Robert Zacek.
.ie n .SS """File::Glob::bsd_glob()"" memory error with \s-1GLOB_ALTDIRFUNC \s0(\s-1CVE\-2011\-2728\s0)."
.el .SS "\f(CWFile::Glob::bsd_glob()\fP memory error with \s-1GLOB_ALTDIRFUNC \s0(\s-1CVE\-2011\-2728\s0)."
.IX Subsection "File::Glob::bsd_glob() memory error with GLOB_ALTDIRFUNC (CVE-2011-2728)."
Calling \f(CW\*(C`File::Glob::bsd_glob\*(C'\fR with the unsupported flag \s-1GLOB_ALTDIRFUNC\s0 would 
cause an access violation / segfault.  A Perl program that accepts a flags value from
an external source could expose itself to denial of service or arbitrary code
execution attacks.  There are no known exploits in the wild.  The problem has been
corrected by explicitly disabling all unsupported flags and setting unused function
pointers to null.  Bug reported by Cle\*'ment Lecigne.
.SS "Heap buffer overrun in 'x' string repeat operator (\s-1CVE\-2012\-5195\s0)"
.IX Subsection "Heap buffer overrun in 'x' string repeat operator (CVE-2012-5195)"
Poorly written perl code that allows an attacker to specify the count to
perl's 'x' string repeat operator can already cause a memory exhaustion
denial-of-service attack. A flaw in versions of perl before 5.15.5 can
escalate that into a heap buffer overrun; coupled with versions of glibc
before 2.16, it possibly allows the execution of arbitrary code.
.PP
This problem has been fixed.
.SH "Incompatible Changes"
.IX Header "Incompatible Changes"
There are no changes intentionally incompatible with 5.12.4. If any
exist, they are bugs and reports are welcome.
.SH "Modules and Pragmata"
.IX Header "Modules and Pragmata"
.SS "Updated Modules"
.IX Subsection "Updated Modules"
\fIB::Concise\fR
.IX Subsection "B::Concise"
.PP
B::Concise no longer produces mangled output with the \fB\-tree\fR option
[perl #80632].
.PP
\fIcharnames\fR
.IX Subsection "charnames"
.PP
A regression introduced in Perl 5.8.8 has been fixed, that caused
\&\f(CWcharnames::viacode(0)\fR to return \f(CW\*(C`undef\*(C'\fR instead of the string \*(L"\s-1NULL\*(R"\s0
[perl #72624].
.PP
\fIEncode has been upgraded from version 2.39 to version 2.39_01.\fR
.IX Subsection "Encode has been upgraded from version 2.39 to version 2.39_01."
.PP
See \*(L"Security\*(R".
.PP
\fIFile::Glob has been upgraded from version 1.07 to version 1.07_01.\fR
.IX Subsection "File::Glob has been upgraded from version 1.07 to version 1.07_01."
.PP
See \*(L"Security\*(R".
.PP
\fIUnicode::UCD\fR
.IX Subsection "Unicode::UCD"
.PP
The documentation for the \f(CW\*(C`upper\*(C'\fR function now actually says \*(L"upper\*(R", not
\&\*(L"lower\*(R".
.PP
\fIModule::CoreList\fR
.IX Subsection "Module::CoreList"
.PP
Module::CoreList has been updated to version 2.50_02 to add data for
this release.
.SH "Changes to Existing Documentation"
.IX Header "Changes to Existing Documentation"
.SS "perlebcdic"
.IX Subsection "perlebcdic"
The perlebcdic document contains a helpful table to use in \f(CW\*(C`tr///\*(C'\fR to
convert between \s-1EBCDIC\s0 and Latin1/ASCII.  Unfortunately, the table was the
inverse of the one it describes.  This has been corrected.
.SS "perlunicode"
.IX Subsection "perlunicode"
The section on
User-Defined Case Mappings had
some bad markup and unclear sentences, making parts of it unreadable.  This
has been rectified.
.SS "perluniprops"
.IX Subsection "perluniprops"
This document has been corrected to take non-ASCII platforms into account.
.SH "Installation and Configuration Improvements"
.IX Header "Installation and Configuration Improvements"
.SS "Platform Specific Changes"
.IX Subsection "Platform Specific Changes"
.IP "Mac \s-1OS X\s0" 4
.IX Item "Mac OS X"
There have been configuration and test fixes to make Perl build cleanly on
Lion and Mountain Lion.
.IP "NetBSD" 4
.IX Item "NetBSD"
The NetBSD hints file was corrected to be compatible with NetBSD 6.*
.SH "Selected Bug Fixes"
.IX Header "Selected Bug Fixes"
.IP "\(bu" 4
\&\f(CW\*(C`chop\*(C'\fR now correctly handles characters above \*(L"\ex{7fffffff}\*(R"
[perl #73246].
.IP "\(bu" 4
\&\f(CW\*(C`($<,$>) = (...)\*(C'\fR stopped working properly in 5.12.0.  It is supposed
to make a single \f(CW\*(C`setreuid()\*(C'\fR call, rather than calling \f(CW\*(C`setruid()\*(C'\fR and
\&\f(CW\*(C`seteuid()\*(C'\fR separately.  Consequently it did not work properly.  This has
been fixed [perl #75212].
.IP "\(bu" 4
Fixed a regression of \fIkill()\fR when a match variable is used for the
process \s-1ID\s0 to kill [perl #75812].
.IP "\(bu" 4
\&\f(CW\*(C`UNIVERSAL::VERSION\*(C'\fR no longer leaks memory.  It started leaking in Perl
5.10.0.
.IP "\(bu" 4
The C\-level \f(CW\*(C`my_strftime\*(C'\fR functions no longer leaks memory.  This fixes a
memory leak in \f(CW\*(C`POSIX::strftime\*(C'\fR [perl #73520].
.IP "\(bu" 4
\&\f(CW\*(C`caller\*(C'\fR no longer leaks memory when called from the \s-1DB\s0 package if
\&\f(CW@DB::args\fR was assigned to after the first call to \f(CW\*(C`caller\*(C'\fR.  Carp
was triggering this bug [perl #97010].
.IP "\(bu" 4
Passing to \f(CW\*(C`index\*(C'\fR an offset beyond the end of the string when the string
is encoded internally in \s-1UTF8\s0 no longer causes panics [perl #75898].
.IP "\(bu" 4
Syntax errors in \f(CW\*(C`(?{...})\*(C'\fR blocks in regular expressions no longer
cause panic messages [perl #2353].
.IP "\(bu" 4
Perl 5.10.0 introduced some faulty logic that made \*(L"U*\*(R" in the middle of
a pack template equivalent to \*(L"U0\*(R" if the input string was empty.  This has
been fixed [perl #90160].
.SH "Errata"
.IX Header "Errata"
.ie n .SS "\fIsplit()\fP and @_"
.el .SS "\fIsplit()\fP and \f(CW@_\fP"
.IX Subsection "split() and @_"
\&\fIsplit()\fR no longer modifies \f(CW@_\fR when called in scalar or void context.
In void context it now produces a \*(L"Useless use of split\*(R" warning.
This is actually a change introduced in perl 5.12.0, but it was missed from
that release's perl5120delta.
.SH "Acknowledgements"
.IX Header "Acknowledgements"
Perl 5.12.5 represents approximately 17 months of development since Perl 5.12.4
and contains approximately 1,900 lines of changes across 64 files from 18
authors.
.PP
Perl continues to flourish into its third decade thanks to a vibrant community
of users and developers. The following people are known to have contributed the
improvements that became Perl 5.12.5:
.PP
Andy Dougherty, Chris 'BinGOs' Williams, Craig A. Berry, David Mitchell,
Dominic Hargreaves, Father Chrysostomos, Florian Ragwitz, George Greer, Goro
Fuji, Jesse Vincent, Karl Williamson, Leon Brocard, Nicholas Clark, Rafael
Garcia-Suarez, Reini Urban, Ricardo Signes, Steve Hay, Tony Cook.
.PP
The list above is almost certainly incomplete as it is automatically generated
from version control history. In particular, it does not include the names of
the (very much appreciated) contributors who reported issues to the Perl bug
tracker.
.PP
Many of the changes included in this version originated in the \s-1CPAN\s0 modules
included in Perl's core. We're grateful to the entire \s-1CPAN\s0 community for
helping Perl to flourish.
.PP
For a more complete list of all of Perl's historical contributors, please see
the \fI\s-1AUTHORS\s0\fR file in the Perl source distribution.
.SH "Reporting Bugs"
.IX Header "Reporting Bugs"
If you find what you think is a bug, you might check the articles
recently posted to the comp.lang.perl.misc newsgroup and the perl
bug database at http://rt.perl.org/perlbug/ .  There may also be
information at http://www.perl.org/ , the Perl Home Page.
.PP
If you believe you have an unreported bug, please run the \fBperlbug\fR
program included with your release.  Be sure to trim your bug down
to a tiny but sufficient test case.  Your bug report, along with the
output of \f(CW\*(C`perl \-V\*(C'\fR, will be sent off to perlbug@perl.org to be
analysed by the Perl porting team.
.PP
If the bug you are reporting has security implications, which make it
inappropriate to send to a publicly archived mailing list, then please send
it to perl5\-security\-report@perl.org. This points to a closed subscription
unarchived mailing list, which includes all the core committers, who be able
to help assess the impact of issues, figure out a resolution, and help
co-ordinate the release of patches to mitigate or fix the problem across all
platforms on which Perl is supported. Please only use this address for
security issues in the Perl core, not for modules independently
distributed on \s-1CPAN.\s0
.SH "SEE ALSO"
.IX Header "SEE ALSO"
The \fIChanges\fR file for an explanation of how to view exhaustive details
on what changed.
.PP
The \fI\s-1INSTALL\s0\fR file for how to build Perl.
.PP
The \fI\s-1README\s0\fR file for general stuff.
.PP
The \fIArtistic\fR and \fICopying\fR files for copyright information.
                                                                                                                                                                                                                                                                                                                                                   osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perl5140delta.1                              0100644 0001750 0001750 00000530636 12566207432 023242  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERL5140DELTA 1"
.TH PERL5140DELTA 1 "2013-11-04" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perl5140delta \- what is new for perl v5.14.0
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document describes differences between the 5.12.0 release and
the 5.14.0 release.
.PP
If you are upgrading from an earlier release such as 5.10.0, first read
perl5120delta, which describes differences between 5.10.0 and
5.12.0.
.PP
Some of the bug fixes in this release have been backported to subsequent
releases of 5.12.x.  Those are indicated with the 5.12.x version in
parentheses.
.SH "Notice"
.IX Header "Notice"
As described in perlpolicy, the release of Perl 5.14.0 marks the
official end of support for Perl 5.10.  Users of Perl 5.10 or earlier
should consider upgrading to a more recent release of Perl.
.SH "Core Enhancements"
.IX Header "Core Enhancements"
.SS "Unicode"
.IX Subsection "Unicode"
\fIUnicode Version 6.0 is now supported (mostly)\fR
.IX Subsection "Unicode Version 6.0 is now supported (mostly)"
.PP
Perl comes with the Unicode 6.0 data base updated with
Corrigendum #8 <http://www.unicode.org/versions/corrigendum8.html>,
with one exception noted below.
See <http://unicode.org/versions/Unicode6.0.0/> for details on the new
release.  Perl does not support any Unicode provisional properties,
including the new ones for this release.
.PP
Unicode 6.0 has chosen to use the name \f(CW\*(C`BELL\*(C'\fR for the character at U+1F514,
which is a symbol that looks like a bell, and is used in Japanese cell
phones.  This conflicts with the long-standing Perl usage of having
\&\f(CW\*(C`BELL\*(C'\fR mean the \s-1ASCII \s0\f(CW\*(C`BEL\*(C'\fR character, U+0007.  In Perl 5.14,
\&\f(CW\*(C`\eN{BELL}\*(C'\fR continues to mean U+0007, but its use generates a
deprecation warning message unless such warnings are turned off.  The
new name for U+0007 in Perl is \f(CW\*(C`ALERT\*(C'\fR, which corresponds nicely
with the existing shorthand sequence for it, \f(CW"\ea"\fR.  \f(CW\*(C`\eN{BEL}\*(C'\fR
means U+0007, with no warning given.  The character at U+1F514 has no
name in 5.14, but can be referred to by \f(CW\*(C`\eN{U+1F514}\*(C'\fR. 
In Perl 5.16, \f(CW\*(C`\eN{BELL}\*(C'\fR will refer to U+1F514; all code
that uses \f(CW\*(C`\eN{BELL}\*(C'\fR should be converted to use \f(CW\*(C`\eN{ALERT}\*(C'\fR,
\&\f(CW\*(C`\eN{BEL}\*(C'\fR, or \f(CW"\ea"\fR before upgrading.
.PP
\fIFull functionality for \f(CI\*(C`use feature \*(Aqunicode_strings\*(Aq\*(C'\fI\fR
.IX Subsection "Full functionality for use feature unicode_strings"
.PP
This release provides full functionality for \f(CW\*(C`use feature
\&\*(Aqunicode_strings\*(Aq\*(C'\fR.  Under its scope, all string operations executed and
regular expressions compiled (even if executed outside its scope) have
Unicode semantics.  See \*(L"the 'unicode_strings' feature\*(R" in feature.
However, see \*(L"Inverted bracketed character classes and multi-character folds\*(R",
below.
.PP
This feature avoids most forms of the \*(L"Unicode Bug\*(R" (see
\&\*(L"The \*(R"Unicode Bug"" in perlunicode for details).  If there is any
possibility that your code will process Unicode strings, you are
\&\fIstrongly\fR encouraged to use this subpragma to avoid nasty surprises.
.PP
\fI\f(CI\*(C`\eN{\f(CINAME\f(CI}\*(C'\fI and \f(CI\*(C`charnames\*(C'\fI enhancements\fR
.IX Subsection "N{NAME} and charnames enhancements"
.IP "\(bu" 4
\&\f(CW\*(C`\eN{\f(CINAME\f(CW}\*(C'\fR and \f(CW\*(C`charnames::vianame\*(C'\fR now know about the abbreviated
character names listed by Unicode, such as \s-1NBSP, SHY, LRO, ZWJ,\s0 etc.; all
customary abbreviations for the C0 and C1 control characters (such as
\&\s-1ACK, BEL, CAN,\s0 etc.); and a few new variants of some C1 full names that
are in common usage.
.IP "\(bu" 4
Unicode has several \fInamed character sequences\fR, in which particular sequences
of code points are given names.  \f(CW\*(C`\eN{\f(CINAME\f(CW}\*(C'\fR now recognizes these.
.IP "\(bu" 4
\&\f(CW\*(C`\eN{\f(CINAME\f(CW}\*(C'\fR, \f(CW\*(C`charnames::vianame\*(C'\fR, and \f(CW\*(C`charnames::viacode\*(C'\fR
now know about every character in Unicode.  In earlier releases of
Perl, they didn't know about the Hangul syllables nor several
\&\s-1CJK \s0(Chinese/Japanese/Korean) characters.
.IP "\(bu" 4
It is now possible to override Perl's abbreviations with your own custom aliases.
.IP "\(bu" 4
You can now create a custom alias of the ordinal of a
character, known by \f(CW\*(C`\eN{\f(CINAME\f(CW}\*(C'\fR, \f(CW\*(C`charnames::vianame()\*(C'\fR, and
\&\f(CW\*(C`charnames::viacode()\*(C'\fR.  Previously, aliases had to be to official
Unicode character names.  This made it impossible to create an alias for
unnamed code points, such as those reserved for private
use.
.IP "\(bu" 4
The new function \fIcharnames::string_vianame()\fR is a run-time version
of \f(CW\*(C`\eN{\f(CINAME\f(CW}}\*(C'\fR, returning the string of characters whose Unicode
name is its parameter.  It can handle Unicode named character
sequences, whereas the pre-existing \fIcharnames::vianame()\fR cannot,
as the latter returns a single code point.
.PP
See charnames for details on all these changes.
.PP
\fINew warnings categories for problematic (non\-)Unicode code points.\fR
.IX Subsection "New warnings categories for problematic (non-)Unicode code points."
.PP
Three new warnings subcategories of \*(L"utf8\*(R" have been added.  These
allow you to turn off some \*(L"utf8\*(R" warnings, while allowing
other warnings to remain on.  The three categories are:
\&\f(CW\*(C`surrogate\*(C'\fR when \s-1UTF\-16\s0 surrogates are encountered;
\&\f(CW\*(C`nonchar\*(C'\fR when Unicode non-character code points are encountered;
and \f(CW\*(C`non_unicode\*(C'\fR when code points above the legal Unicode
maximum of 0x10FFFF are encountered.
.PP
\fIAny unsigned value can be encoded as a character\fR
.IX Subsection "Any unsigned value can be encoded as a character"
.PP
With this release, Perl is adopting a model that any unsigned value
can be treated as a code point and encoded internally (as utf8)
without warnings, not just the code points that are legal in Unicode.
However, unless utf8 or the corresponding sub-category (see previous
item) of lexical warnings have been explicitly turned off, outputting
or executing a Unicode-defined operation such as upper-casing
on such a code point generates a warning.  Attempting to input these
using strict rules (such as with the \f(CW\*(C`:encoding(UTF\-8)\*(C'\fR layer)
will continue to fail.  Prior to this release, handling was
inconsistent and in places, incorrect.
.PP
Unicode non-characters, some of which previously were erroneously
considered illegal in places by Perl, contrary to the Unicode Standard,
are now always legal internally.  Inputting or outputting them 
works the same as with the non-legal Unicode code points, because the Unicode
Standard says they are (only) illegal for \*(L"open interchange\*(R".
.PP
\fIUnicode database files not installed\fR
.IX Subsection "Unicode database files not installed"
.PP
The Unicode database files are no longer installed with Perl.  This
doesn't affect any functionality in Perl and saves significant disk
space.  If you need these files, you can download them from
<http://www.unicode.org/Public/zipped/6.0.0/>.
.SS "Regular Expressions"
.IX Subsection "Regular Expressions"
\fI\f(CI\*(C`(?^...)\*(C'\fI construct signifies default modifiers\fR
.IX Subsection "(?^...) construct signifies default modifiers"
.PP
An \s-1ASCII\s0 caret \f(CW"^"\fR immediately following a \f(CW"(?"\fR in a regular
expression now means that the subexpression does not inherit surrounding
modifiers such as \f(CW\*(C`/i\*(C'\fR, but reverts to the Perl defaults.  Any modifiers
following the caret override the defaults.
.PP
Stringification of regular expressions now uses this notation.  
For example, \f(CW\*(C`qr/hlagh/i\*(C'\fR would previously be stringified as
\&\f(CW\*(C`(?i\-xsm:hlagh)\*(C'\fR, but now it's stringified as \f(CW\*(C`(?^i:hlagh)\*(C'\fR.
.PP
The main purpose of this change is to allow tests that rely on the
stringification \fInot\fR to have to change whenever new modifiers are added.
See \*(L"Extended Patterns\*(R" in perlre.
.PP
This change is likely to break code that compares stringified regular
expressions with fixed strings containing \f(CW\*(C`?\-xism\*(C'\fR.
.PP
\fI\f(CI\*(C`/d\*(C'\fI, \f(CI\*(C`/l\*(C'\fI, \f(CI\*(C`/u\*(C'\fI, and \f(CI\*(C`/a\*(C'\fI modifiers\fR
.IX Subsection "/d, /l, /u, and /a modifiers"
.PP
Four new regular expression modifiers have been added.  These are mutually
exclusive: one only can be turned on at a time.
.IP "\(bu" 4
The \f(CW\*(C`/l\*(C'\fR modifier says to compile the regular expression as if it were
in the scope of \f(CW\*(C`use locale\*(C'\fR, even if it is not.
.IP "\(bu" 4
The \f(CW\*(C`/u\*(C'\fR modifier says to compile the regular expression as if it were
in the scope of a \f(CW\*(C`use feature \*(Aqunicode_strings\*(Aq\*(C'\fR pragma.
.IP "\(bu" 4
The \f(CW\*(C`/d\*(C'\fR (default) modifier is used to override any \f(CW\*(C`use locale\*(C'\fR and
\&\f(CW\*(C`use feature \*(Aqunicode_strings\*(Aq\*(C'\fR pragmas in effect at the time
of compiling the regular expression.
.IP "\(bu" 4
The \f(CW\*(C`/a\*(C'\fR regular expression modifier restricts \f(CW\*(C`\es\*(C'\fR, \f(CW\*(C`\ed\*(C'\fR and \f(CW\*(C`\ew\*(C'\fR and
the \s-1POSIX \s0(\f(CW\*(C`[[:posix:]]\*(C'\fR) character classes to the \s-1ASCII\s0 range.  Their
complements and \f(CW\*(C`\eb\*(C'\fR and \f(CW\*(C`\eB\*(C'\fR are correspondingly
affected.  Otherwise, \f(CW\*(C`/a\*(C'\fR behaves like the \f(CW\*(C`/u\*(C'\fR modifier, in that
case-insensitive matching uses Unicode semantics.
.Sp
If the \f(CW\*(C`/a\*(C'\fR modifier is repeated, then additionally in case-insensitive
matching, no \s-1ASCII\s0 character can match a non-ASCII character.
For example,
.Sp
.Vb 2
\&    "k"     =~ /\eN{KELVIN SIGN}/ai
\&    "\exDF" =~ /ss/ai
.Ve
.Sp
match but
.Sp
.Vb 2
\&    "k"    =~ /\eN{KELVIN SIGN}/aai
\&    "\exDF" =~ /ss/aai
.Ve
.Sp
do not match.
.PP
See \*(L"Modifiers\*(R" in perlre for more detail.
.PP
\fINon-destructive substitution\fR
.IX Subsection "Non-destructive substitution"
.PP
The substitution (\f(CW\*(C`s///\*(C'\fR) and transliteration
(\f(CW\*(C`y///\*(C'\fR) operators now support an \f(CW\*(C`/r\*(C'\fR option that
copies the input variable, carries out the substitution on
the copy, and returns the result.  The original remains unmodified.
.PP
.Vb 3
\&  my $old = "cat";
\&  my $new = $old =~ s/cat/dog/r;
\&  # $old is "cat" and $new is "dog"
.Ve
.PP
This is particularly useful with \f(CW\*(C`map\*(C'\fR.  See perlop for more examples.
.PP
\fIRe-entrant regular expression engine\fR
.IX Subsection "Re-entrant regular expression engine"
.PP
It is now safe to use regular expressions within \f(CW\*(C`(?{...})\*(C'\fR and
\&\f(CW\*(C`(??{...})\*(C'\fR code blocks inside regular expressions.
.PP
These blocks are still experimental, however, and still have problems with
lexical (\f(CW\*(C`my\*(C'\fR) variables and abnormal exiting.
.PP
\fI\f(CI\*(C`use re \*(Aq/flags\*(Aq\*(C'\fI\fR
.IX Subsection "use re /flags"
.PP
The \f(CW\*(C`re\*(C'\fR pragma now has the ability to turn on regular expression flags
till the end of the lexical scope:
.PP
.Vb 2
\&    use re "/x";
\&    "foo" =~ / (.+) /;  # /x implied
.Ve
.PP
See \*(L"'/flags' mode\*(R" in re for details.
.PP
\fI\eo{...} for octals\fR
.IX Subsection "o{...} for octals"
.PP
There is a new octal escape sequence, \f(CW"\eo"\fR, in doublequote-like
contexts.  This construct allows large octal ordinals beyond the
current max of 0777 to be represented.  It also allows you to specify a
character in octal which can safely be concatenated with other regex
snippets and which won't be confused with being a backreference to
a regex capture group.  See \*(L"Capture groups\*(R" in perlre.
.PP
\fIAdd \f(CI\*(C`\ep{Titlecase}\*(C'\fI as a synonym for \f(CI\*(C`\ep{Title}\*(C'\fI\fR
.IX Subsection "Add p{Titlecase} as a synonym for p{Title}"
.PP
This synonym is added for symmetry with the Unicode property names
\&\f(CW\*(C`\ep{Uppercase}\*(C'\fR and \f(CW\*(C`\ep{Lowercase}\*(C'\fR.
.PP
\fIRegular expression debugging output improvement\fR
.IX Subsection "Regular expression debugging output improvement"
.PP
Regular expression debugging output (turned on by \f(CW\*(C`use re \*(Aqdebug\*(Aq\*(C'\fR) now
uses hexadecimal when escaping non-ASCII characters, instead of octal.
.PP
\fIReturn value of \f(CI\*(C`delete $+{...}\*(C'\fI\fR
.IX Subsection "Return value of delete $+{...}"
.PP
Custom regular expression engines can now determine the return value of
\&\f(CW\*(C`delete\*(C'\fR on an entry of \f(CW\*(C`%+\*(C'\fR or \f(CW\*(C`%\-\*(C'\fR.
.SS "Syntactical Enhancements"
.IX Subsection "Syntactical Enhancements"
\fIArray and hash container functions accept references\fR
.IX Subsection "Array and hash container functions accept references"
.PP
\&\fBWarning:\fR This feature is considered experimental, as the exact behaviour
may change in a future version of Perl.
.PP
All builtin functions that operate directly on array or hash
containers now also accept unblessed hard references to arrays
or hashes:
.PP
.Vb 10
\&  |\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-|
\&  | Traditional syntax         | Terse syntax              |
\&  |\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-|
\&  | push @$arrayref, @stuff    | push $arrayref, @stuff    |
\&  | unshift @$arrayref, @stuff | unshift $arrayref, @stuff |
\&  | pop @$arrayref             | pop $arrayref             |
\&  | shift @$arrayref           | shift $arrayref           |
\&  | splice @$arrayref, 0, 2    | splice $arrayref, 0, 2    |
\&  | keys %$hashref             | keys $hashref             |
\&  | keys @$arrayref            | keys $arrayref            |
\&  | values %$hashref           | values $hashref           |
\&  | values @$arrayref          | values $arrayref          |
\&  | ($k,$v) = each %$hashref   | ($k,$v) = each $hashref   |
\&  | ($k,$v) = each @$arrayref  | ($k,$v) = each $arrayref  |
\&  |\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-|
.Ve
.PP
This allows these builtin functions to act on long dereferencing chains
or on the return value of subroutines without needing to wrap them in
\&\f(CW\*(C`@{}\*(C'\fR or \f(CW\*(C`%{}\*(C'\fR:
.PP
.Vb 2
\&  push @{$obj\->tags}, $new_tag;  # old way
\&  push $obj\->tags,    $new_tag;  # new way
\&
\&  for ( keys %{$hoh\->{genres}{artists}} ) {...} # old way 
\&  for ( keys $hoh\->{genres}{artists}    ) {...} # new way
.Ve
.PP
\fISingle term prototype\fR
.IX Subsection "Single term prototype"
.PP
The \f(CW\*(C`+\*(C'\fR prototype is a special alternative to \f(CW\*(C`$\*(C'\fR that acts like
\&\f(CW\*(C`\e[@%]\*(C'\fR when given a literal array or hash variable, but will otherwise
force scalar context on the argument.  See \*(L"Prototypes\*(R" in perlsub.
.PP
\fI\f(CI\*(C`package\*(C'\fI block syntax\fR
.IX Subsection "package block syntax"
.PP
A package declaration can now contain a code block, in which case the
declaration is in scope inside that block only.  So \f(CW\*(C`package Foo { ... }\*(C'\fR
is precisely equivalent to \f(CW\*(C`{ package Foo; ... }\*(C'\fR.  It also works with
a version number in the declaration, as in \f(CW\*(C`package Foo 1.2 { ... }\*(C'\fR, 
which is its most attractive feature.  See perlfunc.
.PP
\fIStatement labels can appear in more places\fR
.IX Subsection "Statement labels can appear in more places"
.PP
Statement labels can now occur before any type of statement or declaration,
such as \f(CW\*(C`package\*(C'\fR.
.PP
\fIStacked labels\fR
.IX Subsection "Stacked labels"
.PP
Multiple statement labels can now appear before a single statement.
.PP
\fIUppercase X/B allowed in hexadecimal/binary literals\fR
.IX Subsection "Uppercase X/B allowed in hexadecimal/binary literals"
.PP
Literals may now use either upper case \f(CW\*(C`0X...\*(C'\fR or \f(CW\*(C`0B...\*(C'\fR prefixes,
in addition to the already supported \f(CW\*(C`0x...\*(C'\fR and \f(CW\*(C`0b...\*(C'\fR
syntax [perl #76296].
.PP
C, Ruby, Python, and \s-1PHP\s0 already support this syntax, and it makes
Perl more internally consistent: a round-trip with \f(CW\*(C`eval sprintf
"%#X", 0x10\*(C'\fR now returns \f(CW16\fR, just like \f(CW\*(C`eval sprintf "%#x", 0x10\*(C'\fR.
.PP
\fIOverridable tie functions\fR
.IX Subsection "Overridable tie functions"
.PP
\&\f(CW\*(C`tie\*(C'\fR, \f(CW\*(C`tied\*(C'\fR and \f(CW\*(C`untie\*(C'\fR can now be overridden [perl #75902].
.SS "Exception Handling"
.IX Subsection "Exception Handling"
To make them more reliable and consistent, several changes have been made
to how \f(CW\*(C`die\*(C'\fR, \f(CW\*(C`warn\*(C'\fR, and \f(CW$@\fR behave.
.IP "\(bu" 4
When an exception is thrown inside an \f(CW\*(C`eval\*(C'\fR, the exception is no
longer at risk of being clobbered by destructor code running during unwinding.
Previously, the exception was written into \f(CW$@\fR
early in the throwing process, and would be overwritten if \f(CW\*(C`eval\*(C'\fR was
used internally in the destructor for an object that had to be freed
while exiting from the outer \f(CW\*(C`eval\*(C'\fR.  Now the exception is written
into \f(CW$@\fR last thing before exiting the outer \f(CW\*(C`eval\*(C'\fR, so the code
running immediately thereafter can rely on the value in \f(CW$@\fR correctly
corresponding to that \f(CW\*(C`eval\*(C'\fR.  (\f(CW$@\fR is still also set before exiting the
\&\f(CW\*(C`eval\*(C'\fR, for the sake of destructors that rely on this.)
.Sp
Likewise, a \f(CW\*(C`local $@\*(C'\fR inside an \f(CW\*(C`eval\*(C'\fR no longer clobbers any
exception thrown in its scope.  Previously, the restoration of \f(CW$@\fR upon
unwinding would overwrite any exception being thrown.  Now the exception
gets to the \f(CW\*(C`eval\*(C'\fR anyway.  So \f(CW\*(C`local $@\*(C'\fR is safe before a \f(CW\*(C`die\*(C'\fR.
.Sp
Exceptions thrown from object destructors no longer modify the \f(CW$@\fR
of the surrounding context.  (If the surrounding context was exception
unwinding, this used to be another way to clobber the exception being
thrown.)  Previously such an exception was
sometimes emitted as a warning, and then either was
string-appended to the surrounding \f(CW$@\fR or completely replaced the
surrounding \f(CW$@\fR, depending on whether that exception and the surrounding
\&\f(CW$@\fR were strings or objects.  Now, an exception in this situation is
always emitted as a warning, leaving the surrounding \f(CW$@\fR untouched.
In addition to object destructors, this also affects any function call
run by \s-1XS\s0 code using the \f(CW\*(C`G_KEEPERR\*(C'\fR flag.
.IP "\(bu" 4
Warnings for \f(CW\*(C`warn\*(C'\fR can now be objects in the same way as exceptions
for \f(CW\*(C`die\*(C'\fR.  If an object-based warning gets the default handling
of writing to standard error, it is stringified as before with the
filename and line number appended.  But a \f(CW$SIG{_\|_WARN_\|_}\fR handler now
receives an object-based warning as an object, where previously it
was passed the result of stringifying the object.
.SS "Other Enhancements"
.IX Subsection "Other Enhancements"
\fIAssignment to \f(CI$0\fI sets the legacy process name with \fIprctl()\fI on Linux\fR
.IX Subsection "Assignment to $0 sets the legacy process name with prctl() on Linux"
.PP
On Linux the legacy process name is now set with \fIprctl\fR\|(2), in
addition to altering the \s-1POSIX\s0 name via \f(CW\*(C`argv[0]\*(C'\fR, as Perl has done
since version 4.000.  Now system utilities that read the legacy process
name such as \fIps\fR, \fItop\fR, and \fIkillall\fR recognize the name you set when
assigning to \f(CW$0\fR.  The string you supply is truncated at 16 bytes;
this limitation is imposed by Linux.
.PP
\fI\fIsrand()\fI now returns the seed\fR
.IX Subsection "srand() now returns the seed"
.PP
This allows programs that need to have repeatable results not to have to come
up with their own seed-generating mechanism.  Instead, they can use \fIsrand()\fR
and stash the return value for future use.  One example is a test program with
too many combinations to test comprehensively in the time available for
each run.  It can test a random subset each time and, should there be a failure,
log the seed used for that run so this can later be used to produce the same results.
.PP
\fIprintf-like functions understand post\-1980 size modifiers\fR
.IX Subsection "printf-like functions understand post-1980 size modifiers"
.PP
Perl's printf and sprintf operators, and Perl's internal printf replacement
function, now understand the C90 size modifiers \*(L"hh\*(R" (\f(CW\*(C`char\*(C'\fR), \*(L"z\*(R"
(\f(CW\*(C`size_t\*(C'\fR), and \*(L"t\*(R" (\f(CW\*(C`ptrdiff_t\*(C'\fR).  Also, when compiled with a C99
compiler, Perl now understands the size modifier \*(L"j\*(R" (\f(CW\*(C`intmax_t\*(C'\fR) 
(but this is not portable).
.PP
So, for example, on any modern machine, \f(CW\*(C`sprintf("%hhd", 257)\*(C'\fR returns \*(L"1\*(R".
.PP
\fINew global variable \f(CI\*(C`${^GLOBAL_PHASE}\*(C'\fI\fR
.IX Subsection "New global variable ${^GLOBAL_PHASE}"
.PP
A new global variable, \f(CW\*(C`${^GLOBAL_PHASE}\*(C'\fR, has been added to allow
introspection of the current phase of the Perl interpreter.  It's explained in
detail in \*(L"${^GLOBAL_PHASE}\*(R" in perlvar and in
\&\*(L"\s-1BEGIN, UNITCHECK, CHECK, INIT\s0 and \s-1END\*(R"\s0 in perlmod.
.PP
\fI\f(CI\*(C`\-d:\-foo\*(C'\fI calls \f(CI\*(C`Devel::foo::unimport\*(C'\fI\fR
.IX Subsection "-d:-foo calls Devel::foo::unimport"
.PP
The syntax \fB\-d:foo\fR was extended in 5.6.1 to make \fB\-d:foo=bar\fR
equivalent to \fB\-MDevel::foo=bar\fR, which expands
internally to \f(CW\*(C`use Devel::foo \*(Aqbar\*(Aq\*(C'\fR.
Perl now allows prefixing the module name with \fB\-\fR, with the same
semantics as \fB\-M\fR; that is:
.ie n .IP """\-d:\-foo""" 4
.el .IP "\f(CW\-d:\-foo\fR" 4
.IX Item "-d:-foo"
Equivalent to \fB\-M\-Devel::foo\fR: expands to
\&\f(CW\*(C`no Devel::foo\*(C'\fR and calls \f(CW\*(C`Devel::foo\->unimport()\*(C'\fR
if that method exists.
.ie n .IP """\-d:\-foo=bar""" 4
.el .IP "\f(CW\-d:\-foo=bar\fR" 4
.IX Item "-d:-foo=bar"
Equivalent to \fB\-M\-Devel::foo=bar\fR: expands to \f(CW\*(C`no Devel::foo \*(Aqbar\*(Aq\*(C'\fR,
and calls \f(CW\*(C`Devel::foo\->unimport("bar")\*(C'\fR if that method exists.
.PP
This is particularly useful for suppressing the default actions of a
\&\f(CW\*(C`Devel::*\*(C'\fR module's \f(CW\*(C`import\*(C'\fR method whilst still loading it for debugging.
.PP
\fIFilehandle method calls load IO::File on demand\fR
.IX Subsection "Filehandle method calls load IO::File on demand"
.PP
When a method call on a filehandle would die because the method cannot
be resolved and IO::File has not been loaded, Perl now loads IO::File
via \f(CW\*(C`require\*(C'\fR and attempts method resolution again:
.PP
.Vb 2
\&  open my $fh, ">", $file;
\&  $fh\->binmode(":raw");     # loads IO::File and succeeds
.Ve
.PP
This also works for globs like \f(CW\*(C`STDOUT\*(C'\fR, \f(CW\*(C`STDERR\*(C'\fR, and \f(CW\*(C`STDIN\*(C'\fR:
.PP
.Vb 1
\&  STDOUT\->autoflush(1);
.Ve
.PP
Because this on-demand load happens only if method resolution fails, the
legacy approach of manually loading an IO::File parent class for partial
method support still works as expected:
.PP
.Vb 3
\&  use IO::Handle;
\&  open my $fh, ">", $file;
\&  $fh\->autoflush(1);        # IO::File not loaded
.Ve
.PP
\fIImproved IPv6 support\fR
.IX Subsection "Improved IPv6 support"
.PP
The \f(CW\*(C`Socket\*(C'\fR module provides new affordances for IPv6,
including implementations of the \f(CW\*(C`Socket::getaddrinfo()\*(C'\fR and
\&\f(CW\*(C`Socket::getnameinfo()\*(C'\fR functions, along with related constants and a
handful of new functions.  See Socket.
.PP
\fIDTrace probes now include package name\fR
.IX Subsection "DTrace probes now include package name"
.PP
The \f(CW\*(C`DTrace\*(C'\fR probes now include an additional argument, \f(CW\*(C`arg3\*(C'\fR, which contains
the package the subroutine being entered or left was compiled in.
.PP
For example, using the following DTrace script:
.PP
.Vb 4
\&  perl$target:::sub\-entry
\&  {
\&      printf("%s::%s\en", copyinstr(arg0), copyinstr(arg3));
\&  }
.Ve
.PP
and then running:
.PP
.Vb 1
\&  $ perl \-e \*(Aqsub test { }; test\*(Aq
.Ve
.PP
\&\f(CW\*(C`DTrace\*(C'\fR will print:
.PP
.Vb 1
\&  main::test
.Ve
.SS "New C APIs"
.IX Subsection "New C APIs"
See \*(L"Internal Changes\*(R".
.SH "Security"
.IX Header "Security"
.SS "User-defined regular expression properties"
.IX Subsection "User-defined regular expression properties"
\&\*(L"User-Defined Character Properties\*(R" in perlunicode documented that you can
create custom properties by defining subroutines whose names begin with
\&\*(L"In\*(R" or \*(L"Is\*(R".  However, Perl did not actually enforce that naming
restriction, so \f(CW\*(C`\ep{foo::bar}\*(C'\fR could call \fIfoo::bar()\fR if it existed.  The documented
convention is now enforced.
.PP
Also, Perl no longer allows tainted regular expressions to invoke a
user-defined property.  It simply dies instead [perl #82616].
.SH "Incompatible Changes"
.IX Header "Incompatible Changes"
Perl 5.14.0 is not binary-compatible with any previous stable release.
.PP
In addition to the sections that follow, see \*(L"C \s-1API\s0 Changes\*(R".
.SS "Regular Expressions and String Escapes"
.IX Subsection "Regular Expressions and String Escapes"
\fIInverted bracketed character classes and multi-character folds\fR
.IX Subsection "Inverted bracketed character classes and multi-character folds"
.PP
Some characters match a sequence of two or three characters in \f(CW\*(C`/i\*(C'\fR
regular expression matching under Unicode rules.  One example is
\&\f(CW\*(C`LATIN SMALL LETTER SHARP S\*(C'\fR which matches the sequence \f(CW\*(C`ss\*(C'\fR.
.PP
.Vb 1
\& \*(Aqss\*(Aq =~ /\eA[\eN{LATIN SMALL LETTER SHARP S}]\ez/i  # Matches
.Ve
.PP
This, however, can lead to very counter-intuitive results, especially
when inverted.  Because of this, Perl 5.14 does not use multi-character \f(CW\*(C`/i\*(C'\fR
matching in inverted character classes.
.PP
.Vb 1
\& \*(Aqss\*(Aq =~ /\eA[^\eN{LATIN SMALL LETTER SHARP S}]+\ez/i  # ???
.Ve
.PP
This should match any sequences of characters that aren't the \f(CW\*(C`SHARP S\*(C'\fR
nor what \f(CW\*(C`SHARP S\*(C'\fR matches under \f(CW\*(C`/i\*(C'\fR.  \f(CW"s"\fR isn't \f(CW\*(C`SHARP S\*(C'\fR, but
Unicode says that \f(CW"ss"\fR is what \f(CW\*(C`SHARP S\*(C'\fR matches under \f(CW\*(C`/i\*(C'\fR.  So
which one \*(L"wins\*(R"? Do you fail the match because the string has \f(CW\*(C`ss\*(C'\fR or
accept it because it has an \f(CW\*(C`s\*(C'\fR followed by another \f(CW\*(C`s\*(C'\fR?
.PP
Earlier releases of Perl did allow this multi-character matching,
but due to bugs, it mostly did not work.
.PP
\fI\e400\-\e777\fR
.IX Subsection "400-777"
.PP
In certain circumstances, \f(CW\*(C`\e400\*(C'\fR\-\f(CW\*(C`\e777\*(C'\fR in regexes have behaved
differently than they behave in all other doublequote-like contexts.
Since 5.10.1, Perl has issued a deprecation warning when this happens.
Now, these literals behave the same in all doublequote-like contexts,
namely to be equivalent to \f(CW\*(C`\ex{100}\*(C'\fR\-\f(CW\*(C`\ex{1FF}\*(C'\fR, with no deprecation
warning.
.PP
Use of \f(CW\*(C`\e400\*(C'\fR\-\f(CW\*(C`\e777\*(C'\fR in the command-line option \fB\-0\fR retain their
conventional meaning.  They slurp whole input files; previously, this
was documented only for \fB\-0777\fR.
.PP
Because of various ambiguities, you should use the new
\&\f(CW\*(C`\eo{...}\*(C'\fR construct to represent characters in octal instead.
.PP
\fIMost \f(CI\*(C`\ep{}\*(C'\fI properties are now immune to case-insensitive matching\fR
.IX Subsection "Most p{} properties are now immune to case-insensitive matching"
.PP
For most Unicode properties, it doesn't make sense to have them match
differently under \f(CW\*(C`/i\*(C'\fR case-insensitive matching.  Doing so can lead
to unexpected results and potential security holes.  For example
.PP
.Vb 1
\& m/\ep{ASCII_Hex_Digit}+/i
.Ve
.PP
could previously match non-ASCII characters because of the Unicode
matching rules (although there were several bugs with this).  Now
matching under \f(CW\*(C`/i\*(C'\fR gives the same results as non\-\f(CW\*(C`/i\*(C'\fR matching except
for those few properties where people have come to expect differences,
namely the ones where casing is an integral part of their meaning, such
as \f(CW\*(C`m/\ep{Uppercase}/i\*(C'\fR and \f(CW\*(C`m/\ep{Lowercase}/i\*(C'\fR, both of which match
the same code points as matched by \f(CW\*(C`m/\ep{Cased}/i\*(C'\fR.
Details are in \*(L"Unicode Properties\*(R" in perlrecharclass.
.PP
User-defined property handlers that need to match differently under \f(CW\*(C`/i\*(C'\fR
must be changed to read the new boolean parameter passed to them, which
is non-zero if case-insensitive matching is in effect and 0 otherwise.
See \*(L"User-Defined Character Properties\*(R" in perlunicode.
.PP
\fI\ep{} implies Unicode semantics\fR
.IX Subsection "p{} implies Unicode semantics"
.PP
Specifying a Unicode property in the pattern indicates
that the pattern is meant for matching according to Unicode rules, the way
\&\f(CW\*(C`\eN{\f(CINAME\f(CW}\*(C'\fR does.
.PP
\fIRegular expressions retain their localeness when interpolated\fR
.IX Subsection "Regular expressions retain their localeness when interpolated"
.PP
Regular expressions compiled under \f(CW\*(C`use locale\*(C'\fR now retain this when
interpolated into a new regular expression compiled outside a
\&\f(CW\*(C`use locale\*(C'\fR, and vice-versa.
.PP
Previously, one regular expression interpolated into another inherited
the localeness of the surrounding regex, losing whatever state it
originally had.  This is considered a bug fix, but may trip up code that
has come to rely on the incorrect behaviour.
.PP
\fIStringification of regexes has changed\fR
.IX Subsection "Stringification of regexes has changed"
.PP
Default regular expression modifiers are now notated using
\&\f(CW\*(C`(?^...)\*(C'\fR.  Code relying on the old stringification will fail.  
This is so that when new modifiers are added, such code won't
have to keep changing each time this happens, because the stringification 
will automatically incorporate the new modifiers.
.PP
Code that needs to work properly with both old\- and new-style regexes
can avoid the whole issue by using (for perls since 5.9.5; see re):
.PP
.Vb 2
\& use re qw(regexp_pattern);
\& my ($pat, $mods) = regexp_pattern($re_ref);
.Ve
.PP
If the actual stringification is important or older Perls need to be
supported, you can use something like the following:
.PP
.Vb 2
\&    # Accept both old and new\-style stringification
\&    my $modifiers = (qr/foobar/ =~ /\eQ(?^/) ? "^" : "\-xism";
.Ve
.PP
And then use \f(CW$modifiers\fR instead of \f(CW\*(C`\-xism\*(C'\fR.
.PP
\fIRun-time code blocks in regular expressions inherit pragmata\fR
.IX Subsection "Run-time code blocks in regular expressions inherit pragmata"
.PP
Code blocks in regular expressions (\f(CW\*(C`(?{...})\*(C'\fR and \f(CW\*(C`(??{...})\*(C'\fR) previously
did not inherit pragmata (strict, warnings, etc.) if the regular expression
was compiled at run time as happens in cases like these two:
.PP
.Vb 3
\&  use re "eval";
\&  $foo =~ $bar; # when $bar contains (?{...})
\&  $foo =~ /$bar(?{ $finished = 1 })/;
.Ve
.PP
This bug has now been fixed, but code that relied on the buggy behaviour
may need to be fixed to account for the correct behaviour.
.SS "Stashes and Package Variables"
.IX Subsection "Stashes and Package Variables"
\fILocalised tied hashes and arrays are no longed tied\fR
.IX Subsection "Localised tied hashes and arrays are no longed tied"
.PP
In the following:
.PP
.Vb 6
\&    tie @a, ...;
\&    {
\&            local @a;
\&            # here, @a is a now a new, untied array
\&    }
\&    # here, @a refers again to the old, tied array
.Ve
.PP
Earlier versions of Perl incorrectly tied the new local array.  This has
now been fixed.  This fix could however potentially cause a change in
behaviour of some code.
.PP
\fIStashes are now always defined\fR
.IX Subsection "Stashes are now always defined"
.PP
\&\f(CW\*(C`defined %Foo::\*(C'\fR now always returns true, even when no symbols have yet been
defined in that package.
.PP
This is a side-effect of removing a special-case kludge in the tokeniser,
added for 5.10.0, to hide side-effects of changes to the internal storage of
hashes.  The fix drastically reduces hashes' memory overhead.
.PP
Calling defined on a stash has been deprecated since 5.6.0, warned on
lexicals since 5.6.0, and warned for stashes and other package
variables since 5.12.0.  \f(CW\*(C`defined %hash\*(C'\fR has always exposed an
implementation detail: emptying a hash by deleting all entries from it does
not make \f(CW\*(C`defined %hash\*(C'\fR false.  Hence \f(CW\*(C`defined %hash\*(C'\fR is not valid code to
determine whether an arbitrary hash is empty.  Instead, use the behaviour
of an empty \f(CW%hash\fR always returning false in scalar context.
.PP
\fIClearing stashes\fR
.IX Subsection "Clearing stashes"
.PP
Stash list assignment \f(CW\*(C`%foo:: = ()\*(C'\fR used to make the stash temporarily 
anonymous while it was being emptied.  Consequently, any of its
subroutines referenced elsewhere would become anonymous,  showing up as
\&\*(L"(unknown)\*(R" in \f(CW\*(C`caller\*(C'\fR.  They now retain their package names such that
\&\f(CW\*(C`caller\*(C'\fR returns the original sub name if there is still a reference
to its typeglob and \*(L"foo::_\|_ANON_\|_\*(R" otherwise [perl #79208].
.PP
\fIDereferencing typeglobs\fR
.IX Subsection "Dereferencing typeglobs"
.PP
If you assign a typeglob to a scalar variable:
.PP
.Vb 1
\&    $glob = *foo;
.Ve
.PP
the glob that is copied to \f(CW$glob\fR is marked with a special flag
indicating that the glob is just a copy.  This allows subsequent
assignments to \f(CW$glob\fR to overwrite the glob.  The original glob,
however, is immutable.
.PP
Some Perl operators did not distinguish between these two types of globs.
This would result in strange behaviour in edge cases: \f(CW\*(C`untie $scalar\*(C'\fR
would not untie the scalar if the last thing assigned to it was a glob
(because it treated it as \f(CW\*(C`untie *$scalar\*(C'\fR, which unties a handle).
Assignment to a glob slot (such as \f(CW\*(C`*$glob = \e@some_array\*(C'\fR) would simply
assign \f(CW\*(C`\e@some_array\*(C'\fR to \f(CW$glob\fR.
.PP
To fix this, the \f(CW\*(C`*{}\*(C'\fR operator (including its \f(CW*foo\fR and \f(CW*$foo\fR forms)
has been modified to make a new immutable glob if its operand is a glob
copy.  This allows operators that make a distinction between globs and
scalars to be modified to treat only immutable globs as globs.  (\f(CW\*(C`tie\*(C'\fR,
\&\f(CW\*(C`tied\*(C'\fR and \f(CW\*(C`untie\*(C'\fR have been left as they are for compatibility's sake,
but will warn.  See \*(L"Deprecations\*(R".)
.PP
This causes an incompatible change in code that assigns a glob to the
return value of \f(CW\*(C`*{}\*(C'\fR when that operator was passed a glob copy.  Take the
following code, for instance:
.PP
.Vb 2
\&    $glob = *foo;
\&    *$glob = *bar;
.Ve
.PP
The \f(CW*$glob\fR on the second line returns a new immutable glob.  That new
glob is made an alias to \f(CW*bar\fR.  Then it is discarded.  So the second
assignment has no effect.
.PP
See <http://rt.perl.org/rt3/Public/Bug/Display.html?id=77810> for
more detail.
.PP
\fIMagic variables outside the main package\fR
.IX Subsection "Magic variables outside the main package"
.PP
In previous versions of Perl, magic variables like \f(CW$!\fR, \f(CW%SIG\fR, etc. would
\&\*(L"leak\*(R" into other packages.  So \f(CW%foo::SIG\fR could be used to access signals,
\&\f(CW\*(C`${"foo::!"}\*(C'\fR (with strict mode off) to access C's \f(CW\*(C`errno\*(C'\fR, etc.
.PP
This was a bug, or an \*(L"unintentional\*(R" feature, which caused various ill effects,
such as signal handlers being wiped when modules were loaded, etc.
.PP
This has been fixed (or the feature has been removed, depending on how you see
it).
.PP
\fIlocal($_) strips all magic from \f(CI$_\fI\fR
.IX Subsection "local($_) strips all magic from $_"
.PP
\&\fIlocal()\fR on scalar variables gives them a new value but keeps all
their magic intact.  This has proven problematic for the default
scalar variable \f(CW$_\fR, where perlsub recommends that any subroutine
that assigns to \f(CW$_\fR should first localize it.  This would throw an
exception if \f(CW$_\fR is aliased to a read-only variable, and could in general have
various unintentional side-effects.
.PP
Therefore, as an exception to the general rule, local($_) will not
only assign a new value to \f(CW$_\fR, but also remove all existing magic from
it as well.
.PP
\fIParsing of package and variable names\fR
.IX Subsection "Parsing of package and variable names"
.PP
Parsing the names of packages and package variables has changed: 
multiple adjacent pairs of colons, as in \f(CW\*(C`foo::::bar\*(C'\fR, are now all 
treated as package separators.
.PP
Regardless of this change, the exact parsing of package separators has
never been guaranteed and is subject to change in future Perl versions.
.SS "Changes to Syntax or to Perl Operators"
.IX Subsection "Changes to Syntax or to Perl Operators"
\fI\f(CI\*(C`given\*(C'\fI return values\fR
.IX Subsection "given return values"
.PP
\&\f(CW\*(C`given\*(C'\fR blocks now return the last evaluated
expression, or an empty list if the block was exited by \f(CW\*(C`break\*(C'\fR.  Thus you
can now write:
.PP
.Vb 8
\&    my $type = do {
\&     given ($num) {
\&      break     when undef;
\&      "integer" when /^[+\-]?[0\-9]+$/;
\&      "float"   when /^[+\-]?[0\-9]+(?:\e.[0\-9]+)?$/;
\&      "unknown";
\&     }
\&    };
.Ve
.PP
See \*(L"Return value\*(R" in perlsyn for details.
.PP
\fIChange in parsing of certain prototypes\fR
.IX Subsection "Change in parsing of certain prototypes"
.PP
Functions declared with the following prototypes now behave correctly as unary
functions:
.PP
.Vb 6
\&  *
\&  \e$ \e% \e@ \e* \e&
\&  \e[...]
\&  ;$ ;*
\&  ;\e$ ;\e% etc.
\&  ;\e[...]
.Ve
.PP
Due to this bug fix [perl #75904], functions
using the \f(CW\*(C`(*)\*(C'\fR, \f(CW\*(C`(;$)\*(C'\fR and \f(CW\*(C`(;*)\*(C'\fR prototypes
are parsed with higher precedence than before.  So
in the following example:
.PP
.Vb 2
\&  sub foo(;$);
\&  foo $a < $b;
.Ve
.PP
the second line is now parsed correctly as \f(CW\*(C`foo($a) < $b\*(C'\fR, rather than
\&\f(CW\*(C`foo($a < $b)\*(C'\fR.  This happens when one of these operators is used in
an unparenthesised argument:
.PP
.Vb 10
\&  < > <= >= lt gt le ge
\&  == != <=> eq ne cmp ~~
\&  &
\&  | ^
\&  &&
\&  || //
\&  .. ...
\&  ?:
\&  = += \-= *= etc.
\&  , =>
.Ve
.PP
\fISmart-matching against array slices\fR
.IX Subsection "Smart-matching against array slices"
.PP
Previously, the following code resulted in a successful match:
.PP
.Vb 3
\&    my @a = qw(a y0 z);
\&    my @b = qw(a x0 z);
\&    @a[0 .. $#b] ~~ @b;
.Ve
.PP
This odd behaviour has now been fixed [perl #77468].
.PP
\fINegation treats strings differently from before\fR
.IX Subsection "Negation treats strings differently from before"
.PP
The unary negation operator, \f(CW\*(C`\-\*(C'\fR, now treats strings that look like numbers
as numbers [perl #57706].
.PP
\fINegative zero\fR
.IX Subsection "Negative zero"
.PP
Negative zero (\-0.0), when converted to a string, now becomes \*(L"0\*(R" on all
platforms.  It used to become \*(L"\-0\*(R" on some, but \*(L"0\*(R" on others.
.PP
If you still need to determine whether a zero is negative, use
\&\f(CW\*(C`sprintf("%g", $zero) =~ /^\-/\*(C'\fR or the Data::Float module on \s-1CPAN.\s0
.PP
\fI\f(CI\*(C`:=\*(C'\fI is now a syntax error\fR
.IX Subsection ":= is now a syntax error"
.PP
Previously \f(CW\*(C`my $pi := 4\*(C'\fR was exactly equivalent to \f(CW\*(C`my $pi : = 4\*(C'\fR,
with the \f(CW\*(C`:\*(C'\fR being treated as the start of an attribute list, ending before
the \f(CW\*(C`=\*(C'\fR.  The use of \f(CW\*(C`:=\*(C'\fR to mean \f(CW\*(C`: =\*(C'\fR was deprecated in 5.12.0, and is
now a syntax error.  This allows future use of \f(CW\*(C`:=\*(C'\fR as a new token.
.PP
Outside the core's tests for it, we find no Perl 5 code on \s-1CPAN\s0
using this construction, so we believe that this change will have
little impact on real-world codebases.
.PP
If it is absolutely necessary to have empty attribute lists (for example,
because of a code generator), simply avoid the error by adding a space before
the \f(CW\*(C`=\*(C'\fR.
.PP
\fIChange in the parsing of identifiers\fR
.IX Subsection "Change in the parsing of identifiers"
.PP
Characters outside the Unicode \*(L"XIDStart\*(R" set are no longer allowed at the
beginning of an identifier.  This means that certain accents and marks
that normally follow an alphabetic character may no longer be the first
character of an identifier.
.SS "Threads and Processes"
.IX Subsection "Threads and Processes"
\fIDirectory handles not copied to threads\fR
.IX Subsection "Directory handles not copied to threads"
.PP
On systems other than Windows that do not have
a \f(CW\*(C`fchdir\*(C'\fR function, newly-created threads no
longer inherit directory handles from their parent threads.  Such programs
would usually have crashed anyway [perl #75154].
.PP
\fI\f(CI\*(C`close\*(C'\fI on shared pipes\fR
.IX Subsection "close on shared pipes"
.PP
To avoid deadlocks, the \f(CW\*(C`close\*(C'\fR function no longer waits for the
child process to exit if the underlying file descriptor is still
in use by another thread.  It returns true in such cases.
.PP
\fI\fIfork()\fI emulation will not wait for signalled children\fR
.IX Subsection "fork() emulation will not wait for signalled children"
.PP
On Windows parent processes would not terminate until all forked
children had terminated first.  However, \f(CW\*(C`kill("KILL", ...)\*(C'\fR is
inherently unstable on pseudo-processes, and \f(CW\*(C`kill("TERM", ...)\*(C'\fR
might not get delivered if the child is blocked in a system call.
.PP
To avoid the deadlock and still provide a safe mechanism to terminate
the hosting process, Perl now no longer waits for children that
have been sent a \s-1SIGTERM\s0 signal.  It is up to the parent process to
\&\fIwaitpid()\fR for these children if child-cleanup processing must be
allowed to finish.  However, it is also then the responsibility of the
parent to avoid the deadlock by making sure the child process
can't be blocked on I/O.
.PP
See perlfork for more information about the \fIfork()\fR emulation on
Windows.
.SS "Configuration"
.IX Subsection "Configuration"
\fINaming fixes in Policy_sh.SH may invalidate Policy.sh\fR
.IX Subsection "Naming fixes in Policy_sh.SH may invalidate Policy.sh"
.PP
Several long-standing typos and naming confusions in \fIPolicy_sh.SH\fR have
been fixed, standardizing on the variable names used in \fIconfig.sh\fR.
.PP
This will change the behaviour of \fIPolicy.sh\fR if you happen to have been
accidentally relying on its incorrect behaviour.
.PP
\fIPerl source code is read in text mode on Windows\fR
.IX Subsection "Perl source code is read in text mode on Windows"
.PP
Perl scripts used to be read in binary mode on Windows for the benefit
of the ByteLoader module (which is no longer part of core Perl).  This
had the side-effect of breaking various operations on the \f(CW\*(C`DATA\*(C'\fR filehandle,
including \fIseek()\fR/\fItell()\fR, and even simply reading from \f(CW\*(C`DATA\*(C'\fR after filehandles
have been flushed by a call to \fIsystem()\fR, backticks, \fIfork()\fR etc.
.PP
The default build options for Windows have been changed to read Perl source
code on Windows in text mode now.  ByteLoader will (hopefully) be updated on
\&\s-1CPAN\s0 to automatically handle this situation [perl #28106].
.SH "Deprecations"
.IX Header "Deprecations"
See also \*(L"Deprecated C APIs\*(R".
.SS "Omitting a space between a regular expression and subsequent word"
.IX Subsection "Omitting a space between a regular expression and subsequent word"
Omitting the space between a regular expression operator or
its modifiers and the following word is deprecated.  For
example, \f(CW\*(C`m/foo/sand $bar\*(C'\fR is for now still parsed
as \f(CW\*(C`m/foo/s and $bar\*(C'\fR, but will now issue a warning.
.ie n .SS """\ec\fIX\fP"""
.el .SS "\f(CW\ec\fP\f(CIX\fP\f(CW\fP"
.IX Subsection "cX"
The backslash-c construct was designed as a way of specifying
non-printable characters, but there were no restrictions (on \s-1ASCII\s0
platforms) on what the character following the \f(CW\*(C`c\*(C'\fR could be.  Now,
a deprecation warning is raised if that character isn't an \s-1ASCII\s0 character.
Also, a deprecation warning is raised for \f(CW"\ec{"\fR (which is the same
as simply saying \f(CW";"\fR).
.ie n .SS """\eb{"" and ""\eB{"""
.el .SS "\f(CW``\eb{''\fP and \f(CW``\eB{''\fP"
.IX Subsection """b{"" and ""B{"""
In regular expressions, a literal \f(CW"{"\fR immediately following a \f(CW"\eb"\fR
(not in a bracketed character class) or a \f(CW"\eB{"\fR is now deprecated
to allow for its future use by Perl itself.
.SS "Perl 4\-era .pl libraries"
.IX Subsection "Perl 4-era .pl libraries"
Perl bundles a handful of library files that predate Perl 5.
This bundling is now deprecated for most of these files, which are now
available from \s-1CPAN. \s0 The affected files now warn when run, if they were
installed as part of the core.
.PP
This is a mandatory warning, not obeying \fB\-X\fR or lexical warning bits.
The warning is modelled on that supplied by \fIdeprecate.pm\fR for
deprecated-in-core \fI.pm\fR libraries.  It points to the specific \s-1CPAN\s0
distribution that contains the \fI.pl\fR libraries.  The \s-1CPAN\s0 versions, of
course, do not generate the warning.
.ie n .SS "List assignment to $["
.el .SS "List assignment to \f(CW$[\fP"
.IX Subsection "List assignment to $["
Assignment to \f(CW$[\fR was deprecated and started to give warnings in
Perl version 5.12.0.  This version of Perl (5.14) now also emits a warning 
when assigning to \f(CW$[\fR in list context.  This fixes an oversight in 5.12.0.
.SS "Use of qw(...) as parentheses"
.IX Subsection "Use of qw(...) as parentheses"
Historically the parser fooled itself into thinking that \f(CW\*(C`qw(...)\*(C'\fR literals
were always enclosed in parentheses, and as a result you could sometimes omit
parentheses around them:
.PP
.Vb 1
\&    for $x qw(a b c) { ... }
.Ve
.PP
The parser no longer lies to itself in this way.  Wrap the list literal in
parentheses like this:
.PP
.Vb 1
\&    for $x (qw(a b c)) { ... }
.Ve
.PP
This is being deprecated because the parentheses in \f(CW\*(C`for $i (1,2,3) { ... }\*(C'\fR
are not part of expression syntax.  They are part of the statement
syntax, with the \f(CW\*(C`for\*(C'\fR statement wanting literal parentheses.
The synthetic parentheses that a \f(CW\*(C`qw\*(C'\fR expression acquired were only
intended to be treated as part of expression syntax.
.PP
Note that this does not change the behaviour of cases like:
.PP
.Vb 2
\&    use POSIX qw(setlocale localeconv);
\&    our @EXPORT = qw(foo bar baz);
.Ve
.PP
where parentheses were never required around the expression.
.ie n .SS """\eN{BELL}"""
.el .SS "\f(CW\eN{BELL}\fP"
.IX Subsection "N{BELL}"
This is because Unicode is using that name for a different character.
See \*(L"Unicode Version 6.0 is now supported (mostly)\*(R" for more
explanation.
.ie n .SS """?PATTERN?"""
.el .SS "\f(CW?PATTERN?\fP"
.IX Subsection "?PATTERN?"
\&\f(CW\*(C`?PATTERN?\*(C'\fR (without the initial \f(CW\*(C`m\*(C'\fR) has been deprecated and now produces
a warning.  This is to allow future use of \f(CW\*(C`?\*(C'\fR in new operators.
The match-once functionality is still available as \f(CW\*(C`m?PATTERN?\*(C'\fR.
.SS "Tie functions on scalars holding typeglobs"
.IX Subsection "Tie functions on scalars holding typeglobs"
Calling a tie function (\f(CW\*(C`tie\*(C'\fR, \f(CW\*(C`tied\*(C'\fR, \f(CW\*(C`untie\*(C'\fR) with a scalar argument
acts on a filehandle if the scalar happens to hold a typeglob.
.PP
This is a long-standing bug that will be removed in Perl 5.16, as
there is currently no way to tie the scalar itself when it holds
a typeglob, and no way to untie a scalar that has had a typeglob
assigned to it.
.PP
Now there is a deprecation warning whenever a tie
function is used on a handle without an explicit \f(CW\*(C`*\*(C'\fR.
.SS "User-defined case-mapping"
.IX Subsection "User-defined case-mapping"
This feature is being deprecated due to its many issues, as documented in
\&\*(L"User-Defined Case Mappings (for serious hackers only)\*(R" in perlunicode.
This feature will be removed in Perl 5.16.  Instead use the \s-1CPAN\s0 module
Unicode::Casing, which provides improved functionality.
.SS "Deprecated modules"
.IX Subsection "Deprecated modules"
The following module will be removed from the core distribution in a
future release, and should be installed from \s-1CPAN\s0 instead.  Distributions
on \s-1CPAN\s0 that require this should add it to their prerequisites.  The
core version of these module now issues a deprecation warning.
.PP
If you ship a packaged version of Perl, either alone or as part of a
larger system, then you should carefully consider the repercussions of
core module deprecations.  You may want to consider shipping your default
build of Perl with a package for the deprecated module that
installs into \f(CW\*(C`vendor\*(C'\fR or \f(CW\*(C`site\*(C'\fR Perl library directories.  This will
inhibit the deprecation warnings.
.PP
Alternatively, you may want to consider patching \fIlib/deprecate.pm\fR
to provide deprecation warnings specific to your packaging system
or distribution of Perl, consistent with how your packaging system
or distribution manages a staged transition from a release where the
installation of a single package provides the given functionality, to
a later release where the system administrator needs to know to install
multiple packages to get that same functionality.
.PP
You can silence these deprecation warnings by installing the module
in question from \s-1CPAN. \s0 To install the latest version of it by role
rather than by name, just install \f(CW\*(C`Task::Deprecations::5_14\*(C'\fR.
.IP "Devel::DProf" 4
.IX Item "Devel::DProf"
We strongly recommend that you install and use Devel::NYTProf instead
of Devel::DProf, as Devel::NYTProf offers significantly
improved profiling and reporting.
.SH "Performance Enhancements"
.IX Header "Performance Enhancements"
.ie n .SS """Safe signals"" optimisation"
.el .SS "``Safe signals'' optimisation"
.IX Subsection "Safe signals optimisation"
Signal dispatch has been moved from the runloop into control ops.
This should give a few percent speed increase, and eliminates nearly
all the speed penalty caused by the introduction of \*(L"safe signals\*(R"
in 5.8.0.  Signals should still be dispatched within the same
statement as they were previously.  If this does \fInot\fR happen, or
if you find it possible to create uninterruptible loops, this is a
bug, and reports are encouraged of how to recreate such issues.
.SS "Optimisation of \fIshift()\fP and \fIpop()\fP calls without arguments"
.IX Subsection "Optimisation of shift() and pop() calls without arguments"
Two fewer OPs are used for \fIshift()\fR and \fIpop()\fR calls with no argument (with
implicit \f(CW@_\fR).  This change makes \fIshift()\fR 5% faster than \f(CW\*(C`shift @_\*(C'\fR
on non-threaded perls, and 25% faster on threaded ones.
.SS "Optimisation of regexp engine string comparison work"
.IX Subsection "Optimisation of regexp engine string comparison work"
The \f(CW\*(C`foldEQ_utf8\*(C'\fR \s-1API\s0 function for case-insensitive comparison of strings (which
is used heavily by the regexp engine) was substantially refactored and
optimised \*(-- and its documentation much improved as a free bonus.
.SS "Regular expression compilation speed-up"
.IX Subsection "Regular expression compilation speed-up"
Compiling regular expressions has been made faster when upgrading
the regex to utf8 is necessary but this isn't known when the compilation begins.
.SS "String appending is 100 times faster"
.IX Subsection "String appending is 100 times faster"
When doing a lot of string appending, perls built to use the system's
\&\f(CW\*(C`malloc\*(C'\fR could end up allocating a lot more memory than needed in a
inefficient way.
.PP
\&\f(CW\*(C`sv_grow\*(C'\fR, the function used to allocate more memory if necessary
when appending to a string, has been taught to round up the memory
it requests to a certain geometric progression, making it much faster on
certain platforms and configurations.  On Win32, it's now about 100 times
faster.
.ie n .SS "Eliminate ""PL_*"" accessor functions under ithreads"
.el .SS "Eliminate \f(CWPL_*\fP accessor functions under ithreads"
.IX Subsection "Eliminate PL_* accessor functions under ithreads"
When \f(CW\*(C`MULTIPLICITY\*(C'\fR was first developed, and interpreter state moved into
an interpreter struct, thread\- and interpreter-local \f(CW\*(C`PL_*\*(C'\fR variables
were defined as macros that called accessor functions (returning the
address of the value) outside the Perl core.  The intent was to allow
members within the interpreter struct to change size without breaking
binary compatibility, so that bug fixes could be merged to a maintenance
branch that necessitated such a size change.  This mechanism was redundant
and penalised well-behaved code.  It has been removed.
.SS "Freeing weak references"
.IX Subsection "Freeing weak references"
When there are many weak references to an object, freeing that object
can under some circumstances take O(\fIN*N\fR) time to free, where
\&\fIN\fR is the number of references.  The circumstances in which this can happen
have been reduced [perl #75254]
.SS "Lexical array and hash assignments"
.IX Subsection "Lexical array and hash assignments"
An earlier optimisation to speed up \f(CW\*(C`my @array = ...\*(C'\fR and
\&\f(CW\*(C`my %hash = ...\*(C'\fR assignments caused a bug and was disabled in Perl 5.12.0.
.PP
Now we have found another way to speed up these assignments [perl #82110].
.ie n .SS "@_ uses less memory"
.el .SS "\f(CW@_\fP uses less memory"
.IX Subsection "@_ uses less memory"
Previously, \f(CW@_\fR was allocated for every subroutine at compile time with
enough space for four entries.  Now this allocation is done on demand when
the subroutine is called [perl #72416].
.SS "Size optimisations to \s-1SV\s0 and \s-1HV\s0 structures"
.IX Subsection "Size optimisations to SV and HV structures"
\&\f(CW\*(C`xhv_fill\*(C'\fR has been eliminated from \f(CW\*(C`struct xpvhv\*(C'\fR, saving 1 \s-1IV\s0 per hash and
on some systems will cause \f(CW\*(C`struct xpvhv\*(C'\fR to become cache-aligned.  To avoid
this memory saving causing a slowdown elsewhere, boolean use of \f(CW\*(C`HvFILL\*(C'\fR
now calls \f(CW\*(C`HvTOTALKEYS\*(C'\fR instead (which is equivalent), so while the fill
data when actually required are now calculated on demand, cases when
this needs to be done should be rare.
.PP
The order of structure elements in \s-1SV\s0 bodies has changed.  Effectively,
the \s-1NV\s0 slot has swapped location with \s-1STASH\s0 and \s-1MAGIC. \s0 As all access to
\&\s-1SV\s0 members is via macros, this should be completely transparent.  This
change allows the space saving for PVHVs documented above, and may reduce
the memory allocation needed for PVIVs on some architectures.
.PP
\&\f(CW\*(C`XPV\*(C'\fR, \f(CW\*(C`XPVIV\*(C'\fR, and \f(CW\*(C`XPVNV\*(C'\fR now allocate only the parts of the \f(CW\*(C`SV\*(C'\fR body
they actually use, saving some space.
.PP
Scalars containing regular expressions now allocate only the part of the \f(CW\*(C`SV\*(C'\fR
body they actually use, saving some space.
.SS "Memory consumption improvements to Exporter"
.IX Subsection "Memory consumption improvements to Exporter"
The \f(CW@EXPORT_FAIL\fR \s-1AV\s0 is no longer created unless needed, hence neither is
the typeglob backing it.  This saves about 200 bytes for every package that
uses Exporter but doesn't use this functionality.
.SS "Memory savings for weak references"
.IX Subsection "Memory savings for weak references"
For weak references, the common case of just a single weak reference
per referent has been optimised to reduce the storage required.  In this
case it saves the equivalent of one small Perl array per referent.
.ie n .SS """%+"" and ""%\-"" use less memory"
.el .SS "\f(CW%+\fP and \f(CW%\-\fP use less memory"
.IX Subsection "%+ and %- use less memory"
The bulk of the \f(CW\*(C`Tie::Hash::NamedCapture\*(C'\fR module used to be in the Perl
core.  It has now been moved to an \s-1XS\s0 module to reduce overhead for
programs that do not use \f(CW\*(C`%+\*(C'\fR or \f(CW\*(C`%\-\*(C'\fR.
.SS "Multiple small improvements to threads"
.IX Subsection "Multiple small improvements to threads"
The internal structures of threading now make fewer \s-1API\s0 calls and fewer
allocations, resulting in noticeably smaller object code.  Additionally,
many thread context checks have been deferred so they're done only 
as needed (although this is only possible for non-debugging builds).
.SS "Adjacent pairs of nextstate opcodes are now optimized away"
.IX Subsection "Adjacent pairs of nextstate opcodes are now optimized away"
Previously, in code such as
.PP
.Vb 1
\&    use constant DEBUG => 0;
\&
\&    sub GAK {
\&        warn if DEBUG;
\&        print "stuff\en";
\&    }
.Ve
.PP
the ops for \f(CW\*(C`warn if DEBUG\*(C'\fR would be folded to a \f(CW\*(C`null\*(C'\fR op (\f(CW\*(C`ex\-const\*(C'\fR), but
the \f(CW\*(C`nextstate\*(C'\fR op would remain, resulting in a runtime op dispatch of
\&\f(CW\*(C`nextstate\*(C'\fR, \f(CW\*(C`nextstate\*(C'\fR, etc.
.PP
The execution of a sequence of \f(CW\*(C`nextstate\*(C'\fR ops is indistinguishable from just
the last \f(CW\*(C`nextstate\*(C'\fR op so the peephole optimizer now eliminates the first of
a pair of \f(CW\*(C`nextstate\*(C'\fR ops except when the first carries a label, since labels
must not be eliminated by the optimizer, and label usage isn't conclusively known
at compile time.
.SH "Modules and Pragmata"
.IX Header "Modules and Pragmata"
.SS "New Modules and Pragmata"
.IX Subsection "New Modules and Pragmata"
.IP "\(bu" 4
CPAN::Meta::YAML 0.003 has been added as a dual-life module.  It supports a
subset of \s-1YAML\s0 sufficient for reading and writing \fI\s-1META\s0.yml\fR and \fI\s-1MYMETA\s0.yml\fR files
included with \s-1CPAN\s0 distributions or generated by the module installation
toolchain.  It should not be used for any other general \s-1YAML\s0 parsing or
generation task.
.IP "\(bu" 4
CPAN::Meta version 2.110440 has been added as a dual-life module.  It
provides a standard library to read, interpret and write \s-1CPAN\s0 distribution
metadata files (like \fI\s-1META\s0.json\fR and \fI\s-1META\s0.yml\fR) that describe a
distribution, its contents, and the requirements for building it and
installing it.  The latest \s-1CPAN\s0 distribution metadata specification is
included as CPAN::Meta::Spec and notes on changes in the specification
over time are given in CPAN::Meta::History.
.IP "\(bu" 4
HTTP::Tiny 0.012 has been added as a dual-life module.  It is a very
small, simple \s-1HTTP/1.1\s0 client designed for simple \s-1GET\s0 requests and file
mirroring.  It has been added so that \fI\s-1CPAN\s0.pm\fR and \s-1CPANPLUS\s0 can
\&\*(L"bootstrap\*(R" \s-1HTTP\s0 access to \s-1CPAN\s0 using pure Perl without relying on external
binaries like \fIcurl\fR\|(1) or \fIwget\fR\|(1).
.IP "\(bu" 4
\&\s-1JSON::PP\s0 2.27105 has been added as a dual-life module to allow \s-1CPAN\s0
clients to read \fI\s-1META\s0.json\fR files in \s-1CPAN\s0 distributions.
.IP "\(bu" 4
Module::Metadata 1.000004 has been added as a dual-life module.  It gathers
package and \s-1POD\s0 information from Perl module files.  It is a standalone module
based on Module::Build::ModuleInfo for use by other module installation
toolchain components.  Module::Build::ModuleInfo has been deprecated in
favor of this module instead.
.IP "\(bu" 4
Perl::OSType 1.002 has been added as a dual-life module.  It maps Perl
operating system names (like \*(L"dragonfly\*(R" or \*(L"MSWin32\*(R") to more generic types
with standardized names (like \*(L"Unix\*(R" or \*(L"Windows\*(R").  It has been refactored
out of Module::Build and ExtUtils::CBuilder and consolidates such mappings into
a single location for easier maintenance.
.IP "\(bu" 4
The following modules were added by the Unicode::Collate 
upgrade.  See below for details.
.Sp
Unicode::Collate::CJK::Big5
.Sp
Unicode::Collate::CJK::GB2312
.Sp
Unicode::Collate::CJK::JISX0208
.Sp
Unicode::Collate::CJK::Korean
.Sp
Unicode::Collate::CJK::Pinyin
.Sp
Unicode::Collate::CJK::Stroke
.IP "\(bu" 4
Version::Requirements version 0.101020 has been added as a dual-life
module.  It provides a standard library to model and manipulates module
prerequisites and version constraints defined in CPAN::Meta::Spec.
.SS "Updated Modules and Pragma"
.IX Subsection "Updated Modules and Pragma"
.IP "\(bu" 4
attributes has been upgraded from version 0.12 to 0.14.
.IP "\(bu" 4
Archive::Extract has been upgraded from version 0.38 to 0.48.
.Sp
Updates since 0.38 include: a safe print method that guards
Archive::Extract from changes to \f(CW\*(C`$\e\*(C'\fR; a fix to the tests when run in core
Perl; support for \s-1TZ\s0 files; a modification for the lzma
logic to favour IO::Uncompress::Unlzma; and a fix
for an issue with NetBSD-current and its new \fIunzip\fR\|(1)
executable.
.IP "\(bu" 4
Archive::Tar has been upgraded from version 1.54 to 1.76.
.Sp
Important changes since 1.54 include the following:
.RS 4
.IP "\(bu" 4
Compatibility with busybox implementations of \fItar\fR\|(1).
.IP "\(bu" 4
A fix so that \fIwrite()\fR and \fIcreate_archive()\fR
close only filehandles they themselves opened.
.IP "\(bu" 4
A bug was fixed regarding the exit code of extract_archive.
.IP "\(bu" 4
The \fIptar\fR\|(1) utility has a new option to allow safe creation of
tarballs without world-writable files on Windows, allowing those
archives to be uploaded to \s-1CPAN.\s0
.IP "\(bu" 4
A new \fIptargrep\fR\|(1) utility for using regular expressions against 
the contents of files in a tar archive.
.IP "\(bu" 4
pax extended headers are now skipped.
.RE
.RS 4
.RE
.IP "\(bu" 4
Attribute::Handlers has been upgraded from version 0.87 to 0.89.
.IP "\(bu" 4
autodie has been upgraded from version 2.06_01 to 2.1001.
.IP "\(bu" 4
AutoLoader has been upgraded from version 5.70 to 5.71.
.IP "\(bu" 4
The B module has been upgraded from version 1.23 to 1.29.
.Sp
It no longer crashes when taking apart a \f(CW\*(C`y///\*(C'\fR containing characters
outside the octet range or compiled in a \f(CW\*(C`use utf8\*(C'\fR scope.
.Sp
The size of the shared object has been reduced by about 40%, with no
reduction in functionality.
.IP "\(bu" 4
B::Concise has been upgraded from version 0.78 to 0.83.
.Sp
B::Concise marks \fIrv2sv()\fR, \fIrv2av()\fR, and \fIrv2hv()\fR ops with the new
\&\f(CW\*(C`OPpDEREF\*(C'\fR flag as \*(L"DREFed\*(R".
.Sp
It no longer produces mangled output with the \fB\-tree\fR option
[perl #80632].
.IP "\(bu" 4
B::Debug has been upgraded from version 1.12 to 1.16.
.IP "\(bu" 4
B::Deparse has been upgraded from version 0.96 to 1.03.
.Sp
The deparsing of a \f(CW\*(C`nextstate\*(C'\fR op has changed when it has both a
change of package relative to the previous nextstate, or a change of
\&\f(CW\*(C`%^H\*(C'\fR or other state and a label.  The label was previously emitted
first, but is now emitted last (5.12.1).
.Sp
The \f(CW\*(C`no 5.13.2\*(C'\fR or similar form is now correctly handled by B::Deparse
(5.12.3).
.Sp
B::Deparse now properly handles the code that applies a conditional
pattern match against implicit \f(CW$_\fR as it was fixed in [perl #20444].
.Sp
Deparsing of \f(CW\*(C`our\*(C'\fR followed by a variable with funny characters
(as permitted under the \f(CW\*(C`use utf8\*(C'\fR pragma) has also been fixed [perl #33752].
.IP "\(bu" 4
B::Lint has been upgraded from version 1.11_01 to 1.13.
.IP "\(bu" 4
base has been upgraded from version 2.15 to 2.16.
.IP "\(bu" 4
Benchmark has been upgraded from version 1.11 to 1.12.
.IP "\(bu" 4
bignum has been upgraded from version 0.23 to 0.27.
.IP "\(bu" 4
Carp has been upgraded from version 1.15 to 1.20.
.Sp
Carp now detects incomplete \fIcaller()\fR
overrides and avoids using bogus \f(CW@DB::args\fR.  To provide backtraces,
Carp relies on particular behaviour of the \fIcaller()\fR builtin.
Carp now detects if other code has overridden this with an
incomplete implementation, and modifies its backtrace accordingly.
Previously incomplete overrides would cause incorrect values in
backtraces (best case), or obscure fatal errors (worst case).
.Sp
This fixes certain cases of \*(L"Bizarre copy of \s-1ARRAY\*(R"\s0 caused by modules
overriding \fIcaller()\fR incorrectly (5.12.2).
.Sp
It now also avoids using regular expressions that cause Perl to
load its Unicode tables, so as to avoid the \*(L"\s-1BEGIN\s0 not safe after
errors\*(R" error that ensue if there has been a syntax error
[perl #82854].
.IP "\(bu" 4
\&\s-1CGI\s0 has been upgraded from version 3.48 to 3.52.
.Sp
This provides the following security fixes: the \s-1MIME\s0 boundary in 
\&\fImultipart_init()\fR is now random and the handling of 
newlines embedded in header values has been improved.
.IP "\(bu" 4
Compress::Raw::Bzip2 has been upgraded from version 2.024 to 2.033.
.Sp
It has been updated to use \fIbzip2\fR\|(1) 1.0.6.
.IP "\(bu" 4
Compress::Raw::Zlib has been upgraded from version 2.024 to 2.033.
.IP "\(bu" 4
constant has been upgraded from version 1.20 to 1.21.
.Sp
Unicode constants work once more.  They have been broken since Perl 5.10.0
[\s-1CPAN RT\s0 #67525].
.IP "\(bu" 4
\&\s-1CPAN\s0 has been upgraded from version 1.94_56 to 1.9600.
.Sp
Major highlights:
.RS 4
.IP "\(bu" 4
much less configuration dialog hassle
.IP "\(bu" 4
support for \fI\s-1META/MYMETA\s0.json\fR
.IP "\(bu" 4
support for local::lib
.IP "\(bu" 4
support for HTTP::Tiny to reduce the dependency on \s-1FTP\s0 sites
.IP "\(bu" 4
automatic mirror selection
.IP "\(bu" 4
iron out all known bugs in configure_requires
.IP "\(bu" 4
support for distributions compressed with \fIbzip2\fR\|(1)
.IP "\(bu" 4
allow \fIFoo/Bar.pm\fR on the command line to mean \f(CW\*(C`Foo::Bar\*(C'\fR
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\s-1CPANPLUS\s0 has been upgraded from version 0.90 to 0.9103.
.Sp
A change to \fIcpanp-run-perl\fR
resolves \s-1RT\s0 #55964 <http://rt.cpan.org/Public/Bug/Display.html?id=55964>
and \s-1RT\s0 #57106 <http://rt.cpan.org/Public/Bug/Display.html?id=57106>, both
of which related to failures to install distributions that use
\&\f(CW\*(C`Module::Install::DSL\*(C'\fR (5.12.2).
.Sp
A dependency on Config was not recognised as a
core module dependency.  This has been fixed.
.Sp
\&\s-1CPANPLUS\s0 now includes support for \fI\s-1META\s0.json\fR and \fI\s-1MYMETA\s0.json\fR.
.IP "\(bu" 4
CPANPLUS::Dist::Build has been upgraded from version 0.46 to 0.54.
.IP "\(bu" 4
Data::Dumper has been upgraded from version 2.125 to 2.130_02.
.Sp
The indentation used to be off when \f(CW$Data::Dumper::Terse\fR was set.  This
has been fixed [perl #73604].
.Sp
This upgrade also fixes a crash when using custom sort functions that might
cause the stack to change [perl #74170].
.Sp
Dumpxs no longer crashes with globs returned by \f(CW*$io_ref\fR
[perl #72332].
.IP "\(bu" 4
DB_File has been upgraded from version 1.820 to 1.821.
.IP "\(bu" 4
DBM_Filter has been upgraded from version 0.03 to 0.04.
.IP "\(bu" 4
Devel::DProf has been upgraded from version 20080331.00 to 20110228.00.
.Sp
Merely loading Devel::DProf now no longer triggers profiling to start.
Both \f(CW\*(C`use Devel::DProf\*(C'\fR and \f(CW\*(C`perl \-d:DProf ...\*(C'\fR behave as before and start
the profiler.
.Sp
\&\fB\s-1NOTE\s0\fR: Devel::DProf is deprecated and will be removed from a future
version of Perl.  We strongly recommend that you install and use
Devel::NYTProf instead, as it offers significantly improved
profiling and reporting.
.IP "\(bu" 4
Devel::Peek has been upgraded from version 1.04 to 1.07.
.IP "\(bu" 4
Devel::SelfStubber has been upgraded from version 1.03 to 1.05.
.IP "\(bu" 4
diagnostics has been upgraded from version 1.19 to 1.22.
.Sp
It now renders pod links slightly better, and has been taught to find
descriptions for messages that share their descriptions with other
messages.
.IP "\(bu" 4
Digest::MD5 has been upgraded from version 2.39 to 2.51.
.Sp
It is now safe to use this module in combination with threads.
.IP "\(bu" 4
Digest::SHA has been upgraded from version 5.47 to 5.61.
.Sp
\&\f(CW\*(C`shasum\*(C'\fR now more closely mimics \fIsha1sum\fR\|(1)/\fImd5sum\fR\|(1).
.Sp
\&\f(CW\*(C`addfile\*(C'\fR accepts all \s-1POSIX\s0 filenames.
.Sp
New \s-1SHA\-512/224\s0 and \s-1SHA\-512/256\s0 transforms (ref. \s-1NIST\s0 Draft \s-1FIPS 180\-4\s0
[February 2011])
.IP "\(bu" 4
DirHandle has been upgraded from version 1.03 to 1.04.
.IP "\(bu" 4
Dumpvalue has been upgraded from version 1.13 to 1.16.
.IP "\(bu" 4
DynaLoader has been upgraded from version 1.10 to 1.13.
.Sp
It fixes a buffer overflow when passed a very long file name.
.Sp
It no longer inherits from AutoLoader; hence it no longer
produces weird error messages for unsuccessful method calls on classes that
inherit from DynaLoader [perl #84358].
.IP "\(bu" 4
Encode has been upgraded from version 2.39 to 2.42.
.Sp
Now, all 66 Unicode non-characters are treated the same way U+FFFF has
always been treated: in cases when it was disallowed, all 66 are
disallowed, and in cases where it warned, all 66 warn.
.IP "\(bu" 4
Env has been upgraded from version 1.01 to 1.02.
.IP "\(bu" 4
Errno has been upgraded from version 1.11 to 1.13.
.Sp
The implementation of Errno has been refactored to use about 55% less memory.
.Sp
On some platforms with unusual header files, like Win32 \fIgcc\fR\|(1) using \f(CW\*(C`mingw64\*(C'\fR
headers, some constants that weren't actually error numbers have been exposed
by Errno.  This has been fixed [perl #77416].
.IP "\(bu" 4
Exporter has been upgraded from version 5.64_01 to 5.64_03.
.Sp
Exporter no longer overrides \f(CW$SIG{_\|_WARN_\|_}\fR [perl #74472]
.IP "\(bu" 4
ExtUtils::CBuilder has been upgraded from version 0.27 to 0.280203.
.IP "\(bu" 4
ExtUtils::Command has been upgraded from version 1.16 to 1.17.
.IP "\(bu" 4
ExtUtils::Constant has been upgraded from 0.22 to 0.23.
.Sp
The \s-1AUTOLOAD\s0 helper code generated by \f(CW\*(C`ExtUtils::Constant::ProxySubs\*(C'\fR
can now \fIcroak()\fR for missing constants, or generate a complete \f(CW\*(C`AUTOLOAD\*(C'\fR
subroutine in \s-1XS,\s0 allowing simplification of many modules that use it
(Fcntl, File::Glob, GDBM_File, I18N::Langinfo, \s-1POSIX\s0,
Socket).
.Sp
ExtUtils::Constant::ProxySubs can now optionally push the names of all
constants onto the package's \f(CW@EXPORT_OK\fR.
.IP "\(bu" 4
ExtUtils::Install has been upgraded from version 1.55 to 1.56.
.IP "\(bu" 4
ExtUtils::MakeMaker has been upgraded from version 6.56 to 6.57_05.
.IP "\(bu" 4
ExtUtils::Manifest has been upgraded from version 1.57 to 1.58.
.IP "\(bu" 4
ExtUtils::ParseXS has been upgraded from version 2.21 to 2.2210.
.IP "\(bu" 4
Fcntl has been upgraded from version 1.06 to 1.11.
.IP "\(bu" 4
File::Basename has been upgraded from version 2.78 to 2.82.
.IP "\(bu" 4
File::CheckTree has been upgraded from version 4.4 to 4.41.
.IP "\(bu" 4
File::Copy has been upgraded from version 2.17 to 2.21.
.IP "\(bu" 4
File::DosGlob has been upgraded from version 1.01 to 1.04.
.Sp
It allows patterns containing literal parentheses: they no longer need to
be escaped.  On Windows, it no longer
adds an extra \fI./\fR to file names
returned when the pattern is a relative glob with a drive specification,
like \fIC:*.pl\fR [perl #71712].
.IP "\(bu" 4
File::Fetch has been upgraded from version 0.24 to 0.32.
.Sp
HTTP::Lite is now supported for the \*(L"http\*(R" scheme.
.Sp
The \fIfetch\fR\|(1) utility is supported on FreeBSD, NetBSD, and
Dragonfly \s-1BSD\s0 for the \f(CW\*(C`http\*(C'\fR and \f(CW\*(C`ftp\*(C'\fR schemes.
.IP "\(bu" 4
File::Find has been upgraded from version 1.15 to 1.19.
.Sp
It improves handling of backslashes on Windows, so that paths like
\&\fIC:\edir\e/file\fR are no longer generated [perl #71710].
.IP "\(bu" 4
File::Glob has been upgraded from version 1.07 to 1.12.
.IP "\(bu" 4
File::Spec has been upgraded from version 3.31 to 3.33.
.Sp
Several portability fixes were made in File::Spec::VMS: a colon is now
recognized as a delimiter in native filespecs; caret-escaped delimiters are
recognized for better handling of extended filespecs; \fIcatpath()\fR returns
an empty directory rather than the current directory if the input directory
name is empty; and \fIabs2rel()\fR properly handles Unix-style input (5.12.2).
.IP "\(bu" 4
File::stat has been upgraded from 1.02 to 1.05.
.Sp
The \f(CW\*(C`\-x\*(C'\fR and \f(CW\*(C`\-X\*(C'\fR file test operators now work correctly when run
by the superuser.
.IP "\(bu" 4
Filter::Simple has been upgraded from version 0.84 to 0.86.
.IP "\(bu" 4
GDBM_File has been upgraded from 1.10 to 1.14.
.Sp
This fixes a memory leak when \s-1DBM\s0 filters are used.
.IP "\(bu" 4
Hash::Util has been upgraded from 0.07 to 0.11.
.Sp
Hash::Util no longer emits spurious \*(L"uninitialized\*(R" warnings when
recursively locking hashes that have undefined values [perl #74280].
.IP "\(bu" 4
Hash::Util::FieldHash has been upgraded from version 1.04 to 1.09.
.IP "\(bu" 4
I18N::Collate has been upgraded from version 1.01 to 1.02.
.IP "\(bu" 4
I18N::Langinfo has been upgraded from version 0.03 to 0.08.
.Sp
\&\fIlanginfo()\fR now defaults to using \f(CW$_\fR if there is no argument given, just
as the documentation has always claimed.
.IP "\(bu" 4
I18N::LangTags has been upgraded from version 0.35 to 0.35_01.
.IP "\(bu" 4
if has been upgraded from version 0.05 to 0.0601.
.IP "\(bu" 4
\&\s-1IO\s0 has been upgraded from version 1.25_02 to 1.25_04.
.Sp
This version of \s-1IO\s0 includes a new IO::Select, which now allows IO::Handle
objects (and objects in derived classes) to be removed from an IO::Select set
even if the underlying file descriptor is closed or invalid.
.IP "\(bu" 4
IPC::Cmd has been upgraded from version 0.54 to 0.70.
.Sp
Resolves an issue with splitting Win32 command lines.  An argument
consisting of the single character \*(L"0\*(R" used to be omitted (\s-1CPAN RT\s0 #62961).
.IP "\(bu" 4
IPC::Open3 has been upgraded from 1.05 to 1.09.
.Sp
\&\fIopen3()\fR now produces an error if the \f(CW\*(C`exec\*(C'\fR call fails, allowing this
condition to be distinguished from a child process that exited with a
non-zero status [perl #72016].
.Sp
The internal \fIxclose()\fR routine now knows how to handle file descriptors as
documented, so duplicating \f(CW\*(C`STDIN\*(C'\fR in a child process using its file
descriptor now works [perl #76474].
.IP "\(bu" 4
IPC::SysV has been upgraded from version 2.01 to 2.03.
.IP "\(bu" 4
lib has been upgraded from version 0.62 to 0.63.
.IP "\(bu" 4
Locale::Maketext has been upgraded from version 1.14 to 1.19.
.Sp
Locale::Maketext now supports external caches.
.Sp
This upgrade also fixes an infinite loop in
\&\f(CW\*(C`Locale::Maketext::Guts::_compile()\*(C'\fR when
working with tainted values (\s-1CPAN RT\s0 #40727).
.Sp
\&\f(CW\*(C`\->maketext\*(C'\fR calls now back up and restore \f(CW$@\fR so error
messages are not suppressed (\s-1CPAN RT\s0 #34182).
.IP "\(bu" 4
Log::Message has been upgraded from version 0.02 to 0.04.
.IP "\(bu" 4
Log::Message::Simple has been upgraded from version 0.06 to 0.08.
.IP "\(bu" 4
Math::BigInt has been upgraded from version 1.89_01 to 1.994.
.Sp
This fixes, among other things, incorrect results when computing binomial
coefficients [perl #77640].
.Sp
It also prevents \f(CW\*(C`sqrt($int)\*(C'\fR from crashing under \f(CW\*(C`use bigrat\*(C'\fR.
[perl #73534].
.IP "\(bu" 4
Math::BigInt::FastCalc has been upgraded from version 0.19 to 0.28.
.IP "\(bu" 4
Math::BigRat has been upgraded from version 0.24 to 0.26_02.
.IP "\(bu" 4
Memoize has been upgraded from version 1.01_03 to 1.02.
.IP "\(bu" 4
MIME::Base64 has been upgraded from 3.08 to 3.13.
.Sp
Includes new functions to calculate the length of encoded and decoded
base64 strings.
.Sp
Now provides \fIencode_base64url()\fR and \fIdecode_base64url()\fR functions to process
the base64 scheme for \*(L"\s-1URL\s0 applications\*(R".
.IP "\(bu" 4
Module::Build has been upgraded from version 0.3603 to 0.3800.
.Sp
A notable change is the deprecation of several modules.
Module::Build::Version has been deprecated and Module::Build now
relies on the version pragma directly.  Module::Build::ModuleInfo has
been deprecated in favor of a standalone copy called Module::Metadata.
Module::Build::YAML has been deprecated in favor of CPAN::Meta::YAML.
.Sp
Module::Build now also generates \fI\s-1META\s0.json\fR and \fI\s-1MYMETA\s0.json\fR files
in accordance with version 2 of the \s-1CPAN\s0 distribution metadata specification,
CPAN::Meta::Spec.  The older format \fI\s-1META\s0.yml\fR and \fI\s-1MYMETA\s0.yml\fR files are
still generated.
.IP "\(bu" 4
Module::CoreList has been upgraded from version 2.29 to 2.47.
.Sp
Besides listing the updated core modules of this release, it also stops listing
the \f(CW\*(C`Filespec\*(C'\fR module.  That module never existed in core.  The scripts
generating Module::CoreList confused it with VMS::Filespec, which actually
is a core module as of Perl 5.8.7.
.IP "\(bu" 4
Module::Load has been upgraded from version 0.16 to 0.18.
.IP "\(bu" 4
Module::Load::Conditional has been upgraded from version 0.34 to 0.44.
.IP "\(bu" 4
The mro pragma has been upgraded from version 1.02 to 1.07.
.IP "\(bu" 4
NDBM_File has been upgraded from version 1.08 to 1.12.
.Sp
This fixes a memory leak when \s-1DBM\s0 filters are used.
.IP "\(bu" 4
Net::Ping has been upgraded from version 2.36 to 2.38.
.IP "\(bu" 4
\&\s-1NEXT\s0 has been upgraded from version 0.64 to 0.65.
.IP "\(bu" 4
Object::Accessor has been upgraded from version 0.36 to 0.38.
.IP "\(bu" 4
ODBM_File has been upgraded from version 1.07 to 1.10.
.Sp
This fixes a memory leak when \s-1DBM\s0 filters are used.
.IP "\(bu" 4
Opcode has been upgraded from version 1.15 to 1.18.
.IP "\(bu" 4
The overload pragma has been upgraded from 1.10 to 1.13.
.Sp
\&\f(CW\*(C`overload::Method\*(C'\fR can now handle subroutines that are themselves blessed
into overloaded classes [perl #71998].
.Sp
The documentation has greatly improved.  See \*(L"Documentation\*(R" below.
.IP "\(bu" 4
Params::Check has been upgraded from version 0.26 to 0.28.
.IP "\(bu" 4
The parent pragma has been upgraded from version 0.223 to 0.225.
.IP "\(bu" 4
Parse::CPAN::Meta has been upgraded from version 1.40 to 1.4401.
.Sp
The latest Parse::CPAN::Meta can now read \s-1YAML\s0 and \s-1JSON\s0 files using
CPAN::Meta::YAML and \s-1JSON::PP\s0, which are now part of the Perl core.
.IP "\(bu" 4
PerlIO::encoding has been upgraded from version 0.12 to 0.14.
.IP "\(bu" 4
PerlIO::scalar has been upgraded from 0.07 to 0.11.
.Sp
A \fIread()\fR after a \fIseek()\fR beyond the end of the string no longer thinks it
has data to read [perl #78716].
.IP "\(bu" 4
PerlIO::via has been upgraded from version 0.09 to 0.11.
.IP "\(bu" 4
Pod::Html has been upgraded from version 1.09 to 1.11.
.IP "\(bu" 4
Pod::LaTeX has been upgraded from version 0.58 to 0.59.
.IP "\(bu" 4
Pod::Perldoc has been upgraded from version 3.15_02 to 3.15_03.
.IP "\(bu" 4
Pod::Simple has been upgraded from version 3.13 to 3.16.
.IP "\(bu" 4
\&\s-1POSIX\s0 has been upgraded from 1.19 to 1.24.
.Sp
It now includes constants for \s-1POSIX\s0 signal constants.
.IP "\(bu" 4
The re pragma has been upgraded from version 0.11 to 0.18.
.Sp
The \f(CW\*(C`use re \*(Aq/flags\*(Aq\*(C'\fR subpragma is new.
.Sp
The \fIregmust()\fR function used to crash when called on a regular expression
belonging to a pluggable engine.  Now it croaks instead.
.Sp
\&\fIregmust()\fR no longer leaks memory.
.IP "\(bu" 4
Safe has been upgraded from version 2.25 to 2.29.
.Sp
Coderefs returned by \fIreval()\fR and \fIrdo()\fR are now wrapped via
\&\fIwrap_code_refs()\fR (5.12.1).
.Sp
This fixes a possible infinite loop when looking for coderefs.
.Sp
It adds several \f(CW\*(C`version::vxs::*\*(C'\fR routines to the default share.
.IP "\(bu" 4
SDBM_File has been upgraded from version 1.06 to 1.09.
.IP "\(bu" 4
SelfLoader has been upgraded from 1.17 to 1.18.
.Sp
It now works in taint mode [perl #72062].
.IP "\(bu" 4
The sigtrap pragma has been upgraded from version 1.04 to 1.05.
.Sp
It no longer tries to modify read-only arguments when generating a
backtrace [perl #72340].
.IP "\(bu" 4
Socket has been upgraded from version 1.87 to 1.94.
.Sp
See \*(L"Improved IPv6 support\*(R" above.
.IP "\(bu" 4
Storable has been upgraded from version 2.22 to 2.27.
.Sp
Includes performance improvement for overloaded classes.
.Sp
This adds support for serialising code references that contain \s-1UTF\-8\s0 strings
correctly.  The Storable minor version
number changed as a result, meaning that
Storable users who set \f(CW$Storable::accept_future_minor\fR to a \f(CW\*(C`FALSE\*(C'\fR value
will see errors (see \*(L"\s-1FORWARD COMPATIBILITY\*(R"\s0 in Storable for more details).
.Sp
Freezing no longer gets confused if the Perl stack gets reallocated
during freezing [perl #80074].
.IP "\(bu" 4
Sys::Hostname has been upgraded from version 1.11 to 1.16.
.IP "\(bu" 4
Term::ANSIColor has been upgraded from version 2.02 to 3.00.
.IP "\(bu" 4
Term::UI has been upgraded from version 0.20 to 0.26.
.IP "\(bu" 4
Test::Harness has been upgraded from version 3.17 to 3.23.
.IP "\(bu" 4
Test::Simple has been upgraded from version 0.94 to 0.98.
.Sp
Among many other things, subtests without a \f(CW\*(C`plan\*(C'\fR or \f(CW\*(C`no_plan\*(C'\fR now have an
implicit \fIdone_testing()\fR added to them.
.IP "\(bu" 4
Thread::Semaphore has been upgraded from version 2.09 to 2.12.
.Sp
It provides two new methods that give more control over the decrementing of
semaphores: \f(CW\*(C`down_nb\*(C'\fR and \f(CW\*(C`down_force\*(C'\fR.
.IP "\(bu" 4
Thread::Queue has been upgraded from version 2.11 to 2.12.
.IP "\(bu" 4
The threads pragma has been upgraded from version 1.75 to 1.83.
.IP "\(bu" 4
The threads::shared pragma has been upgraded from version 1.32 to 1.37.
.IP "\(bu" 4
Tie::Hash has been upgraded from version 1.03 to 1.04.
.Sp
Calling \f(CW\*(C`Tie::Hash\->TIEHASH()\*(C'\fR used to loop forever.  Now it \f(CW\*(C`croak\*(C'\fRs.
.IP "\(bu" 4
Tie::Hash::NamedCapture has been upgraded from version 0.06 to 0.08.
.IP "\(bu" 4
Tie::RefHash has been upgraded from version 1.38 to 1.39.
.IP "\(bu" 4
Time::HiRes has been upgraded from version 1.9719 to 1.9721_01.
.IP "\(bu" 4
Time::Local has been upgraded from version 1.1901_01 to 1.2000.
.IP "\(bu" 4
Time::Piece has been upgraded from version 1.15_01 to 1.20_01.
.IP "\(bu" 4
Unicode::Collate has been upgraded from version 0.52_01 to 0.73.
.Sp
Unicode::Collate has been updated to use Unicode 6.0.0.
.Sp
Unicode::Collate::Locale now supports a plethora of new locales: \fIar, be,
bg, de_\|_phonebook, hu, hy, kk, mk, nso, om, tn, vi, hr, ig, ja, ko, ru, sq, 
se, sr, to, uk, zh, zh_\|_big5han, zh_\|_gb2312han, zh_\|_pinyin\fR, and \fIzh_\|_stroke\fR.
.Sp
The following modules have been added:
.Sp
Unicode::Collate::CJK::Big5 for \f(CW\*(C`zh_\|_big5han\*(C'\fR which makes 
tailoring of \s-1CJK\s0 Unified Ideographs in the order of \s-1CLDR\s0's big5han ordering.
.Sp
Unicode::Collate::CJK::GB2312 for \f(CW\*(C`zh_\|_gb2312han\*(C'\fR which makes
tailoring of \s-1CJK\s0 Unified Ideographs in the order of \s-1CLDR\s0's gb2312han ordering.
.Sp
Unicode::Collate::CJK::JISX0208 which makes tailoring of 6355 kanji 
(\s-1CJK\s0 Unified Ideographs) in the \s-1JIS X 0208\s0 order.
.Sp
Unicode::Collate::CJK::Korean which makes tailoring of \s-1CJK\s0 Unified Ideographs 
in the order of \s-1CLDR\s0's Korean ordering.
.Sp
Unicode::Collate::CJK::Pinyin for \f(CW\*(C`zh_\|_pinyin\*(C'\fR which makes
tailoring of \s-1CJK\s0 Unified Ideographs in the order of \s-1CLDR\s0's pinyin ordering.
.Sp
Unicode::Collate::CJK::Stroke for \f(CW\*(C`zh_\|_stroke\*(C'\fR which makes
tailoring of \s-1CJK\s0 Unified Ideographs in the order of \s-1CLDR\s0's stroke ordering.
.Sp
This also sees the switch from using the pure-Perl version of this
module to the \s-1XS\s0 version.
.IP "\(bu" 4
Unicode::Normalize has been upgraded from version 1.03 to 1.10.
.IP "\(bu" 4
Unicode::UCD has been upgraded from version 0.27 to 0.32.
.Sp
A new function, \fIUnicode::UCD::num()\fR, has been added.  This function
returns the numeric value of the string passed it or \f(CW\*(C`undef\*(C'\fR if the string
in its entirety has no \*(L"safe\*(R" numeric value.  (For more detail, and for the
definition of \*(L"safe\*(R", see \*(L"\fInum()\fR\*(R" in Unicode::UCD.)
.Sp
This upgrade also includes several bug fixes:
.RS 4
.IP "\fIcharinfo()\fR" 4
.IX Item "charinfo()"
.RS 4
.PD 0
.IP "\(bu" 4
.PD
It is now updated to Unicode Version 6.0.0 with \fICorrigendum #8\fR, 
excepting that, just as with Perl 5.14, the code point at U+1F514 has no name.
.IP "\(bu" 4
Hangul syllable code points have the correct names, and their
decompositions are always output without requiring Lingua::KO::Hangul::Util
to be installed.
.IP "\(bu" 4
\&\s-1CJK \s0(Chinese-Japanese-Korean) code points U+2A700 to U+2B734
and U+2B740 to U+2B81D are now properly handled.
.IP "\(bu" 4
Numeric values are now output for those \s-1CJK\s0 code points that have them.
.IP "\(bu" 4
Names output for code points with multiple aliases are now the
corrected ones.
.RE
.RS 4
.RE
.IP "\fIcharscript()\fR" 4
.IX Item "charscript()"
This now correctly returns \*(L"Unknown\*(R" instead of \f(CW\*(C`undef\*(C'\fR for the script
of a code point that hasn't been assigned another one.
.IP "\fIcharblock()\fR" 4
.IX Item "charblock()"
This now correctly returns \*(L"No_Block\*(R" instead of \f(CW\*(C`undef\*(C'\fR for the block
of a code point that hasn't been assigned to another one.
.RE
.RS 4
.RE
.IP "\(bu" 4
The version pragma has been upgraded from 0.82 to 0.88.
.Sp
Because of a bug, now fixed, the \fIis_strict()\fR and \fIis_lax()\fR functions did not
work when exported (5.12.1).
.IP "\(bu" 4
The warnings pragma has been upgraded from version 1.09 to 1.12.
.Sp
Calling \f(CW\*(C`use warnings\*(C'\fR without arguments is now significantly more efficient.
.IP "\(bu" 4
The warnings::register pragma has been upgraded from version 1.01 to 1.02.
.Sp
It is now possible to register warning categories other than the names of
packages using warnings::register.  See \fIperllexwarn\fR\|(1) for more information.
.IP "\(bu" 4
XSLoader has been upgraded from version 0.10 to 0.13.
.IP "\(bu" 4
VMS::DCLsym has been upgraded from version 1.03 to 1.05.
.Sp
Two bugs have been fixed [perl #84086]:
.Sp
The symbol table name was lost when tying a hash, due to a thinko in
\&\f(CW\*(C`TIEHASH\*(C'\fR.  The result was that all tied hashes interacted with the
local symbol table.
.Sp
Unless a symbol table name had been explicitly specified in the call
to the constructor, querying the special key \f(CW\*(C`:LOCAL\*(C'\fR failed to
identify objects connected to the local symbol table.
.IP "\(bu" 4
The Win32 module has been upgraded from version 0.39 to 0.44.
.Sp
This release has several new functions: \fIWin32::GetSystemMetrics()\fR,
\&\fIWin32::GetProductInfo()\fR, \fIWin32::GetOSDisplayName()\fR.
.Sp
The names returned by \fIWin32::GetOSName()\fR and \fIWin32::GetOSDisplayName()\fR
have been corrected.
.IP "\(bu" 4
XS::Typemap has been upgraded from version 0.03 to 0.05.
.SS "Removed Modules and Pragmata"
.IX Subsection "Removed Modules and Pragmata"
As promised in Perl 5.12.0's release notes, the following modules have
been removed from the core distribution, and if needed should be installed
from \s-1CPAN\s0 instead.
.IP "\(bu" 4
Class::ISA has been removed from the Perl core.  Prior version was 0.36.
.IP "\(bu" 4
Pod::Plainer has been removed from the Perl core.  Prior version was 1.02.
.IP "\(bu" 4
Switch has been removed from the Perl core.  Prior version was 2.16.
.PP
The removal of Shell has been deferred until after 5.14, as the
implementation of Shell shipped with 5.12.0 did not correctly issue the
warning that it was to be removed from core.
.SH "Documentation"
.IX Header "Documentation"
.SS "New Documentation"
.IX Subsection "New Documentation"
\fIperlgpl\fR
.IX Subsection "perlgpl"
.PP
perlgpl has been updated to contain \s-1GPL\s0 version 1, as is included in the
\&\fI\s-1README\s0\fR distributed with Perl (5.12.1).
.PP
\fIPerl 5.12.x delta files\fR
.IX Subsection "Perl 5.12.x delta files"
.PP
The perldelta files for Perl 5.12.1 to 5.12.3 have been added from the
maintenance branch: perl5121delta, perl5122delta, perl5123delta.
.PP
\fIperlpodstyle\fR
.IX Subsection "perlpodstyle"
.PP
New style guide for \s-1POD\s0 documentation,
split mostly from the \s-1NOTES\s0 section of the \fIpod2man\fR\|(1) manpage.
.PP
\fIperlsource, perlinterp, perlhacktut, and perlhacktips\fR
.IX Subsection "perlsource, perlinterp, perlhacktut, and perlhacktips"
.PP
See \*(L"perlhack and perlrepository revamp\*(R", below.
.SS "Changes to Existing Documentation"
.IX Subsection "Changes to Existing Documentation"
\fIperlmodlib is now complete\fR
.IX Subsection "perlmodlib is now complete"
.PP
The perlmodlib manpage that came with Perl 5.12.0 was missing several
modules due to a bug in the script that generates the list.  This has been
fixed [perl #74332] (5.12.1).
.PP
\fIReplace incorrect tr/// table in perlebcdic\fR
.IX Subsection "Replace incorrect tr/// table in perlebcdic"
.PP
perlebcdic contains a helpful table to use in \f(CW\*(C`tr///\*(C'\fR to convert
between \s-1EBCDIC\s0 and Latin1/ASCII.  The table was the inverse of the one
it describes, though the code that used the table worked correctly for
the specific example given.
.PP
The table has been corrected and the sample code changed to correspond.
.PP
The table has also been changed to hex from octal, and the recipes in the
pod have been altered to print out leading zeros to make all values
the same length.
.PP
\fITricks for user-defined casing\fR
.IX Subsection "Tricks for user-defined casing"
.PP
perlunicode now contains an explanation of how to override, mangle
and otherwise tweak the way Perl handles upper\-, lower\- and other-case
conversions on Unicode data, and how to provide scoped changes to alter
one's own code's behaviour without stomping on anybody else's.
.PP
\fI\s-1INSTALL\s0 explicitly states that Perl requires a C89 compiler\fR
.IX Subsection "INSTALL explicitly states that Perl requires a C89 compiler"
.PP
This was already true, but it's now Officially Stated For The Record
(5.12.2).
.PP
\fIExplanation of \f(CI\*(C`\ex\f(CIHH\f(CI\*(C'\fI and \f(CI\*(C`\eo\f(CIOOO\f(CI\*(C'\fI escapes\fR
.IX Subsection "Explanation of xHH and oOOO escapes"
.PP
perlop has been updated with more detailed explanation of these two
character escapes.
.PP
\fI\f(BI\-0\f(BI\s-1NNN\s0\f(BI\fI switch\fR
.IX Subsection "-0NNN switch"
.PP
In perlrun, the behaviour of the \fB\-0NNN\fR switch for \fB\-0400\fR or higher
has been clarified (5.12.2).
.PP
\fIMaintenance policy\fR
.IX Subsection "Maintenance policy"
.PP
perlpolicy now contains the policy on what patches are acceptable for
maintenance branches (5.12.1).
.PP
\fIDeprecation policy\fR
.IX Subsection "Deprecation policy"
.PP
perlpolicy now contains the policy on compatibility and deprecation
along with definitions of terms like \*(L"deprecation\*(R" (5.12.2).
.PP
\fINew descriptions in perldiag\fR
.IX Subsection "New descriptions in perldiag"
.PP
The following existing diagnostics are now documented:
.IP "\(bu" 4
Ambiguous use of \f(CW%c\fR resolved as operator \f(CW%c\fR
.IP "\(bu" 4
Ambiguous use of \f(CW%c\fR{%s} resolved to \f(CW%c\fR%s
.IP "\(bu" 4
Ambiguous use of \f(CW%c\fR{%s[...]} resolved to \f(CW%c\fR%s[...]
.IP "\(bu" 4
Ambiguous use of \f(CW%c\fR{%s{...}} resolved to \f(CW%c\fR%s{...}
.IP "\(bu" 4
Ambiguous use of \-%s resolved as \-&%s()
.IP "\(bu" 4
Invalid strict version format (%s)
.IP "\(bu" 4
Invalid version format (%s)
.IP "\(bu" 4
Invalid version object
.PP
\fIperlbook\fR
.IX Subsection "perlbook"
.PP
perlbook has been expanded to cover many more popular books.
.PP
\fI\f(CI\*(C`SvTRUE\*(C'\fI macro\fR
.IX Subsection "SvTRUE macro"
.PP
The documentation for the \f(CW\*(C`SvTRUE\*(C'\fR macro in
perlapi was simply wrong in stating that
get-magic is not processed.  It has been corrected.
.PP
\fIop manipulation functions\fR
.IX Subsection "op manipulation functions"
.PP
Several \s-1API\s0 functions that process optrees have been newly documented.
.PP
\fIperlvar revamp\fR
.IX Subsection "perlvar revamp"
.PP
perlvar reorders the variables and groups them by topic.  Each variable
introduced after Perl 5.000 notes the first version in which it is 
available.  perlvar also has a new section for deprecated variables to
note when they were removed.
.PP
\fIArray and hash slices in scalar context\fR
.IX Subsection "Array and hash slices in scalar context"
.PP
These are now documented in perldata.
.PP
\fI\f(CI\*(C`use locale\*(C'\fI and formats\fR
.IX Subsection "use locale and formats"
.PP
perlform and perllocale have been corrected to state that
\&\f(CW\*(C`use locale\*(C'\fR affects formats.
.PP
\fIoverload\fR
.IX Subsection "overload"
.PP
overload's documentation has practically undergone a rewrite.  It
is now much more straightforward and clear.
.PP
\fIperlhack and perlrepository revamp\fR
.IX Subsection "perlhack and perlrepository revamp"
.PP
The perlhack document is now much shorter, and focuses on the Perl 5
development process and submitting patches to Perl.  The technical content
has been moved to several new documents, perlsource, perlinterp,
perlhacktut, and perlhacktips.  This technical content has 
been only lightly edited.
.PP
The perlrepository document has been renamed to perlgit.  This new
document is just a how-to on using git with the Perl source code.
Any other content that used to be in perlrepository has been moved
to perlhack.
.PP
\fITime::Piece examples\fR
.IX Subsection "Time::Piece examples"
.PP
Examples in perlfaq4 have been updated to show the use of
Time::Piece.
.SH "Diagnostics"
.IX Header "Diagnostics"
The following additions or changes have been made to diagnostic output,
including warnings and fatal error messages.  For the complete list of
diagnostic messages, see perldiag.
.SS "New Diagnostics"
.IX Subsection "New Diagnostics"
\fINew Errors\fR
.IX Subsection "New Errors"
.IP "Closure prototype called" 4
.IX Item "Closure prototype called"
This error occurs when a subroutine reference passed to an attribute
handler is called, if the subroutine is a closure [perl #68560].
.ie n .IP "Insecure user-defined property %s" 4
.el .IP "Insecure user-defined property \f(CW%s\fR" 4
.IX Item "Insecure user-defined property %s"
Perl detected tainted data when trying to compile a regular
expression that contains a call to a user-defined character property
function, meaning \f(CW\*(C`\ep{IsFoo}\*(C'\fR or \f(CW\*(C`\ep{InFoo}\*(C'\fR.
See \*(L"User-Defined Character Properties\*(R" in perlunicode and perlsec.
.IP "panic: gp_free failed to free glob pointer \- something is repeatedly re-creating entries" 4
.IX Item "panic: gp_free failed to free glob pointer - something is repeatedly re-creating entries"
This new error is triggered if a destructor called on an object in a
typeglob that is being freed creates a new typeglob entry containing an
object with a destructor that creates a new entry containing an object etc.
.IP "Parsing code internal error (%s)" 4
.IX Item "Parsing code internal error (%s)"
This new fatal error is produced when parsing
code supplied by an extension violates the
parser's \s-1API\s0 in a detectable way.
.ie n .IP "refcnt: fd %d%s" 4
.el .IP "refcnt: fd \f(CW%d\fR%s" 4
.IX Item "refcnt: fd %d%s"
This new error only occurs if a internal consistency check fails when a
pipe is about to be closed.
.ie n .IP "Regexp modifier ""/%c"" may not appear twice" 4
.el .IP "Regexp modifier ``/%c'' may not appear twice" 4
.IX Item "Regexp modifier /%c may not appear twice"
The regular expression pattern has one of the
mutually exclusive modifiers repeated.
.ie n .IP "Regexp modifiers ""/%c"" and ""/%c"" are mutually exclusive" 4
.el .IP "Regexp modifiers ``/%c'' and ``/%c'' are mutually exclusive" 4
.IX Item "Regexp modifiers /%c and /%c are mutually exclusive"
The regular expression pattern has more than one of the mutually
exclusive modifiers.
.ie n .IP "Using !~ with %s doesn't make sense" 4
.el .IP "Using !~ with \f(CW%s\fR doesn't make sense" 4
.IX Item "Using !~ with %s doesn't make sense"
This error occurs when \f(CW\*(C`!~\*(C'\fR is used with \f(CW\*(C`s///r\*(C'\fR or \f(CW\*(C`y///r\*(C'\fR.
.PP
\fINew Warnings\fR
.IX Subsection "New Warnings"
.ie n .IP """\eb{"" is deprecated; use ""\eb\e{"" instead" 4
.el .IP "``\eb{'' is deprecated; use ``\eb\e{'' instead" 4
.IX Item "b{ is deprecated; use b{ instead"
.PD 0
.ie n .IP """\eB{"" is deprecated; use ""\eB\e{"" instead" 4
.el .IP "``\eB{'' is deprecated; use ``\eB\e{'' instead" 4
.IX Item "B{ is deprecated; use B{ instead"
.PD
Use of an unescaped \*(L"{\*(R" immediately following a \f(CW\*(C`\eb\*(C'\fR or \f(CW\*(C`\eB\*(C'\fR is now
deprecated in order to reserve its use for Perl itself in a future release.
.ie n .IP "Operation ""%s"" returns its argument for ..." 4
.el .IP "Operation ``%s'' returns its argument for ..." 4
.IX Item "Operation %s returns its argument for ..."
Performing an operation requiring Unicode semantics (such as case-folding)
on a Unicode surrogate or a non-Unicode character now triggers this
warning.
.IP "Use of qw(...) as parentheses is deprecated" 4
.IX Item "Use of qw(...) as parentheses is deprecated"
See \*(L"Use of qw(...) as parentheses\*(R", above, for details.
.SS "Changes to Existing Diagnostics"
.IX Subsection "Changes to Existing Diagnostics"
.IP "\(bu" 4
The \*(L"Variable \f(CW$foo\fR is not imported\*(R" warning that precedes a
\&\f(CW\*(C`strict \*(Aqvars\*(Aq\*(C'\fR error has now been assigned the \*(L"misc\*(R" category, so that
\&\f(CW\*(C`no warnings\*(C'\fR will suppress it [perl #73712].
.IP "\(bu" 4
\&\fIwarn()\fR and \fIdie()\fR now produce \*(L"Wide character\*(R" warnings when fed a
character outside the byte range if \f(CW\*(C`STDERR\*(C'\fR is a byte-sized handle.
.IP "\(bu" 4
The \*(L"Layer does not match this perl\*(R" error message has been replaced with
these more helpful messages [perl #73754]:
.RS 4
.IP "\(bu" 4
PerlIO layer function table size (%d) does not match size expected by this
perl (%d)
.IP "\(bu" 4
PerlIO layer instance size (%d) does not match size expected by this perl
(%d)
.RE
.RS 4
.RE
.IP "\(bu" 4
The \*(L"Found = in conditional\*(R" warning that is emitted when a constant is
assigned to a variable in a condition is now withheld if the constant is
actually a subroutine or one generated by \f(CW\*(C`use constant\*(C'\fR, since the value
of the constant may not be known at the time the program is written
[perl #77762].
.IP "\(bu" 4
Previously, if none of the \fIgethostbyaddr()\fR, \fIgethostbyname()\fR and
\&\fIgethostent()\fR functions were implemented on a given platform, they would
all die with the message \*(L"Unsupported socket function 'gethostent' called\*(R",
with analogous messages for getnet*() and getserv*().  This has been
corrected.
.IP "\(bu" 4
The warning message about unrecognized regular expression escapes passed
through has been changed to include any literal \*(L"{\*(R" following the
two-character escape.  For example, \*(L"\eq{\*(R" is now emitted instead of \*(L"\eq\*(R".
.SH "Utility Changes"
.IX Header "Utility Changes"
\fI\fIperlbug\fI\|(1)\fR
.IX Subsection "perlbug"
.IP "\(bu" 4
perlbug now looks in the \s-1EMAIL\s0 environment variable for a return address
if the REPLY-TO and \s-1REPLYTO\s0 variables are empty.
.IP "\(bu" 4
perlbug did not previously generate a \*(L"From:\*(R" header, potentially
resulting in dropped mail; it now includes that header.
.IP "\(bu" 4
The user's address is now used as the Return-Path.
.Sp
Many systems these days don't have a valid Internet domain name, and
perlbug@perl.org does not accept email with a return-path that does
not resolve.  So the user's address is now passed to sendmail so it's
less likely to get stuck in a mail queue somewhere [perl #82996].
.IP "\(bu" 4
perlbug now always gives the reporter a chance to change the email
address it guesses for them (5.12.2).
.IP "\(bu" 4
perlbug should no longer warn about uninitialized values when using the \fB\-d\fR
and \fB\-v\fR options (5.12.2).
.PP
\fIperl5db.pl\fR
.IX Subsection "perl5db.pl"
.IP "\(bu" 4
The remote terminal works after forking and spawns new sessions, one
per forked process.
.PP
\fIptargrep\fR
.IX Subsection "ptargrep"
.IP "\(bu" 4
ptargrep is a new utility to apply pattern matching to the contents of
files  in a tar archive.  It comes with \f(CW\*(C`Archive::Tar\*(C'\fR.
.SH "Configuration and Compilation"
.IX Header "Configuration and Compilation"
See also \*(L"Naming fixes in Policy_sh.SH may invalidate Policy.sh\*(R",
above.
.IP "\(bu" 4
\&\s-1CCINCDIR\s0 and \s-1CCLIBDIR\s0 for the mingw64 cross-compiler are now correctly
under \fI$(\s-1CCHOME\s0)\emingw\einclude\fR and \fI\elib\fR rather than immediately below
\&\fI$(\s-1CCHOME\s0)\fR.
.Sp
This means the \*(L"incpath\*(R", \*(L"libpth\*(R", \*(L"ldflags\*(R", \*(L"lddlflags\*(R" and
\&\*(L"ldflags_nolargefiles\*(R" values in \fIConfig.pm\fR and \fIConfig_heavy.pl\fR are now
set correctly.
.IP "\(bu" 4
\&\f(CW\*(C`make test.valgrind\*(C'\fR has been adjusted to account for \fIcpan/dist/ext\fR
separation.
.IP "\(bu" 4
On compilers that support it, \fB\-Wwrite\-strings\fR is now added to cflags by
default.
.IP "\(bu" 4
The Encode module can now (once again) be included in a static Perl
build.  The special-case handling for this situation got broken in Perl
5.11.0, and has now been repaired.
.IP "\(bu" 4
The previous default size of a PerlIO buffer (4096 bytes) has been increased
to the larger of 8192 bytes and your local \s-1BUFSIZ. \s0 Benchmarks show that doubling
this decade-old default increases read and write performance by around
25% to 50% when using the default layers of perlio on top of unix.  To choose
a non-default size, such as to get back the old value or to obtain an even
larger value, configure with:
.Sp
.Vb 1
\&     ./Configure \-Accflags=\-DPERLIOBUF_DEFAULT_BUFSIZ=N
.Ve
.Sp
where N is the desired size in bytes; it should probably be a multiple of
your page size.
.IP "\(bu" 4
An \*(L"incompatible operand types\*(R" error in ternary expressions when building
with \f(CW\*(C`clang\*(C'\fR has been fixed (5.12.2).
.IP "\(bu" 4
Perl now skips setuid File::Copy tests on partitions it detects mounted
as \f(CW\*(C`nosuid\*(C'\fR (5.12.2).
.SH "Platform Support"
.IX Header "Platform Support"
.SS "New Platforms"
.IX Subsection "New Platforms"
.IP "\s-1AIX\s0" 4
.IX Item "AIX"
Perl now builds on \s-1AIX 4.2 \s0(5.12.1).
.SS "Discontinued Platforms"
.IX Subsection "Discontinued Platforms"
.IP "Apollo DomainOS" 4
.IX Item "Apollo DomainOS"
The last vestiges of support for this platform have been excised from
the Perl distribution.  It was officially discontinued in version 5.12.0.
It had not worked for years before that.
.IP "MacOS Classic" 4
.IX Item "MacOS Classic"
The last vestiges of support for this platform have been excised from the
Perl distribution.  It was officially discontinued in an earlier version.
.SS "Platform-Specific Notes"
.IX Subsection "Platform-Specific Notes"
\fI\s-1AIX\s0\fR
.IX Subsection "AIX"
.IP "\(bu" 4
\&\fI\s-1README\s0.aix\fR has been updated with information about the \s-1XL C/\*(C+ V11\s0 compiler
suite (5.12.2).
.PP
\fI\s-1ARM\s0\fR
.IX Subsection "ARM"
.IP "\(bu" 4
The \f(CW\*(C`d_u32align\*(C'\fR configuration probe on \s-1ARM\s0 has been fixed (5.12.2).
.PP
\fICygwin\fR
.IX Subsection "Cygwin"
.IP "\(bu" 4
MakeMaker has been updated to build manpages on cygwin.
.IP "\(bu" 4
Improved rebase behaviour
.Sp
If a \s-1DLL\s0 is updated on cygwin the old imagebase address is reused.
This solves most rebase errors, especially when updating on core \s-1DLL\s0's.
See <http://www.tishler.net/jason/software/rebase/rebase\-2.4.2.README> 
for more information.
.IP "\(bu" 4
Support for the standard cygwin dll prefix (needed for FFIs)
.IP "\(bu" 4
Updated build hints file
.PP
\fIFreeBSD 7\fR
.IX Subsection "FreeBSD 7"
.IP "\(bu" 4
FreeBSD 7 no longer contains \fI/usr/bin/objformat\fR.  At build time,
Perl now skips the \fIobjformat\fR check for versions 7 and higher and
assumes \s-1ELF \s0(5.12.1).
.PP
\fIHP-UX\fR
.IX Subsection "HP-UX"
.IP "\(bu" 4
Perl now allows \fB\-Duse64bitint\fR without promoting to \f(CW\*(C`use64bitall\*(C'\fR on HP-UX
(5.12.1).
.PP
\fI\s-1IRIX\s0\fR
.IX Subsection "IRIX"
.IP "\(bu" 4
Conversion of strings to floating-point numbers is now more accurate on
\&\s-1IRIX\s0 systems [perl #32380].
.PP
\fIMac \s-1OS X\s0\fR
.IX Subsection "Mac OS X"
.IP "\(bu" 4
Early versions of Mac \s-1OS X \s0(Darwin) had buggy implementations of the
\&\fIsetregid()\fR, \fIsetreuid()\fR, setrgid(,) and \fIsetruid()\fR functions, so Perl
would pretend they did not exist.
.Sp
These functions are now recognised on Mac \s-1OS 10.5 \s0(Leopard; Darwin 9) and
higher, as they have been fixed [perl #72990].
.PP
\fIMirBSD\fR
.IX Subsection "MirBSD"
.IP "\(bu" 4
Previously if you built Perl with a shared \fIlibperl.so\fR on MirBSD (the
default config), it would work up to the installation; however, once
installed, it would be unable to find \fIlibperl\fR.  Path handling is now
treated as in the other \s-1BSD\s0 dialects.
.PP
\fINetBSD\fR
.IX Subsection "NetBSD"
.IP "\(bu" 4
The NetBSD hints file has been changed to make the system malloc the
default.
.PP
\fIOpenBSD\fR
.IX Subsection "OpenBSD"
.IP "\(bu" 4
OpenBSD > 3.7 has a new malloc implementation which is \fImmap\fR\-based,
and as such can release memory back to the \s-1OS\s0; however, Perl's use of
this malloc causes a substantial slowdown, so we now default to using
Perl's malloc instead [perl #75742].
.PP
\fIOpenVOS\fR
.IX Subsection "OpenVOS"
.IP "\(bu" 4
Perl now builds again with OpenVOS (formerly known as Stratus \s-1VOS\s0)
[perl #78132] (5.12.3).
.PP
\fISolaris\fR
.IX Subsection "Solaris"
.IP "\(bu" 4
DTrace is now supported on Solaris.  There used to be build failures, but
these have been fixed [perl #73630] (5.12.3).
.PP
\fI\s-1VMS\s0\fR
.IX Subsection "VMS"
.IP "\(bu" 4
Extension building on older (pre 7.3\-2) \s-1VMS\s0 systems was broken because
configure.com hit the \s-1DCL\s0 symbol length limit of 1K.  We now work within
this limit when assembling the list of extensions in the core build (5.12.1).
.IP "\(bu" 4
We fixed configuring and building Perl with \fB\-Uuseperlio\fR (5.12.1).
.IP "\(bu" 4
\&\f(CW\*(C`PerlIOUnix_open\*(C'\fR now honours the default permissions on \s-1VMS.\s0
.Sp
When \f(CW\*(C`perlio\*(C'\fR became the default and \f(CW\*(C`unix\*(C'\fR became the default bottom layer,
the most common path for creating files from Perl became \f(CW\*(C`PerlIOUnix_open\*(C'\fR,
which has always explicitly used \f(CW0666\fR as the permission mask.  This prevents
inheriting permissions from \s-1RMS\s0 defaults and ACLs, so to avoid that problem,
we now pass \f(CW0777\fR to \fIopen()\fR.  In the \s-1VMS CRTL, \s0\f(CW0777\fR has a special
meaning over and above intersecting with the current umask; specifically, it
allows Unix syscalls to preserve native default permissions (5.12.3).
.IP "\(bu" 4
The shortening of symbols longer than 31 characters in the core C sources
and in extensions is now by default done by the C compiler rather than by
xsubpp (which could only do so for generated symbols in \s-1XS\s0 code).  You can
reenable xsubpp's symbol shortening by configuring with \-Uuseshortenedsymbols,
but you'll have some work to do to get the core sources to compile.
.IP "\(bu" 4
Record-oriented files (record format variable or variable with fixed control)
opened for write by the \f(CW\*(C`perlio\*(C'\fR layer will now be line-buffered to prevent the
introduction of spurious line breaks whenever the perlio buffer fills up.
.IP "\(bu" 4
\&\fIgit_version.h\fR is now installed on \s-1VMS. \s0 This was an oversight in v5.12.0 which
caused some extensions to fail to build (5.12.2).
.IP "\(bu" 4
Several memory leaks in \fIstat()\fR have been fixed (5.12.2).
.IP "\(bu" 4
A memory leak in \fIPerl_rename()\fR due to a double allocation has been
fixed (5.12.2).
.IP "\(bu" 4
A memory leak in \fIvms_fid_to_name()\fR (used by \fIrealpath()\fR and
\&\fIrealname()\fR> has been fixed (5.12.2).
.PP
\fIWindows\fR
.IX Subsection "Windows"
.PP
See also \*(L"\fIfork()\fR emulation will not wait for signalled children\*(R" and
\&\*(L"Perl source code is read in text mode on Windows\*(R", above.
.IP "\(bu" 4
Fixed build process for \s-1SDK2003SP1\s0 compilers.
.IP "\(bu" 4
Compilation with Visual Studio 2010 is now supported.
.IP "\(bu" 4
When using old 32\-bit compilers, the define \f(CW\*(C`_USE_32BIT_TIME_T\*(C'\fR is now
set in \f(CW$Config{ccflags}\fR.  This improves portability when compiling
\&\s-1XS\s0 extensions using new compilers, but for a Perl compiled with old 32\-bit
compilers.
.IP "\(bu" 4
\&\f(CW$Config{gccversion}\fR is now set correctly when Perl is built using the
mingw64 compiler from <http://mingw64.org> [perl #73754].
.IP "\(bu" 4
When building Perl with the mingw64 x64 cross-compiler \f(CW\*(C`incpath\*(C'\fR,
\&\f(CW\*(C`libpth\*(C'\fR, \f(CW\*(C`ldflags\*(C'\fR, \f(CW\*(C`lddlflags\*(C'\fR and \f(CW\*(C`ldflags_nolargefiles\*(C'\fR values
in \fIConfig.pm\fR and \fIConfig_heavy.pl\fR were not previously being set
correctly because, with that compiler, the include and lib directories
are not immediately below \f(CW\*(C`$(CCHOME)\*(C'\fR (5.12.2).
.IP "\(bu" 4
The build process proceeds more smoothly with mingw and dmake when
\&\fIC:\eMSYS\ebin\fR is in the \s-1PATH,\s0 due to a \f(CW\*(C`Cwd\*(C'\fR fix.
.IP "\(bu" 4
Support for building with Visual \*(C+ 2010 is now underway, but is not yet
complete.  See \fI\s-1README\s0.win32\fR or perlwin32 for more details.
.IP "\(bu" 4
The option to use an externally-supplied \fIcrypt()\fR, or to build with no
\&\fIcrypt()\fR at all, has been removed.  Perl supplies its own \fIcrypt()\fR
implementation for Windows, and the political situation that required
this part of the distribution to sometimes be omitted is long gone.
.SH "Internal Changes"
.IX Header "Internal Changes"
.SS "New APIs"
.IX Subsection "New APIs"
\fI\s-1CLONE_PARAMS\s0 structure added to ease correct thread creation\fR
.IX Subsection "CLONE_PARAMS structure added to ease correct thread creation"
.PP
Modules that create threads should now create \f(CW\*(C`CLONE_PARAMS\*(C'\fR structures
by calling the new function \fIPerl_clone_params_new()\fR, and free them with
\&\fIPerl_clone_params_del()\fR.  This will ensure compatibility with any future
changes to the internals of the \f(CW\*(C`CLONE_PARAMS\*(C'\fR structure layout, and that
it is correctly allocated and initialised.
.PP
\fINew parsing functions\fR
.IX Subsection "New parsing functions"
.PP
Several functions have been added for parsing Perl statements and
expressions.  These functions are meant to be used by \s-1XS\s0 code invoked
during Perl parsing, in a recursive-descent manner, to allow modules to
augment the standard Perl syntax.
.IP "\(bu" 4
\&\fIparse_stmtseq()\fR
parses a sequence of statements, up to closing brace or \s-1EOF.\s0
.IP "\(bu" 4
\&\fIparse_fullstmt()\fR
parses a complete Perl statement, including optional label.
.IP "\(bu" 4
\&\fIparse_barestmt()\fR
parses a statement without a label.
.IP "\(bu" 4
\&\fIparse_block()\fR
parses a code block.
.IP "\(bu" 4
\&\fIparse_label()\fR
parses a statement label, separate from statements.
.IP "\(bu" 4
\&\f(CW\*(C`parse_fullexpr()\*(C'\fR,
\&\f(CW\*(C`parse_listexpr()\*(C'\fR,
\&\f(CW\*(C`parse_termexpr()\*(C'\fR, and
\&\f(CW\*(C`parse_arithexpr()\*(C'\fR
parse expressions at various precedence levels.
.PP
\fIHints hash \s-1API\s0\fR
.IX Subsection "Hints hash API"
.PP
A new C \s-1API\s0 for introspecting the hinthash \f(CW\*(C`%^H\*(C'\fR at runtime has been
added.  See \f(CW\*(C`cop_hints_2hv\*(C'\fR, \f(CW\*(C`cop_hints_fetchpvn\*(C'\fR, \f(CW\*(C`cop_hints_fetchpvs\*(C'\fR,
\&\f(CW\*(C`cop_hints_fetchsv\*(C'\fR, and \f(CW\*(C`hv_copy_hints_hv\*(C'\fR in perlapi for details.
.PP
A new, experimental \s-1API\s0 has been added for accessing the internal
structure that Perl uses for \f(CW\*(C`%^H\*(C'\fR.  See the functions beginning with
\&\f(CW\*(C`cophh_\*(C'\fR in perlapi.
.PP
\fIC interface to \fIcaller()\fI\fR
.IX Subsection "C interface to caller()"
.PP
The \f(CW\*(C`caller_cx\*(C'\fR function has been added as an XSUB-writer's equivalent of
\&\fIcaller()\fR.  See perlapi for details.
.PP
\fICustom per-subroutine check hooks\fR
.IX Subsection "Custom per-subroutine check hooks"
.PP
\&\s-1XS\s0 code in an extension module can now annotate a subroutine (whether
implemented in \s-1XS\s0 or in Perl) so that nominated \s-1XS\s0 code will be called
at compile time (specifically as part of op checking) to change the op
tree of that subroutine.  The compile-time check function (supplied by
the extension module) can implement argument processing that can't be
expressed as a prototype, generate customised compile-time warnings,
perform constant folding for a pure function, inline a subroutine
consisting of sufficiently simple ops, replace the whole call with a
custom op, and so on.  This was previously all possible by hooking the
\&\f(CW\*(C`entersub\*(C'\fR op checker, but the new mechanism makes it easy to tie the
hook to a specific subroutine.  See \*(L"cv_set_call_checker\*(R" in perlapi.
.PP
To help in writing custom check hooks, several subtasks within standard
\&\f(CW\*(C`entersub\*(C'\fR op checking have been separated out and exposed in the \s-1API.\s0
.PP
\fIImproved support for custom OPs\fR
.IX Subsection "Improved support for custom OPs"
.PP
Custom ops can now be registered with the new \f(CW\*(C`custom_op_register\*(C'\fR C
function and the \f(CW\*(C`XOP\*(C'\fR structure.  This will make it easier to add new
properties of custom ops in the future.  Two new properties have been added
already, \f(CW\*(C`xop_class\*(C'\fR and \f(CW\*(C`xop_peep\*(C'\fR.
.PP
\&\f(CW\*(C`xop_class\*(C'\fR is one of the OA_*OP constants.  It allows B and other
introspection mechanisms to work with custom ops
that aren't BASEOPs.  \f(CW\*(C`xop_peep\*(C'\fR is a pointer to
a function that will be called for ops of this
type from \f(CW\*(C`Perl_rpeep\*(C'\fR.
.PP
See \*(L"Custom Operators\*(R" in perlguts and \*(L"Custom Operators\*(R" in perlapi for more
detail.
.PP
The old \f(CW\*(C`PL_custom_op_names\*(C'\fR/\f(CW\*(C`PL_custom_op_descs\*(C'\fR interface is still
supported but discouraged.
.PP
\fIScope hooks\fR
.IX Subsection "Scope hooks"
.PP
It is now possible for \s-1XS\s0 code to hook into Perl's lexical scope
mechanism at compile time, using the new \f(CW\*(C`Perl_blockhook_register\*(C'\fR
function.  See \*(L"Compile-time scope hooks\*(R" in perlguts.
.PP
\fIThe recursive part of the peephole optimizer is now hookable\fR
.IX Subsection "The recursive part of the peephole optimizer is now hookable"
.PP
In addition to \f(CW\*(C`PL_peepp\*(C'\fR, for hooking into the toplevel peephole optimizer, a
\&\f(CW\*(C`PL_rpeepp\*(C'\fR is now available to hook into the optimizer recursing into
side-chains of the optree.
.PP
\fINew non-magical variants of existing functions\fR
.IX Subsection "New non-magical variants of existing functions"
.PP
The following functions/macros have been added to the \s-1API. \s0 The \f(CW*_nomg\fR
macros are equivalent to their non\-\f(CW\*(C`_nomg\*(C'\fR variants, except that they ignore
get-magic.  Those ending in \f(CW\*(C`_flags\*(C'\fR allow one to specify whether
get-magic is processed.
.PP
.Vb 8
\&  sv_2bool_flags
\&  SvTRUE_nomg
\&  sv_2nv_flags
\&  SvNV_nomg
\&  sv_cmp_flags
\&  sv_cmp_locale_flags
\&  sv_eq_flags
\&  sv_collxfrm_flags
.Ve
.PP
In some of these cases, the non\-\f(CW\*(C`_flags\*(C'\fR functions have
been replaced with wrappers around the new functions.
.PP
\fIpv/pvs/sv versions of existing functions\fR
.IX Subsection "pv/pvs/sv versions of existing functions"
.PP
Many functions ending with pvn now have equivalent \f(CW\*(C`pv/pvs/sv\*(C'\fR versions.
.PP
\fIList op-building functions\fR
.IX Subsection "List op-building functions"
.PP
List op-building functions have been added to the
\&\s-1API. \s0 See op_append_elem,
op_append_list, and
op_prepend_elem in perlapi.
.PP
\fI\f(CI\*(C`LINKLIST\*(C'\fI\fR
.IX Subsection "LINKLIST"
.PP
The \s-1LINKLIST\s0 macro, part of op building that
constructs the execution-order op chain, has been added to the \s-1API.\s0
.PP
\fILocalisation functions\fR
.IX Subsection "Localisation functions"
.PP
The \f(CW\*(C`save_freeop\*(C'\fR, \f(CW\*(C`save_op\*(C'\fR, \f(CW\*(C`save_pushi32ptr\*(C'\fR and \f(CW\*(C`save_pushptrptr\*(C'\fR
functions have been added to the \s-1API.\s0
.PP
\fIStash names\fR
.IX Subsection "Stash names"
.PP
A stash can now have a list of effective names in addition to its usual
name.  The first effective name can be accessed via the \f(CW\*(C`HvENAME\*(C'\fR macro,
which is now the recommended name to use in \s-1MRO\s0 linearisations (\f(CW\*(C`HvNAME\*(C'\fR
being a fallback if there is no \f(CW\*(C`HvENAME\*(C'\fR).
.PP
These names are added and deleted via \f(CW\*(C`hv_ename_add\*(C'\fR and
\&\f(CW\*(C`hv_ename_delete\*(C'\fR.  These two functions are \fInot\fR part of the \s-1API.\s0
.PP
\fINew functions for finding and removing magic\fR
.IX Subsection "New functions for finding and removing magic"
.PP
The \f(CW\*(C`mg_findext()\*(C'\fR and
\&\f(CW\*(C`sv_unmagicext()\*(C'\fR
functions have been added to the \s-1API.\s0
They allow extension authors to find and remove magic attached to
scalars based on both the magic type and the magic virtual table, similar to how
\&\fIsv_magicext()\fR attaches magic of a certain type and with a given virtual table
to a scalar.  This eliminates the need for extensions to walk the list of
\&\f(CW\*(C`MAGIC\*(C'\fR pointers of an \f(CW\*(C`SV\*(C'\fR to find the magic that belongs to them.
.PP
\fI\f(CI\*(C`find_rundefsv\*(C'\fI\fR
.IX Subsection "find_rundefsv"
.PP
This function returns the \s-1SV\s0 representing \f(CW$_\fR, whether it's lexical
or dynamic.
.PP
\fI\f(CI\*(C`Perl_croak_no_modify\*(C'\fI\fR
.IX Subsection "Perl_croak_no_modify"
.PP
\&\fIPerl_croak_no_modify()\fR is short-hand for
\&\f(CW\*(C`Perl_croak("%s", PL_no_modify)\*(C'\fR.
.PP
\fI\f(CI\*(C`PERL_STATIC_INLINE\*(C'\fI define\fR
.IX Subsection "PERL_STATIC_INLINE define"
.PP
The \f(CW\*(C`PERL_STATIC_INLINE\*(C'\fR define has been added to provide the best-guess
incantation to use for static inline functions, if the C compiler supports
C99\-style static inline.  If it doesn't, it'll give a plain \f(CW\*(C`static\*(C'\fR.
.PP
\&\f(CW\*(C`HAS_STATIC_INLINE\*(C'\fR can be used to check if the compiler actually supports
inline functions.
.PP
\fINew \f(CI\*(C`pv_escape\*(C'\fI option for hexadecimal escapes\fR
.IX Subsection "New pv_escape option for hexadecimal escapes"
.PP
A new option, \f(CW\*(C`PERL_PV_ESCAPE_NONASCII\*(C'\fR, has been added to \f(CW\*(C`pv_escape\*(C'\fR to
dump all characters above \s-1ASCII\s0 in hexadecimal.  Before, one could get all
characters as hexadecimal or the Latin1 non-ASCII as octal.
.PP
\fI\f(CI\*(C`lex_start\*(C'\fI\fR
.IX Subsection "lex_start"
.PP
\&\f(CW\*(C`lex_start\*(C'\fR has been added to the \s-1API,\s0 but is considered experimental.
.PP
\fI\fIop_scope()\fI and \fIop_lvalue()\fI\fR
.IX Subsection "op_scope() and op_lvalue()"
.PP
The \fIop_scope()\fR and \fIop_lvalue()\fR functions have been added to the \s-1API,\s0
but are considered experimental.
.SS "C \s-1API\s0 Changes"
.IX Subsection "C API Changes"
\fI\f(CI\*(C`PERL_POLLUTE\*(C'\fI has been removed\fR
.IX Subsection "PERL_POLLUTE has been removed"
.PP
The option to define \f(CW\*(C`PERL_POLLUTE\*(C'\fR to expose older 5.005 symbols for
backwards compatibility has been removed.  Its use was always discouraged,
and MakeMaker contains a more specific escape hatch:
.PP
.Vb 1
\&    perl Makefile.PL POLLUTE=1
.Ve
.PP
This can be used for modules that have not been upgraded to 5.6 naming
conventions (and really should be completely obsolete by now).
.PP
\fICheck \s-1API\s0 compatibility when loading \s-1XS\s0 modules\fR
.IX Subsection "Check API compatibility when loading XS modules"
.PP
When Perl's \s-1API\s0 changes in incompatible ways (which usually happens between
major releases), \s-1XS\s0 modules compiled for previous versions of Perl will no
longer work.  They need to be recompiled against the new Perl.
.PP
The \f(CW\*(C`XS_APIVERSION_BOOTCHECK\*(C'\fR macro has been added to ensure that modules
are recompiled and to prevent users from accidentally loading modules
compiled for old perls into newer perls.  That macro, which is called when
loading every newly compiled extension, compares the \s-1API\s0 version of the
running perl with the version a module has been compiled for and raises an
exception if they don't match.
.PP
\fIPerl_fetch_cop_label\fR
.IX Subsection "Perl_fetch_cop_label"
.PP
The first argument of the C \s-1API\s0 function \f(CW\*(C`Perl_fetch_cop_label\*(C'\fR has changed
from \f(CW\*(C`struct refcounted_he *\*(C'\fR to \f(CW\*(C`COP *\*(C'\fR, to insulate the user from
implementation details.
.PP
This \s-1API\s0 function was marked as \*(L"may change\*(R", and likely isn't in use outside
the core.  (Neither an unpacked \s-1CPAN\s0 nor Google's codesearch finds any other
references to it.)
.PP
\fI\fIGvCV()\fI and \fIGvGP()\fI are no longer lvalues\fR
.IX Subsection "GvCV() and GvGP() are no longer lvalues"
.PP
The new \fIGvCV_set()\fR and \fIGvGP_set()\fR macros are now provided to replace
assignment to those two macros.
.PP
This allows a future commit to eliminate some backref magic between \s-1GV\s0
and CVs, which will require complete control over assignment to the
\&\f(CW\*(C`gp_cv\*(C'\fR slot.
.PP
\fI\fICvGV()\fI is no longer an lvalue\fR
.IX Subsection "CvGV() is no longer an lvalue"
.PP
Under some circumstances, the \fICvGV()\fR field of a \s-1CV\s0 is now
reference-counted.  To ensure consistent behaviour, direct assignment to
it, for example \f(CW\*(C`CvGV(cv) = gv\*(C'\fR is now a compile-time error.  A new macro,
\&\f(CW\*(C`CvGV_set(cv,gv)\*(C'\fR has been introduced to run this operation
safely.  Note that modification of this field is not part of the public
\&\s-1API,\s0 regardless of this new macro (and despite its being listed in this section).
.PP
\fI\fICvSTASH()\fI is no longer an lvalue\fR
.IX Subsection "CvSTASH() is no longer an lvalue"
.PP
The \fICvSTASH()\fR macro can now only be used as an rvalue.  \fICvSTASH_set()\fR
has been added to replace assignment to \fICvSTASH()\fR.  This is to ensure
that backreferences are handled properly.  These macros are not part of the
\&\s-1API.\s0
.PP
\fICalling conventions for \f(CI\*(C`newFOROP\*(C'\fI and \f(CI\*(C`newWHILEOP\*(C'\fI\fR
.IX Subsection "Calling conventions for newFOROP and newWHILEOP"
.PP
The way the parser handles labels has been cleaned up and refactored.  As a
result, the \fInewFOROP()\fR constructor function no longer takes a parameter
stating what label is to go in the state op.
.PP
The \fInewWHILEOP()\fR and \fInewFOROP()\fR functions no longer accept a line
number as a parameter.
.PP
\fIFlags passed to \f(CI\*(C`uvuni_to_utf8_flags\*(C'\fI and \f(CI\*(C`utf8n_to_uvuni\*(C'\fI\fR
.IX Subsection "Flags passed to uvuni_to_utf8_flags and utf8n_to_uvuni"
.PP
Some of the flags parameters to \fIuvuni_to_utf8_flags()\fR and
\&\fIutf8n_to_uvuni()\fR have changed.  This is a result of Perl's now allowing
internal storage and manipulation of code points that are problematic
in some situations.  Hence, the default actions for these functions has
been complemented to allow these code points.  The new flags are
documented in perlapi.  Code that requires the problematic code
points to be rejected needs to change to use the new flags.  Some flag
names are retained for backward source compatibility, though they do
nothing, as they are now the default.  However the flags
\&\f(CW\*(C`UNICODE_ALLOW_FDD0\*(C'\fR, \f(CW\*(C`UNICODE_ALLOW_FFFF\*(C'\fR, \f(CW\*(C`UNICODE_ILLEGAL\*(C'\fR, and
\&\f(CW\*(C`UNICODE_IS_ILLEGAL\*(C'\fR have been removed, as they stem from a
fundamentally broken model of how the Unicode non-character code points
should be handled, which is now described in
\&\*(L"Non-character code points\*(R" in perlunicode.  See also the Unicode section
under \*(L"Selected Bug Fixes\*(R".
.SS "Deprecated C APIs"
.IX Subsection "Deprecated C APIs"
.ie n .IP """Perl_ptr_table_clear""" 4
.el .IP "\f(CWPerl_ptr_table_clear\fR" 4
.IX Item "Perl_ptr_table_clear"
\&\f(CW\*(C`Perl_ptr_table_clear\*(C'\fR is no longer part of Perl's public \s-1API. \s0 Calling it
now generates a deprecation warning, and it will be removed in a future
release.
.ie n .IP """sv_compile_2op""" 4
.el .IP "\f(CWsv_compile_2op\fR" 4
.IX Item "sv_compile_2op"
The \fIsv_compile_2op()\fR \s-1API\s0 function is now deprecated.  Searches suggest
that nothing on \s-1CPAN\s0 is using it, so this should have zero impact.
.Sp
It attempted to provide an \s-1API\s0 to compile code down to an optree, but failed
to bind correctly to lexicals in the enclosing scope.  It's not possible to
fix this problem within the constraints of its parameters and return value.
.ie n .IP """find_rundefsvoffset""" 4
.el .IP "\f(CWfind_rundefsvoffset\fR" 4
.IX Item "find_rundefsvoffset"
The \f(CW\*(C`find_rundefsvoffset\*(C'\fR function has been deprecated.  It appeared that
its design was insufficient for reliably getting the lexical \f(CW$_\fR at
run-time.
.Sp
Use the new \f(CW\*(C`find_rundefsv\*(C'\fR function or the \f(CW\*(C`UNDERBAR\*(C'\fR macro
instead.  They directly return the right \s-1SV\s0
representing \f(CW$_\fR, whether it's
lexical or dynamic.
.ie n .IP """CALL_FPTR"" and ""CPERLscope""" 4
.el .IP "\f(CWCALL_FPTR\fR and \f(CWCPERLscope\fR" 4
.IX Item "CALL_FPTR and CPERLscope"
Those are left from an old implementation of \f(CW\*(C`MULTIPLICITY\*(C'\fR using \*(C+ objects,
which was removed in Perl 5.8.  Nowadays these macros do exactly nothing, so
they shouldn't be used anymore.
.Sp
For compatibility, they are still defined for external \f(CW\*(C`XS\*(C'\fR code.  Only
extensions defining \f(CW\*(C`PERL_CORE\*(C'\fR must be updated now.
.SS "Other Internal Changes"
.IX Subsection "Other Internal Changes"
\fIStack unwinding\fR
.IX Subsection "Stack unwinding"
.PP
The protocol for unwinding the C stack at the last stage of a \f(CW\*(C`die\*(C'\fR
has changed how it identifies the target stack frame.  This now uses
a separate variable \f(CW\*(C`PL_restartjmpenv\*(C'\fR, where previously it relied on
the \f(CW\*(C`blk_eval.cur_top_env\*(C'\fR pointer in the \f(CW\*(C`eval\*(C'\fR context frame that
has nominally just been discarded.  This change means that code running
during various stages of Perl-level unwinding no longer needs to take
care to avoid destroying the ghost frame.
.PP
\fIScope stack entries\fR
.IX Subsection "Scope stack entries"
.PP
The format of entries on the scope stack has been changed, resulting in a
reduction of memory usage of about 10%.  In particular, the memory used by
the scope stack to record each active lexical variable has been halved.
.PP
\fIMemory allocation for pointer tables\fR
.IX Subsection "Memory allocation for pointer tables"
.PP
Memory allocation for pointer tables has been changed.  Previously
\&\f(CW\*(C`Perl_ptr_table_store\*(C'\fR allocated memory from the same arena system as
\&\f(CW\*(C`SV\*(C'\fR bodies and \f(CW\*(C`HE\*(C'\fRs, with freed memory remaining bound to those arenas
until interpreter exit.  Now it allocates memory from arenas private to the
specific pointer table, and that memory is returned to the system when
\&\f(CW\*(C`Perl_ptr_table_free\*(C'\fR is called.  Additionally, allocation and release are
both less \s-1CPU\s0 intensive.
.PP
\fI\f(CI\*(C`UNDERBAR\*(C'\fI\fR
.IX Subsection "UNDERBAR"
.PP
The \f(CW\*(C`UNDERBAR\*(C'\fR macro now calls \f(CW\*(C`find_rundefsv\*(C'\fR.  \f(CW\*(C`dUNDERBAR\*(C'\fR is now a
noop but should still be used to ensure past and future compatibility.
.PP
\fIString comparison routines renamed\fR
.IX Subsection "String comparison routines renamed"
.PP
The \f(CW\*(C`ibcmp_*\*(C'\fR functions have been renamed and are now called \f(CW\*(C`foldEQ\*(C'\fR,
\&\f(CW\*(C`foldEQ_locale\*(C'\fR, and \f(CW\*(C`foldEQ_utf8\*(C'\fR.  The old names are still available as
macros.
.PP
\fI\f(CI\*(C`chop\*(C'\fI and \f(CI\*(C`chomp\*(C'\fI implementations merged\fR
.IX Subsection "chop and chomp implementations merged"
.PP
The opcode bodies for \f(CW\*(C`chop\*(C'\fR and \f(CW\*(C`chomp\*(C'\fR and for \f(CW\*(C`schop\*(C'\fR and \f(CW\*(C`schomp\*(C'\fR
have been merged.  The implementation functions \fIPerl_do_chop()\fR and
\&\fIPerl_do_chomp()\fR, never part of the public \s-1API,\s0 have been merged and
moved to a static function in \fIpp.c\fR.  This shrinks the Perl binary
slightly, and should not affect any code outside the core (unless it is
relying on the order of side-effects when \f(CW\*(C`chomp\*(C'\fR is passed a \fIlist\fR of
values).
.SH "Selected Bug Fixes"
.IX Header "Selected Bug Fixes"
.SS "I/O"
.IX Subsection "I/O"
.IP "\(bu" 4
Perl no longer produces this warning:
.Sp
.Vb 2
\&    $ perl \-we \*(Aqopen(my $f, ">", \emy $x); binmode($f, "scalar")\*(Aq
\&    Use of uninitialized value in binmode at \-e line 1.
.Ve
.IP "\(bu" 4
Opening a glob reference via \f(CW\*(C`open($fh, ">", \e*glob)\*(C'\fR no longer
causes the glob to be corrupted when the filehandle is printed to.  This would
cause Perl to crash whenever the glob's contents were accessed
[perl #77492].
.IP "\(bu" 4
PerlIO no longer crashes when called recursively, such as from a signal
handler.  Now it just leaks memory [perl #75556].
.IP "\(bu" 4
Most I/O functions were not warning for unopened handles unless the
\&\*(L"closed\*(R" and \*(L"unopened\*(R" warnings categories were both enabled.  Now only
\&\f(CW\*(C`use warnings \*(Aqunopened\*(Aq\*(C'\fR is necessary to trigger these warnings, as
had always been the intention.
.IP "\(bu" 4
There have been several fixes to PerlIO layers:
.Sp
When \f(CW\*(C`binmode(FH, ":crlf")\*(C'\fR pushes the \f(CW\*(C`:crlf\*(C'\fR layer on top of the stack,
it no longer enables crlf layers lower in the stack so as to avoid
unexpected results [perl #38456].
.Sp
Opening a file in \f(CW\*(C`:raw\*(C'\fR mode now does what it advertises to do (first
open the file, then \f(CW\*(C`binmode\*(C'\fR it), instead of simply leaving off the top
layer [perl #80764].
.Sp
The three layers \f(CW\*(C`:pop\*(C'\fR, \f(CW\*(C`:utf8\*(C'\fR, and \f(CW\*(C`:bytes\*(C'\fR didn't allow stacking when
opening a file.  For example
this:
.Sp
.Vb 1
\&    open(FH, ">:pop:perlio", "some.file") or die $!;
.Ve
.Sp
would throw an \*(L"Invalid argument\*(R" error.  This has been fixed in this
release [perl #82484].
.SS "Regular Expression Bug Fixes"
.IX Subsection "Regular Expression Bug Fixes"
.IP "\(bu" 4
The regular expression engine no longer loops when matching
\&\f(CW\*(C`"\eN{LATIN SMALL LIGATURE FF}" =~ /f+/i\*(C'\fR and similar expressions
[perl #72998] (5.12.1).
.IP "\(bu" 4
The trie runtime code should no longer allocate massive amounts of memory,
fixing #74484.
.IP "\(bu" 4
Syntax errors in \f(CW\*(C`(?{...})\*(C'\fR blocks no longer cause panic messages
[perl #2353].
.IP "\(bu" 4
A pattern like \f(CW\*(C`(?:(o){2})?\*(C'\fR no longer causes a \*(L"panic\*(R" error
[perl #39233].
.IP "\(bu" 4
A fatal error in regular expressions containing \f(CW\*(C`(.*?)\*(C'\fR when processing
\&\s-1UTF\-8\s0 data has been fixed [perl #75680] (5.12.2).
.IP "\(bu" 4
An erroneous regular expression engine optimisation that caused regex verbs like
\&\f(CW*COMMIT\fR sometimes to be ignored has been removed.
.IP "\(bu" 4
The regular expression bracketed character class \f(CW\*(C`[\e8\e9]\*(C'\fR was effectively the
same as \f(CW\*(C`[89\e000]\*(C'\fR, incorrectly matching a \s-1NULL\s0 character.  It also gave
incorrect warnings that the \f(CW8\fR and \f(CW9\fR were ignored.  Now \f(CW\*(C`[\e8\e9]\*(C'\fR is the
same as \f(CW\*(C`[89]\*(C'\fR and gives legitimate warnings that \f(CW\*(C`\e8\*(C'\fR and \f(CW\*(C`\e9\*(C'\fR are
unrecognized escape sequences, passed-through.
.IP "\(bu" 4
A regular expression match in the right-hand side of a global substitution
(\f(CW\*(C`s///g\*(C'\fR) that is in the same scope will no longer cause match variables
to have the wrong values on subsequent iterations.  This can happen when an
array or hash subscript is interpolated in the right-hand side, as in
\&\f(CW\*(C`s|(.)|@a{ print($1), /./ }|g\*(C'\fR [perl #19078].
.IP "\(bu" 4
Several cases in which characters in the Latin\-1 non-ASCII range (0x80 to
0xFF) used not to match themselves, or used to match both a character class
and its complement, have been fixed.  For instance, U+00E2 could match both
\&\f(CW\*(C`\ew\*(C'\fR and \f(CW\*(C`\eW\*(C'\fR [perl #78464] [perl #18281] [perl #60156].
.IP "\(bu" 4
Matching a Unicode character against an alternation containing characters
that happened to match continuation bytes in the former's \s-1UTF8\s0
representation (like \f(CW\*(C`qq{\ex{30ab}} =~ /\exab|\exa9/\*(C'\fR) would cause erroneous
warnings [perl #70998].
.IP "\(bu" 4
The trie optimisation was not taking empty groups into account, preventing
\&\*(L"foo\*(R" from matching \f(CW\*(C`/\eA(?:(?:)foo|bar|zot)\ez/\*(C'\fR [perl #78356].
.IP "\(bu" 4
A pattern containing a \f(CW\*(C`+\*(C'\fR inside a lookahead would sometimes cause an
incorrect match failure in a global match (for example, \f(CW\*(C`/(?=(\eS+))/g\*(C'\fR)
[perl #68564].
.IP "\(bu" 4
A regular expression optimisation would sometimes cause a match with a
\&\f(CW\*(C`{n,m}\*(C'\fR quantifier to fail when it should have matched [perl #79152].
.IP "\(bu" 4
Case-insensitive matching in regular expressions compiled under
\&\f(CW\*(C`use locale\*(C'\fR now works much more sanely when the pattern or target
string is internally encoded in \s-1UTF8. \s0 Previously, under these
conditions the localeness was completely lost.  Now, code points
above 255 are treated as Unicode, but code points between 0 and 255
are treated using the current locale rules, regardless of whether
the pattern or the string is encoded in \s-1UTF8. \s0 The few case-insensitive
matches that cross the 255/256 boundary are not allowed.  For
example, 0xFF does not caselessly match the character at 0x178,
\&\s-1LATIN CAPITAL LETTER Y WITH DIAERESIS,\s0 because 0xFF may not be \s-1LATIN
SMALL LETTER Y\s0 in the current locale, and Perl has no way of knowing
if that character even exists in the locale, much less what code
point it is.
.IP "\(bu" 4
The \f(CW\*(C`(?|...)\*(C'\fR regular expression construct no longer crashes if the final
branch has more sets of capturing parentheses than any other branch.  This
was fixed in Perl 5.10.1 for the case of a single branch, but that fix did
not take multiple branches into account [perl #84746].
.IP "\(bu" 4
A bug has been fixed in the implementation of \f(CW\*(C`{...}\*(C'\fR quantifiers in
regular expressions that prevented the code block in
\&\f(CW\*(C`/((\ew+)(?{ print $2 })){2}/\*(C'\fR from seeing the \f(CW$2\fR sometimes
[perl #84294].
.SS "Syntax/Parsing Bugs"
.IX Subsection "Syntax/Parsing Bugs"
.IP "\(bu" 4
\&\f(CW\*(C`when (scalar) {...}\*(C'\fR no longer crashes, but produces a syntax error
[perl #74114] (5.12.1).
.IP "\(bu" 4
A label right before a string eval (\f(CW\*(C`foo: eval $string\*(C'\fR) no longer causes
the label to be associated also with the first statement inside the eval
[perl #74290] (5.12.1).
.IP "\(bu" 4
The \f(CW\*(C`no 5.13.2\*(C'\fR form of \f(CW\*(C`no\*(C'\fR no longer tries to turn on features or
pragmata (like strict) [perl #70075] (5.12.2).
.IP "\(bu" 4
\&\f(CW\*(C`BEGIN {require 5.12.0}\*(C'\fR now behaves as documented, rather than behaving
identically to \f(CW\*(C`use 5.12.0\*(C'\fR.  Previously, \f(CW\*(C`require\*(C'\fR in a \f(CW\*(C`BEGIN\*(C'\fR block
was erroneously executing the \f(CW\*(C`use feature \*(Aq:5.12.0\*(Aq\*(C'\fR and
\&\f(CW\*(C`use strict\*(C'\fR behaviour, which only \f(CW\*(C`use\*(C'\fR was documented to
provide [perl #69050].
.IP "\(bu" 4
A regression introduced in Perl 5.12.0, making
\&\f(CW\*(C`my $x = 3; $x = length(undef)\*(C'\fR result in \f(CW$x\fR set to \f(CW3\fR has been
fixed.  \f(CW$x\fR will now be \f(CW\*(C`undef\*(C'\fR [perl #85508] (5.12.2).
.IP "\(bu" 4
When strict \*(L"refs\*(R" mode is off, \f(CW\*(C`%{...}\*(C'\fR in rvalue context returns
\&\f(CW\*(C`undef\*(C'\fR if its argument is undefined.  An optimisation introduced in Perl
5.12.0 to make \f(CW\*(C`keys %{...}\*(C'\fR faster when used as a boolean did not take
this into account, causing \f(CW\*(C`keys %{+undef}\*(C'\fR (and \f(CW\*(C`keys %$foo\*(C'\fR when
\&\f(CW$foo\fR is undefined) to be an error, which it should be so in strict
mode only [perl #81750].
.IP "\(bu" 4
Constant-folding used to cause
.Sp
.Vb 1
\&  $text =~ ( 1 ? /phoo/ : /bear/)
.Ve
.Sp
to turn into
.Sp
.Vb 1
\&  $text =~ /phoo/
.Ve
.Sp
at compile time.  Now it correctly matches against \f(CW$_\fR [perl #20444].
.IP "\(bu" 4
Parsing Perl code (either with string \f(CW\*(C`eval\*(C'\fR or by loading modules) from
within a \f(CW\*(C`UNITCHECK\*(C'\fR block no longer causes the interpreter to crash
[perl #70614].
.IP "\(bu" 4
String \f(CW\*(C`eval\*(C'\fRs no longer fail after 2 billion scopes have been
compiled [perl #83364].
.IP "\(bu" 4
The parser no longer hangs when encountering certain Unicode characters,
such as U+387 [perl #74022].
.IP "\(bu" 4
Defining a constant with the same name as one of Perl's special blocks
(like \f(CW\*(C`INIT\*(C'\fR) stopped working in 5.12.0, but has now been fixed
[perl #78634].
.IP "\(bu" 4
A reference to a literal value used as a hash key (\f(CW$hash{\e"foo"}\fR) used
to be stringified, even if the hash was tied [perl #79178].
.IP "\(bu" 4
A closure containing an \f(CW\*(C`if\*(C'\fR statement followed by a constant or variable
is no longer treated as a constant [perl #63540].
.IP "\(bu" 4
\&\f(CW\*(C`state\*(C'\fR can now be used with attributes.  It
used to mean the same thing as
\&\f(CW\*(C`my\*(C'\fR if any attributes were present [perl #68658].
.IP "\(bu" 4
Expressions like \f(CW\*(C`@$a > 3\*(C'\fR no longer cause \f(CW$a\fR to be mentioned in
the \*(L"Use of uninitialized value in numeric gt\*(R" warning when \f(CW$a\fR is
undefined (since it is not part of the \f(CW\*(C`>\*(C'\fR expression, but the operand
of the \f(CW\*(C`@\*(C'\fR) [perl #72090].
.IP "\(bu" 4
Accessing an element of a package array with a hard-coded number (as
opposed to an arbitrary expression) would crash if the array did not exist.
Usually the array would be autovivified during compilation, but typeglob
manipulation could remove it, as in these two cases which used to crash:
.Sp
.Vb 2
\&  *d = *a;  print $d[0];
\&  undef *d; print $d[0];
.Ve
.IP "\(bu" 4
The \fB\-C\fR command-line option, when used on the shebang line, can now be
followed by other options [perl #72434].
.IP "\(bu" 4
The \f(CW\*(C`B\*(C'\fR module was returning \f(CW\*(C`B::OP\*(C'\fRs instead of \f(CW\*(C`B::LOGOP\*(C'\fRs for
\&\f(CW\*(C`entertry\*(C'\fR [perl #80622].  This was due to a bug in the Perl core,
not in \f(CW\*(C`B\*(C'\fR itself.
.SS "Stashes, Globs and Method Lookup"
.IX Subsection "Stashes, Globs and Method Lookup"
Perl 5.10.0 introduced a new internal mechanism for caching MROs (method
resolution orders, or lists of parent classes; aka \*(L"isa\*(R" caches) to make
method lookup faster (so \f(CW@ISA\fR arrays would not have to be searched
repeatedly).  Unfortunately, this brought with it quite a few bugs.  Almost
all of these have been fixed now, along with a few MRO-related bugs that
existed before 5.10.0:
.IP "\(bu" 4
The following used to have erratic effects on method resolution, because
the \*(L"isa\*(R" caches were not reset or otherwise ended up listing the wrong
classes.  These have been fixed.
.RS 4
.IP "Aliasing packages by assigning to globs [perl #77358]" 4
.IX Item "Aliasing packages by assigning to globs [perl #77358]"
.PD 0
.IP "Deleting packages by deleting their containing stash elements" 4
.IX Item "Deleting packages by deleting their containing stash elements"
.ie n .IP "Undefining the glob containing a package (""undef *Foo::"")" 4
.el .IP "Undefining the glob containing a package (\f(CWundef *Foo::\fR)" 4
.IX Item "Undefining the glob containing a package (undef *Foo::)"
.ie n .IP "Undefining an \s-1ISA\s0 glob (""undef *Foo::ISA"")" 4
.el .IP "Undefining an \s-1ISA\s0 glob (\f(CWundef *Foo::ISA\fR)" 4
.IX Item "Undefining an ISA glob (undef *Foo::ISA)"
.ie n .IP "Deleting an \s-1ISA\s0 stash element (""delete $Foo::{ISA}"")" 4
.el .IP "Deleting an \s-1ISA\s0 stash element (\f(CWdelete $Foo::{ISA}\fR)" 4
.IX Item "Deleting an ISA stash element (delete $Foo::{ISA})"
.ie n .IP "Sharing @ISA arrays between classes (via ""*Foo::ISA = \e@Bar::ISA"" or ""*Foo::ISA = *Bar::ISA"") [perl #77238]" 4
.el .IP "Sharing \f(CW@ISA\fR arrays between classes (via \f(CW*Foo::ISA = \e@Bar::ISA\fR or \f(CW*Foo::ISA = *Bar::ISA\fR) [perl #77238]" 4
.IX Item "Sharing @ISA arrays between classes (via *Foo::ISA = @Bar::ISA or *Foo::ISA = *Bar::ISA) [perl #77238]"
.RE
.RS 4
.PD
.Sp
\&\f(CW\*(C`undef *Foo::ISA\*(C'\fR would even stop a new \f(CW@Foo::ISA\fR array from updating
caches.
.RE
.IP "\(bu" 4
Typeglob assignments would crash if the glob's stash no longer existed, so
long as the glob assigned to were named \f(CW\*(C`ISA\*(C'\fR or the glob on either side of
the assignment contained a subroutine.
.IP "\(bu" 4
\&\f(CW\*(C`PL_isarev\*(C'\fR, which is accessible to Perl via \f(CW\*(C`mro::get_isarev\*(C'\fR is now
updated properly when packages are deleted or removed from the \f(CW@ISA\fR of
other classes.  This allows many packages to be created and deleted without
causing a memory leak [perl #75176].
.PP
In addition, various other bugs related to typeglobs and stashes have been
fixed:
.IP "\(bu" 4
Some work has been done on the internal pointers that link between symbol
tables (stashes), typeglobs, and subroutines.  This has the effect that
various edge cases related to deleting stashes or stash entries (for example,
<%FOO:: = ()>), and complex typeglob or code-reference aliasing, will no
longer crash the interpreter.
.IP "\(bu" 4
Assigning a reference to a glob copy now assigns to a glob slot instead of
overwriting the glob with a scalar [perl #1804] [perl #77508].
.IP "\(bu" 4
A bug when replacing the glob of a loop variable within the loop has been fixed
[perl #21469].  This
means the following code will no longer crash:
.Sp
.Vb 3
\&    for $x (...) {
\&        *x = *y;
\&    }
.Ve
.IP "\(bu" 4
Assigning a glob to a \s-1PVLV\s0 used to convert it to a plain string.  Now it
works correctly, and a \s-1PVLV\s0 can hold a glob.  This would happen when a
nonexistent hash or array element was passed to a subroutine:
.Sp
.Vb 2
\&  sub { $_[0] = *foo }\->($hash{key});
\&  # $_[0] would have been the string "*main::foo"
.Ve
.Sp
It also happened when a glob was assigned to, or returned from, an element
of a tied array or hash [perl #36051].
.IP "\(bu" 4
When trying to report \f(CW\*(C`Use of uninitialized value $Foo::BAR\*(C'\fR, crashes could
occur if the glob holding the global variable in question had been detached
from its original stash by, for example, \f(CW\*(C`delete $::{"Foo::"}\*(C'\fR.  This has
been fixed by disabling the reporting of variable names in those
cases.
.IP "\(bu" 4
During the restoration of a localised typeglob on scope exit, any
destructors called as a result would be able to see the typeglob in an
inconsistent state, containing freed entries, which could result in a
crash.  This would affect code like this:
.Sp
.Vb 5
\&  local *@;
\&  eval { die bless [] }; # puts an object in $@
\&  sub DESTROY {
\&    local $@; # boom
\&  }
.Ve
.Sp
Now the glob entries are cleared before any destructors are called.  This
also means that destructors can vivify entries in the glob.  So Perl tries
again and, if the entries are re-created too many times, dies with a
\&\*(L"panic: gp_free ...\*(R" error message.
.IP "\(bu" 4
If a typeglob is freed while a subroutine attached to it is still
referenced elsewhere, the subroutine is renamed to \f(CW\*(C`_\|_ANON_\|_\*(C'\fR in the same
package, unless the package has been undefined, in which case the \f(CW\*(C`_\|_ANON_\|_\*(C'\fR
package is used.  This could cause packages to be sometimes autovivified,
such as if the package had been deleted.  Now this no longer occurs.
The \f(CW\*(C`_\|_ANON_\|_\*(C'\fR package is also now used when the original package is
no longer attached to the symbol table.  This avoids memory leaks in some
cases [perl #87664].
.IP "\(bu" 4
Subroutines and package variables inside a package whose name ends with
\&\f(CW\*(C`::\*(C'\fR can now be accessed with a fully qualified name.
.SS "Unicode"
.IX Subsection "Unicode"
.IP "\(bu" 4
What has become known as \*(L"the Unicode Bug\*(R" is almost completely resolved in
this release.  Under \f(CW\*(C`use feature \*(Aqunicode_strings\*(Aq\*(C'\fR (which is
automatically selected by \f(CW\*(C`use 5.012\*(C'\fR and above), the internal
storage format of a string no longer affects the external semantics.
[perl #58182].
.Sp
There are two known exceptions:
.RS 4
.IP "1." 4
The now-deprecated, user-defined case-changing
functions require utf8\-encoded strings to operate.  The \s-1CPAN\s0 module
Unicode::Casing has been written to replace this feature without its
drawbacks, and the feature is scheduled to be removed in 5.16.
.IP "2." 4
\&\fIquotemeta()\fR (and its in-line equivalent \f(CW\*(C`\eQ\*(C'\fR) can also give different
results depending on whether a string is encoded in \s-1UTF\-8. \s0 See
\&\*(L"The \*(R"Unicode Bug"" in perlunicode.
.RE
.RS 4
.RE
.IP "\(bu" 4
Handling of Unicode non-character code points has changed.
Previously they were mostly considered illegal, except that in some
place only one of the 66 of them was known.  The Unicode Standard
considers them all legal, but forbids their \*(L"open interchange\*(R".
This is part of the change to allow internal use of any code
point (see \*(L"Core Enhancements\*(R").  Together, these changes resolve
[perl #38722], [perl #51918], [perl #51936], and [perl #63446].
.IP "\(bu" 4
Case-insensitive \f(CW"/i"\fR regular expression matching of Unicode
characters that match multiple characters now works much more as
intended.  For example
.Sp
.Vb 1
\& "\eN{LATIN SMALL LIGATURE FFI}" =~ /ffi/ui
.Ve
.Sp
and
.Sp
.Vb 1
\& "ffi" =~ /\eN{LATIN SMALL LIGATURE FFI}/ui
.Ve
.Sp
are both true.  Previously, there were many bugs with this feature.
What hasn't been f