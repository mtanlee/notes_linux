R, if that is warranted by the value of $^F
that may be in effect.  Earlier versions neglected to set the flag
for handles created with these operators.  See \*(L"pipe\*(R" in perlfunc,
\&\*(L"socketpair\*(R" in perlfunc, \*(L"socket\*(R" in perlfunc, \*(L"accept\*(R" in perlfunc,
and \*(L"$^F\*(R" in perlvar.
.SS "\fIsyswrite()\fP ease-of-use"
.IX Subsection "syswrite() ease-of-use"
The length argument of \f(CW\*(C`syswrite()\*(C'\fR has become optional.
.SS "Better syntax checks on parenthesized unary operators"
.IX Subsection "Better syntax checks on parenthesized unary operators"
Expressions such as:
.PP
.Vb 3
\&    print defined(&foo,&bar,&baz);
\&    print uc("foo","bar","baz");
\&    undef($foo,&bar);
.Ve
.PP
used to be accidentally allowed in earlier versions, and produced
unpredictable behaviour.  Some produced ancillary warnings
when used in this way; others silently did the wrong thing.
.PP
The parenthesized forms of most unary operators that expect a single
argument now ensure that they are not called with more than one
argument, making the cases shown above syntax errors.  The usual
behaviour of:
.PP
.Vb 3
\&    print defined &foo, &bar, &baz;
\&    print uc "foo", "bar", "baz";
\&    undef $foo, &bar;
.Ve
.PP
remains unchanged.  See perlop.
.SS "Bit operators support full native integer width"
.IX Subsection "Bit operators support full native integer width"
The bit operators (& | ^ ~ << >>) now operate on the full native
integral width (the exact size of which is available in \f(CW$Config\fR{ivsize}).
For example, if your platform is either natively 64\-bit or if Perl
has been configured to use 64\-bit integers, these operations apply
to 8 bytes (as opposed to 4 bytes on 32\-bit platforms).
For portability, be sure to mask off the excess bits in the result of
unary \f(CW\*(C`~\*(C'\fR, e.g., \f(CW\*(C`~$x & 0xffffffff\*(C'\fR.
.SS "Improved security features"
.IX Subsection "Improved security features"
More potentially unsafe operations taint their results for improved
security.
.PP
The \f(CW\*(C`passwd\*(C'\fR and \f(CW\*(C`shell\*(C'\fR fields returned by the \fIgetpwent()\fR, \fIgetpwnam()\fR,
and \fIgetpwuid()\fR are now tainted, because the user can affect their own
encrypted password and login shell.
.PP
The variable modified by \fIshmread()\fR, and messages returned by \fImsgrcv()\fR
(and its object-oriented interface IPC::SysV::Msg::rcv) are also tainted,
because other untrusted processes can modify messages and shared memory
segments for their own nefarious purposes.
.SS "More functional bareword prototype (*)"
.IX Subsection "More functional bareword prototype (*)"
Bareword prototypes have been rationalized to enable them to be used
to override builtins that accept barewords and interpret them in
a special way, such as \f(CW\*(C`require\*(C'\fR or \f(CW\*(C`do\*(C'\fR.
.PP
Arguments prototyped as \f(CW\*(C`*\*(C'\fR will now be visible within the subroutine
as either a simple scalar or as a reference to a typeglob.
See \*(L"Prototypes\*(R" in perlsub.
.ie n .SS """require"" and ""do"" may be overridden"
.el .SS "\f(CWrequire\fP and \f(CWdo\fP may be overridden"
.IX Subsection "require and do may be overridden"
\&\f(CW\*(C`require\*(C'\fR and \f(CW\*(C`do \*(Aqfile\*(Aq\*(C'\fR operations may be overridden locally
by importing subroutines of the same name into the current package 
(or globally by importing them into the \s-1CORE::GLOBAL::\s0 namespace).
Overriding \f(CW\*(C`require\*(C'\fR will also affect \f(CW\*(C`use\*(C'\fR, provided the override
is visible at compile-time.
See \*(L"Overriding Built-in Functions\*(R" in perlsub.
.SS "$^X variables may now have names longer than one character"
.IX Subsection "$^X variables may now have names longer than one character"
Formerly, $^X was synonymous with ${\*(L"\ecX\*(R"}, but $^XY was a syntax
error.  Now variable names that begin with a control character may be
arbitrarily long.  However, for compatibility reasons, these variables
\&\fImust\fR be written with explicit braces, as \f(CW\*(C`${^XY}\*(C'\fR for example.
\&\f(CW\*(C`${^XYZ}\*(C'\fR is synonymous with ${\*(L"\ecXYZ\*(R"}.  Variable names with more
than one control character, such as \f(CW\*(C`${^XY^Z}\*(C'\fR, are illegal.
.PP
The old syntax has not changed.  As before, `^X' may be either a
literal control-X character or the two-character sequence `caret' plus
`X'.  When braces are omitted, the variable name stops after the
control character.  Thus \f(CW"$^XYZ"\fR continues to be synonymous with
\&\f(CW\*(C`$^X . "YZ"\*(C'\fR as before.
.PP
As before, lexical variables may not have names beginning with control
characters.  As before, variables whose names begin with a control
character are always forced to be in package `main'.  All such variables
are reserved for future extensions, except those that begin with
\&\f(CW\*(C`^_\*(C'\fR, which may be used by user programs and are guaranteed not to
acquire special meaning in any future version of Perl.
.ie n .SS "New variable $^C reflects ""\-c"" switch"
.el .SS "New variable $^C reflects \f(CW\-c\fP switch"
.IX Subsection "New variable $^C reflects -c switch"
\&\f(CW$^C\fR has a boolean value that reflects whether perl is being run
in compile-only mode (i.e. via the \f(CW\*(C`\-c\*(C'\fR switch).  Since
\&\s-1BEGIN\s0 blocks are executed under such conditions, this variable
enables perl code to determine whether actions that make sense
only during normal running are warranted.  See perlvar.
.SS "New variable $^V contains Perl version as a string"
.IX Subsection "New variable $^V contains Perl version as a string"
\&\f(CW$^V\fR contains the Perl version number as a string composed of
characters whose ordinals match the version numbers, i.e. v5.6.0.
This may be used in string comparisons.
.PP
See \f(CW\*(C`Support for strings represented as a vector of ordinals\*(C'\fR for an
example.
.SS "Optional Y2K warnings"
.IX Subsection "Optional Y2K warnings"
If Perl is built with the cpp macro \f(CW\*(C`PERL_Y2KWARN\*(C'\fR defined,
it emits optional warnings when concatenating the number 19
with another number.
.PP
This behavior must be specifically enabled when running Configure.
See \fI\s-1INSTALL\s0\fR and \fI\s-1README\s0.Y2K\fR.
.SS "Arrays now always interpolate into double-quoted strings"
.IX Subsection "Arrays now always interpolate into double-quoted strings"
In double-quoted strings, arrays now interpolate, no matter what.  The
behavior in earlier versions of perl 5 was that arrays would interpolate
into strings if the array had been mentioned before the string was
compiled, and otherwise Perl would raise a fatal compile-time error.
In versions 5.000 through 5.003, the error was
.PP
.Vb 1
\&        Literal @example now requires backslash
.Ve
.PP
In versions 5.004_01 through 5.6.0, the error was
.PP
.Vb 1
\&        In string, @example now must be written as \e@example
.Ve
.PP
The idea here was to get people into the habit of writing
\&\f(CW"fred\e@example.com"\fR when they wanted a literal \f(CW\*(C`@\*(C'\fR sign, just as
they have always written \f(CW"Give me back my \e$5"\fR when they wanted a
literal \f(CW\*(C`$\*(C'\fR sign.
.PP
Starting with 5.6.1, when Perl now sees an \f(CW\*(C`@\*(C'\fR sign in a
double-quoted string, it \fIalways\fR attempts to interpolate an array,
regardless of whether or not the array has been used or declared
already.  The fatal error has been downgraded to an optional warning:
.PP
.Vb 1
\&        Possible unintended interpolation of @example in string
.Ve
.PP
This warns you that \f(CW"fred@example.com"\fR is going to turn into
\&\f(CW\*(C`fred.com\*(C'\fR if you don't backslash the \f(CW\*(C`@\*(C'\fR.
See http://perl.plover.com/at\-error.html for more details
about the history here.
.SS "@\- and @+ provide starting/ending offsets of regex matches"
.IX Subsection "@- and @+ provide starting/ending offsets of regex matches"
The new magic variables @\- and @+ provide the starting and ending
offsets, respectively, of $&, \f(CW$1\fR, \f(CW$2\fR, etc.  See perlvar for
details.
.SH "Modules and Pragmata"
.IX Header "Modules and Pragmata"
.SS "Modules"
.IX Subsection "Modules"
.IP "attributes" 4
.IX Item "attributes"
While used internally by Perl as a pragma, this module also
provides a way to fetch subroutine and variable attributes.
See attributes.
.IP "B" 4
.IX Item "B"
The Perl Compiler suite has been extensively reworked for this
release.  More of the standard Perl test suite passes when run
under the Compiler, but there is still a significant way to
go to achieve production quality compiled executables.
.Sp
.Vb 3
\&    NOTE: The Compiler suite remains highly experimental.  The
\&    generated code may not be correct, even when it manages to execute
\&    without errors.
.Ve
.IP "Benchmark" 4
.IX Item "Benchmark"
Overall, Benchmark results exhibit lower average error and better timing
accuracy.
.Sp
You can now run tests for \fIn\fR seconds instead of guessing the right
number of tests to run: e.g., timethese(\-5, ...) will run each 
code for at least 5 \s-1CPU\s0 seconds.  Zero as the \*(L"number of repetitions\*(R"
means \*(L"for at least 3 \s-1CPU\s0 seconds\*(R".  The output format has also
changed.  For example:
.Sp
.Vb 1
\&   use Benchmark;$x=3;timethese(\-5,{a=>sub{$x*$x},b=>sub{$x**2}})
.Ve
.Sp
will now output something like this:
.Sp
.Vb 3
\&   Benchmark: running a, b, each for at least 5 CPU seconds...
\&            a:  5 wallclock secs ( 5.77 usr +  0.00 sys =  5.77 CPU) @ 200551.91/s (n=1156516)
\&            b:  4 wallclock secs ( 5.00 usr +  0.02 sys =  5.02 CPU) @ 159605.18/s (n=800686)
.Ve
.Sp
New features: \*(L"each for at least N \s-1CPU\s0 seconds...\*(R", \*(L"wallclock secs\*(R",
and the \*(L"@ operations/CPU second (n=operations)\*(R".
.Sp
\&\fItimethese()\fR now returns a reference to a hash of Benchmark objects containing
the test results, keyed on the names of the tests.
.Sp
\&\fItimethis()\fR now returns the iterations field in the Benchmark result object
instead of 0.
.Sp
\&\fItimethese()\fR, \fItimethis()\fR, and the new \fIcmpthese()\fR (see below) can also take
a format specifier of 'none' to suppress output.
.Sp
A new function \fIcountit()\fR is just like \fItimeit()\fR except that it takes a
\&\s-1TIME\s0 instead of a \s-1COUNT\s0.
.Sp
A new function \fIcmpthese()\fR prints a chart comparing the results of each test
returned from a \fItimethese()\fR call.  For each possible pair of tests, the
percentage speed difference (iters/sec or seconds/iter) is shown.
.Sp
For other details, see Benchmark.
.IP "ByteLoader" 4
.IX Item "ByteLoader"
The ByteLoader is a dedicated extension to generate and run
Perl bytecode.  See ByteLoader.
.IP "constant" 4
.IX Item "constant"
References can now be used.
.Sp
The new version also allows a leading underscore in constant names, but
disallows a double leading underscore (as in \*(L"_\|_LINE_\|_\*(R").  Some other names
are disallowed or warned against, including \s-1BEGIN\s0, \s-1END\s0, etc.  Some names
which were forced into main:: used to fail silently in some cases; now they're
fatal (outside of main::) and an optional warning (inside of main::).
The ability to detect whether a constant had been set with a given name has
been added.
.Sp
See constant.
.IP "charnames" 4
.IX Item "charnames"
This pragma implements the \f(CW\*(C`\eN\*(C'\fR string escape.  See charnames.
.IP "Data::Dumper" 4
.IX Item "Data::Dumper"
A \f(CW\*(C`Maxdepth\*(C'\fR setting can be specified to avoid venturing
too deeply into deep data structures.  See Data::Dumper.
.Sp
The \s-1XSUB\s0 implementation of \fIDump()\fR is now automatically called if the
\&\f(CW\*(C`Useqq\*(C'\fR setting is not in use.
.Sp
Dumping \f(CW\*(C`qr//\*(C'\fR objects works correctly.
.IP "\s-1DB\s0" 4
.IX Item "DB"
\&\f(CW\*(C`DB\*(C'\fR is an experimental module that exposes a clean abstraction
to Perl's debugging \s-1API\s0.
.IP "DB_File" 4
.IX Item "DB_File"
DB_File can now be built with Berkeley \s-1DB\s0 versions 1, 2 or 3.
See \f(CW\*(C`ext/DB_File/Changes\*(C'\fR.
.IP "Devel::DProf" 4
.IX Item "Devel::DProf"
Devel::DProf, a Perl source code profiler has been added.  See
Devel::DProf and dprofpp.
.IP "Devel::Peek" 4
.IX Item "Devel::Peek"
The Devel::Peek module provides access to the internal representation
of Perl variables and data.  It is a data debugging tool for the \s-1XS\s0 programmer.
.IP "Dumpvalue" 4
.IX Item "Dumpvalue"
The Dumpvalue module provides screen dumps of Perl data.
.IP "DynaLoader" 4
.IX Item "DynaLoader"
DynaLoader now supports a \fIdl_unload_file()\fR function on platforms that
support unloading shared objects using \fIdlclose()\fR.
.Sp
Perl can also optionally arrange to unload all extension shared objects
loaded by Perl.  To enable this, build Perl with the Configure option
\&\f(CW\*(C`\-Accflags=\-DDL_UNLOAD_ALL_AT_EXIT\*(C'\fR.  (This maybe useful if you are
using Apache with mod_perl.)
.IP "English" 4
.IX Item "English"
\&\f(CW$PERL_VERSION\fR now stands for \f(CW$^V\fR (a string value) rather than for \f(CW$]\fR
(a numeric value).
.IP "Env" 4
.IX Item "Env"
Env now supports accessing environment variables like \s-1PATH\s0 as array
variables.
.IP "Fcntl" 4
.IX Item "Fcntl"
More Fcntl constants added: F_SETLK64, F_SETLKW64, O_LARGEFILE for
large file (more than 4GB) access (\s-1NOTE:\s0 the O_LARGEFILE is
automatically added to \fIsysopen()\fR flags if large file support has been
configured, as is the default), Free/Net/OpenBSD locking behaviour
flags F_FLOCK, F_POSIX, Linux F_SHLCK, and O_ACCMODE: the combined
mask of O_RDONLY, O_WRONLY, and O_RDWR.  The \fIseek()\fR/\fIsysseek()\fR
constants \s-1SEEK_SET\s0, \s-1SEEK_CUR\s0, and \s-1SEEK_END\s0 are available via the
\&\f(CW\*(C`:seek\*(C'\fR tag.  The \fIchmod()\fR/\fIstat()\fR S_IF* constants and S_IS* functions
are available via the \f(CW\*(C`:mode\*(C'\fR tag.
.IP "File::Compare" 4
.IX Item "File::Compare"
A \fIcompare_text()\fR function has been added, which allows custom
comparison functions.  See File::Compare.
.IP "File::Find" 4
.IX Item "File::Find"
File::Find now works correctly when the \fIwanted()\fR function is either
autoloaded or is a symbolic reference.
.Sp
A bug that caused File::Find to lose track of the working directory
when pruning top-level directories has been fixed.
.Sp
File::Find now also supports several other options to control its
behavior.  It can follow symbolic links if the \f(CW\*(C`follow\*(C'\fR option is
specified.  Enabling the \f(CW\*(C`no_chdir\*(C'\fR option will make File::Find skip
changing the current directory when walking directories.  The \f(CW\*(C`untaint\*(C'\fR
flag can be useful when running with taint checks enabled.
.Sp
See File::Find.
.IP "File::Glob" 4
.IX Item "File::Glob"
This extension implements BSD-style file globbing.  By default,
it will also be used for the internal implementation of the \fIglob()\fR
operator.  See File::Glob.
.IP "File::Spec" 4
.IX Item "File::Spec"
New methods have been added to the File::Spec module: \fIdevnull()\fR returns
the name of the null device (/dev/null on Unix) and \fItmpdir()\fR the name of
the temp directory (normally /tmp on Unix).  There are now also methods
to convert between absolute and relative filenames: \fIabs2rel()\fR and
\&\fIrel2abs()\fR.  For compatibility with operating systems that specify volume
names in file paths, the \fIsplitpath()\fR, \fIsplitdir()\fR, and \fIcatdir()\fR methods
have been added.
.IP "File::Spec::Functions" 4
.IX Item "File::Spec::Functions"
The new File::Spec::Functions modules provides a function interface
to the File::Spec module.  Allows shorthand
.Sp
.Vb 1
\&    $fullname = catfile($dir1, $dir2, $file);
.Ve
.Sp
instead of
.Sp
.Vb 1
\&    $fullname = File::Spec\->catfile($dir1, $dir2, $file);
.Ve
.IP "Getopt::Long" 4
.IX Item "Getopt::Long"
Getopt::Long licensing has changed to allow the Perl Artistic License
as well as the \s-1GPL\s0. It used to be \s-1GPL\s0 only, which got in the way of
non-GPL applications that wanted to use Getopt::Long.
.Sp
Getopt::Long encourages the use of Pod::Usage to produce help
messages. For example:
.Sp
.Vb 7
\&    use Getopt::Long;
\&    use Pod::Usage;
\&    my $man = 0;
\&    my $help = 0;
\&    GetOptions(\*(Aqhelp|?\*(Aq => \e$help, man => \e$man) or pod2usage(2);
\&    pod2usage(1) if $help;
\&    pod2usage(\-exitstatus => 0, \-verbose => 2) if $man;
\&
\&    _\|_END_\|_
\&
\&    =head1 NAME
\&
\&    sample \- Using Getopt::Long and Pod::Usage
\&
\&    =head1 SYNOPSIS
\&
\&    sample [options] [file ...]
\&
\&     Options:
\&       \-help            brief help message
\&       \-man             full documentation
\&
\&    =head1 OPTIONS
\&
\&    =over 8
\&
\&    =item B<\-help>
\&
\&    Print a brief help message and exits.
\&
\&    =item B<\-man>
\&
\&    Prints the manual page and exits.
\&
\&    =back
\&
\&    =head1 DESCRIPTION
\&
\&    B<This program> will read the given input file(s) and do something
\&    useful with the contents thereof.
\&
\&    =cut
.Ve
.Sp
See Pod::Usage for details.
.Sp
A bug that prevented the non-option call-back <> from being
specified as the first argument has been fixed.
.Sp
To specify the characters < and > as option starters, use ><. Note,
however, that changing option starters is strongly deprecated.
.IP "\s-1IO\s0" 4
.IX Item "IO"
\&\fIwrite()\fR and \fIsyswrite()\fR will now accept a single-argument
form of the call, for consistency with Perl's \fIsyswrite()\fR.
.Sp
You can now create a TCP-based IO::Socket::INET without forcing
a connect attempt.  This allows you to configure its options
(like making it non-blocking) and then call \fIconnect()\fR manually.
.Sp
A bug that prevented the \fIIO::Socket::protocol()\fR accessor
from ever returning the correct value has been corrected.
.Sp
IO::Socket::connect now uses non-blocking \s-1IO\s0 instead of \fIalarm()\fR
to do connect timeouts.
.Sp
IO::Socket::accept now uses \fIselect()\fR instead of \fIalarm()\fR for doing
timeouts.
.Sp
IO::Socket::INET\->new now sets $! correctly on failure. $@ is
still set for backwards compatibility.
.IP "\s-1JPL\s0" 4
.IX Item "JPL"
Java Perl Lingo is now distributed with Perl.  See jpl/README
for more information.
.IP "lib" 4
.IX Item "lib"
\&\f(CW\*(C`use lib\*(C'\fR now weeds out any trailing duplicate entries.
\&\f(CW\*(C`no lib\*(C'\fR removes all named entries.
.IP "Math::BigInt" 4
.IX Item "Math::BigInt"
The bitwise operations \f(CW\*(C`<<\*(C'\fR, \f(CW\*(C`>>\*(C'\fR, \f(CW\*(C`&\*(C'\fR, \f(CW\*(C`|\*(C'\fR,
and \f(CW\*(C`~\*(C'\fR are now supported on bigints.
.IP "Math::Complex" 4
.IX Item "Math::Complex"
The accessor methods Re, Im, arg, abs, rho, and theta can now also
act as mutators (accessor \f(CW$z\fR\->\fIRe()\fR, mutator \f(CW$z\fR\->\fIRe\fR\|(3)).
.Sp
The class method \f(CW\*(C`display_format\*(C'\fR and the corresponding object method
\&\f(CW\*(C`display_format\*(C'\fR, in addition to accepting just one argument, now can
also accept a parameter hash.  Recognized keys of a parameter hash are
\&\f(CW"style"\fR, which corresponds to the old one parameter case, and two
new parameters: \f(CW"format"\fR, which is a \fIprintf()\fR\-style format string
(defaults usually to \f(CW"%.15g"\fR, you can revert to the default by
setting the format string to \f(CW\*(C`undef\*(C'\fR) used for both parts of a
complex number, and \f(CW"polar_pretty_print"\fR (defaults to true),
which controls whether an attempt is made to try to recognize small
multiples and rationals of pi (2pi, pi/2) at the argument (angle) of a
polar complex number.
.Sp
The potentially disruptive change is that in list context both methods
now \fIreturn the parameter hash\fR, instead of only the value of the
\&\f(CW"style"\fR parameter.
.IP "Math::Trig" 4
.IX Item "Math::Trig"
A little bit of radial trigonometry (cylindrical and spherical),
radial coordinate conversions, and the great circle distance were added.
.IP "Pod::Parser, Pod::InputObjects" 4
.IX Item "Pod::Parser, Pod::InputObjects"
Pod::Parser is a base class for parsing and selecting sections of
pod documentation from an input stream.  This module takes care of
identifying pod paragraphs and commands in the input and hands off the
parsed paragraphs and commands to user-defined methods which are free
to interpret or translate them as they see fit.
.Sp
Pod::InputObjects defines some input objects needed by Pod::Parser, and
for advanced users of Pod::Parser that need more about a command besides
its name and text.
.Sp
As of release 5.6.0 of Perl, Pod::Parser is now the officially sanctioned
\&\*(L"base parser code\*(R" recommended for use by all pod2xxx translators.
Pod::Text (pod2text) and Pod::Man (pod2man) have already been converted
to use Pod::Parser and efforts to convert Pod::HTML (pod2html) are already
underway.  For any questions or comments about pod parsing and translating
issues and utilities, please use the pod\-people@perl.org mailing list.
.Sp
For further information, please see Pod::Parser and Pod::InputObjects.
.IP "Pod::Checker, podchecker" 4
.IX Item "Pod::Checker, podchecker"
This utility checks pod files for correct syntax, according to
perlpod.  Obvious errors are flagged as such, while warnings are
printed for mistakes that can be handled gracefully.  The checklist is
not complete yet.  See Pod::Checker.
.IP "Pod::ParseUtils, Pod::Find" 4
.IX Item "Pod::ParseUtils, Pod::Find"
These modules provide a set of gizmos that are useful mainly for pod
translators.  Pod::Find traverses directory structures and
returns found pod files, along with their canonical names (like
\&\f(CW\*(C`File::Spec::Unix\*(C'\fR).  Pod::ParseUtils contains
\&\fBPod::List\fR (useful for storing pod list information), \fBPod::Hyperlink\fR
(for parsing the contents of \f(CW\*(C`L<>\*(C'\fR sequences) and \fBPod::Cache\fR
(for caching information about pod files, e.g., link nodes).
.IP "Pod::Select, podselect" 4
.IX Item "Pod::Select, podselect"
Pod::Select is a subclass of Pod::Parser which provides a function
named \*(L"\fIpodselect()\fR\*(R" to filter out user-specified sections of raw pod
documentation from an input stream. podselect is a script that provides
access to Pod::Select from other scripts to be used as a filter.
See Pod::Select.
.IP "Pod::Usage, pod2usage" 4
.IX Item "Pod::Usage, pod2usage"
Pod::Usage provides the function \*(L"\fIpod2usage()\fR\*(R" to print usage messages for
a Perl script based on its embedded pod documentation.  The \fIpod2usage()\fR
function is generally useful to all script authors since it lets them
write and maintain a single source (the pods) for documentation, thus
removing the need to create and maintain redundant usage message text
consisting of information already in the pods.
.Sp
There is also a pod2usage script which can be used from other kinds of
scripts to print usage messages from pods (even for non-Perl scripts
with pods embedded in comments).
.Sp
For details and examples, please see Pod::Usage.
.IP "Pod::Text and Pod::Man" 4
.IX Item "Pod::Text and Pod::Man"
Pod::Text has been rewritten to use Pod::Parser.  While \fIpod2text()\fR is
still available for backwards compatibility, the module now has a new
preferred interface.  See Pod::Text for the details.  The new Pod::Text
module is easily subclassed for tweaks to the output, and two such
subclasses (Pod::Text::Termcap for man-page-style bold and underlining
using termcap information, and Pod::Text::Color for markup with \s-1ANSI\s0 color
sequences) are now standard.
.Sp
pod2man has been turned into a module, Pod::Man, which also uses
Pod::Parser.  In the process, several outstanding bugs related to quotes
in section headers, quoting of code escapes, and nested lists have been
fixed.  pod2man is now a wrapper script around this module.
.IP "SDBM_File" 4
.IX Item "SDBM_File"
An \s-1EXISTS\s0 method has been added to this module (and \fIsdbm_exists()\fR has
been added to the underlying sdbm library), so one can now call exists
on an SDBM_File tied hash and get the correct result, rather than a
runtime error.
.Sp
A bug that may have caused data loss when more than one disk block
happens to be read from the database in a single \s-1\fIFETCH\s0()\fR has been
fixed.
.IP "Sys::Syslog" 4
.IX Item "Sys::Syslog"
Sys::Syslog now uses XSUBs to access facilities from syslog.h so it
no longer requires syslog.ph to exist.
.IP "Sys::Hostname" 4
.IX Item "Sys::Hostname"
Sys::Hostname now uses XSUBs to call the C library's \fIgethostname()\fR or
\&\fIuname()\fR if they exist.
.IP "Term::ANSIColor" 4
.IX Item "Term::ANSIColor"
Term::ANSIColor is a very simple module to provide easy and readable
access to the \s-1ANSI\s0 color and highlighting escape sequences, supported by
most \s-1ANSI\s0 terminal emulators.  It is now included standard.
.IP "Time::Local" 4
.IX Item "Time::Local"
The \fItimelocal()\fR and \fItimegm()\fR functions used to silently return bogus
results when the date fell outside the machine's integer range.  They
now consistently \fIcroak()\fR if the date falls in an unsupported range.
.IP "Win32" 4
.IX Item "Win32"
The error return value in list context has been changed for all functions
that return a list of values.  Previously these functions returned a list
with a single element \f(CW\*(C`undef\*(C'\fR if an error occurred.  Now these functions
return the empty list in these situations.  This applies to the following
functions:
.Sp
.Vb 2
\&    Win32::FsType
\&    Win32::GetOSVersion
.Ve
.Sp
The remaining functions are unchanged and continue to return \f(CW\*(C`undef\*(C'\fR on
error even in list context.
.Sp
The Win32::SetLastError(\s-1ERROR\s0) function has been added as a complement
to the \fIWin32::GetLastError()\fR function.
.Sp
The new Win32::GetFullPathName(\s-1FILENAME\s0) returns the full absolute
pathname for \s-1FILENAME\s0 in scalar context.  In list context it returns
a two-element list containing the fully qualified directory name and
the filename.  See Win32.
.IP "XSLoader" 4
.IX Item "XSLoader"
The XSLoader extension is a simpler alternative to DynaLoader.
See XSLoader.
.IP "\s-1DBM\s0 Filters" 4
.IX Item "DBM Filters"
A new feature called \*(L"\s-1DBM\s0 Filters\*(R" has been added to all the
\&\s-1DBM\s0 modules\-\-DB_File, GDBM_File, NDBM_File, ODBM_File, and SDBM_File.
\&\s-1DBM\s0 Filters add four new methods to each \s-1DBM\s0 module:
.Sp
.Vb 4
\&    filter_store_key
\&    filter_store_value
\&    filter_fetch_key
\&    filter_fetch_value
.Ve
.Sp
These can be used to filter key-value pairs before the pairs are
written to the database or just after they are read from the database.
See perldbmfilter for further information.
.SS "Pragmata"
.IX Subsection "Pragmata"
\&\f(CW\*(C`use attrs\*(C'\fR is now obsolete, and is only provided for
backward-compatibility.  It's been replaced by the \f(CW\*(C`sub : attributes\*(C'\fR
syntax.  See \*(L"Subroutine Attributes\*(R" in perlsub and attributes.
.PP
Lexical warnings pragma, \f(CW\*(C`use warnings;\*(C'\fR, to control optional warnings.
See perllexwarn.
.PP
\&\f(CW\*(C`use filetest\*(C'\fR to control the behaviour of filetests (\f(CW\*(C`\-r\*(C'\fR \f(CW\*(C`\-w\*(C'\fR
\&...).  Currently only one subpragma implemented, \*(L"use filetest
\&'access';\*(R", that uses \fIaccess\fR\|(2) or equivalent to check permissions
instead of using \fIstat\fR\|(2) as usual.  This matters in filesystems
where there are ACLs (access control lists): the \fIstat\fR\|(2) might lie,
but \fIaccess\fR\|(2) knows better.
.PP
The \f(CW\*(C`open\*(C'\fR pragma can be used to specify default disciplines for
handle constructors (e.g. \fIopen()\fR) and for qx//.  The two
pseudo-disciplines \f(CW\*(C`:raw\*(C'\fR and \f(CW\*(C`:crlf\*(C'\fR are currently supported on
DOS-derivative platforms (i.e. where binmode is not a no-op).
See also \*(L"\fIbinmode()\fR can be used to set :crlf and :raw modes\*(R".
.SH "Utility Changes"
.IX Header "Utility Changes"
.SS "dprofpp"
.IX Subsection "dprofpp"
\&\f(CW\*(C`dprofpp\*(C'\fR is used to display profile data generated using \f(CW\*(C`Devel::DProf\*(C'\fR.
See dprofpp.
.SS "find2perl"
.IX Subsection "find2perl"
The \f(CW\*(C`find2perl\*(C'\fR utility now uses the enhanced features of the File::Find
module.  The \-depth and \-follow options are supported.  Pod documentation
is also included in the script.
.SS "h2xs"
.IX Subsection "h2xs"
The \f(CW\*(C`h2xs\*(C'\fR tool can now work in conjunction with \f(CW\*(C`C::Scan\*(C'\fR (available
from \s-1CPAN\s0) to automatically parse real-life header files.  The \f(CW\*(C`\-M\*(C'\fR,
\&\f(CW\*(C`\-a\*(C'\fR, \f(CW\*(C`\-k\*(C'\fR, and \f(CW\*(C`\-o\*(C'\fR options are new.
.SS "perlcc"
.IX Subsection "perlcc"
\&\f(CW\*(C`perlcc\*(C'\fR now supports the C and Bytecode backends.  By default,
it generates output from the simple C backend rather than the
optimized C backend.
.PP
Support for non-Unix platforms has been improved.
.SS "perldoc"
.IX Subsection "perldoc"
\&\f(CW\*(C`perldoc\*(C'\fR has been reworked to avoid possible security holes.
It will not by default let itself be run as the superuser, but you
may still use the \fB\-U\fR switch to try to make it drop privileges
first.
.SS "The Perl Debugger"
.IX Subsection "The Perl Debugger"
Many bug fixes and enhancements were added to \fIperl5db.pl\fR, the
Perl debugger.  The help documentation was rearranged.  New commands
include \f(CW\*(C`< ?\*(C'\fR, \f(CW\*(C`> ?\*(C'\fR, and \f(CW\*(C`{ ?\*(C'\fR to list out current
actions, \f(CW\*(C`man \f(CIdocpage\f(CW\*(C'\fR to run your doc viewer on some perl
docset, and support for quoted options.  The help information was
rearranged, and should be viewable once again if you're using \fBless\fR
as your pager.  A serious security hole was plugged\*(--you should
immediately remove all older versions of the Perl debugger as
installed in previous releases, all the way back to perl3, from
your system to avoid being bitten by this.
.SH "Improved Documentation"
.IX Header "Improved Documentation"
Many of the platform-specific \s-1README\s0 files are now part of the perl
installation.  See perl for the complete list.
.IP "perlapi.pod" 4
.IX Item "perlapi.pod"
The official list of public Perl \s-1API\s0 functions.
.IP "perlboot.pod" 4
.IX Item "perlboot.pod"
A tutorial for beginners on object-oriented Perl.
.IP "perlcompile.pod" 4
.IX Item "perlcompile.pod"
An introduction to using the Perl Compiler suite.
.IP "perldbmfilter.pod" 4
.IX Item "perldbmfilter.pod"
A howto document on using the \s-1DBM\s0 filter facility.
.IP "perldebug.pod" 4
.IX Item "perldebug.pod"
All material unrelated to running the Perl debugger, plus all
low-level guts-like details that risked crushing the casual user
of the debugger, have been relocated from the old manpage to the
next entry below.
.IP "perldebguts.pod" 4
.IX Item "perldebguts.pod"
This new manpage contains excessively low-level material not related
to the Perl debugger, but slightly related to debugging Perl itself.
It also contains some arcane internal details of how the debugging
process works that may only be of interest to developers of Perl
debuggers.
.IP "perlfork.pod" 4
.IX Item "perlfork.pod"
Notes on the \fIfork()\fR emulation currently available for the Windows platform.
.IP "perlfilter.pod" 4
.IX Item "perlfilter.pod"
An introduction to writing Perl source filters.
.IP "perlhack.pod" 4
.IX Item "perlhack.pod"
Some guidelines for hacking the Perl source code.
.IP "perlintern.pod" 4
.IX Item "perlintern.pod"
A list of internal functions in the Perl source code.
(List is currently empty.)
.IP "perllexwarn.pod" 4
.IX Item "perllexwarn.pod"
Introduction and reference information about lexically scoped
warning categories.
.IP "perlnumber.pod" 4
.IX Item "perlnumber.pod"
Detailed information about numbers as they are represented in Perl.
.IP "perlopentut.pod" 4
.IX Item "perlopentut.pod"
A tutorial on using \fIopen()\fR effectively.
.IP "perlreftut.pod" 4
.IX Item "perlreftut.pod"
A tutorial that introduces the essentials of references.
.IP "perltootc.pod" 4
.IX Item "perltootc.pod"
A tutorial on managing class data for object modules.
.IP "perltodo.pod" 4
.IX Item "perltodo.pod"
Discussion of the most often wanted features that may someday be
supported in Perl.
.IP "perlunicode.pod" 4
.IX Item "perlunicode.pod"
An introduction to Unicode support features in Perl.
.SH "Performance enhancements"
.IX Header "Performance enhancements"
.ie n .SS "Simple \fIsort()\fP using { $a <=> $b } and the like are optimized"
.el .SS "Simple \fIsort()\fP using { \f(CW$a\fP <=> \f(CW$b\fP } and the like are optimized"
.IX Subsection "Simple sort() using { $a <=> $b } and the like are optimized"
Many common \fIsort()\fR operations using a simple inlined block are now
optimized for faster performance.
.SS "Optimized assignments to lexical variables"
.IX Subsection "Optimized assignments to lexical variables"
Certain operations in the \s-1RHS\s0 of assignment statements have been
optimized to directly set the lexical variable on the \s-1LHS\s0,
eliminating redundant copying overheads.
.SS "Faster subroutine calls"
.IX Subsection "Faster subroutine calls"
Minor changes in how subroutine calls are handled internally
provide marginal improvements in performance.
.SS "\fIdelete()\fP, \fIeach()\fP, \fIvalues()\fP and hash iteration are faster"
.IX Subsection "delete(), each(), values() and hash iteration are faster"
The hash values returned by \fIdelete()\fR, \fIeach()\fR, \fIvalues()\fR and hashes in a
list context are the actual values in the hash, instead of copies.
This results in significantly better performance, because it eliminates
needless copying in most situations.
.SH "Installation and Configuration Improvements"
.IX Header "Installation and Configuration Improvements"
.SS "\-Dusethreads means something different"
.IX Subsection "-Dusethreads means something different"
The \-Dusethreads flag now enables the experimental interpreter-based thread
support by default.  To get the flavor of experimental threads that was in
5.005 instead, you need to run Configure with \*(L"\-Dusethreads \-Duse5005threads\*(R".
.PP
As of v5.6.0, interpreter-threads support is still lacking a way to
create new threads from Perl (i.e., \f(CW\*(C`use Thread;\*(C'\fR will not work with
interpreter threads).  \f(CW\*(C`use Thread;\*(C'\fR continues to be available when you
specify the \-Duse5005threads option to Configure, bugs and all.
.PP
.Vb 2
\&    NOTE: Support for threads continues to be an experimental feature.
\&    Interfaces and implementation are subject to sudden and drastic changes.
.Ve
.SS "New Configure flags"
.IX Subsection "New Configure flags"
The following new flags may be enabled on the Configure command line
by running Configure with \f(CW\*(C`\-Dflag\*(C'\fR.
.PP
.Vb 3
\&    usemultiplicity
\&    usethreads useithreads      (new interpreter threads: no Perl API yet)
\&    usethreads use5005threads   (threads as they were in 5.005)
\&
\&    use64bitint                 (equal to now deprecated \*(Aquse64bits\*(Aq)
\&    use64bitall
\&
\&    uselongdouble
\&    usemorebits
\&    uselargefiles
\&    usesocks                    (only SOCKS v5 supported)
.Ve
.SS "Threadedness and 64\-bitness now more daring"
.IX Subsection "Threadedness and 64-bitness now more daring"
The Configure options enabling the use of threads and the use of
64\-bitness are now more daring in the sense that they no more have an
explicit list of operating systems of known threads/64\-bit
capabilities.  In other words: if your operating system has the
necessary APIs and datatypes, you should be able just to go ahead and
use them, for threads by Configure \-Dusethreads, and for 64 bits
either explicitly by Configure \-Duse64bitint or implicitly if your
system has 64\-bit wide datatypes.  See also \*(L"64\-bit support\*(R".
.SS "Long Doubles"
.IX Subsection "Long Doubles"
Some platforms have \*(L"long doubles\*(R", floating point numbers of even
larger range than ordinary \*(L"doubles\*(R".  To enable using long doubles for
Perl's scalars, use \-Duselongdouble.
.SS "\-Dusemorebits"
.IX Subsection "-Dusemorebits"
You can enable both \-Duse64bitint and \-Duselongdouble with \-Dusemorebits.
See also \*(L"64\-bit support\*(R".
.SS "\-Duselargefiles"
.IX Subsection "-Duselargefiles"
Some platforms support system APIs that are capable of handling large files
(typically, files larger than two gigabytes).  Perl will try to use these
APIs if you ask for \-Duselargefiles.
.PP
See \*(L"Large file support\*(R" for more information.
.SS "installusrbinperl"
.IX Subsection "installusrbinperl"
You can use \*(L"Configure \-Uinstallusrbinperl\*(R" which causes installperl
to skip installing perl also as /usr/bin/perl.  This is useful if you
prefer not to modify /usr/bin for some reason or another but harmful
because many scripts assume to find Perl in /usr/bin/perl.
.SS "\s-1SOCKS\s0 support"
.IX Subsection "SOCKS support"
You can use \*(L"Configure \-Dusesocks\*(R" which causes Perl to probe
for the \s-1SOCKS\s0 proxy protocol library (v5, not v4).  For more information
on \s-1SOCKS\s0, see:
.PP
.Vb 1
\&    http://www.socks.nec.com/
.Ve
.ie n .SS """\-A"" flag"
.el .SS "\f(CW\-A\fP flag"
.IX Subsection "-A flag"
You can \*(L"post-edit\*(R" the Configure variables using the Configure \f(CW\*(C`\-A\*(C'\fR
switch.  The editing happens immediately after the platform specific
hints files have been processed but before the actual configuration
process starts.  Run \f(CW\*(C`Configure \-h\*(C'\fR to find out the full \f(CW\*(C`\-A\*(C'\fR syntax.
.SS "Enhanced Installation Directories"
.IX Subsection "Enhanced Installation Directories"
The installation structure has been enriched to improve the support
for maintaining multiple versions of perl, to provide locations for
vendor-supplied modules, scripts, and manpages, and to ease maintenance
of locally-added modules, scripts, and manpages.  See the section on
Installation Directories in the \s-1INSTALL\s0 file for complete details.
For most users building and installing from source, the defaults should
be fine.
.PP
If you previously used \f(CW\*(C`Configure \-Dsitelib\*(C'\fR or \f(CW\*(C`\-Dsitearch\*(C'\fR to set
special values for library directories, you might wish to consider using
the new \f(CW\*(C`\-Dsiteprefix\*(C'\fR setting instead.  Also, if you wish to re-use a
config.sh file from an earlier version of perl, you should be sure to
check that Configure makes sensible choices for the new directories.
See \s-1INSTALL\s0 for complete details.
.SH "Platform specific changes"
.IX Header "Platform specific changes"
.SS "Supported platforms"
.IX Subsection "Supported platforms"
.IP "\(bu" 4
The Mach CThreads (\s-1NEXTSTEP\s0, \s-1OPENSTEP\s0) are now supported by the Thread
extension.
.IP "\(bu" 4
GNU/Hurd is now supported.
.IP "\(bu" 4
Rhapsody/Darwin is now supported.
.IP "\(bu" 4
\&\s-1EPOC\s0 is now supported (on Psion 5).
.IP "\(bu" 4
The cygwin port (formerly cygwin32) has been greatly improved.
.SS "\s-1DOS\s0"
.IX Subsection "DOS"
.IP "\(bu" 4
Perl now works with djgpp 2.02 (and 2.03 alpha).
.IP "\(bu" 4
Environment variable names are not converted to uppercase any more.
.IP "\(bu" 4
Incorrect exit codes from backticks have been fixed.
.IP "\(bu" 4
This port continues to use its own builtin globbing (not File::Glob).
.SS "\s-1OS390\s0 (OpenEdition \s-1MVS\s0)"
.IX Subsection "OS390 (OpenEdition MVS)"
Support for this \s-1EBCDIC\s0 platform has not been renewed in this release.
There are difficulties in reconciling Perl's standardization on \s-1UTF\-8\s0
as its internal representation for characters with the \s-1EBCDIC\s0 character
set, because the two are incompatible.
.PP
It is unclear whether future versions will renew support for this
platform, but the possibility exists.
.SS "\s-1VMS\s0"
.IX Subsection "VMS"
Numerous revisions and extensions to configuration, build, testing, and
installation process to accommodate core changes and VMS-specific options.
.PP
Expand \f(CW%ENV\fR\-handling code to allow runtime mapping to logical names,
\&\s-1CLI\s0 symbols, and \s-1CRTL\s0 environ array.
.PP
Extension of subprocess invocation code to accept filespecs as command
\&\*(L"verbs\*(R".
.PP
Add to Perl command line processing the ability to use default file types and
to recognize Unix-style \f(CW\*(C`2>&1\*(C'\fR.
.PP
Expansion of File::Spec::VMS routines, and integration into ExtUtils::MM_VMS.
.PP
Extension of ExtUtils::MM_VMS to handle complex extensions more flexibly.
.PP
Barewords at start of Unix-syntax paths may be treated as text rather than
only as logical names.
.PP
Optional secure translation of several logical names used internally by Perl.
.PP
Miscellaneous bugfixing and porting of new core code to \s-1VMS\s0.
.PP
Thanks are gladly extended to the many people who have contributed \s-1VMS\s0
patches, testing, and ideas.
.SS "Win32"
.IX Subsection "Win32"
Perl can now emulate \fIfork()\fR internally, using multiple interpreters running
in different concurrent threads.  This support must be enabled at build
time.  See perlfork for detailed information.
.PP
When given a pathname that consists only of a drivename, such as \f(CW\*(C`A:\*(C'\fR,
\&\fIopendir()\fR and \fIstat()\fR now use the current working directory for the drive
rather than the drive root.
.PP
The builtin \s-1XSUB\s0 functions in the Win32:: namespace are documented.  See
Win32.
.PP
$^X now contains the full path name of the running executable.
.PP
A \fIWin32::GetLongPathName()\fR function is provided to complement
\&\fIWin32::GetFullPathName()\fR and \fIWin32::GetShortPathName()\fR.  See Win32.
.PP
\&\fIPOSIX::uname()\fR is supported.
.PP
system(1,...) now returns true process IDs rather than process
handles.  \fIkill()\fR accepts any real process id, rather than strictly
return values from system(1,...).
.PP
For better compatibility with Unix, \f(CW\*(C`kill(0, $pid)\*(C'\fR can now be used to
test whether a process exists.
.PP
The \f(CW\*(C`Shell\*(C'\fR module is supported.
.PP
Better support for building Perl under command.com in Windows 95
has been added.
.PP
Scripts are read in binary mode by default to allow ByteLoader (and
the filter mechanism in general) to work properly.  For compatibility,
the \s-1DATA\s0 filehandle will be set to text mode if a carriage return is
detected at the end of the line containing the _\|_END_\|_ or _\|_DATA_\|_
token; if not, the \s-1DATA\s0 filehandle will be left open in binary mode.
Earlier versions always opened the \s-1DATA\s0 filehandle in text mode.
.PP
The \fIglob()\fR operator is implemented via the \f(CW\*(C`File::Glob\*(C'\fR extension,
which supports glob syntax of the C shell.  This increases the flexibility
of the \fIglob()\fR operator, but there may be compatibility issues for
programs that relied on the older globbing syntax.  If you want to
preserve compatibility with the older syntax, you might want to run
perl with \f(CW\*(C`\-MFile::DosGlob\*(C'\fR.  For details and compatibility information,
see File::Glob.
.SH "Significant bug fixes"
.IX Header "Significant bug fixes"
.SS "<\s-1HANDLE\s0> on empty files"
.IX Subsection "<HANDLE> on empty files"
With \f(CW$/\fR set to \f(CW\*(C`undef\*(C'\fR, \*(L"slurping\*(R" an empty file returns a string of
zero length (instead of \f(CW\*(C`undef\*(C'\fR, as it used to) the first time the
\&\s-1HANDLE\s0 is read after \f(CW$/\fR is set to \f(CW\*(C`undef\*(C'\fR.  Further reads yield
\&\f(CW\*(C`undef\*(C'\fR.
.PP
This means that the following will append \*(L"foo\*(R" to an empty file (it used
to do nothing):
.PP
.Vb 1
\&    perl \-0777 \-pi \-e \*(Aqs/^/foo/\*(Aq empty_file
.Ve
.PP
The behaviour of:
.PP
.Vb 1
\&    perl \-pi \-e \*(Aqs/^/foo/\*(Aq empty_file
.Ve
.PP
is unchanged (it continues to leave the file empty).
.ie n .SS """eval \*(Aq...\*(Aq"" improvements"
.el .SS "\f(CWeval \*(Aq...\*(Aq\fP improvements"
.IX Subsection "eval ... improvements"
Line numbers (as reflected by \fIcaller()\fR and most diagnostics) within
\&\f(CW\*(C`eval \*(Aq...\*(Aq\*(C'\fR were often incorrect where here documents were involved.
This has been corrected.
.PP
Lexical lookups for variables appearing in \f(CW\*(C`eval \*(Aq...\*(Aq\*(C'\fR within
functions that were themselves called within an \f(CW\*(C`eval \*(Aq...\*(Aq\*(C'\fR were
searching the wrong place for lexicals.  The lexical search now
correctly ends at the subroutine's block boundary.
.PP
The use of \f(CW\*(C`return\*(C'\fR within \f(CW\*(C`eval {...}\*(C'\fR caused $@ not to be reset
correctly when no exception occurred within the eval.  This has
been fixed.
.PP
Parsing of here documents used to be flawed when they appeared as
the replacement expression in \f(CW\*(C`eval \*(Aqs/.../.../e\*(Aq\*(C'\fR.  This has
been fixed.
.SS "All compilation errors are true errors"
.IX Subsection "All compilation errors are true errors"
Some \*(L"errors\*(R" encountered at compile time were by necessity 
generated as warnings followed by eventual termination of the
program.  This enabled more such errors to be reported in a
single run, rather than causing a hard stop at the first error
that was encountered.
.PP
The mechanism for reporting such errors has been reimplemented
to queue compile-time errors and report them at the end of the
compilation as true errors rather than as warnings.  This fixes
cases where error messages leaked through in the form of warnings
when code was compiled at run time using \f(CW\*(C`eval STRING\*(C'\fR, and
also allows such errors to be reliably trapped using \f(CW\*(C`eval "..."\*(C'\fR.
.SS "Implicitly closed filehandles are safer"
.IX Subsection "Implicitly closed filehandles are safer"
Sometimes implicitly closed filehandles (as when they are localized,
and Perl automatically closes them on exiting the scope) could
inadvertently set $? or $!.  This has been corrected.
.SS "Behavior of list slices is more consistent"
.IX Subsection "Behavior of list slices is more consistent"
When taking a slice of a literal list (as opposed to a slice of
an array or hash), Perl used to return an empty list if the
result happened to be composed of all undef values.
.PP
The new behavior is to produce an empty list if (and only if)
the original list was empty.  Consider the following example:
.PP
.Vb 1
\&    @a = (1,undef,undef,2)[2,1,2];
.Ve
.PP
The old behavior would have resulted in \f(CW@a\fR having no elements.
The new behavior ensures it has three undefined elements.
.PP
Note in particular that the behavior of slices of the following
cases remains unchanged:
.PP
.Vb 5
\&    @a = ()[1,2];
\&    @a = (getpwent)[7,0];
\&    @a = (anything_returning_empty_list())[2,1,2];
\&    @a = @b[2,1,2];
\&    @a = @c{\*(Aqa\*(Aq,\*(Aqb\*(Aq,\*(Aqc\*(Aq};
.Ve
.PP
See perldata.
.ie n .SS """(\e$)"" prototype and $foo{a}"
.el .SS "\f(CW(\e$)\fP prototype and \f(CW$foo{a}\fP"
.IX Subsection "($) prototype and $foo{a}"
A scalar reference prototype now correctly allows a hash or
array element in that slot.
.ie n .SS """goto &sub"" and \s-1AUTOLOAD\s0"
.el .SS "\f(CWgoto &sub\fP and \s-1AUTOLOAD\s0"
.IX Subsection "goto &sub and AUTOLOAD"
The \f(CW\*(C`goto &sub\*(C'\fR construct works correctly when \f(CW&sub\fR happens
to be autoloaded.
.ie n .SS """\-bareword"" allowed under ""use integer"""
.el .SS "\f(CW\-bareword\fP allowed under \f(CWuse integer\fP"
.IX Subsection "-bareword allowed under use integer"
The autoquoting of barewords preceded by \f(CW\*(C`\-\*(C'\fR did not work
in prior versions when the \f(CW\*(C`integer\*(C'\fR pragma was enabled.
This has been fixed.
.SS "Failures in \s-1\fIDESTROY\s0()\fP"
.IX Subsection "Failures in DESTROY()"
When code in a destructor threw an exception, it went unnoticed
in earlier versions of Perl, unless someone happened to be
looking in $@ just after the point the destructor happened to
run.  Such failures are now visible as warnings when warnings are
enabled.
.SS "Locale bugs fixed"
.IX Subsection "Locale bugs fixed"
\&\fIprintf()\fR and \fIsprintf()\fR previously reset the numeric locale
back to the default \*(L"C\*(R" locale.  This has been fixed.
.PP
Numbers formatted according to the local numeric locale
(such as using a decimal comma instead of a decimal dot) caused
\&\*(L"isn't numeric\*(R" warnings, even while the operations accessing
those numbers produced correct results.  These warnings have been
discontinued.
.SS "Memory leaks"
.IX Subsection "Memory leaks"
The \f(CW\*(C`eval \*(Aqreturn sub {...}\*(Aq\*(C'\fR construct could sometimes leak
memory.  This has been fixed.
.PP
Operations that aren't filehandle constructors used to leak memory
when used on invalid filehandles.  This has been fixed.
.PP
Constructs that modified \f(CW@_\fR could fail to deallocate values
in \f(CW@_\fR and thus leak memory.  This has been corrected.
.SS "Spurious subroutine stubs after failed subroutine calls"
.IX Subsection "Spurious subroutine stubs after failed subroutine calls"
Perl could sometimes create empty subroutine stubs when a
subroutine was not found in the package.  Such cases stopped
later method lookups from progressing into base packages.
This has been corrected.
.ie n .SS "Taint failures under ""\-U"""
.el .SS "Taint failures under \f(CW\-U\fP"
.IX Subsection "Taint failures under -U"
When running in unsafe mode, taint violations could sometimes
cause silent failures.  This has been fixed.
.ie n .SS "\s-1END\s0 blocks and the ""\-c"" switch"
.el .SS "\s-1END\s0 blocks and the \f(CW\-c\fP switch"
.IX Subsection "END blocks and the -c switch"
Prior versions used to run \s-1BEGIN\s0 \fBand\fR \s-1END\s0 blocks when Perl was
run in compile-only mode.  Since this is typically not the expected
behavior, \s-1END\s0 blocks are not executed anymore when the \f(CW\*(C`\-c\*(C'\fR switch
is used, or if compilation fails.
.PP
See \*(L"Support for \s-1CHECK\s0 blocks\*(R" for how to run things when the compile 
phase ends.
.SS "Potential to leak \s-1DATA\s0 filehandles"
.IX Subsection "Potential to leak DATA filehandles"
Using the \f(CW\*(C`_\|_DATA_\|_\*(C'\fR token creates an implicit filehandle to
the file that contains the token.  It is the program's
responsibility to close it when it is done reading from it.
.PP
This caveat is now better explained in the documentation.
See perldata.
.SH "New or Changed Diagnostics"
.IX Header "New or Changed Diagnostics"
.ie n .IP """%s"" variable %s masks earlier declaration in same %s" 4
.el .IP "``%s'' variable \f(CW%s\fR masks earlier declaration in same \f(CW%s\fR" 4
.IX Item "%s variable %s masks earlier declaration in same %s"
(W misc) A \*(L"my\*(R" or \*(L"our\*(R" variable has been redeclared in the current scope or statement,
effectively eliminating all access to the previous instance.  This is almost
always a typographical error.  Note that the earlier variable will still exist
until the end of the scope or until all closure referents to it are
destroyed.
.ie n .IP """my sub"" not yet implemented" 4
.el .IP "``my sub'' not yet implemented" 4
.IX Item "my sub not yet implemented"
(F) Lexically scoped subroutines are not yet implemented.  Don't try that
yet.
.ie n .IP """our"" variable %s redeclared" 4
.el .IP "``our'' variable \f(CW%s\fR redeclared" 4
.IX Item "our variable %s redeclared"
(W misc) You seem to have already declared the same global once before in the
current lexical scope.
.ie n .IP "'!' allowed only after types %s" 4
.el .IP "'!' allowed only after types \f(CW%s\fR" 4
.IX Item "'!' allowed only after types %s"
(F) The '!' is allowed in \fIpack()\fR and \fIunpack()\fR only after certain types.
See \*(L"pack\*(R" in perlfunc.
.IP "/ cannot take a count" 4
.IX Item "/ cannot take a count"
(F) You had an unpack template indicating a counted-length string,
but you have also specified an explicit size for the string.
See \*(L"pack\*(R" in perlfunc.
.IP "/ must be followed by a, A or Z" 4
.IX Item "/ must be followed by a, A or Z"
(F) You had an unpack template indicating a counted-length string,
which must be followed by one of the letters a, A or Z
to indicate what sort of string is to be unpacked.
See \*(L"pack\*(R" in perlfunc.
.IP "/ must be followed by a*, A* or Z*" 4
.IX Item "/ must be followed by a*, A* or Z*"
(F) You had a pack template indicating a counted-length string,
Currently the only things that can have their length counted are a*, A* or Z*.
See \*(L"pack\*(R" in perlfunc.
.IP "/ must follow a numeric type" 4
.IX Item "/ must follow a numeric type"
(F) You had an unpack template that contained a '#',
but this did not follow some numeric unpack specification.
See \*(L"pack\*(R" in perlfunc.
.IP "/%s/: Unrecognized escape \e\e%c passed through" 4
.IX Item "/%s/: Unrecognized escape %c passed through"
(W regexp) You used a backslash-character combination which is not recognized
by Perl.  This combination appears in an interpolated variable or a
\&\f(CW\*(C`\*(Aq\*(C'\fR\-delimited regular expression.  The character was understood literally.
.IP "/%s/: Unrecognized escape \e\e%c in character class passed through" 4
.IX Item "/%s/: Unrecognized escape %c in character class passed through"
(W regexp) You used a backslash-character combination which is not recognized
by Perl inside character classes.  The character was understood literally.
.ie n .IP "/%s/ should probably be written as ""%s""" 4
.el .IP "/%s/ should probably be written as ``%s''" 4
.IX Item "/%s/ should probably be written as %s"
(W syntax) You have used a pattern where Perl expected to find a string,
as in the first argument to \f(CW\*(C`join\*(C'\fR.  Perl will treat the true
or false result of matching the pattern against \f(CW$_\fR as the string,
which is probably not what you had in mind.
.IP "%s() called too early to check prototype" 4
.IX Item "%s() called too early to check prototype"
(W prototype) You've called a function that has a prototype before the parser saw a
definition or declaration for it, and Perl could not check that the call
conforms to the prototype.  You need to either add an early prototype
declaration for the subroutine in question, or move the subroutine
definition ahead of the call to get proper prototype checking.  Alternatively,
if you are certain that you're calling the function correctly, you may put
an ampersand before the name to avoid the warning.  See perlsub.
.ie n .IP "%s argument is not a \s-1HASH\s0 or \s-1ARRAY\s0 element" 4
.el .IP "\f(CW%s\fR argument is not a \s-1HASH\s0 or \s-1ARRAY\s0 element" 4
.IX Item "%s argument is not a HASH or ARRAY element"
(F) The argument to \fIexists()\fR must be a hash or array element, such as:
.Sp
.Vb 2
\&    $foo{$bar}
\&    $ref\->{"susie"}[12]
.Ve
.ie n .IP "%s argument is not a \s-1HASH\s0 or \s-1ARRAY\s0 element or slice" 4
.el .IP "\f(CW%s\fR argument is not a \s-1HASH\s0 or \s-1ARRAY\s0 element or slice" 4
.IX Item "%s argument is not a HASH or ARRAY element or slice"
(F) The argument to \fIdelete()\fR must be either a hash or array element, such as:
.Sp
.Vb 2
\&    $foo{$bar}
\&    $ref\->{"susie"}[12]
.Ve
.Sp
or a hash or array slice, such as:
.Sp
.Vb 2
\&    @foo[$bar, $baz, $xyzzy]
\&    @{$ref\->[12]}{"susie", "queue"}
.Ve
.ie n .IP "%s argument is not a subroutine name" 4
.el .IP "\f(CW%s\fR argument is not a subroutine name" 4
.IX Item "%s argument is not a subroutine name"
(F) The argument to \fIexists()\fR for \f(CW\*(C`exists &sub\*(C'\fR must be a subroutine
name, and not a subroutine call.  \f(CW\*(C`exists &sub()\*(C'\fR will generate this error.
.ie n .IP "%s package attribute may clash with future reserved word: %s" 4
.el .IP "\f(CW%s\fR package attribute may clash with future reserved word: \f(CW%s\fR" 4
.IX Item "%s package attribute may clash with future reserved word: %s"
(W reserved) A lowercase attribute name was used that had a package-specific handler.
That name might have a meaning to Perl itself some day, even though it
doesn't yet.  Perhaps you should use a mixed-case attribute name, instead.
See attributes.
.ie n .IP "(in cleanup) %s" 4
.el .IP "(in cleanup) \f(CW%s\fR" 4
.IX Item "(in cleanup) %s"
(W misc) This prefix usually indicates that a \s-1\fIDESTROY\s0()\fR method raised
the indicated exception.  Since destructors are usually called by
the system at arbitrary points during execution, and often a vast
number of times, the warning is issued only once for any number
of failures that would otherwise result in the same message being
repeated.
.Sp
Failure of user callbacks dispatched using the \f(CW\*(C`G_KEEPERR\*(C'\fR flag
could also result in this warning.  See \*(L"G_KEEPERR\*(R" in perlcall.
.IP "<> should be quotes" 4
.IX Item "<> should be quotes"
(F) You wrote \f(CW\*(C`require <file>\*(C'\fR when you should have written
\&\f(CW\*(C`require \*(Aqfile\*(Aq\*(C'\fR.
.IP "Attempt to join self" 4
.IX Item "Attempt to join self"
(F) You tried to join a thread from within itself, which is an
impossible task.  You may be joining the wrong thread, or you may
need to move the \fIjoin()\fR to some other thread.
.IP "Bad evalled substitution pattern" 4
.IX Item "Bad evalled substitution pattern"
(F) You've used the /e switch to evaluate the replacement for a
substitution, but perl found a syntax error in the code to evaluate,
most likely an unexpected right brace '}'.
.IP "Bad \fIrealloc()\fR ignored" 4
.IX Item "Bad realloc() ignored"
(S) An internal routine called \fIrealloc()\fR on something that had never been
\&\fImalloc()\fRed in the first place. Mandatory, but can be disabled by
setting environment variable \f(CW\*(C`PERL_BADFREE\*(C'\fR to 1.
.IP "Bareword found in conditional" 4
.IX Item "Bareword found in conditional"
(W bareword) The compiler found a bareword where it expected a conditional,
which often indicates that an || or && was parsed as part of the
last argument of the previous construct, for example:
.Sp
.Vb 1
\&    open FOO || die;
.Ve
.Sp
It may also indicate a misspelled constant that has been interpreted
as a bareword:
.Sp
.Vb 2
\&    use constant TYPO => 1;
\&    if (TYOP) { print "foo" }
.Ve
.Sp
The \f(CW\*(C`strict\*(C'\fR pragma is useful in avoiding such errors.
.IP "Binary number > 0b11111111111111111111111111111111 non-portable" 4
.IX Item "Binary number > 0b11111111111111111111111111111111 non-portable"
(W portable) The binary number you specified is larger than 2**32\-1
(4294967295) and therefore non-portable between systems.  See
perlport for more on portability concerns.
.IP "Bit vector size > 32 non-portable" 4
.IX Item "Bit vector size > 32 non-portable"
(W portable) Using bit vector sizes larger than 32 is non-portable.
.ie n .IP "Buffer overflow in prime_env_iter: %s" 4
.el .IP "Buffer overflow in prime_env_iter: \f(CW%s\fR" 4
.IX Item "Buffer overflow in prime_env_iter: %s"
(W internal) A warning peculiar to \s-1VMS\s0.  While Perl was preparing to iterate over
\&\f(CW%ENV\fR, it encountered a logical name or symbol definition which was too long,
so it was truncated to the string shown.
.ie n .IP "Can't check filesystem of script ""%s""" 4
.el .IP "Can't check filesystem of script ``%s''" 4
.IX Item "Can't check filesystem of script %s"
(P) For some reason you can't check the filesystem of the script for nosuid.
.ie n .IP "Can't declare class for non-scalar %s in ""%s""" 4
.el .IP "Can't declare class for non-scalar \f(CW%s\fR in ``%s''" 4
.IX Item "Can't declare class for non-scalar %s in %s"
(S) Currently, only scalar variables can declared with a specific class
qualifier in a \*(L"my\*(R" or \*(L"our\*(R" declaration.  The semantics may be extended
for other types of variables in future.
.ie n .IP "Can't declare %s in ""%s""" 4
.el .IP "Can't declare \f(CW%s\fR in ``%s''" 4
.IX Item "Can't declare %s in %s"
(F) Only scalar, array, and hash variables may be declared as \*(L"my\*(R" or
\&\*(L"our\*(R" variables.  They must have ordinary identifiers as names.
.IP "Can't ignore signal \s-1CHLD\s0, forcing to default" 4
.IX Item "Can't ignore signal CHLD, forcing to default"
(W signal) Perl has detected that it is being run with the \s-1SIGCHLD\s0 signal
(sometimes known as \s-1SIGCLD\s0) disabled.  Since disabling this signal
will interfere with proper determination of exit status of child
processes, Perl has reset the signal to its default value.
This situation typically indicates that the parent program under
which Perl may be running (e.g., cron) is being very careless.
.IP "Can't modify non-lvalue subroutine call" 4
.IX Item "Can't modify non-lvalue subroutine call"
(F) Subroutines meant to be used in lvalue context should be declared as
such, see \*(L"Lvalue subroutines\*(R" in perlsub.
.IP "Can't read \s-1CRTL\s0 environ" 4
.IX Item "Can't read CRTL environ"
(S) A warning peculiar to \s-1VMS\s0.  Perl tried to read an element of \f(CW%ENV\fR
from the \s-1CRTL\s0's internal environment array and discovered the array was
missing.  You need to figure out where your \s-1CRTL\s0 misplaced its environ
or define \fI\s-1PERL_ENV_TABLES\s0\fR (see perlvms) so that environ is not searched.
.ie n .IP "Can't remove %s: %s, skipping file" 4
.el .IP "Can't remove \f(CW%s:\fR \f(CW%s\fR, skipping file" 4
.IX Item "Can't remove %s: %s, skipping file"
(S) You requested an inplace edit without creating a backup file.  Perl
was unable to remove the original file to replace it with the modified
file.  The file was left unmodified.
.ie n .IP "Can't return %s from lvalue subroutine" 4
.el .IP "Can't return \f(CW%s\fR from lvalue subroutine" 4
.IX Item "Can't return %s from lvalue subroutine"
(F) Perl detected an attempt to return illegal lvalues (such
as temporary or readonly values) from a subroutine used as an lvalue.
This is not allowed.
.IP "Can't weaken a nonreference" 4
.IX Item "Can't weaken a nonreference"
(F) You attempted to weaken something that was not a reference.  Only
references can be weakened.
.IP "Character class [:%s:] unknown" 4
.IX Item "Character class [:%s:] unknown"
(F) The class in the character class [: :] syntax is unknown.
See perlre.
.IP "Character class syntax [%s] belongs inside character classes" 4
.IX Item "Character class syntax [%s] belongs inside character classes"
(W unsafe) The character class constructs [: :], [= =], and [. .]  go
\&\fIinside\fR character classes, the [] are part of the construct,
for example: /[012[:alpha:]345]/.  Note that [= =] and [. .]
are not currently implemented; they are simply placeholders for
future extensions.
.ie n .IP "Constant is not %s reference" 4
.el .IP "Constant is not \f(CW%s\fR reference" 4
.IX Item "Constant is not %s reference"
(F) A constant value (perhaps declared using the \f(CW\*(C`use constant\*(C'\fR pragma)
is being dereferenced, but it amounts to the wrong type of reference.  The
message indicates the type of reference that was expected. This usually
indicates a syntax error in dereferencing the constant value.
See \*(L"Constant Functions\*(R" in perlsub and constant.
.ie n .IP "constant(%s): %s" 4
.el .IP "constant(%s): \f(CW%s\fR" 4
.IX Item "constant(%s): %s"
(F) The parser found inconsistencies either while attempting to define an
overloaded constant, or when trying to find the character name specified
in the \f(CW\*(C`\eN{...}\*(C'\fR escape.  Perhaps you forgot to load the corresponding
\&\f(CW\*(C`overload\*(C'\fR or \f(CW\*(C`charnames\*(C'\fR pragma?  See charnames and overload.
.IP "CORE::%s is not a keyword" 4
.IX Item "CORE::%s is not a keyword"
(F) The \s-1CORE::\s0 namespace is reserved for Perl keywords.
.IP "defined(@array) is deprecated" 4
.IX Item "defined(@array) is deprecated"
(D) \fIdefined()\fR is not usually useful on arrays because it checks for an
undefined \fIscalar\fR value.  If you want to see if the array is empty,
just use \f(CW\*(C`if (@array) { # not empty }\*(C'\fR for example.
.IP "defined(%hash) is deprecated" 4
.IX Item "defined(%hash) is deprecated"
(D) \fIdefined()\fR is not usually useful on hashes because it checks for an
undefined \fIscalar\fR value.  If you want to see if the hash is empty,
just use \f(CW\*(C`if (%hash) { # not empty }\*(C'\fR for example.
.IP "Did not produce a valid header" 4
.IX Item "Did not produce a valid header"
See Server error.
.ie n .IP "(Did you mean ""local"" instead of ""our""?)" 4
.el .IP "(Did you mean ``local'' instead of ``our''?)" 4
.IX Item "(Did you mean local instead of our?)"
(W misc) Remember that \*(L"our\*(R" does not localize the declared global variable.
You have declared it again in the same lexical scope, which seems superfluous.
.IP "Document contains no data" 4
.IX Item "Document contains no data"
See Server error.
.ie n .IP "entering effective %s failed" 4
.el .IP "entering effective \f(CW%s\fR failed" 4
.IX Item "entering effective %s failed"
(F) While under the \f(CW\*(C`use filetest\*(C'\fR pragma, switching the real and
effective uids or gids failed.
.ie n .IP "false [] range ""%s"" in regexp" 4
.el .IP "false [] range ``%s'' in regexp" 4
.IX Item "false [] range %s in regexp"
(W regexp) A character class range must start and end at a literal character, not
another character class like \f(CW\*(C`\ed\*(C'\fR or \f(CW\*(C`[:alpha:]\*(C'\fR.  The \*(L"\-\*(R" in your false
range is interpreted as a literal \*(L"\-\*(R".  Consider quoting the \*(L"\-\*(R",  \*(L"\e\-\*(R".
See perlre.
.ie n .IP "Filehandle %s opened only for output" 4
.el .IP "Filehandle \f(CW%s\fR opened only for output" 4
.IX Item "Filehandle %s opened only for output"
(W io) You tried to read from a filehandle opened only for writing.  If you
intended it to be a read/write filehandle, you needed to open it with
\&\*(L"+<\*(R" or \*(L"+>\*(R" or \*(L"+>>\*(R" instead of with \*(L"<\*(R" or nothing.  If
you intended only to read from the file, use \*(L"<\*(R".  See
\&\*(L"open\*(R" in perlfunc.
.ie n .IP "\fIflock()\fR on closed filehandle %s" 4
.el .IP "\fIflock()\fR on closed filehandle \f(CW%s\fR" 4
.IX Item "flock() on closed filehandle %s"
(W closed) The filehandle you're attempting to \fIflock()\fR got itself closed some
time before now.  Check your logic flow.  \fIflock()\fR operates on filehandles.
Are you attempting to call \fIflock()\fR on a dirhandle by the same name?
.ie n .IP "Global symbol ""%s"" requires explicit package name" 4
.el .IP "Global symbol ``%s'' requires explicit package name" 4
.IX Item "Global symbol %s requires explicit package name"
(F) You've said \*(L"use strict vars\*(R", which indicates that all variables
must either be lexically scoped (using \*(L"my\*(R"), declared beforehand using
\&\*(L"our\*(R", or explicitly qualified to say which package the global variable
is in (using \*(L"::\*(R").
.IP "Hexadecimal number > 0xffffffff non-portable" 4
.IX Item "Hexadecimal number > 0xffffffff non-portable"
(W portable) The hexadecimal number you specified is larger than 2**32\-1
(4294967295) and therefore non-portable between systems.  See
perlport for more on portability concerns.
.ie n .IP "Ill-formed \s-1CRTL\s0 environ value ""%s""" 4
.el .IP "Ill-formed \s-1CRTL\s0 environ value ``%s''" 4
.IX Item "Ill-formed CRTL environ value %s"
(W internal) A warning peculiar to \s-1VMS\s0.  Perl tried to read the \s-1CRTL\s0's internal
environ array, and encountered an element without the \f(CW\*(C`=\*(C'\fR delimiter
used to separate keys from values.  The element is ignored.
.IP "Ill-formed message in prime_env_iter: |%s|" 4
.IX Item "Ill-formed message in prime_env_iter: |%s|"
(W internal) A warning peculiar to \s-1VMS\s0.  Perl tried to read a logical name
or \s-1CLI\s0 symbol definition when preparing to iterate over \f(CW%ENV\fR, and
didn't see the expected delimiter between key and value, so the
line was ignored.
.ie n .IP "Illegal binary digit %s" 4
.el .IP "Illegal binary digit \f(CW%s\fR" 4
.IX Item "Illegal binary digit %s"
(F) You used a digit other than 0 or 1 in a binary number.
.ie n .IP "Illegal binary digit %s ignored" 4
.el .IP "Illegal binary digit \f(CW%s\fR ignored" 4
.IX Item "Illegal binary digit %s ignored"
(W digit) You may have tried to use a digit other than 0 or 1 in a binary number.
Interpretation of the binary number stopped before the offending digit.
.IP "Illegal number of bits in vec" 4
.IX Item "Illegal number of bits in vec"
(F) The number of bits in \fIvec()\fR (the third argument) must be a power of
two from 1 to 32 (or 64, if your platform supports that).
.ie n .IP "Integer overflow in %s number" 4
.el .IP "Integer overflow in \f(CW%s\fR number" 4
.IX Item "Integer overflow in %s number"
(W overflow) The hexadecimal, octal or binary number you have specified either
as a literal or as an argument to \fIhex()\fR or \fIoct()\fR is too big for your
architecture, and has been converted to a floating point number.  On a
32\-bit architecture the largest hexadecimal, octal or binary number
representable without overflow is 0xFFFFFFFF, 037777777777, or
0b11111111111111111111111111111111 respectively.  Note that Perl
transparently promotes all numbers to a floating point representation
internally\*(--subject to loss of precision errors in subsequent
operations.
.ie n .IP "Invalid %s attribute: %s" 4
.el .IP "Invalid \f(CW%s\fR attribute: \f(CW%s\fR" 4
.IX Item "Invalid %s attribute: %s"
The indicated attribute for a subroutine or variable was not recognized
by Perl or by a user-supplied handler.  See attributes.
.ie n .IP "Invalid %s attributes: %s" 4
.el .IP "Invalid \f(CW%s\fR attributes: \f(CW%s\fR" 4
.IX Item "Invalid %s attributes: %s"
The indicated attributes for a subroutine or variable were not recognized
by Perl or by a user-supplied handler.  See attributes.
.ie n .IP "invalid [] range ""%s"" in regexp" 4
.el .IP "invalid [] range ``%s'' in regexp" 4
.IX Item "invalid [] range %s in regexp"
The offending range is now explicitly displayed.
.ie n .IP "Invalid separator character %s in attribute list" 4
.el .IP "Invalid separator character \f(CW%s\fR in attribute list" 4
.IX Item "Invalid separator character %s in attribute list"
(F) Something other than a colon or whitespace was seen between the
elements of an attribute list.  If the previous attribute
had a parenthesised parameter list, perhaps that list was terminated
too soon.  See attributes.
.ie n .IP "Invalid separator character %s in subroutine attribute list" 4
.el .IP "Invalid separator character \f(CW%s\fR in subroutine attribute list" 4
.IX Item "Invalid separator character %s in subroutine attribute list"
(F) Something other than a colon or whitespace was seen between the
elements of a subroutine attribute list.  If the previous attribute
had a parenthesised parameter list, perhaps that list was terminated
too soon.
.ie n .IP "leaving effective %s failed" 4
.el .IP "leaving effective \f(CW%s\fR failed" 4
.IX Item "leaving effective %s failed"
(F) While under the \f(CW\*(C`use filetest\*(C'\fR pragma, switching the real and
effective uids or gids failed.
.ie n .IP "Lvalue subs returning %s not implemented yet" 4
.el .IP "Lvalue subs returning \f(CW%s\fR not implemented yet" 4
.IX Item "Lvalue subs returning %s not implemented yet"
(F) Due to limitations in the current implementation, array and hash
values cannot be returned in subroutines used in lvalue context.
See \*(L"Lvalue subroutines\*(R" in perlsub.
.ie n .IP "Method %s not permitted" 4
.el .IP "Method \f(CW%s\fR not permitted" 4
.IX Item "Method %s not permitted"
See Server error.
.ie n .IP "Missing %sbrace%s on \eN{}" 4
.el .IP "Missing \f(CW%sbrace\fR%s on \eN{}" 4
.IX Item "Missing %sbrace%s on N{}"
(F) Wrong syntax of character name literal \f(CW\*(C`\eN{charname}\*(C'\fR within
double-quotish context.
.IP "Missing command in piped open" 4
.IX Item "Missing command in piped open"
(W pipe) You used the \f(CW\*(C`open(FH, "| command")\*(C'\fR or \f(CW\*(C`open(FH, "command |")\*(C'\fR
construction, but the command was missing or blank.
.ie n .IP "Missing name in ""my sub""" 4
.el .IP "Missing name in ``my sub''" 4
.IX Item "Missing name in my sub"
(F) The reserved syntax for lexically scoped subroutines requires that they
have a name with which they can be found.
.ie n .IP "No %s specified for \-%c" 4
.el .IP "No \f(CW%s\fR specified for \-%c" 4
.IX Item "No %s specified for -%c"
(F) The indicated command line switch needs a mandatory argument, but
you haven't specified one.
.ie n .IP "No package name allowed for variable %s in ""our""" 4
.el .IP "No package name allowed for variable \f(CW%s\fR in ``our''" 4
.IX Item "No package name allowed for variable %s in our"
(F) Fully qualified variable names are not allowed in \*(L"our\*(R" declarations,
because that doesn't make much sense under existing semantics.  Such
syntax is reserved for future extensions.
.IP "No space allowed after \-%c" 4
.IX Item "No space allowed after -%c"
(F) The argument to the indicated command line switch must follow immediately
after the switch, without intervening spaces.
.IP "no \s-1UTC\s0 offset information; assuming local time is \s-1UTC\s0" 4
.IX Item "no UTC offset information; assuming local time is UTC"
(S) A warning peculiar to \s-1VMS\s0.  Perl was unable to find the local
timezone offset, so it's assuming that local system time is equivalent
to \s-1UTC\s0.  If it's not, define the logical name \fI\s-1SYS$TIMEZONE_DIFFERENTIAL\s0\fR
to translate to the number of seconds which need to be added to \s-1UTC\s0 to
get local time.
.IP "Octal number > 037777777777 non-portable" 4
.IX Item "Octal number > 037777777777 non-portable"
(W portable) The octal number you specified is larger than 2**32\-1 (4294967295)
and therefore non-portable between systems.  See perlport for more
on portability concerns.
.Sp
See also perlport for writing portable code.
.IP "panic: del_backref" 4
.IX Item "panic: del_backref"
(P) Failed an internal consistency check while trying to reset a weak
reference.
.IP "panic: kid popen errno read" 4
.IX Item "panic: kid popen errno read"
(F) forked child returned an incomprehensible message about its errno.
.IP "panic: magic_killbackrefs" 4
.IX Item "panic: magic_killbackrefs"
(P) Failed an internal consistency check while trying to reset all weak
references to an object.
.ie n .IP "Parentheses missing around ""%s"" list" 4
.el .IP "Parentheses missing around ``%s'' list" 4
.IX Item "Parentheses missing around %s list"
(W parenthesis) You said something like
.Sp
.Vb 1
\&    my $foo, $bar = @_;
.Ve
.Sp
when you meant
.Sp
.Vb 1
\&    my ($foo, $bar) = @_;
.Ve
.Sp
Remember that \*(L"my\*(R", \*(L"our\*(R", and \*(L"local\*(R" bind tighter than comma.
.ie n .IP "Possible unintended interpolation of %s in string" 4
.el .IP "Possible unintended interpolation of \f(CW%s\fR in string" 4
.IX Item "Possible unintended interpolation of %s in string"
(W ambiguous) It used to be that Perl would try to guess whether you
wanted an array interpolated or a literal @.  It no longer does this;
arrays are now \fIalways\fR interpolated into strings.  This means that 
if you try something like:
.Sp
.Vb 1
\&        print "fred@example.com";
.Ve
.Sp
and the array \f(CW@example\fR doesn't exist, Perl is going to print
\&\f(CW\*(C`fred.com\*(C'\fR, which is probably not what you wanted.  To get a literal
\&\f(CW\*(C`@\*(C'\fR sign in a string, put a backslash before it, just as you would
to get a literal \f(CW\*(C`$\*(C'\fR sign.
.ie n .IP "Possible Y2K bug: %s" 4
.el .IP "Possible Y2K bug: \f(CW%s\fR" 4
.IX Item "Possible Y2K bug: %s"
(W y2k) You are concatenating the number 19 with another number, which
could be a potential Year 2000 problem.
.ie n .IP "pragma ""attrs"" is deprecated, use ""sub \s-1NAME\s0 : \s-1ATTRS\s0"" instead" 4
.el .IP "pragma ``attrs'' is deprecated, use ``sub \s-1NAME\s0 : \s-1ATTRS\s0'' instead" 4
.IX Item "pragma attrs is deprecated, use sub NAME : ATTRS instead"
(W deprecated) You have written something like this:
.Sp
.Vb 4
\&    sub doit
\&    {
\&        use attrs qw(locked);
\&    }
.Ve
.Sp
You should use the new declaration syntax instead.
.Sp
.Vb 3
\&    sub doit : locked
\&    {
\&        ...
.Ve
.Sp
The \f(CW\*(C`use attrs\*(C'\fR pragma is now obsolete, and is only provided for
backward-compatibility. See \*(L"Subroutine Attributes\*(R" in perlsub.
.IP "Premature end of script headers" 4
.IX Item "Premature end of script headers"
See Server error.
.IP "Repeat count in pack overflows" 4
.IX Item "Repeat count in pack overflows"
(F) You can't specify a repeat count so large that it overflows
your signed integers.  See \*(L"pack\*(R" in perlfunc.
.IP "Repeat count in unpack overflows" 4
.IX Item "Repeat count in unpack overflows"
(F) You can't specify a repeat count so large that it overflows
your signed integers.  See \*(L"unpack\*(R" in perlfunc.
.IP "\fIrealloc()\fR of freed memory ignored" 4
.IX Item "realloc() of freed memory ignored"
(S) An internal routine called \fIrealloc()\fR on something that had already
been freed.
.IP "Reference is already weak" 4
.IX Item "Reference is already weak"
(W misc) You have attempted to weaken a reference that is already weak.
Doing so has no effect.
.IP "setpgrp can't take arguments" 4
.IX Item "setpgrp can't take arguments"
(F) Your system has the \fIsetpgrp()\fR from \s-1BSD\s0 4.2, which takes no arguments,
unlike \s-1POSIX\s0 \fIsetpgid()\fR, which takes a process \s-1ID\s0 and process group \s-1ID\s0.
.IP "Strange *+?{} on zero-length expression" 4
.IX Item "Strange *+?{} on zero-length expression"
(W regexp) You applied a regular expression quantifier in a place where it
makes no sense, such as on a zero-width assertion.
Try putting the quantifier inside the assertion instead.  For example,
the way to match \*(L"abc\*(R" provided that it is followed by three
repetitions of \*(L"xyz\*(R" is \f(CW\*(C`/abc(?=(?:xyz){3})/\*(C'\fR, not \f(CW\*(C`/abc(?=xyz){3}/\*(C'\fR.
.ie n .IP "switching effective %s is not implemented" 4
.el .IP "switching effective \f(CW%s\fR is not implemented" 4
.IX Item "switching effective %s is not implemented"
(F) While under the \f(CW\*(C`use filetest\*(C'\fR pragma, we cannot switch the
real and effective uids or gids.
.IP "This Perl can't reset \s-1CRTL\s0 environ elements (%s)" 4
.IX Item "This Perl can't reset CRTL environ elements (%s)"
.PD 0
.IP "This Perl can't set \s-1CRTL\s0 environ elements (%s=%s)" 4
.IX Item "This Perl can't set CRTL environ elements (%s=%s)"
.PD
(W internal) Warnings peculiar to \s-1VMS\s0.  You tried to change or delete an element
of the \s-1CRTL\s0's internal environ array, but your copy of Perl wasn't
built with a \s-1CRTL\s0 that contained the \fIsetenv()\fR function.  You'll need to
rebuild Perl with a \s-1CRTL\s0 that does, or redefine \fI\s-1PERL_ENV_TABLES\s0\fR (see
perlvms) so that the environ array isn't the target of the change to
\&\f(CW%ENV\fR which produced the warning.
.ie n .IP "Too late to run %s block" 4
.el .IP "Too late to run \f(CW%s\fR block" 4
.IX Item "Too late to run %s block"
(W void) A \s-1CHECK\s0 or \s-1INIT\s0 block is being defined during run time proper,
when the opportunity to run them has already passed.  Perhaps you are
loading a file with \f(CW\*(C`require\*(C'\fR or \f(CW\*(C`do\*(C'\fR when you should be using
\&\f(CW\*(C`use\*(C'\fR instead.  Or perhaps you should put the \f(CW\*(C`require\*(C'\fR or \f(CW\*(C`do\*(C'\fR
inside a \s-1BEGIN\s0 block.
.IP "Unknown \fIopen()\fR mode '%s'" 4
.IX Item "Unknown open() mode '%s'"
(F) The second argument of 3\-argument \fIopen()\fR is not among the list
of valid modes: \f(CW\*(C`<\*(C'\fR, \f(CW\*(C`>\*(C'\fR, \f(CW\*(C`>>\*(C'\fR, \f(CW\*(C`+<\*(C'\fR,
\&\f(CW\*(C`+>\*(C'\fR, \f(CW\*(C`+>>\*(C'\fR, \f(CW\*(C`\-|\*(C'\fR, \f(CW\*(C`|\-\*(C'\fR.
.ie n .IP "Unknown process %x sent message to prime_env_iter: %s" 4
.el .IP "Unknown process \f(CW%x\fR sent message to prime_env_iter: \f(CW%s\fR" 4
.IX Item "Unknown process %x sent message to prime_env_iter: %s"
(P) An error peculiar to \s-1VMS\s0.  Perl was reading values for \f(CW%ENV\fR before
iterating over it, and someone else stuck a message in the stream of
data Perl expected.  Someone's very confused, or perhaps trying to
subvert Perl's population of \f(CW%ENV\fR for nefarious purposes.
.IP "Unrecognized escape \e\e%c passed through" 4
.IX Item "Unrecognized escape %c passed through"
(W misc) You used a backslash-character combination which is not recognized
by Perl.  The character was understood literally.
.IP "Unterminated attribute parameter in attribute list" 4
.IX Item "Unterminated attribute parameter in attribute list"
(F) The lexer saw an opening (left) parenthesis character while parsing an
attribute list, but the matching closing (right) parenthesis
character was not found.  You may need to add (or remove) a backslash
character to get your parentheses to balance.  See attributes.
.IP "Unterminated attribute list" 4
.IX Item "Unterminated attribute list"
(F) The lexer found something other than a simple identifier at the start
of an attribute, and it wasn't a semicolon or the start of a
block.  Perhaps you terminated the parameter list of the previous attribute
too soon.  See attributes.
.IP "Unterminated attribute parameter in subroutine attribute list" 4
.IX Item "Unterminated attribute parameter in subroutine attribute list"
(F) The lexer saw an opening (left) parenthesis character while parsing a
subroutine attribute list, but the matching closing (right) parenthesis
character was not found.  You may need to add (or remove) a backslash
character to get your parentheses to balance.
.IP "Unterminated subroutine attribute list" 4
.IX Item "Unterminated subroutine attribute list"
(F) The lexer found something other than a simple identifier at the start
of a subroutine attribute, and it wasn't a semicolon or the start of a
block.  Perhaps you terminated the parameter list of the previous attribute
too soon.
.ie n .IP "Value of \s-1CLI\s0 symbol ""%s"" too long" 4
.el .IP "Value of \s-1CLI\s0 symbol ``%s'' too long" 4
.IX Item "Value of CLI symbol %s too long"
(W misc) A warning peculiar to \s-1VMS\s0.  Perl tried to read the value of an \f(CW%ENV\fR
element from a \s-1CLI\s0 symbol table, and found a resultant string longer
than 1024 characters.  The return value has been truncated to 1024
characters.
.IP "Version number must be a constant number" 4
.IX Item "Version number must be a constant number"
(P) The attempt to translate a \f(CW\*(C`use Module n.n LIST\*(C'\fR statement into
its equivalent \f(CW\*(C`BEGIN\*(C'\fR block found an internal inconsistency with
the version number.
.SH "New tests"
.IX Header "New tests"
.IP "lib/attrs" 4
.IX Item "lib/attrs"
Compatibility tests for \f(CW\*(C`sub : attrs\*(C'\fR vs the older \f(CW\*(C`use attrs\*(C'\fR.
.IP "lib/env" 4
.IX Item "lib/env"
Tests for new environment scalar capability (e.g., \f(CW\*(C`use Env qw($BAR);\*(C'\fR).
.IP "lib/env\-array" 4
.IX Item "lib/env-array"
Tests for new environment array capability (e.g., \f(CW\*(C`use Env qw(@PATH);\*(C'\fR).
.IP "lib/io_const" 4
.IX Item "lib/io_const"
\&\s-1IO\s0 constants (SEEK_*, _IO*).
.IP "lib/io_dir" 4
.IX Item "lib/io_dir"
Directory-related \s-1IO\s0 methods (new, read, close, rewind, tied delete).
.IP "lib/io_multihomed" 4
.IX Item "lib/io_multihomed"
\&\s-1INET\s0 sockets with multi-homed hosts.
.IP "lib/io_poll" 4
.IX Item "lib/io_poll"
\&\s-1IO\s0 \fIpoll()\fR.
.IP "lib/io_unix" 4
.IX Item "lib/io_unix"
\&\s-1UNIX\s0 sockets.
.IP "op/attrs" 4
.IX Item "op/attrs"
Regression tests for \f(CW\*(C`my ($x,@y,%z) : attrs\*(C'\fR and <sub : attrs>.
.IP "op/filetest" 4
.IX Item "op/filetest"
File test operators.
.IP "op/lex_assign" 4
.IX Item "op/lex_assign"
Verify operations that access pad objects (lexicals and temporaries).
.IP "op/exists_sub" 4
.IX Item "op/exists_sub"
Verify \f(CW\*(C`exists &sub\*(C'\fR operations.
.SH "Incompatible Changes"
.IX Header "Incompatible Changes"
.SS "Perl Source Incompatibilities"
.IX Subsection "Perl Source Incompatibilities"
Beware that any new warnings that have been added or old ones
that have been enhanced are \fBnot\fR considered incompatible changes.
.PP
Since all new warnings must be explicitly requested via the \f(CW\*(C`\-w\*(C'\fR
switch or the \f(CW\*(C`warnings\*(C'\fR pragma, it is ultimately the programmer's
responsibility to ensure that warnings are enabled judiciously.
.IP "\s-1CHECK\s0 is a new keyword" 4
.IX Item "CHECK is a new keyword"
All subroutine definitions named \s-1CHECK\s0 are now special.  See
\&\f(CW\*(C`/"Support for CHECK blocks"\*(C'\fR for more information.
.IP "Treatment of list slices of undef has changed" 4
.IX Item "Treatment of list slices of undef has changed"
There is a potential incompatibility in the behavior of list slices
that are comprised entirely of undefined values.
See \*(L"Behavior of list slices is more consistent\*(R".
.ie n .IP "Format of $English::PERL_VERSION is different" 4
.el .IP "Format of \f(CW$English::PERL_VERSION\fR is different" 4
.IX Item "Format of $English::PERL_VERSION is different"
The English module now sets \f(CW$PERL_VERSION\fR to $^V (a string value) rather
than \f(CW$]\fR (a numeric value).  This is a potential incompatibility.
Send us a report via perlbug if you are affected by this.
.Sp
See \*(L"Improved Perl version numbering system\*(R" for the reasons for
this change.
.ie n .IP "Literals of the form 1.2.3 parse differently" 4
.el .IP "Literals of the form \f(CW1.2.3\fR parse differently" 4
.IX Item "Literals of the form 1.2.3 parse differently"
Previously, numeric literals with more than one dot in them were
interpreted as a floating point number concatenated with one or more
numbers.  Such \*(L"numbers\*(R" are now parsed as strings composed of the
specified ordinals.
.Sp
For example, \f(CW\*(C`print 97.98.99\*(C'\fR used to output \f(CW97.9899\fR in earlier
versions, but now prints \f(CW\*(C`abc\*(C'\fR.
.Sp
See \*(L"Support for strings represented as a vector of ordinals\*(R".
.IP "Possibly changed pseudo-random number generator" 4
.IX Item "Possibly changed pseudo-random number generator"
Perl programs that depend on reproducing a specific set of pseudo-random
numbers may now produce different output due to improvements made to the
\&\fIrand()\fR builtin.  You can use \f(CW\*(C`sh Configure \-Drandfunc=rand\*(C'\fR to obtain
the old behavior.
.Sp
See \*(L"Better pseudo-random number generator\*(R".
.IP "Hashing function for hash keys has changed" 4
.IX Item "Hashing function for hash keys has changed"
Even though Perl hashes are not order preserving, the apparently
random order encountered when iterating on the contents of a hash
is actually determined by the hashing algorithm used.  Improvements
in the algorithm may yield a random order that is \fBdifferent\fR from
that of previous versions, especially when iterating on hashes.
.Sp
See \*(L"Better worst-case behavior of hashes\*(R" for additional
information.
.ie n .IP """undef"" fails on read only values" 4
.el .IP "\f(CWundef\fR fails on read only values" 4
.IX Item "undef fails on read only values"
Using the \f(CW\*(C`undef\*(C'\fR operator on a readonly value (such as \f(CW$1\fR) has
the same effect as assigning \f(CW\*(C`undef\*(C'\fR to the readonly value\*(--it
throws an exception.
.IP "Close-on-exec bit may be set on pipe and socket handles" 4
.IX Item "Close-on-exec bit may be set on pipe and socket handles"
Pipe and socket handles are also now subject to the close-on-exec
behavior determined by the special variable $^F.
.Sp
See \*(L"More consistent close-on-exec behavior\*(R".
.ie n .IP "Writing ""$$1"" to mean ""${$}1"" is unsupported" 4
.el .IP "Writing \f(CW``$$1''\fR to mean \f(CW``${$}1''\fR is unsupported" 4
.IX Item "Writing ""$$1"" to mean ""${$}1"" is unsupported"
Perl 5.004 deprecated the interpretation of \f(CW$$1\fR and
similar within interpolated strings to mean \f(CW\*(C`$$ . "1"\*(C'\fR,
but still allowed it.
.Sp
In Perl 5.6.0 and later, \f(CW"$$1"\fR always means \f(CW"${$1}"\fR.
.ie n .IP "\fIdelete()\fR, \fIeach()\fR, \fIvalues()\fR and ""\e(%h)""" 4
.el .IP "\fIdelete()\fR, \fIeach()\fR, \fIvalues()\fR and \f(CW\e(%h)\fR" 4
.IX Item "delete(), each(), values() and )"
operate on aliases to values, not copies
.Sp
\&\fIdelete()\fR, \fIeach()\fR, \fIvalues()\fR and hashes (e.g. \f(CW\*(C`\e(%h)\*(C'\fR)
in a list context return the actual
values in the hash, instead of copies (as they used to in earlier
versions).  Typical idioms for using these constructs copy the
returned values, but this can make a significant difference when
creating references to the returned values.  Keys in the hash are still
returned as copies when iterating on a hash.
.Sp
See also \*(L"\fIdelete()\fR, \fIeach()\fR, \fIvalues()\fR and hash iteration are faster\*(R".
.IP "vec(\s-1EXPR\s0,OFFSET,BITS) enforces powers-of-two \s-1BITS\s0" 4
.IX Item "vec(EXPR,OFFSET,BITS) enforces powers-of-two BITS"
\&\fIvec()\fR generates a run-time error if the \s-1BITS\s0 argument is not
a valid power-of-two integer.
.IP "Text of some diagnostic output has changed" 4
.IX Item "Text of some diagnostic output has changed"
Most references to internal Perl operations in diagnostics
have been changed to be more descriptive.  This may be an
issue for programs that may incorrectly rely on the exact
text of diagnostics for proper functioning.
.ie n .IP """%@"" has been removed" 4
.el .IP "\f(CW%@\fR has been removed" 4
.IX Item "%@ has been removed"
The undocumented special variable \f(CW\*(C`%@\*(C'\fR that used to accumulate
\&\*(L"background\*(R" errors (such as those that happen in \s-1\fIDESTROY\s0()\fR)
has been removed, because it could potentially result in memory
leaks.
.IP "Parenthesized \fInot()\fR behaves like a list operator" 4
.IX Item "Parenthesized not() behaves like a list operator"
The \f(CW\*(C`not\*(C'\fR operator now falls under the \*(L"if it looks like a function,
it behaves like a function\*(R" rule.
.Sp
As a result, the parenthesized form can be used with \f(CW\*(C`grep\*(C'\fR and \f(CW\*(C`map\*(C'\fR.
The following construct used to be a syntax error before, but it works
as expected now:
.Sp
.Vb 1
\&    grep not($_), @things;
.Ve
.Sp
On the other hand, using \f(CW\*(C`not\*(C'\fR with a literal list slice may not
work.  The following previously allowed construct:
.Sp
.Vb 1
\&    print not (1,2,3)[0];
.Ve
.Sp
needs to be written with additional parentheses now:
.Sp
.Vb 1
\&    print not((1,2,3)[0]);
.Ve
.Sp
The behavior remains unaffected when \f(CW\*(C`not\*(C'\fR is not followed by parentheses.
.ie n .IP "Semantics of bareword prototype ""(*)"" have changed" 4
.el .IP "Semantics of bareword prototype \f(CW(*)\fR have changed" 4
.IX Item "Semantics of bareword prototype (*) have changed"
The semantics of the bareword prototype \f(CW\*(C`*\*(C'\fR have changed.  Perl 5.005
always coerced simple scalar arguments to a typeglob, which wasn't useful
in situations where the subroutine must distinguish between a simple
scalar and a typeglob.  The new behavior is to not coerce bareword
arguments to a typeglob.  The value will always be visible as either
a simple scalar or as a reference to a typeglob.
.Sp
See \*(L"More functional bareword prototype (*)\*(R".
.IP "Semantics of bit operators may have changed on 64\-bit platforms" 4
.IX Item "Semantics of bit operators may have changed on 64-bit platforms"
If your platform is either natively 64\-bit or if Perl has been
configured to used 64\-bit integers, i.e., \f(CW$Config\fR{ivsize} is 8, 
there may be a potential incompatibility in the behavior of bitwise
numeric operators (& | ^ ~ << >>).  These operators used to strictly
operate on the lower 32 bits of integers in previous versions, but now
operate over the entire native integral width.  In particular, note
that unary \f(CW\*(C`~\*(C'\fR will produce different results on platforms that have
different \f(CW$Config\fR{ivsize}.  For portability, be sure to mask off
the excess bits in the result of unary \f(CW\*(C`~\*(C'\fR, e.g., \f(CW\*(C`~$x & 0xffffffff\*(C'\fR.
.Sp
See \*(L"Bit operators support full native integer width\*(R".
.IP "More builtins taint their results" 4
.IX Item "More builtins taint their results"
As described in \*(L"Improved security features\*(R", there may be more
sources of taint in a Perl program.
.Sp
To avoid these new tainting behaviors, you can build Perl with the
Configure option \f(CW\*(C`\-Accflags=\-DINCOMPLETE_TAINTS\*(C'\fR.  Beware that the
ensuing perl binary may be insecure.
.SS "C Source Incompatibilities"
.IX Subsection "C Source Incompatibilities"
.ie n .IP """PERL_POLLUTE""" 4
.el .IP "\f(CWPERL_POLLUTE\fR" 4
.IX Item "PERL_POLLUTE"
Release 5.005 grandfathered old global symbol names by providing preprocessor
macros for extension source compatibility.  As of release 5.6.0, these
preprocessor definitions are not available by default.  You need to explicitly
compile perl with \f(CW\*(C`\-DPERL_POLLUTE\*(C'\fR to get these definitions.  For
extensions still using the old symbols, this option can be
specified via MakeMaker:
.Sp
.Vb 1
\&    perl Makefile.PL POLLUTE=1
.Ve
.ie n .IP """PERL_IMPLICIT_CONTEXT""" 4
.el .IP "\f(CWPERL_IMPLICIT_CONTEXT\fR" 4
.IX Item "PERL_IMPLICIT_CONTEXT"
This new build option provides a set of macros for all \s-1API\s0 functions
such that an implicit interpreter/thread context argument is passed to
every \s-1API\s0 function.  As a result of this, something like \f(CW\*(C`sv_setsv(foo,bar)\*(C'\fR
amounts to a macro invocation that actually translates to something like
\&\f(CW\*(C`Perl_sv_setsv(my_perl,foo,bar)\*(C'\fR.  While this is generally expected
to not have any significant source compatibility issues, the difference
between a macro and a real function call will need to be considered.
.Sp
This means that there \fBis\fR a source compatibility issue as a result of
this if your extensions attempt to use pointers to any of the Perl \s-1API\s0
functions.
.Sp
Note that the above issue is not relevant to the default build of
Perl, whose interfaces continue to match those of prior versions
(but subject to the other options described here).
.Sp
See \*(L"Background and \s-1PERL_IMPLICIT_CONTEXT\s0\*(R" in perlguts for detailed information on the
ramifications of building Perl with this option.
.Sp
.Vb 3
\&    NOTE: PERL_IMPLICIT_CONTEXT is automatically enabled whenever Perl is built
\&    with one of \-Dusethreads, \-Dusemultiplicity, or both.  It is not
\&    intended to be enabled by users at this time.
.Ve
.ie n .IP """PERL_POLLUTE_MALLOC""" 4
.el .IP "\f(CWPERL_POLLUTE_MALLOC\fR" 4
.IX Item "PERL_POLLUTE_MALLOC"
Enabling Perl's malloc in release 5.005 and earlier caused the namespace of
the system's malloc family of functions to be usurped by the Perl versions,
since by default they used the same names.  Besides causing problems on
platforms that do not allow these functions to be cleanly replaced, this
also meant that the system versions could not be called in programs that
used Perl's malloc.  Previous versions of Perl have allowed this behaviour
to be suppressed with the \s-1HIDEMYMALLOC\s0 and \s-1EMBEDMYMALLOC\s0 preprocessor
definitions.
.Sp
As of release 5.6.0, Perl's malloc family of functions have default names
distinct from the system versions.  You need to explicitly compile perl with
\&\f(CW\*(C`\-DPERL_POLLUTE_MALLOC\*(C'\fR to get the older behaviour.  \s-1HIDEMYMALLOC\s0
and \s-1EMBEDMYMALLOC\s0 have no effect, since the behaviour they enabled is now
the default.
.Sp
Note that these functions do \fBnot\fR constitute Perl's memory allocation \s-1API\s0.
See \*(L"Memory Allocation\*(R" in perlguts for further information about that.
.SS "Compatible C Source \s-1API\s0 Changes"
.IX Subsection "Compatible C Source API Changes"
.ie n .IP """PATCHLEVEL"" is now ""PERL_VERSION""" 4
.el .IP "\f(CWPATCHLEVEL\fR is now \f(CWPERL_VERSION\fR" 4
.IX Item "PATCHLEVEL is now PERL_VERSION"
The cpp macros \f(CW\*(C`PERL_REVISION\*(C'\fR, \f(CW\*(C`PERL_VERSION\*(C'\fR, and \f(CW\*(C`PERL_SUBVERSION\*(C'\fR
are now available by default from perl.h, and reflect the base revision,
patchlevel, and subversion respectively.  \f(CW\*(C`PERL_REVISION\*(C'\fR had no
prior equivalent, while \f(CW\*(C`PERL_VERSION\*(C'\fR and \f(CW\*(C`PERL_SUBVERSION\*(C'\fR were
previously available as \f(CW\*(C`PATCHLEVEL\*(C'\fR and \f(CW\*(C`SUBVERSION\*(C'\fR.
.Sp
The new names cause less pollution of the \fBcpp\fR namespace and reflect what
the numbers have come to stand for in common practice.  For compatibility,
the old names are still supported when \fIpatchlevel.h\fR is explicitly
included (as required before), so there is no source incompatibility
from the change.
.SS "Binary Incompatibilities"
.IX Subsection "Binary Incompatibilities"
In general, the default build of this release is expected to be binary
compatible for extensions built with the 5.005 release or its maintenance
versions.  However, specific platforms may have broken binary compatibility
due to changes in the defaults used in hints files.  Therefore, please be
sure to always check the platform-specific \s-1README\s0 files for any notes to
the contrary.
.PP
The usethreads or usemultiplicity builds are \fBnot\fR binary compatible
with the corresponding builds in 5.005.
.PP
On platforms that require an explicit list of exports (\s-1AIX\s0, \s-1OS/2\s0 and Windows,
among others), purely internal symbols such as parser functions and the
run time opcodes are not exported by default.  Perl 5.005 used to export
all functions irrespective of whether they were considered part of the
public \s-1API\s0 or not.
.PP
For the full list of public \s-1API\s0 functions, see perlapi.
.SH "Known Problems"
.IX Header "Known Problems"
.SS "Thread test failures"
.IX Subsection "Thread test failures"
The subtests 19 and 20 of lib/thr5005.t test are known to fail due to
fundamental problems in the 5.005 threading implementation.  These are
not new failures\*(--Perl 5.005_0x has the same bugs, but didn't have these
tests.
.SS "\s-1EBCDIC\s0 platforms not supported"
.IX Subsection "EBCDIC platforms not supported"
In earlier releases of Perl, \s-1EBCDIC\s0 environments like \s-1OS390\s0 (also
known as Open Edition \s-1MVS\s0) and VM-ESA were supported.  Due to changes
required by the \s-1UTF\-8\s0 (Unicode) support, the \s-1EBCDIC\s0 platforms are not
supported in Perl 5.6.0.
.SS "In 64\-bit HP-UX the lib/io_multihomed test may hang"
.IX Subsection "In 64-bit HP-UX the lib/io_multihomed test may hang"
The lib/io_multihomed test may hang in HP-UX if Perl has been
configured to be 64\-bit.  Because other 64\-bit platforms do not
hang in this test, HP-UX is suspect.  All other tests pass
in 64\-bit HP-UX.  The test attempts to create and connect to
\&\*(L"multihomed\*(R" sockets (sockets which have multiple \s-1IP\s0 addresses).
.SS "\s-1NEXTSTEP\s0 3.3 \s-1POSIX\s0 test failure"
.IX Subsection "NEXTSTEP 3.3 POSIX test failure"
In \s-1NEXTSTEP\s0 3.3p2 the implementation of the \fIstrftime\fR\|(3) in the
operating system libraries is buggy: the \f(CW%j\fR format numbers the days of
a month starting from zero, which, while being logical to programmers,
will cause the subtests 19 to 27 of the lib/posix test may fail.
.SS "Tru64 (aka Digital \s-1UNIX\s0, aka \s-1DEC\s0 \s-1OSF/1\s0) lib/sdbm test failure with gcc"
.IX Subsection "Tru64 (aka Digital UNIX, aka DEC OSF/1) lib/sdbm test failure with gcc"
If compiled with gcc 2.95 the lib/sdbm test will fail (dump core).
The cure is to use the vendor cc, it comes with the operating system
and produces good code.
.SS "UNICOS/mk \s-1CC\s0 failures during Configure run"
.IX Subsection "UNICOS/mk CC failures during Configure run"
In UNICOS/mk the following errors may appear during the Configure run:
.PP
.Vb 6
\&        Guessing which symbols your C compiler and preprocessor define...
\&        CC\-20 cc: ERROR File = try.c, Line = 3
\&        ...
\&          bad switch yylook 79bad switch yylook 79bad switch yylook 79bad switch yylook 79#ifdef A29K
\&        ...
\&        4 errors detected in the compilation of "try.c".
.Ve
.PP
The culprit is the broken awk of UNICOS/mk.  The effect is fortunately
rather mild: Perl itself is not adversely affected by the error, only
the h2ph utility coming with Perl, and that is rather rarely needed
these days.
.SS "Arrow operator and arrays"
.IX Subsection "Arrow operator and arrays"
When the left argument to the arrow operator \f(CW\*(C`\->\*(C'\fR is an array, or
the \f(CW\*(C`scalar\*(C'\fR operator operating on an array, the result of the
operation must be considered erroneous. For example:
.PP
.Vb 2
\&    @x\->[2]
\&    scalar(@x)\->[2]
.Ve
.PP
These expressions will get run-time errors in some future release of
Perl.
.SS "Experimental features"
.IX Subsection "Experimental features"
As discussed above, many features are still experimental.  Interfaces and
implementation of these features are subject to change, and in extreme cases,
even subject to removal in some future release of Perl.  These features
include the following:
.IP "Threads" 4
.IX Item "Threads"
.PD 0
.IP "Unicode" 4
.IX Item "Unicode"
.IP "64\-bit support" 4
.IX Item "64-bit support"
.IP "Lvalue subroutines" 4
.IX Item "Lvalue subroutines"
.IP "Weak references" 4
.IX Item "Weak references"
.IP "The pseudo-hash data type" 4
.IX Item "The pseudo-hash data type"
.IP "The Compiler suite" 4
.IX Item "The Compiler suite"
.IP "Internal implementation of file globbing" 4
.IX Item "Internal implementation of file globbing"
.IP "The \s-1DB\s0 module" 4
.IX Item "The DB module"
.IP "The regular expression code constructs:" 4
.IX Item "The regular expression code constructs:"
.PD
\&\f(CW\*(C`(?{ code })\*(C'\fR and \f(CW\*(C`(??{ code })\*(C'\fR
.SH "Obsolete Diagnostics"
.IX Header "Obsolete Diagnostics"
.IP "Character class syntax [: :] is reserved for future extensions" 4
.IX Item "Character class syntax [: :] is reserved for future extensions"
(W) Within regular expression character classes ([]) the syntax beginning
with \*(L"[:\*(R" and ending with \*(L":]\*(R" is reserved for future extensions.
If you need to represent those character sequences inside a regular
expression character class, just quote the square brackets with the
backslash: \*(L"\e[:\*(R" and \*(L":\e]\*(R".
.IP "Ill-formed logical name |%s| in prime_env_iter" 4
.IX Item "Ill-formed logical name |%s| in prime_env_iter"
(W) A warning peculiar to \s-1VMS\s0.  A logical name was encountered when preparing
to iterate over \f(CW%ENV\fR which violates the syntactic rules governing logical
names.  Because it cannot be translated normally, it is skipped, and will not
appear in \f(CW%ENV\fR.  This may be a benign occurrence, as some software packages
might directly modify logical name tables and introduce nonstandard names,
or it may indicate that a logical name table has been corrupted.
.IP "In string, @%s now must be written as \e@%s" 4
.IX Item "In string, @%s now must be written as @%s"
The description of this error used to say:
.Sp
.Vb 2
\&        (Someday it will simply assume that an unbackslashed @
\&         interpolates an array.)
.Ve
.Sp
That day has come, and this fatal error has been removed.  It has been
replaced by a non-fatal warning instead.
See \*(L"Arrays now always interpolate into double-quoted strings\*(R" for
details.
.ie n .IP "Probable precedence problem on %s" 4
.el .IP "Probable precedence problem on \f(CW%s\fR" 4
.IX Item "Probable precedence problem on %s"
(W) The compiler found a bareword where it expected a conditional,
which often indicates that an || or && was parsed as part of the
last argument of the previous construct, for example:
.Sp
.Vb 1
\&    open FOO || die;
.Ve
.IP "regexp too big" 4
.IX Item "regexp too big"
(F) The current implementation of regular expressions uses shorts as
address offsets within a string.  Unfortunately this means that if
the regular expression compiles to longer than 32767, it'll blow up.
Usually when you want a regular expression this big, there is a better
way to do it with multiple statements.  See perlre.
.ie n .IP "Use of ""$$<digit>"" to mean ""${$}<digit>"" is deprecated" 4
.el .IP "Use of ``$$<digit>'' to mean ``${$}<digit>'' is deprecated" 4
.IX Item "Use of $$<digit> to mean ${$}<digit> is deprecated"
(D) Perl versions before 5.004 misinterpreted any type marker followed
by \*(L"$\*(R" and a digit.  For example, \*(L"$$0\*(R" was incorrectly taken to mean
\&\*(L"${$}0\*(R" instead of \*(L"${$0}\*(R".  This bug is (mostly) fixed in Perl 5.004.
.Sp
However, the developers of Perl 5.004 could not fix this bug completely,
because at least two widely-used modules depend on the old meaning of
\&\*(L"$$0\*(R" in a string.  So Perl 5.004 still interprets \*(L"$$<digit>\*(R" in the
old (broken) way inside strings; but it generates this message as a
warning.  And in Perl 5.005, this special treatment will cease.
.SH "Reporting Bugs"
.IX Header "Reporting Bugs"
If you find what you think is a bug, you might check the
articles recently posted to the comp.lang.perl.misc newsgroup.
There may also be information at http://www.perl.com/perl/ , the Perl
Home Page.
.PP
If you believe you have an unreported bug, please run the \fBperlbug\fR
program included with your release.  Be sure to trim your bug down
to a tiny but sufficient test case.  Your bug report, along with the
output of \f(CW\*(C`perl \-V\*(C'\fR, will be sent off to perlbug@perl.org to be
analysed by the Perl porting team.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
The \fIChanges\fR file for exhaustive details on what changed.
.PP
The \fI\s-1INSTALL\s0\fR file for how to build Perl.
.PP
The \fI\s-1README\s0\fR file for general stuff.
.PP
The \fIArtistic\fR and \fICopying\fR files for copyright information.
.SH "HISTORY"
.IX Header "HISTORY"
Written by Gurusamy Sarathy <\fIgsar@activestate.com\fR>, with many
contributions from The Perl Porters.
.PP
Send omissions or corrections to <\fIperlbug@perl.org\fR>.
                                                                                                                                                                                                                                                                                                                                                                                                                                                               osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perl56delta5.18.1                            0100644 0001750 0001750 00000420332 12566207433 023407  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERL56DELTA 1"
.TH PERL56DELTA 1 "2013-11-04" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perl56delta \- what's new for perl v5.6.0
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document describes differences between the 5.005 release and the 5.6.0
release.
.SH "Core Enhancements"
.IX Header "Core Enhancements"
.SS "Interpreter cloning, threads, and concurrency"
.IX Subsection "Interpreter cloning, threads, and concurrency"
Perl 5.6.0 introduces the beginnings of support for running multiple
interpreters concurrently in different threads.  In conjunction with
the \fIperl_clone()\fR \s-1API\s0 call, which can be used to selectively duplicate
the state of any given interpreter, it is possible to compile a
piece of code once in an interpreter, clone that interpreter
one or more times, and run all the resulting interpreters in distinct
threads.
.PP
On the Windows platform, this feature is used to emulate \fIfork()\fR at the
interpreter level.  See perlfork for details about that.
.PP
This feature is still in evolution.  It is eventually meant to be used
to selectively clone a subroutine and data reachable from that
subroutine in a separate interpreter and run the cloned subroutine
in a separate thread.  Since there is no shared data between the
interpreters, little or no locking will be needed (unless parts of
the symbol table are explicitly shared).  This is obviously intended
to be an easy-to-use replacement for the existing threads support.
.PP
Support for cloning interpreters and interpreter concurrency can be
enabled using the \-Dusethreads Configure option (see win32/Makefile for
how to enable it on Windows.)  The resulting perl executable will be
functionally identical to one that was built with \-Dmultiplicity, but
the \fIperl_clone()\fR \s-1API\s0 call will only be available in the former.
.PP
\&\-Dusethreads enables the cpp macro \s-1USE_ITHREADS\s0 by default, which in turn
enables Perl source code changes that provide a clear separation between
the op tree and the data it operates with.  The former is immutable, and
can therefore be shared between an interpreter and all of its clones,
while the latter is considered local to each interpreter, and is therefore
copied for each clone.
.PP
Note that building Perl with the \-Dusemultiplicity Configure option
is adequate if you wish to run multiple \fBindependent\fR interpreters
concurrently in different threads.  \-Dusethreads only provides the
additional functionality of the \fIperl_clone()\fR \s-1API\s0 call and other
support for running \fBcloned\fR interpreters concurrently.
.PP
.Vb 2
\&    NOTE: This is an experimental feature.  Implementation details are
\&    subject to change.
.Ve
.SS "Lexically scoped warning categories"
.IX Subsection "Lexically scoped warning categories"
You can now control the granularity of warnings emitted by perl at a finer
level using the \f(CW\*(C`use warnings\*(C'\fR pragma.  warnings and perllexwarn
have copious documentation on this feature.
.SS "Unicode and \s-1UTF\-8\s0 support"
.IX Subsection "Unicode and UTF-8 support"
Perl now uses \s-1UTF\-8\s0 as its internal representation for character
strings.  The \f(CW\*(C`utf8\*(C'\fR and \f(CW\*(C`bytes\*(C'\fR pragmas are used to control this support
in the current lexical scope.  See perlunicode, utf8 and bytes for
more information.
.PP
This feature is expected to evolve quickly to support some form of I/O
disciplines that can be used to specify the kind of input and output data
(bytes or characters).  Until that happens, additional modules from \s-1CPAN\s0
will be needed to complete the toolkit for dealing with Unicode.
.PP
.Vb 2
\&    NOTE: This should be considered an experimental feature.  Implementation
\&    details are subject to change.
.Ve
.SS "Support for interpolating named characters"
.IX Subsection "Support for interpolating named characters"
The new \f(CW\*(C`\eN\*(C'\fR escape interpolates named characters within strings.
For example, \f(CW"Hi! \eN{WHITE SMILING FACE}"\fR evaluates to a string
with a unicode smiley face at the end.
.ie n .SS """our"" declarations"
.el .SS "``our'' declarations"
.IX Subsection "our declarations"
An \*(L"our\*(R" declaration introduces a value that can be best understood
as a lexically scoped symbolic alias to a global variable in the
package that was current where the variable was declared.  This is
mostly useful as an alternative to the \f(CW\*(C`vars\*(C'\fR pragma, but also provides
the opportunity to introduce typing and other attributes for such
variables.  See \*(L"our\*(R" in perlfunc.
.SS "Support for strings represented as a vector of ordinals"
.IX Subsection "Support for strings represented as a vector of ordinals"
Literals of the form \f(CW\*(C`v1.2.3.4\*(C'\fR are now parsed as a string composed
of characters with the specified ordinals.  This is an alternative, more
readable way to construct (possibly unicode) strings instead of
interpolating characters, as in \f(CW"\ex{1}\ex{2}\ex{3}\ex{4}"\fR.  The leading
\&\f(CW\*(C`v\*(C'\fR may be omitted if there are more than two ordinals, so \f(CW1.2.3\fR is
parsed the same as \f(CW\*(C`v1.2.3\*(C'\fR.
.PP
Strings written in this form are also useful to represent version \*(L"numbers\*(R".
It is easy to compare such version \*(L"numbers\*(R" (which are really just plain
strings) using any of the usual string comparison operators \f(CW\*(C`eq\*(C'\fR, \f(CW\*(C`ne\*(C'\fR,
\&\f(CW\*(C`lt\*(C'\fR, \f(CW\*(C`gt\*(C'\fR, etc., or perform bitwise string operations on them using \f(CW\*(C`|\*(C'\fR,
\&\f(CW\*(C`&\*(C'\fR, etc.
.PP
In conjunction with the new \f(CW$^V\fR magic variable (which contains
the perl version as a string), such literals can be used as a readable way
to check if you're running a particular version of Perl:
.PP
.Vb 4
\&    # this will parse in older versions of Perl also
\&    if ($^V and $^V gt v5.6.0) {
\&        # new features supported
\&    }
.Ve
.PP
\&\f(CW\*(C`require\*(C'\fR and \f(CW\*(C`use\*(C'\fR also have some special magic to support such
literals, but this particular usage should be avoided because it leads to
misleading error messages under versions of Perl which don't support vector
strings.  Using a true version number will ensure correct behavior in all
versions of Perl:
.PP
.Vb 2
\&    require 5.006;    # run time check for v5.6
\&    use 5.006_001;    # compile time check for v5.6.1
.Ve
.PP
Also, \f(CW\*(C`sprintf\*(C'\fR and \f(CW\*(C`printf\*(C'\fR support the Perl-specific format flag \f(CW%v\fR
to print ordinals of characters in arbitrary strings:
.PP
.Vb 3
\&    printf "v%vd", $^V;         # prints current version, such as "v5.5.650"
\&    printf "%*vX", ":", $addr;  # formats IPv6 address
\&    printf "%*vb", " ", $bits;  # displays bitstring
.Ve
.PP
See \*(L"Scalar value constructors\*(R" in perldata for additional information.
.SS "Improved Perl version numbering system"
.IX Subsection "Improved Perl version numbering system"
Beginning with Perl version 5.6.0, the version number convention has been
changed to a \*(L"dotted integer\*(R" scheme that is more commonly found in open
source projects.
.PP
Maintenance versions of v5.6.0 will be released as v5.6.1, v5.6.2 etc.
The next development series following v5.6.0 will be numbered v5.7.x,
beginning with v5.7.0, and the next major production release following
v5.6.0 will be v5.8.0.
.PP
The English module now sets \f(CW$PERL_VERSION\fR to $^V (a string value) rather
than \f(CW$]\fR (a numeric value).  (This is a potential incompatibility.
Send us a report via perlbug if you are affected by this.)
.PP
The v1.2.3 syntax is also now legal in Perl.
See \*(L"Support for strings represented as a vector of ordinals\*(R" for more on that.
.PP
To cope with the new versioning system's use of at least three significant
digits for each version component, the method used for incrementing the
subversion number has also changed slightly.  We assume that versions older
than v5.6.0 have been incrementing the subversion component in multiples of
10.  Versions after v5.6.0 will increment them by 1.  Thus, using the new
notation, 5.005_03 is the \*(L"same\*(R" as v5.5.30, and the first maintenance
version following v5.6.0 will be v5.6.1 (which should be read as being
equivalent to a floating point value of 5.006_001 in the older format,
stored in \f(CW$]\fR).
.SS "New syntax for declaring subroutine attributes"
.IX Subsection "New syntax for declaring subroutine attributes"
Formerly, if you wanted to mark a subroutine as being a method call or
as requiring an automatic \fIlock()\fR when it is entered, you had to declare
that with a \f(CW\*(C`use attrs\*(C'\fR pragma in the body of the subroutine.
That can now be accomplished with declaration syntax, like this:
.PP
.Vb 5
\&    sub mymethod : locked method;
\&    ...
\&    sub mymethod : locked method {
\&        ...
\&    }
\&
\&    sub othermethod :locked :method;
\&    ...
\&    sub othermethod :locked :method {
\&        ...
\&    }
.Ve
.PP
(Note how only the first \f(CW\*(C`:\*(C'\fR is mandatory, and whitespace surrounding
the \f(CW\*(C`:\*(C'\fR is optional.)
.PP
\&\fIAutoSplit.pm\fR and \fISelfLoader.pm\fR have been updated to keep the attributes
with the stubs they provide.  See attributes.
.SS "File and directory handles can be autovivified"
.IX Subsection "File and directory handles can be autovivified"
Similar to how constructs such as \f(CW\*(C`$x\->[0]\*(C'\fR autovivify a reference,
handle constructors (\fIopen()\fR, \fIopendir()\fR, \fIpipe()\fR, \fIsocketpair()\fR, \fIsysopen()\fR,
\&\fIsocket()\fR, and \fIaccept()\fR) now autovivify a file or directory handle
if the handle passed to them is an uninitialized scalar variable.  This
allows the constructs such as \f(CW\*(C`open(my $fh, ...)\*(C'\fR and \f(CW\*(C`open(local $fh,...)\*(C'\fR
to be used to create filehandles that will conveniently be closed
automatically when the scope ends, provided there are no other references
to them.  This largely eliminates the need for typeglobs when opening
filehandles that must be passed around, as in the following example:
.PP
.Vb 5
\&    sub myopen {
\&        open my $fh, "@_"
\&             or die "Can\*(Aqt open \*(Aq@_\*(Aq: $!";
\&        return $fh;
\&    }
\&
\&    {
\&        my $f = myopen("</etc/motd");
\&        print <$f>;
\&        # $f implicitly closed here
\&    }
.Ve
.SS "\fIopen()\fP with more than two arguments"
.IX Subsection "open() with more than two arguments"
If \fIopen()\fR is passed three arguments instead of two, the second argument
is used as the mode and the third argument is taken to be the file name.
This is primarily useful for protecting against unintended magic behavior
of the traditional two-argument form.  See \*(L"open\*(R" in perlfunc.
.SS "64\-bit support"
.IX Subsection "64-bit support"
Any platform that has 64\-bit integers either
.PP
.Vb 3
\&        (1) natively as longs or ints
\&        (2) via special compiler flags
\&        (3) using long long or int64_t
.Ve
.PP
is able to use \*(L"quads\*(R" (64\-bit integers) as follows:
.IP "\(bu" 4
constants (decimal, hexadecimal, octal, binary) in the code
.IP "\(bu" 4
arguments to \fIoct()\fR and \fIhex()\fR
.IP "\(bu" 4
arguments to \fIprint()\fR, \fIprintf()\fR and \fIsprintf()\fR (flag prefixes ll, L, q)
.IP "\(bu" 4
printed as such
.IP "\(bu" 4
\&\fIpack()\fR and \fIunpack()\fR \*(L"q\*(R" and \*(L"Q\*(R" formats
.IP "\(bu" 4
in basic arithmetics: + \- * / % (\s-1NOTE:\s0 operating close to the limits
of the integer values may produce surprising results)
.IP "\(bu" 4
in bit arithmetics: & | ^ ~ << >> (\s-1NOTE:\s0 these used to be forced 
to be 32 bits wide but now operate on the full native width.)
.IP "\(bu" 4
\&\fIvec()\fR
.PP
Note that unless you have the case (a) you will have to configure
and compile Perl using the \-Duse64bitint Configure flag.
.PP
.Vb 2
\&    NOTE: The Configure flags \-Duselonglong and \-Duse64bits have been
\&    deprecated.  Use \-Duse64bitint instead.
.Ve
.PP
There are actually two modes of 64\-bitness: the first one is achieved
using Configure \-Duse64bitint and the second one using Configure
\&\-Duse64bitall.  The difference is that the first one is minimal and
the second one maximal.  The first works in more places than the second.
.PP
The \f(CW\*(C`use64bitint\*(C'\fR does only as much as is required to get 64\-bit
integers into Perl (this may mean, for example, using \*(L"long longs\*(R")
while your memory may still be limited to 2 gigabytes (because your
pointers could still be 32\-bit).  Note that the name \f(CW\*(C`64bitint\*(C'\fR does
not imply that your C compiler will be using 64\-bit \f(CW\*(C`int\*(C'\fRs (it might,
but it doesn't have to): the \f(CW\*(C`use64bitint\*(C'\fR means that you will be
able to have 64 bits wide scalar values.
.PP
The \f(CW\*(C`use64bitall\*(C'\fR goes all the way by attempting to switch also
integers (if it can), longs (and pointers) to being 64\-bit.  This may
create an even more binary incompatible Perl than \-Duse64bitint: the
resulting executable may not run at all in a 32\-bit box, or you may
have to reboot/reconfigure/rebuild your operating system to be 64\-bit
aware.
.PP
Natively 64\-bit systems like Alpha and Cray need neither \-Duse64bitint
nor \-Duse64bitall.
.PP
Last but not least: note that due to Perl's habit of always using
floating point numbers, the quads are still not true integers.
When quads overflow their limits (0...18_446_744_073_709_551_615 unsigned,
\&\-9_223_372_036_854_775_808...9_223_372_036_854_775_807 signed), they
are silently promoted to floating point numbers, after which they will
start losing precision (in their lower digits).
.PP
.Vb 4
\&    NOTE: 64\-bit support is still experimental on most platforms.
\&    Existing support only covers the LP64 data model.  In particular, the
\&    LLP64 data model is not yet supported.  64\-bit libraries and system
\&    APIs on many platforms have not stabilized\-\-your mileage may vary.
.Ve
.SS "Large file support"
.IX Subsection "Large file support"
If you have filesystems that support \*(L"large files\*(R" (files larger than
2 gigabytes), you may now also be able to create and access them from
Perl.
.PP
.Vb 2
\&    NOTE: The default action is to enable large file support, if
\&    available on the platform.
.Ve
.PP
If the large file support is on, and you have a Fcntl constant
O_LARGEFILE, the O_LARGEFILE is automatically added to the flags
of \fIsysopen()\fR.
.PP
Beware that unless your filesystem also supports \*(L"sparse files\*(R" seeking
to umpteen petabytes may be inadvisable.
.PP
Note that in addition to requiring a proper file system to do large
files you may also need to adjust your per-process (or your
per-system, or per-process-group, or per-user-group) maximum filesize
limits before running Perl scripts that try to handle large files,
especially if you intend to write such files.
.PP
Finally, in addition to your process/process group maximum filesize
limits, you may have quota limits on your filesystems that stop you
(your user id or your user group id) from using large files.
.PP
Adjusting your process/user/group/file system/operating system limits
is outside the scope of Perl core language.  For process limits, you
may try increasing the limits using your shell's limits/limit/ulimit
command before running Perl.  The BSD::Resource extension (not
included with the standard Perl distribution) may also be of use, it
offers the getrlimit/setrlimit interface that can be used to adjust
process resource usage limits, including the maximum filesize limit.
.SS "Long doubles"
.IX Subsection "Long doubles"
In some systems you may be able to use long doubles to enhance the
range and precision of your double precision floating point numbers
(that is, Perl's numbers).  Use Configure \-Duselongdouble to enable
this support (if it is available).
.ie n .SS """more bits"""
.el .SS "``more bits''"
.IX Subsection "more bits"
You can \*(L"Configure \-Dusemorebits\*(R" to turn on both the 64\-bit support
and the long double support.
.SS "Enhanced support for \fIsort()\fP subroutines"
.IX Subsection "Enhanced support for sort() subroutines"
Perl subroutines with a prototype of \f(CW\*(C`($$)\*(C'\fR, and XSUBs in general, can
now be used as sort subroutines.  In either case, the two elements to
be compared are passed as normal parameters in \f(CW@_\fR.  See \*(L"sort\*(R" in perlfunc.
.PP
For unprototyped sort subroutines, the historical behavior of passing 
the elements to be compared as the global variables \f(CW$a\fR and \f(CW$b\fR remains
unchanged.
.ie n .SS """sort $coderef @foo"" allowed"
.el .SS "\f(CWsort $coderef @foo\fP allowed"
.IX Subsection "sort $coderef @foo allowed"
\&\fIsort()\fR did not accept a subroutine reference as the comparison
function in earlier versions.  This is now permitted.
.SS "File globbing implemented internally"
.IX Subsection "File globbing implemented internally"
Perl now uses the File::Glob implementation of the \fIglob()\fR operator
automatically.  This avoids using an external csh process and the
problems associated with it.
.PP
.Vb 2
\&    NOTE: This is currently an experimental feature.  Interfaces and
\&    implementation are subject to change.
.Ve
.SS "Support for \s-1CHECK\s0 blocks"
.IX Subsection "Support for CHECK blocks"
In addition to \f(CW\*(C`BEGIN\*(C'\fR, \f(CW\*(C`INIT\*(C'\fR, \f(CW\*(C`END\*(C'\fR, \f(CW\*(C`DESTROY\*(C'\fR and \f(CW\*(C`AUTOLOAD\*(C'\fR,
subroutines named \f(CW\*(C`CHECK\*(C'\fR are now special.  These are queued up during
compilation and behave similar to \s-1END\s0 blocks, except they are called at
the end of compilation rather than at the end of execution.  They cannot
be called directly.
.SS "\s-1POSIX\s0 character class syntax [: :] supported"
.IX Subsection "POSIX character class syntax [: :] supported"
For example to match alphabetic characters use /[[:alpha:]]/.
See perlre for details.
.SS "Better pseudo-random number generator"
.IX Subsection "Better pseudo-random number generator"
In 5.005_0x and earlier, perl's \fIrand()\fR function used the C library
\&\fIrand\fR\|(3) function.  As of 5.005_52, Configure tests for \fIdrand48()\fR,
\&\fIrandom()\fR, and \fIrand()\fR (in that order) and picks the first one it finds.
.PP
These changes should result in better random numbers from \fIrand()\fR.
.ie n .SS "Improved ""qw//"" operator"
.el .SS "Improved \f(CWqw//\fP operator"
.IX Subsection "Improved qw// operator"
The \f(CW\*(C`qw//\*(C'\fR operator is now evaluated at compile time into a true list
instead of being replaced with a run time call to \f(CW\*(C`split()\*(C'\fR.  This
removes the confusing misbehaviour of \f(CW\*(C`qw//\*(C'\fR in scalar context, which
had inherited that behaviour from \fIsplit()\fR.
.PP
Thus:
.PP
.Vb 1
\&    $foo = ($bar) = qw(a b c); print "$foo|$bar\en";
.Ve
.PP
now correctly prints \*(L"3|a\*(R", instead of \*(L"2|a\*(R".
.SS "Better worst-case behavior of hashes"
.IX Subsection "Better worst-case behavior of hashes"
Small changes in the hashing algorithm have been implemented in
order to improve the distribution of lower order bits in the
hashed value.  This is expected to yield better performance on
keys that are repeated sequences.
.SS "\fIpack()\fP format 'Z' supported"
.IX Subsection "pack() format 'Z' supported"
The new format type 'Z' is useful for packing and unpacking null-terminated
strings.  See \*(L"pack\*(R" in perlfunc.
.SS "\fIpack()\fP format modifier '!' supported"
.IX Subsection "pack() format modifier '!' supported"
The new format type modifier '!' is useful for packing and unpacking
native shorts, ints, and longs.  See \*(L"pack\*(R" in perlfunc.
.SS "\fIpack()\fP and \fIunpack()\fP support counted strings"
.IX Subsection "pack() and unpack() support counted strings"
The template character '/' can be used to specify a counted string
type to be packed or unpacked.  See \*(L"pack\*(R" in perlfunc.
.SS "Comments in \fIpack()\fP templates"
.IX Subsection "Comments in pack() templates"
The '#' character in a template introduces a comment up to
end of the line.  This facilitates documentation of \fIpack()\fR
templates.
.SS "Weak references"
.IX Subsection "Weak references"
In previous versions of Perl, you couldn't cache objects so as
to allow them to be deleted if the last reference from outside 
the cache is deleted.  The reference in the cache would hold a
reference count on the object and the objects would never be
destroyed.
.PP
Another familiar problem is with circular references.  When an
object references itself, its reference count would never go
down to zero, and it would not get destroyed until the program
is about to exit.
.PP
Weak references solve this by allowing you to \*(L"weaken\*(R" any
reference, that is, make it not count towards the reference count.
When the last non-weak reference to an object is deleted, the object
is destroyed and all the weak references to the object are
automatically undef-ed.
.PP
To use this feature, you need the Devel::WeakRef package from \s-1CPAN,\s0 which
contains additional documentation.
.PP
.Vb 1
\&    NOTE: This is an experimental feature.  Details are subject to change.
.Ve
.SS "Binary numbers supported"
.IX Subsection "Binary numbers supported"
Binary numbers are now supported as literals, in s?printf formats, and
\&\f(CW\*(C`oct()\*(C'\fR:
.PP
.Vb 2
\&    $answer = 0b101010;
\&    printf "The answer is: %b\en", oct("0b101010");
.Ve
.SS "Lvalue subroutines"
.IX Subsection "Lvalue subroutines"
Subroutines can now return modifiable lvalues.
See \*(L"Lvalue subroutines\*(R" in perlsub.
.PP
.Vb 1
\&    NOTE: This is an experimental feature.  Details are subject to change.
.Ve
.SS "Some arrows may be omitted in calls through references"
.IX Subsection "Some arrows may be omitted in calls through references"
Perl now allows the arrow to be omitted in many constructs
involving subroutine calls through references.  For example,
\&\f(CW\*(C`$foo[10]\->(\*(Aqfoo\*(Aq)\*(C'\fR may now be written \f(CW\*(C`$foo[10](\*(Aqfoo\*(Aq)\*(C'\fR.
This is rather similar to how the arrow may be omitted from
\&\f(CW\*(C`$foo[10]\->{\*(Aqfoo\*(Aq}\*(C'\fR.  Note however, that the arrow is still
required for \f(CW\*(C`foo(10)\->(\*(Aqbar\*(Aq)\*(C'\fR.
.SS "Boolean assignment operators are legal lvalues"
.IX Subsection "Boolean assignment operators are legal lvalues"
Constructs such as \f(CW\*(C`($a ||= 2) += 1\*(C'\fR are now allowed.
.SS "\fIexists()\fP is supported on subroutine names"
.IX Subsection "exists() is supported on subroutine names"
The \fIexists()\fR builtin now works on subroutine names.  A subroutine
is considered to exist if it has been declared (even if implicitly).
See \*(L"exists\*(R" in perlfunc for examples.
.SS "\fIexists()\fP and \fIdelete()\fP are supported on array elements"
.IX Subsection "exists() and delete() are supported on array elements"
The \fIexists()\fR and \fIdelete()\fR builtins now work on simple arrays as well.
The behavior is similar to that on hash elements.
.PP
\&\fIexists()\fR can be used to check whether an array element has been
initialized.  This avoids autovivifying array elements that don't exist.
If the array is tied, the \s-1\fIEXISTS\s0()\fR method in the corresponding tied
package will be invoked.
.PP
\&\fIdelete()\fR may be used to remove an element from the array and return
it.  The array element at that position returns to its uninitialized
state, so that testing for the same element with \fIexists()\fR will return
false.  If the element happens to be the one at the end, the size of
the array also shrinks up to the highest element that tests true for
\&\fIexists()\fR, or 0 if none such is found.  If the array is tied, the \s-1\fIDELETE\s0()\fR 
method in the corresponding tied package will be invoked.
.PP
See \*(L"exists\*(R" in perlfunc and \*(L"delete\*(R" in perlfunc for examples.
.SS "Pseudo-hashes work better"
.IX Subsection "Pseudo-hashes work better"
Dereferencing some types of reference values in a pseudo-hash,
such as \f(CW\*(C`$ph\->{foo}[1]\*(C'\fR, was accidentally disallowed.  This has
been corrected.
.PP
When applied to a pseudo-hash element, \fIexists()\fR now reports whether
the specified value exists, not merely if the key is valid.
.PP
\&\fIdelete()\fR now works on pseudo-hashes.  When given a pseudo-hash element
or slice it deletes the values corresponding to the keys (but not the keys
themselves).  See \*(L"Pseudo-hashes: Using an array as a hash\*(R" in perlref.
.PP
Pseudo-hash slices with constant keys are now optimized to array lookups
at compile-time.
.PP
List assignments to pseudo-hash slices are now supported.
.PP
The \f(CW\*(C`fields\*(C'\fR pragma now provides ways to create pseudo-hashes, via
\&\fIfields::new()\fR and \fIfields::phash()\fR.  See fields.
.PP
.Vb 3
\&    NOTE: The pseudo\-hash data type continues to be experimental.
\&    Limiting oneself to the interface elements provided by the
\&    fields pragma will provide protection from any future changes.
.Ve
.SS "Automatic flushing of output buffers"
.IX Subsection "Automatic flushing of output buffers"
\&\fIfork()\fR, \fIexec()\fR, \fIsystem()\fR, qx//, and pipe \fIopen()\fRs now flush buffers
of all files opened for output when the operation was attempted.  This
mostly eliminates confusing buffering mishaps suffered by users unaware
of how Perl internally handles I/O.
.PP
This is not supported on some platforms like Solaris where a suitably
correct implementation of fflush(\s-1NULL\s0) isn't available.
.SS "Better diagnostics on meaningless filehandle operations"
.IX Subsection "Better diagnostics on meaningless filehandle operations"
Constructs such as \f(CW\*(C`open(<FH>)\*(C'\fR and \f(CW\*(C`close(<FH>)\*(C'\fR
are compile time errors.  Attempting to read from filehandles that
were opened only for writing will now produce warnings (just as
writing to read-only filehandles does).
.SS "Where possible, buffered data discarded from duped input filehandle"
.IX Subsection "Where possible, buffered data discarded from duped input filehandle"
\&\f(CW\*(C`open(NEW, "<&OLD")\*(C'\fR now attempts to discard any data that
was previously read and buffered in \f(CW\*(C`OLD\*(C'\fR before duping the handle.
On platforms where doing this is allowed, the next read operation
on \f(CW\*(C`NEW\*(C'\fR will return the same data as the corresponding operation
on \f(CW\*(C`OLD\*(C'\fR.  Formerly, it would have returned the data from the start
of the following disk block instead.
.SS "\fIeof()\fP has the same old magic as <>"
.IX Subsection "eof() has the same old magic as <>"
\&\f(CW\*(C`eof()\*(C'\fR would return true if no attempt to read from \f(CW\*(C`<>\*(C'\fR had
yet been made.  \f(CW\*(C`eof()\*(C'\fR has been changed to have a little magic of its
own, it now opens the \f(CW\*(C`<>\*(C'\fR files.
.SS "\fIbinmode()\fP can be used to set :crlf and :raw modes"
.IX Subsection "binmode() can be used to set :crlf and :raw modes"
\&\fIbinmode()\fR now accepts a second argument that specifies a discipline
for the handle in question.  The two pseudo-disciplines \*(L":raw\*(R" and
\&\*(L":crlf\*(R" are currently supported on DOS-derivative platforms.
See \*(L"binmode\*(R" in perlfunc and open.
.ie n .SS """\-T"" filetest recognizes \s-1UTF\-8\s0 encoded files as ""text"""
.el .SS "\f(CW\-T\fP filetest recognizes \s-1UTF\-8\s0 encoded files as ``text''"
.IX Subsection "-T filetest recognizes UTF-8 encoded files as text"
The algorithm used for the \f(CW\*(C`\-T\*(C'\fR filetest has been enhanced to
correctly identify \s-1UTF\-8\s0 content as \*(L"text\*(R".
.SS "\fIsystem()\fP, backticks and pipe open now reflect \fIexec()\fP failure"
.IX Subsection "system(), backticks and pipe open now reflect exec() failure"
On Unix and similar platforms, \fIsystem()\fR, \fIqx()\fR and open(\s-1FOO, \s0\*(L"cmd |\*(R")
etc., are implemented via \fIfork()\fR and \fIexec()\fR.  When the underlying
\&\fIexec()\fR fails, earlier versions did not report the error properly,
since the \fIexec()\fR happened to be in a different process.
.PP
The child process now communicates with the parent about the
error in launching the external command, which allows these
constructs to return with their usual error value and set $!.
.SS "Improved diagnostics"
.IX Subsection "Improved diagnostics"
Line numbers are no longer suppressed (under most likely circumstances)
during the global destruction phase.
.PP
Diagnostics emitted from code running in threads other than the main
thread are now accompanied by the thread \s-1ID.\s0
.PP
Embedded null characters in diagnostics now actually show up.  They
used to truncate the message in prior versions.
.PP
\&\f(CW$foo::a\fR and \f(CW$foo::b\fR are now exempt from \*(L"possible typo\*(R" warnings only
if \fIsort()\fR is encountered in package \f(CW\*(C`foo\*(C'\fR.
.PP
Unrecognized alphabetic escapes encountered when parsing quote
constructs now generate a warning, since they may take on new
semantics in later versions of Perl.
.PP
Many diagnostics now report the internal operation in which the warning
was provoked, like so:
.PP
.Vb 2
\&    Use of uninitialized value in concatenation (.) at (eval 1) line 1.
\&    Use of uninitialized value in print at (eval 1) line 1.
.Ve
.PP
Diagnostics  that occur within eval may also report the file and line
number where the eval is located, in addition to the eval sequence
number and the line number within the evaluated text itself.  For
example:
.PP
.Vb 1
\&    Not enough arguments for scalar at (eval 4)[newlib/perl5db.pl:1411] line 2, at EOF
.Ve
.SS "Diagnostics follow \s-1STDERR\s0"
.IX Subsection "Diagnostics follow STDERR"
Diagnostic output now goes to whichever file the \f(CW\*(C`STDERR\*(C'\fR handle
is pointing at, instead of always going to the underlying C runtime
library's \f(CW\*(C`stderr\*(C'\fR.
.SS "More consistent close-on-exec behavior"
.IX Subsection "More consistent close-on-exec behavior"
On systems that support a close-on-exec flag on filehandles, the
flag is now set for any handles created by \fIpipe()\fR, \fIsocketpair()\fR,
\&\fIsocket()\fR, and \fIaccept()\fR, if that is warranted by the value of $^F
that may be in effect.  Earlier versions neglected to set the flag
for handles created with these operators.  See \*(L"pipe\*(R" in perlfunc,
\&\*(L"socketpair\*(R" in perlfunc, \*(L"socket\*(R" in perlfunc, \*(L"accept\*(R" in perlfunc,
and \*(L"$^F\*(R" in perlvar.
.SS "\fIsyswrite()\fP ease-of-use"
.IX Subsection "syswrite() ease-of-use"
The length argument of \f(CW\*(C`syswrite()\*(C'\fR has become optional.
.SS "Better syntax checks on parenthesized unary operators"
.IX Subsection "Better syntax checks on parenthesized unary operators"
Expressions such as:
.PP
.Vb 3
\&    print defined(&foo,&bar,&baz);
\&    print uc("foo","bar","baz");
\&    undef($foo,&bar);
.Ve
.PP
used to be accidentally allowed in earlier versions, and produced
unpredictable behaviour.  Some produced ancillary warnings
when used in this way; others silently did the wrong thing.
.PP
The parenthesized forms of most unary operators that expect a single
argument now ensure that they are not called with more than one
argument, making the cases shown above syntax errors.  The usual
behaviour of:
.PP
.Vb 3
\&    print defined &foo, &bar, &baz;
\&    print uc "foo", "bar", "baz";
\&    undef $foo, &bar;
.Ve
.PP
remains unchanged.  See perlop.
.SS "Bit operators support full native integer width"
.IX Subsection "Bit operators support full native integer width"
The bit operators (& | ^ ~ << >>) now operate on the full native
integral width (the exact size of which is available in \f(CW$Config\fR{ivsize}).
For example, if your platform is either natively 64\-bit or if Perl
has been configured to use 64\-bit integers, these operations apply
to 8 bytes (as opposed to 4 bytes on 32\-bit platforms).
For portability, be sure to mask off the excess bits in the result of
unary \f(CW\*(C`~\*(C'\fR, e.g., \f(CW\*(C`~$x & 0xffffffff\*(C'\fR.
.SS "Improved security features"
.IX Subsection "Improved security features"
More potentially unsafe operations taint their results for improved
security.
.PP
The \f(CW\*(C`passwd\*(C'\fR and \f(CW\*(C`shell\*(C'\fR fields returned by the \fIgetpwent()\fR, \fIgetpwnam()\fR,
and \fIgetpwuid()\fR are now tainted, because the user can affect their own
encrypted password and login shell.
.PP
The variable modified by \fIshmread()\fR, and messages returned by \fImsgrcv()\fR
(and its object-oriented interface IPC::SysV::Msg::rcv) are also tainted,
because other untrusted processes can modify messages and shared memory
segments for their own nefarious purposes.
.SS "More functional bareword prototype (*)"
.IX Subsection "More functional bareword prototype (*)"
Bareword prototypes have been rationalized to enable them to be used
to override builtins that accept barewords and interpret them in
a special way, such as \f(CW\*(C`require\*(C'\fR or \f(CW\*(C`do\*(C'\fR.
.PP
Arguments prototyped as \f(CW\*(C`*\*(C'\fR will now be visible within the subroutine
as either a simple scalar or as a reference to a typeglob.
See \*(L"Prototypes\*(R" in perlsub.
.ie n .SS """require"" and ""do"" may be overridden"
.el .SS "\f(CWrequire\fP and \f(CWdo\fP may be overridden"
.IX Subsection "require and do may be overridden"
\&\f(CW\*(C`require\*(C'\fR and \f(CW\*(C`do \*(Aqfile\*(Aq\*(C'\fR operations may be overridden locally
by importing subroutines of the same name into the current package 
(or globally by importing them into the \s-1CORE::GLOBAL::\s0 namespace).
Overriding \f(CW\*(C`require\*(C'\fR will also affect \f(CW\*(C`use\*(C'\fR, provided the override
is visible at compile-time.
See \*(L"Overriding Built-in Functions\*(R" in perlsub.
.SS "$^X variables may now have names longer than one character"
.IX Subsection "$^X variables may now have names longer than one character"
Formerly, $^X was synonymous with ${\*(L"\ecX\*(R"}, but $^XY was a syntax
error.  Now variable names that begin with a control character may be
arbitrarily long.  However, for compatibility reasons, these variables
\&\fImust\fR be written with explicit braces, as \f(CW\*(C`${^XY}\*(C'\fR for example.
\&\f(CW\*(C`${^XYZ}\*(C'\fR is synonymous with ${\*(L"\ecXYZ\*(R"}.  Variable names with more
than one control character, such as \f(CW\*(C`${^XY^Z}\*(C'\fR, are illegal.
.PP
The old syntax has not changed.  As before, `^X' may be either a
literal control-X character or the two-character sequence `caret' plus
`X'.  When braces are omitted, the variable name stops after the
control character.  Thus \f(CW"$^XYZ"\fR continues to be synonymous with
\&\f(CW\*(C`$^X . "YZ"\*(C'\fR as before.
.PP
As before, lexical variables may not have names beginning with control
characters.  As before, variables whose names begin with a control
character are always forced to be in package `main'.  All such variables
are reserved for future extensions, except those that begin with
\&\f(CW\*(C`^_\*(C'\fR, which may be used by user programs and are guaranteed not to
acquire special meaning in any future version of Perl.
.ie n .SS "New variable $^C reflects ""\-c"" switch"
.el .SS "New variable $^C reflects \f(CW\-c\fP switch"
.IX Subsection "New variable $^C reflects -c switch"
\&\f(CW$^C\fR has a boolean value that reflects whether perl is being run
in compile-only mode (i.e. via the \f(CW\*(C`\-c\*(C'\fR switch).  Since
\&\s-1BEGIN\s0 blocks are executed under such conditions, this variable
enables perl code to determine whether actions that make sense
only during normal running are warranted.  See perlvar.
.SS "New variable $^V contains Perl version as a string"
.IX Subsection "New variable $^V contains Perl version as a string"
\&\f(CW$^V\fR contains the Perl version number as a string composed of
characters whose ordinals match the version numbers, i.e. v5.6.0.
This may be used in string comparisons.
.PP
See \f(CW\*(C`Support for strings represented as a vector of ordinals\*(C'\fR for an
example.
.SS "Optional Y2K warnings"
.IX Subsection "Optional Y2K warnings"
If Perl is built with the cpp macro \f(CW\*(C`PERL_Y2KWARN\*(C'\fR defined,
it emits optional warnings when concatenating the number 19
with another number.
.PP
This behavior must be specifically enabled when running Configure.
See \fI\s-1INSTALL\s0\fR and \fI\s-1README.Y2K\s0\fR.
.SS "Arrays now always interpolate into double-quoted strings"
.IX Subsection "Arrays now always interpolate into double-quoted strings"
In double-quoted strings, arrays now interpolate, no matter what.  The
behavior in earlier versions of perl 5 was that arrays would interpolate
into strings if the array had been mentioned before the string was
compiled, and otherwise Perl would raise a fatal compile-time error.
In versions 5.000 through 5.003, the error was
.PP
.Vb 1
\&        Literal @example now requires backslash
.Ve
.PP
In versions 5.004_01 through 5.6.0, the error was
.PP
.Vb 1
\&        In string, @example now must be written as \e@example
.Ve
.PP
The idea here was to get people into the habit of writing
\&\f(CW"fred\e@example.com"\fR when they wanted a literal \f(CW\*(C`@\*(C'\fR sign, just as
they have always written \f(CW"Give me back my \e$5"\fR when they wanted a
literal \f(CW\*(C`$\*(C'\fR sign.
.PP
Starting with 5.6.1, when Perl now sees an \f(CW\*(C`@\*(C'\fR sign in a
double-quoted string, it \fIalways\fR attempts to interpolate an array,
regardless of whether or not the array has been used or declared
already.  The fatal error has been downgraded to an optional warning:
.PP
.Vb 1
\&        Possible unintended interpolation of @example in string
.Ve
.PP
This warns you that \f(CW"fred@example.com"\fR is going to turn into
\&\f(CW\*(C`fred.com\*(C'\fR if you don't backslash the \f(CW\*(C`@\*(C'\fR.
See http://perl.plover.com/at\-error.html for more details
about the history here.
.SS "@\- and @+ provide starting/ending offsets of regex matches"
.IX Subsection "@- and @+ provide starting/ending offsets of regex matches"
The new magic variables @\- and @+ provide the starting and ending
offsets, respectively, of $&, \f(CW$1\fR, \f(CW$2\fR, etc.  See perlvar for
details.
.SH "Modules and Pragmata"
.IX Header "Modules and Pragmata"
.SS "Modules"
.IX Subsection "Modules"
.IP "attributes" 4
.IX Item "attributes"
While used internally by Perl as a pragma, this module also
provides a way to fetch subroutine and variable attributes.
See attributes.
.IP "B" 4
.IX Item "B"
The Perl Compiler suite has been extensively reworked for this
release.  More of the standard Perl test suite passes when run
under the Compiler, but there is still a significant way to
go to achieve production quality compiled executables.
.Sp
.Vb 3
\&    NOTE: The Compiler suite remains highly experimental.  The
\&    generated code may not be correct, even when it manages to execute
\&    without errors.
.Ve
.IP "Benchmark" 4
.IX Item "Benchmark"
Overall, Benchmark results exhibit lower average error and better timing
accuracy.
.Sp
You can now run tests for \fIn\fR seconds instead of guessing the right
number of tests to run: e.g., timethese(\-5, ...) will run each 
code for at least 5 \s-1CPU\s0 seconds.  Zero as the \*(L"number of repetitions\*(R"
means \*(L"for at least 3 \s-1CPU\s0 seconds\*(R".  The output format has also
changed.  For example:
.Sp
.Vb 1
\&   use Benchmark;$x=3;timethese(\-5,{a=>sub{$x*$x},b=>sub{$x**2}})
.Ve
.Sp
will now output something like this:
.Sp
.Vb 3
\&   Benchmark: running a, b, each for at least 5 CPU seconds...
\&            a:  5 wallclock secs ( 5.77 usr +  0.00 sys =  5.77 CPU) @ 200551.91/s (n=1156516)
\&            b:  4 wallclock secs ( 5.00 usr +  0.02 sys =  5.02 CPU) @ 159605.18/s (n=800686)
.Ve
.Sp
New features: \*(L"each for at least N \s-1CPU\s0 seconds...\*(R", \*(L"wallclock secs\*(R",
and the \*(L"@ operations/CPU second (n=operations)\*(R".
.Sp
\&\fItimethese()\fR now returns a reference to a hash of Benchmark objects containing
the test results, keyed on the names of the tests.
.Sp
\&\fItimethis()\fR now returns the iterations field in the Benchmark result object
instead of 0.
.Sp
\&\fItimethese()\fR, \fItimethis()\fR, and the new \fIcmpthese()\fR (see below) can also take
a format specifier of 'none' to suppress output.
.Sp
A new function \fIcountit()\fR is just like \fItimeit()\fR except that it takes a
\&\s-1TIME\s0 instead of a \s-1COUNT.\s0
.Sp
A new function \fIcmpthese()\fR prints a chart comparing the results of each test
returned from a \fItimethese()\fR call.  For each possible pair of tests, the
percentage speed difference (iters/sec or seconds/iter) is shown.
.Sp
For other details, see Benchmark.
.IP "ByteLoader" 4
.IX Item "ByteLoader"
The ByteLoader is a dedicated extension to generate and run
Perl bytecode.  See ByteLoader.
.IP "constant" 4
.IX Item "constant"
References can now be used.
.Sp
The new version also allows a leading underscore in constant names, but
disallows a double leading underscore (as in \*(L"_\|_LINE_\|_\*(R").  Some other names
are disallowed or warned against, including \s-1BEGIN, END,\s0 etc.  Some names
which were forced into main:: used to fail silently in some cases; now they're
fatal (outside of main::) and an optional warning (inside of main::).
The ability to detect whether a constant had been set with a given name has
been added.
.Sp
See constant.
.IP "charnames" 4
.IX Item "charnames"
This pragma implements the \f(CW\*(C`\eN\*(C'\fR string escape.  See charnames.
.IP "Data::Dumper" 4
.IX Item "Data::Dumper"
A \f(CW\*(C`Maxdepth\*(C'\fR setting can be specified to avoid venturing
too deeply into deep data structures.  See Data::Dumper.
.Sp
The \s-1XSUB\s0 implementation of \fIDump()\fR is now automatically called if the
\&\f(CW\*(C`Useqq\*(C'\fR setting is not in use.
.Sp
Dumping \f(CW\*(C`qr//\*(C'\fR objects works correctly.
.IP "\s-1DB\s0" 4
.IX Item "DB"
\&\f(CW\*(C`DB\*(C'\fR is an experimental module that exposes a clean abstraction
to Perl's debugging \s-1API.\s0
.IP "DB_File" 4
.IX Item "DB_File"
DB_File can now be built with Berkeley \s-1DB\s0 versions 1, 2 or 3.
See \f(CW\*(C`ext/DB_File/Changes\*(C'\fR.
.IP "Devel::DProf" 4
.IX Item "Devel::DProf"
Devel::DProf, a Perl source code profiler has been added.  See
Devel::DProf and dprofpp.
.IP "Devel::Peek" 4
.IX Item "Devel::Peek"
The Devel::Peek module provides access to the internal representation
of Perl variables and data.  It is a data debugging tool for the \s-1XS\s0 programmer.
.IP "Dumpvalue" 4
.IX Item "Dumpvalue"
The Dumpvalue module provides screen dumps of Perl data.
.IP "DynaLoader" 4
.IX Item "DynaLoader"
DynaLoader now supports a \fIdl_unload_file()\fR function on platforms that
support unloading shared objects using \fIdlclose()\fR.
.Sp
Perl can also optionally arrange to unload all extension shared objects
loaded by Perl.  To enable this, build Perl with the Configure option
\&\f(CW\*(C`\-Accflags=\-DDL_UNLOAD_ALL_AT_EXIT\*(C'\fR.  (This maybe useful if you are
using Apache with mod_perl.)
.IP "English" 4
.IX Item "English"
\&\f(CW$PERL_VERSION\fR now stands for \f(CW$^V\fR (a string value) rather than for \f(CW$]\fR
(a numeric value).
.IP "Env" 4
.IX Item "Env"
Env now supports accessing environment variables like \s-1PATH\s0 as array
variables.
.IP "Fcntl" 4
.IX Item "Fcntl"
More Fcntl constants added: F_SETLK64, F_SETLKW64, O_LARGEFILE for
large file (more than 4GB) access (\s-1NOTE:\s0 the O_LARGEFILE is
automatically added to \fIsysopen()\fR flags if large file support has been
configured, as is the default), Free/Net/OpenBSD locking behaviour
flags F_FLOCK, F_POSIX, Linux F_SHLCK, and O_ACCMODE: the combined
mask of O_RDONLY, O_WRONLY, and O_RDWR.  The \fIseek()\fR/\fIsysseek()\fR
constants \s-1SEEK_SET, SEEK_CUR,\s0 and \s-1SEEK_END\s0 are available via the
\&\f(CW\*(C`:seek\*(C'\fR tag.  The \fIchmod()\fR/\fIstat()\fR S_IF* constants and S_IS* functions
are available via the \f(CW\*(C`:mode\*(C'\fR tag.
.IP "File::Compare" 4
.IX Item "File::Compare"
A \fIcompare_text()\fR function has been added, which allows custom
comparison functions.  See File::Compare.
.IP "File::Find" 4
.IX Item "File::Find"
File::Find now works correctly when the \fIwanted()\fR function is either
autoloaded or is a symbolic reference.
.Sp
A bug that caused File::Find to lose track of the working directory
when pruning top-level directories has been fixed.
.Sp
File::Find now also supports several other options to control its
behavior.  It can follow symbolic links if the \f(CW\*(C`follow\*(C'\fR option is
specified.  Enabling the \f(CW\*(C`no_chdir\*(C'\fR option will make File::Find skip
changing the current directory when walking directories.  The \f(CW\*(C`untaint\*(C'\fR
flag can be useful when running with taint checks enabled.
.Sp
See File::Find.
.IP "File::Glob" 4
.IX Item "File::Glob"
This extension implements BSD-style file globbing.  By default,
it will also be used for the internal implementation of the \fIglob()\fR
operator.  See File::Glob.
.IP "File::Spec" 4
.IX Item "File::Spec"
New methods have been added to the File::Spec module: \fIdevnull()\fR returns
the name of the null device (/dev/null on Unix) and \fItmpdir()\fR the name of
the temp directory (normally /tmp on Unix).  There are now also methods
to convert between absolute and relative filenames: \fIabs2rel()\fR and
\&\fIrel2abs()\fR.  For compatibility with operating systems that specify volume
names in file paths, the \fIsplitpath()\fR, \fIsplitdir()\fR, and \fIcatdir()\fR methods
have been added.
.IP "File::Spec::Functions" 4
.IX Item "File::Spec::Functions"
The new File::Spec::Functions modules provides a function interface
to the File::Spec module.  Allows shorthand
.Sp
.Vb 1
\&    $fullname = catfile($dir1, $dir2, $file);
.Ve
.Sp
instead of
.Sp
.Vb 1
\&    $fullname = File::Spec\->catfile($dir1, $dir2, $file);
.Ve
.IP "Getopt::Long" 4
.IX Item "Getopt::Long"
Getopt::Long licensing has changed to allow the Perl Artistic License
as well as the \s-1GPL.\s0 It used to be \s-1GPL\s0 only, which got in the way of
non-GPL applications that wanted to use Getopt::Long.
.Sp
Getopt::Long encourages the use of Pod::Usage to produce help
messages. For example:
.Sp
.Vb 7
\&    use Getopt::Long;
\&    use Pod::Usage;
\&    my $man = 0;
\&    my $help = 0;
\&    GetOptions(\*(Aqhelp|?\*(Aq => \e$help, man => \e$man) or pod2usage(2);
\&    pod2usage(1) if $help;
\&    pod2usage(\-exitstatus => 0, \-verbose => 2) if $man;
\&
\&    _\|_END_\|_
\&
\&    =head1 NAME
\&
\&    sample \- Using Getopt::Long and Pod::Usage
\&
\&    =head1 SYNOPSIS
\&
\&    sample [options] [file ...]
\&
\&     Options:
\&       \-help            brief help message
\&       \-man             full documentation
\&
\&    =head1 OPTIONS
\&
\&    =over 8
\&
\&    =item B<\-help>
\&
\&    Print a brief help message and exits.
\&
\&    =item B<\-man>
\&
\&    Prints the manual page and exits.
\&
\&    =back
\&
\&    =head1 DESCRIPTION
\&
\&    B<This program> will read the given input file(s) and do something
\&    useful with the contents thereof.
\&
\&    =cut
.Ve
.Sp
See Pod::Usage for details.
.Sp
A bug that prevented the non-option call-back <> from being
specified as the first argument has been fixed.
.Sp
To specify the characters < and > as option starters, use ><. Note,
however, that changing option starters is strongly deprecated.
.IP "\s-1IO\s0" 4
.IX Item "IO"
\&\fIwrite()\fR and \fIsyswrite()\fR will now accept a single-argument
form of the call, for consistency with Perl's \fIsyswrite()\fR.
.Sp
You can now create a TCP-based IO::Socket::INET without forcing
a connect attempt.  This allows you to configure its options
(like making it non-blocking) and then call \fIconnect()\fR manually.
.Sp
A bug that prevented the \fIIO::Socket::protocol()\fR accessor
from ever returning the correct value has been corrected.
.Sp
IO::Socket::connect now uses non-blocking \s-1IO\s0 instead of \fIalarm()\fR
to do connect timeouts.
.Sp
IO::Socket::accept now uses \fIselect()\fR instead of \fIalarm()\fR for doing
timeouts.
.Sp
IO::Socket::INET\->new now sets $! correctly on failure. $@ is
still set for backwards compatibility.
.IP "\s-1JPL\s0" 4
.IX Item "JPL"
Java Perl Lingo is now distributed with Perl.  See jpl/README
for more information.
.IP "lib" 4
.IX Item "lib"
\&\f(CW\*(C`use lib\*(C'\fR now weeds out any trailing duplicate entries.
\&\f(CW\*(C`no lib\*(C'\fR removes all named entries.
.IP "Math::BigInt" 4
.IX Item "Math::BigInt"
The bitwise operations \f(CW\*(C`<<\*(C'\fR, \f(CW\*(C`>>\*(C'\fR, \f(CW\*(C`&\*(C'\fR, \f(CW\*(C`|\*(C'\fR,
and \f(CW\*(C`~\*(C'\fR are now supported on bigints.
.IP "Math::Complex" 4
.IX Item "Math::Complex"
The accessor methods Re, Im, arg, abs, rho, and theta can now also
act as mutators (accessor \f(CW$z\fR\->\fIRe()\fR, mutator \f(CW$z\fR\->\fIRe\fR\|(3)).
.Sp
The class method \f(CW\*(C`display_format\*(C'\fR and the corresponding object method
\&\f(CW\*(C`display_format\*(C'\fR, in addition to accepting just one argument, now can
also accept a parameter hash.  Recognized keys of a parameter hash are
\&\f(CW"style"\fR, which corresponds to the old one parameter case, and two
new parameters: \f(CW"format"\fR, which is a \fIprintf()\fR\-style format string
(defaults usually to \f(CW"%.15g"\fR, you can revert to the default by
setting the format string to \f(CW\*(C`undef\*(C'\fR) used for both parts of a
complex number, and \f(CW"polar_pretty_print"\fR (defaults to true),
which controls whether an attempt is made to try to recognize small
multiples and rationals of pi (2pi, pi/2) at the argument (angle) of a
polar complex number.
.Sp
The potentially disruptive change is that in list context both methods
now \fIreturn the parameter hash\fR, instead of only the value of the
\&\f(CW"style"\fR parameter.
.IP "Math::Trig" 4
.IX Item "Math::Trig"
A little bit of radial trigonometry (cylindrical and spherical),
radial coordinate conversions, and the great circle distance were added.
.IP "Pod::Parser, Pod::InputObjects" 4
.IX Item "Pod::Parser, Pod::InputObjects"
Pod::Parser is a base class for parsing and selecting sections of
pod documentation from an input stream.  This module takes care of
identifying pod paragraphs and commands in the input and hands off the
parsed paragraphs and commands to user-defined methods which are free
to interpret or translate them as they see fit.
.Sp
Pod::InputObjects defines some input objects needed by Pod::Parser, and
for advanced users of Pod::Parser that need more about a command besides
its name and text.
.Sp
As of release 5.6.0 of Perl, Pod::Parser is now the officially sanctioned
\&\*(L"base parser code\*(R" recommended for use by all pod2xxx translators.
Pod::Text (pod2text) and Pod::Man (pod2man) have already been converted
to use Pod::Parser and efforts to convert Pod::HTML (pod2html) are already
underway.  For any questions or comments about pod parsing and translating
issues and utilities, please use the pod\-people@perl.org mailing list.
.Sp
For further information, please see Pod::Parser and Pod::InputObjects.
.IP "Pod::Checker, podchecker" 4
.IX Item "Pod::Checker, podchecker"
This utility checks pod files for correct syntax, according to
perlpod.  Obvious errors are flagged as such, while warnings are
printed for mistakes that can be handled gracefully.  The checklist is
not complete yet.  See Pod::Checker.
.IP "Pod::ParseUtils, Pod::Find" 4
.IX Item "Pod::ParseUtils, Pod::Find"
These modules provide a set of gizmos that are useful mainly for pod
translators.  Pod::Find traverses directory structures and
returns found pod files, along with their canonical names (like
\&\f(CW\*(C`File::Spec::Unix\*(C'\fR).  Pod::ParseUtils contains
\&\fBPod::List\fR (useful for storing pod list information), \fBPod::Hyperlink\fR
(for parsing the contents of \f(CW\*(C`L<>\*(C'\fR sequences) and \fBPod::Cache\fR
(for caching information about pod files, e.g., link nodes).
.IP "Pod::Select, podselect" 4
.IX Item "Pod::Select, podselect"
Pod::Select is a subclass of Pod::Parser which provides a function
named \*(L"\fIpodselect()\fR\*(R" to filter out user-specified sections of raw pod
documentation from an input stream. podselect is a script that provides
access to Pod::Select from other scripts to be used as a filter.
See Pod::Select.
.IP "Pod::Usage, pod2usage" 4
.IX Item "Pod::Usage, pod2usage"
Pod::Usage provides the function \*(L"\fIpod2usage()\fR\*(R" to print usage messages for
a Perl script based on its embedded pod documentation.  The \fIpod2usage()\fR
function is generally useful to all script authors since it lets them
write and maintain a single source (the pods) for documentation, thus
removing the need to create and maintain redundant usage message text
consisting of information already in the pods.
.Sp
There is also a pod2usage script which can be used from other kinds of
scripts to print usage messages from pods (even for non-Perl scripts
with pods embedded in comments).
.Sp
For details and examples, please see Pod::Usage.
.IP "Pod::Text and Pod::Man" 4
.IX Item "Pod::Text and Pod::Man"
Pod::Text has been rewritten to use Pod::Parser.  While \fIpod2text()\fR is
still available for backwards compatibility, the module now has a new
preferred interface.  See Pod::Text for the details.  The new Pod::Text
module is easily subclassed for tweaks to the output, and two such
subclasses (Pod::Text::Termcap for man-page-style bold and underlining
using termcap information, and Pod::Text::Color for markup with \s-1ANSI\s0 color
sequences) are now standard.
.Sp
pod2man has been turned into a module, Pod::Man, which also uses
Pod::Parser.  In the process, several outstanding bugs related to quotes
in section headers, quoting of code escapes, and nested lists have been
fixed.  pod2man is now a wrapper script around this module.
.IP "SDBM_File" 4
.IX Item "SDBM_File"
An \s-1EXISTS\s0 method has been added to this module (and \fIsdbm_exists()\fR has
been added to the underlying sdbm library), so one can now call exists
on an SDBM_File tied hash and get the correct result, rather than a
runtime error.
.Sp
A bug that may have caused data loss when more than one disk block
happens to be read from the database in a single \s-1\fIFETCH\s0()\fR has been
fixed.
.IP "Sys::Syslog" 4
.IX Item "Sys::Syslog"
Sys::Syslog now uses XSUBs to access facilities from syslog.h so it
no longer requires syslog.ph to exist.
.IP "Sys::Hostname" 4
.IX Item "Sys::Hostname"
Sys::Hostname now uses XSUBs to call the C library's \fIgethostname()\fR or
\&\fIuname()\fR if they exist.
.IP "Term::ANSIColor" 4
.IX Item "Term::ANSIColor"
Term::ANSIColor is a very simple module to provide easy and readable
access to the \s-1ANSI\s0 color and highlighting escape sequences, supported by
most \s-1ANSI\s0 terminal emulators.  It is now included standard.
.IP "Time::Local" 4
.IX Item "Time::Local"
The \fItimelocal()\fR and \fItimegm()\fR functions used to silently return bogus
results when the date fell outside the machine's integer range.  They
now consistently \fIcroak()\fR if the date falls in an unsupported range.
.IP "Win32" 4
.IX Item "Win32"
The error return value in list context has been changed for all functions
that return a list of values.  Previously these functions returned a list
with a single element \f(CW\*(C`undef\*(C'\fR if an error occurred.  Now these functions
return the empty list in these situations.  This applies to the following
functions:
.Sp
.Vb 2
\&    Win32::FsType
\&    Win32::GetOSVersion
.Ve
.Sp
The remaining functions are unchanged and continue to return \f(CW\*(C`undef\*(C'\fR on
error even in list context.
.Sp
The Win32::SetLastError(\s-1ERROR\s0) function has been added as a complement
to the \fIWin32::GetLastError()\fR function.
.Sp
The new Win32::GetFullPathName(\s-1FILENAME\s0) returns the full absolute
pathname for \s-1FILENAME\s0 in scalar context.  In list context it returns
a two-element list containing the fully qualified directory name and
the filename.  See Win32.
.IP "XSLoader" 4
.IX Item "XSLoader"
The XSLoader extension is a simpler alternative to DynaLoader.
See XSLoader.
.IP "\s-1DBM\s0 Filters" 4
.IX Item "DBM Filters"
A new feature called \*(L"\s-1DBM\s0 Filters\*(R" has been added to all the
\&\s-1DBM\s0 modules\-\-DB_File, GDBM_File, NDBM_File, ODBM_File, and SDBM_File.
\&\s-1DBM\s0 Filters add four new methods to each \s-1DBM\s0 module:
.Sp
.Vb 4
\&    filter_store_key
\&    filter_store_value
\&    filter_fetch_key
\&    filter_fetch_value
.Ve
.Sp
These can be used to filter key-value pairs before the pairs are
written to the database or just after they are read from the database.
See perldbmfilter for further information.
.SS "Pragmata"
.IX Subsection "Pragmata"
\&\f(CW\*(C`use attrs\*(C'\fR is now obsolete, and is only provided for
backward-compatibility.  It's been replaced by the \f(CW\*(C`sub : attributes\*(C'\fR
syntax.  See \*(L"Subroutine Attributes\*(R" in perlsub and attributes.
.PP
Lexical warnings pragma, \f(CW\*(C`use warnings;\*(C'\fR, to control optional warnings.
See perllexwarn.
.PP
\&\f(CW\*(C`use filetest\*(C'\fR to control the behaviour of filetests (\f(CW\*(C`\-r\*(C'\fR \f(CW\*(C`\-w\*(C'\fR
\&...).  Currently only one subpragma implemented, \*(L"use filetest
\&'access';\*(R", that uses \fIaccess\fR\|(2) or equivalent to check permissions
instead of using \fIstat\fR\|(2) as usual.  This matters in filesystems
where there are ACLs (access control lists): the \fIstat\fR\|(2) might lie,
but \fIaccess\fR\|(2) knows better.
.PP
The \f(CW\*(C`open\*(C'\fR pragma can be used to specify default disciplines for
handle constructors (e.g. \fIopen()\fR) and for qx//.  The two
pseudo-disciplines \f(CW\*(C`:raw\*(C'\fR and \f(CW\*(C`:crlf\*(C'\fR are currently supported on
DOS-derivative platforms (i.e. where binmode is not a no-op).
See also \*(L"\fIbinmode()\fR can be used to set :crlf and :raw modes\*(R".
.SH "Utility Changes"
.IX Header "Utility Changes"
.SS "dprofpp"
.IX Subsection "dprofpp"
\&\f(CW\*(C`dprofpp\*(C'\fR is used to display profile data generated using \f(CW\*(C`Devel::DProf\*(C'\fR.
See dprofpp.
.SS "find2perl"
.IX Subsection "find2perl"
The \f(CW\*(C`find2perl\*(C'\fR utility now uses the enhanced features of the File::Find
module.  The \-depth and \-follow options are supported.  Pod documentation
is also included in the script.
.SS "h2xs"
.IX Subsection "h2xs"
The \f(CW\*(C`h2xs\*(C'\fR tool can now work in conjunction with \f(CW\*(C`C::Scan\*(C'\fR (available
from \s-1CPAN\s0) to automatically parse real-life header files.  The \f(CW\*(C`\-M\*(C'\fR,
\&\f(CW\*(C`\-a\*(C'\fR, \f(CW\*(C`\-k\*(C'\fR, and \f(CW\*(C`\-o\*(C'\fR options are new.
.SS "perlcc"
.IX Subsection "perlcc"
\&\f(CW\*(C`perlcc\*(C'\fR now supports the C and Bytecode backends.  By default,
it generates output from the simple C backend rather than the
optimized C backend.
.PP
Support for non-Unix platforms has been improved.
.SS "perldoc"
.IX Subsection "perldoc"
\&\f(CW\*(C`perldoc\*(C'\fR has been reworked to avoid possible security holes.
It will not by default let itself be run as the superuser, but you
may still use the \fB\-U\fR switch to try to make it drop privileges
first.
.SS "The Perl Debugger"
.IX Subsection "The Perl Debugger"
Many bug fixes and enhancements were added to \fIperl5db.pl\fR, the
Perl debugger.  The help documentation was rearranged.  New commands
include \f(CW\*(C`< ?\*(C'\fR, \f(CW\*(C`> ?\*(C'\fR, and \f(CW\*(C`{ ?\*(C'\fR to list out current
actions, \f(CW\*(C`man \f(CIdocpage\f(CW\*(C'\fR to run your doc viewer on some perl
docset, and support for quoted options.  The help information was
rearranged, and should be viewable once again if you're using \fBless\fR
as your pager.  A serious security hole was plugged\*(--you should
immediately remove all older versions of the Perl debugger as
installed in previous releases, all the way back to perl3, from
your system to avoid being bitten by this.
.SH "Improved Documentation"
.IX Header "Improved Documentation"
Many of the platform-specific \s-1README\s0 files are now part of the perl
installation.  See perl for the complete list.
.IP "perlapi.pod" 4
.IX Item "perlapi.pod"
The official list of public Perl \s-1API\s0 functions.
.IP "perlboot.pod" 4
.IX Item "perlboot.pod"
A tutorial for beginners on object-oriented Perl.
.IP "perlcompile.pod" 4
.IX Item "perlcompile.pod"
An introduction to using the Perl Compiler suite.
.IP "perldbmfilter.pod" 4
.IX Item "perldbmfilter.pod"
A howto document on using the \s-1DBM\s0 filter facility.
.IP "perldebug.pod" 4
.IX Item "perldebug.pod"
All material unrelated to running the Perl debugger, plus all
low-level guts-like details that risked crushing the casual user
of the debugger, have been relocated from the old manpage to the
next entry below.
.IP "perldebguts.pod" 4
.IX Item "perldebguts.pod"
This new manpage contains excessively low-level material not related
to the Perl debugger, but slightly related to debugging Perl itself.
It also contains some arcane internal details of how the debugging
process works that may only be of interest to developers of Perl
debuggers.
.IP "perlfork.pod" 4
.IX Item "perlfork.pod"
Notes on the \fIfork()\fR emulation currently available for the Windows platform.
.IP "perlfilter.pod" 4
.IX Item "perlfilter.pod"
An introduction to writing Perl source filters.
.IP "perlhack.pod" 4
.IX Item "perlhack.pod"
Some guidelines for hacking the Perl source code.
.IP "perlintern.pod" 4
.IX Item "perlintern.pod"
A list of internal functions in the Perl source code.
(List is currently empty.)
.IP "perllexwarn.pod" 4
.IX Item "perllexwarn.pod"
Introduction and reference information about lexically scoped
warning categories.
.IP "perlnumber.pod" 4
.IX Item "perlnumber.pod"
Detailed information about numbers as they are represented in Perl.
.IP "perlopentut.pod" 4
.IX Item "perlopentut.pod"
A tutorial on using \fIopen()\fR effectively.
.IP "perlreftut.pod" 4
.IX Item "perlreftut.pod"
A tutorial that introduces the essentials of references.
.IP "perltootc.pod" 4
.IX Item "perltootc.pod"
A tutorial on managing class data for object modules.
.IP "perltodo.pod" 4
.IX Item "perltodo.pod"
Discussion of the most often wanted features that may someday be
supported in Perl.
.IP "perlunicode.pod" 4
.IX Item "perlunicode.pod"
An introduction to Unicode support features in Perl.
.SH "Performance enhancements"
.IX Header "Performance enhancements"
.ie n .SS "Simple \fIsort()\fP using { $a <=> $b } and the like are optimized"
.el .SS "Simple \fIsort()\fP using { \f(CW$a\fP <=> \f(CW$b\fP } and the like are optimized"
.IX Subsection "Simple sort() using { $a <=> $b } and the like are optimized"
Many common \fIsort()\fR operations using a simple inlined block are now
optimized for faster performance.
.SS "Optimized assignments to lexical variables"
.IX Subsection "Optimized assignments to lexical variables"
Certain operations in the \s-1RHS\s0 of assignment statements have been
optimized to directly set the lexical variable on the \s-1LHS,\s0
eliminating redundant copying overheads.
.SS "Faster subroutine calls"
.IX Subsection "Faster subroutine calls"
Minor changes in how subroutine calls are handled internally
provide marginal improvements in performance.
.SS "\fIdelete()\fP, \fIeach()\fP, \fIvalues()\fP and hash iteration are faster"
.IX Subsection "delete(), each(), values() and hash iteration are faster"
The hash values returned by \fIdelete()\fR, \fIeach()\fR, \fIvalues()\fR and hashes in a
list context are the actual values in the hash, instead of copies.
This results in significantly better performance, because it eliminates
needless copying in most situations.
.SH "Installation and Configuration Improvements"
.IX Header "Installation and Configuration Improvements"
.SS "\-Dusethreads means something different"
.IX Subsection "-Dusethreads means something different"
The \-Dusethreads flag now enables the experimental interpreter-based thread
support by default.  To get the flavor of experimental threads that was in
5.005 instead, you need to run Configure with \*(L"\-Dusethreads \-Duse5005threads\*(R".
.PP
As of v5.6.0, interpreter-threads support is still lacking a way to
create new threads from Perl (i.e., \f(CW\*(C`use Thread;\*(C'\fR will not work with
interpreter threads).  \f(CW\*(C`use Thread;\*(C'\fR continues to be available when you
specify the \-Duse5005threads option to Configure, bugs and all.
.PP
.Vb 2
\&    NOTE: Support for threads continues to be an experimental feature.
\&    Interfaces and implementation are subject to sudden and drastic changes.
.Ve
.SS "New Configure flags"
.IX Subsection "New Configure flags"
The following new flags may be enabled on the Configure command line
by running Configure with \f(CW\*(C`\-Dflag\*(C'\fR.
.PP
.Vb 3
\&    usemultiplicity
\&    usethreads useithreads      (new interpreter threads: no Perl API yet)
\&    usethreads use5005threads   (threads as they were in 5.005)
\&
\&    use64bitint                 (equal to now deprecated \*(Aquse64bits\*(Aq)
\&    use64bitall
\&
\&    uselongdouble
\&    usemorebits
\&    uselargefiles
\&    usesocks                    (only SOCKS v5 supported)
.Ve
.SS "Threadedness and 64\-bitness now more daring"
.IX Subsection "Threadedness and 64-bitness now more daring"
The Configure options enabling the use of threads and the use of
64\-bitness are now more daring in the sense that they no more have an
explicit list of operating systems of known threads/64\-bit
capabilities.  In other words: if your operating system has the
necessary APIs and datatypes, you should be able just to go ahead and
use them, for threads by Configure \-Dusethreads, and for 64 bits
either explicitly by Configure \-Duse64bitint or implicitly if your
system has 64\-bit wide datatypes.  See also \*(L"64\-bit support\*(R".
.SS "Long Doubles"
.IX Subsection "Long Doubles"
Some platforms have \*(L"long doubles\*(R", floating point numbers of even
larger range than ordinary \*(L"doubles\*(R".  To enable using long doubles for
Perl's scalars, use \-Duselongdouble.
.SS "\-Dusemorebits"
.IX Subsection "-Dusemorebits"
You can enable both \-Duse64bitint and \-Duselongdouble with \-Dusemorebits.
See also \*(L"64\-bit support\*(R".
.SS "\-Duselargefiles"
.IX Subsection "-Duselargefiles"
Some platforms support system APIs that are capable of handling large files
(typically, files larger than two gigabytes).  Perl will try to use these
APIs if you ask for \-Duselargefiles.
.PP
See \*(L"Large file support\*(R" for more information.
.SS "installusrbinperl"
.IX Subsection "installusrbinperl"
You can use \*(L"Configure \-Uinstallusrbinperl\*(R" which causes installperl
to skip installing perl also as /usr/bin/perl.  This is useful if you
prefer not to modify /usr/bin for some reason or another but harmful
because many scripts assume to find Perl in /usr/bin/perl.
.SS "\s-1SOCKS\s0 support"
.IX Subsection "SOCKS support"
You can use \*(L"Configure \-Dusesocks\*(R" which causes Perl to probe
for the \s-1SOCKS\s0 proxy protocol library (v5, not v4).  For more information
on \s-1SOCKS,\s0 see:
.PP
.Vb 1
\&    http://www.socks.nec.com/
.Ve
.ie n .SS """\-A"" flag"
.el .SS "\f(CW\-A\fP flag"
.IX Subsection "-A flag"
You can \*(L"post-edit\*(R" the Configure variables using the Configure \f(CW\*(C`\-A\*(C'\fR
switch.  The editing happens immediately after the platform specific
hints files have been processed but before the actual configuration
process starts.  Run \f(CW\*(C`Configure \-h\*(C'\fR to find out the full \f(CW\*(C`\-A\*(C'\fR syntax.
.SS "Enhanced Installation Directories"
.IX Subsection "Enhanced Installation Directories"
The installation structure has been enriched to improve the support
for maintaining multiple versions of perl, to provide locations for
vendor-supplied modules, scripts, and manpages, and to ease maintenance
of locally-added modules, scripts, and manpages.  See the section on
Installation Directories in the \s-1INSTALL\s0 file for complete details.
For most users building and installing from source, the defaults should
be fine.
.PP
If you previously used \f(CW\*(C`Configure \-Dsitelib\*(C'\fR or \f(CW\*(C`\-Dsitearch\*(C'\fR to set
special values for library directories, you might wish to consider using
the new \f(CW\*(C`\-Dsiteprefix\*(C'\fR setting instead.  Also, if you wish to re-use a
config.sh file from an earlier version of perl, you should be sure to
check that Configure makes sensible choices for the new directories.
See \s-1INSTALL\s0 for complete details.
.SH "Platform specific changes"
.IX Header "Platform specific changes"
.SS "Supported platforms"
.IX Subsection "Supported platforms"
.IP "\(bu" 4
The Mach CThreads (\s-1NEXTSTEP, OPENSTEP\s0) are now supported by the Thread
extension.
.IP "\(bu" 4
GNU/Hurd is now supported.
.IP "\(bu" 4
Rhapsody/Darwin is now supported.
.IP "\(bu" 4
\&\s-1EPOC\s0 is now supported (on Psion 5).
.IP "\(bu" 4
The cygwin port (formerly cygwin32) has been greatly improved.
.SS "\s-1DOS\s0"
.IX Subsection "DOS"
.IP "\(bu" 4
Perl now works with djgpp 2.02 (and 2.03 alpha).
.IP "\(bu" 4
Environment variable names are not converted to uppercase any more.
.IP "\(bu" 4
Incorrect exit codes from backticks have been fixed.
.IP "\(bu" 4
This port continues to use its own builtin globbing (not File::Glob).
.SS "\s-1OS390 \s0(OpenEdition \s-1MVS\s0)"
.IX Subsection "OS390 (OpenEdition MVS)"
Support for this \s-1EBCDIC\s0 platform has not been renewed in this release.
There are difficulties in reconciling Perl's standardization on \s-1UTF\-8\s0
as its internal representation for characters with the \s-1EBCDIC\s0 character
set, because the two are incompatible.
.PP
It is unclear whether future versions will renew support for this
platform, but the possibility exists.
.SS "\s-1VMS\s0"
.IX Subsection "VMS"
Numerous revisions and extensions to configuration, build, testing, and
installation process to accommodate core changes and VMS-specific options.
.PP
Expand \f(CW%ENV\fR\-handling code to allow runtime mapping to logical names,
\&\s-1CLI\s0 symbols, and \s-1CRTL\s0 environ array.
.PP
Extension of subprocess invocation code to accept filespecs as command
\&\*(L"verbs\*(R".
.PP
Add to Perl command line processing the ability to use default file types and
to recognize Unix-style \f(CW\*(C`2>&1\*(C'\fR.
.PP
Expansion of File::Spec::VMS routines, and integration into ExtUtils::MM_VMS.
.PP
Extension of ExtUtils::MM_VMS to handle complex extensions more flexibly.
.PP
Barewords at start of Unix-syntax paths may be treated as text rather than
only as logical names.
.PP
Optional secure translation of several logical names used internally by Perl.
.PP
Miscellaneous bugfixing and porting of new core code to \s-1VMS.\s0
.PP
Thanks are gladly extended to the many people who have contributed \s-1VMS\s0
patches, testing, and ideas.
.SS "Win32"
.IX Subsection "Win32"
Perl can now emulate \fIfork()\fR internally, using multiple interpreters running
in different concurrent threads.  This support must be enabled at build
time.  See perlfork for detailed information.
.PP
When given a pathname that consists only of a drivename, such as \f(CW\*(C`A:\*(C'\fR,
\&\fIopendir()\fR and \fIstat()\fR now use the current working directory for the drive
rather than the drive root.
.PP
The builtin \s-1XSUB\s0 functions in the Win32:: namespace are documented.  See
Win32.
.PP
$^X now contains the full path name of the running executable.
.PP
A \fIWin32::GetLongPathName()\fR function is provided to complement
\&\fIWin32::GetFullPathName()\fR and \fIWin32::GetShortPathName()\fR.  See Win32.
.PP
\&\fIPOSIX::uname()\fR is supported.
.PP
system(1,...) now returns true process IDs rather than process
handles.  \fIkill()\fR accepts any real process id, rather than strictly
return values from system(1,...).
.PP
For better compatibility with Unix, \f(CW\*(C`kill(0, $pid)\*(C'\fR can now be used to
test whether a process exists.
.PP
The \f(CW\*(C`Shell\*(C'\fR module is supported.
.PP
Better support for building Perl under command.com in Windows 95
has been added.
.PP
Scripts are read in binary mode by default to allow ByteLoader (and
the filter mechanism in general) to work properly.  For compatibility,
the \s-1DATA\s0 filehandle will be set to text mode if a carriage return is
detected at the end of the line containing the _\|_END_\|_ or _\|_DATA_\|_
token; if not, the \s-1DATA\s0 filehandle will be left open in binary mode.
Earlier versions always opened the \s-1DATA\s0 filehandle in text mode.
.PP
The \fIglob()\fR operator is implemented via the \f(CW\*(C`File::Glob\*(C'\fR extension,
which supports glob syntax of the C shell.  This increases the flexibility
of the \fIglob()\fR operator, but there may be compatibility issues for
programs that relied on the older globbing syntax.  If you want to
preserve compatibility with the older syntax, you might want to run
perl with \f(CW\*(C`\-MFile::DosGlob\*(C'\fR.  For details and compatibility information,
see File::Glob.
.SH "Significant bug fixes"
.IX Header "Significant bug fixes"
.SS "<\s-1HANDLE\s0> on empty files"
.IX Subsection "<HANDLE> on empty files"
With \f(CW$/\fR set to \f(CW\*(C`undef\*(C'\fR, \*(L"slurping\*(R" an empty file returns a string of
zero length (instead of \f(CW\*(C`undef\*(C'\fR, as it used to) the first time the
\&\s-1HANDLE\s0 is read after \f(CW$/\fR is set to \f(CW\*(C`undef\*(C'\fR.  Further reads yield
\&\f(CW\*(C`undef\*(C'\fR.
.PP
This means that the following will append \*(L"foo\*(R" to an empty file (it used
to do nothing):
.PP
.Vb 1
\&    perl \-0777 \-pi \-e \*(Aqs/^/foo/\*(Aq empty_file
.Ve
.PP
The behaviour of:
.PP
.Vb 1
\&    perl \-pi \-e \*(Aqs/^/foo/\*(Aq empty_file
.Ve
.PP
is unchanged (it continues to leave the file empty).
.ie n .SS """eval \*(Aq...\*(Aq"" improvements"
.el .SS "\f(CWeval \*(Aq...\*(Aq\fP improvements"
.IX Subsection "eval ... improvements"
Line numbers (as reflected by \fIcaller()\fR and most diagnostics) within
\&\f(CW\*(C`eval \*(Aq...\*(Aq\*(C'\fR were often incorrect where here documents were involved.
This has been corrected.
.PP
Lexical lookups for variables appearing in \f(CW\*(C`eval \*(Aq...\*(Aq\*(C'\fR within
functions that were themselves called within an \f(CW\*(C`eval \*(Aq...\*(Aq\*(C'\fR were
searching the wrong place for lexicals.  The lexical search now
correctly ends at the subroutine's block boundary.
.PP
The use of \f(CW\*(C`return\*(C'\fR within \f(CW\*(C`eval {...}\*(C'\fR caused $@ not to be reset
correctly when no exception occurred within the eval.  This has
been fixed.
.PP
Parsing of here documents used to be flawed when they appeared as
the replacement expression in \f(CW\*(C`eval \*(Aqs/.../.../e\*(Aq\*(C'\fR.  This has
been fixed.
.SS "All compilation errors are true errors"
.IX Subsection "All compilation errors are true errors"
Some \*(L"errors\*(R" encountered at compile time were by necessity 
generated as warnings followed by eventual termination of the
program.  This enabled more such errors to be reported in a
single run, rather than causing a hard stop at the first error
that was encountered.
.PP
The mechanism for reporting such errors has been reimplemented
to queue compile-time errors and report them at the end of the
compilation as true errors rather than as warnings.  This fixes
cases where error messages leaked through in the form of warnings
when code was compiled at run time using \f(CW\*(C`eval STRING\*(C'\fR, and
also allows such errors to be reliably trapped using \f(CW\*(C`eval "..."\*(C'\fR.
.SS "Implicitly closed filehandles are safer"
.IX Subsection "Implicitly closed filehandles are safer"
Sometimes implicitly closed filehandles (as when they are localized,
and Perl automatically closes them on exiting the scope) could
inadvertently set $? or $!.  This has been corrected.
.SS "Behavior of list slices is more consistent"
.IX Subsection "Behavior of list slices is more consistent"
When taking a slice of a literal list (as opposed to a slice of
an array or hash), Perl used to return an empty list if the
result happened to be composed of all undef values.
.PP
The new behavior is to produce an empty list if (and only if)
the original list was empty.  Consider the following example:
.PP
.Vb 1
\&    @a = (1,undef,undef,2)[2,1,2];
.Ve
.PP
The old behavior would have resulted in \f(CW@a\fR having no elements.
The new behavior ensures it has three undefined elements.
.PP
Note in particular that the behavior of slices of the following
cases remains unchanged:
.PP
.Vb 5
\&    @a = ()[1,2];
\&    @a = (getpwent)[7,0];
\&    @a = (anything_returning_empty_list())[2,1,2];
\&    @a = @b[2,1,2];
\&    @a = @c{\*(Aqa\*(Aq,\*(Aqb\*(Aq,\*(Aqc\*(Aq};
.Ve
.PP
See perldata.
.ie n .SS """(\e$)"" prototype and $foo{a}"
.el .SS "\f(CW(\e$)\fP prototype and \f(CW$foo{a}\fP"
.IX Subsection "($) prototype and $foo{a}"
A scalar reference prototype now correctly allows a hash or
array element in that slot.
.ie n .SS """goto &sub"" and \s-1AUTOLOAD\s0"
.el .SS "\f(CWgoto &sub\fP and \s-1AUTOLOAD\s0"
.IX Subsection "goto &sub and AUTOLOAD"
The \f(CW\*(C`goto &sub\*(C'\fR construct works correctly when \f(CW&sub\fR happens
to be autoloaded.
.ie n .SS """\-bareword"" allowed under ""use integer"""
.el .SS "\f(CW\-bareword\fP allowed under \f(CWuse integer\fP"
.IX Subsection "-bareword allowed under use integer"
The autoquoting of barewords preceded by \f(CW\*(C`\-\*(C'\fR did not work
in prior versions when the \f(CW\*(C`integer\*(C'\fR pragma was enabled.
This has been fixed.
.SS "Failures in \s-1\fIDESTROY\s0()\fP"
.IX Subsection "Failures in DESTROY()"
When code in a destructor threw an exception, it went unnoticed
in earlier versions of Perl, unless someone happened to be
looking in $@ just after the point the destructor happened to
run.  Such failures are now visible as warnings when warnings are
enabled.
.SS "Locale bugs fixed"
.IX Subsection "Locale bugs fixed"
\&\fIprintf()\fR and \fIsprintf()\fR previously reset the numeric locale
back to the default \*(L"C\*(R" locale.  This has been fixed.
.PP
Numbers formatted according to the local numeric locale
(such as using a decimal comma instead of a decimal dot) caused
\&\*(L"isn't numeric\*(R" warnings, even while the operations accessing
those numbers produced correct results.  These warnings have been
discontinued.
.SS "Memory leaks"
.IX Subsection "Memory leaks"
The \f(CW\*(C`eval \*(Aqreturn sub {...}\*(Aq\*(C'\fR construct could sometimes leak
memory.  This has been fixed.
.PP
Operations that aren't filehandle constructors used to leak memory
when used on invalid filehandles.  This has been fixed.
.PP
Constructs that modified \f(CW@_\fR could fail to deallocate values
in \f(CW@_\fR and thus leak memory.  This has been corrected.
.SS "Spurious subroutine stubs after failed subroutine calls"
.IX Subsection "Spurious subroutine stubs after failed subroutine calls"
Perl could sometimes create empty subroutine stubs when a
subroutine was not found in the package.  Such cases stopped
later method lookups from progressing into base packages.
This has been corrected.
.ie n .SS "Taint failures under ""\-U"""
.el .SS "Taint failures under \f(CW\-U\fP"
.IX Subsection "Taint failures under -U"
When running in unsafe mode, taint violations could sometimes
cause silent failures.  This has been fixed.
.ie n .SS "\s-1END\s0 blocks and the ""\-c"" switch"
.el .SS "\s-1END\s0 blocks and the \f(CW\-c\fP switch"
.IX Subsection "END blocks and the -c switch"
Prior versions used to run \s-1BEGIN \s0\fBand\fR \s-1END\s0 blocks when Perl was
run in compile-only mode.  Since this is typically not the expected
behavior, \s-1END\s0 blocks are not executed anymore when the \f(CW\*(C`\-c\*(C'\fR switch
is used, or if compilation fails.
.PP
See \*(L"Support for \s-1CHECK\s0 blocks\*(R" for how to run things when the compile 
phase ends.
.SS "Potential to leak \s-1DATA\s0 filehandles"
.IX Subsection "Potential to leak DATA filehandles"
Using the \f(CW\*(C`_\|_DATA_\|_\*(C'\fR token creates an implicit filehandle to
the file that contains the token.  It is the program's
responsibility to close it when it is done reading from it.
.PP
This caveat is now better explained in the documentation.
See perldata.
.SH "New or Changed Diagnostics"
.IX Header "New or Changed Diagnostics"
.ie n .IP """%s"" variable %s masks earlier declaration in same %s" 4
.el .IP "``%s'' variable \f(CW%s\fR masks earlier declaration in same \f(CW%s\fR" 4
.IX Item "%s variable %s masks earlier declaration in same %s"
(W misc) A \*(L"my\*(R" or \*(L"our\*(R" variable has been redeclared in the current scope or statement,
effectively eliminating all access to the previous instance.  This is almost
always a typographical error.  Note that the earlier variable will still exist
until the end of the scope or until all closure referents to it are
destroyed.
.ie n .IP """my sub"" not yet implemented" 4
.el .IP "``my sub'' not yet implemented" 4
.IX Item "my sub not yet implemented"
(F) Lexically scoped subroutines are not yet implemented.  Don't try that
yet.
.ie n .IP """our"" variable %s redeclared" 4
.el .IP "``our'' variable \f(CW%s\fR redeclared" 4
.IX Item "our variable %s redeclared"
(W misc) You seem to have already declared the same global once before in the
current lexical scope.
.ie n .IP "'!' allowed only after types %s" 4
.el .IP "'!' allowed only after types \f(CW%s\fR" 4
.IX Item "'!' allowed only after types %s"
(F) The '!' is allowed in \fIpack()\fR and \fIunpack()\fR only after certain types.
See \*(L"pack\*(R" in perlfunc.
.IP "/ cannot take a count" 4
.IX Item "/ cannot take a count"
(F) You had an unpack template indicating a counted-length string,
but you have also specified an explicit size for the string.
See \*(L"pack\*(R" in perlfunc.
.IP "/ must be followed by a, A or Z" 4
.IX Item "/ must be followed by a, A or Z"
(F) You had an unpack template indicating a counted-length string,
which must be followed by one of the letters a, A or Z
to indicate what sort of string is to be unpacked.
See \*(L"pack\*(R" in perlfunc.
.IP "/ must be followed by a*, A* or Z*" 4
.IX Item "/ must be followed by a*, A* or Z*"
(F) You had a pack template indicating a counted-length string,
Currently the only things that can have their length counted are a*, A* or Z*.
See \*(L"pack\*(R" in perlfunc.
.IP "/ must follow a numeric type" 4
.IX Item "/ must follow a numeric type"
(F) You had an unpack template that contained a '#',
but this did not follow some numeric unpack specification.
See \*(L"pack\*(R" in perlfunc.
.IP "/%s/: Unrecognized escape \e\e%c passed through" 4
.IX Item "/%s/: Unrecognized escape %c passed through"
(W regexp) You used a backslash-character combination which is not recognized
by Perl.  This combination appears in an interpolated variable or a
\&\f(CW\*(C`\*(Aq\*(C'\fR\-delimited regular expression.  The character was understood literally.
.IP "/%s/: Unrecognized escape \e\e%c in character class passed through" 4
.IX Item "/%s/: Unrecognized escape %c in character class passed through"
(W regexp) You used a backslash-character combination which is not recognized
by Perl inside character classes.  The character was understood literally.
.ie n .IP "/%s/ should probably be written as ""%s""" 4
.el .IP "/%s/ should probably be written as ``%s''" 4
.IX Item "/%s/ should probably be written as %s"
(W syntax) You have used a pattern where Perl expected to find a string,
as in the first argument to \f(CW\*(C`join\*(C'\fR.  Perl will treat the true
or false result of matching the pattern against \f(CW$_\fR as the string,
which is probably not what you had in mind.
.IP "%s() called too early to check prototype" 4
.IX Item "%s() called too early to check prototype"
(W prototype) You've called a function that has a prototype before the parser saw a
definition or declaration for it, and Perl could not check that the call
conforms to the prototype.  You need to either add an early prototype
declaration for the subroutine in question, or move the subroutine
definition ahead of the call to get proper prototype checking.  Alternatively,
if you are certain that you're calling the function correctly, you may put
an ampersand before the name to avoid the warning.  See perlsub.
.ie n .IP "%s argument is not a \s-1HASH\s0 or \s-1ARRAY\s0 element" 4
.el .IP "\f(CW%s\fR argument is not a \s-1HASH\s0 or \s-1ARRAY\s0 element" 4
.IX Item "%s argument is not a HASH or ARRAY element"
(F) The argument to \fIexists()\fR must be a hash or array element, such as:
.Sp
.Vb 2
\&    $foo{$bar}
\&    $ref\->{"susie"}[12]
.Ve
.ie n .IP "%s argument is not a \s-1HASH\s0 or \s-1ARRAY\s0 element or slice" 4
.el .IP "\f(CW%s\fR argument is not a \s-1HASH\s0 or \s-1ARRAY\s0 element or slice" 4
.IX Item "%s argument is not a HASH or ARRAY element or slice"
(F) The argument to \fIdelete()\fR must be either a hash or array element, such as:
.Sp
.Vb 2
\&    $foo{$bar}
\&    $ref\->{"susie"}[12]
.Ve
.Sp
or a hash or array slice, such as:
.Sp
.Vb 2
\&    @foo[$bar, $baz, $xyzzy]
\&    @{$ref\->[12]}{"susie", "queue"}
.Ve
.ie n .IP "%s argument is not a subroutine name" 4
.el .IP "\f(CW%s\fR argument is not a subroutine name" 4
.IX Item "%s argument is not a subroutine name"
(F) The argument to \fIexists()\fR for \f(CW\*(C`exists &sub\*(C'\fR must be a subroutine
name, and not a subroutine call.  \f(CW\*(C`exists &sub()\*(C'\fR will generate this error.
.ie n .IP "%s package attribute may clash with future reserved word: %s" 4
.el .IP "\f(CW%s\fR package attribute may clash with future reserved word: \f(CW%s\fR" 4
.IX Item "%s package attribute may clash with future reserved word: %s"
(W reserved) A lowercase attribute name was used that had a package-specific handler.
That name might have a meaning to Perl itself some day, even though it
doesn't yet.  Perhaps you should use a mixed-case attribute name, instead.
See attributes.
.ie n .IP "(in cleanup) %s" 4
.el .IP "(in cleanup) \f(CW%s\fR" 4
.IX Item "(in cleanup) %s"
(W misc) This prefix usually indicates that a \s-1\fIDESTROY\s0()\fR method raised
the indicated exception.  Since destructors are usually called by
the system at arbitrary points during execution, and often a vast
number of times, the warning is issued only once for any number
of failures that would otherwise result in the same message being
repeated.
.Sp
Failure of user callbacks dispatched using the \f(CW\*(C`G_KEEPERR\*(C'\fR flag
could also result in this warning.  See \*(L"G_KEEPERR\*(R" in perlcall.
.IP "<> should be quotes" 4
.IX Item "<> should be quotes"
(F) You wrote \f(CW\*(C`require <file>\*(C'\fR when you should have written
\&\f(CW\*(C`require \*(Aqfile\*(Aq\*(C'\fR.
.IP "Attempt to join self" 4
.IX Item "Attempt to join self"
(F) You tried to join a thread from within itself, which is an
impossible task.  You may be joining the wrong thread, or you may
need to move the \fIjoin()\fR to some other thread.
.IP "Bad evalled substitution pattern" 4
.IX Item "Bad evalled substitution pattern"
(F) You've used the /e switch to evaluate the replacement for a
substitution, but perl found a syntax error in the code to evaluate,
most likely an unexpected right brace '}'.
.IP "Bad \fIrealloc()\fR ignored" 4
.IX Item "Bad realloc() ignored"
(S) An internal routine called \fIrealloc()\fR on something that had never been
\&\fImalloc()\fRed in the first place. Mandatory, but can be disabled by
setting environment variable \f(CW\*(C`PERL_BADFREE\*(C'\fR to 1.
.IP "Bareword found in conditional" 4
.IX Item "Bareword found in conditional"
(W bareword) The compiler found a bareword where it expected a conditional,
which often indicates that an || or && was parsed as part of the
last argument of the previous construct, for example:
.Sp
.Vb 1
\&    open FOO || die;
.Ve
.Sp
It may also indicate a misspelled constant that has been interpreted
as a bareword:
.Sp
.Vb 2
\&    use constant TYPO => 1;
\&    if (TYOP) { print "foo" }
.Ve
.Sp
The \f(CW\*(C`strict\*(C'\fR pragma is useful in avoiding such errors.
.IP "Binary number > 0b11111111111111111111111111111111 non-portable" 4
.IX Item "Binary number > 0b11111111111111111111111111111111 non-portable"
(W portable) The binary number you specified is larger than 2**32\-1
(4294967295) and therefore non-portable between systems.  See
perlport for more on portability concerns.
.IP "Bit vector size > 32 non-portable" 4
.IX Item "Bit vector size > 32 non-portable"
(W portable) Using bit vector sizes larger than 32 is non-portable.
.ie n .IP "Buffer overflow in prime_env_iter: %s" 4
.el .IP "Buffer overflow in prime_env_iter: \f(CW%s\fR" 4
.IX Item "Buffer overflow in prime_env_iter: %s"
(W internal) A warning peculiar to \s-1VMS. \s0 While Perl was preparing to iterate over
\&\f(CW%ENV\fR, it encountered a logical name or symbol definition which was too long,
so it was truncated to the string shown.
.ie n .IP "Can't check filesystem of script ""%s""" 4
.el .IP "Can't check filesystem of script ``%s''" 4
.IX Item "Can't check filesystem of script %s"
(P) For some reason you can't check the filesystem of the script for nosuid.
.ie n .IP "Can't declare class for non-scalar %s in ""%s""" 4
.el .IP "Can't declare class for non-scalar \f(CW%s\fR in ``%s''" 4
.IX Item "Can't declare class for non-scalar %s in %s"
(S) Currently, only scalar variables can declared with a specific class
qualifier in a \*(L"my\*(R" or \*(L"our\*(R" declaration.  The semantics may be extended
for other types of variables in future.
.ie n .IP "Can't declare %s in ""%s""" 4
.el .IP "Can't declare \f(CW%s\fR in ``%s''" 4
.IX Item "Can't declare %s in %s"
(F) Only scalar, array, and hash variables may be declared as \*(L"my\*(R" or
\&\*(L"our\*(R" variables.  They must have ordinary identifiers as names.
.IP "Can't ignore signal \s-1CHLD,\s0 forcing to default" 4
.IX Item "Can't ignore signal CHLD, forcing to default"
(W signal) Perl has detected that it is being run with the \s-1SIGCHLD\s0 signal
(sometimes known as \s-1SIGCLD\s0) disabled.  Since disabling this signal
will interfere with proper determination of exit status of child
processes, Perl has reset the signal to its default value.
This situation typically indicates that the parent program under
which Perl may be running (e.g., cron) is being very careless.
.IP "Can't modify non-lvalue subroutine call" 4
.IX Item "Can't modify non-lvalue subroutine call"
(F) Subroutines meant to be used in lvalue context should be declared as
such, see \*(L"Lvalue subroutines\*(R" in perlsub.
.IP "Can't read \s-1CRTL\s0 environ" 4
.IX Item "Can't read CRTL environ"
(S) A warning peculiar to \s-1VMS. \s0 Perl tried to read an element of \f(CW%ENV\fR
from the \s-1CRTL\s0's internal environment array and discovered the array was
missing.  You need to figure out where your \s-1CRTL\s0 misplaced its environ
or define \fI\s-1PERL_ENV_TABLES\s0\fR (see perlvms) so that environ is not searched.
.ie n .IP "Can't remove %s: %s, skipping file" 4
.el .IP "Can't remove \f(CW%s:\fR \f(CW%s\fR, skipping file" 4
.IX Item "Can't remove %s: %s, skipping file"
(S) You requested an inplace edit without creating a backup file.  Perl
was unable to remove the original file to replace it with the modified
file.  The file was left unmodified.
.ie n .IP "Can't return %s from lvalue subroutine" 4
.el .IP "Can't return \f(CW%s\fR from lvalue subroutine" 4
.IX Item "Can't return %s from lvalue subroutine"
(F) Perl detected an attempt to return illegal lvalues (such
as temporary or readonly values) from a subroutine used as an lvalue.
This is not allowed.
.IP "Can't weaken a nonreference" 4
.IX Item "Can't weaken a nonreference"
(F) You attempted to weaken something that was not a reference.  Only
references can be weakened.
.IP "Character class [:%s:] unknown" 4
.IX Item "Character class [:%s:] unknown"
(F) The class in the character class [: :] syntax is unknown.
See perlre.
.IP "Character class syntax [%s] belongs inside character classes" 4
.IX Item "Character class syntax [%s] belongs inside character classes"
(W unsafe) The character class constructs [: :], [= =], and [. .]  go
\&\fIinside\fR character classes, the [] are part of the construct,
for example: /[012[:alpha:]345]/.  Note that [= =] and [. .]
are not currently implemented; they are simply placeholders for
future extensions.
.ie n .IP "Constant is not %s reference" 4
.el .IP "Constant is not \f(CW%s\fR reference" 4
.IX Item "Constant is not %s reference"
(F) A constant value (perhaps declared using the \f(CW\*(C`use constant\*(C'\fR pragma)
is being dereferenced, but it amounts to the wrong type of reference.  The
message indicates the type of reference that was expected. This usually
indicates a syntax error in dereferencing the constant value.
See \*(L"Constant Functions\*(R" in perlsub and constant.
.ie n .IP "constant(%s): %s" 4
.el .IP "constant(%s): \f(CW%s\fR" 4
.IX Item "constant(%s): %s"
(F) The parser found inconsistencies either while attempting to define an
overloaded constant, or when trying to find the character name specified
in the \f(CW\*(C`\eN{...}\*(C'\fR escape.  Perhaps you forgot to load the corresponding
\&\f(CW\*(C`overload\*(C'\fR or \f(CW\*(C`charnames\*(C'\fR pragma?  See charnames and overload.
.IP "CORE::%s is not a keyword" 4
.IX Item "CORE::%s is not a keyword"
(F) The \s-1CORE::\s0 namespace is reserved for Perl keywords.
.IP "defined(@array) is deprecated" 4
.IX Item "defined(@array) is deprecated"
(D) \fIdefined()\fR is not usually useful on arrays because it checks for an
undefined \fIscalar\fR value.  If you want to see if the array is empty,
just use \f(CW\*(C`if (@array) { # not empty }\*(C'\fR for example.
.IP "defined(%hash) is deprecated" 4
.IX Item "defined(%hash) is deprecated"
(D) \fIdefined()\fR is not usually useful on hashes because it checks for an
undefined \fIscalar\fR value.  If you want to see if the hash is empty,
just use \f(CW\*(C`if (%hash) { # not empty }\*(C'\fR for example.
.IP "Did not produce a valid header" 4
.IX Item "Did not produce a valid header"
See Server error.
.ie n .IP "(Did you mean ""local"" instead of ""our""?)" 4
.el .IP "(Did you mean ``local'' instead of ``our''?)" 4
.IX Item "(Did you mean local instead of our?)"
(W misc) Remember that \*(L"our\*(R" does not localize the declared global variable.
You have declared it again in the same lexical scope, which seems superfluous.
.IP "Document contains no data" 4
.IX Item "Document contains no data"
See Server error.
.ie n .IP "entering effective %s failed" 4
.el .IP "entering effective \f(CW%s\fR failed" 4
.IX Item "entering effective %s failed"
(F) While under the \f(CW\*(C`use filetest\*(C'\fR pragma, switching the real and
effective uids or gids failed.
.ie n .IP "false [] range ""%s"" in regexp" 4
.el .IP "false [] range ``%s'' in regexp" 4
.IX Item "false [] range %s in regexp"
(W regexp) A character class range must start and end at a literal character, not
another character class like \f(CW\*(C`\ed\*(C'\fR or \f(CW\*(C`[:alpha:]\*(C'\fR.  The \*(L"\-\*(R" in your false
range is interpreted as a literal \*(L"\-\*(R".  Consider quoting the \*(L"\-\*(R",  \*(L"\e\-\*(R".
See perlre.
.ie n .IP "Filehandle %s opened only for output" 4
.el .IP "Filehandle \f(CW%s\fR opened only for output" 4
.IX Item "Filehandle %s opened only for output"
(W io) You tried to read from a filehandle opened only for writing.  If you
intended it to be a read/write filehandle, you needed to open it with
\&\*(L"+<\*(R" or \*(L"+>\*(R" or \*(L"+>>\*(R" instead of with \*(L"<\*(R" or nothing.  If
you intended only to read from the file, use \*(L"<\*(R".  See
\&\*(L"open\*(R" in perlfunc.
.ie n .IP "\fIflock()\fR on closed filehandle %s" 4
.el .IP "\fIflock()\fR on closed filehandle \f(CW%s\fR" 4
.IX Item "flock() on closed filehandle %s"
(W closed) The filehandle you're attempting to \fIflock()\fR got itself closed some
time before now.  Check your logic flow.  \fIflock()\fR operates on filehandles.
Are you attempting to call \fIflock()\fR on a dirhandle by the same name?
.ie n .IP "Global symbol ""%s"" requires explicit package name" 4
.el .IP "Global symbol ``%s'' requires explicit package name" 4
.IX Item "Global symbol %s requires explicit package name"
(F) You've said \*(L"use strict vars\*(R", which indicates that all variables
must either be lexically scoped (using \*(L"my\*(R"), declared beforehand using
\&\*(L"our\*(R", or explicitly qualified to say which package the global variable
is in (using \*(L"::\*(R").
.IP "Hexadecimal number > 0xffffffff non-portable" 4
.IX Item "Hexadecimal number > 0xffffffff non-portable"
(W portable) The hexadecimal number you specified is larger than 2**32\-1
(4294967295) and therefore non-portable between systems.  See
perlport for more on portability concerns.
.ie n .IP "Ill-formed \s-1CRTL\s0 environ value ""%s""" 4
.el .IP "Ill-formed \s-1CRTL\s0 environ value ``%s''" 4
.IX Item "Ill-formed CRTL environ value %s"
(W internal) A warning peculiar to \s-1VMS. \s0 Perl tried to read the \s-1CRTL\s0's internal
environ array, and encountered an element without the \f(CW\*(C`=\*(C'\fR delimiter
used to separate keys from values.  The element is ignored.
.IP "Ill-formed message in prime_env_iter: |%s|" 4
.IX Item "Ill-formed message in prime_env_iter: |%s|"
(W internal) A warning peculiar to \s-1VMS. \s0 Perl tried to read a logical name
or \s-1CLI\s0 symbol definition when preparing to iterate over \f(CW%ENV\fR, and
didn't see the expected delimiter between key and value, so the
line was ignored.
.ie n .IP "Illegal binary digit %s" 4
.el .IP "Illegal binary digit \f(CW%s\fR" 4
.IX Item "Illegal binary digit %s"
(F) You used a digit other than 0 or 1 in a binary number.
.ie n .IP "Illegal binary digit %s ignored" 4
.el .IP "Illegal binary digit \f(CW%s\fR ignored" 4
.IX Item "Illegal binary digit %s ignored"
(W digit) You may have tried to use a digit other than 0 or 1 in a binary number.
Interpretation of the binary number stopped before the offending digit.
.IP "Illegal number of bits in vec" 4
.IX Item "Illegal number of bits in vec"
(F) The number of bits in \fIvec()\fR (the third argument) must be a power of
two from 1 to 32 (or 64, if your platform supports that).
.ie n .IP "Integer overflow in %s number" 4
.el .IP "Integer overflow in \f(CW%s\fR number" 4
.IX Item "Integer overflow in %s number"
(W overflow) The hexadecimal, octal or binary number you have specified either
as a literal or as an argument to \fIhex()\fR or \fIoct()\fR is too big for your
architecture, and has been converted to a floating point number.  On a
32\-bit architecture the largest hexadecimal, octal or binary number
representable without overflow is 0xFFFFFFFF, 037777777777, or
0b11111111111111111111111111111111 respectively.  Note that Perl
transparently promotes all numbers to a floating point representation
internally\*(--subject to loss of precision errors in subsequent
operations.
.ie n .IP "Invalid %s attribute: %s" 4
.el .IP "Invalid \f(CW%s\fR attribute: \f(CW%s\fR" 4
.IX Item "Invalid %s attribute: %s"
The indicated attribute for a subroutine or variable was not recognized
by Perl or by a user-supplied handler.  See attributes.
.ie n .IP "Invalid %s attributes: %s" 4
.el .IP "Invalid \f(CW%s\fR attributes: \f(CW%s\fR" 4
.IX Item "Invalid %s attributes: %s"
The indicated attributes for a subroutine or variable were not recognized
by Perl or by a user-supplied handler.  See attributes.
.ie n .IP "invalid [] range ""%s"" in regexp" 4
.el .IP "invalid [] range ``%s'' in regexp" 4
.IX Item "invalid [] range %s in regexp"
The offending range is now explicitly displayed.
.ie n .IP "Invalid separator character %s in attribute list" 4
.el .IP "Invalid separator character \f(CW%s\fR in attribute list" 4
.IX Item "Invalid separator character %s in attribute list"
(F) Something other than a colon or whitespace was seen between the
elements of an attribute list.  If the previous attribute
had a parenthesised parameter list, perhaps that list was terminated
too soon.  See attributes.
.ie n .IP "Invalid separator character %s in subroutine attribute list" 4
.el .IP "Invalid separator character \f(CW%s\fR in subroutine attribute list" 4
.IX Item "Invalid separator character %s in subroutine attribute list"
(F) Something other than a colon or whitespace was seen between the
elements of a subroutine attribute list.  If the previous attribute
had a parenthesised parameter list, perhaps that list was terminated
too soon.
.ie n .IP "leaving effective %s failed" 4
.el .IP "leaving effective \f(CW%s\fR failed" 4
.IX Item "leaving effective %s failed"
(F) While under the \f(CW\*(C`use filetest\*(C'\fR pragma, switching the real and
effective uids or gids failed.
.ie n .IP "Lvalue subs returning %s not implemented yet" 4
.el .IP "Lvalue subs returning \f(CW%s\fR not implemented yet" 4
.IX Item "Lvalue subs returning %s not implemented yet"
(F) Due to limitations in the current implementation, array and hash
values cannot be returned in subroutines used in lvalue context.
See \*(L"Lvalue subroutines\*(R" in perlsub.
.ie n .IP "Method %s not permitted" 4
.el .IP "Method \f(CW%s\fR not permitted" 4
.IX Item "Method %s not permitted"
See Server error.
.ie n .IP "Missing %sbrace%s on \eN{}" 4
.el .IP "Missing \f(CW%sbrace\fR%s on \eN{}" 4
.IX Item "Missing %sbrace%s on N{}"
(F) Wrong syntax of character name literal \f(CW\*(C`\eN{charname}\*(C'\fR within
double-quotish context.
.IP "Missing command in piped open" 4
.IX Item "Missing command in piped open"
(W pipe) You used the \f(CW\*(C`open(FH, "| command")\*(C'\fR or \f(CW\*(C`open(FH, "command |")\*(C'\fR
construction, but the command was missing or blank.
.ie n .IP "Missing name in ""my sub""" 4
.el .IP "Missing name in ``my sub''" 4
.IX Item "Missing name in my sub"
(F) The reserved syntax for lexically scoped subroutines requires that they
have a name with which they can be found.
.ie n .IP "No %s specified for \-%c" 4
.el .IP "No \f(CW%s\fR specified for \-%c" 4
.IX Item "No %s specified for -%c"
(F) The indicated command line switch needs a mandatory argument, but
you haven't specified one.
.ie n .IP "No package name allowed for variable %s in ""our""" 4
.el .IP "No package name allowed for variable \f(CW%s\fR in ``our''" 4
.IX Item "No package name allowed for variable %s in our"
(F) Fully qualified variable names are not allowed in \*(L"our\*(R" declarations,
because that doesn't make much sense under existing semantics.  Such
syntax is reserved for future extensions.
.IP "No space allowed after \-%c" 4
.IX Item "No space allowed after -%c"
(F) The argument to the indicated command line switch must follow immediately
after the switch, without intervening spaces.
.IP "no \s-1UTC\s0 offset information; assuming local time is \s-1UTC\s0" 4
.IX Item "no UTC offset information; assuming local time is UTC"
(S) A warning peculiar to \s-1VMS. \s0 Perl was unable to find the local
timezone offset, so it's assuming that local system time is equivalent
to \s-1UTC. \s0 If it's not, define the logical name \fI\s-1SYS$TIMEZONE_DIFFERENTIAL\s0\fR
to translate to the number of seconds which need to be added to \s-1UTC\s0 to
get local time.
.IP "Octal number > 037777777777 non-portable" 4
.IX Item "Octal number > 037777777777 non-portable"
(W portable) The octal number you specified is larger than 2**32\-1 (4294967295)
and therefore non-portable between systems.  See perlport for more
on portability concerns.
.Sp
See also perlport for writing portable code.
.IP "panic: del_backref" 4
.IX Item "panic: del_backref"
(P) Failed an internal consistency check while trying to reset a weak
reference.
.IP "panic: kid popen errno read" 4
.IX Item "panic: kid popen errno read"
(F) forked child returned an incomprehensible message about its errno.
.IP "panic: magic_killbackrefs" 4
.IX Item "panic: magic_killbackrefs"
(P) Failed an internal consistency check while trying to reset all weak
references to an object.
.ie n .IP "Parentheses missing around ""%s"" list" 4
.el .IP "Parentheses missing around ``%s'' list" 4
.IX Item "Parentheses missing around %s list"
(W parenthesis) You said something like
.Sp
.Vb 1
\&    my $foo, $bar = @_;
.Ve
.Sp
when you meant
.Sp
.Vb 1
\&    my ($foo, $bar) = @_;
.Ve
.Sp
Remember that \*(L"my\*(R", \*(L"our\*(R", and \*(L"local\*(R" bind tighter than comma.
.ie n .IP "Possible unintended interpolation of %s in string" 4
.el .IP "Possible unintended interpolation of \f(CW%s\fR in string" 4
.IX Item "Possible unintended interpolation of %s in string"
(W ambiguous) It used to be that Perl would try to guess whether you
wanted an array interpolated or a literal @.  It no longer does this;
arrays are now \fIalways\fR interpolated into strings.  This means that 
if you try something like:
.Sp
.Vb 1
\&        print "fred@example.com";
.Ve
.Sp
and the array \f(CW@example\fR doesn't exist, Perl is going to print
\&\f(CW\*(C`fred.com\*(C'\fR, which is probably not what you wanted.  To get a literal
\&\f(CW\*(C`@\*(C'\fR sign in a string, put a backslash before it, just as you would
to get a literal \f(CW\*(C`$\*(C'\fR sign.
.ie n .IP "Possible Y2K bug: %s" 4
.el .IP "Possible Y2K bug: \f(CW%s\fR" 4
.IX Item "Possible Y2K bug: %s"
(W y2k) You are concatenating the number 19 with another number, which
could be a potential Year 2000 problem.
.ie n .IP "pragma ""attrs"" is deprecated, use ""sub \s-1NAME : ATTRS""\s0 instead" 4
.el .IP "pragma ``attrs'' is deprecated, use ``sub \s-1NAME : ATTRS''\s0 instead" 4
.IX Item "pragma attrs is deprecated, use sub NAME : ATTRS instead"
(W deprecated) You have written something like this:
.Sp
.Vb 4
\&    sub doit
\&    {
\&        use attrs qw(locked);
\&    }
.Ve
.Sp
You should use the new declaration syntax instead.
.Sp
.Vb 3
\&    sub doit : locked
\&    {
\&        ...
.Ve
.Sp
The \f(CW\*(C`use attrs\*(C'\fR pragma is now obsolete, and is only provided for
backward-compatibility. See \*(L"Subroutine Attributes\*(R" in perlsub.
.IP "Premature end of script headers" 4
.IX Item "Premature end of script headers"
See Server error.
.IP "Repeat count in pack overflows" 4
.IX Item "Repeat count in pack overflows"
(F) You can't specify a repeat count so large that it overflows
your signed integers.  See \*(L"pack\*(R" in perlfunc.
.IP "Repeat count in unpack overflows" 4
.IX Item "Repeat count in unpack overflows"
(F) You can't specify a repeat count so large that it overflows
your signed integers.  See \*(L"unpack\*(R" in perlfunc.
.IP "\fIrealloc()\fR of freed memory ignored" 4
.IX Item "realloc() of freed memory ignored"
(S) An internal routine called \fIrealloc()\fR on something that had already
been freed.
.IP "Reference is already weak" 4
.IX Item "Reference is already weak"
(W misc) You have attempted to weaken a reference that is already weak.
Doing so has no effect.
.IP "setpgrp can't take arguments" 4
.IX Item "setpgrp can't take arguments"
(F) Your system has the \fIsetpgrp()\fR from \s-1BSD 4.2,\s0 which takes no arguments,
unlike \s-1POSIX\s0 \fIsetpgid()\fR, which takes a process \s-1ID\s0 and process group \s-1ID.\s0
.IP "Strange *+?{} on zero-length expression" 4
.IX Item "Strange *+?{} on zero-length expression"
(W regexp) You applied a regular expression quantifier in a place where it
makes no sense, such as on a zero-width assertion.
Try putting the quantifier inside the assertion instead.  For example,
the way to match \*(L"abc\*(R" provided that it is followed by three
repetitions of \*(L"xyz\*(R" is \f(CW\*(C`/abc(?=(?:xyz){3})/\*(C'\fR, not \f(CW\*(C`/abc(?=xyz){3}/\*(C'\fR.
.ie n .IP "switching effective %s is not implemented" 4
.el .IP "switching effective \f(CW%s\fR is not implemented" 4
.IX Item "switching effective %s is not implemented"
(F) While under the \f(CW\*(C`use filetest\*(C'\fR pragma, we cannot switch the
real and effective uids or gids.
.IP "This Perl can't reset \s-1CRTL\s0 environ elements (%s)" 4
.IX Item "This Perl can't reset CRTL environ elements (%s)"
.PD 0
.IP "This Perl can't set \s-1CRTL\s0 environ elements (%s=%s)" 4
.IX Item "This Perl can't set CRTL environ elements (%s=%s)"
.PD
(W internal) Warnings peculiar to \s-1VMS. \s0 You tried to change or delete an element
of the \s-1CRTL\s0's internal environ array, but your copy of Perl wasn't
built with a \s-1CRTL\s0 that contained the \fIsetenv()\fR function.  You'll need to
rebuild Perl with a \s-1CRTL\s0 that does, or redefine \fI\s-1PERL_ENV_TABLES\s0\fR (see
perlvms) so that the environ array isn't the target of the change to
\&\f(CW%ENV\fR which produced the warning.
.ie n .IP "Too late to run %s block" 4
.el .IP "Too late to run \f(CW%s\fR block" 4
.IX Item "Too late to run %s block"
(W void) A \s-1CHECK\s0 or \s-1INIT\s0 block is being defined during run time proper,
when the opportunity to run them has already passed.  Perhaps you are
loading a file with \f(CW\*(C`require\*(C'\fR or \f(CW\*(C`do\*(C'\fR when you should be using
\&\f(CW\*(C`use\*(C'\fR instead.  Or perhaps you should put the \f(CW\*(C`require\*(C'\fR or \f(CW\*(C`do\*(C'\fR
inside a \s-1BEGIN\s0 block.
.IP "Unknown \fIopen()\fR mode '%s'" 4
.IX Item "Unknown open() mode '%s'"
(F) The second argument of 3\-argument \fIopen()\fR is not among the list
of valid modes: \f(CW\*(C`<\*(C'\fR, \f(CW\*(C`>\*(C'\fR, \f(CW\*(C`>>\*(C'\fR, \f(CW\*(C`+<\*(C'\fR,
\&\f(CW\*(C`+>\*(C'\fR, \f(CW\*(C`+>>\*(C'\fR, \f(CW\*(C`\-|\*(C'\fR, \f(CW\*(C`|\-\*(C'\fR.
.ie n .IP "Unknown process %x sent message to prime_env_iter: %s" 4
.el .IP "Unknown process \f(CW%x\fR sent message to prime_env_iter: \f(CW%s\fR" 4
.IX Item "Unknown process %x sent message to prime_env_iter: %s"
(P) An error peculiar to \s-1VMS. \s0 Perl was reading values for \f(CW%ENV\fR before
iterating over it, and someone else stuck a message in the stream of
data Perl expected.  Someone's very confused, or perhaps trying to
subvert Perl's population of \f(CW%ENV\fR for nefarious purposes.
.IP "Unrecognized escape \e\e%c passed through" 4
.IX Item "Unrecognized escape %c passed through"
(W misc) You used a backslash-character combination which is not recognized
by Perl.  The character was understood literally.
.IP "Unterminated attribute parameter in attribute list" 4
.IX Item "Unterminated attribute parameter in attribute list"
(F) The lexer saw an opening (left) parenthesis character while parsing an
attribute list, but the matching closing (right) parenthesis
character was not found.  You may need to add (or remove) a backslash
character to get your parentheses to balance.  See attributes.
.IP "Unterminated attribute list" 4
.IX Item "Unterminated attribute list"
(F) The lexer found something other than a simple identifier at the start
of an attribute, and it wasn't a semicolon or the start of a
block.  Perhaps you terminated the parameter list of the previous attribute
too soon.  See attributes.
.IP "Unterminated attribute parameter in subroutine attribute list" 4
.IX Item "Unterminated attribute parameter in subroutine attribute list"
(F) The lexer saw an opening (left) parenthesis character while parsing a
subroutine attribute list, but the matching closing (right) parenthesis
character was not found.  You may need to add (or remove) a backslash
character to get your parentheses to balance.
.IP "Unterminated subroutine attribute list" 4
.IX Item "Unterminated subroutine attribute list"
(F) The lexer found something other than a simple identifier at the start
of a subroutine attribute, and it wasn't a semicolon or the start of a
block.  Perhaps you terminated the parameter list of the previous attribute
too soon.
.ie n .IP "Value of \s-1CLI\s0 symbol ""%s"" too long" 4
.el .IP "Value of \s-1CLI\s0 symbol ``%s'' too long" 4
.IX Item "Value of CLI symbol %s too long"
(W misc) A warning peculiar to \s-1VMS. \s0 Perl tried to read the value of an \f(CW%ENV\fR
element from a \s-1CLI\s0 symbol table, and found a resultant string longer
than 1024 characters.  The return value has been truncated to 1024
characters.
.IP "Version number must be a constant number" 4
.IX Item "Version number must be a constant number"
(P) The attempt to translate a \f(CW\*(C`use Module n.n LIST\*(C'\fR statement into
its equivalent \f(CW\*(C`BEGIN\*(C'\fR block found an internal inconsistency with
the version number.
.SH "New tests"
.IX Header "New tests"
.IP "lib/attrs" 4
.IX Item "lib/attrs"
Compatibility tests for \f(CW\*(C`sub : attrs\*(C'\fR vs the older \f(CW\*(C`use attrs\*(C'\fR.
.IP "lib/env" 4
.IX Item "lib/env"
Tests for new environment scalar capability (e.g., \f(CW\*(C`use Env qw($BAR);\*(C'\fR).
.IP "lib/env\-array" 4
.IX Item "lib/env-array"
Tests for new environment array capability (e.g., \f(CW\*(C`use Env qw(@PATH);\*(C'\fR).
.IP "lib/io_const" 4
.IX Item "lib/io_const"
\&\s-1IO\s0 constants (SEEK_*, _IO*).
.IP "lib/io_dir" 4
.IX Item "lib/io_dir"
Directory-related \s-1IO\s0 methods (new, read, close, rewind, tied delete).
.IP "lib/io_multihomed" 4
.IX Item "lib/io_multihomed"
\&\s-1INET\s0 sockets with multi-homed hosts.
.IP "lib/io_poll" 4
.IX Item "lib/io_poll"
\&\s-1IO\s0 \fIpoll()\fR.
.IP "lib/io_unix" 4
.IX Item "lib/io_unix"
\&\s-1UNIX\s0 sockets.
.IP "op/attrs" 4
.IX Item "op/attrs"
Regression tests for \f(CW\*(C`my ($x,@y,%z) : attrs\*(C'\fR and <sub : attrs>.
.IP "op/filetest" 4
.IX Item "op/filetest"
File test operators.
.IP "op/lex_assign" 4
.IX Item "op/lex_assign"
Verify operations that access pad objects (lexicals and temporaries).
.IP "op/exists_sub" 4
.IX Item "op/exists_sub"
Verify \f(CW\*(C`exists &sub\*(C'\fR operations.
.SH "Incompatible Changes"
.IX Header "Incompatible Changes"
.SS "Perl Source Incompatibilities"
.IX Subsection "Perl Source Incompatibilities"
Beware that any new warnings that have been added or old ones
that have been enhanced are \fBnot\fR considered incompatible changes.
.PP
Since all new warnings must be explicitly requested via the \f(CW\*(C`\-w\*(C'\fR
switch or the \f(CW\*(C`warnings\*(C'\fR pragma, it is ultimately the programmer's
responsibility to ensure that warnings are enabled judiciously.
.IP "\s-1CHECK\s0 is a new keyword" 4
.IX Item "CHECK is a new keyword"
All subroutine definitions named \s-1CHECK\s0 are now special.  See
\&\f(CW\*(C`/"Support for CHECK blocks"\*(C'\fR for more information.
.IP "Treatment of list slices of undef has changed" 4
.IX Item "Treatment of list slices of undef has changed"
There is a potential incompatibility in the behavior of list slices
that are comprised entirely of undefined values.
See \*(L"Behavior of list slices is more consistent\*(R".
.ie n .IP "Format of $English::PERL_VERSION is different" 4
.el .IP "Format of \f(CW$English::PERL_VERSION\fR is different" 4
.IX Item "Format of $English::PERL_VERSION is different"
The English module now sets \f(CW$PERL_VERSION\fR to $^V (a string value) rather
than \f(CW$]\fR (a numeric value).  This is a potential incompatibility.
Send us a report via perlbug if you are affected by this.
.Sp
See \*(L"Improved Perl version numbering system\*(R" for the reasons for
this change.
.ie n .IP "Literals of the form 1.2.3 parse differently" 4
.el .IP "Literals of the form \f(CW1.2.3\fR parse differently" 4
.IX Item "Literals of the form 1.2.3 parse differently"
Previously, numeric literals with more than one dot in them were
interpreted as a floating point number concatenated with one or more
numbers.  Such \*(L"numbers\*(R" are now parsed as strings composed of the
specified ordinals.
.Sp
For example, \f(CW\*(C`print 97.98.99\*(C'\fR used to output \f(CW97.9899\fR in earlier
versions, but now prints \f(CW\*(C`abc\*(C'\fR.
.Sp
See \*(L"Support for strings represented as a vector of ordinals\*(R".
.IP "Possibly changed pseudo-random number generator" 4
.IX Item "Possibly changed pseudo-random number generator"
Perl programs that depend on reproducing a specific set of pseudo-random
numbers may now produce different output due to improvements made to the
\&\fIrand()\fR builtin.  You can use \f(CW\*(C`sh Configure \-Drandfunc=rand\*(C'\fR to obtain
the old behavior.
.Sp
See \*(L"Better pseudo-random number generator\*(R".
.IP "Hashing function for hash keys has changed" 4
.IX Item "Hashing function for hash keys has changed"
Even though Perl hashes are not order preserving, the apparently
random order encountered when iterating on the contents of a hash
is actually determined by the hashing algorithm used.  Improvements
in the algorithm may yield a random order that is \fBdifferent\fR from
that of previous versions, especially when iterating on hashes.
.Sp
See \*(L"Better worst-case behavior of hashes\*(R" for additional
information.
.ie n .IP """undef"" fails on read only values" 4
.el .IP "\f(CWundef\fR fails on read only values" 4
.IX Item "undef fails on read only values"
Using the \f(CW\*(C`undef\*(C'\fR operator on a readonly value (such as \f(CW$1\fR) has
the same effect as assigning \f(CW\*(C`undef\*(C'\fR to the readonly value\*(--it
throws an exception.
.IP "Close-on-exec bit may be set on pipe and socket handles" 4
.IX Item "Close-on-exec bit may be set on pipe and socket handles"
Pipe and socket handles are also now subject to the close-on-exec
behavior determined by the special variable $^F.
.Sp
See \*(L"More consistent close-on-exec behavior\*(R".
.ie n .IP "Writing ""$$1"" to mean ""${$}1"" is unsupported" 4
.el .IP "Writing \f(CW``$$1''\fR to mean \f(CW``${$}1''\fR is unsupported" 4
.IX Item "Writing ""$$1"" to mean ""${$}1"" is unsupported"
Perl 5.004 deprecated the interpretation of \f(CW$$1\fR and
similar within interpolated strings to mean \f(CW\*(C`$$ . "1"\*(C'\fR,
but still allowed it.
.Sp
In Perl 5.6.0 and later, \f(CW"$$1"\fR always means \f(CW"${$1}"\fR.
.ie n .IP "\fIdelete()\fR, \fIeach()\fR, \fIvalues()\fR and ""\e(%h)""" 4
.el .IP "\fIdelete()\fR, \fIeach()\fR, \fIvalues()\fR and \f(CW\e(%h)\fR" 4
.IX Item "delete(), each(), values() and )"
operate on aliases to values, not copies
.Sp
\&\fIdelete()\fR, \fIeach()\fR, \fIvalues()\fR and hashes (e.g. \f(CW\*(C`\e(%h)\*(C'\fR)
in a list context return the actual
values in the hash, instead of copies (as they used to in earlier
versions).  Typical idioms for using these constructs copy the
returned values, but this can make a significant difference when
creating references to the returned values.  Keys in the hash are still
returned as copies when iterating on a hash.
.Sp
See also \*(L"\fIdelete()\fR, \fIeach()\fR, \fIvalues()\fR and hash iteration are faster\*(R".
.IP "vec(\s-1EXPR,OFFSET,BITS\s0) enforces powers-of-two \s-1BITS\s0" 4
.IX Item "vec(EXPR,OFFSET,BITS) enforces powers-of-two BITS"
\&\fIvec()\fR generates a run-time error if the \s-1BITS\s0 argument is not
a valid power-of-two integer.
.IP "Text of some diagnostic output has changed" 4
.IX Item "Text of some diagnostic output has changed"
Most references to internal Perl operations in diagnostics
have been changed to be more descriptive.  This may be an
issue for programs that may incorrectly rely on the exact
text of diagnostics for proper functioning.
.ie n .IP """%@"" has been removed" 4
.el .IP "\f(CW%@\fR has been removed" 4
.IX Item "%@ has been removed"
The undocumented special variable \f(CW\*(C`%@\*(C'\fR that used to accumulate
\&\*(L"background\*(R" errors (such as those that happen in \s-1\fIDESTROY\s0()\fR)
has been removed, because it could potentially result in memory
leaks.
.IP "Parenthesized \fInot()\fR behaves like a list operator" 4
.IX Item "Parenthesized not() behaves like a list operator"
The \f(CW\*(C`not\*(C'\fR operator now falls under the \*(L"if it looks like a function,
it behaves like a function\*(R" rule.
.Sp
As a result, the parenthesized form can be used with \f(CW\*(C`grep\*(C'\fR and \f(CW\*(C`map\*(C'\fR.
The following construct used to be a syntax error before, but it works
as expected now:
.Sp
.Vb 1
\&    grep not($_), @things;
.Ve
.Sp
On the other hand, using \f(CW\*(C`not\*(C'\fR with a literal list slice may not
work.  The following previously allowed construct:
.Sp
.Vb 1
\&    print not (1,2,3)[0];
.Ve
.Sp
needs to be written with additional parentheses now:
.Sp
.Vb 1
\&    print not((1,2,3)[0]);
.Ve
.Sp
The behavior remains unaffected when \f(CW\*(C`not\*(C'\fR is not followed by parentheses.
.ie n .IP "Semantics of bareword prototype ""(*)"" have changed" 4
.el .IP "Semantics of bareword prototype \f(CW(*)\fR have changed" 4
.IX Item "Semantics of bareword prototype (*) have changed"
The semantics of the bareword prototype \f(CW\*(C`*\*(C'\fR have changed.  Perl 5.005
always coerced simple scalar arguments to a typeglob, which wasn't useful
in situations where the subroutine must distinguish between a simple
scalar and a typeglob.  The new behavior is to not coerce bareword
arguments to a typeglob.  The value will always be visible as either
a simple scalar or as a reference to a typeglob.
.Sp
See \*(L"More functional bareword prototype (*)\*(R".
.IP "Semantics of bit operators may have changed on 64\-bit platforms" 4
.IX Item "Semantics of bit operators may have changed on 64-bit platforms"
If your platform is either natively 64\-bit or if Perl has been
configured to used 64\-bit integers, i.e., \f(CW$Config\fR{ivsize} is 8, 
there may be a potential incompatibility in the behavior of bitwise
numeric operators (& | ^ ~ << >>).  These operators used to strictly
operate on the lower 32 bits of integers in previous versions, but now
operate over the entire native integral width.  In particular, note
that unary \f(CW\*(C`~\*(C'\fR will produce different results on platforms that have
different \f(CW$Config\fR{ivsize}.  For portability, be sure to mask off
the excess bits in the result of unary \f(CW\*(C`~\*(C'\fR, e.g., \f(CW\*(C`~$x & 0xffffffff\*(C'\fR.
.Sp
See \*(L"Bit operators support full native integer width\*(R".
.IP "More builtins taint their results" 4
.IX Item "More builtins taint their results"
As described in \*(L"Improved security features\*(R", there may be more
sources of taint in a Perl program.
.Sp
To avoid these new tainting behaviors, you can build Perl with the
Configure option \f(CW\*(C`\-Accflags=\-DINCOMPLETE_TAINTS\*(C'\fR.  Beware that the
ensuing perl binary may be insecure.
.SS "C Source Incompatibilities"
.IX Subsection "C Source Incompatibilities"
.ie n .IP """PERL_POLLUTE""" 4
.el .IP "\f(CWPERL_POLLUTE\fR" 4
.IX Item "PERL_POLLUTE"
Release 5.005 grandfathered old global symbol names by providing preprocessor
macros for extension source compatibility.  As of release 5.6.0, these
preprocessor definitions are not available by default.  You need to explicitly
compile perl with \f(CW\*(C`\-DPERL_POLLUTE\*(C'\fR to get these definitions.  For
extensions still using the old symbols, this option can be
specified via MakeMaker:
.Sp
.Vb 1
\&    perl Makefile.PL POLLUTE=1
.Ve
.ie n .IP """PERL_IMPLICIT_CONTEXT""" 4
.el .IP "\f(CWPERL_IMPLICIT_CONTEXT\fR" 4
.IX Item "PERL_IMPLICIT_CONTEXT"
This new build option provides a set of macros for all \s-1API\s0 functions
such that an implicit interpreter/thread context argument is passed to
every \s-1API\s0 function.  As a result of this, something like \f(CW\*(C`sv_setsv(foo,bar)\*(C'\fR
amounts to a macro invocation that actually translates to something like
\&\f(CW\*(C`Perl_sv_setsv(my_perl,foo,bar)\*(C'\fR.  While this is generally expected
to not have any significant source compatibility issues, the difference
between a macro and a real function call will need to be considered.
.Sp
This means that there \fBis\fR a source compatibility issue as a result of
this if your extensions attempt to use pointers to any of the Perl \s-1API\s0
functions.
.Sp
Note that the above issue is not relevant to the default build of
Perl, whose interfaces continue to match those of prior versions
(but subject to the other options described here).
.Sp
See \*(L"Background and \s-1PERL_IMPLICIT_CONTEXT\*(R"\s0 in perlguts for detailed information on the
ramifications of building Perl with this option.
.Sp
.Vb 3
\&    NOTE: PERL_IMPLICIT_CONTEXT is automatically enabled whenever Perl is built
\&    with one of \-Dusethreads, \-Dusemultiplicity, or both.  It is not
\&    intended to be enabled by users at this time.
.Ve
.ie n .IP """PERL_POLLUTE_MALLOC""" 4
.el .IP "\f(CWPERL_POLLUTE_MALLOC\fR" 4
.IX Item "PERL_POLLUTE_MALLOC"
Enabling Perl's malloc in release 5.005 and earlier caused the namespace of
the system's malloc family of functions to be usurped by the Perl versions,
since by default they used the same names.  Besides causing problems on
platforms that do not allow these functions to be cleanly replaced, this
also meant that the system versions could not be called in programs that
used Perl's malloc.  Previous versions of Perl have allowed this behaviour
to be suppressed with the \s-1HIDEMYMALLOC\s0 and \s-1EMBEDMYMALLOC\s0 preprocessor
definitions.
.Sp
As of release 5.6.0, Perl's malloc family of functions have default names
distinct from the system versions.  You need to explicitly compile perl with
\&\f(CW\*(C`\-DPERL_POLLUTE_MALLOC\*(C'\fR to get the older behaviour.  \s-1HIDEMYMALLOC\s0
and \s-1EMBEDMYMALLOC\s0 have no effect, since the behaviour they enabled is now
the default.
.Sp
Note that these functions do \fBnot\fR constitute Perl's memory allocation \s-1API.\s0
See \*(L"Memory Allocation\*(R" in perlguts for further information about that.
.SS "Compatible C Source \s-1API\s0 Changes"
.IX Subsection "Compatible C Source API Changes"
.ie n .IP """PATCHLEVEL"" is now ""PERL_VERSION""" 4
.el .IP "\f(CWPATCHLEVEL\fR is now \f(CWPERL_VERSION\fR" 4
.IX Item "PATCHLEVEL is now PERL_VERSION"
The cpp macros \f(CW\*(C`PERL_REVISION\*(C'\fR, \f(CW\*(C`PERL_VERSION\*(C'\fR, and \f(CW\*(C`PERL_SUBVERSION\*(C'\fR
are now available by default from perl.h, and reflect the base revision,
patchlevel, and subversion respectively.  \f(CW\*(C`PERL_REVISION\*(C'\fR had no
prior equivalent, while \f(CW\*(C`PERL_VERSION\*(C'\fR and \f(CW\*(C`PERL_SUBVERSION\*(C'\fR were
previously available as \f(CW\*(C`PATCHLEVEL\*(C'\fR and \f(CW\*(C`SUBVERSION\*(C'\fR.
.Sp
The new names cause less pollution of the \fBcpp\fR namespace and reflect what
the numbers have come to stand for in common practice.  For compatibility,
the old names are still supported when \fIpatchlevel.h\fR is explicitly
included (as required before), so there is no source incompatibility
from the change.
.SS "Binary Incompatibilities"
.IX Subsection "Binary Incompatibilities"
In general, the default build of this release is expected to be binary
compatible for extensions built with the 5.005 release or its maintenance
versions.  However, specific platforms may have broken binary compatibility
due to changes in the defaults used in hints files.  Therefore, please be
sure to always check the platform-specific \s-1README\s0 files for any notes to
the contrary.
.PP
The usethreads or usemultiplicity builds are \fBnot\fR binary compatible
with the corresponding builds in 5.005.
.PP
On platforms that require an explicit list of exports (\s-1AIX, OS/2\s0 and Windows,
among others), purely internal symbols such as parser functions and the
run time opcodes are not exported by default.  Perl 5.005 used to export
all functions irrespective of whether they were considered part of the
public \s-1API\s0 or not.
.PP
For the full list of public \s-1API\s0 functions, see perlapi.
.SH "Known Problems"
.IX Header "Known Problems"
.SS "Thread test failures"
.IX Subsection "Thread test failures"
The subtests 19 and 20 of lib/thr5005.t test are known to fail due to
fundamental problems in the 5.005 threading implementation.  These are
not new failures\*(--Perl 5.005_0x has the same bugs, but didn't have these
tests.
.SS "\s-1EBCDIC\s0 platforms not supported"
.IX Subsection "EBCDIC platforms not supported"
In earlier releases of Perl, \s-1EBCDIC\s0 environments like \s-1OS390 \s0(also
known as Open Edition \s-1MVS\s0) and VM-ESA were supported.  Due to changes
required by the \s-1UTF\-8 \s0(Unicode) support, the \s-1EBCDIC\s0 platforms are not
supported in Perl 5.6.0.
.SS "In 64\-bit HP-UX the lib/io_multihomed test may hang"
.IX Subsection "In 64-bit HP-UX the lib/io_multihomed test may hang"
The lib/io_multihomed test may hang in HP-UX if Perl has been
configured to be 64\-bit.  Because other 64\-bit platforms do not
hang in this test, HP-UX is suspect.  All other tests pass
in 64\-bit HP-UX.  The test attempts to create and connect to
\&\*(L"multihomed\*(R" sockets (sockets which have multiple \s-1IP\s0 addresses).
.SS "\s-1NEXTSTEP 3.3 POSIX\s0 test failure"
.IX Subsection "NEXTSTEP 3.3 POSIX test failure"
In \s-1NEXTSTEP 3\s0.3p2 the implementation of the \fIstrftime\fR\|(3) in the
operating system libraries is buggy: the \f(CW%j\fR format numbers the days of
a month starting from zero, which, while being logical to programmers,
will cause the subtests 19 to 27 of the lib/posix test may fail.
.SS "Tru64 (aka Digital \s-1UNIX,\s0 aka \s-1DEC OSF/1\s0) lib/sdbm test failure with gcc"
.IX Subsection "Tru64 (aka Digital UNIX, aka DEC OSF/1) lib/sdbm test failure with gcc"
If compiled with gcc 2.95 the lib/sdbm test will fail (dump core).
The cure is to use the vendor cc, it comes with the operating system
and produces good code.
.SS "UNICOS/mk \s-1CC\s0 failures during Configure run"
.IX Subsection "UNICOS/mk CC failures during Configure run"
In UNICOS/mk the following errors may appear during the Configure run:
.PP
.Vb 6
\&        Guessing which symbols your C compiler and preprocessor define...
\&        CC\-20 cc: ERROR File = try.c, Line = 3
\&        ...
\&          bad switch yylook 79bad switch yylook 79bad switch yylook 79bad switch yylook 79#ifdef A29K
\&        ...
\&        4 errors detected in the compilation of "try.c".
.Ve
.PP
The culprit is the broken awk of UNICOS/mk.  The effect is fortunately
rather mild: Perl itself is not adversely affected by the error, only
the h2ph utility coming with Perl, and that is rather rarely needed
these days.
.SS "Arrow operator and arrays"
.IX Subsection "Arrow operator and arrays"
When the left argument to the arrow operator \f(CW\*(C`\->\*(C'\fR is an array, or
the \f(CW\*(C`scalar\*(C'\fR operator operating on an array, the result of the
operation must be considered erroneous. For example:
.PP
.Vb 2
\&    @x\->[2]
\&    scalar(@x)\->[2]
.Ve
.PP
These expressions will get run-time errors in some future release of
Perl.
.SS "Experimental features"
.IX Subsection "Experimental features"
As discussed above, many features are still experimental.  Interfaces and
implementation of these features are subject to change, and in extreme cases,
even subject to removal in some future release of Perl.  These features
include the following:
.IP "Threads" 4
.IX Item "Threads"
.PD 0
.IP "Unicode" 4
.IX Item "Unicode"
.IP "64\-bit support" 4
.IX Item "64-bit support"
.IP "Lvalue subroutines" 4
.IX Item "Lvalue subroutines"
.IP "Weak references" 4
.IX Item "Weak references"
.IP "The pseudo-hash data type" 4
.IX Item "The pseudo-hash data type"
.IP "The Compiler suite" 4
.IX Item "The Compiler suite"
.IP "Internal implementation of file globbing" 4
.IX Item "Internal implementation of file globbing"
.IP "The \s-1DB\s0 module" 4
.IX Item "The DB module"
.IP "The regular expression code constructs:" 4
.IX Item "The regular expression code constructs:"
.PD
\&\f(CW\*(C`(?{ code })\*(C'\fR and \f(CW\*(C`(??{ code })\*(C'\fR
.SH "Obsolete Diagnostics"
.IX Header "Obsolete Diagnostics"
.IP "Character class syntax [: :] is reserved for future extensions" 4
.IX Item "Character class syntax [: :] is reserved for future extensions"
(W) Within regular expression character classes ([]) the syntax beginning
with \*(L"[:\*(R" and ending with \*(L":]\*(R" is reserved for future extensions.
If you need to represent those character sequences inside a regular
expression character class, just quote the square brackets with the
backslash: \*(L"\e[:\*(R" and \*(L":\e]\*(R".
.IP "Ill-formed logical name |%s| in prime_env_iter" 4
.IX Item "Ill-formed logical name |%s| in prime_env_iter"
(W) A warning peculiar to \s-1VMS.  A\s0 logical name was encountered when preparing
to iterate over \f(CW%ENV\fR which violates the syntactic rules governing logical
names.  Because it cannot be translated normally, it is skipped, and will not
appear in \f(CW%ENV\fR.  This may be a benign occurrence, as some software packages
might directly modify logical name tables and introduce nonstandard names,
or it may indicate that a logical name table has been corrupted.
.IP "In string, @%s now must be written as \e@%s" 4
.IX Item "In string, @%s now must be written as @%s"
The description of this error used to say:
.Sp
.Vb 2
\&        (Someday it will simply assume that an unbackslashed @
\&         interpolates an array.)
.Ve
.Sp
That day has come, and this fatal error has been removed.  It has been
replaced by a non-fatal warning instead.
See \*(L"Arrays now always interpolate into double-quoted strings\*(R" for
details.
.ie n .IP "Probable precedence problem on %s" 4
.el .IP "Probable precedence problem on \f(CW%s\fR" 4
.IX Item "Probable precedence problem on %s"
(W) The compiler found a bareword where it expected a conditional,
which often indicates that an || or && was parsed as part of the
last argument of the previous construct, for example:
.Sp
.Vb 1
\&    open FOO || die;
.Ve
.IP "regexp too big" 4
.IX Item "regexp too big"
(F) The current implementation of regular expressions uses shorts as
address offsets within a string.  Unfortunately this means that if
the regular expression compiles to longer than 32767, it'll blow up.
Usually when you want a regular expression this big, there is a better
way to do it with multiple statements.  See perlre.
.ie n .IP "Use of ""$$<digit>"" to mean ""${$}<digit>"" is deprecated" 4
.el .IP "Use of ``$$<digit>'' to mean ``${$}<digit>'' is deprecated" 4
.IX Item "Use of $$<digit> to mean ${$}<digit> is deprecated"
(D) Perl versions before 5.004 misinterpreted any type marker followed
by \*(L"$\*(R" and a digit.  For example, \*(L"$$0\*(R" was incorrectly taken to mean
\&\*(L"${$}0\*(R" instead of \*(L"${$0}\*(R".  This bug is (mostly) fixed in Perl 5.004.
.Sp
However, the developers of Perl 5.004 could not fix this bug completely,
because at least two widely-used modules depend on the old meaning of
\&\*(L"$$0\*(R" in a string.  So Perl 5.004 still interprets \*(L"$$<digit>\*(R" in the
old (broken) way inside strings; but it generates this message as a
warning.  And in Perl 5.005, this special treatment will cease.
.SH "Reporting Bugs"
.IX Header "Reporting Bugs"
If you find what you think is a bug, you might check the
articles recently posted to the comp.lang.perl.misc newsgroup.
There may also be information at http://www.perl.com/perl/ , the Perl
Home Page.
.PP
If you believe you have an unreported bug, please run the \fBperlbug\fR
program included with your release.  Be sure to trim your bug down
to a tiny but sufficient test case.  Your bug report, along with the
output of \f(CW\*(C`perl \-V\*(C'\fR, will be sent off to perlbug@perl.org to be
analysed by the Perl porting team.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
The \fIChanges\fR file for exhaustive details on what changed.
.PP
The \fI\s-1INSTALL\s0\fR file for how to build Perl.
.PP
The \fI\s-1README\s0\fR file for general stuff.
.PP
The \fIArtistic\fR and \fICopying\fR files for copyright information.
.SH "HISTORY"
.IX Header "HISTORY"
Written by Gurusamy Sarathy <\fIgsar@activestate.com\fR>, with many
contributions from The Perl Porters.
.PP
Send omissions or corrections to <\fIperlbug@perl.org\fR>.
                                                                                                                                                                                                                                                                                                      osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perl581delta.1                               0100644 0001750 0001750 00000141720 12566207433 023157  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERL581DELTA 1"
.TH PERL581DELTA 1 "2013-11-04" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perl581delta \- what is new for perl v5.8.1
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document describes differences between the 5.8.0 release and
the 5.8.1 release.
.PP
If you are upgrading from an earlier release such as 5.6.1, first read
the perl58delta, which describes differences between 5.6.0 and
5.8.0.
.PP
In case you are wondering about 5.6.1, it was bug-fix-wise rather
identical to the development release 5.7.1.  Confused?  This timeline
hopefully helps a bit: it lists the new major releases, their maintenance
releases, and the development releases.
.PP
.Vb 1
\&          New     Maintenance  Development
\&
\&          5.6.0                             2000\-Mar\-22
\&                               5.7.0        2000\-Sep\-02
\&                  5.6.1                     2001\-Apr\-08
\&                               5.7.1        2001\-Apr\-09
\&                               5.7.2        2001\-Jul\-13
\&                               5.7.3        2002\-Mar\-05
\&          5.8.0                             2002\-Jul\-18
\&                  5.8.1                     2003\-Sep\-25
.Ve
.SH "Incompatible Changes"
.IX Header "Incompatible Changes"
.SS "Hash Randomisation"
.IX Subsection "Hash Randomisation"
Mainly due to security reasons, the \*(L"random ordering\*(R" of hashes
has been made even more random.  Previously while the order of hash
elements from \fIkeys()\fR, \fIvalues()\fR, and \fIeach()\fR was essentially random,
it was still repeatable.  Now, however, the order varies between
different runs of Perl.
.PP
\&\fBPerl has never guaranteed any ordering of the hash keys\fR, and the
ordering has already changed several times during the lifetime of
Perl 5.  Also, the ordering of hash keys has always been, and
continues to be, affected by the insertion order.
.PP
The added randomness may affect applications.
.PP
One possible scenario is when output of an application has included
hash data.  For example, if you have used the Data::Dumper module to
dump data into different files, and then compared the files to see
whether the data has changed, now you will have false positives since
the order in which hashes are dumped will vary.  In general the cure
is to sort the keys (or the values); in particular for Data::Dumper to
use the \f(CW\*(C`Sortkeys\*(C'\fR option.  If some particular order is really
important, use tied hashes: for example the Tie::IxHash module
which by default preserves the order in which the hash elements
were added.
.PP
More subtle problem is reliance on the order of \*(L"global destruction\*(R".
That is what happens at the end of execution: Perl destroys all data
structures, including user data.  If your destructors (the \s-1DESTROY\s0
subroutines) have assumed any particular ordering to the global
destruction, there might be problems ahead.  For example, in a
destructor of one object you cannot assume that objects of any other
class are still available, unless you hold a reference to them.
If the environment variable \s-1PERL_DESTRUCT_LEVEL\s0 is set to a non-zero
value, or if Perl is exiting a spawned thread, it will also destruct
the ordinary references and the symbol tables that are no longer in use.
You can't call a class method or an ordinary function on a class that
has been collected that way.
.PP
The hash randomisation is certain to reveal hidden assumptions about
some particular ordering of hash elements, and outright bugs: it
revealed a few bugs in the Perl core and core modules.
.PP
To disable the hash randomisation in runtime, set the environment
variable \s-1PERL_HASH_SEED\s0 to 0 (zero) before running Perl (for more
information see \*(L"\s-1PERL_HASH_SEED\*(R"\s0 in perlrun), or to disable the feature
completely in compile time, compile with \f(CW\*(C`\-DNO_HASH_SEED\*(C'\fR (see \fI\s-1INSTALL\s0\fR).
.PP
See \*(L"Algorithmic Complexity Attacks\*(R" in perlsec for the original
rationale behind this change.
.SS "\s-1UTF\-8\s0 On Filehandles No Longer Activated By Locale"
.IX Subsection "UTF-8 On Filehandles No Longer Activated By Locale"
In Perl 5.8.0 all filehandles, including the standard filehandles,
were implicitly set to be in Unicode \s-1UTF\-8\s0 if the locale settings
indicated the use of \s-1UTF\-8. \s0 This feature caused too many problems,
so the feature was turned off and redesigned: see \*(L"Core Enhancements\*(R".
.ie n .SS "Single-number v\-strings are no longer v\-strings before ""=>"""
.el .SS "Single-number v\-strings are no longer v\-strings before ``=>''"
.IX Subsection "Single-number v-strings are no longer v-strings before =>"
The version strings or v\-strings (see \*(L"Version Strings\*(R" in perldata)
feature introduced in Perl 5.6.0 has been a source of some confusion\*(--
especially when the user did not want to use it, but Perl thought it
knew better.  Especially troublesome has been the feature that before
a \*(L"=>\*(R" a version string (a \*(L"v\*(R" followed by digits) has been interpreted
as a v\-string instead of a string literal.  In other words:
.PP
.Vb 1
\&        %h = ( v65 => 42 );
.Ve
.PP
has meant since Perl 5.6.0
.PP
.Vb 1
\&        %h = ( \*(AqA\*(Aq => 42 );
.Ve
.PP
(at least in platforms of \s-1ASCII\s0 progeny)  Perl 5.8.1 restores the
more natural interpretation
.PP
.Vb 1
\&        %h = ( \*(Aqv65\*(Aq => 42 );
.Ve
.PP
The multi-number v\-strings like v65.66 and 65.66.67 still continue to
be v\-strings in Perl 5.8.
.SS "(Win32) The \-C Switch Has Been Repurposed"
.IX Subsection "(Win32) The -C Switch Has Been Repurposed"
The \-C switch has changed in an incompatible way.  The old semantics
of this switch only made sense in Win32 and only in the \*(L"use utf8\*(R"
universe in 5.6.x releases, and do not make sense for the Unicode
implementation in 5.8.0.  Since this switch could not have been used
by anyone, it has been repurposed.  The behavior that this switch
enabled in 5.6.x releases may be supported in a transparent,
data-dependent fashion in a future release.
.PP
For the new life of this switch, see \*(L"\s-1UTF\-8\s0 no longer default under
\&\s-1UTF\-8\s0 locales\*(R", and \*(L"\-C\*(R" in perlrun.
.SS "(Win32) The /d Switch Of cmd.exe"
.IX Subsection "(Win32) The /d Switch Of cmd.exe"
Perl 5.8.1 uses the /d switch when running the cmd.exe shell
internally for \fIsystem()\fR, backticks, and when opening pipes to external
programs.  The extra switch disables the execution of AutoRun commands
from the registry, which is generally considered undesirable when
running external programs.  If you wish to retain compatibility with
the older behavior, set \s-1PERL5SHELL\s0 in your environment to \f(CW\*(C`cmd /x/c\*(C'\fR.
.SH "Core Enhancements"
.IX Header "Core Enhancements"
.SS "\s-1UTF\-8\s0 no longer default under \s-1UTF\-8\s0 locales"
.IX Subsection "UTF-8 no longer default under UTF-8 locales"
In Perl 5.8.0 many Unicode features were introduced.   One of them
was found to be of more nuisance than benefit: the automagic
(and silent) \*(L"UTF\-8\-ification\*(R" of filehandles, including the
standard filehandles, if the user's locale settings indicated
use of \s-1UTF\-8.\s0
.PP
For example, if you had \f(CW\*(C`en_US.UTF\-8\*(C'\fR as your locale, your \s-1STDIN\s0 and
\&\s-1STDOUT\s0 were automatically \*(L"\s-1UTF\-8\*(R",\s0 in other words an implicit
binmode(..., \*(L":utf8\*(R") was made.  This meant that trying to print, say,
\&\fIchr\fR\|(0xff), ended up printing the bytes 0xc3 0xbf.  Hardly what
you had in mind unless you were aware of this feature of Perl 5.8.0.
The problem is that the vast majority of people weren't: for example
in RedHat releases 8 and 9 the \fBdefault\fR locale setting is \s-1UTF\-8,\s0 so
all RedHat users got \s-1UTF\-8\s0 filehandles, whether they wanted it or not.
The pain was intensified by the Unicode implementation of Perl 5.8.0
(still) having nasty bugs, especially related to the use of s/// and
tr///.  (Bugs that have been fixed in 5.8.1)
.PP
Therefore a decision was made to backtrack the feature and change it
from implicit silent default to explicit conscious option.  The new
Perl command line option \f(CW\*(C`\-C\*(C'\fR and its counterpart environment
variable \s-1PERL_UNICODE\s0 can now be used to control how Perl and Unicode
interact at interfaces like I/O and for example the command line
arguments.  See \*(L"\-C\*(R" in perlrun and \*(L"\s-1PERL_UNICODE\*(R"\s0 in perlrun for more
information.
.SS "Unsafe signals again available"
.IX Subsection "Unsafe signals again available"
In Perl 5.8.0 the so-called \*(L"safe signals\*(R" were introduced.  This
means that Perl no longer handles signals immediately but instead
\&\*(L"between opcodes\*(R", when it is safe to do so.  The earlier immediate
handling easily could corrupt the internal state of Perl, resulting
in mysterious crashes.
.PP
However, the new safer model has its problems too.  Because now an
opcode, a basic unit of Perl execution, is never interrupted but
instead let to run to completion, certain operations that can take a
long time now really do take a long time.  For example, certain
network operations have their own blocking and timeout mechanisms, and
being able to interrupt them immediately would be nice.
.PP
Therefore perl 5.8.1 introduces a \*(L"backdoor\*(R" to restore the pre\-5.8.0
(pre\-5.7.3, really) signal behaviour.  Just set the environment variable
\&\s-1PERL_SIGNALS\s0 to \f(CW\*(C`unsafe\*(C'\fR, and the old immediate (and unsafe)
signal handling behaviour returns.  See \*(L"\s-1PERL_SIGNALS\*(R"\s0 in perlrun
and \*(L"Deferred Signals (Safe Signals)\*(R" in perlipc.
.PP
In completely unrelated news, you can now use safe signals with
POSIX::SigAction.  See \*(L"POSIX::SigAction\*(R" in \s-1POSIX\s0.
.SS "Tied Arrays with Negative Array Indices"
.IX Subsection "Tied Arrays with Negative Array Indices"
Formerly, the indices passed to \f(CW\*(C`FETCH\*(C'\fR, \f(CW\*(C`STORE\*(C'\fR, \f(CW\*(C`EXISTS\*(C'\fR, and
\&\f(CW\*(C`DELETE\*(C'\fR methods in tied array class were always non-negative.  If
the actual argument was negative, Perl would call \s-1FETCHSIZE\s0 implicitly
and add the result to the index before passing the result to the tied
array method.  This behaviour is now optional.  If the tied array class
contains a package variable named \f(CW$NEGATIVE_INDICES\fR which is set to
a true value, negative values will be passed to \f(CW\*(C`FETCH\*(C'\fR, \f(CW\*(C`STORE\*(C'\fR,
\&\f(CW\*(C`EXISTS\*(C'\fR, and \f(CW\*(C`DELETE\*(C'\fR unchanged.
.SS "local ${$x}"
.IX Subsection "local ${$x}"
The syntaxes
.PP
.Vb 3
\&        local ${$x}
\&        local @{$x}
\&        local %{$x}
.Ve
.PP
now do localise variables, given that the \f(CW$x\fR is a valid variable name.
.SS "Unicode Character Database 4.0.0"
.IX Subsection "Unicode Character Database 4.0.0"
The copy of the Unicode Character Database included in Perl 5.8 has
been updated to 4.0.0 from 3.2.0.  This means for example that the
Unicode character properties are as in Unicode 4.0.0.
.SS "Deprecation Warnings"
.IX Subsection "Deprecation Warnings"
There is one new feature deprecation.  Perl 5.8.0 forgot to add
some deprecation warnings, these warnings have now been added.
Finally, a reminder of an impending feature removal.
.PP
\fI(Reminder) Pseudo-hashes are deprecated (really)\fR
.IX Subsection "(Reminder) Pseudo-hashes are deprecated (really)"
.PP
Pseudo-hashes were deprecated in Perl 5.8.0 and will be removed in
Perl 5.10.0, see perl58delta for details.  Each attempt to access
pseudo-hashes will trigger the warning \f(CW\*(C`Pseudo\-hashes are deprecated\*(C'\fR.
If you really want to continue using pseudo-hashes but not to see the
deprecation warnings, use:
.PP
.Vb 1
\&    no warnings \*(Aqdeprecated\*(Aq;
.Ve
.PP
Or you can continue to use the fields pragma, but please don't
expect the data structures to be pseudohashes any more.
.PP
\fI(Reminder) 5.005\-style threads are deprecated (really)\fR
.IX Subsection "(Reminder) 5.005-style threads are deprecated (really)"
.PP
5.005\-style threads (activated by \f(CW\*(C`use Thread;\*(C'\fR) were deprecated in
Perl 5.8.0 and will be removed after Perl 5.8, see perl58delta for
details.  Each 5.005\-style thread creation will trigger the warning
\&\f(CW\*(C`5.005 threads are deprecated\*(C'\fR.  If you really want to continue
using the 5.005 threads but not to see the deprecation warnings, use:
.PP
.Vb 1
\&    no warnings \*(Aqdeprecated\*(Aq;
.Ve
.PP
\fI(Reminder) The $* variable is deprecated (really)\fR
.IX Subsection "(Reminder) The $* variable is deprecated (really)"
.PP
The \f(CW$*\fR variable controlling multi-line matching has been deprecated
and will be removed after 5.8.  The variable has been deprecated for a
long time, and a deprecation warning \f(CW\*(C`Use of $* is deprecated\*(C'\fR is given,
now the variable will just finally be removed.  The functionality has
been supplanted by the \f(CW\*(C`/s\*(C'\fR and \f(CW\*(C`/m\*(C'\fR modifiers on pattern matching.
If you really want to continue using the \f(CW$*\fR\-variable but not to see
the deprecation warnings, use:
.PP
.Vb 1
\&    no warnings \*(Aqdeprecated\*(Aq;
.Ve
.SS "Miscellaneous Enhancements"
.IX Subsection "Miscellaneous Enhancements"
\&\f(CW\*(C`map\*(C'\fR in void context is no longer expensive. \f(CW\*(C`map\*(C'\fR is now context
aware, and will not construct a list if called in void context.
.PP
If a socket gets closed by the server while printing to it, the client
now gets a \s-1SIGPIPE. \s0 While this new feature was not planned, it fell
naturally out of PerlIO changes, and is to be considered an accidental
feature.
.PP
PerlIO::get_layers(\s-1FH\s0) returns the names of the PerlIO layers
active on a filehandle.
.PP
PerlIO::via layers can now have an optional \s-1UTF8\s0 method to
indicate whether the layer wants to \*(L"auto\-:utf8\*(R" the stream.
.PP
\&\fIutf8::is_utf8()\fR has been added as a quick way to test whether
a scalar is encoded internally in \s-1UTF\-8 \s0(Unicode).
.SH "Modules and Pragmata"
.IX Header "Modules and Pragmata"
.SS "Updated Modules And Pragmata"
.IX Subsection "Updated Modules And Pragmata"
The following modules and pragmata have been updated since Perl 5.8.0:
.IP "base" 4
.IX Item "base"
.PD 0
.IP "B::Bytecode" 4
.IX Item "B::Bytecode"
.PD
In much better shape than it used to be.  Still far from perfect, but
maybe worth a try.
.IP "B::Concise" 4
.IX Item "B::Concise"
.PD 0
.IP "B::Deparse" 4
.IX Item "B::Deparse"
.IP "Benchmark" 4
.IX Item "Benchmark"
.PD
An optional feature, \f(CW\*(C`:hireswallclock\*(C'\fR, now allows for high
resolution wall clock times (uses Time::HiRes).
.IP "ByteLoader" 4
.IX Item "ByteLoader"
See B::Bytecode.
.IP "bytes" 4
.IX Item "bytes"
Now has bytes::substr.
.IP "\s-1CGI\s0" 4
.IX Item "CGI"
.PD 0
.IP "charnames" 4
.IX Item "charnames"
.PD
One can now have custom character name aliases.
.IP "\s-1CPAN\s0" 4
.IX Item "CPAN"
There is now a simple command line frontend to the \s-1CPAN\s0.pm
module called \fIcpan\fR.
.IP "Data::Dumper" 4
.IX Item "Data::Dumper"
A new option, Pair, allows choosing the separator between hash keys
and values.
.IP "DB_File" 4
.IX Item "DB_File"
.PD 0
.IP "Devel::PPPort" 4
.IX Item "Devel::PPPort"
.IP "Digest::MD5" 4
.IX Item "Digest::MD5"
.IP "Encode" 4
.IX Item "Encode"
.PD
Significant updates on the encoding pragma functionality
(tr/// and the \s-1DATA\s0 filehandle, formats).
.Sp
If a filehandle has been marked as to have an encoding, unmappable
characters are detected already during input, not later (when the
corrupted data is being used).
.Sp
The \s-1ISO 8859\-6\s0 conversion table has been corrected (the 0x30..0x39
erroneously mapped to U+0660..U+0669, instead of U+0030..U+0039).  The
\&\s-1GSM 03.38\s0 conversion did not handle escape sequences correctly.  The
\&\s-1UTF\-7\s0 encoding has been added (making Encode feature-complete with
Unicode::String).
.IP "fields" 4
.IX Item "fields"
.PD 0
.IP "libnet" 4
.IX Item "libnet"
.IP "Math::BigInt" 4
.IX Item "Math::BigInt"
.PD
A lot of bugs have been fixed since v1.60, the version included in Perl
v5.8.0. Especially noteworthy are the bug in Calc that caused div and mod to
fail for some large values, and the fixes to the handling of bad inputs.
.Sp
Some new features were added, e.g. the \fIbroot()\fR method, you can now pass
parameters to \fIconfig()\fR to change some settings at runtime, and it is now
possible to trap the creation of NaN and infinity.
.Sp
As usual, some optimizations took place and made the math overall a tad
faster. In some cases, quite a lot faster, actually. Especially alternative
libraries like Math::BigInt::GMP benefit from this. In addition, a lot of the
quite clunky routines like \fIfsqrt()\fR and \fIflog()\fR are now much much faster.
.IP "MIME::Base64" 4
.IX Item "MIME::Base64"
.PD 0
.IP "\s-1NEXT\s0" 4
.IX Item "NEXT"
.PD
Diamond inheritance now works.
.IP "Net::Ping" 4
.IX Item "Net::Ping"
.PD 0
.IP "PerlIO::scalar" 4
.IX Item "PerlIO::scalar"
.PD
Reading from non-string scalars (like the special variables, see
perlvar) now works.
.IP "podlators" 4
.IX Item "podlators"
.PD 0
.IP "Pod::LaTeX" 4
.IX Item "Pod::LaTeX"
.IP "PodParsers" 4
.IX Item "PodParsers"
.IP "Pod::Perldoc" 4
.IX Item "Pod::Perldoc"
.PD
Complete rewrite.  As a side-effect, no longer refuses to startup when
run by root.
.IP "Scalar::Util" 4
.IX Item "Scalar::Util"
New utilities: refaddr, isvstring, looks_like_number, set_prototype.
.IP "Storable" 4
.IX Item "Storable"
Can now store code references (via B::Deparse, so not foolproof).
.IP "strict" 4
.IX Item "strict"
Earlier versions of the strict pragma did not check the parameters
implicitly passed to its \*(L"import\*(R" (use) and \*(L"unimport\*(R" (no) routine.
This caused the false idiom such as:
.Sp
.Vb 2
\&        use strict qw(@ISA);
\&        @ISA = qw(Foo);
.Ve
.Sp
This however (probably) raised the false expectation that the strict
refs, vars and subs were being enforced (and that \f(CW@ISA\fR was somehow
\&\*(L"declared\*(R").  But the strict refs, vars, and subs are \fBnot\fR enforced
when using this false idiom.
.Sp
Starting from Perl 5.8.1, the above \fBwill\fR cause an error to be
raised.  This may cause programs which used to execute seemingly
correctly without warnings and errors to fail when run under 5.8.1.
This happens because
.Sp
.Vb 1
\&        use strict qw(@ISA);
.Ve
.Sp
will now fail with the error:
.Sp
.Vb 1
\&        Unknown \*(Aqstrict\*(Aq tag(s) \*(Aq@ISA\*(Aq
.Ve
.Sp
The remedy to this problem is to replace this code with the correct idiom:
.Sp
.Vb 3
\&        use strict;
\&        use vars qw(@ISA);
\&        @ISA = qw(Foo);
.Ve
.IP "Term::ANSIcolor" 4
.IX Item "Term::ANSIcolor"
.PD 0
.IP "Test::Harness" 4
.IX Item "Test::Harness"
.PD
Now much more picky about extra or missing output from test scripts.
.IP "Test::More" 4
.IX Item "Test::More"
.PD 0
.IP "Test::Simple" 4
.IX Item "Test::Simple"
.IP "Text::Balanced" 4
.IX Item "Text::Balanced"
.IP "Time::HiRes" 4
.IX Item "Time::HiRes"
.PD
Use of \fInanosleep()\fR, if available, allows mixing subsecond sleeps with
alarms.
.IP "threads" 4
.IX Item "threads"
Several fixes, for example for \fIjoin()\fR problems and memory
leaks.  In some platforms (like Linux) that use glibc the minimum memory
footprint of one ithread has been reduced by several hundred kilobytes.
.IP "threads::shared" 4
.IX Item "threads::shared"
Many memory leaks have been fixed.
.IP "Unicode::Collate" 4
.IX Item "Unicode::Collate"
.PD 0
.IP "Unicode::Normalize" 4
.IX Item "Unicode::Normalize"
.IP "Win32::GetFolderPath" 4
.IX Item "Win32::GetFolderPath"
.IP "Win32::GetOSVersion" 4
.IX Item "Win32::GetOSVersion"
.PD
Now returns extra information.
.SH "Utility Changes"
.IX Header "Utility Changes"
The \f(CW\*(C`h2xs\*(C'\fR utility now produces a more modern layout:
\&\fIFoo\-Bar/lib/Foo/Bar.pm\fR instead of \fIFoo/Bar/Bar.pm\fR.
Also, the boilerplate test is now called \fIt/Foo\-Bar.t\fR
instead of \fIt/1.t\fR.
.PP
The Perl debugger (\fIlib/perl5db.pl\fR) has now been extensively
documented and bugs found while documenting have been fixed.
.PP
\&\f(CW\*(C`perldoc\*(C'\fR has been rewritten from scratch to be more robust and
feature rich.
.PP
\&\f(CW\*(C`perlcc \-B\*(C'\fR works now at least somewhat better, while \f(CW\*(C`perlcc \-c\*(C'\fR
is rather more broken.  (The Perl compiler suite as a whole continues
to be experimental.)
.SH "New Documentation"
.IX Header "New Documentation"
perl573delta has been added to list the differences between the
(now quite obsolete) development releases 5.7.2 and 5.7.3.
.PP
perl58delta has been added: it is the perldelta of 5.8.0, detailing
the differences between 5.6.0 and 5.8.0.
.PP
perlartistic has been added: it is the Artistic License in pod format,
making it easier for modules to refer to it.
.PP
perlcheat has been added: it is a Perl cheat sheet.
.PP
perlgpl has been added: it is the \s-1GNU\s0 General Public License in pod
format, making it easier for modules to refer to it.
.PP
perlmacosx has been added to tell about the installation and use
of Perl in Mac \s-1OS X.\s0
.PP
perlos400 has been added to tell about the installation and use
of Perl in \s-1OS/400 PASE.\s0
.PP
perlreref has been added: it is a regular expressions quick reference.
.SH "Installation and Configuration Improvements"
.IX Header "Installation and Configuration Improvements"
The Unix standard Perl location, \fI/usr/bin/perl\fR, is no longer
overwritten by default if it exists.  This change was very prudent
because so many Unix vendors already provide a \fI/usr/bin/perl\fR,
but simultaneously many system utilities may depend on that
exact version of Perl, so better not to overwrite it.
.PP
One can now specify installation directories for site and vendor man
and \s-1HTML\s0 pages, and site and vendor scripts.  See \fI\s-1INSTALL\s0\fR.
.PP
One can now specify a destination directory for Perl installation
by specifying the \s-1DESTDIR\s0 variable for \f(CW\*(C`make install\*(C'\fR.  (This feature
is slightly different from the previous \f(CW\*(C`Configure \-Dinstallprefix=...\*(C'\fR.)
See \fI\s-1INSTALL\s0\fR.
.PP
gcc versions 3.x introduced a new warning that caused a lot of noise
during Perl compilation: \f(CW\*(C`gcc \-Ialreadyknowndirectory (warning:
changing search order)\*(C'\fR.  This warning has now been avoided by
Configure weeding out such directories before the compilation.
.PP
One can now build subsets of Perl core modules by using the
Configure flags \f(CW\*(C`\-Dnoextensions=...\*(C'\fR and \f(CW\*(C`\-Donlyextensions=...\*(C'\fR,
see \fI\s-1INSTALL\s0\fR.
.SS "Platform-specific enhancements"
.IX Subsection "Platform-specific enhancements"
In Cygwin Perl can now be built with threads (\f(CW\*(C`Configure \-Duseithreads\*(C'\fR).
This works with both Cygwin 1.3.22 and Cygwin 1.5.3.
.PP
In newer FreeBSD releases Perl 5.8.0 compilation failed because of
trying to use \fImalloc.h\fR, which in FreeBSD is just a dummy file, and
a fatal error to even try to use.  Now \fImalloc.h\fR is not used.
.PP
Perl is now known to build also in Hitachi HI-UXMPP.
.PP
Perl is now known to build again in LynxOS.
.PP
Mac \s-1OS X\s0 now installs with Perl version number embedded in
installation directory names for easier upgrading of user-compiled
Perl, and the installation directories in general are more standard.
In other words, the default installation no longer breaks the
Apple-provided Perl.  On the other hand, with \f(CW\*(C`Configure \-Dprefix=/usr\*(C'\fR
you can now really replace the Apple-supplied Perl (\fBplease be careful\fR).
.PP
Mac \s-1OS X\s0 now builds Perl statically by default.  This change was done
mainly for faster startup times.  The Apple-provided Perl is still
dynamically linked and shared, and you can enable the sharedness for
your own Perl builds by \f(CW\*(C`Configure \-Duseshrplib\*(C'\fR.
.PP
Perl has been ported to \s-1IBM\s0's \s-1OS/400 PASE\s0 environment.  The best way
to build a Perl for \s-1PASE\s0 is to use an \s-1AIX\s0 host as a cross-compilation
environment.  See \s-1README\s0.os400.
.PP
Yet another cross-compilation option has been added: now Perl builds
on OpenZaurus, an Linux distribution based on Mandrake + Embedix for
the Sharp Zaurus \s-1PDA. \s0 See the Cross/README file.
.PP
Tru64 when using gcc 3 drops the optimisation for \fItoke.c\fR to \f(CW\*(C`\-O2\*(C'\fR
because of gigantic memory use with the default \f(CW\*(C`\-O3\*(C'\fR.
.PP
Tru64 can now build Perl with the newer Berkeley DBs.
.PP
Building Perl on WinCE has been much enhanced, see \fI\s-1README\s0.ce\fR
and \fI\s-1README\s0.perlce\fR.
.SH "Selected Bug Fixes"
.IX Header "Selected Bug Fixes"
.SS "Closures, eval and lexicals"
.IX Subsection "Closures, eval and lexicals"
There have been many fixes in the area of anonymous subs, lexicals and
closures.  Although this means that Perl is now more \*(L"correct\*(R", it is
possible that some existing code will break that happens to rely on
the faulty behaviour.  In practice this is unlikely unless your code
contains a very complex nesting of anonymous subs, evals and lexicals.
.SS "Generic fixes"
.IX Subsection "Generic fixes"
If an input filehandle is marked \f(CW\*(C`:utf8\*(C'\fR and Perl sees illegal \s-1UTF\-8\s0
coming in when doing \f(CW\*(C`<FH>\*(C'\fR, if warnings are enabled a warning is
immediately given \- instead of being silent about it and Perl being
unhappy about the broken data later.  (The \f(CW\*(C`:encoding(utf8)\*(C'\fR layer
also works the same way.)
.PP
binmode(\s-1SOCKET, \s0\*(L":utf8\*(R") only worked on the input side, not on the
output side of the socket.  Now it works both ways.
.PP
For threaded Perls certain system database functions like \fIgetpwent()\fR
and \fIgetgrent()\fR now grow their result buffer dynamically, instead of
failing.  This means that at sites with lots of users and groups the
functions no longer fail by returning only partial results.
.PP
Perl 5.8.0 had accidentally broken the capability for users
to define their own uppercase<\->lowercase Unicode mappings
(as advertised by the Camel).  This feature has been fixed and
is also documented better.
.PP
In 5.8.0 this
.PP
.Vb 1
\&        $some_unicode .= <FH>;
.Ve
.PP
didn't work correctly but instead corrupted the data.  This has now
been fixed.
.PP
Tied methods like \s-1FETCH\s0 etc. may now safely access tied values, i.e.
resulting in a recursive call to \s-1FETCH\s0 etc.  Remember to break the
recursion, though.
.PP
At startup Perl blocks the \s-1SIGFPE\s0 signal away since there isn't much
Perl can do about it.  Previously this blocking was in effect also for
programs executed from within Perl.  Now Perl restores the original
\&\s-1SIGFPE\s0 handling routine, whatever it was, before running external
programs.
.PP
Linenumbers in Perl scripts may now be greater than 65536, or 2**16.
(Perl scripts have always been able to be larger than that, it's just
that the linenumber for reported errors and warnings have \*(L"wrapped
around\*(R".)  While scripts that large usually indicate a need to rethink
your code a bit, such Perl scripts do exist, for example as results
from generated code.  Now linenumbers can go all the way to
4294967296, or 2**32.
.SS "Platform-specific fixes"
.IX Subsection "Platform-specific fixes"
Linux
.IP "\(bu" 4
Setting \f(CW$0\fR works again (with certain limitations that
Perl cannot do much about: see \*(L"$0\*(R" in perlvar)
.PP
HP-UX
.IP "\(bu" 4
Setting \f(CW$0\fR now works.
.PP
\&\s-1VMS\s0
.IP "\(bu" 4
Configuration now tests for the presence of \f(CW\*(C`poll()\*(C'\fR, and IO::Poll
now uses the vendor-supplied function if detected.
.IP "\(bu" 4
A rare access violation at Perl start-up could occur if the Perl image was
installed with privileges or if there was an identifier with the
subsystem attribute set in the process's rightslist.  Either of these
circumstances triggered tainting code that contained a pointer bug. 
The faulty pointer arithmetic has been fixed.
.IP "\(bu" 4
The length limit on values (not keys) in the \f(CW%ENV\fR hash has been raised
from 255 bytes to 32640 bytes (except when the \s-1PERL_ENV_TABLES\s0 setting
overrides the default use of logical names for \f(CW%ENV\fR).  If it is
necessary to access these long values from outside Perl, be aware that
they are implemented using search list logical names that store the
value in pieces, each 255\-byte piece (up to 128 of them) being an
element in the search list. When doing a lookup in \f(CW%ENV\fR from within
Perl, the elements are combined into a single value.  The existing
VMS-specific ability to access individual elements of a search list
logical name via the \f(CW$ENV\fR{'foo;N'} syntax (where N is the search list
index) is unimpaired.
.IP "\(bu" 4
The piping implementation now uses local rather than global \s-1DCL\s0
symbols for inter-process communication.
.IP "\(bu" 4
File::Find could become confused when navigating to a relative
directory whose name collided with a logical name.  This problem has
been corrected by adding directory syntax to relative path names, thus
preventing logical name translation.
.PP
Win32
.IP "\(bu" 4
A memory leak in the \fIfork()\fR emulation has been fixed.
.IP "\(bu" 4
The return value of the \fIioctl()\fR built-in function was accidentally
broken in 5.8.0.  This has been corrected.
.IP "\(bu" 4
The internal message loop executed by perl during blocking operations
sometimes interfered with messages that were external to Perl.
This often resulted in blocking operations terminating prematurely or
returning incorrect results, when Perl was executing under environments
that could generate Windows messages.  This has been corrected.
.IP "\(bu" 4
Pipes and sockets are now automatically in binary mode.
.IP "\(bu" 4
The four-argument form of \fIselect()\fR did not preserve $! (errno) properly
when there were errors in the underlying call.  This is now fixed.
.IP "\(bu" 4
The \*(L"\s-1CR CR LF\*(R"\s0 problem of has been fixed, binmode(\s-1FH, \s0\*(L":crlf\*(R")
is now effectively a no-op.
.SH "New or Changed Diagnostics"
.IX Header "New or Changed Diagnostics"
All the warnings related to \fIpack()\fR and \fIunpack()\fR were made more
informative and consistent.
.ie n .SS "Changed ""A thread exited while %d threads were running"""
.el .SS "Changed ``A thread exited while \f(CW%d\fP threads were running''"
.IX Subsection "Changed A thread exited while %d threads were running"
The old version
.PP
.Vb 1
\&    A thread exited while %d other threads were still running
.Ve
.PP
was misleading because the \*(L"other\*(R" included also the thread giving
the warning.
.ie n .SS "Removed ""Attempt to clear a restricted hash"""
.el .SS "Removed ``Attempt to clear a restricted hash''"
.IX Subsection "Removed Attempt to clear a restricted hash"
It is not illegal to clear a restricted hash, so the warning
was removed.
.ie n .SS "New ""Illegal declaration of anonymous subroutine"""
.el .SS "New ``Illegal declaration of anonymous subroutine''"
.IX Subsection "New Illegal declaration of anonymous subroutine"
You must specify the block of code for \f(CW\*(C`sub\*(C'\fR.
.ie n .SS "Changed ""Invalid range ""%s"" in transliteration operator"""
.el .SS "Changed ``Invalid range ''%s`` in transliteration operator''"
.IX Subsection "Changed Invalid range %s in transliteration operator"
The old version
.PP
.Vb 1
\&    Invalid [] range "%s" in transliteration operator
.Ve
.PP
was simply wrong because there are no \*(L"[] ranges\*(R" in tr///.
.ie n .SS "New ""Missing control char name in \ec"""
.el .SS "New ``Missing control char name in \ec''"
.IX Subsection "New Missing control char name in c"
Self-explanatory.
.ie n .SS "New ""Newline in left-justified string for %s"""
.el .SS "New ``Newline in left-justified string for \f(CW%s\fP''"
.IX Subsection "New Newline in left-justified string for %s"
The padding spaces would appear after the newline, which is
probably not what you had in mind.
.ie n .SS "New ""Possible precedence problem on bitwise %c operator"""
.el .SS "New ``Possible precedence problem on bitwise \f(CW%c\fP operator''"
.IX Subsection "New Possible precedence problem on bitwise %c operator"
If you think this
.PP
.Vb 1
\&    $x & $y == 0
.Ve
.PP
tests whether the bitwise \s-1AND\s0 of \f(CW$x\fR and \f(CW$y\fR is zero,
you will like this warning.
.ie n .SS "New ""Pseudo-hashes are deprecated"""
.el .SS "New ``Pseudo-hashes are deprecated''"
.IX Subsection "New Pseudo-hashes are deprecated"
This warning should have been already in 5.8.0, since they are.
.ie n .SS "New ""\fIread()\fP on %s filehandle %s"""
.el .SS "New ``\fIread()\fP on \f(CW%s\fP filehandle \f(CW%s\fP''"
.IX Subsection "New read() on %s filehandle %s"
You cannot \fIread()\fR (or \fIsysread()\fR) from a closed or unopened filehandle.
.ie n .SS "New ""5.005 threads are deprecated"""
.el .SS "New ``5.005 threads are deprecated''"
.IX Subsection "New 5.005 threads are deprecated"
This warning should have been already in 5.8.0, since they are.
.ie n .SS "New ""Tied variable freed while still in use"""
.el .SS "New ``Tied variable freed while still in use''"
.IX Subsection "New Tied variable freed while still in use"
Something pulled the plug on a live tied variable, Perl plays
safe by bailing out.
.ie n .SS "New ""To%s: illegal mapping '%s'"""
.el .SS "New ``To%s: illegal mapping '%s'''"
.IX Subsection "New To%s: illegal mapping '%s'"
An illegal user-defined Unicode casemapping was specified.
.ie n .SS "New ""Use of freed value in iteration"""
.el .SS "New ``Use of freed value in iteration''"
.IX Subsection "New Use of freed value in iteration"
Something modified the values being iterated over.  This is not good.
.SH "Changed Internals"
.IX Header "Changed Internals"
These news matter to you only if you either write \s-1XS\s0 code or like to
know about or hack Perl internals (using Devel::Peek or any of the
\&\f(CW\*(C`B::\*(C'\fR modules counts), or like to run Perl with the \f(CW\*(C`\-D\*(C'\fR option.
.PP
The embedding examples of perlembed have been reviewed to be
up to date and consistent: for example, the correct use of
\&\s-1\fIPERL_SYS_INIT3\s0()\fR and \s-1\fIPERL_SYS_TERM\s0()\fR.
.PP
Extensive reworking of the pad code (the code responsible
for lexical variables) has been conducted by Dave Mitchell.
.PP
Extensive work on the v\-strings by John Peacock.
.PP
\&\s-1UTF\-8\s0 length and position cache: to speed up the handling of Unicode
(\s-1UTF\-8\s0) scalars, a cache was introduced.  Potential problems exist if
an extension bypasses the official APIs and directly modifies the \s-1PV\s0
of an \s-1SV:\s0 the \s-1UTF\-8\s0 cache does not get cleared as it should.
.PP
APIs obsoleted in Perl 5.8.0, like sv_2pv, sv_catpvn, sv_catsv,
sv_setsv, are again available.
.PP
Certain Perl core C APIs like cxinc and regatom are no longer
available at all to code outside the Perl core of the Perl core
extensions.  This is intentional.  They never should have been
available with the shorter names, and if you application depends on
them, you should (be ashamed and) contact perl5\-porters to discuss
what are the proper APIs.
.PP
Certain Perl core C APIs like \f(CW\*(C`Perl_list\*(C'\fR are no longer available
without their \f(CW\*(C`Perl_\*(C'\fR prefix.  If your \s-1XS\s0 module stops working
because some functions cannot be found, in many cases a simple fix is
to add the \f(CW\*(C`Perl_\*(C'\fR prefix to the function and the thread context
\&\f(CW\*(C`aTHX_\*(C'\fR as the first argument of the function call.  This is also how
it should always have been done: letting the Perl_\-less forms to leak
from the core was an accident.  For cleaner embedding you can also
force this for all APIs by defining at compile time the cpp define
\&\s-1PERL_NO_SHORT_NAMES.\s0
.PP
\&\fIPerl_save_bool()\fR has been added.
.PP
Regexp objects (those created with \f(CW\*(C`qr\*(C'\fR) now have S\-magic rather than
R\-magic.  This fixed regexps of the form /...(??{...;$x})/ to no
longer ignore changes made to \f(CW$x\fR.  The S\-magic avoids dropping
the caching optimization and making (??{...}) constructs obscenely
slow (and consequently useless).  See also \*(L"Magic Variables\*(R" in perlguts.
Regexp::Copy was affected by this change.
.PP
The Perl internal debugging macros \s-1\fIDEBUG\s0()\fR and \s-1\fIDEB\s0()\fR have been renamed
to \s-1\fIPERL_DEBUG\s0()\fR and \s-1\fIPERL_DEB\s0()\fR to avoid namespace conflicts.
.PP
\&\f(CW\*(C`\-DL\*(C'\fR removed (the leaktest had been broken and unsupported for years,
use alternative debugging mallocs or tools like valgrind and Purify).
.PP
Verbose modifier \f(CW\*(C`v\*(C'\fR added for \f(CW\*(C`\-DXv\*(C'\fR and \f(CW\*(C`\-Dsv\*(C'\fR, see perlrun.
.SH "New Tests"
.IX Header "New Tests"
In Perl 5.8.0 there were about 69000 separate tests in about 700 test files,
in Perl 5.8.1 there are about 77000 separate tests in about 780 test files.
The exact numbers depend on the Perl configuration and on the operating
system platform.
.SH "Known Problems"
.IX Header "Known Problems"
The hash randomisation mentioned in \*(L"Incompatible Changes\*(R" is definitely
problematic: it will wake dormant bugs and shake out bad assumptions.
.PP
If you want to use mod_perl 2.x with Perl 5.8.1, you will need
mod_perl\-1.99_10 or higher.  Earlier versions of mod_perl 2.x
do not work with the randomised hashes.  (mod_perl 1.x works fine.)
You will also need Apache::Test 1.04 or higher.
.PP
Many of the rarer platforms that worked 100% or pretty close to it
with perl 5.8.0 have been left a little bit untended since their
maintainers have been otherwise busy lately, and therefore there will
be more failures on those platforms.  Such platforms include Mac \s-1OS\s0
Classic, \s-1IBM\s0 z/OS (and other \s-1EBCDIC\s0 platforms), and NetWare.  The most
common Perl platforms (Unix and Unix-like, Microsoft platforms, and
\&\s-1VMS\s0) have large enough testing and expert population that they are
doing well.
.SS "Tied hashes in scalar context"
.IX Subsection "Tied hashes in scalar context"
Tied hashes do not currently return anything useful in scalar context,
for example when used as boolean tests:
.PP
.Vb 1
\&        if (%tied_hash) { ... }
.Ve
.PP
The current nonsensical behaviour is always to return false,
regardless of whether the hash is empty or has elements.
.PP
The root cause is that there is no interface for the implementors of
tied hashes to implement the behaviour of a hash in scalar context.
.SS "Net::Ping 450_service and 510_ping_udp failures"
.IX Subsection "Net::Ping 450_service and 510_ping_udp failures"
The subtests 9 and 18 of lib/Net/Ping/t/450_service.t, and the
subtest 2 of lib/Net/Ping/t/510_ping_udp.t might fail if you have
an unusual networking setup.  For example in the latter case the
test is trying to send a \s-1UDP\s0 ping to the \s-1IP\s0 address 127.0.0.1.
.SS "B::C"
.IX Subsection "B::C"
The C\-generating compiler backend B::C (the frontend being
\&\f(CW\*(C`perlcc \-c\*(C'\fR) is even more broken than it used to be because of
the extensive lexical variable changes.  (The good news is that
B::Bytecode and ByteLoader are better than they used to be.)
.SH "Platform Specific Problems"
.IX Header "Platform Specific Problems"
.SS "\s-1EBCDIC\s0 Platforms"
.IX Subsection "EBCDIC Platforms"
\&\s-1IBM\s0 z/OS and other \s-1EBCDIC\s0 platforms continue to be problematic
regarding Unicode support.  Many Unicode tests are skipped when
they really should be fixed.
.SS "Cygwin 1.5 problems"
.IX Subsection "Cygwin 1.5 problems"
In Cygwin 1.5 the \fIio/tell\fR and \fIop/sysio\fR tests have failures for
some yet unknown reason.  In 1.5.5 the threads tests stress_cv,
stress_re, and stress_string are failing unless the environment
variable \s-1PERLIO\s0 is set to \*(L"perlio\*(R" (which makes also the io/tell
failure go away).
.PP
Perl 5.8.1 does build and work well with Cygwin 1.3: with (uname \-a)
\&\f(CW\*(C`CYGWIN_NT\-5.0 ... 1.3.22(0.78/3/2) 2003\-03\-18 09:20 i686 ...\*(C'\fR
a 100% \*(L"make test\*(R"  was achieved with \f(CW\*(C`Configure \-des \-Duseithreads\*(C'\fR.
.SS "HP-UX: \s-1HP\s0 cc warnings about sendfile and sendpath"
.IX Subsection "HP-UX: HP cc warnings about sendfile and sendpath"
With certain \s-1HP C\s0 compiler releases (e.g. B.11.11.02) you will
get many warnings like this (lines wrapped for easier reading):
.PP
.Vb 6
\&  cc: "/usr/include/sys/socket.h", line 504: warning 562:
\&    Redeclaration of "sendfile" with a different storage class specifier:
\&      "sendfile" will have internal linkage.
\&  cc: "/usr/include/sys/socket.h", line 505: warning 562:
\&    Redeclaration of "sendpath" with a different storage class specifier:
\&      "sendpath" will have internal linkage.
.Ve
.PP
The warnings show up both during the build of Perl and during certain
lib/ExtUtils tests that invoke the C compiler.  The warning, however,
is not serious and can be ignored.
.SS "\s-1IRIX:\s0 t/uni/tr_7jis.t falsely failing"
.IX Subsection "IRIX: t/uni/tr_7jis.t falsely failing"
The test t/uni/tr_7jis.t is known to report failure under 'make test'
or the test harness with certain releases of \s-1IRIX \s0(at least \s-1IRIX 6.5\s0
and MIPSpro Compilers Version 7.3.1.1m), but if run manually the test
fully passes.
.SS "Mac \s-1OS X:\s0 no usemymalloc"
.IX Subsection "Mac OS X: no usemymalloc"
The Perl malloc (\f(CW\*(C`\-Dusemymalloc\*(C'\fR) does not work at all in Mac \s-1OS X.\s0
This is not that serious, though, since the native malloc works just
fine.
.SS "Tru64: No threaded builds with \s-1GNU\s0 cc (gcc)"
.IX Subsection "Tru64: No threaded builds with GNU cc (gcc)"
In the latest Tru64 releases (e.g. v5.1B or later) gcc cannot be used
to compile a threaded Perl (\-Duseithreads) because the system
\&\f(CW\*(C`<pthread.h>\*(C'\fR file doesn't know about gcc.
.SS "Win32: sysopen, sysread, syswrite"
.IX Subsection "Win32: sysopen, sysread, syswrite"
As of the 5.8.0 release, \fIsysopen()\fR/\fIsysread()\fR/\fIsyswrite()\fR do not behave
like they used to in 5.6.1 and earlier with respect to \*(L"text\*(R" mode.
These built-ins now always operate in \*(L"binary\*(R" mode (even if \fIsysopen()\fR
was passed the O_TEXT flag, or if \fIbinmode()\fR was used on the file
handle).  Note that this issue should only make a difference for disk
files, as sockets and pipes have always been in \*(L"binary\*(R" mode in the
Windows port.  As this behavior is currently considered a bug,
compatible behavior may be re-introduced in a future release.  Until
then, the use of \fIsysopen()\fR, \fIsysread()\fR and \fIsyswrite()\fR is not supported
for \*(L"text\*(R" mode operations.
.SH "Future Directions"
.IX Header "Future Directions"
The following things \fBmight\fR happen in future.  The first publicly
available releases having these characteristics will be the developer
releases Perl 5.9.x, culminating in the Perl 5.10.0 release.  These
are our best guesses at the moment: we reserve the right to rethink.
.IP "\(bu" 4
PerlIO will become The Default.  Currently (in Perl 5.8.x) the stdio
library is still used if Perl thinks it can use certain tricks to
make stdio go \fBreally\fR fast.  For future releases our goal is to
make PerlIO go even faster.
.IP "\(bu" 4
A new feature called \fIassertions\fR will be available.  This means that
one can have code called assertions sprinkled in the code: usually
they are optimised away, but they can be enabled with the \f(CW\*(C`\-A\*(C'\fR option.
.IP "\(bu" 4
A new operator \f(CW\*(C`//\*(C'\fR (defined-or) will be available.  This means that
one will be able to say
.Sp
.Vb 1
\&    $a // $b
.Ve
.Sp
instead of
.Sp
.Vb 1
\&   defined $a ? $a : $b
.Ve
.Sp
and
.Sp
.Vb 1
\&   $c //= $d;
.Ve
.Sp
instead of
.Sp
.Vb 1
\&   $c = $d unless defined $c;
.Ve
.Sp
The operator will have the same precedence and associativity as \f(CW\*(C`||\*(C'\fR.
A source code patch against the Perl 5.8.1 sources will be available
in \s-1CPAN\s0 as \fIauthors/id/H/HM/HMBRAND/dor\-5.8.1.diff\fR.
.IP "\(bu" 4
\&\f(CW\*(C`unpack()\*(C'\fR will default to unpacking the \f(CW$_\fR.
.IP "\(bu" 4
Various Copy-On-Write techniques will be investigated in hopes
of speeding up Perl.
.IP "\(bu" 4
\&\s-1CPANPLUS,\s0 Inline, and Module::Build will become core modules.
.IP "\(bu" 4
The ability to write true lexically scoped pragmas will be introduced.
.IP "\(bu" 4
Work will continue on the bytecompiler and byteloader.
.IP "\(bu" 4
v\-strings as they currently exist are scheduled to be deprecated.  The
v\-less form (1.2.3) will become a \*(L"version object\*(R" when used with \f(CW\*(C`use\*(C'\fR,
\&\f(CW\*(C`require\*(C'\fR, and \f(CW$VERSION\fR.  $^V will also be a \*(L"version object\*(R" so the
printf(\*(L"%vd\*(R",...) construct will no longer be needed.  The v\-ful version
(v1.2.3) will become obsolete.  The equivalence of strings and v\-strings (e.g.
that currently 5.8.0 is equal to \*(L"\e5\e8\e0\*(R") will go away.  \fBThere may be no
deprecation warning for v\-strings\fR, though: it is quite hard to detect when
v\-strings are being used safely, and when they are not.
.IP "\(bu" 4
5.005 Threads Will Be Removed
.IP "\(bu" 4
The \f(CW$*\fR Variable Will Be Removed
(it was deprecated a long time ago)
.IP "\(bu" 4
Pseudohashes Will Be Removed
.SH "Reporting Bugs"
.IX Header "Reporting Bugs"
If you find what you think is a bug, you might check the articles
recently posted to the comp.lang.perl.misc newsgroup and the perl
bug database at http://bugs.perl.org/ .  There may also be
information at http://www.perl.com/ , the Perl Home Page.
.PP
If you believe you have an unreported bug, please run the \fBperlbug\fR
program included with your release.  Be sure to trim your bug down
to a tiny but sufficient test case.  Your bug report, along with the
output of \f(CW\*(C`perl \-V\*(C'\fR, will be sent off to perlbug@perl.org to be
analysed by the Perl porting team.  You can browse and search
the Perl 5 bugs at http://bugs.perl.org/
.SH "SEE ALSO"
.IX Header "SEE ALSO"
The \fIChanges\fR file for exhaustive details on what changed.
.PP
The \fI\s-1INSTALL\s0\fR file for how to build Perl.
.PP
The \fI\s-1README\s0\fR file for general stuff.
.PP
The \fIArtistic\fR and \fICopying\fR files for copyright information.
                                                osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perl581delta5.16.1                           0100644 0001750 0001750 00000141433 12566207413 023470  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERL581DELTA 1"
.TH PERL581DELTA 1 "2013-02-26" "perl v5.16.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perl581delta \- what is new for perl v5.8.1
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document describes differences between the 5.8.0 release and
the 5.8.1 release.
.PP
If you are upgrading from an earlier release such as 5.6.1, first read
the perl58delta, which describes differences between 5.6.0 and
5.8.0.
.PP
In case you are wondering about 5.6.1, it was bug-fix-wise rather
identical to the development release 5.7.1.  Confused?  This timeline
hopefully helps a bit: it lists the new major releases, their maintenance
releases, and the development releases.
.PP
.Vb 1
\&          New     Maintenance  Development
\&
\&          5.6.0                             2000\-Mar\-22
\&                               5.7.0        2000\-Sep\-02
\&                  5.6.1                     2001\-Apr\-08
\&                               5.7.1        2001\-Apr\-09
\&                               5.7.2        2001\-Jul\-13
\&                               5.7.3        2002\-Mar\-05
\&          5.8.0                             2002\-Jul\-18
\&                  5.8.1                     2003\-Sep\-25
.Ve
.SH "Incompatible Changes"
.IX Header "Incompatible Changes"
.SS "Hash Randomisation"
.IX Subsection "Hash Randomisation"
Mainly due to security reasons, the \*(L"random ordering\*(R" of hashes
has been made even more random.  Previously while the order of hash
elements from \fIkeys()\fR, \fIvalues()\fR, and \fIeach()\fR was essentially random,
it was still repeatable.  Now, however, the order varies between
different runs of Perl.
.PP
\&\fBPerl has never guaranteed any ordering of the hash keys\fR, and the
ordering has already changed several times during the lifetime of
Perl 5.  Also, the ordering of hash keys has always been, and
continues to be, affected by the insertion order.
.PP
The added randomness may affect applications.
.PP
One possible scenario is when output of an application has included
hash data.  For example, if you have used the Data::Dumper module to
dump data into different files, and then compared the files to see
whether the data has changed, now you will have false positives since
the order in which hashes are dumped will vary.  In general the cure
is to sort the keys (or the values); in particular for Data::Dumper to
use the \f(CW\*(C`Sortkeys\*(C'\fR option.  If some particular order is really
important, use tied hashes: for example the Tie::IxHash module
which by default preserves the order in which the hash elements
were added.
.PP
More subtle problem is reliance on the order of \*(L"global destruction\*(R".
That is what happens at the end of execution: Perl destroys all data
structures, including user data.  If your destructors (the \s-1DESTROY\s0
subroutines) have assumed any particular ordering to the global
destruction, there might be problems ahead.  For example, in a
destructor of one object you cannot assume that objects of any other
class are still available, unless you hold a reference to them.
If the environment variable \s-1PERL_DESTRUCT_LEVEL\s0 is set to a non-zero
value, or if Perl is exiting a spawned thread, it will also destruct
the ordinary references and the symbol tables that are no longer in use.
You can't call a class method or an ordinary function on a class that
has been collected that way.
.PP
The hash randomisation is certain to reveal hidden assumptions about
some particular ordering of hash elements, and outright bugs: it
revealed a few bugs in the Perl core and core modules.
.PP
To disable the hash randomisation in runtime, set the environment
variable \s-1PERL_HASH_SEED\s0 to 0 (zero) before running Perl (for more
information see \*(L"\s-1PERL_HASH_SEED\s0\*(R" in perlrun), or to disable the feature
completely in compile time, compile with \f(CW\*(C`\-DNO_HASH_SEED\*(C'\fR (see \fI\s-1INSTALL\s0\fR).
.PP
See \*(L"Algorithmic Complexity Attacks\*(R" in perlsec for the original
rationale behind this change.
.SS "\s-1UTF\-8\s0 On Filehandles No Longer Activated By Locale"
.IX Subsection "UTF-8 On Filehandles No Longer Activated By Locale"
In Perl 5.8.0 all filehandles, including the standard filehandles,
were implicitly set to be in Unicode \s-1UTF\-8\s0 if the locale settings
indicated the use of \s-1UTF\-8\s0.  This feature caused too many problems,
so the feature was turned off and redesigned: see \*(L"Core Enhancements\*(R".
.ie n .SS "Single-number v\-strings are no longer v\-strings before ""=>"""
.el .SS "Single-number v\-strings are no longer v\-strings before ``=>''"
.IX Subsection "Single-number v-strings are no longer v-strings before =>"
The version strings or v\-strings (see \*(L"Version Strings\*(R" in perldata)
feature introduced in Perl 5.6.0 has been a source of some confusion\*(--
especially when the user did not want to use it, but Perl thought it
knew better.  Especially troublesome has been the feature that before
a \*(L"=>\*(R" a version string (a \*(L"v\*(R" followed by digits) has been interpreted
as a v\-string instead of a string literal.  In other words:
.PP
.Vb 1
\&        %h = ( v65 => 42 );
.Ve
.PP
has meant since Perl 5.6.0
.PP
.Vb 1
\&        %h = ( \*(AqA\*(Aq => 42 );
.Ve
.PP
(at least in platforms of \s-1ASCII\s0 progeny)  Perl 5.8.1 restores the
more natural interpretation
.PP
.Vb 1
\&        %h = ( \*(Aqv65\*(Aq => 42 );
.Ve
.PP
The multi-number v\-strings like v65.66 and 65.66.67 still continue to
be v\-strings in Perl 5.8.
.SS "(Win32) The \-C Switch Has Been Repurposed"
.IX Subsection "(Win32) The -C Switch Has Been Repurposed"
The \-C switch has changed in an incompatible way.  The old semantics
of this switch only made sense in Win32 and only in the \*(L"use utf8\*(R"
universe in 5.6.x releases, and do not make sense for the Unicode
implementation in 5.8.0.  Since this switch could not have been used
by anyone, it has been repurposed.  The behavior that this switch
enabled in 5.6.x releases may be supported in a transparent,
data-dependent fashion in a future release.
.PP
For the new life of this switch, see \*(L"\s-1UTF\-8\s0 no longer default under
\&\s-1UTF\-8\s0 locales\*(R", and \*(L"\-C\*(R" in perlrun.
.SS "(Win32) The /d Switch Of cmd.exe"
.IX Subsection "(Win32) The /d Switch Of cmd.exe"
Perl 5.8.1 uses the /d switch when running the cmd.exe shell
internally for \fIsystem()\fR, backticks, and when opening pipes to external
programs.  The extra switch disables the execution of AutoRun commands
from the registry, which is generally considered undesirable when
running external programs.  If you wish to retain compatibility with
the older behavior, set \s-1PERL5SHELL\s0 in your environment to \f(CW\*(C`cmd /x/c\*(C'\fR.
.SH "Core Enhancements"
.IX Header "Core Enhancements"
.SS "\s-1UTF\-8\s0 no longer default under \s-1UTF\-8\s0 locales"
.IX Subsection "UTF-8 no longer default under UTF-8 locales"
In Perl 5.8.0 many Unicode features were introduced.   One of them
was found to be of more nuisance than benefit: the automagic
(and silent) \*(L"UTF\-8\-ification\*(R" of filehandles, including the
standard filehandles, if the user's locale settings indicated
use of \s-1UTF\-8\s0.
.PP
For example, if you had \f(CW\*(C`en_US.UTF\-8\*(C'\fR as your locale, your \s-1STDIN\s0 and
\&\s-1STDOUT\s0 were automatically \*(L"\s-1UTF\-8\s0\*(R", in other words an implicit
binmode(..., \*(L":utf8\*(R") was made.  This meant that trying to print, say,
\&\fIchr\fR\|(0xff), ended up printing the bytes 0xc3 0xbf.  Hardly what
you had in mind unless you were aware of this feature of Perl 5.8.0.
The problem is that the vast majority of people weren't: for example
in RedHat releases 8 and 9 the \fBdefault\fR locale setting is \s-1UTF\-8\s0, so
all RedHat users got \s-1UTF\-8\s0 filehandles, whether they wanted it or not.
The pain was intensified by the Unicode implementation of Perl 5.8.0
(still) having nasty bugs, especially related to the use of s/// and
tr///.  (Bugs that have been fixed in 5.8.1)
.PP
Therefore a decision was made to backtrack the feature and change it
from implicit silent default to explicit conscious option.  The new
Perl command line option \f(CW\*(C`\-C\*(C'\fR and its counterpart environment
variable \s-1PERL_UNICODE\s0 can now be used to control how Perl and Unicode
interact at interfaces like I/O and for example the command line
arguments.  See \*(L"\-C\*(R" in perlrun and \*(L"\s-1PERL_UNICODE\s0\*(R" in perlrun for more
information.
.SS "Unsafe signals again available"
.IX Subsection "Unsafe signals again available"
In Perl 5.8.0 the so-called \*(L"safe signals\*(R" were introduced.  This
means that Perl no longer handles signals immediately but instead
\&\*(L"between opcodes\*(R", when it is safe to do so.  The earlier immediate
handling easily could corrupt the internal state of Perl, resulting
in mysterious crashes.
.PP
However, the new safer model has its problems too.  Because now an
opcode, a basic unit of Perl execution, is never interrupted but
instead let to run to completion, certain operations that can take a
long time now really do take a long time.  For example, certain
network operations have their own blocking and timeout mechanisms, and
being able to interrupt them immediately would be nice.
.PP
Therefore perl 5.8.1 introduces a \*(L"backdoor\*(R" to restore the pre\-5.8.0
(pre\-5.7.3, really) signal behaviour.  Just set the environment variable
\&\s-1PERL_SIGNALS\s0 to \f(CW\*(C`unsafe\*(C'\fR, and the old immediate (and unsafe)
signal handling behaviour returns.  See \*(L"\s-1PERL_SIGNALS\s0\*(R" in perlrun
and \*(L"Deferred Signals (Safe Signals)\*(R" in perlipc.
.PP
In completely unrelated news, you can now use safe signals with
POSIX::SigAction.  See \*(L"POSIX::SigAction\*(R" in \s-1POSIX\s0.
.SS "Tied Arrays with Negative Array Indices"
.IX Subsection "Tied Arrays with Negative Array Indices"
Formerly, the indices passed to \f(CW\*(C`FETCH\*(C'\fR, \f(CW\*(C`STORE\*(C'\fR, \f(CW\*(C`EXISTS\*(C'\fR, and
\&\f(CW\*(C`DELETE\*(C'\fR methods in tied array class were always non-negative.  If
the actual argument was negative, Perl would call \s-1FETCHSIZE\s0 implicitly
and add the result to the index before passing the result to the tied
array method.  This behaviour is now optional.  If the tied array class
contains a package variable named \f(CW$NEGATIVE_INDICES\fR which is set to
a true value, negative values will be passed to \f(CW\*(C`FETCH\*(C'\fR, \f(CW\*(C`STORE\*(C'\fR,
\&\f(CW\*(C`EXISTS\*(C'\fR, and \f(CW\*(C`DELETE\*(C'\fR unchanged.
.SS "local ${$x}"
.IX Subsection "local ${$x}"
The syntaxes
.PP
.Vb 3
\&        local ${$x}
\&        local @{$x}
\&        local %{$x}
.Ve
.PP
now do localise variables, given that the \f(CW$x\fR is a valid variable name.
.SS "Unicode Character Database 4.0.0"
.IX Subsection "Unicode Character Database 4.0.0"
The copy of the Unicode Character Database included in Perl 5.8 has
been updated to 4.0.0 from 3.2.0.  This means for example that the
Unicode character properties are as in Unicode 4.0.0.
.SS "Deprecation Warnings"
.IX Subsection "Deprecation Warnings"
There is one new feature deprecation.  Perl 5.8.0 forgot to add
some deprecation warnings, these warnings have now been added.
Finally, a reminder of an impending feature removal.
.PP
\fI(Reminder) Pseudo-hashes are deprecated (really)\fR
.IX Subsection "(Reminder) Pseudo-hashes are deprecated (really)"
.PP
Pseudo-hashes were deprecated in Perl 5.8.0 and will be removed in
Perl 5.10.0, see perl58delta for details.  Each attempt to access
pseudo-hashes will trigger the warning \f(CW\*(C`Pseudo\-hashes are deprecated\*(C'\fR.
If you really want to continue using pseudo-hashes but not to see the
deprecation warnings, use:
.PP
.Vb 1
\&    no warnings \*(Aqdeprecated\*(Aq;
.Ve
.PP
Or you can continue to use the fields pragma, but please don't
expect the data structures to be pseudohashes any more.
.PP
\fI(Reminder) 5.005\-style threads are deprecated (really)\fR
.IX Subsection "(Reminder) 5.005-style threads are deprecated (really)"
.PP
5.005\-style threads (activated by \f(CW\*(C`use Thread;\*(C'\fR) were deprecated in
Perl 5.8.0 and will be removed after Perl 5.8, see perl58delta for
details.  Each 5.005\-style thread creation will trigger the warning
\&\f(CW\*(C`5.005 threads are deprecated\*(C'\fR.  If you really want to continue
using the 5.005 threads but not to see the deprecation warnings, use:
.PP
.Vb 1
\&    no warnings \*(Aqdeprecated\*(Aq;
.Ve
.PP
\fI(Reminder) The $* variable is deprecated (really)\fR
.IX Subsection "(Reminder) The $* variable is deprecated (really)"
.PP
The \f(CW$*\fR variable controlling multi-line matching has been deprecated
and will be removed after 5.8.  The variable has been deprecated for a
long time, and a deprecation warning \f(CW\*(C`Use of $* is deprecated\*(C'\fR is given,
now the variable will just finally be removed.  The functionality has
been supplanted by the \f(CW\*(C`/s\*(C'\fR and \f(CW\*(C`/m\*(C'\fR modifiers on pattern matching.
If you really want to continue using the \f(CW$*\fR\-variable but not to see
the deprecation warnings, use:
.PP
.Vb 1
\&    no warnings \*(Aqdeprecated\*(Aq;
.Ve
.SS "Miscellaneous Enhancements"
.IX Subsection "Miscellaneous Enhancements"
\&\f(CW\*(C`map\*(C'\fR in void context is no longer expensive. \f(CW\*(C`map\*(C'\fR is now context
aware, and will not construct a list if called in void context.
.PP
If a socket gets closed by the server while printing to it, the client
now gets a \s-1SIGPIPE\s0.  While this new feature was not planned, it fell
naturally out of PerlIO changes, and is to be considered an accidental
feature.
.PP
PerlIO::get_layers(\s-1FH\s0) returns the names of the PerlIO layers
active on a filehandle.
.PP
PerlIO::via layers can now have an optional \s-1UTF8\s0 method to
indicate whether the layer wants to \*(L"auto\-:utf8\*(R" the stream.
.PP
\&\fIutf8::is_utf8()\fR has been added as a quick way to test whether
a scalar is encoded internally in \s-1UTF\-8\s0 (Unicode).
.SH "Modules and Pragmata"
.IX Header "Modules and Pragmata"
.SS "Updated Modules And Pragmata"
.IX Subsection "Updated Modules And Pragmata"
The following modules and pragmata have been updated since Perl 5.8.0:
.IP "base" 4
.IX Item "base"
.PD 0
.IP "B::Bytecode" 4
.IX Item "B::Bytecode"
.PD
In much better shape than it used to be.  Still far from perfect, but
maybe worth a try.
.IP "B::Concise" 4
.IX Item "B::Concise"
.PD 0
.IP "B::Deparse" 4
.IX Item "B::Deparse"
.IP "Benchmark" 4
.IX Item "Benchmark"
.PD
An optional feature, \f(CW\*(C`:hireswallclock\*(C'\fR, now allows for high
resolution wall clock times (uses Time::HiRes).
.IP "ByteLoader" 4
.IX Item "ByteLoader"
See B::Bytecode.
.IP "bytes" 4
.IX Item "bytes"
Now has bytes::substr.
.IP "\s-1CGI\s0" 4
.IX Item "CGI"
.PD 0
.IP "charnames" 4
.IX Item "charnames"
.PD
One can now have custom character name aliases.
.IP "\s-1CPAN\s0" 4
.IX Item "CPAN"
There is now a simple command line frontend to the \s-1CPAN\s0.pm
module called \fIcpan\fR.
.IP "Data::Dumper" 4
.IX Item "Data::Dumper"
A new option, Pair, allows choosing the separator between hash keys
and values.
.IP "DB_File" 4
.IX Item "DB_File"
.PD 0
.IP "Devel::PPPort" 4
.IX Item "Devel::PPPort"
.IP "Digest::MD5" 4
.IX Item "Digest::MD5"
.IP "Encode" 4
.IX Item "Encode"
.PD
Significant updates on the encoding pragma functionality
(tr/// and the \s-1DATA\s0 filehandle, formats).
.Sp
If a filehandle has been marked as to have an encoding, unmappable
characters are detected already during input, not later (when the
corrupted data is being used).
.Sp
The \s-1ISO\s0 8859\-6 conversion table has been corrected (the 0x30..0x39
erroneously mapped to U+0660..U+0669, instead of U+0030..U+0039).  The
\&\s-1GSM\s0 03.38 conversion did not handle escape sequences correctly.  The
\&\s-1UTF\-7\s0 encoding has been added (making Encode feature-complete with
Unicode::String).
.IP "fields" 4
.IX Item "fields"
.PD 0
.IP "libnet" 4
.IX Item "libnet"
.IP "Math::BigInt" 4
.IX Item "Math::BigInt"
.PD
A lot of bugs have been fixed since v1.60, the version included in Perl
v5.8.0. Especially noteworthy are the bug in Calc that caused div and mod to
fail for some large values, and the fixes to the handling of bad inputs.
.Sp
Some new features were added, e.g. the \fIbroot()\fR method, you can now pass
parameters to \fIconfig()\fR to change some settings at runtime, and it is now
possible to trap the creation of NaN and infinity.
.Sp
As usual, some optimizations took place and made the math overall a tad
faster. In some cases, quite a lot faster, actually. Especially alternative
libraries like Math::BigInt::GMP benefit from this. In addition, a lot of the
quite clunky routines like \fIfsqrt()\fR and \fIflog()\fR are now much much faster.
.IP "MIME::Base64" 4
.IX Item "MIME::Base64"
.PD 0
.IP "\s-1NEXT\s0" 4
.IX Item "NEXT"
.PD
Diamond inheritance now works.
.IP "Net::Ping" 4
.IX Item "Net::Ping"
.PD 0
.IP "PerlIO::scalar" 4
.IX Item "PerlIO::scalar"
.PD
Reading from non-string scalars (like the special variables, see
perlvar) now works.
.IP "podlators" 4
.IX Item "podlators"
.PD 0
.IP "Pod::LaTeX" 4
.IX Item "Pod::LaTeX"
.IP "PodParsers" 4
.IX Item "PodParsers"
.IP "Pod::Perldoc" 4
.IX Item "Pod::Perldoc"
.PD
Complete rewrite.  As a side-effect, no longer refuses to startup when
run by root.
.IP "Scalar::Util" 4
.IX Item "Scalar::Util"
New utilities: refaddr, isvstring, looks_like_number, set_prototype.
.IP "Storable" 4
.IX Item "Storable"
Can now store code references (via B::Deparse, so not foolproof).
.IP "strict" 4
.IX Item "strict"
Earlier versions of the strict pragma did not check the parameters
implicitly passed to its \*(L"import\*(R" (use) and \*(L"unimport\*(R" (no) routine.
This caused the false idiom such as:
.Sp
.Vb 2
\&        use strict qw(@ISA);
\&        @ISA = qw(Foo);
.Ve
.Sp
This however (probably) raised the false expectation that the strict
refs, vars and subs were being enforced (and that \f(CW@ISA\fR was somehow
\&\*(L"declared\*(R").  But the strict refs, vars, and subs are \fBnot\fR enforced
when using this false idiom.
.Sp
Starting from Perl 5.8.1, the above \fBwill\fR cause an error to be
raised.  This may cause programs which used to execute seemingly
correctly without warnings and errors to fail when run under 5.8.1.
This happens because
.Sp
.Vb 1
\&        use strict qw(@ISA);
.Ve
.Sp
will now fail with the error:
.Sp
.Vb 1
\&        Unknown \*(Aqstrict\*(Aq tag(s) \*(Aq@ISA\*(Aq
.Ve
.Sp
The remedy to this problem is to replace this code with the correct idiom:
.Sp
.Vb 3
\&        use strict;
\&        use vars qw(@ISA);
\&        @ISA = qw(Foo);
.Ve
.IP "Term::ANSIcolor" 4
.IX Item "Term::ANSIcolor"
.PD 0
.IP "Test::Harness" 4
.IX Item "Test::Harness"
.PD
Now much more picky about extra or missing output from test scripts.
.IP "Test::More" 4
.IX Item "Test::More"
.PD 0
.IP "Test::Simple" 4
.IX Item "Test::Simple"
.IP "Text::Balanced" 4
.IX Item "Text::Balanced"
.IP "Time::HiRes" 4
.IX Item "Time::HiRes"
.PD
Use of \fInanosleep()\fR, if available, allows mixing subsecond sleeps with
alarms.
.IP "threads" 4
.IX Item "threads"
Several fixes, for example for \fIjoin()\fR problems and memory
leaks.  In some platforms (like Linux) that use glibc the minimum memory
footprint of one ithread has been reduced by several hundred kilobytes.
.IP "threads::shared" 4
.IX Item "threads::shared"
Many memory leaks have been fixed.
.IP "Unicode::Collate" 4
.IX Item "Unicode::Collate"
.PD 0
.IP "Unicode::Normalize" 4
.IX Item "Unicode::Normalize"
.IP "Win32::GetFolderPath" 4
.IX Item "Win32::GetFolderPath"
.IP "Win32::GetOSVersion" 4
.IX Item "Win32::GetOSVersion"
.PD
Now returns extra information.
.SH "Utility Changes"
.IX Header "Utility Changes"
The \f(CW\*(C`h2xs\*(C'\fR utility now produces a more modern layout:
\&\fIFoo\-Bar/lib/Foo/Bar.pm\fR instead of \fIFoo/Bar/Bar.pm\fR.
Also, the boilerplate test is now called \fIt/Foo\-Bar.t\fR
instead of \fIt/1.t\fR.
.PP
The Perl debugger (\fIlib/perl5db.pl\fR) has now been extensively
documented and bugs found while documenting have been fixed.
.PP
\&\f(CW\*(C`perldoc\*(C'\fR has been rewritten from scratch to be more robust and
feature rich.
.PP
\&\f(CW\*(C`perlcc \-B\*(C'\fR works now at least somewhat better, while \f(CW\*(C`perlcc \-c\*(C'\fR
is rather more broken.  (The Perl compiler suite as a whole continues
to be experimental.)
.SH "New Documentation"
.IX Header "New Documentation"
perl573delta has been added to list the differences between the
(now quite obsolete) development releases 5.7.2 and 5.7.3.
.PP
perl58delta has been added: it is the perldelta of 5.8.0, detailing
the differences between 5.6.0 and 5.8.0.
.PP
perlartistic has been added: it is the Artistic License in pod format,
making it easier for modules to refer to it.
.PP
perlcheat has been added: it is a Perl cheat sheet.
.PP
perlgpl has been added: it is the \s-1GNU\s0 General Public License in pod
format, making it easier for modules to refer to it.
.PP
perlmacosx has been added to tell about the installation and use
of Perl in Mac \s-1OS\s0 X.
.PP
perlos400 has been added to tell about the installation and use
of Perl in \s-1OS/400\s0 \s-1PASE\s0.
.PP
perlreref has been added: it is a regular expressions quick reference.
.SH "Installation and Configuration Improvements"
.IX Header "Installation and Configuration Improvements"
The Unix standard Perl location, \fI/usr/bin/perl\fR, is no longer
overwritten by default if it exists.  This change was very prudent
because so many Unix vendors already provide a \fI/usr/bin/perl\fR,
but simultaneously many system utilities may depend on that
exact version of Perl, so better not to overwrite it.
.PP
One can now specify installation directories for site and vendor man
and \s-1HTML\s0 pages, and site and vendor scripts.  See \fI\s-1INSTALL\s0\fR.
.PP
One can now specify a destination directory for Perl installation
by specifying the \s-1DESTDIR\s0 variable for \f(CW\*(C`make install\*(C'\fR.  (This feature
is slightly different from the previous \f(CW\*(C`Configure \-Dinstallprefix=...\*(C'\fR.)
See \fI\s-1INSTALL\s0\fR.
.PP
gcc versions 3.x introduced a new warning that caused a lot of noise
during Perl compilation: \f(CW\*(C`gcc \-Ialreadyknowndirectory (warning:
changing search order)\*(C'\fR.  This warning has now been avoided by
Configure weeding out such directories before the compilation.
.PP
One can now build subsets of Perl core modules by using the
Configure flags \f(CW\*(C`\-Dnoextensions=...\*(C'\fR and \f(CW\*(C`\-Donlyextensions=...\*(C'\fR,
see \fI\s-1INSTALL\s0\fR.
.SS "Platform-specific enhancements"
.IX Subsection "Platform-specific enhancements"
In Cygwin Perl can now be built with threads (\f(CW\*(C`Configure \-Duseithreads\*(C'\fR).
This works with both Cygwin 1.3.22 and Cygwin 1.5.3.
.PP
In newer FreeBSD releases Perl 5.8.0 compilation failed because of
trying to use \fImalloc.h\fR, which in FreeBSD is just a dummy file, and
a fatal error to even try to use.  Now \fImalloc.h\fR is not used.
.PP
Perl is now known to build also in Hitachi HI-UXMPP.
.PP
Perl is now known to build again in LynxOS.
.PP
Mac \s-1OS\s0 X now installs with Perl version number embedded in
installation directory names for easier upgrading of user-compiled
Perl, and the installation directories in general are more standard.
In other words, the default installation no longer breaks the
Apple-provided Perl.  On the other hand, with \f(CW\*(C`Configure \-Dprefix=/usr\*(C'\fR
you can now really replace the Apple-supplied Perl (\fBplease be careful\fR).
.PP
Mac \s-1OS\s0 X now builds Perl statically by default.  This change was done
mainly for faster startup times.  The Apple-provided Perl is still
dynamically linked and shared, and you can enable the sharedness for
your own Perl builds by \f(CW\*(C`Configure \-Duseshrplib\*(C'\fR.
.PP
Perl has been ported to \s-1IBM\s0's \s-1OS/400\s0 \s-1PASE\s0 environment.  The best way
to build a Perl for \s-1PASE\s0 is to use an \s-1AIX\s0 host as a cross-compilation
environment.  See \s-1README\s0.os400.
.PP
Yet another cross-compilation option has been added: now Perl builds
on OpenZaurus, an Linux distribution based on Mandrake + Embedix for
the Sharp Zaurus \s-1PDA\s0.  See the Cross/README file.
.PP
Tru64 when using gcc 3 drops the optimisation for \fItoke.c\fR to \f(CW\*(C`\-O2\*(C'\fR
because of gigantic memory use with the default \f(CW\*(C`\-O3\*(C'\fR.
.PP
Tru64 can now build Perl with the newer Berkeley DBs.
.PP
Building Perl on WinCE has been much enhanced, see \fI\s-1README\s0.ce\fR
and \fI\s-1README\s0.perlce\fR.
.SH "Selected Bug Fixes"
.IX Header "Selected Bug Fixes"
.SS "Closures, eval and lexicals"
.IX Subsection "Closures, eval and lexicals"
There have been many fixes in the area of anonymous subs, lexicals and
closures.  Although this means that Perl is now more \*(L"correct\*(R", it is
possible that some existing code will break that happens to rely on
the faulty behaviour.  In practice this is unlikely unless your code
contains a very complex nesting of anonymous subs, evals and lexicals.
.SS "Generic fixes"
.IX Subsection "Generic fixes"
If an input filehandle is marked \f(CW\*(C`:utf8\*(C'\fR and Perl sees illegal \s-1UTF\-8\s0
coming in when doing \f(CW\*(C`<FH>\*(C'\fR, if warnings are enabled a warning is
immediately given \- instead of being silent about it and Perl being
unhappy about the broken data later.  (The \f(CW\*(C`:encoding(utf8)\*(C'\fR layer
also works the same way.)
.PP
binmode(\s-1SOCKET\s0, \*(L":utf8\*(R") only worked on the input side, not on the
output side of the socket.  Now it works both ways.
.PP
For threaded Perls certain system database functions like \fIgetpwent()\fR
and \fIgetgrent()\fR now grow their result buffer dynamically, instead of
failing.  This means that at sites with lots of users and groups the
functions no longer fail by returning only partial results.
.PP
Perl 5.8.0 had accidentally broken the capability for users
to define their own uppercase<\->lowercase Unicode mappings
(as advertised by the Camel).  This feature has been fixed and
is also documented better.
.PP
In 5.8.0 this
.PP
.Vb 1
\&        $some_unicode .= <FH>;
.Ve
.PP
didn't work correctly but instead corrupted the data.  This has now
been fixed.
.PP
Tied methods like \s-1FETCH\s0 etc. may now safely access tied values, i.e.
resulting in a recursive call to \s-1FETCH\s0 etc.  Remember to break the
recursion, though.
.PP
At startup Perl blocks the \s-1SIGFPE\s0 signal away since there isn't much
Perl can do about it.  Previously this blocking was in effect also for
programs executed from within Perl.  Now Perl restores the original
\&\s-1SIGFPE\s0 handling routine, whatever it was, before running external
programs.
.PP
Linenumbers in Perl scripts may now be greater than 65536, or 2**16.
(Perl scripts have always been able to be larger than that, it's just
that the linenumber for reported errors and warnings have \*(L"wrapped
around\*(R".)  While scripts that large usually indicate a need to rethink
your code a bit, such Perl scripts do exist, for example as results
from generated code.  Now linenumbers can go all the way to
4294967296, or 2**32.
.SS "Platform-specific fixes"
.IX Subsection "Platform-specific fixes"
Linux
.IP "\(bu" 4
Setting \f(CW$0\fR works again (with certain limitations that
Perl cannot do much about: see \*(L"$0\*(R" in perlvar)
.PP
HP-UX
.IP "\(bu" 4
Setting \f(CW$0\fR now works.
.PP
\&\s-1VMS\s0
.IP "\(bu" 4
Configuration now tests for the presence of \f(CW\*(C`poll()\*(C'\fR, and IO::Poll
now uses the vendor-supplied function if detected.
.IP "\(bu" 4
A rare access violation at Perl start-up could occur if the Perl image was
installed with privileges or if there was an identifier with the
subsystem attribute set in the process's rightslist.  Either of these
circumstances triggered tainting code that contained a pointer bug. 
The faulty pointer arithmetic has been fixed.
.IP "\(bu" 4
The length limit on values (not keys) in the \f(CW%ENV\fR hash has been raised
from 255 bytes to 32640 bytes (except when the \s-1PERL_ENV_TABLES\s0 setting
overrides the default use of logical names for \f(CW%ENV\fR).  If it is
necessary to access these long values from outside Perl, be aware that
they are implemented using search list logical names that store the
value in pieces, each 255\-byte piece (up to 128 of them) being an
element in the search list. When doing a lookup in \f(CW%ENV\fR from within
Perl, the elements are combined into a single value.  The existing
VMS-specific ability to access individual elements of a search list
logical name via the \f(CW$ENV\fR{'foo;N'} syntax (where N is the search list
index) is unimpaired.
.IP "\(bu" 4
The piping implementation now uses local rather than global \s-1DCL\s0
symbols for inter-process communication.
.IP "\(bu" 4
File::Find could become confused when navigating to a relative
directory whose name collided with a logical name.  This problem has
been corrected by adding directory syntax to relative path names, thus
preventing logical name translation.
.PP
Win32
.IP "\(bu" 4
A memory leak in the \fIfork()\fR emulation has been fixed.
.IP "\(bu" 4
The return value of the \fIioctl()\fR built-in function was accidentally
broken in 5.8.0.  This has been corrected.
.IP "\(bu" 4
The internal message loop executed by perl during blocking operations
sometimes interfered with messages that were external to Perl.
This often resulted in blocking operations terminating prematurely or
returning incorrect results, when Perl was executing under environments
that could generate Windows messages.  This has been corrected.
.IP "\(bu" 4
Pipes and sockets are now automatically in binary mode.
.IP "\(bu" 4
The four-argument form of \fIselect()\fR did not preserve $! (errno) properly
when there were errors in the underlying call.  This is now fixed.
.IP "\(bu" 4
The \*(L"\s-1CR\s0 \s-1CR\s0 \s-1LF\s0\*(R" problem of has been fixed, binmode(\s-1FH\s0, \*(L":crlf\*(R")
is now effectively a no-op.
.SH "New or Changed Diagnostics"
.IX Header "New or Changed Diagnostics"
All the warnings related to \fIpack()\fR and \fIunpack()\fR were made more
informative and consistent.
.ie n .SS "Changed ""A thread exited while %d threads were running"""
.el .SS "Changed ``A thread exited while \f(CW%d\fP threads were running''"
.IX Subsection "Changed A thread exited while %d threads were running"
The old version
.PP
.Vb 1
\&    A thread exited while %d other threads were still running
.Ve
.PP
was misleading because the \*(L"other\*(R" included also the thread giving
the warning.
.ie n .SS "Removed ""Attempt to clear a restricted hash"""
.el .SS "Removed ``Attempt to clear a restricted hash''"
.IX Subsection "Removed Attempt to clear a restricted hash"
It is not illegal to clear a restricted hash, so the warning
was removed.
.ie n .SS "New ""Illegal declaration of anonymous subroutine"""
.el .SS "New ``Illegal declaration of anonymous subroutine''"
.IX Subsection "New Illegal declaration of anonymous subroutine"
You must specify the block of code for \f(CW\*(C`sub\*(C'\fR.
.ie n .SS "Changed ""Invalid range ""%s"" in transliteration operator"""
.el .SS "Changed ``Invalid range ''%s`` in transliteration operator''"
.IX Subsection "Changed Invalid range %s in transliteration operator"
The old version
.PP
.Vb 1
\&    Invalid [] range "%s" in transliteration operator
.Ve
.PP
was simply wrong because there are no \*(L"[] ranges\*(R" in tr///.
.ie n .SS "New ""Missing control char name in \ec"""
.el .SS "New ``Missing control char name in \ec''"
.IX Subsection "New Missing control char name in c"
Self-explanatory.
.ie n .SS "New ""Newline in left-justified string for %s"""
.el .SS "New ``Newline in left-justified string for \f(CW%s\fP''"
.IX Subsection "New Newline in left-justified string for %s"
The padding spaces would appear after the newline, which is
probably not what you had in mind.
.ie n .SS "New ""Possible precedence problem on bitwise %c operator"""
.el .SS "New ``Possible precedence problem on bitwise \f(CW%c\fP operator''"
.IX Subsection "New Possible precedence problem on bitwise %c operator"
If you think this
.PP
.Vb 1
\&    $x & $y == 0
.Ve
.PP
tests whether the bitwise \s-1AND\s0 of \f(CW$x\fR and \f(CW$y\fR is zero,
you will like this warning.
.ie n .SS "New ""Pseudo-hashes are deprecated"""
.el .SS "New ``Pseudo-hashes are deprecated''"
.IX Subsection "New Pseudo-hashes are deprecated"
This warning should have been already in 5.8.0, since they are.
.ie n .SS "New ""\fIread()\fP on %s filehandle %s"""
.el .SS "New ``\fIread()\fP on \f(CW%s\fP filehandle \f(CW%s\fP''"
.IX Subsection "New read() on %s filehandle %s"
You cannot \fIread()\fR (or \fIsysread()\fR) from a closed or unopened filehandle.
.ie n .SS "New ""5.005 threads are deprecated"""
.el .SS "New ``5.005 threads are deprecated''"
.IX Subsection "New 5.005 threads are deprecated"
This warning should have been already in 5.8.0, since they are.
.ie n .SS "New ""Tied variable freed while still in use"""
.el .SS "New ``Tied variable freed while still in use''"
.IX Subsection "New Tied variable freed while still in use"
Something pulled the plug on a live tied variable, Perl plays
safe by bailing out.
.ie n .SS "New ""To%s: illegal mapping '%s'"""
.el .SS "New ``To%s: illegal mapping '%s'''"
.IX Subsection "New To%s: illegal mapping '%s'"
An illegal user-defined Unicode casemapping was specified.
.ie n .SS "New ""Use of freed value in iteration"""
.el .SS "New ``Use of freed value in iteration''"
.IX Subsection "New Use of freed value in iteration"
Something modified the values being iterated over.  This is not good.
.SH "Changed Internals"
.IX Header "Changed Internals"
These news matter to you only if you either write \s-1XS\s0 code or like to
know about or hack Perl internals (using Devel::Peek or any of the
\&\f(CW\*(C`B::\*(C'\fR modules counts), or like to run Perl with the \f(CW\*(C`\-D\*(C'\fR option.
.PP
The embedding examples of perlembed have been reviewed to be
up to date and consistent: for example, the correct use of
\&\s-1\fIPERL_SYS_INIT3\s0()\fR and \s-1\fIPERL_SYS_TERM\s0()\fR.
.PP
Extensive reworking of the pad code (the code responsible
for lexical variables) has been conducted by Dave Mitchell.
.PP
Extensive work on the v\-strings by John Peacock.
.PP
\&\s-1UTF\-8\s0 length and position cache: to speed up the handling of Unicode
(\s-1UTF\-8\s0) scalars, a cache was introduced.  Potential problems exist if
an extension bypasses the official APIs and directly modifies the \s-1PV\s0
of an \s-1SV:\s0 the \s-1UTF\-8\s0 cache does not get cleared as it should.
.PP
APIs obsoleted in Perl 5.8.0, like sv_2pv, sv_catpvn, sv_catsv,
sv_setsv, are again available.
.PP
Certain Perl core C APIs like cxinc and regatom are no longer
available at all to code outside the Perl core of the Perl core
extensions.  This is intentional.  They never should have been
available with the shorter names, and if you application depends on
them, you should (be ashamed and) contact perl5\-porters to discuss
what are the proper APIs.
.PP
Certain Perl core C APIs like \f(CW\*(C`Perl_list\*(C'\fR are no longer available
without their \f(CW\*(C`Perl_\*(C'\fR prefix.  If your \s-1XS\s0 module stops working
because some functions cannot be found, in many cases a simple fix is
to add the \f(CW\*(C`Perl_\*(C'\fR prefix to the function and the thread context
\&\f(CW\*(C`aTHX_\*(C'\fR as the first argument of the function call.  This is also how
it should always have been done: letting the Perl_\-less forms to leak
from the core was an accident.  For cleaner embedding you can also
force this for all APIs by defining at compile time the cpp define
\&\s-1PERL_NO_SHORT_NAMES\s0.
.PP
\&\fIPerl_save_bool()\fR has been added.
.PP
Regexp objects (those created with \f(CW\*(C`qr\*(C'\fR) now have S\-magic rather than
R\-magic.  This fixed regexps of the form /...(??{...;$x})/ to no
longer ignore changes made to \f(CW$x\fR.  The S\-magic avoids dropping
the caching optimization and making (??{...}) constructs obscenely
slow (and consequently useless).  See also \*(L"Magic Variables\*(R" in perlguts.
Regexp::Copy was affected by this change.
.PP
The Perl internal debugging macros \s-1\fIDEBUG\s0()\fR and \s-1\fIDEB\s0()\fR have been renamed
to \s-1\fIPERL_DEBUG\s0()\fR and \s-1\fIPERL_DEB\s0()\fR to avoid namespace conflicts.
.PP
\&\f(CW\*(C`\-DL\*(C'\fR removed (the leaktest had been broken and unsupported for years,
use alternative debugging mallocs or tools like valgrind and Purify).
.PP
Verbose modifier \f(CW\*(C`v\*(C'\fR added for \f(CW\*(C`\-DXv\*(C'\fR and \f(CW\*(C`\-Dsv\*(C'\fR, see perlrun.
.SH "New Tests"
.IX Header "New Tests"
In Perl 5.8.0 there were about 69000 separate tests in about 700 test files,
in Perl 5.8.1 there are about 77000 separate tests in about 780 test files.
The exact numbers depend on the Perl configuration and on the operating
system platform.
.SH "Known Problems"
.IX Header "Known Problems"
The hash randomisation mentioned in \*(L"Incompatible Changes\*(R" is definitely
problematic: it will wake dormant bugs and shake out bad assumptions.
.PP
If you want to use mod_perl 2.x with Perl 5.8.1, you will need
mod_perl\-1.99_10 or higher.  Earlier versions of mod_perl 2.x
do not work with the randomised hashes.  (mod_perl 1.x works fine.)
You will also need Apache::Test 1.04 or higher.
.PP
Many of the rarer platforms that worked 100% or pretty close to it
with perl 5.8.0 have been left a little bit untended since their
maintainers have been otherwise busy lately, and therefore there will
be more failures on those platforms.  Such platforms include Mac \s-1OS\s0
Classic, \s-1IBM\s0 z/OS (and other \s-1EBCDIC\s0 platforms), and NetWare.  The most
common Perl platforms (Unix and Unix-like, Microsoft platforms, and
\&\s-1VMS\s0) have large enough testing and expert population that they are
doing well.
.SS "Tied hashes in scalar context"
.IX Subsection "Tied hashes in scalar context"
Tied hashes do not currently return anything useful in scalar context,
for example when used as boolean tests:
.PP
.Vb 1
\&        if (%tied_hash) { ... }
.Ve
.PP
The current nonsensical behaviour is always to return false,
regardless of whether the hash is empty or has elements.
.PP
The root cause is that there is no interface for the implementors of
tied hashes to implement the behaviour of a hash in scalar context.
.SS "Net::Ping 450_service and 510_ping_udp failures"
.IX Subsection "Net::Ping 450_service and 510_ping_udp failures"
The subtests 9 and 18 of lib/Net/Ping/t/450_service.t, and the
subtest 2 of lib/Net/Ping/t/510_ping_udp.t might fail if you have
an unusual networking setup.  For example in the latter case the
test is trying to send a \s-1UDP\s0 ping to the \s-1IP\s0 address 127.0.0.1.
.SS "B::C"
.IX Subsection "B::C"
The C\-generating compiler backend B::C (the frontend being
\&\f(CW\*(C`perlcc \-c\*(C'\fR) is even more broken than it used to be because of
the extensive lexical variable changes.  (The good news is that
B::Bytecode and ByteLoader are better than they used to be.)
.SH "Platform Specific Problems"
.IX Header "Platform Specific Problems"
.SS "\s-1EBCDIC\s0 Platforms"
.IX Subsection "EBCDIC Platforms"
\&\s-1IBM\s0 z/OS and other \s-1EBCDIC\s0 platforms continue to be problematic
regarding Unicode support.  Many Unicode tests are skipped when
they really should be fixed.
.SS "Cygwin 1.5 problems"
.IX Subsection "Cygwin 1.5 problems"
In Cygwin 1.5 the \fIio/tell\fR and \fIop/sysio\fR tests have failures for
some yet unknown reason.  In 1.5.5 the threads tests stress_cv,
stress_re, and stress_string are failing unless the environment
variable \s-1PERLIO\s0 is set to \*(L"perlio\*(R" (which makes also the io/tell
failure go away).
.PP
Perl 5.8.1 does build and work well with Cygwin 1.3: with (uname \-a)
\&\f(CW\*(C`CYGWIN_NT\-5.0 ... 1.3.22(0.78/3/2) 2003\-03\-18 09:20 i686 ...\*(C'\fR
a 100% \*(L"make test\*(R"  was achieved with \f(CW\*(C`Configure \-des \-Duseithreads\*(C'\fR.
.SS "HP-UX: \s-1HP\s0 cc warnings about sendfile and sendpath"
.IX Subsection "HP-UX: HP cc warnings about sendfile and sendpath"
With certain \s-1HP\s0 C compiler releases (e.g. B.11.11.02) you will
get many warnings like this (lines wrapped for easier reading):
.PP
.Vb 6
\&  cc: "/usr/include/sys/socket.h", line 504: warning 562:
\&    Redeclaration of "sendfile" with a different storage class specifier:
\&      "sendfile" will have internal linkage.
\&  cc: "/usr/include/sys/socket.h", line 505: warning 562:
\&    Redeclaration of "sendpath" with a different storage class specifier:
\&      "sendpath" will have internal linkage.
.Ve
.PP
The warnings show up both during the build of Perl and during certain
lib/ExtUtils tests that invoke the C compiler.  The warning, however,
is not serious and can be ignored.
.SS "\s-1IRIX:\s0 t/uni/tr_7jis.t falsely failing"
.IX Subsection "IRIX: t/uni/tr_7jis.t falsely failing"
The test t/uni/tr_7jis.t is known to report failure under 'make test'
or the test harness with certain releases of \s-1IRIX\s0 (at least \s-1IRIX\s0 6.5
and MIPSpro Compilers Version 7.3.1.1m), but if run manually the test
fully passes.
.SS "Mac \s-1OS\s0 X: no usemymalloc"
.IX Subsection "Mac OS X: no usemymalloc"
The Perl malloc (\f(CW\*(C`\-Dusemymalloc\*(C'\fR) does not work at all in Mac \s-1OS\s0 X.
This is not that serious, though, since the native malloc works just
fine.
.SS "Tru64: No threaded builds with \s-1GNU\s0 cc (gcc)"
.IX Subsection "Tru64: No threaded builds with GNU cc (gcc)"
In the latest Tru64 releases (e.g. v5.1B or later) gcc cannot be used
to compile a threaded Perl (\-Duseithreads) because the system
\&\f(CW\*(C`<pthread.h>\*(C'\fR file doesn't know about gcc.
.SS "Win32: sysopen, sysread, syswrite"
.IX Subsection "Win32: sysopen, sysread, syswrite"
As of the 5.8.0 release, \fIsysopen()\fR/\fIsysread()\fR/\fIsyswrite()\fR do not behave
like they used to in 5.6.1 and earlier with respect to \*(L"text\*(R" mode.
These built-ins now always operate in \*(L"binary\*(R" mode (even if \fIsysopen()\fR
was passed the O_TEXT flag, or if \fIbinmode()\fR was used on the file
handle).  Note that this issue should only make a difference for disk
files, as sockets and pipes have always been in \*(L"binary\*(R" mode in the
Windows port.  As this behavior is currently considered a bug,
compatible behavior may be re-introduced in a future release.  Until
then, the use of \fIsysopen()\fR, \fIsysread()\fR and \fIsyswrite()\fR is not supported
for \*(L"text\*(R" mode operations.
.SH "Future Directions"
.IX Header "Future Directions"
The following things \fBmight\fR happen in future.  The first publicly
available releases having these characteristics will be the developer
releases Perl 5.9.x, culminating in the Perl 5.10.0 release.  These
are our best guesses at the moment: we reserve the right to rethink.
.IP "\(bu" 4
PerlIO will become The Default.  Currently (in Perl 5.8.x) the stdio
library is still used if Perl thinks it can use certain tricks to
make stdio go \fBreally\fR fast.  For future releases our goal is to
make PerlIO go even faster.
.IP "\(bu" 4
A new feature called \fIassertions\fR will be available.  This means that
one can have code called assertions sprinkled in the code: usually
they are optimised away, but they can be enabled with the \f(CW\*(C`\-A\*(C'\fR option.
.IP "\(bu" 4
A new operator \f(CW\*(C`//\*(C'\fR (defined-or) will be available.  This means that
one will be able to say
.Sp
.Vb 1
\&    $a // $b
.Ve
.Sp
instead of
.Sp
.Vb 1
\&   defined $a ? $a : $b
.Ve
.Sp
and
.Sp
.Vb 1
\&   $c //= $d;
.Ve
.Sp
instead of
.Sp
.Vb 1
\&   $c = $d unless defined $c;
.Ve
.Sp
The operator will have the same precedence and associativity as \f(CW\*(C`||\*(C'\fR.
A source code patch against the Perl 5.8.1 sources will be available
in \s-1CPAN\s0 as \fIauthors/id/H/HM/HMBRAND/dor\-5.8.1.diff\fR.
.IP "\(bu" 4
\&\f(CW\*(C`unpack()\*(C'\fR will default to unpacking the \f(CW$_\fR.
.IP "\(bu" 4
Various Copy-On-Write techniques will be investigated in hopes
of speeding up Perl.
.IP "\(bu" 4
\&\s-1CPANPLUS\s0, Inline, and Module::Build will become core modules.
.IP "\(bu" 4
The ability to write true lexically scoped pragmas will be introduced.
.IP "\(bu" 4
Work will continue on the bytecompiler and byteloader.
.IP "\(bu" 4
v\-strings as they currently exist are scheduled to be deprecated.  The
v\-less form (1.2.3) will become a \*(L"version object\*(R" when used with \f(CW\*(C`use\*(C'\fR,
\&\f(CW\*(C`require\*(C'\fR, and \f(CW$VERSION\fR.  $^V will also be a \*(L"version object\*(R" so the
printf(\*(L"%vd\*(R",...) construct will no longer be needed.  The v\-ful version
(v1.2.3) will become obsolete.  The equivalence of strings and v\-strings (e.g.
that currently 5.8.0 is equal to \*(L"\e5\e8\e0\*(R") will go away.  \fBThere may be no
deprecation warning for v\-strings\fR, though: it is quite hard to detect when
v\-strings are being used safely, and when they are not.
.IP "\(bu" 4
5.005 Threads Will Be Removed
.IP "\(bu" 4
The \f(CW$*\fR Variable Will Be Removed
(it was deprecated a long time ago)
.IP "\(bu" 4
Pseudohashes Will Be Removed
.SH "Reporting Bugs"
.IX Header "Reporting Bugs"
If you find what you think is a bug, you might check the articles
recently posted to the comp.lang.perl.misc newsgroup and the perl
bug database at http://bugs.perl.org/ .  There may also be
information at http://www.perl.com/ , the Perl Home Page.
.PP
If you believe you have an unreported bug, please run the \fBperlbug\fR
program included with your release.  Be sure to trim your bug down
to a tiny but sufficient test case.  Your bug report, along with the
output of \f(CW\*(C`perl \-V\*(C'\fR, will be sent off to perlbug@perl.org to be
analysed by the Perl porting team.  You can browse and search
the Perl 5 bugs at http://bugs.perl.org/
.SH "SEE ALSO"
.IX Header "SEE ALSO"
The \fIChanges\fR file for exhaustive details on what changed.
.PP
The \fI\s-1INSTALL\s0\fR file for how to build Perl.
.PP
The \fI\s-1README\s0\fR file for general stuff.
.PP
The \fIArtistic\fR and \fICopying\fR files for copyright information.
                                                                                                                                                                                                                                     osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perl581delta5.18.1                           0100644 0001750 0001750 00000141720 12566207433 023473  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERL581DELTA 1"
.TH PERL581DELTA 1 "2013-11-04" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perl581delta \- what is new for perl v5.8.1
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document describes differences between the 5.8.0 release and
the 5.8.1 release.
.PP
If you are upgrading from an earlier release such as 5.6.1, first read
the perl58delta, which describes differences between 5.6.0 and
5.8.0.
.PP
In case you are wondering about 5.6.1, it was bug-fix-wise rather
identical to the development release 5.7.1.  Confused?  This timeline
hopefully helps a bit: it lists the new major releases, their maintenance
releases, and the development releases.
.PP
.Vb 1
\&          New     Maintenance  Development
\&
\&          5.6.0                             2000\-Mar\-22
\&                               5.7.0        2000\-Sep\-02
\&                  5.6.1                     2001\-Apr\-08
\&                               5.7.1        2001\-Apr\-09
\&                               5.7.2        2001\-Jul\-13
\&                               5.7.3        2002\-Mar\-05
\&          5.8.0                             2002\-Jul\-18
\&                  5.8.1                     2003\-Sep\-25
.Ve
.SH "Incompatible Changes"
.IX Header "Incompatible Changes"
.SS "Hash Randomisation"
.IX Subsection "Hash Randomisation"
Mainly due to security reasons, the \*(L"random ordering\*(R" of hashes
has been made even more random.  Previously while the order of hash
elements from \fIkeys()\fR, \fIvalues()\fR, and \fIeach()\fR was essentially random,
it was still repeatable.  Now, however, the order varies between
different runs of Perl.
.PP
\&\fBPerl has never guaranteed any ordering of the hash keys\fR, and the
ordering has already changed several times during the lifetime of
Perl 5.  Also, the ordering of hash keys has always been, and
continues to be, affected by the insertion order.
.PP
The added randomness may affect applications.
.PP
One possible scenario is when output of an application has included
hash data.  For example, if you have used the Data::Dumper module to
dump data into different files, and then compared the files to see
whether the data has changed, now you will have false positives since
the order in which hashes are dumped will vary.  In general the cure
is to sort the keys (or the values); in particular for Data::Dumper to
use the \f(CW\*(C`Sortkeys\*(C'\fR option.  If some particular order is really
important, use tied hashes: for example the Tie::IxHash module
which by default preserves the order in which the hash elements
were added.
.PP
More subtle problem is reliance on the order of \*(L"global destruction\*(R".
That is what happens at the end of execution: Perl destroys all data
structures, including user data.  If your destructors (the \s-1DESTROY\s0
subroutines) have assumed any particular ordering to the global
destruction, there might be problems ahead.  For example, in a
destructor of one object you cannot assume that objects of any other
class are still available, unless you hold a reference to them.
If the environment variable \s-1PERL_DESTRUCT_LEVEL\s0 is set to a non-zero
value, or if Perl is exiting a spawned thread, it will also destruct
the ordinary references and the symbol tables that are no longer in use.
You can't call a class method or an ordinary function on a class that
has been collected that way.
.PP
The hash randomisation is certain to reveal hidden assumptions about
some particular ordering of hash elements, and outright bugs: it
revealed a few bugs in the Perl core and core modules.
.PP
To disable the hash randomisation in runtime, set the environment
variable \s-1PERL_HASH_SEED\s0 to 0 (zero) before running Perl (for more
information see \*(L"\s-1PERL_HASH_SEED\*(R"\s0 in perlrun), or to disable the feature
completely in compile time, compile with \f(CW\*(C`\-DNO_HASH_SEED\*(C'\fR (see \fI\s-1INSTALL\s0\fR).
.PP
See \*(L"Algorithmic Complexity Attacks\*(R" in perlsec for the original
rationale behind this change.
.SS "\s-1UTF\-8\s0 On Filehandles No Longer Activated By Locale"
.IX Subsection "UTF-8 On Filehandles No Longer Activated By Locale"
In Perl 5.8.0 all filehandles, including the standard filehandles,
were implicitly set to be in Unicode \s-1UTF\-8\s0 if the locale settings
indicated the use of \s-1UTF\-8. \s0 This feature caused too many problems,
so the feature was turned off and redesigned: see \*(L"Core Enhancements\*(R".
.ie n .SS "Single-number v\-strings are no longer v\-strings before ""=>"""
.el .SS "Single-number v\-strings are no longer v\-strings before ``=>''"
.IX Subsection "Single-number v-strings are no longer v-strings before =>"
The version strings or v\-strings (see \*(L"Version Strings\*(R" in perldata)
feature introduced in Perl 5.6.0 has been a source of some confusion\*(--
especially when the user did not want to use it, but Perl thought it
knew better.  Especially troublesome has been the feature that before
a \*(L"=>\*(R" a version string (a \*(L"v\*(R" followed by digits) has been interpreted
as a v\-string instead of a string literal.  In other words:
.PP
.Vb 1
\&        %h = ( v65 => 42 );
.Ve
.PP
has meant since Perl 5.6.0
.PP
.Vb 1
\&        %h = ( \*(AqA\*(Aq => 42 );
.Ve
.PP
(at least in platforms of \s-1ASCII\s0 progeny)  Perl 5.8.1 restores the
more natural interpretation
.PP
.Vb 1
\&        %h = ( \*(Aqv65\*(Aq => 42 );
.Ve
.PP
The multi-number v\-strings like v65.66 and 65.66.67 still continue to
be v\-strings in Perl 5.8.
.SS "(Win32) The \-C Switch Has Been Repurposed"
.IX Subsection "(Win32) The -C Switch Has Been Repurposed"
The \-C switch has changed in an incompatible way.  The old semantics
of this switch only made sense in Win32 and only in the \*(L"use utf8\*(R"
universe in 5.6.x releases, and do not make sense for the Unicode
implementation in 5.8.0.  Since this switch could not have been used
by anyone, it has been repurposed.  The behavior that this switch
enabled in 5.6.x releases may be supported in a transparent,
data-dependent fashion in a future release.
.PP
For the new life of this switch, see \*(L"\s-1UTF\-8\s0 no longer default under
\&\s-1UTF\-8\s0 locales\*(R", and \*(L"\-C\*(R" in perlrun.
.SS "(Win32) The /d Switch Of cmd.exe"
.IX Subsection "(Win32) The /d Switch Of cmd.exe"
Perl 5.8.1 uses the /d switch when running the cmd.exe shell
internally for \fIsystem()\fR, backticks, and when opening pipes to external
programs.  The extra switch disables the execution of AutoRun commands
from the registry, which is generally considered undesirable when
running external programs.  If you wish to retain compatibility with
the older behavior, set \s-1PERL5SHELL\s0 in your environment to \f(CW\*(C`cmd /x/c\*(C'\fR.
.SH "Core Enhancements"
.IX Header "Core Enhancements"
.SS "\s-1UTF\-8\s0 no longer default under \s-1UTF\-8\s0 locales"
.IX Subsection "UTF-8 no longer default under UTF-8 locales"
In Perl 5.8.0 many Unicode features were introduced.   One of them
was found to be of more nuisance than benefit: the automagic
(and silent) \*(L"UTF\-8\-ification\*(R" of filehandles, including the
standard filehandles, if the user's locale settings indicated
use of \s-1UTF\-8.\s0
.PP
For example, if you had \f(CW\*(C`en_US.UTF\-8\*(C'\fR as your locale, your \s-1STDIN\s0 and
\&\s-1STDOUT\s0 were automatically \*(L"\s-1UTF\-8\*(R",\s0 in other words an implicit
binmode(..., \*(L":utf8\*(R") was made.  This meant that trying to print, say,
\&\fIchr\fR\|(0xff), ended up printing the bytes 0xc3 0xbf.  Hardly what
you had in mind unless you were aware of this feature of Perl 5.8.0.
The problem is that the vast majority of people weren't: for example
in RedHat releases 8 and 9 the \fBdefault\fR locale setting is \s-1UTF\-8,\s0 so
all RedHat users got \s-1UTF\-8\s0 filehandles, whether they wanted it or not.
The pain was intensified by the Unicode implementation of Perl 5.8.0
(still) having nasty bugs, especially related to the use of s/// and
tr///.  (Bugs that have been fixed in 5.8.1)
.PP
Therefore a decision was made to backtrack the feature and change it
from implicit silent default to explicit conscious option.  The new
Perl command line option \f(CW\*(C`\-C\*(C'\fR and its counterpart environment
variable \s-1PERL_UNICODE\s0 can now be used to control how Perl and Unicode
interact at interfaces like I/O and for example the command line
arguments.  See \*(L"\-C\*(R" in perlrun and \*(L"\s-1PERL_UNICODE\*(R"\s0 in perlrun for more
information.
.SS "Unsafe signals again available"
.IX Subsection "Unsafe signals again available"
In Perl 5.8.0 the so-called \*(L"safe signals\*(R" were introduced.  This
means that Perl no longer handles signals immediately but instead
\&\*(L"between opcodes\*(R", when it is safe to do so.  The earlier immediate
handling easily could corrupt the internal state of Perl, resulting
in mysterious crashes.
.PP
However, the new safer model has its problems too.  Because now an
opcode, a basic unit of Perl execution, is never interrupted but
instead let to run to completion, certain operations that can take a
long time now really do take a long time.  For example, certain
network operations have their own blocking and timeout mechanisms, and
being able to interrupt them immediately would be nice.
.PP
Therefore perl 5.8.1 introduces a \*(L"backdoor\*(R" to restore the pre\-5.8.0
(pre\-5.7.3, really) signal behaviour.  Just set the environment variable
\&\s-1PERL_SIGNALS\s0 to \f(CW\*(C`unsafe\*(C'\fR, and the old immediate (and unsafe)
signal handling behaviour returns.  See \*(L"\s-1PERL_SIGNALS\*(R"\s0 in perlrun
and \*(L"Deferred Signals (Safe Signals)\*(R" in perlipc.
.PP
In completely unrelated news, you can now use safe signals with
POSIX::SigAction.  See \*(L"POSIX::SigAction\*(R" in \s-1POSIX\s0.
.SS "Tied Arrays with Negative Array Indices"
.IX Subsection "Tied Arrays with Negative Array Indices"
Formerly, the indices passed to \f(CW\*(C`FETCH\*(C'\fR, \f(CW\*(C`STORE\*(C'\fR, \f(CW\*(C`EXISTS\*(C'\fR, and
\&\f(CW\*(C`DELETE\*(C'\fR methods in tied array class were always non-negative.  If
the actual argument was negative, Perl would call \s-1FETCHSIZE\s0 implicitly
and add the result to the index before passing the result to the tied
array method.  This behaviour is now optional.  If the tied array class
contains a package variable named \f(CW$NEGATIVE_INDICES\fR which is set to
a true value, negative values will be passed to \f(CW\*(C`FETCH\*(C'\fR, \f(CW\*(C`STORE\*(C'\fR,
\&\f(CW\*(C`EXISTS\*(C'\fR, and \f(CW\*(C`DELETE\*(C'\fR unchanged.
.SS "local ${$x}"
.IX Subsection "local ${$x}"
The syntaxes
.PP
.Vb 3
\&        local ${$x}
\&        local @{$x}
\&        local %{$x}
.Ve
.PP
now do localise variables, given that the \f(CW$x\fR is a valid variable name.
.SS "Unicode Character Database 4.0.0"
.IX Subsection "Unicode Character Database 4.0.0"
The copy of the Unicode Character Database included in Perl 5.8 has
been updated to 4.0.0 from 3.2.0.  This means for example that the
Unicode character properties are as in Unicode 4.0.0.
.SS "Deprecation Warnings"
.IX Subsection "Deprecation Warnings"
There is one new feature deprecation.  Perl 5.8.0 forgot to add
some deprecation warnings, these warnings have now been added.
Finally, a reminder of an impending feature removal.
.PP
\fI(Reminder) Pseudo-hashes are deprecated (really)\fR
.IX Subsection "(Reminder) Pseudo-hashes are deprecated (really)"
.PP
Pseudo-hashes were deprecated in Perl 5.8.0 and will be removed in
Perl 5.10.0, see perl58delta for details.  Each attempt to access
pseudo-hashes will trigger the warning \f(CW\*(C`Pseudo\-hashes are deprecated\*(C'\fR.
If you really want to continue using pseudo-hashes but not to see the
deprecation warnings, use:
.PP
.Vb 1
\&    no warnings \*(Aqdeprecated\*(Aq;
.Ve
.PP
Or you can continue to use the fields pragma, but please don't
expect the data structures to be pseudohashes any more.
.PP
\fI(Reminder) 5.005\-style threads are deprecated (really)\fR
.IX Subsection "(Reminder) 5.005-style threads are deprecated (really)"
.PP
5.005\-style threads (activated by \f(CW\*(C`use Thread;\*(C'\fR) were deprecated in
Perl 5.8.0 and will be removed after Perl 5.8, see perl58delta for
details.  Each 5.005\-style thread creation will trigger the warning
\&\f(CW\*(C`5.005 threads are deprecated\*(C'\fR.  If you really want to continue
using the 5.005 threads but not to see the deprecation warnings, use:
.PP
.Vb 1
\&    no warnings \*(Aqdeprecated\*(Aq;
.Ve
.PP
\fI(Reminder) The $* variable is deprecated (really)\fR
.IX Subsection "(Reminder) The $* variable is deprecated (really)"
.PP
The \f(CW$*\fR variable controlling multi-line matching has been deprecated
and will be removed after 5.8.  The variable has been deprecated for a
long time, and a deprecation warning \f(CW\*(C`Use of $* is deprecated\*(C'\fR is given,
now the variable will just finally be removed.  The functionality has
been supplanted by the \f(CW\*(C`/s\*(C'\fR and \f(CW\*(C`/m\*(C'\fR modifiers on pattern matching.
If you really want to continue using the \f(CW$*\fR\-variable but not to see
the deprecation warnings, use:
.PP
.Vb 1
\&    no warnings \*(Aqdeprecated\*(Aq;
.Ve
.SS "Miscellaneous Enhancements"
.IX Subsection "Miscellaneous Enhancements"
\&\f(CW\*(C`map\*(C'\fR in void context is no longer expensive. \f(CW\*(C`map\*(C'\fR is now context
aware, and will not construct a list if called in void context.
.PP
If a socket gets closed by the server while printing to it, the client
now gets a \s-1SIGPIPE. \s0 While this new feature was not planned, it fell
naturally out of PerlIO changes, and is to be considered an accidental
feature.
.PP
PerlIO::get_layers(\s-1FH\s0) returns the names of the PerlIO layers
active on a filehandle.
.PP
PerlIO::via layers can now have an optional \s-1UTF8\s0 method to
indicate whether the layer wants to \*(L"auto\-:utf8\*(R" the stream.
.PP
\&\fIutf8::is_utf8()\fR has been added as a quick way to test whether
a scalar is encoded internally in \s-1UTF\-8 \s0(Unicode).
.SH "Modules and Pragmata"
.IX Header "Modules and Pragmata"
.SS "Updated Modules And Pragmata"
.IX Subsection "Updated Modules And Pragmata"
The following modules and pragmata have been updated since Perl 5.8.0:
.IP "base" 4
.IX Item "base"
.PD 0
.IP "B::Bytecode" 4
.IX Item "B::Bytecode"
.PD
In much better shape than it used to be.  Still far from perfect, but
maybe worth a try.
.IP "B::Concise" 4
.IX Item "B::Concise"
.PD 0
.IP "B::Deparse" 4
.IX Item "B::Deparse"
.IP "Benchmark" 4
.IX Item "Benchmark"
.PD
An optional feature, \f(CW\*(C`:hireswallclock\*(C'\fR, now allows for high
resolution wall clock times (uses Time::HiRes).
.IP "ByteLoader" 4
.IX Item "ByteLoader"
See B::Bytecode.
.IP "bytes" 4
.IX Item "bytes"
Now has bytes::substr.
.IP "\s-1CGI\s0" 4
.IX Item "CGI"
.PD 0
.IP "charnames" 4
.IX Item "charnames"
.PD
One can now have custom character name aliases.
.IP "\s-1CPAN\s0" 4
.IX Item "CPAN"
There is now a simple command line frontend to the \s-1CPAN\s0.pm
module called \fIcpan\fR.
.IP "Data::Dumper" 4
.IX Item "Data::Dumper"
A new option, Pair, allows choosing the separator between hash keys
and values.
.IP "DB_File" 4
.IX Item "DB_File"
.PD 0
.IP "Devel::PPPort" 4
.IX Item "Devel::PPPort"
.IP "Digest::MD5" 4
.IX Item "Digest::MD5"
.IP "Encode" 4
.IX Item "Encode"
.PD
Significant updates on the encoding pragma functionality
(tr/// and the \s-1DATA\s0 filehandle, formats).
.Sp
If a filehandle has been marked as to have an encoding, unmappable
characters are detected already during input, not later (when the
corrupted data is being used).
.Sp
The \s-1ISO 8859\-6\s0 conversion table has been corrected (the 0x30..0x39
erroneously mapped to U+0660..U+0669, instead of U+0030..U+0039).  The
\&\s-1GSM 03.38\s0 conversion did not handle escape sequences correctly.  The
\&\s-1UTF\-7\s0 encoding has been added (making Encode feature-complete with
Unicode::String).
.IP "fields" 4
.IX Item "fields"
.PD 0
.IP "libnet" 4
.IX Item "libnet"
.IP "Math::BigInt" 4
.IX Item "Math::BigInt"
.PD
A lot of bugs have been fixed since v1.60, the version included in Perl
v5.8.0. Especially noteworthy are the bug in Calc that caused div and mod to
fail for some large values, and the fixes to the handling of bad inputs.
.Sp
Some new features were added, e.g. the \fIbroot()\fR method, you can now pass
parameters to \fIconfig()\fR to change some settings at runtime, and it is now
possible to trap the creation of NaN and infinity.
.Sp
As usual, some optimizations took place and made the math overall a tad
faster. In some cases, quite a lot faster, actually. Especially alternative
libraries like Math::BigInt::GMP benefit from this. In addition, a lot of the
quite clunky routines like \fIfsqrt()\fR and \fIflog()\fR are now much much faster.
.IP "MIME::Base64" 4
.IX Item "MIME::Base64"
.PD 0
.IP "\s-1NEXT\s0" 4
.IX Item "NEXT"
.PD
Diamond inheritance now works.
.IP "Net::Ping" 4
.IX Item "Net::Ping"
.PD 0
.IP "PerlIO::scalar" 4
.IX Item "PerlIO::scalar"
.PD
Reading from non-string scalars (like the special variables, see
perlvar) now works.
.IP "podlators" 4
.IX Item "podlators"
.PD 0
.IP "Pod::LaTeX" 4
.IX Item "Pod::LaTeX"
.IP "PodParsers" 4
.IX Item "PodParsers"
.IP "Pod::Perldoc" 4
.IX Item "Pod::Perldoc"
.PD
Complete rewrite.  As a side-effect, no longer refuses to startup when
run by root.
.IP "Scalar::Util" 4
.IX Item "Scalar::Util"
New utilities: refaddr, isvstring, looks_like_number, set_prototype.
.IP "Storable" 4
.IX Item "Storable"
Can now store code references (via B::Deparse, so not foolproof).
.IP "strict" 4
.IX Item "strict"
Earlier versions of the strict pragma did not check the parameters
implicitly passed to its \*(L"import\*(R" (use) and \*(L"unimport\*(R" (no) routine.
This caused the false idiom such as:
.Sp
.Vb 2
\&        use strict qw(@ISA);
\&        @ISA = qw(Foo);
.Ve
.Sp
This however (probably) raised the false expectation that the strict
refs, vars and subs were being enforced (and that \f(CW@ISA\fR was somehow
\&\*(L"declared\*(R").  But the strict refs, vars, and subs are \fBnot\fR enforced
when using this false idiom.
.Sp
Starting from Perl 5.8.1, the above \fBwill\fR cause an error to be
raised.  This may cause programs which used to execute seemingly
correctly without warnings and errors to fail when run under 5.8.1.
This happens because
.Sp
.Vb 1
\&        use strict qw(@ISA);
.Ve
.Sp
will now fail with the error:
.Sp
.Vb 1
\&        Unknown \*(Aqstrict\*(Aq tag(s) \*(Aq@ISA\*(Aq
.Ve
.Sp
The remedy to this problem is to replace this code with the correct idiom:
.Sp
.Vb 3
\&        use strict;
\&        use vars qw(@ISA);
\&        @ISA = qw(Foo);
.Ve
.IP "Term::ANSIcolor" 4
.IX Item "Term::ANSIcolor"
.PD 0
.IP "Test::Harness" 4
.IX Item "Test::Harness"
.PD
Now much more picky about extra or missing output from test scripts.
.IP "Test::More" 4
.IX Item "Test::More"
.PD 0
.IP "Test::Simple" 4
.IX Item "Test::Simple"
.IP "Text::Balanced" 4
.IX Item "Text::Balanced"
.IP "Time::HiRes" 4
.IX Item "Time::HiRes"
.PD
Use of \fInanosleep()\fR, if available, allows mixing subsecond sleeps with
alarms.
.IP "threads" 4
.IX Item "threads"
Several fixes, for example for \fIjoin()\fR problems and memory
leaks.  In some platforms (like Linux) that use glibc the minimum memory
footprint of one ithread has been reduced by several hundred kilobytes.
.IP "threads::shared" 4
.IX Item "threads::shared"
Many memory leaks have been fixed.
.IP "Unicode::Collate" 4
.IX Item "Unicode::Collate"
.PD 0
.IP "Unicode::Normalize" 4
.IX Item "Unicode::Normalize"
.IP "Win32::GetFolderPath" 4
.IX Item "Win32::GetFolderPath"
.IP "Win32::GetOSVersion" 4
.IX Item "Win32::GetOSVersion"
.PD
Now returns extra information.
.SH "Utility Changes"
.IX Header "Utility Changes"
The \f(CW\*(C`h2xs\*(C'\fR utility now produces a more modern layout:
\&\fIFoo\-Bar/lib/Foo/Bar.pm\fR instead of \fIFoo/Bar/Bar.pm\fR.
Also, the boilerplate test is now called \fIt/Foo\-Bar.t\fR
instead of \fIt/1.t\fR.
.PP
The Perl debugger (\fIlib/perl5db.pl\fR) has now been extensively
documented and bugs found while documenting have been fixed.
.PP
\&\f(CW\*(C`perldoc\*(C'\fR has been rewritten from scratch to be more robust and
feature rich.
.PP
\&\f(CW\*(C`perlcc \-B\*(C'\fR works now at least somewhat better, while \f(CW\*(C`perlcc \-c\*(C'\fR
is rather more broken.  (The Perl compiler suite as a whole continues
to be experimental.)
.SH "New Documentation"
.IX Header "New Documentation"
perl573delta has been added to list the differences between the
(now quite obsolete) development releases 5.7.2 and 5.7.3.
.PP
perl58delta has been added: it is the perldelta of 5.8.0, detailing
the differences between 5.6.0 and 5.8.0.
.PP
perlartistic has been added: it is the Artistic License in pod format,
making it easier for modules to refer to it.
.PP
perlcheat has been added: it is a Perl cheat sheet.
.PP
perlgpl has been added: it is the \s-1GNU\s0 General Public License in pod
format, making it easier for modules to refer to it.
.PP
perlmacosx has been added to tell about the installation and use
of Perl in Mac \s-1OS X.\s0
.PP
perlos400 has been added to tell about the installation and use
of Perl in \s-1OS/400 PASE.\s0
.PP
perlreref has been added: it is a regular expressions quick reference.
.SH "Installation and Configuration Improvements"
.IX Header "Installation and Configuration Improvements"
The Unix standard Perl location, \fI/usr/bin/perl\fR, is no longer
overwritten by default if it exists.  This change was very prudent
because so many Unix vendors already provide a \fI/usr/bin/perl\fR,
but simultaneously many system utilities may depend on that
exact version of Perl, so better not to overwrite it.
.PP
One can now specify installation directories for site and vendor man
and \s-1HTML\s0 pages, and site and vendor scripts.  See \fI\s-1INSTALL\s0\fR.
.PP
One can now specify a destination directory for Perl installation
by specifying the \s-1DESTDIR\s0 variable for \f(CW\*(C`make install\*(C'\fR.  (This feature
is slightly different from the previous \f(CW\*(C`Configure \-Dinstallprefix=...\*(C'\fR.)
See \fI\s-1INSTALL\s0\fR.
.PP
gcc versions 3.x introduced a new warning that caused a lot of noise
during Perl compilation: \f(CW\*(C`gcc \-Ialreadyknowndirectory (warning:
changing search order)\*(C'\fR.  This warning has now been avoided by
Configure weeding out such directories before the compilation.
.PP
One can now build subsets of Perl core modules by using the
Configure flags \f(CW\*(C`\-Dnoextensions=...\*(C'\fR and \f(CW\*(C`\-Donlyextensions=...\*(C'\fR,
see \fI\s-1INSTALL\s0\fR.
.SS "Platform-specific enhancements"
.IX Subsection "Platform-specific enhancements"
In Cygwin Perl can now be built with threads (\f(CW\*(C`Configure \-Duseithreads\*(C'\fR).
This works with both Cygwin 1.3.22 and Cygwin 1.5.3.
.PP
In newer FreeBSD releases Perl 5.8.0 compilation failed because of
trying to use \fImalloc.h\fR, which in FreeBSD is just a dummy file, and
a fatal error to even try to use.  Now \fImalloc.h\fR is not used.
.PP
Perl is now known to build also in Hitachi HI-UXMPP.
.PP
Perl is now known to build again in LynxOS.
.PP
Mac \s-1OS X\s0 now installs with Perl version number embedded in
installation directory names for easier upgrading of user-compiled
Perl, and the installation directories in general are more standard.
In other words, the default installation no longer breaks the
Apple-provided Perl.  On the other hand, with \f(CW\*(C`Configure \-Dprefix=/usr\*(C'\fR
you can now really replace the Apple-supplied Perl (\fBplease be careful\fR).
.PP
Mac \s-1OS X\s0 now builds Perl statically by default.  This change was done
mainly for faster startup times.  The Apple-provided Perl is still
dynamically linked and shared, and you can enable the sharedness for
your own Perl builds by \f(CW\*(C`Configure \-Duseshrplib\*(C'\fR.
.PP
Perl has been ported to \s-1IBM\s0's \s-1OS/400 PASE\s0 environment.  The best way
to build a Perl for \s-1PASE\s0 is to use an \s-1AIX\s0 host as a cross-compilation
environment.  See \s-1README\s0.os400.
.PP
Yet another cross-compilation option has been added: now Perl builds
on OpenZaurus, an Linux distribution based on Mandrake + Embedix for
the Sharp Zaurus \s-1PDA. \s0 See the Cross/README file.
.PP
Tru64 when using gcc 3 drops the optimisation for \fItoke.c\fR to \f(CW\*(C`\-O2\*(C'\fR
because of gigantic memory use with the default \f(CW\*(C`\-O3\*(C'\fR.
.PP
Tru64 can now build Perl with the newer Berkeley DBs.
.PP
Building Perl on WinCE has been much enhanced, see \fI\s-1README\s0.ce\fR
and \fI\s-1README\s0.perlce\fR.
.SH "Selected Bug Fixes"
.IX Header "Selected Bug Fixes"
.SS "Closures, eval and lexicals"
.IX Subsection "Closures, eval and lexicals"
There have been many fixes in the area of anonymous subs, lexicals and
closures.  Although this means that Perl is now more \*(L"correct\*(R", it is
possible that some existing code will break that happens to rely on
the faulty behaviour.  In practice this is unlikely unless your code
contains a very complex nesting of anonymous subs, evals and lexicals.
.SS "Generic fixes"
.IX Subsection "Generic fixes"
If an input filehandle is marked \f(CW\*(C`:utf8\*(C'\fR and Perl sees illegal \s-1UTF\-8\s0
coming in when doing \f(CW\*(C`<FH>\*(C'\fR, if warnings are enabled a warning is
immediately given \- instead of being silent about it and Perl being
unhappy about the broken data later.  (The \f(CW\*(C`:encoding(utf8)\*(C'\fR layer
also works the same way.)
.PP
binmode(\s-1SOCKET, \s0\*(L":utf8\*(R") only worked on the input side, not on the
output side of the socket.  Now it works both ways.
.PP
For threaded Perls certain system database functions like \fIgetpwent()\fR
and \fIgetgrent()\fR now grow their result buffer dynamically, instead of
failing.  This means that at sites with lots of users and groups the
functions no longer fail by returning only partial results.
.PP
Perl 5.8.0 had accidentally broken the capability for users
to define their own uppercase<\->lowercase Unicode mappings
(as advertised by the Camel).  This feature has been fixed and
is also documented better.
.PP
In 5.8.0 this
.PP
.Vb 1
\&        $some_unicode .= <FH>;
.Ve
.PP
didn't work correctly but instead corrupted the data.  This has now
been fixed.
.PP
Tied methods like \s-1FETCH\s0 etc. may now safely access tied values, i.e.
resulting in a recursive call to \s-1FETCH\s0 etc.  Remember to break the
recursion, though.
.PP
At startup Perl blocks the \s-1SIGFPE\s0 signal away since there isn't much
Perl can do about it.  Previously this blocking was in effect also for
programs executed from within Perl.  Now Perl restores the original
\&\s-1SIGFPE\s0 handling routine, whatever it was, before running external
programs.
.PP
Linenumbers in Perl scripts may now be greater than 65536, or 2**16.
(Perl scripts have always been able to be larger than that, it's just
that the linenumber for reported errors and warnings have \*(L"wrapped
around\*(R".)  While scripts that large usually indicate a need to rethink
your code a bit, such Perl scripts do exist, for example as results
from generated code.  Now linenumbers can go all the way to
4294967296, or 2**32.
.SS "Platform-specific fixes"
.IX Subsection "Platform-specific fixes"
Linux
.IP "\(bu" 4
Setting \f(CW$0\fR works again (with certain limitations that
Perl cannot do much about: see \*(L"$0\*(R" in perlvar)
.PP
HP-UX
.IP "\(bu" 4
Setting \f(CW$0\fR now works.
.PP
\&\s-1VMS\s0
.IP "\(bu" 4
Configuration now tests for the presence of \f(CW\*(C`poll()\*(C'\fR, and IO::Poll
now uses the vendor-supplied function if detected.
.IP "\(bu" 4
A rare access violation at Perl start-up could occur if the Perl image was
installed with privileges or if there was an identifier with the
subsystem attribute set in the process's rightslist.  Either of these
circumstances triggered tainting code that contained a pointer bug. 
The faulty pointer arithmetic has been fixed.
.IP "\(bu" 4
The length limit on values (not keys) in the \f(CW%ENV\fR hash has been raised
from 255 bytes to 32640 bytes (except when the \s-1PERL_ENV_TABLES\s0 setting
overrides the default use of logical names for \f(CW%ENV\fR).  If it is
necessary to access these long values from outside Perl, be aware that
they are implemented using search list logical names that store the
value in pieces, each 255\-byte piece (up to 128 of them) being an
element in the search list. When doing a lookup in \f(CW%ENV\fR from within
Perl, the elements are combined into a single value.  The existing
VMS-specific ability to access individual elements of a search list
logical name via the \f(CW$ENV\fR{'foo;N'} syntax (where N is the search list
index) is unimpaired.
.IP "\(bu" 4
The piping implementation now uses local rather than global \s-1DCL\s0
symbols for inter-process communication.
.IP "\(bu" 4
File::Find could become confused when navigating to a relative
directory whose name collided with a logical name.  This problem has
been corrected by adding directory syntax to relative path names, thus
preventing logical name translation.
.PP
Win32
.IP "\(bu" 4
A memory leak in the \fIfork()\fR emulation has been fixed.
.IP "\(bu" 4
The return value of the \fIioctl()\fR built-in function was accidentally
broken in 5.8.0.  This has been corrected.
.IP "\(bu" 4
The internal message loop executed by perl during blocking operations
sometimes interfered with messages that were external to Perl.
This often resulted in blocking operations terminating prematurely or
returning incorrect results, when Perl was executing under environments
that could generate Windows messages.  This has been corrected.
.IP "\(bu" 4
Pipes and sockets are now automatically in binary mode.
.IP "\(bu" 4
The four-argument form of \fIselect()\fR did not preserve $! (errno) properly
when there were errors in the underlying call.  This is now fixed.
.IP "\(bu" 4
The \*(L"\s-1CR CR LF\*(R"\s0 problem of has been fixed, binmode(\s-1FH, \s0\*(L":crlf\*(R")
is now effectively a no-op.
.SH "New or Changed Diagnostics"
.IX Header "New or Changed Diagnostics"
All the warnings related to \fIpack()\fR and \fIunpack()\fR were made more
informative and consistent.
.ie n .SS "Changed ""A thread exited while %d threads were running"""
.el .SS "Changed ``A thread exited while \f(CW%d\fP threads were running''"
.IX Subsection "Changed A thread exited while %d threads were running"
The old version
.PP
.Vb 1
\&    A thread exited while %d other threads were still running
.Ve
.PP
was misleading because the \*(L"other\*(R" included also the thread giving
the warning.
.ie n .SS "Removed ""Attempt to clear a restricted hash"""
.el .SS "Removed ``Attempt to clear a restricted hash''"
.IX Subsection "Removed Attempt to clear a restricted hash"
It is not illegal to clear a restricted hash, so the warning
was removed.
.ie n .SS "New ""Illegal declaration of anonymous subroutine"""
.el .SS "New ``Illegal declaration of anonymous subroutine''"
.IX Subsection "New Illegal declaration of anonymous subroutine"
You must specify the block of code for \f(CW\*(C`sub\*(C'\fR.
.ie n .SS "Changed ""Invalid range ""%s"" in transliteration operator"""
.el .SS "Changed ``Invalid range ''%s`` in transliteration operator''"
.IX Subsection "Changed Invalid range %s in transliteration operator"
The old version
.PP
.Vb 1
\&    Invalid [] range "%s" in transliteration operator
.Ve
.PP
was simply wrong because there are no \*(L"[] ranges\*(R" in tr///.
.ie n .SS "New ""Missing control char name in \ec"""
.el .SS "New ``Missing control char name in \ec''"
.IX Subsection "New Missing control char name in c"
Self-explanatory.
.ie n .SS "New ""Newline in left-justified string for %s"""
.el .SS "New ``Newline in left-justified string for \f(CW%s\fP''"
.IX Subsection "New Newline in left-justified string for %s"
The padding spaces would appear after the newline, which is
probably not what you had in mind.
.ie n .SS "New ""Possible precedence problem on bitwise %c operator"""
.el .SS "New ``Possible precedence problem on bitwise \f(CW%c\fP operator''"
.IX Subsection "New Possible precedence problem on bitwise %c operator"
If you think this
.PP
.Vb 1
\&    $x & $y == 0
.Ve
.PP
tests whether the bitwise \s-1AND\s0 of \f(CW$x\fR and \f(CW$y\fR is zero,
you will like this warning.
.ie n .SS "New ""Pseudo-hashes are deprecated"""
.el .SS "New ``Pseudo-hashes are deprecated''"
.IX Subsection "New Pseudo-hashes are deprecated"
This warning should have been already in 5.8.0, since they are.
.ie n .SS "New ""\fIread()\fP on %s filehandle %s"""
.el .SS "New ``\fIread()\fP on \f(CW%s\fP filehandle \f(CW%s\fP''"
.IX Subsection "New read() on %s filehandle %s"
You cannot \fIread()\fR (or \fIsysread()\fR) from a closed or unopened filehandle.
.ie n .SS "New ""5.005 threads are deprecated"""
.el .SS "New ``5.005 threads are deprecated''"
.IX Subsection "New 5.005 threads are deprecated"
This warning should have been already in 5.8.0, since they are.
.ie n .SS "New ""Tied variable freed while still in use"""
.el .SS "New ``Tied variable freed while still in use''"
.IX Subsection "New Tied variable freed while still in use"
Something pulled the plug on a live tied variable, Perl plays
safe by bailing out.
.ie n .SS "New ""To%s: illegal mapping '%s'"""
.el .SS "New ``To%s: illegal mapping '%s'''"
.IX Subsection "New To%s: illegal mapping '%s'"
An illegal user-defined Unicode casemapping was specified.
.ie n .SS "New ""Use of freed value in iteration"""
.el .SS "New ``Use of freed value in iteration''"
.IX Subsection "New Use of freed value in iteration"
Something modified the values being iterated over.  This is not good.
.SH "Changed Internals"
.IX Header "Changed Internals"
These news matter to you only if you either write \s-1XS\s0 code or like to
know about or hack Perl internals (using Devel::Peek or any of the
\&\f(CW\*(C`B::\*(C'\fR modules counts), or like to run Perl with the \f(CW\*(C`\-D\*(C'\fR option.
.PP
The embedding examples of perlembed have been reviewed to be
up to date and consistent: for example, the correct use of
\&\s-1\fIPERL_SYS_INIT3\s0()\fR and \s-1\fIPERL_SYS_TERM\s0()\fR.
.PP
Extensive reworking of the pad code (the code responsible
for lexical variables) has been conducted by Dave Mitchell.
.PP
Extensive work on the v\-strings by John Peacock.
.PP
\&\s-1UTF\-8\s0 length and position cache: to speed up the handling of Unicode
(\s-1UTF\-8\s0) scalars, a cache was introduced.  Potential problems exist if
an extension bypasses the official APIs and directly modifies the \s-1PV\s0
of an \s-1SV:\s0 the \s-1UTF\-8\s0 cache does not get cleared as it should.
.PP
APIs obsoleted in Perl 5.8.0, like sv_2pv, sv_catpvn, sv_catsv,
sv_setsv, are again available.
.PP
Certain Perl core C APIs like cxinc and regatom are no longer
available at all to code outside the Perl core of the Perl core
extensions.  This is intentional.  They never should have been
available with the shorter names, and if you application depends on
them, you should (be ashamed and) contact perl5\-porters to discuss
what are the proper APIs.
.PP
Certain Perl core C APIs like \f(CW\*(C`Perl_list\*(C'\fR are no longer available
without their \f(CW\*(C`Perl_\*(C'\fR prefix.  If your \s-1XS\s0 module stops working
because some functions cannot be found, in many cases a simple fix is
to add the \f(CW\*(C`Perl_\*(C'\fR prefix to the function and the thread context
\&\f(CW\*(C`aTHX_\*(C'\fR as the first argument of the function call.  This is also how
it should always have been done: letting the Perl_\-less forms to leak
from the core was an accident.  For cleaner embedding you can also
force this for all APIs by defining at compile time the cpp define
\&\s-1PERL_NO_SHORT_NAMES.\s0
.PP
\&\fIPerl_save_bool()\fR has been added.
.PP
Regexp objects (those created with \f(CW\*(C`qr\*(C'\fR) now have S\-magic rather than
R\-magic.  This fixed regexps of the form /...(??{...;$x})/ to no
longer ignore changes made to \f(CW$x\fR.  The S\-magic avoids dropping
the caching optimization and making (??{...}) constructs obscenely
slow (and consequently useless).  See also \*(L"Magic Variables\*(R" in perlguts.
Regexp::Copy was affected by this change.
.PP
The Perl internal debugging macros \s-1\fIDEBUG\s0()\fR and \s-1\fIDEB\s0()\fR have been renamed
to \s-1\fIPERL_DEBUG\s0()\fR and \s-1\fIPERL_DEB\s0()\fR to avoid namespace conflicts.
.PP
\&\f(CW\*(C`\-DL\*(C'\fR removed (the leaktest had been broken and unsupported for years,
use alternative debugging mallocs or tools like valgrind and Purify).
.PP
Verbose modifier \f(CW\*(C`v\*(C'\fR added for \f(CW\*(C`\-DXv\*(C'\fR and \f(CW\*(C`\-Dsv\*(C'\fR, see perlrun.
.SH "New Tests"
.IX Header "New Tests"
In Perl 5.8.0 there were about 69000 separate tests in about 700 test files,
in Perl 5.8.1 there are about 77000 separate tests in about 780 test files.
The exact numbers depend on the Perl configuration and on the operating
system platform.
.SH "Known Problems"
.IX Header "Known Problems"
The hash randomisation mentioned in \*(L"Incompatible Changes\*(R" is definitely
problematic: it will wake dormant bugs and shake out bad assumptions.
.PP
If you want to use mod_perl 2.x with Perl 5.8.1, you will need
mod_perl\-1.99_10 or higher.  Earlier versions of mod_perl 2.x
do not work with the randomised hashes.  (mod_perl 1.x works fine.)
You will also need Apache::Test 1.04 or higher.
.PP
Many of the rarer platforms that worked 100% or pretty close to it
with perl 5.8.0 have been left a little bit untended since their
maintainers have been otherwise busy lately, and therefore there will
be more failures on those platforms.  Such platforms include Mac \s-1OS\s0
Classic, \s-1IBM\s0 z/OS (and other \s-1EBCDIC\s0 platforms), and NetWare.  The most
common Perl platforms (Unix and Unix-like, Microsoft platforms, and
\&\s-1VMS\s0) have large enough testing and expert population that they are
doing well.
.SS "Tied hashes in scalar context"
.IX Subsection "Tied hashes in scalar context"
Tied hashes do not currently return anything useful in scalar context,
for example when used as boolean tests:
.PP
.Vb 1
\&        if (%tied_hash) { ... }
.Ve
.PP
The current nonsensical behaviour is always to return false,
regardless of whether the hash is empty or has elements.
.PP
The root cause is that there is no interface for the implementors of
tied hashes to implement the behaviour of a hash in scalar context.
.SS "Net::Ping 450_service and 510_ping_udp failures"
.IX Subsection "Net::Ping 450_service and 510_ping_udp failures"
The subtests 9 and 18 of lib/Net/Ping/t/450_service.t, and the
subtest 2 of lib/Net/Ping/t/510_ping_udp.t might fail if you have
an unusual networking setup.  For example in the latter case the
test is trying to send a \s-1UDP\s0 ping to the \s-1IP\s0 address 127.0.0.1.
.SS "B::C"
.IX Subsection "B::C"
The C\-generating compiler backend B::C (the frontend being
\&\f(CW\*(C`perlcc \-c\*(C'\fR) is even more broken than it used to be because of
the extensive lexical variable changes.  (The good news is that
B::Bytecode and ByteLoader are better than they used to be.)
.SH "Platform Specific Problems"
.IX Header "Platform Specific Problems"
.SS "\s-1EBCDIC\s0 Platforms"
.IX Subsection "EBCDIC Platforms"
\&\s-1IBM\s0 z/OS and other \s-1EBCDIC\s0 platforms continue to be problematic
regarding Unicode support.  Many Unicode tests are skipped when
they really should be fixed.
.SS "Cygwin 1.5 problems"
.IX Subsection "Cygwin 1.5 problems"
In Cygwin 1.5 the \fIio/tell\fR and \fIop/sysio\fR tests have failures for
some yet unknown reason.  In 1.5.5 the threads tests stress_cv,
stress_re, and stress_string are failing unless the environment
variable \s-1PERLIO\s0 is set to \*(L"perlio\*(R" (which makes also the io/tell
failure go away).
.PP
Perl 5.8.1 does build and work well with Cygwin 1.3: with (uname \-a)
\&\f(CW\*(C`CYGWIN_NT\-5.0 ... 1.3.22(0.78/3/2) 2003\-03\-18 09:20 i686 ...\*(C'\fR
a 100% \*(L"make test\*(R"  was achieved with \f(CW\*(C`Configure \-des \-Duseithreads\*(C'\fR.
.SS "HP-UX: \s-1HP\s0 cc warnings about sendfile and sendpath"
.IX Subsection "HP-UX: HP cc warnings about sendfile and sendpath"
With certain \s-1HP C\s0 compiler releases (e.g. B.11.11.02) you will
get many warnings like this (lines wrapped for easier reading):
.PP
.Vb 6
\&  cc: "/usr/include/sys/socket.h", line 504: warning 562:
\&    Redeclaration of "sendfile" with a different storage class specifier:
\&      "sendfile" will have internal linkage.
\&  cc: "/usr/include/sys/socket.h", line 505: warning 562:
\&    Redeclaration of "sendpath" with a different storage class specifier:
\&      "sendpath" will have internal linkage.
.Ve
.PP
The warnings show up both during the build of Perl and during certain
lib/ExtUtils tests that invoke the C compiler.  The warning, however,
is not serious and can be ignored.
.SS "\s-1IRIX:\s0 t/uni/tr_7jis.t falsely failing"
.IX Subsection "IRIX: t/uni/tr_7jis.t falsely failing"
The test t/uni/tr_7jis.t is known to report failure under 'make test'
or the test harness with certain releases of \s-1IRIX \s0(at least \s-1IRIX 6.5\s0
and MIPSpro Compilers Version 7.3.1.1m), but if run manually the test
fully passes.
.SS "Mac \s-1OS X:\s0 no usemymalloc"
.IX Subsection "Mac OS X: no usemymalloc"
The Perl malloc (\f(CW\*(C`\-Dusemymalloc\*(C'\fR) does not work at all in Mac \s-1OS X.\s0
This is not that serious, though, since the native malloc works just
fine.
.SS "Tru64: No threaded builds with \s-1GNU\s0 cc (gcc)"
.IX Subsection "Tru64: No threaded builds with GNU cc (gcc)"
In the latest Tru64 releases (e.g. v5.1B or later) gcc cannot be used
to compile a threaded Perl (\-Duseithreads) because the system
\&\f(CW\*(C`<pthread.h>\*(C'\fR file doesn't know about gcc.
.SS "Win32: sysopen, sysread, syswrite"
.IX Subsection "Win32: sysopen, sysread, syswrite"
As of the 5.8.0 release, \fIsysopen()\fR/\fIsysread()\fR/\fIsyswrite()\fR do not behave
like they used to in 5.6.1 and earlier with respect to \*(L"text\*(R" mode.
These built-ins now always operate in \*(L"binary\*(R" mode (even if \fIsysopen()\fR
was passed the O_TEXT flag, or if \fIbinmode()\fR was used on the file
handle).  Note that this issue should only make a difference for disk
files, as sockets and pipes have always been in \*(L"binary\*(R" mode in the
Windows port.  As this behavior is currently considered a bug,
compatible behavior may be re-introduced in a future release.  Until
then, the use of \fIsysopen()\fR, \fIsysread()\fR and \fIsyswrite()\fR is not supported
for \*(L"text\*(R" mode operations.
.SH "Future Directions"
.IX Header "Future Directions"
The following things \fBmight\fR happen in future.  The first publicly
available releases having these characteristics will be the developer
releases Perl 5.9.x, culminating in the Perl 5.10.0 release.  These
are our best guesses at the moment: we reserve the right to rethink.
.IP "\(bu" 4
PerlIO will become The Default.  Currently (in Perl 5.8.x) the stdio
library is still used if Perl thinks it can use certain tricks to
make stdio go \fBreally\fR fast.  For future releases our goal is to
make PerlIO go even faster.
.IP "\(bu" 4
A new feature called \fIassertions\fR will be available.  This means that
one can have code called assertions sprinkled in the code: usually
they are optimised away, but they can be enabled with the \f(CW\*(C`\-A\*(C'\fR option.
.IP "\(bu" 4
A new operator \f(CW\*(C`//\*(C'\fR (defined-or) will be available.  This means that
one will be able to say
.Sp
.Vb 1
\&    $a // $b
.Ve
.Sp
instead of
.Sp
.Vb 1
\&   defined $a ? $a : $b
.Ve
.Sp
and
.Sp
.Vb 1
\&   $c //= $d;
.Ve
.Sp
instead of
.Sp
.Vb 1
\&   $c = $d unless defined $c;
.Ve
.Sp
The operator will have the same precedence and associativity as \f(CW\*(C`||\*(C'\fR.
A source code patch against the Perl 5.8.1 sources will be available
in \s-1CPAN\s0 as \fIauthors/id/H/HM/HMBRAND/dor\-5.8.1.diff\fR.
.IP "\(bu" 4
\&\f(CW\*(C`unpack()\*(C'\fR will default to unpacking the \f(CW$_\fR.
.IP "\(bu" 4
Various Copy-On-Write techniques will be investigated in hopes
of speeding up Perl.
.IP "\(bu" 4
\&\s-1CPANPLUS,\s0 Inline, and Module::Build will become core modules.
.IP "\(bu" 4
The ability to write true lexically scoped pragmas will be introduced.
.IP "\(bu" 4
Work will continue on the bytecompiler and byteloader.
.IP "\(bu" 4
v\-strings as they currently exist are scheduled to be deprecated.  The
v\-less form (1.2.3) will become a \*(L"version object\*(R" when used with \f(CW\*(C`use\*(C'\fR,
\&\f(CW\*(C`require\*(C'\fR, and \f(CW$VERSION\fR.  $^V will also be a \*(L"version object\*(R" so the
printf(\*(L"%vd\*(R",...) construct will no longer be needed.  The v\-ful version
(v1.2.3) will become obsolete.  The equivalence of strings and v\-strings (e.g.
that currently 5.8.0 is equal to \*(L"\e5\e8\e0\*(R") will go away.  \fBThere may be no
deprecation warning for v\-strings\fR, though: it is quite hard to detect when
v\-strings are being used safely, and when they are not.
.IP "\(bu" 4
5.005 Threads Will Be Removed
.IP "\(bu" 4
The \f(CW$*\fR Variable Will Be Removed
(it was deprecated a long time ago)
.IP "\(bu" 4
Pseudohashes Will Be Removed
.SH "Reporting Bugs"
.IX Header "Reporting Bugs"
If you find what you think is a bug, you might check the articles
recently posted to the comp.lang.perl.misc newsgroup and the perl
bug database at http://bugs.perl.org/ .  There may also be
information at http://www.perl.com/ , the Perl Home Page.
.PP
If you believe you have an unreported bug, please run the \fBperlbug\fR
program included with your release.  Be sure to trim your bug down
to a tiny but sufficient test case.  Your bug report, along with the
output of \f(CW\*(C`perl \-V\*(C'\fR, will be sent off to perlbug@perl.org to be
analysed by the Perl porting team.  You can browse and search
the Perl 5 bugs at http://bugs.perl.org/
.SH "SEE ALSO"
.IX Header "SEE ALSO"
The \fIChanges\fR file for exhaustive details on what changed.
.PP
The \fI\s-1INSTALL\s0\fR file for how to build Perl.
.PP
The \fI\s-1README\s0\fR file for general stuff.
.PP
The \fIArtistic\fR and \fICopying\fR files for copyright information.
                                                osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perl582delta.1                               0100644 0001750 0001750 00000022100 12566207433 023146  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERL582DELTA 1"
.TH PERL582DELTA 1 "2013-11-04" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perl582delta \- what is new for perl v5.8.2
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document describes differences between the 5.8.1 release and
the 5.8.2 release.
.PP
If you are upgrading from an earlier release such as 5.6.1, first read
the perl58delta, which describes differences between 5.6.0 and
5.8.0, and the perl581delta, which describes differences between
5.8.0 and 5.8.1.
.SH "Incompatible Changes"
.IX Header "Incompatible Changes"
For threaded builds for modules calling certain re-entrant system calls,
binary compatibility was accidentally lost between 5.8.0 and 5.8.1.
Binary compatibility with 5.8.0 has been restored in 5.8.2, which
necessitates breaking compatibility with 5.8.1. We see this as the
lesser of two evils.
.PP
This will only affect people who have a threaded perl 5.8.1, and compiled
modules which use these calls, and now attempt to run the compiled modules
with 5.8.2. The fix is to re-compile and re-install the modules using 5.8.2.
.SH "Core Enhancements"
.IX Header "Core Enhancements"
.SS "Hash Randomisation"
.IX Subsection "Hash Randomisation"
The hash randomisation introduced with 5.8.1 has been amended. It
transpired that although the implementation introduced in 5.8.1 was source
compatible with 5.8.0, it was not binary compatible in certain cases. 5.8.2
contains an improved implementation which is both source and binary
compatible with both 5.8.0 and 5.8.1, and remains robust against the form of
attack which prompted the change for 5.8.1.
.PP
We are grateful to the Debian project for their input in this area.
See \*(L"Algorithmic Complexity Attacks\*(R" in perlsec for the original
rationale behind this change.
.SS "Threading"
.IX Subsection "Threading"
Several memory leaks associated with variables shared between threads
have been fixed.
.SH "Modules and Pragmata"
.IX Header "Modules and Pragmata"
.SS "Updated Modules And Pragmata"
.IX Subsection "Updated Modules And Pragmata"
The following modules and pragmata have been updated since Perl 5.8.1:
.IP "Devel::PPPort" 4
.IX Item "Devel::PPPort"
.PD 0
.IP "Digest::MD5" 4
.IX Item "Digest::MD5"
.IP "I18N::LangTags" 4
.IX Item "I18N::LangTags"
.IP "libnet" 4
.IX Item "libnet"
.IP "MIME::Base64" 4
.IX Item "MIME::Base64"
.IP "Pod::Perldoc" 4
.IX Item "Pod::Perldoc"
.IP "strict" 4
.IX Item "strict"
.PD
Documentation improved
.IP "Tie::Hash" 4
.IX Item "Tie::Hash"
Documentation improved
.IP "Time::HiRes" 4
.IX Item "Time::HiRes"
.PD 0
.IP "Unicode::Collate" 4
.IX Item "Unicode::Collate"
.IP "Unicode::Normalize" 4
.IX Item "Unicode::Normalize"
.IP "\s-1UNIVERSAL\s0" 4
.IX Item "UNIVERSAL"
.PD
Documentation improved
.SH "Selected Bug Fixes"
.IX Header "Selected Bug Fixes"
Some syntax errors involving unrecognized filetest operators are now handled
correctly by the parser.
.SH "Changed Internals"
.IX Header "Changed Internals"
Interpreter initialization is more complete when \-DMULTIPLICITY is off.
This should resolve problems with initializing and destroying the Perl
interpreter more than once in a single process.
.SH "Platform Specific Problems"
.IX Header "Platform Specific Problems"
Dynamic linker flags have been tweaked for Solaris and \s-1OS X,\s0 which should
solve problems seen while building some \s-1XS\s0 modules.
.PP
Bugs in \s-1OS/2\s0 sockets and tmpfile have been fixed.
.PP
In \s-1OS X \s0\f(CW\*(C`setreuid\*(C'\fR and friends are troublesome \- perl will now work
around their problems as best possible.
.SH "Future Directions"
.IX Header "Future Directions"
Starting with 5.8.3 we intend to make more frequent maintenance releases,
with a smaller number of changes in each. The intent is to propagate
bug fixes out to stable releases more rapidly and make upgrading stable
releases less of an upheaval. This should give end users more
flexibility in their choice of upgrade timing, and allow them easier
assessment of the impact of upgrades. The current plan is for code freezes
as follows
.IP "\(bu" 4
5.8.3 23:59:59 \s-1GMT,\s0 Wednesday December 31st 2003
.IP "\(bu" 4
5.8.4 23:59:59 \s-1GMT,\s0 Wednesday March 31st 2004
.IP "\(bu" 4
5.8.5 23:59:59 \s-1GMT,\s0 Wednesday June 30th 2004
.PP
with the release following soon after, when testing is complete.
.PP
See \*(L"Future Directions\*(R" in perl581delta for more soothsaying.
.SH "Reporting Bugs"
.IX Header "Reporting Bugs"
If you find what you think is a bug, you might check the articles
recently posted to the comp.lang.perl.misc newsgroup and the perl
bug database at http://bugs.perl.org/.  There may also be
information at http://www.perl.com/, the Perl Home Page.
.PP
If you believe you have an unreported bug, please run the \fBperlbug\fR
program included with your release.  Be sure to trim your bug down
to a tiny but sufficient test case.  Your bug report, along with the
output of \f(CW\*(C`perl \-V\*(C'\fR, will be sent off to perlbug@perl.org to be
analysed by the Perl porting team.  You can browse and search
the Perl 5 bugs at http://bugs.perl.org/
.SH "SEE ALSO"
.IX Header "SEE ALSO"
The \fIChanges\fR file for exhaustive details on what changed.
.PP
The \fI\s-1INSTALL\s0\fR file for how to build Perl.
.PP
The \fI\s-1README\s0\fR file for general stuff.
.PP
The \fIArtistic\fR and \fICopying\fR files for copyright information.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perl582delta5.16.1                           0100644 0001750 0001750 00000021557 12566207413 023475  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERL582DELTA 1"
.TH PERL582DELTA 1 "2013-02-26" "perl v5.16.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perl582delta \- what is new for perl v5.8.2
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document describes differences between the 5.8.1 release and
the 5.8.2 release.
.PP
If you are upgrading from an earlier release such as 5.6.1, first read
the perl58delta, which describes differences between 5.6.0 and
5.8.0, and the perl581delta, which describes differences between
5.8.0 and 5.8.1.
.SH "Incompatible Changes"
.IX Header "Incompatible Changes"
For threaded builds for modules calling certain re-entrant system calls,
binary compatibility was accidentally lost between 5.8.0 and 5.8.1.
Binary compatibility with 5.8.0 has been restored in 5.8.2, which
necessitates breaking compatibility with 5.8.1. We see this as the
lesser of two evils.
.PP
This will only affect people who have a threaded perl 5.8.1, and compiled
modules which use these calls, and now attempt to run the compiled modules
with 5.8.2. The fix is to re-compile and re-install the modules using 5.8.2.
.SH "Core Enhancements"
.IX Header "Core Enhancements"
.SS "Hash Randomisation"
.IX Subsection "Hash Randomisation"
The hash randomisation introduced with 5.8.1 has been amended. It
transpired that although the implementation introduced in 5.8.1 was source
compatible with 5.8.0, it was not binary compatible in certain cases. 5.8.2
contains an improved implementation which is both source and binary
compatible with both 5.8.0 and 5.8.1, and remains robust against the form of
attack which prompted the change for 5.8.1.
.PP
We are grateful to the Debian project for their input in this area.
See \*(L"Algorithmic Complexity Attacks\*(R" in perlsec for the original
rationale behind this change.
.SS "Threading"
.IX Subsection "Threading"
Several memory leaks associated with variables shared between threads
have been fixed.
.SH "Modules and Pragmata"
.IX Header "Modules and Pragmata"
.SS "Updated Modules And Pragmata"
.IX Subsection "Updated Modules And Pragmata"
The following modules and pragmata have been updated since Perl 5.8.1:
.IP "Devel::PPPort" 4
.IX Item "Devel::PPPort"
.PD 0
.IP "Digest::MD5" 4
.IX Item "Digest::MD5"
.IP "I18N::LangTags" 4
.IX Item "I18N::LangTags"
.IP "libnet" 4
.IX Item "libnet"
.IP "MIME::Base64" 4
.IX Item "MIME::Base64"
.IP "Pod::Perldoc" 4
.IX Item "Pod::Perldoc"
.IP "strict" 4
.IX Item "strict"
.PD
Documentation improved
.IP "Tie::Hash" 4
.IX Item "Tie::Hash"
Documentation improved
.IP "Time::HiRes" 4
.IX Item "Time::HiRes"
.PD 0
.IP "Unicode::Collate" 4
.IX Item "Unicode::Collate"
.IP "Unicode::Normalize" 4
.IX Item "Unicode::Normalize"
.IP "\s-1UNIVERSAL\s0" 4
.IX Item "UNIVERSAL"
.PD
Documentation improved
.SH "Selected Bug Fixes"
.IX Header "Selected Bug Fixes"
Some syntax errors involving unrecognized filetest operators are now handled
correctly by the parser.
.SH "Changed Internals"
.IX Header "Changed Internals"
Interpreter initialization is more complete when \-DMULTIPLICITY is off.
This should resolve problems with initializing and destroying the Perl
interpreter more than once in a single process.
.SH "Platform Specific Problems"
.IX Header "Platform Specific Problems"
Dynamic linker flags have been tweaked for Solaris and \s-1OS\s0 X, which should
solve problems seen while building some \s-1XS\s0 modules.
.PP
Bugs in \s-1OS/2\s0 sockets and tmpfile have been fixed.
.PP
In \s-1OS\s0 X \f(CW\*(C`setreuid\*(C'\fR and friends are troublesome \- perl will now work
around their problems as best possible.
.SH "Future Directions"
.IX Header "Future Directions"
Starting with 5.8.3 we intend to make more frequent maintenance releases,
with a smaller number of changes in each. The intent is to propagate
bug fixes out to stable releases more rapidly and make upgrading stable
releases less of an upheaval. This should give end users more
flexibility in their choice of upgrade timing, and allow them easier
assessment of the impact of upgrades. The current plan is for code freezes
as follows
.IP "\(bu" 4
5.8.3 23:59:59 \s-1GMT\s0, Wednesday December 31st 2003
.IP "\(bu" 4
5.8.4 23:59:59 \s-1GMT\s0, Wednesday March 31st 2004
.IP "\(bu" 4
5.8.5 23:59:59 \s-1GMT\s0, Wednesday June 30th 2004
.PP
with the release following soon after, when testing is complete.
.PP
See \*(L"Future Directions\*(R" in perl581delta for more soothsaying.
.SH "Reporting Bugs"
.IX Header "Reporting Bugs"
If you find what you think is a bug, you might check the articles
recently posted to the comp.lang.perl.misc newsgroup and the perl
bug database at http://bugs.perl.org/.  There may also be
information at http://www.perl.com/, the Perl Home Page.
.PP
If you believe you have an unreported bug, please run the \fBperlbug\fR
program included with your release.  Be sure to trim your bug down
to a tiny but sufficient test case.  Your bug report, along with the
output of \f(CW\*(C`perl \-V\*(C'\fR, will be sent off to perlbug@perl.org to be
analysed by the Perl porting team.  You can browse and search
the Perl 5 bugs at http://bugs.perl.org/
.SH "SEE ALSO"
.IX Header "SEE ALSO"
The \fIChanges\fR file for exhaustive details on what changed.
.PP
The \fI\s-1INSTALL\s0\fR file for how to build Perl.
.PP
The \fI\s-1README\s0\fR file for general stuff.
.PP
The \fIArtistic\fR and \fICopying\fR files for copyright information.
                                                                                                                                                 osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perl582delta5.18.1                           0100644 0001750 0001750 00000022100 12566207433 023462  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERL582DELTA 1"
.TH PERL582DELTA 1 "2013-11-04" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perl582delta \- what is new for perl v5.8.2
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document describes differences between the 5.8.1 release and
the 5.8.2 release.
.PP
If you are upgrading from an earlier release such as 5.6.1, first read
the perl58delta, which describes differences between 5.6.0 and
5.8.0, and the perl581delta, which describes differences between
5.8.0 and 5.8.1.
.SH "Incompatible Changes"
.IX Header "Incompatible Changes"
For threaded builds for modules calling certain re-entrant system calls,
binary compatibility was accidentally lost between 5.8.0 and 5.8.1.
Binary compatibility with 5.8.0 has been restored in 5.8.2, which
necessitates breaking compatibility with 5.8.1. We see this as the
lesser of two evils.
.PP
This will only affect people who have a threaded perl 5.8.1, and compiled
modules which use these calls, and now attempt to run the compiled modules
with 5.8.2. The fix is to re-compile and re-install the modules using 5.8.2.
.SH "Core Enhancements"
.IX Header "Core Enhancements"
.SS "Hash Randomisation"
.IX Subsection "Hash Randomisation"
The hash randomisation introduced with 5.8.1 has been amended. It
transpired that although the implementation introduced in 5.8.1 was source
compatible with 5.8.0, it was not binary compatible in certain cases. 5.8.2
contains an improved implementation which is both source and binary
compatible with both 5.8.0 and 5.8.1, and remains robust against the form of
attack which prompted the change for 5.8.1.
.PP
We are grateful to the Debian project for their input in this area.
See \*(L"Algorithmic Complexity Attacks\*(R" in perlsec for the original
rationale behind this change.
.SS "Threading"
.IX Subsection "Threading"
Several memory leaks associated with variables shared between threads
have been fixed.
.SH "Modules and Pragmata"
.IX Header "Modules and Pragmata"
.SS "Updated Modules And Pragmata"
.IX Subsection "Updated Modules And Pragmata"
The following modules and pragmata have been updated since Perl 5.8.1:
.IP "Devel::PPPort" 4
.IX Item "Devel::PPPort"
.PD 0
.IP "Digest::MD5" 4
.IX Item "Digest::MD5"
.IP "I18N::LangTags" 4
.IX Item "I18N::LangTags"
.IP "libnet" 4
.IX Item "libnet"
.IP "MIME::Base64" 4
.IX Item "MIME::Base64"
.IP "Pod::Perldoc" 4
.IX Item "Pod::Perldoc"
.IP "strict" 4
.IX Item "strict"
.PD
Documentation improved
.IP "Tie::Hash" 4
.IX Item "Tie::Hash"
Documentation improved
.IP "Time::HiRes" 4
.IX Item "Time::HiRes"
.PD 0
.IP "Unicode::Collate" 4
.IX Item "Unicode::Collate"
.IP "Unicode::Normalize" 4
.IX Item "Unicode::Normalize"
.IP "\s-1UNIVERSAL\s0" 4
.IX Item "UNIVERSAL"
.PD
Documentation improved
.SH "Selected Bug Fixes"
.IX Header "Selected Bug Fixes"
Some syntax errors involving unrecognized filetest operators are now handled
correctly by the parser.
.SH "Changed Internals"
.IX Header "Changed Internals"
Interpreter initialization is more complete when \-DMULTIPLICITY is off.
This should resolve problems with initializing and destroying the Perl
interpreter more than once in a single process.
.SH "Platform Specific Problems"
.IX Header "Platform Specific Problems"
Dynamic linker flags have been tweaked for Solaris and \s-1OS X,\s0 which should
solve problems seen while building some \s-1XS\s0 modules.
.PP
Bugs in \s-1OS/2\s0 sockets and tmpfile have been fixed.
.PP
In \s-1OS X \s0\f(CW\*(C`setreuid\*(C'\fR and friends are troublesome \- perl will now work
around their problems as best possible.
.SH "Future Directions"
.IX Header "Future Directions"
Starting with 5.8.3 we intend to make more frequent maintenance releases,
with a smaller number of changes in each. The intent is to propagate
bug fixes out to stable releases more rapidly and make upgrading stable
releases less of an upheaval. This should give end users more
flexibility in their choice of upgrade timing, and allow them easier
assessment of the impact of upgrades. The current plan is for code freezes
as follows
.IP "\(bu" 4
5.8.3 23:59:59 \s-1GMT,\s0 Wednesday December 31st 2003
.IP "\(bu" 4
5.8.4 23:59:59 \s-1GMT,\s0 Wednesday March 31st 2004
.IP "\(bu" 4
5.8.5 23:59:59 \s-1GMT,\s0 Wednesday June 30th 2004
.PP
with the release following soon after, when testing is complete.
.PP
See \*(L"Future Directions\*(R" in perl581delta for more soothsaying.
.SH "Reporting Bugs"
.IX Header "Reporting Bugs"
If you find what you think is a bug, you might check the articles
recently posted to the comp.lang.perl.misc newsgroup and the perl
bug database at http://bugs.perl.org/.  There may also be
information at http://www.perl.com/, the Perl Home Page.
.PP
If you believe you have an unreported bug, please run the \fBperlbug\fR
program included with your release.  Be sure to trim your bug down
to a tiny but sufficient test case.  Your bug report, along with the
output of \f(CW\*(C`perl \-V\*(C'\fR, will be sent off to perlbug@perl.org to be
analysed by the Perl porting team.  You can browse and search
the Perl 5 bugs at http://bugs.perl.org/
.SH "SEE ALSO"
.IX Header "SEE ALSO"
The \fIChanges\fR file for exhaustive details on what changed.
.PP
The \fI\s-1INSTALL\s0\fR file for how to build Perl.
.PP
The \fI\s-1README\s0\fR file for general stuff.
.PP
The \fIArtistic\fR and \fICopying\fR files for copyright information.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perl583delta.1                               0100644 0001750 0001750 00000027027 12566207433 023164  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERL583DELTA 1"
.TH PERL583DELTA 1 "2013-11-04" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perl583delta \- what is new for perl v5.8.3
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document describes differences between the 5.8.2 release and
the 5.8.3 release.
.PP
If you are upgrading from an earlier release such as 5.6.1, first read
the perl58delta, which describes differences between 5.6.0 and
5.8.0, and the perl581delta and perl582delta, which describe differences
between 5.8.0, 5.8.1 and 5.8.2
.SH "Incompatible Changes"
.IX Header "Incompatible Changes"
There are no changes incompatible with 5.8.2.
.SH "Core Enhancements"
.IX Header "Core Enhancements"
A \f(CW\*(C`SCALAR\*(C'\fR method is now available for tied hashes. This is called when
a tied hash is used in scalar context, such as
.PP
.Vb 3
\&    if (%tied_hash) {
\&        ...
\&    }
.Ve
.PP
The old behaviour was that \f(CW%tied_hash\fR would return whatever would have been
returned for that hash before the hash was tied (so usually 0). The new
behaviour in the absence of a \s-1SCALAR\s0 method is to return \s-1TRUE\s0 if in the
middle of an \f(CW\*(C`each\*(C'\fR iteration, and otherwise call \s-1FIRSTKEY\s0 to check if the
hash is empty (making sure that a subsequent \f(CW\*(C`each\*(C'\fR will also begin by
calling \s-1FIRSTKEY\s0). Please see \*(L"\s-1SCALAR\*(R"\s0 in perltie for the full details and
caveats.
.SH "Modules and Pragmata"
.IX Header "Modules and Pragmata"
.IP "\s-1CGI\s0" 4
.IX Item "CGI"
.PD 0
.IP "Cwd" 4
.IX Item "Cwd"
.IP "Digest" 4
.IX Item "Digest"
.IP "Digest::MD5" 4
.IX Item "Digest::MD5"
.IP "Encode" 4
.IX Item "Encode"
.IP "File::Spec" 4
.IX Item "File::Spec"
.IP "FindBin" 4
.IX Item "FindBin"
.PD
A function \f(CW\*(C`again\*(C'\fR is provided to resolve problems where modules in different
directories wish to use FindBin.
.IP "List::Util" 4
.IX Item "List::Util"
You can now weaken references to read only values.
.IP "Math::BigInt" 4
.IX Item "Math::BigInt"
.PD 0
.IP "PodParser" 4
.IX Item "PodParser"
.IP "Pod::Perldoc" 4
.IX Item "Pod::Perldoc"
.IP "\s-1POSIX\s0" 4
.IX Item "POSIX"
.IP "Unicode::Collate" 4
.IX Item "Unicode::Collate"
.IP "Unicode::Normalize" 4
.IX Item "Unicode::Normalize"
.IP "Test::Harness" 4
.IX Item "Test::Harness"
.IP "threads::shared" 4
.IX Item "threads::shared"
.PD
\&\f(CW\*(C`cond_wait\*(C'\fR has a new two argument form. \f(CW\*(C`cond_timedwait\*(C'\fR has been added.
.SH "Utility Changes"
.IX Header "Utility Changes"
\&\f(CW\*(C`find2perl\*(C'\fR now assumes \f(CW\*(C`\-print\*(C'\fR as a default action. Previously, it
needed to be specified explicitly.
.PP
A new utility, \f(CW\*(C`prove\*(C'\fR, makes it easy to run an individual regression test
at the command line. \f(CW\*(C`prove\*(C'\fR is part of Test::Harness, which users of earlier
Perl versions can install from \s-1CPAN.\s0
.SH "New Documentation"
.IX Header "New Documentation"
The documentation has been revised in places to produce more standard manpages.
.PP
The documentation for the special code blocks (\s-1BEGIN, CHECK, INIT, END\s0)
has been improved.
.SH "Installation and Configuration Improvements"
.IX Header "Installation and Configuration Improvements"
Perl now builds on OpenVMS I64
.SH "Selected Bug Fixes"
.IX Header "Selected Bug Fixes"
Using \fIsubstr()\fR on a \s-1UTF8\s0 string could cause subsequent accesses on that
string to return garbage. This was due to incorrect \s-1UTF8\s0 offsets being
cached, and is now fixed.
.PP
\&\fIjoin()\fR could return garbage when the same \fIjoin()\fR statement was used to
process 8 bit data having earlier processed \s-1UTF8\s0 data, due to the flags
on that statement's temporary workspace not being reset correctly. This
is now fixed.
.PP
\&\f(CW\*(C`$a .. $b\*(C'\fR will now work as expected when either \f(CW$a\fR or \f(CW$b\fR is \f(CW\*(C`undef\*(C'\fR
.PP
Using Unicode keys with tied hashes should now work correctly.
.PP
Reading $^E now preserves $!. Previously, the C code implementing $^E
did not preserve \f(CW\*(C`errno\*(C'\fR, so reading $^E could cause \f(CW\*(C`errno\*(C'\fR and therefore
\&\f(CW$!\fR to change unexpectedly.
.PP
Reentrant functions will (once more) work with \*(C+. 5.8.2 introduced a bugfix
which accidentally broke the compilation of Perl extensions written in \*(C+
.SH "New or Changed Diagnostics"
.IX Header "New or Changed Diagnostics"
The fatal error \*(L"\s-1DESTROY\s0 created new reference to dead object\*(R" is now
documented in perldiag.
.SH "Changed Internals"
.IX Header "Changed Internals"
The hash code has been refactored to reduce source duplication. The
external interface is unchanged, and aside from the bug fixes described
above, there should be no change in behaviour.
.PP
\&\f(CW\*(C`hv_clear_placeholders\*(C'\fR is now part of the perl \s-1API\s0
.PP
Some C macros have been tidied. In particular macros which create temporary
local variables now name these variables more defensively, which should
avoid bugs where names clash.
.PP
<signal.h> is now always included.
.SH "Configuration and Building"
.IX Header "Configuration and Building"
\&\f(CW\*(C`Configure\*(C'\fR now invokes callbacks regardless of the value of the variable
they are called for. Previously callbacks were only invoked in the
\&\f(CW\*(C`case $variable $define)\*(C'\fR branch. This change should only affect platform
maintainers writing configuration hints files.
.SH "Platform Specific Problems"
.IX Header "Platform Specific Problems"
The regression test ext/threads/shared/t/wait.t fails on early RedHat 9
and HP-UX 10.20 due to bugs in their threading implementations.
RedHat users should see https://rhn.redhat.com/errata/RHBA\-2003\-136.html
and consider upgrading their glibc.
.SH "Known Problems"
.IX Header "Known Problems"
Detached threads aren't supported on Windows yet, as they may lead to 
memory access violation problems.
.PP
There is a known race condition opening scripts in \f(CW\*(C`suidperl\*(C'\fR. \f(CW\*(C`suidperl\*(C'\fR
is neither built nor installed by default, and has been deprecated since
perl 5.8.0. You are advised to replace use of suidperl with tools such
as sudo ( http://www.courtesan.com/sudo/ )
.PP
We have a backlog of unresolved bugs. Dealing with bugs and bug reports
is unglamorous work; not something ideally suited to volunteer labour,
but that is all that we have.
.PP
The perl5 development team are implementing changes to help address this
problem, which should go live in early 2004.
.SH "Future Directions"
.IX Header "Future Directions"
Code freeze for the next maintenance release (5.8.4) is on March 31st 2004,
with release expected by mid April. Similarly 5.8.5's freeze will be at
the end of June, with release by mid July.
.SH "Obituary"
.IX Header "Obituary"
Iain 'Spoon' Truskett, Perl hacker, author of perlreref and
contributor to \s-1CPAN,\s0 died suddenly on 29th December 2003, aged 24.
He will be missed.
.SH "Reporting Bugs"
.IX Header "Reporting Bugs"
If you find what you think is a bug, you might check the articles
recently posted to the comp.lang.perl.misc newsgroup and the perl
bug database at http://bugs.perl.org.  There may also be
information at http://www.perl.org, the Perl Home Page.
.PP
If you believe you have an unreported bug, please run the \fBperlbug\fR
program included with your release.  Be sure to trim your bug down
to a tiny but sufficient test case.  Your bug report, along with the
output of \f(CW\*(C`perl \-V\*(C'\fR, will be sent off to perlbug@perl.org to be
analysed by the Perl porting team.  You can browse and search
the Perl 5 bugs at http://bugs.perl.org/
.SH "SEE ALSO"
.IX Header "SEE ALSO"
The \fIChanges\fR file for exhaustive details on what changed.
.PP
The \fI\s-1INSTALL\s0\fR file for how to build Perl.
.PP
The \fI\s-1README\s0\fR file for general stuff.
.PP
The \fIArtistic\fR and \fICopying\fR files for copyright information.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perl583delta5.16.1                           0100644 0001750 0001750 00000026533 12566207413 023475  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERL583DELTA 1"
.TH PERL583DELTA 1 "2013-02-26" "perl v5.16.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perl583delta \- what is new for perl v5.8.3
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document describes differences between the 5.8.2 release and
the 5.8.3 release.
.PP
If you are upgrading from an earlier release such as 5.6.1, first read
the perl58delta, which describes differences between 5.6.0 and
5.8.0, and the perl581delta and perl582delta, which describe differences
between 5.8.0, 5.8.1 and 5.8.2
.SH "Incompatible Changes"
.IX Header "Incompatible Changes"
There are no changes incompatible with 5.8.2.
.SH "Core Enhancements"
.IX Header "Core Enhancements"
A \f(CW\*(C`SCALAR\*(C'\fR method is now available for tied hashes. This is called when
a tied hash is used in scalar context, such as
.PP
.Vb 3
\&    if (%tied_hash) {
\&        ...
\&    }
.Ve
.PP
The old behaviour was that \f(CW%tied_hash\fR would return whatever would have been
returned for that hash before the hash was tied (so usually 0). The new
behaviour in the absence of a \s-1SCALAR\s0 method is to return \s-1TRUE\s0 if in the
middle of an \f(CW\*(C`each\*(C'\fR iteration, and otherwise call \s-1FIRSTKEY\s0 to check if the
hash is empty (making sure that a subsequent \f(CW\*(C`each\*(C'\fR will also begin by
calling \s-1FIRSTKEY\s0). Please see \*(L"\s-1SCALAR\s0\*(R" in perltie for the full details and
caveats.
.SH "Modules and Pragmata"
.IX Header "Modules and Pragmata"
.IP "\s-1CGI\s0" 4
.IX Item "CGI"
.PD 0
.IP "Cwd" 4
.IX Item "Cwd"
.IP "Digest" 4
.IX Item "Digest"
.IP "Digest::MD5" 4
.IX Item "Digest::MD5"
.IP "Encode" 4
.IX Item "Encode"
.IP "File::Spec" 4
.IX Item "File::Spec"
.IP "FindBin" 4
.IX Item "FindBin"
.PD
A function \f(CW\*(C`again\*(C'\fR is provided to resolve problems where modules in different
directories wish to use FindBin.
.IP "List::Util" 4
.IX Item "List::Util"
You can now weaken references to read only values.
.IP "Math::BigInt" 4
.IX Item "Math::BigInt"
.PD 0
.IP "PodParser" 4
.IX Item "PodParser"
.IP "Pod::Perldoc" 4
.IX Item "Pod::Perldoc"
.IP "\s-1POSIX\s0" 4
.IX Item "POSIX"
.IP "Unicode::Collate" 4
.IX Item "Unicode::Collate"
.IP "Unicode::Normalize" 4
.IX Item "Unicode::Normalize"
.IP "Test::Harness" 4
.IX Item "Test::Harness"
.IP "threads::shared" 4
.IX Item "threads::shared"
.PD
\&\f(CW\*(C`cond_wait\*(C'\fR has a new two argument form. \f(CW\*(C`cond_timedwait\*(C'\fR has been added.
.SH "Utility Changes"
.IX Header "Utility Changes"
\&\f(CW\*(C`find2perl\*(C'\fR now assumes \f(CW\*(C`\-print\*(C'\fR as a default action. Previously, it
needed to be specified explicitly.
.PP
A new utility, \f(CW\*(C`prove\*(C'\fR, makes it easy to run an individual regression test
at the command line. \f(CW\*(C`prove\*(C'\fR is part of Test::Harness, which users of earlier
Perl versions can install from \s-1CPAN\s0.
.SH "New Documentation"
.IX Header "New Documentation"
The documentation has been revised in places to produce more standard manpages.
.PP
The documentation for the special code blocks (\s-1BEGIN\s0, \s-1CHECK\s0, \s-1INIT\s0, \s-1END\s0)
has been improved.
.SH "Installation and Configuration Improvements"
.IX Header "Installation and Configuration Improvements"
Perl now builds on OpenVMS I64
.SH "Selected Bug Fixes"
.IX Header "Selected Bug Fixes"
Using \fIsubstr()\fR on a \s-1UTF8\s0 string could cause subsequent accesses on that
string to return garbage. This was due to incorrect \s-1UTF8\s0 offsets being
cached, and is now fixed.
.PP
\&\fIjoin()\fR could return garbage when the same \fIjoin()\fR statement was used to
process 8 bit data having earlier processed \s-1UTF8\s0 data, due to the flags
on that statement's temporary workspace not being reset correctly. This
is now fixed.
.PP
\&\f(CW\*(C`$a .. $b\*(C'\fR will now work as expected when either \f(CW$a\fR or \f(CW$b\fR is \f(CW\*(C`undef\*(C'\fR
.PP
Using Unicode keys with tied hashes should now work correctly.
.PP
Reading $^E now preserves $!. Previously, the C code implementing $^E
did not preserve \f(CW\*(C`errno\*(C'\fR, so reading $^E could cause \f(CW\*(C`errno\*(C'\fR and therefore
\&\f(CW$!\fR to change unexpectedly.
.PP
Reentrant functions will (once more) work with \*(C+. 5.8.2 introduced a bugfix
which accidentally broke the compilation of Perl extensions written in \*(C+
.SH "New or Changed Diagnostics"
.IX Header "New or Changed Diagnostics"
The fatal error \*(L"\s-1DESTROY\s0 created new reference to dead object\*(R" is now
documented in perldiag.
.SH "Changed Internals"
.IX Header "Changed Internals"
The hash code has been refactored to reduce source duplication. The
external interface is unchanged, and aside from the bug fixes described
above, there should be no change in behaviour.
.PP
\&\f(CW\*(C`hv_clear_placeholders\*(C'\fR is now part of the perl \s-1API\s0
.PP
Some C macros have been tidied. In particular macros which create temporary
local variables now name these variables more defensively, which should
avoid bugs where names clash.
.PP
<signal.h> is now always included.
.SH "Configuration and Building"
.IX Header "Configuration and Building"
\&\f(CW\*(C`Configure\*(C'\fR now invokes callbacks regardless of the value of the variable
they are called for. Previously callbacks were only invoked in the
\&\f(CW\*(C`case $variable $define)\*(C'\fR branch. This change should only affect platform
maintainers writing configuration hints files.
.SH "Platform Specific Problems"
.IX Header "Platform Specific Problems"
The regression test ext/threads/shared/t/wait.t fails on early RedHat 9
and HP-UX 10.20 due to bugs in their threading implementations.
RedHat users should see https://rhn.redhat.com/errata/RHBA\-2003\-136.html
and consider upgrading their glibc.
.SH "Known Problems"
.IX Header "Known Problems"
Detached threads aren't supported on Windows yet, as they may lead to 
memory access violation problems.
.PP
There is a known race condition opening scripts in \f(CW\*(C`suidperl\*(C'\fR. \f(CW\*(C`suidperl\*(C'\fR
is neither built nor installed by default, and has been deprecated since
perl 5.8.0. You are advised to replace use of suidperl with tools such
as sudo ( http://www.courtesan.com/sudo/ )
.PP
We have a backlog of unresolved bugs. Dealing with bugs and bug reports
is unglamorous work; not something ideally suited to volunteer labour,
but that is all that we have.
.PP
The perl5 development team are implementing changes to help address this
problem, which should go live in early 2004.
.SH "Future Directions"
.IX Header "Future Directions"
Code freeze for the next maintenance release (5.8.4) is on March 31st 2004,
with release expected by mid April. Similarly 5.8.5's freeze will be at
the end of June, with release by mid July.
.SH "Obituary"
.IX Header "Obituary"
Iain 'Spoon' Truskett, Perl hacker, author of perlreref and
contributor to \s-1CPAN\s0, died suddenly on 29th December 2003, aged 24.
He will be missed.
.SH "Reporting Bugs"
.IX Header "Reporting Bugs"
If you find what you think is a bug, you might check the articles
recently posted to the comp.lang.perl.misc newsgroup and the perl
bug database at http://bugs.perl.org.  There may also be
information at http://www.perl.org, the Perl Home Page.
.PP
If you believe you have an unreported bug, please run the \fBperlbug\fR
program included with your release.  Be sure to trim your bug down
to a tiny but sufficient test case.  Your bug report, along with the
output of \f(CW\*(C`perl \-V\*(C'\fR, will be sent off to perlbug@perl.org to be
analysed by the Perl porting team.  You can browse and search
the Perl 5 bugs at http://bugs.perl.org/
.SH "SEE ALSO"
.IX Header "SEE ALSO"
The \fIChanges\fR file for exhaustive details on what changed.
.PP
The \fI\s-1INSTALL\s0\fR file for how to build Perl.
.PP
The \fI\s-1README\s0\fR file for general stuff.
.PP
The \fIArtistic\fR and \fICopying\fR files for copyright information.
                                                                                                                                                                     osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perl583delta5.18.1                           0100644 0001750 0001750 00000027027 12566207433 023500  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERL583DELTA 1"
.TH PERL583DELTA 1 "2013-11-04" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perl583delta \- what is new for perl v5.8.3
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document describes differences between the 5.8.2 release and
the 5.8.3 release.
.PP
If you are upgrading from an earlier release such as 5.6.1, first read
the perl58delta, which describes differences between 5.6.0 and
5.8.0, and the perl581delta and perl582delta, which describe differences
between 5.8.0, 5.8.1 and 5.8.2
.SH "Incompatible Changes"
.IX Header "Incompatible Changes"
There are no changes incompatible with 5.8.2.
.SH "Core Enhancements"
.IX Header "Core Enhancements"
A \f(CW\*(C`SCALAR\*(C'\fR method is now available for tied hashes. This is called when
a tied hash is used in scalar context, such as
.PP
.Vb 3
\&    if (%tied_hash) {
\&        ...
\&    }
.Ve
.PP
The old behaviour was that \f(CW%tied_hash\fR would return whatever would have been
returned for that hash before the hash was tied (so usually 0). The new
behaviour in the absence of a \s-1SCALAR\s0 method is to return \s-1TRUE\s0 if in the
middle of an \f(CW\*(C`each\*(C'\fR iteration, and otherwise call \s-1FIRSTKEY\s0 to check if the
hash is empty (making sure that a subsequent \f(CW\*(C`each\*(C'\fR will also begin by
calling \s-1FIRSTKEY\s0). Please see \*(L"\s-1SCALAR\*(R"\s0 in perltie for the full details and
caveats.
.SH "Modules and Pragmata"
.IX Header "Modules and Pragmata"
.IP "\s-1CGI\s0" 4
.IX Item "CGI"
.PD 0
.IP "Cwd" 4
.IX Item "Cwd"
.IP "Digest" 4
.IX Item "Digest"
.IP "Digest::MD5" 4
.IX Item "Digest::MD5"
.IP "Encode" 4
.IX Item "Encode"
.IP "File::Spec" 4
.IX Item "File::Spec"
.IP "FindBin" 4
.IX Item "FindBin"
.PD
A function \f(CW\*(C`again\*(C'\fR is provided to resolve problems where modules in different
directories wish to use FindBin.
.IP "List::Util" 4
.IX Item "List::Util"
You can now weaken references to read only values.
.IP "Math::BigInt" 4
.IX Item "Math::BigInt"
.PD 0
.IP "PodParser" 4
.IX Item "PodParser"
.IP "Pod::Perldoc" 4
.IX Item "Pod::Perldoc"
.IP "\s-1POSIX\s0" 4
.IX Item "POSIX"
.IP "Unicode::Collate" 4
.IX Item "Unicode::Collate"
.IP "Unicode::Normalize" 4
.IX Item "Unicode::Normalize"
.IP "Test::Harness" 4
.IX Item "Test::Harness"
.IP "threads::shared" 4
.IX Item "threads::shared"
.PD
\&\f(CW\*(C`cond_wait\*(C'\fR has a new two argument form. \f(CW\*(C`cond_timedwait\*(C'\fR has been added.
.SH "Utility Changes"
.IX Header "Utility Changes"
\&\f(CW\*(C`find2perl\*(C'\fR now assumes \f(CW\*(C`\-print\*(C'\fR as a default action. Previously, it
needed to be specified explicitly.
.PP
A new utility, \f(CW\*(C`prove\*(C'\fR, makes it easy to run an individual regression test
at the command line. \f(CW\*(C`prove\*(C'\fR is part of Test::Harness, which users of earlier
Perl versions can install from \s-1CPAN.\s0
.SH "New Documentation"
.IX Header "New Documentation"
The documentation has been revised in places to produce more standard manpages.
.PP
The documentation for the special code blocks (\s-1BEGIN, CHECK, INIT, END\s0)
has been improved.
.SH "Installation and Configuration Improvements"
.IX Header "Installation and Configuration Improvements"
Perl now builds on OpenVMS I64
.SH "Selected Bug Fixes"
.IX Header "Selected Bug Fixes"
Using \fIsubstr()\fR on a \s-1UTF8\s0 string could cause subsequent accesses on that
string to return garbage. This was due to incorrect \s-1UTF8\s0 offsets being
cached, and is now fixed.
.PP
\&\fIjoin()\fR could return garbage when the same \fIjoin()\fR statement was used to
process 8 bit data having earlier processed \s-1UTF8\s0 data, due to the flags
on that statement's temporary workspace not being reset correctly. This
is now fixed.
.PP
\&\f(CW\*(C`$a .. $b\*(C'\fR will now work as expected when either \f(CW$a\fR or \f(CW$b\fR is \f(CW\*(C`undef\*(C'\fR
.PP
Using Unicode keys with tied hashes should now work correctly.
.PP
Reading $^E now preserves $!. Previously, the C code implementing $^E
did not preserve \f(CW\*(C`errno\*(C'\fR, so reading $^E could cause \f(CW\*(C`errno\*(C'\fR and therefore
\&\f(CW$!\fR to change unexpectedly.
.PP
Reentrant functions will (once more) work with \*(C+. 5.8.2 introduced a bugfix
which accidentally broke the compilation of Perl extensions written in \*(C+
.SH "New or Changed Diagnostics"
.IX Header "New or Changed Diagnostics"
The fatal error \*(L"\s-1DESTROY\s0 created new reference to dead object\*(R" is now
documented in perldiag.
.SH "Changed Internals"
.IX Header "Changed Internals"
The hash code has been refactored to reduce source duplication. The
external interface is unchanged, and aside from the bug fixes described
above, there should be no change in behaviour.
.PP
\&\f(CW\*(C`hv_clear_placeholders\*(C'\fR is now part of the perl \s-1API\s0
.PP
Some C macros have been tidied. In particular macros which create temporary
local variables now name these variables more defensively, which should
avoid bugs where names clash.
.PP
<signal.h> is now always included.
.SH "Configuration and Building"
.IX Header "Configuration and Building"
\&\f(CW\*(C`Configure\*(C'\fR now invokes callbacks regardless of the value of the variable
they are called for. Previously callbacks were only invoked in the
\&\f(CW\*(C`case $variable $define)\*(C'\fR branch. This change should only affect platform
maintainers writing configuration hints files.
.SH "Platform Specific Problems"
.IX Header "Platform Specific Problems"
The regression test ext/threads/shared/t/wait.t fails on early RedHat 9
and HP-UX 10.20 due to bugs in their threading implementations.
RedHat users should see https://rhn.redhat.com/errata/RHBA\-2003\-136.html
and consider upgrading their glibc.
.SH "Known Problems"
.IX Header "Known Problems"
Detached threads aren't supported on Windows yet, as they may lead to 
memory access violation problems.
.PP
There is a known race condition opening scripts in \f(CW\*(C`suidperl\*(C'\fR. \f(CW\*(C`suidperl\*(C'\fR
is neither built nor installed by default, and has been deprecated since
perl 5.8.0. You are advised to replace use of suidperl with tools such
as sudo ( http://www.courtesan.com/sudo/ )
.PP
We have a backlog of unresolved bugs. Dealing with bugs and bug reports
is unglamorous work; not something ideally suited to volunteer labour,
but that is all that we have.
.PP
The perl5 development team are implementing changes to help address this
problem, which should go live in early 2004.
.SH "Future Directions"
.IX Header "Future Directions"
Code freeze for the next maintenance release (5.8.4) is on March 31st 2004,
with release expected by mid April. Similarly 5.8.5's freeze will be at
the end of June, with release by mid July.
.SH "Obituary"
.IX Header "Obituary"
Iain 'Spoon' Truskett, Perl hacker, author of perlreref and
contributor to \s-1CPAN,\s0 died suddenly on 29th December 2003, aged 24.
He will be missed.
.SH "Reporting Bugs"
.IX Header "Reporting Bugs"
If you find what you think is a bug, you might check the articles
recently posted to the comp.lang.perl.misc newsgroup and the perl
bug database at http://bugs.perl.org.  There may also be
information at http://www.perl.org, the Perl Home Page.
.PP
If you believe you have an unreported bug, please run the \fBperlbug\fR
program included with your release.  Be sure to trim your bug down
to a tiny but sufficient test case.  Your bug report, along with the
output of \f(CW\*(C`perl \-V\*(C'\fR, will be sent off to perlbug@perl.org to be
analysed by the Perl porting team.  You can browse and search
the Perl 5 bugs at http://bugs.perl.org/
.SH "SEE ALSO"
.IX Header "SEE ALSO"
The \fIChanges\fR file for exhaustive details on what changed.
.PP
The \fI\s-1INSTALL\s0\fR file for how to build Perl.
.PP
The \fI\s-1README\s0\fR file for general stuff.
.PP
The \fIArtistic\fR and \fICopying\fR files for copyright information.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perl584delta.1                               0100644 0001750 0001750 00000032075 12566207433 023164  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERL584DELTA 1"
.TH PERL584DELTA 1 "2013-11-04" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perl584delta \- what is new for perl v5.8.4
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document describes differences between the 5.8.3 release and
the 5.8.4 release.
.SH "Incompatible Changes"
.IX Header "Incompatible Changes"
Many minor bugs have been fixed. Scripts which happen to rely on previously
erroneous behaviour will consider these fixes as incompatible changes :\-)
You are advised to perform sufficient acceptance testing on this release
to satisfy yourself that this does not affect you, before putting this
release into production.
.PP
The diagnostic output of Carp has been changed slightly, to add a space after
the comma between arguments. This makes it much easier for tools such as
web browsers to wrap it, but might confuse any automatic tools which perform
detailed parsing of Carp output.
.PP
The internal dump output has been improved, so that non-printable characters
such as newline and backspace are output in \f(CW\*(C`\ex\*(C'\fR notation, rather than
octal. This might just confuse non-robust tools which parse the output of
modules such as Devel::Peek.
.SH "Core Enhancements"
.IX Header "Core Enhancements"
.SS "Malloc wrapping"
.IX Subsection "Malloc wrapping"
Perl can now be built to detect attempts to assign pathologically large chunks
of memory.  Previously such assignments would suffer from integer wrap-around
during size calculations causing a misallocation, which would crash perl, and
could theoretically be used for \*(L"stack smashing\*(R" attacks.  The wrapping
defaults to enabled on platforms where we know it works (most \s-1AIX\s0
configurations, BSDi, Darwin, \s-1DEC OSF/1,\s0 FreeBSD, \s-1HP/UX, GNU\s0 Linux, OpenBSD,
Solaris, \s-1VMS\s0 and most Win32 compilers) and defaults to disabled on other
platforms.
.SS "Unicode Character Database 4.0.1"
.IX Subsection "Unicode Character Database 4.0.1"
The copy of the Unicode Character Database included in Perl 5.8 has
been updated to 4.0.1 from 4.0.0.
.SS "suidperl less insecure"
.IX Subsection "suidperl less insecure"
Paul Szabo has analysed and patched \f(CW\*(C`suidperl\*(C'\fR to remove existing known
insecurities. Currently there are no known holes in \f(CW\*(C`suidperl\*(C'\fR, but previous
experience shows that we cannot be confident that these were the last. You may
no longer invoke the set uid perl directly, so to preserve backwards
compatibility with scripts that invoke #!/usr/bin/suidperl the only set uid
binary is now \f(CW\*(C`sperl5.8.\*(C'\fR\fIn\fR (\f(CW\*(C`sperl5.8.4\*(C'\fR for this release). \f(CW\*(C`suidperl\*(C'\fR
is installed as a hard link to \f(CW\*(C`perl\*(C'\fR; both \f(CW\*(C`suidperl\*(C'\fR and \f(CW\*(C`perl\*(C'\fR will
invoke \f(CW\*(C`sperl5.8.4\*(C'\fR automatically the set uid binary, so this change should
be completely transparent.
.PP
For new projects the core perl team would strongly recommend that you use
dedicated, single purpose security tools such as \f(CW\*(C`sudo\*(C'\fR in preference to
\&\f(CW\*(C`suidperl\*(C'\fR.
.SS "format"
.IX Subsection "format"
In addition to bug fixes, \f(CW\*(C`format\*(C'\fR's features have been enhanced. See
perlform
.SH "Modules and Pragmata"
.IX Header "Modules and Pragmata"
The (mis)use of \f(CW\*(C`/tmp\*(C'\fR in core modules and documentation has been tidied up.
Some modules available both within the perl core and independently from \s-1CPAN
\&\s0(\*(L"dual-life modules\*(R") have not yet had these changes applied; the changes
will be integrated into future stable perl releases as the modules are
updated on \s-1CPAN.\s0
.SS "Updated modules"
.IX Subsection "Updated modules"
.IP "Attribute::Handlers" 4
.IX Item "Attribute::Handlers"
.PD 0
.IP "B" 4
.IX Item "B"
.IP "Benchmark" 4
.IX Item "Benchmark"
.IP "\s-1CGI\s0" 4
.IX Item "CGI"
.IP "Carp" 4
.IX Item "Carp"
.IP "Cwd" 4
.IX Item "Cwd"
.IP "Exporter" 4
.IX Item "Exporter"
.IP "File::Find" 4
.IX Item "File::Find"
.IP "\s-1IO\s0" 4
.IX Item "IO"
.IP "IPC::Open3" 4
.IX Item "IPC::Open3"
.IP "Local::Maketext" 4
.IX Item "Local::Maketext"
.IP "Math::BigFloat" 4
.IX Item "Math::BigFloat"
.IP "Math::BigInt" 4
.IX Item "Math::BigInt"
.IP "Math::BigRat" 4
.IX Item "Math::BigRat"
.IP "MIME::Base64" 4
.IX Item "MIME::Base64"
.IP "ODBM_File" 4
.IX Item "ODBM_File"
.IP "\s-1POSIX\s0" 4
.IX Item "POSIX"
.IP "Shell" 4
.IX Item "Shell"
.IP "Socket" 4
.IX Item "Socket"
.PD
There is experimental support for Linux abstract Unix domain sockets.
.IP "Storable" 4
.IX Item "Storable"
.PD 0
.IP "Switch" 4
.IX Item "Switch"
.PD
Synced with its \s-1CPAN\s0 version 2.10
.IP "Sys::Syslog" 4
.IX Item "Sys::Syslog"
\&\f(CW\*(C`syslog()\*(C'\fR can now use numeric constants for facility names and priorities,
in addition to strings.
.IP "Term::ANSIColor" 4
.IX Item "Term::ANSIColor"
.PD 0
.IP "Time::HiRes" 4
.IX Item "Time::HiRes"
.IP "Unicode::UCD" 4
.IX Item "Unicode::UCD"
.IP "Win32" 4
.IX Item "Win32"
.PD
Win32.pm/Win32.xs has moved from the libwin32 module to core Perl
.IP "base" 4
.IX Item "base"
.PD 0
.IP "open" 4
.IX Item "open"
.IP "threads" 4
.IX Item "threads"
.PD
Detached threads are now also supported on Windows.
.IP "utf8" 4
.IX Item "utf8"
.SH "Performance Enhancements"
.IX Header "Performance Enhancements"
.PD 0
.IP "\(bu" 4
.PD
Accelerated Unicode case mappings (\f(CW\*(C`/i\*(C'\fR, \f(CW\*(C`lc\*(C'\fR, \f(CW\*(C`uc\*(C'\fR, etc).
.IP "\(bu" 4
In place sort optimised (eg \f(CW\*(C`@a = sort @a\*(C'\fR)
.IP "\(bu" 4
Unnecessary assignment optimised away in
.Sp
.Vb 3
\&  my $s = undef;
\&  my @a = ();
\&  my %h = ();
.Ve
.IP "\(bu" 4
Optimised \f(CW\*(C`map\*(C'\fR in scalar context
.SH "Utility Changes"
.IX Header "Utility Changes"
The Perl debugger (\fIlib/perl5db.pl\fR) can now save all debugger commands for
sourcing later, and can display the parent inheritance tree of a given class.
.SH "Installation and Configuration Improvements"
.IX Header "Installation and Configuration Improvements"
The build process on both \s-1VMS\s0 and Windows has had several minor improvements
made. On Windows Borland's C compiler can now compile perl with PerlIO and/or
\&\s-1USE_LARGE_FILES\s0 enabled.
.PP
\&\f(CW\*(C`perl.exe\*(C'\fR on Windows now has a \*(L"Camel\*(R" logo icon. The use of a camel with
the topic of Perl is a trademark of O'Reilly and Associates Inc., and is used
with their permission (ie distribution of the source, compiling a Windows
executable from it, and using that executable locally). Use of the supplied
camel for anything other than a perl executable's icon is specifically not
covered, and anyone wishing to redistribute perl binaries \fIwith\fR the icon
should check directly with O'Reilly beforehand.
.PP
Perl should build cleanly on Stratus \s-1VOS\s0 once more.
.SH "Selected Bug Fixes"
.IX Header "Selected Bug Fixes"
More utf8 bugs fixed, notably in how \f(CW\*(C`chomp\*(C'\fR, \f(CW\*(C`chop\*(C'\fR, \f(CW\*(C`send\*(C'\fR, and
\&\f(CW\*(C`syswrite\*(C'\fR and interact with utf8 data. Concatenation now works correctly
when \f(CW\*(C`use bytes;\*(C'\fR is in scope.
.PP
Pragmata are now correctly propagated into (?{...}) constructions in regexps.
Code such as
.PP
.Vb 1
\&   my $x = qr{ ... (??{ $x }) ... };
.Ve
.PP
will now (correctly) fail under use strict. (As the inner \f(CW$x\fR is and
has always referred to \f(CW$::x\fR)
.PP
The \*(L"const in void context\*(R" warning has been suppressed for a constant in an
optimised-away boolean expression such as \f(CW\*(C`5 || print;\*(C'\fR
.PP
\&\f(CW\*(C`perl \-i\*(C'\fR could \f(CW\*(C`fchmod(stdin)\*(C'\fR by mistake. This is serious if stdin is
attached to a terminal, and perl is running as root. Now fixed.
.SH "New or Changed Diagnostics"
.IX Header "New or Changed Diagnostics"
\&\f(CW\*(C`Carp\*(C'\fR and the internal diagnostic routines used by \f(CW\*(C`Devel::Peek\*(C'\fR have been
made clearer, as described in \*(L"Incompatible Changes\*(R"
.SH "Changed Internals"
.IX Header "Changed Internals"
Some bugs have been fixed in the hash internals. Restricted hashes and
their place holders are now allocated and deleted at slightly different times,
but this should not be visible to user code.
.SH "Future Directions"
.IX Header "Future Directions"
Code freeze for the next maintenance release (5.8.5) will be on 30th June
2004, with release by mid July.
.SH "Platform Specific Problems"
.IX Header "Platform Specific Problems"
This release is known not to build on Windows 95.
.SH "Reporting Bugs"
.IX Header "Reporting Bugs"
If you find what you think is a bug, you might check the articles
recently posted to the comp.lang.perl.misc newsgroup and the perl
bug database at http://bugs.perl.org.  There may also be
information at http://www.perl.org, the Perl Home Page.
.PP
If you believe you have an unreported bug, please run the \fBperlbug\fR
program included with your release.  Be sure to trim your bug down
to a tiny but sufficient test case.  Your bug report, along with the
output of \f(CW\*(C`perl \-V\*(C'\fR, will be sent off to perlbug@perl.org to be
analysed by the Perl porting team.  You can browse and search
the Perl 5 bugs at http://bugs.perl.org/
.SH "SEE ALSO"
.IX Header "SEE ALSO"
The \fIChanges\fR file for exhaustive details on what changed.
.PP
The \fI\s-1INSTALL\s0\fR file for how to build Perl.
.PP
The \fI\s-1README\s0\fR file for general stuff.
.PP
The \fIArtistic\fR and \fICopying\fR files for copyright information.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                   osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perl584delta5.16.1                           0100644 0001750 0001750 00000031570 12566207413 023473  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERL584DELTA 1"
.TH PERL584DELTA 1 "2013-02-26" "perl v5.16.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perl584delta \- what is new for perl v5.8.4
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document describes differences between the 5.8.3 release and
the 5.8.4 release.
.SH "Incompatible Changes"
.IX Header "Incompatible Changes"
Many minor bugs have been fixed. Scripts which happen to rely on previously
erroneous behaviour will consider these fixes as incompatible changes :\-)
You are advised to perform sufficient acceptance testing on this release
to satisfy yourself that this does not affect you, before putting this
release into production.
.PP
The diagnostic output of Carp has been changed slightly, to add a space after
the comma between arguments. This makes it much easier for tools such as
web browsers to wrap it, but might confuse any automatic tools which perform
detailed parsing of Carp output.
.PP
The internal dump output has been improved, so that non-printable characters
such as newline and backspace are output in \f(CW\*(C`\ex\*(C'\fR notation, rather than
octal. This might just confuse non-robust tools which parse the output of
modules such as Devel::Peek.
.SH "Core Enhancements"
.IX Header "Core Enhancements"
.SS "Malloc wrapping"
.IX Subsection "Malloc wrapping"
Perl can now be built to detect attempts to assign pathologically large chunks
of memory.  Previously such assignments would suffer from integer wrap-around
during size calculations causing a misallocation, which would crash perl, and
could theoretically be used for \*(L"stack smashing\*(R" attacks.  The wrapping
defaults to enabled on platforms where we know it works (most \s-1AIX\s0
configurations, BSDi, Darwin, \s-1DEC\s0 \s-1OSF/1\s0, FreeBSD, \s-1HP/UX\s0, \s-1GNU\s0 Linux, OpenBSD,
Solaris, \s-1VMS\s0 and most Win32 compilers) and defaults to disabled on other
platforms.
.SS "Unicode Character Database 4.0.1"
.IX Subsection "Unicode Character Database 4.0.1"
The copy of the Unicode Character Database included in Perl 5.8 has
been updated to 4.0.1 from 4.0.0.
.SS "suidperl less insecure"
.IX Subsection "suidperl less insecure"
Paul Szabo has analysed and patched \f(CW\*(C`suidperl\*(C'\fR to remove existing known
insecurities. Currently there are no known holes in \f(CW\*(C`suidperl\*(C'\fR, but previous
experience shows that we cannot be confident that these were the last. You may
no longer invoke the set uid perl directly, so to preserve backwards
compatibility with scripts that invoke #!/usr/bin/suidperl the only set uid
binary is now \f(CW\*(C`sperl5.8.\*(C'\fR\fIn\fR (\f(CW\*(C`sperl5.8.4\*(C'\fR for this release). \f(CW\*(C`suidperl\*(C'\fR
is installed as a hard link to \f(CW\*(C`perl\*(C'\fR; both \f(CW\*(C`suidperl\*(C'\fR and \f(CW\*(C`perl\*(C'\fR will
invoke \f(CW\*(C`sperl5.8.4\*(C'\fR automatically the set uid binary, so this change should
be completely transparent.
.PP
For new projects the core perl team would strongly recommend that you use
dedicated, single purpose security tools such as \f(CW\*(C`sudo\*(C'\fR in preference to
\&\f(CW\*(C`suidperl\*(C'\fR.
.SS "format"
.IX Subsection "format"
In addition to bug fixes, \f(CW\*(C`format\*(C'\fR's features have been enhanced. See
perlform
.SH "Modules and Pragmata"
.IX Header "Modules and Pragmata"
The (mis)use of \f(CW\*(C`/tmp\*(C'\fR in core modules and documentation has been tidied up.
Some modules available both within the perl core and independently from \s-1CPAN\s0
(\*(L"dual-life modules\*(R") have not yet had these changes applied; the changes
will be integrated into future stable perl releases as the modules are
updated on \s-1CPAN\s0.
.SS "Updated modules"
.IX Subsection "Updated modules"
.IP "Attribute::Handlers" 4
.IX Item "Attribute::Handlers"
.PD 0
.IP "B" 4
.IX Item "B"
.IP "Benchmark" 4
.IX Item "Benchmark"
.IP "\s-1CGI\s0" 4
.IX Item "CGI"
.IP "Carp" 4
.IX Item "Carp"
.IP "Cwd" 4
.IX Item "Cwd"
.IP "Exporter" 4
.IX Item "Exporter"
.IP "File::Find" 4
.IX Item "File::Find"
.IP "\s-1IO\s0" 4
.IX Item "IO"
.IP "IPC::Open3" 4
.IX Item "IPC::Open3"
.IP "Local::Maketext" 4
.IX Item "Local::Maketext"
.IP "Math::BigFloat" 4
.IX Item "Math::BigFloat"
.IP "Math::BigInt" 4
.IX Item "Math::BigInt"
.IP "Math::BigRat" 4
.IX Item "Math::BigRat"
.IP "MIME::Base64" 4
.IX Item "MIME::Base64"
.IP "ODBM_File" 4
.IX Item "ODBM_File"
.IP "\s-1POSIX\s0" 4
.IX Item "POSIX"
.IP "Shell" 4
.IX Item "Shell"
.IP "Socket" 4
.IX Item "Socket"
.PD
There is experimental support for Linux abstract Unix domain sockets.
.IP "Storable" 4
.IX Item "Storable"
.PD 0
.IP "Switch" 4
.IX Item "Switch"
.PD
Synced with its \s-1CPAN\s0 version 2.10
.IP "Sys::Syslog" 4
.IX Item "Sys::Syslog"
\&\f(CW\*(C`syslog()\*(C'\fR can now use numeric constants for facility names and priorities,
in addition to strings.
.IP "Term::ANSIColor" 4
.IX Item "Term::ANSIColor"
.PD 0
.IP "Time::HiRes" 4
.IX Item "Time::HiRes"
.IP "Unicode::UCD" 4
.IX Item "Unicode::UCD"
.IP "Win32" 4
.IX Item "Win32"
.PD
Win32.pm/Win32.xs has moved from the libwin32 module to core Perl
.IP "base" 4
.IX Item "base"
.PD 0
.IP "open" 4
.IX Item "open"
.IP "threads" 4
.IX Item "threads"
.PD
Detached threads are now also supported on Windows.
.IP "utf8" 4
.IX Item "utf8"
.SH "Performance Enhancements"
.IX Header "Performance Enhancements"
.PD 0
.IP "\(bu" 4
.PD
Accelerated Unicode case mappings (\f(CW\*(C`/i\*(C'\fR, \f(CW\*(C`lc\*(C'\fR, \f(CW\*(C`uc\*(C'\fR, etc).
.IP "\(bu" 4
In place sort optimised (eg \f(CW\*(C`@a = sort @a\*(C'\fR)
.IP "\(bu" 4
Unnecessary assignment optimised away in
.Sp
.Vb 3
\&  my $s = undef;
\&  my @a = ();
\&  my %h = ();
.Ve
.IP "\(bu" 4
Optimised \f(CW\*(C`map\*(C'\fR in scalar context
.SH "Utility Changes"
.IX Header "Utility Changes"
The Perl debugger (\fIlib/perl5db.pl\fR) can now save all debugger commands for
sourcing later, and can display the parent inheritance tree of a given class.
.SH "Installation and Configuration Improvements"
.IX Header "Installation and Configuration Improvements"
The build process on both \s-1VMS\s0 and Windows has had several minor improvements
made. On Windows Borland's C compiler can now compile perl with PerlIO and/or
\&\s-1USE_LARGE_FILES\s0 enabled.
.PP
\&\f(CW\*(C`perl.exe\*(C'\fR on Windows now has a \*(L"Camel\*(R" logo icon. The use of a camel with
the topic of Perl is a trademark of O'Reilly and Associates Inc., and is used
with their permission (ie distribution of the source, compiling a Windows
executable from it, and using that executable locally). Use of the supplied
camel for anything other than a perl executable's icon is specifically not
covered, and anyone wishing to redistribute perl binaries \fIwith\fR the icon
should check directly with O'Reilly beforehand.
.PP
Perl should build cleanly on Stratus \s-1VOS\s0 once more.
.SH "Selected Bug Fixes"
.IX Header "Selected Bug Fixes"
More utf8 bugs fixed, notably in how \f(CW\*(C`chomp\*(C'\fR, \f(CW\*(C`chop\*(C'\fR, \f(CW\*(C`send\*(C'\fR, and
\&\f(CW\*(C`syswrite\*(C'\fR and interact with utf8 data. Concatenation now works correctly
when \f(CW\*(C`use bytes;\*(C'\fR is in scope.
.PP
Pragmata are now correctly propagated into (?{...}) constructions in regexps.
Code such as
.PP
.Vb 1
\&   my $x = qr{ ... (??{ $x }) ... };
.Ve
.PP
will now (correctly) fail under use strict. (As the inner \f(CW$x\fR is and
has always referred to \f(CW$::x\fR)
.PP
The \*(L"const in void context\*(R" warning has been suppressed for a constant in an
optimised-away boolean expression such as \f(CW\*(C`5 || print;\*(C'\fR
.PP
\&\f(CW\*(C`perl \-i\*(C'\fR could \f(CW\*(C`fchmod(stdin)\*(C'\fR by mistake. This is serious if stdin is
attached to a terminal, and perl is running as root. Now fixed.
.SH "New or Changed Diagnostics"
.IX Header "New or Changed Diagnostics"
\&\f(CW\*(C`Carp\*(C'\fR and the internal diagnostic routines used by \f(CW\*(C`Devel::Peek\*(C'\fR have been
made clearer, as described in \*(L"Incompatible Changes\*(R"
.SH "Changed Internals"
.IX Header "Changed Internals"
Some bugs have been fixed in the hash internals. Restricted hashes and
their place holders are now allocated and deleted at slightly different times,
but this should not be visible to user code.
.SH "Future Directions"
.IX Header "Future Directions"
Code freeze for the next maintenance release (5.8.5) will be on 30th June
2004, with release by mid July.
.SH "Platform Specific Problems"
.IX Header "Platform Specific Problems"
This release is known not to build on Windows 95.
.SH "Reporting Bugs"
.IX Header "Reporting Bugs"
If you find what you think is a bug, you might check the articles
recently posted to the comp.lang.perl.misc newsgroup and the perl
bug database at http://bugs.perl.org.  There may also be
information at http://www.perl.org, the Perl Home Page.
.PP
If you believe you have an unreported bug, please run the \fBperlbug\fR
program included with your release.  Be sure to trim your bug down
to a tiny but sufficient test case.  Your bug report, along with the
output of \f(CW\*(C`perl \-V\*(C'\fR, will be sent off to perlbug@perl.org to be
analysed by the Perl porting team.  You can browse and search
the Perl 5 bugs at http://bugs.perl.org/
.SH "SEE ALSO"
.IX Header "SEE ALSO"
The \fIChanges\fR file for exhaustive details on what changed.
.PP
The \fI\s-1INSTALL\s0\fR file for how to build Perl.
.PP
The \fI\s-1README\s0\fR file for general stuff.
.PP
The \fIArtistic\fR and \fICopying\fR files for copyright information.
                                                                                                                                        osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perl584delta5.18.1                           0100644 0001750 0001750 00000032075 12566207433 023500  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERL584DELTA 1"
.TH PERL584DELTA 1 "2013-11-04" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perl584delta \- what is new for perl v5.8.4
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document describes differences between the 5.8.3 release and
the 5.8.4 release.
.SH "Incompatible Changes"
.IX Header "Incompatible Changes"
Many minor bugs have been fixed. Scripts which happen to rely on previously
erroneous behaviour will consider these fixes as incompatible changes :\-)
You are advised to perform sufficient acceptance testing on this release
to satisfy yourself that this does not affect you, before putting this
release into production.
.PP
The diagnostic output of Carp has been changed slightly, to add a space after
the comma between arguments. This makes it much easier for tools such as
web browsers to wrap it, but might confuse any automatic tools which perform
detailed parsing of Carp output.
.PP
The internal dump output has been improved, so that non-printable characters
such as newline and backspace are output in \f(CW\*(C`\ex\*(C'\fR notation, rather than
octal. This might just confuse non-robust tools which parse the output of
modules such as Devel::Peek.
.SH "Core Enhancements"
.IX Header "Core Enhancements"
.SS "Malloc wrapping"
.IX Subsection "Malloc wrapping"
Perl can now be built to detect attempts to assign pathologically large chunks
of memory.  Previously such assignments would suffer from integer wrap-around
during size calculations causing a misallocation, which would crash perl, and
could theoretically be used for \*(L"stack smashing\*(R" attacks.  The wrapping
defaults to enabled on platforms where we know it works (most \s-1AIX\s0
configurations, BSDi, Darwin, \s-1DEC OSF/1,\s0 FreeBSD, \s-1HP/UX, GNU\s0 Linux, OpenBSD,
Solaris, \s-1VMS\s0 and most Win32 compilers) and defaults to disabled on other
platforms.
.SS "Unicode Character Database 4.0.1"
.IX Subsection "Unicode Character Database 4.0.1"
The copy of the Unicode Character Database included in Perl 5.8 has
been updated to 4.0.1 from 4.0.0.
.SS "suidperl less insecure"
.IX Subsection "suidperl less insecure"
Paul Szabo has analysed and patched \f(CW\*(C`suidperl\*(C'\fR to remove existing known
insecurities. Currently there are no known holes in \f(CW\*(C`suidperl\*(C'\fR, but previous
experience shows that we cannot be confident that these were the last. You may
no longer invoke the set uid perl directly, so to preserve backwards
compatibility with scripts that invoke #!/usr/bin/suidperl the only set uid
binary is now \f(CW\*(C`sperl5.8.\*(C'\fR\fIn\fR (\f(CW\*(C`sperl5.8.4\*(C'\fR for this release). \f(CW\*(C`suidperl\*(C'\fR
is installed as a hard link to \f(CW\*(C`perl\*(C'\fR; both \f(CW\*(C`suidperl\*(C'\fR and \f(CW\*(C`perl\*(C'\fR will
invoke \f(CW\*(C`sperl5.8.4\*(C'\fR automatically the set uid binary, so this change should
be completely transparent.
.PP
For new projects the core perl team would strongly recommend that you use
dedicated, single purpose security tools such as \f(CW\*(C`sudo\*(C'\fR in preference to
\&\f(CW\*(C`suidperl\*(C'\fR.
.SS "format"
.IX Subsection "format"
In addition to bug fixes, \f(CW\*(C`format\*(C'\fR's features have been enhanced. See
perlform
.SH "Modules and Pragmata"
.IX Header "Modules and Pragmata"
The (mis)use of \f(CW\*(C`/tmp\*(C'\fR in core modules and documentation has been tidied up.
Some modules available both within the perl core and independently from \s-1CPAN
\&\s0(\*(L"dual-life modules\*(R") have not yet had these changes applied; the changes
will be integrated into future stable perl releases as the modules are
updated on \s-1CPAN.\s0
.SS "Updated modules"
.IX Subsection "Updated modules"
.IP "Attribute::Handlers" 4
.IX Item "Attribute::Handlers"
.PD 0
.IP "B" 4
.IX Item "B"
.IP "Benchmark" 4
.IX Item "Benchmark"
.IP "\s-1CGI\s0" 4
.IX Item "CGI"
.IP "Carp" 4
.IX Item "Carp"
.IP "Cwd" 4
.IX Item "Cwd"
.IP "Exporter" 4
.IX Item "Exporter"
.IP "File::Find" 4
.IX Item "File::Find"
.IP "\s-1IO\s0" 4
.IX Item "IO"
.IP "IPC::Open3" 4
.IX Item "IPC::Open3"
.IP "Local::Maketext" 4
.IX Item "Local::Maketext"
.IP "Math::BigFloat" 4
.IX Item "Math::BigFloat"
.IP "Math::BigInt" 4
.IX Item "Math::BigInt"
.IP "Math::BigRat" 4
.IX Item "Math::BigRat"
.IP "MIME::Base64" 4
.IX Item "MIME::Base64"
.IP "ODBM_File" 4
.IX Item "ODBM_File"
.IP "\s-1POSIX\s0" 4
.IX Item "POSIX"
.IP "Shell" 4
.IX Item "Shell"
.IP "Socket" 4
.IX Item "Socket"
.PD
There is experimental support for Linux abstract Unix domain sockets.
.IP "Storable" 4
.IX Item "Storable"
.PD 0
.IP "Switch" 4
.IX Item "Switch"
.PD
Synced with its \s-1CPAN\s0 version 2.10
.IP "Sys::Syslog" 4
.IX Item "Sys::Syslog"
\&\f(CW\*(C`syslog()\*(C'\fR can now use numeric constants for facility names and priorities,
in addition to strings.
.IP "Term::ANSIColor" 4
.IX Item "Term::ANSIColor"
.PD 0
.IP "Time::HiRes" 4
.IX Item "Time::HiRes"
.IP "Unicode::UCD" 4
.IX Item "Unicode::UCD"
.IP "Win32" 4
.IX Item "Win32"
.PD
Win32.pm/Win32.xs has moved from the libwin32 module to core Perl
.IP "base" 4
.IX Item "base"
.PD 0
.IP "open" 4
.IX Item "open"
.IP "threads" 4
.IX Item "threads"
.PD
Detached threads are now also supported on Windows.
.IP "utf8" 4
.IX Item "utf8"
.SH "Performance Enhancements"
.IX Header "Performance Enhancements"
.PD 0
.IP "\(bu" 4
.PD
Accelerated Unicode case mappings (\f(CW\*(C`/i\*(C'\fR, \f(CW\*(C`lc\*(C'\fR, \f(CW\*(C`uc\*(C'\fR, etc).
.IP "\(bu" 4
In place sort optimised (eg \f(CW\*(C`@a = sort @a\*(C'\fR)
.IP "\(bu" 4
Unnecessary assignment optimised away in
.Sp
.Vb 3
\&  my $s = undef;
\&  my @a = ();
\&  my %h = ();
.Ve
.IP "\(bu" 4
Optimised \f(CW\*(C`map\*(C'\fR in scalar context
.SH "Utility Changes"
.IX Header "Utility Changes"
The Perl debugger (\fIlib/perl5db.pl\fR) can now save all debugger commands for
sourcing later, and can display the parent inheritance tree of a given class.
.SH "Installation and Configuration Improvements"
.IX Header "Installation and Configuration Improvements"
The build process on both \s-1VMS\s0 and Windows has had several minor improvements
made. On Windows Borland's C compiler can now compile perl with PerlIO and/or
\&\s-1USE_LARGE_FILES\s0 enabled.
.PP
\&\f(CW\*(C`perl.exe\*(C'\fR on Windows now has a \*(L"Camel\*(R" logo icon. The use of a camel with
the topic of Perl is a trademark of O'Reilly and Associates Inc., and is used
with their permission (ie distribution of the source, compiling a Windows
executable from it, and using that executable locally). Use of the supplied
camel for anything other than a perl executable's icon is specifically not
covered, and anyone wishing to redistribute perl binaries \fIwith\fR the icon
should check directly with O'Reilly beforehand.
.PP
Perl should build cleanly on Stratus \s-1VOS\s0 once more.
.SH "Selected Bug Fixes"
.IX Header "Selected Bug Fixes"
More utf8 bugs fixed, notably in how \f(CW\*(C`chomp\*(C'\fR, \f(CW\*(C`chop\*(C'\fR, \f(CW\*(C`send\*(C'\fR, and
\&\f(CW\*(C`syswrite\*(C'\fR and interact with utf8 data. Concatenation now works correctly
when \f(CW\*(C`use bytes;\*(C'\fR is in scope.
.PP
Pragmata are now correctly propagated into (?{...}) constructions in regexps.
Code such as
.PP
.Vb 1
\&   my $x = qr{ ... (??{ $x }) ... };
.Ve
.PP
will now (correctly) fail under use strict. (As the inner \f(CW$x\fR is and
has always referred to \f(CW$::x\fR)
.PP
The \*(L"const in void context\*(R" warning has been suppressed for a constant in an
optimised-away boolean expression such as \f(CW\*(C`5 || print;\*(C'\fR
.PP
\&\f(CW\*(C`perl \-i\*(C'\fR could \f(CW\*(C`fchmod(stdin)\*(C'\fR by mistake. This is serious if stdin is
attached to a terminal, and perl is running as root. Now fixed.
.SH "New or Changed Diagnostics"
.IX Header "New or Changed Diagnostics"
\&\f(CW\*(C`Carp\*(C'\fR and the internal diagnostic routines used by \f(CW\*(C`Devel::Peek\*(C'\fR have been
made clearer, as described in \*(L"Incompatible Changes\*(R"
.SH "Changed Internals"
.IX Header "Changed Internals"
Some bugs have been fixed in the hash internals. Restricted hashes and
their place holders are now allocated and deleted at slightly different times,
but this should not be visible to user code.
.SH "Future Directions"
.IX Header "Future Directions"
Code freeze for the next maintenance release (5.8.5) will be on 30th June
2004, with release by mid July.
.SH "Platform Specific Problems"
.IX Header "Platform Specific Problems"
This release is known not to build on Windows 95.
.SH "Reporting Bugs"
.IX Header "Reporting Bugs"
If you find what you think is a bug, you might check the articles
recently posted to the comp.lang.perl.misc newsgroup and the perl
bug database at http://bugs.perl.org.  There may also be
information at http://www.perl.org, the Perl Home Page.
.PP
If you believe you have an unreported bug, please run the \fBperlbug\fR
program included with your release.  Be sure to trim your bug down
to a tiny but sufficient test case.  Your bug report, along with the
output of \f(CW\*(C`perl \-V\*(C'\fR, will be sent off to perlbug@perl.org to be
analysed by the Perl porting team.  You can browse and search
the Perl 5 bugs at http://bugs.perl.org/
.SH "SEE ALSO"
.IX Header "SEE ALSO"
The \fIChanges\fR file for exhaustive details on what changed.
.PP
The \fI\s-1INSTALL\s0\fR file for how to build Perl.
.PP
The \fI\s-1README\s0\fR file for general stuff.
.PP
The \fIArtistic\fR and \fICopying\fR files for copyright information.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                   osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perl585delta.1                               0100644 0001750 0001750 00000024552 12566207433 023166  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERL585DELTA 1"
.TH PERL585DELTA 1 "2013-11-04" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perl585delta \- what is new for perl v5.8.5
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document describes differences between the 5.8.4 release and
the 5.8.5 release.
.SH "Incompatible Changes"
.IX Header "Incompatible Changes"
There are no changes incompatible with 5.8.4.
.SH "Core Enhancements"
.IX Header "Core Enhancements"
Perl's regular expression engine now contains support for matching on the
intersection of two Unicode character classes. You can also now refer to
user-defined character classes from within other user defined character
classes.
.SH "Modules and Pragmata"
.IX Header "Modules and Pragmata"
.IP "\(bu" 4
Carp improved to work nicely with Safe. Carp's message reporting should now
be anomaly free \- it will always print out line number information.
.IP "\(bu" 4
\&\s-1CGI\s0 upgraded to version 3.05
.IP "\(bu" 4
charnames now avoids clobbering \f(CW$_\fR
.IP "\(bu" 4
Digest upgraded to version 1.08
.IP "\(bu" 4
Encode upgraded to version 2.01
.IP "\(bu" 4
FileCache upgraded to version 1.04
.IP "\(bu" 4
libnet upgraded to version 1.19
.IP "\(bu" 4
Pod::Parser upgraded to version 1.28
.IP "\(bu" 4
Pod::Perldoc upgraded to version 3.13
.IP "\(bu" 4
Pod::LaTeX upgraded to version 0.57
.IP "\(bu" 4
Safe now works properly with Carp
.IP "\(bu" 4
Scalar-List-Utils upgraded to version 1.14
.IP "\(bu" 4
Shell's documentation has been re-written, and its historical partial
auto-quoting of command arguments can now be disabled.
.IP "\(bu" 4
Test upgraded to version 1.25
.IP "\(bu" 4
Test::Harness upgraded to version 2.42
.IP "\(bu" 4
Time::Local upgraded to version 1.10
.IP "\(bu" 4
Unicode::Collate upgraded to version 0.40
.IP "\(bu" 4
Unicode::Normalize upgraded to version 0.30
.SH "Utility Changes"
.IX Header "Utility Changes"
.SS "Perl's debugger"
.IX Subsection "Perl's debugger"
The debugger can now emulate stepping backwards, by restarting and rerunning
all bar the last command from a saved command history.
.SS "h2ph"
.IX Subsection "h2ph"
\&\fIh2ph\fR is now able to understand a very limited set of C inline functions
\&\*(-- basically, the inline functions that look like \s-1CPP\s0 macros. This has
been introduced to deal with some of the headers of the newest versions of
the glibc. The standard warning still applies; to quote \fIh2ph\fR's
documentation, \fIyou may need to dicker with the files produced\fR.
.SH "Installation and Configuration Improvements"
.IX Header "Installation and Configuration Improvements"
Perl 5.8.5 should build cleanly from source on LynxOS.
.SH "Selected Bug Fixes"
.IX Header "Selected Bug Fixes"
.IP "\(bu" 4
The in-place sort optimisation introduced in 5.8.4 had a bug. For example,
in code such as
.Sp
.Vb 1
\&    @a = sort ($b, @a)
.Ve
.Sp
the result would omit the value \f(CW$b\fR. This is now fixed.
.IP "\(bu" 4
The optimisation for unnecessary assignments introduced in 5.8.4 could give
spurious warnings. This has been fixed.
.IP "\(bu" 4
Perl should now correctly detect and read BOM-marked and (BOMless) \s-1UTF\-16\s0
scripts of either endianness.
.IP "\(bu" 4
Creating a new thread when weak references exist was buggy, and would often
cause warnings at interpreter destruction time. The known bug is now fixed.
.IP "\(bu" 4
Several obscure bugs involving manipulating Unicode strings with \f(CW\*(C`substr\*(C'\fR have
been fixed.
.IP "\(bu" 4
Previously if Perl's file globbing function encountered a directory that it
did not have permission to open it would return immediately, leading to
unexpected truncation of the list of results. This has been fixed, to be
consistent with Unix shells' globbing behaviour.
.IP "\(bu" 4
Thread creation time could vary wildly between identical runs. This was caused
by a poor hashing algorithm in the thread cloning routines, which has now
been fixed.
.IP "\(bu" 4
The internals of the ithreads implementation were not checking if OS-level
thread creation had failed. threads\->\fIcreate()\fR now returns \f(CW\*(C`undef\*(C'\fR in if
thread creation fails instead of crashing perl.
.SH "New or Changed Diagnostics"
.IX Header "New or Changed Diagnostics"
.IP "\(bu" 4
Perl \-V has several improvements
.RS 4
.IP "\(bu" 4
correctly outputs local patch names that contain embedded code snippets
or other characters that used to confuse it.
.IP "\(bu" 4
arguments to \-V that look like regexps will give multiple lines of output.
.IP "\(bu" 4
a trailing colon suppresses the linefeed and ';'  terminator, allowing
embedding of queries into shell commands.
.IP "\(bu" 4
a leading colon removes the 'name=' part of the response, allowing mapping to
any name.
.RE
.RS 4
.RE
.IP "\(bu" 4
When perl fails to find the specified script, it now outputs a second line
suggesting that the user use the \f(CW\*(C`\-S\*(C'\fR flag:
.Sp
.Vb 3
\&    $ perl5.8.5 missing.pl
\&    Can\*(Aqt open perl script "missing.pl": No such file or directory.
\&    Use \-S to search $PATH for it.
.Ve
.SH "Changed Internals"
.IX Header "Changed Internals"
The Unicode character class files used by the regular expression engine are
now built at build time from the supplied Unicode consortium data files,
instead of being shipped prebuilt. This makes the compressed Perl source
tarball about 200K smaller. A side effect is that the layout of files inside
lib/unicore has changed.
.SH "Known Problems"
.IX Header "Known Problems"
The regression test \fIt/uni/class.t\fR is now performing considerably more
tests, and can take several minutes to run even on a fast machine.
.SH "Platform Specific Problems"
.IX Header "Platform Specific Problems"
This release is known not to build on Windows 95.
.SH "Reporting Bugs"
.IX Header "Reporting Bugs"
If you find what you think is a bug, you might check the articles
recently posted to the comp.lang.perl.misc newsgroup and the perl
bug database at http://bugs.perl.org.  There may also be
information at http://www.perl.org, the Perl Home Page.
.PP
If you believe you have an unreported bug, please run the \fBperlbug\fR
program included with your release.  Be sure to trim your bug down
to a tiny but sufficient test case.  Your bug report, along with the
output of \f(CW\*(C`perl \-V\*(C'\fR, will be sent off to perlbug@perl.org to be
analysed by the Perl porting team.  You can browse and search
the Perl 5 bugs at http://bugs.perl.org/
.SH "SEE ALSO"
.IX Header "SEE ALSO"
The \fIChanges\fR file for exhaustive details on what changed.
.PP
The \fI\s-1INSTALL\s0\fR file for how to build Perl.
.PP
The \fI\s-1README\s0\fR file for general stuff.
.PP
The \fIArtistic\fR and \fICopying\fR files for copyright information.
                                                                                                                                                      osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perl585delta5.16.1                           0100644 0001750 0001750 00000024231 12566207413 023470  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERL585DELTA 1"
.TH PERL585DELTA 1 "2013-02-26" "perl v5.16.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perl585delta \- what is new for perl v5.8.5
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document describes differences between the 5.8.4 release and
the 5.8.5 release.
.SH "Incompatible Changes"
.IX Header "Incompatible Changes"
There are no changes incompatible with 5.8.4.
.SH "Core Enhancements"
.IX Header "Core Enhancements"
Perl's regular expression engine now contains support for matching on the
intersection of two Unicode character classes. You can also now refer to
user-defined character classes from within other user defined character
classes.
.SH "Modules and Pragmata"
.IX Header "Modules and Pragmata"
.IP "\(bu" 4
Carp improved to work nicely with Safe. Carp's message reporting should now
be anomaly free \- it will always print out line number information.
.IP "\(bu" 4
\&\s-1CGI\s0 upgraded to version 3.05
.IP "\(bu" 4
charnames now avoids clobbering \f(CW$_\fR
.IP "\(bu" 4
Digest upgraded to version 1.08
.IP "\(bu" 4
Encode upgraded to version 2.01
.IP "\(bu" 4
FileCache upgraded to version 1.04
.IP "\(bu" 4
libnet upgraded to version 1.19
.IP "\(bu" 4
Pod::Parser upgraded to version 1.28
.IP "\(bu" 4
Pod::Perldoc upgraded to version 3.13
.IP "\(bu" 4
Pod::LaTeX upgraded to version 0.57
.IP "\(bu" 4
Safe now works properly with Carp
.IP "\(bu" 4
Scalar-List-Utils upgraded to version 1.14
.IP "\(bu" 4
Shell's documentation has been re-written, and its historical partial
auto-quoting of command arguments can now be disabled.
.IP "\(bu" 4
Test upgraded to version 1.25
.IP "\(bu" 4
Test::Harness upgraded to version 2.42
.IP "\(bu" 4
Time::Local upgraded to version 1.10
.IP "\(bu" 4
Unicode::Collate upgraded to version 0.40
.IP "\(bu" 4
Unicode::Normalize upgraded to version 0.30
.SH "Utility Changes"
.IX Header "Utility Changes"
.SS "Perl's debugger"
.IX Subsection "Perl's debugger"
The debugger can now emulate stepping backwards, by restarting and rerunning
all bar the last command from a saved command history.
.SS "h2ph"
.IX Subsection "h2ph"
\&\fIh2ph\fR is now able to understand a very limited set of C inline functions
\&\*(-- basically, the inline functions that look like \s-1CPP\s0 macros. This has
been introduced to deal with some of the headers of the newest versions of
the glibc. The standard warning still applies; to quote \fIh2ph\fR's
documentation, \fIyou may need to dicker with the files produced\fR.
.SH "Installation and Configuration Improvements"
.IX Header "Installation and Configuration Improvements"
Perl 5.8.5 should build cleanly from source on LynxOS.
.SH "Selected Bug Fixes"
.IX Header "Selected Bug Fixes"
.IP "\(bu" 4
The in-place sort optimisation introduced in 5.8.4 had a bug. For example,
in code such as
.Sp
.Vb 1
\&    @a = sort ($b, @a)
.Ve
.Sp
the result would omit the value \f(CW$b\fR. This is now fixed.
.IP "\(bu" 4
The optimisation for unnecessary assignments introduced in 5.8.4 could give
spurious warnings. This has been fixed.
.IP "\(bu" 4
Perl should now correctly detect and read BOM-marked and (BOMless) \s-1UTF\-16\s0
scripts of either endianness.
.IP "\(bu" 4
Creating a new thread when weak references exist was buggy, and would often
cause warnings at interpreter destruction time. The known bug is now fixed.
.IP "\(bu" 4
Several obscure bugs involving manipulating Unicode strings with \f(CW\*(C`substr\*(C'\fR have
been fixed.
.IP "\(bu" 4
Previously if Perl's file globbing function encountered a directory that it
did not have permission to open it would return immediately, leading to
unexpected truncation of the list of results. This has been fixed, to be
consistent with Unix shells' globbing behaviour.
.IP "\(bu" 4
Thread creation time could vary wildly between identical runs. This was caused
by a poor hashing algorithm in the thread cloning routines, which has now
been fixed.
.IP "\(bu" 4
The internals of the ithreads implementation were not checking if OS-level
thread creation had failed. threads\->\fIcreate()\fR now returns \f(CW\*(C`undef\*(C'\fR in if
thread creation fails instead of crashing perl.
.SH "New or Changed Diagnostics"
.IX Header "New or Changed Diagnostics"
.IP "\(bu" 4
Perl \-V has several improvements
.RS 4
.IP "\(bu" 4
correctly outputs local patch names that contain embedded code snippets
or other characters that used to confuse it.
.IP "\(bu" 4
arguments to \-V that look like regexps will give multiple lines of output.
.IP "\(bu" 4
a trailing colon suppresses the linefeed and ';'  terminator, allowing
embedding of queries into shell commands.
.IP "\(bu" 4
a leading colon removes the 'name=' part of the response, allowing mapping to
any name.
.RE
.RS 4
.RE
.IP "\(bu" 4
When perl fails to find the specified script, it now outputs a second line
suggesting that the user use the \f(CW\*(C`\-S\*(C'\fR flag:
.Sp
.Vb 3
\&    $ perl5.8.5 missing.pl
\&    Can\*(Aqt open perl script "missing.pl": No such file or directory.
\&    Use \-S to search $PATH for it.
.Ve
.SH "Changed Internals"
.IX Header "Changed Internals"
The Unicode character class files used by the regular expression engine are
now built at build time from the supplied Unicode consortium data files,
instead of being shipped prebuilt. This makes the compressed Perl source
tarball about 200K smaller. A side effect is that the layout of files inside
lib/unicore has changed.
.SH "Known Problems"
.IX Header "Known Problems"
The regression test \fIt/uni/class.t\fR is now performing considerably more
tests, and can take several minutes to run even on a fast machine.
.SH "Platform Specific Problems"
.IX Header "Platform Specific Problems"
This release is known not to build on Windows 95.
.SH "Reporting Bugs"
.IX Header "Reporting Bugs"
If you find what you think is a bug, you might check the articles
recently posted to the comp.lang.perl.misc newsgroup and the perl
bug database at http://bugs.perl.org.  There may also be
information at http://www.perl.org, the Perl Home Page.
.PP
If you believe you have an unreported bug, please run the \fBperlbug\fR
program included with your release.  Be sure to trim your bug down
to a tiny but sufficient test case.  Your bug report, along with the
output of \f(CW\*(C`perl \-V\*(C'\fR, will be sent off to perlbug@perl.org to be
analysed by the Perl porting team.  You can browse and search
the Perl 5 bugs at http://bugs.perl.org/
.SH "SEE ALSO"
.IX Header "SEE ALSO"
The \fIChanges\fR file for exhaustive details on what changed.
.PP
The \fI\s-1INSTALL\s0\fR file for how to build Perl.
.PP
The \fI\s-1README\s0\fR file for general stuff.
.PP
The \fIArtistic\fR and \fICopying\fR files for copyright information.
                                                                                                                                                                                                                                                                                                                                                                       osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perl585delta5.18.1                           0100644 0001750 0001750 00000024552 12566207433 023502  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERL585DELTA 1"
.TH PERL585DELTA 1 "2013-11-04" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perl585delta \- what is new for perl v5.8.5
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document describes differences between the 5.8.4 release and
the 5.8.5 release.
.SH "Incompatible Changes"
.IX Header "Incompatible Changes"
There are no changes incompatible with 5.8.4.
.SH "Core Enhancements"
.IX Header "Core Enhancements"
Perl's regular expression engine now contains support for matching on the
intersection of two Unicode character classes. You can also now refer to
user-defined character classes from within other user defined character
classes.
.SH "Modules and Pragmata"
.IX Header "Modules and Pragmata"
.IP "\(bu" 4
Carp improved to work nicely with Safe. Carp's message reporting should now
be anomaly free \- it will always print out line number information.
.IP "\(bu" 4
\&\s-1CGI\s0 upgraded to version 3.05
.IP "\(bu" 4
charnames now avoids clobbering \f(CW$_\fR
.IP "\(bu" 4
Digest upgraded to version 1.08
.IP "\(bu" 4
Encode upgraded to version 2.01
.IP "\(bu" 4
FileCache upgraded to version 1.04
.IP "\(bu" 4
libnet upgraded to version 1.19
.IP "\(bu" 4
Pod::Parser upgraded to version 1.28
.IP "\(bu" 4
Pod::Perldoc upgraded to version 3.13
.IP "\(bu" 4
Pod::LaTeX upgraded to version 0.57
.IP "\(bu" 4
Safe now works properly with Carp
.IP "\(bu" 4
Scalar-List-Utils upgraded to version 1.14
.IP "\(bu" 4
Shell's documentation has been re-written, and its historical partial
auto-quoting of command arguments can now be disabled.
.IP "\(bu" 4
Test upgraded to version 1.25
.IP "\(bu" 4
Test::Harness upgraded to version 2.42
.IP "\(bu" 4
Time::Local upgraded to version 1.10
.IP "\(bu" 4
Unicode::Collate upgraded to version 0.40
.IP "\(bu" 4
Unicode::Normalize upgraded to version 0.30
.SH "Utility Changes"
.IX Header "Utility Changes"
.SS "Perl's debugger"
.IX Subsection "Perl's debugger"
The debugger can now emulate stepping backwards, by restarting and rerunning
all bar the last command from a saved command history.
.SS "h2ph"
.IX Subsection "h2ph"
\&\fIh2ph\fR is now able to understand a very limited set of C inline functions
\&\*(-- basically, the inline functions that look like \s-1CPP\s0 macros. This has
been introduced to deal with some of the headers of the newest versions of
the glibc. The standard warning still applies; to quote \fIh2ph\fR's
documentation, \fIyou may need to dicker with the files produced\fR.
.SH "Installation and Configuration Improvements"
.IX Header "Installation and Configuration Improvements"
Perl 5.8.5 should build cleanly from source on LynxOS.
.SH "Selected Bug Fixes"
.IX Header "Selected Bug Fixes"
.IP "\(bu" 4
The in-place sort optimisation introduced in 5.8.4 had a bug. For example,
in code such as
.Sp
.Vb 1
\&    @a = sort ($b, @a)
.Ve
.Sp
the result would omit the value \f(CW$b\fR. This is now fixed.
.IP "\(bu" 4
The optimisation for unnecessary assignments introduced in 5.8.4 could give
spurious warnings. This has been fixed.
.IP "\(bu" 4
Perl should now correctly detect and read BOM-marked and (BOMless) \s-1UTF\-16\s0
scripts of either endianness.
.IP "\(bu" 4
Creating a new thread when weak references exist was buggy, and would often
cause warnings at interpreter destruction time. The known bug is now fixed.
.IP "\(bu" 4
Several obscure bugs involving manipulating Unicode strings with \f(CW\*(C`substr\*(C'\fR have
been fixed.
.IP "\(bu" 4
Previously if Perl's file globbing function encountered a directory that it
did not have permission to open it would return immediately, leading to
unexpected truncation of the list of results. This has been fixed, to be
consistent with Unix shells' globbing behaviour.
.IP "\(bu" 4
Thread creation time could vary wildly between identical runs. This was caused
by a poor hashing algorithm in the thread cloning routines, which has now
been fixed.
.IP "\(bu" 4
The internals of the ithreads implementation were not checking if OS-level
thread creation had failed. threads\->\fIcreate()\fR now returns \f(CW\*(C`undef\*(C'\fR in if
thread creation fails instead of crashing perl.
.SH "New or Changed Diagnostics"
.IX Header "New or Changed Diagnostics"
.IP "\(bu" 4
Perl \-V has several improvements
.RS 4
.IP "\(bu" 4
correctly outputs local patch names that contain embedded code snippets
or other characters that used to confuse it.
.IP "\(bu" 4
arguments to \-V that look like regexps will give multiple lines of output.
.IP "\(bu" 4
a trailing colon suppresses the linefeed and ';'  terminator, allowing
embedding of queries into shell commands.
.IP "\(bu" 4
a leading colon removes the 'name=' part of the response, allowing mapping to
any name.
.RE
.RS 4
.RE
.IP "\(bu" 4
When perl fails to find the specified script, it now outputs a second line
suggesting that the user use the \f(CW\*(C`\-S\*(C'\fR flag:
.Sp
.Vb 3
\&    $ perl5.8.5 missing.pl
\&    Can\*(Aqt open perl script "missing.pl": No such file or directory.
\&    Use \-S to search $PATH for it.
.Ve
.SH "Changed Internals"
.IX Header "Changed Internals"
The Unicode character class files used by the regular expression engine are
now built at build time from the supplied Unicode consortium data files,
instead of being shipped prebuilt. This makes the compressed Perl source
tarball about 200K smaller. A side effect is that the layout of files inside
lib/unicore has changed.
.SH "Known Problems"
.IX Header "Known Problems"
The regression test \fIt/uni/class.t\fR is now performing considerably more
tests, and can take several minutes to run even on a fast machine.
.SH "Platform Specific Problems"
.IX Header "Platform Specific Problems"
This release is known not to build on Windows 95.
.SH "Reporting Bugs"
.IX Header "Reporting Bugs"
If you find what you think is a bug, you might check the articles
recently posted to the comp.lang.perl.misc newsgroup and the perl
bug database at http://bugs.perl.org.  There may also be
information at http://www.perl.org, the Perl Home Page.
.PP
If you believe you have an unreported bug, please run the \fBperlbug\fR
program included with your release.  Be sure to trim your bug down
to a tiny but sufficient test case.  Your bug report, along with the
output of \f(CW\*(C`perl \-V\*(C'\fR, will be sent off to perlbug@perl.org to be
analysed by the Perl porting team.  You can browse and search
the Perl 5 bugs at http://bugs.perl.org/
.SH "SEE ALSO"
.IX Header "SEE ALSO"
The \fIChanges\fR file for exhaustive details on what changed.
.PP
The \fI\s-1INSTALL\s0\fR file for how to build Perl.
.PP
The \fI\s-1README\s0\fR file for general stuff.
.PP
The \fIArtistic\fR and \fICopying\fR files for copyright information.
                                                                                                                                                      osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perl586delta.1                               0100644 0001750 0001750 00000022317 12566207433 023164  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERL586DELTA 1"
.TH PERL586DELTA 1 "2013-11-04" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perl586delta \- what is new for perl v5.8.6
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document describes differences between the 5.8.5 release and
the 5.8.6 release.
.SH "Incompatible Changes"
.IX Header "Incompatible Changes"
There are no changes incompatible with 5.8.5.
.SH "Core Enhancements"
.IX Header "Core Enhancements"
The perl interpreter is now more tolerant of UTF\-16\-encoded scripts.
.PP
On Win32, Perl can now use non-IFS compatible LSPs, which allows Perl to
work in conjunction with firewalls such as McAfee Guardian. For full details
see the file \fI\s-1README\s0.win32\fR, particularly if you're running Win95.
.SH "Modules and Pragmata"
.IX Header "Modules and Pragmata"
.IP "\(bu" 4
With the \f(CW\*(C`base\*(C'\fR pragma, an intermediate class with no fields used to messes
up private fields in the base class. This has been fixed.
.IP "\(bu" 4
Cwd upgraded to version 3.01 (as part of the new PathTools distribution)
.IP "\(bu" 4
Devel::PPPort upgraded to version 3.03
.IP "\(bu" 4
File::Spec upgraded to version 3.01 (as part of the new PathTools distribution)
.IP "\(bu" 4
Encode upgraded to version 2.08
.IP "\(bu" 4
ExtUtils::MakeMaker remains at version 6.17, as later stable releases currently
available on \s-1CPAN\s0 have some issues with core modules on some core platforms.
.IP "\(bu" 4
I18N::LangTags upgraded to version 0.35
.IP "\(bu" 4
Math::BigInt upgraded to version 1.73
.IP "\(bu" 4
Math::BigRat upgraded to version 0.13
.IP "\(bu" 4
MIME::Base64 upgraded to version 3.05
.IP "\(bu" 4
POSIX::sigprocmask function can now retrieve the current signal mask without
also setting it.
.IP "\(bu" 4
Time::HiRes upgraded to version 1.65
.SH "Utility Changes"
.IX Header "Utility Changes"
Perl has a new \-dt command-line flag, which enables threads support in the
debugger.
.SH "Performance Enhancements"
.IX Header "Performance Enhancements"
\&\f(CW\*(C`reverse sort ...\*(C'\fR is now optimized to sort in reverse, avoiding the
generation of a temporary intermediate list.
.PP
\&\f(CW\*(C`for (reverse @foo)\*(C'\fR now iterates in reverse, avoiding the generation of a
temporary reversed list.
.SH "Selected Bug Fixes"
.IX Header "Selected Bug Fixes"
The regexp engine is now more robust when given invalid utf8 input, as is
sometimes generated by buggy \s-1XS\s0 modules.
.PP
\&\f(CW\*(C`foreach\*(C'\fR on threads::shared array used to be able to crash Perl. This bug
has now been fixed.
.PP
A regexp in \f(CW\*(C`STDOUT\*(C'\fR's destructor used to coredump, because the regexp pad
was already freed. This has been fixed.
.PP
\&\f(CW\*(C`goto &\*(C'\fR is now more robust \- bugs in deep recursion and chained \f(CW\*(C`goto &\*(C'\fR
have been fixed.
.PP
Using \f(CW\*(C`delete\*(C'\fR on an array no longer leaks memory. A \f(CW\*(C`pop\*(C'\fR of an item from a
shared array reference no longer causes a leak.
.PP
\&\f(CW\*(C`eval_sv()\*(C'\fR failing a taint test could corrupt the stack \- this has been
fixed.
.PP
On platforms with 64 bit pointers numeric comparison operators used to
erroneously compare the addresses of references that are overloaded, rather
than using the overloaded values. This has been fixed.
.PP
\&\f(CW\*(C`read\*(C'\fR into a UTF8\-encoded buffer with an offset off the end of the buffer
no longer mis-calculates buffer lengths.
.PP
Although Perl has promised since version 5.8 that \f(CW\*(C`sort()\*(C'\fR would be
stable, the two cases \f(CW\*(C`sort {$b cmp $a}\*(C'\fR and \f(CW\*(C`sort {$b <=> $a}\*(C'\fR could
produce non-stable sorts.   This is corrected in perl5.8.6.
.PP
Localising \f(CW$^D\fR no longer generates a diagnostic message about valid \-D
flags.
.SH "New or Changed Diagnostics"
.IX Header "New or Changed Diagnostics"
For \-t and \-T,
   Too late for \*(L"\-T\*(R" option
has been changed to the more informative
   \*(L"\-T\*(R" is on the #! line, it must also be used on the command line
.SH "Changed Internals"
.IX Header "Changed Internals"
From now on all applications embedding perl will behave as if perl
were compiled with \-DPERL_USE_SAFE_PUTENV.  See \*(L"Environment access\*(R" in
the \fI\s-1INSTALL\s0\fR file for details.
.PP
Most \f(CW\*(C`C\*(C'\fR source files now have comments at the top explaining their purpose,
which should help anyone wishing to get an overview of the implementation.
.SH "New Tests"
.IX Header "New Tests"
There are significantly more tests for the \f(CW\*(C`B\*(C'\fR suite of modules.
.SH "Reporting Bugs"
.IX Header "Reporting Bugs"
If you find what you think is a bug, you might check the articles
recently posted to the comp.lang.perl.misc newsgroup and the perl
bug database at http://bugs.perl.org.  There may also be
information at http://www.perl.org, the Perl Home Page.
.PP
If you believe you have an unreported bug, please run the \fBperlbug\fR
program included with your release.  Be sure to trim your bug down
to a tiny but sufficient test case.  Your bug report, along with the
output of \f(CW\*(C`perl \-V\*(C'\fR, will be sent off to perlbug@perl.org to be
analysed by the Perl porting team.  You can browse and search
the Perl 5 bugs at http://bugs.perl.org/
.SH "SEE ALSO"
.IX Header "SEE ALSO"
The \fIChanges\fR file for exhaustive details on what changed.
.PP
The \fI\s-1INSTALL\s0\fR file for how to build Perl.
.PP
The \fI\s-1README\s0\fR file for general stuff.
.PP
The \fIArtistic\fR and \fICopying\fR files for copyright information.
                                                                                                                                                                                                                                                                                                                 osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perl586delta5.16.1                           0100644 0001750 0001750 00000021776 12566207413 023504  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERL586DELTA 1"
.TH PERL586DELTA 1 "2013-02-26" "perl v5.16.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perl586delta \- what is new for perl v5.8.6
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document describes differences between the 5.8.5 release and
the 5.8.6 release.
.SH "Incompatible Changes"
.IX Header "Incompatible Changes"
There are no changes incompatible with 5.8.5.
.SH "Core Enhancements"
.IX Header "Core Enhancements"
The perl interpreter is now more tolerant of UTF\-16\-encoded scripts.
.PP
On Win32, Perl can now use non-IFS compatible LSPs, which allows Perl to
work in conjunction with firewalls such as McAfee Guardian. For full details
see the file \fI\s-1README\s0.win32\fR, particularly if you're running Win95.
.SH "Modules and Pragmata"
.IX Header "Modules and Pragmata"
.IP "\(bu" 4
With the \f(CW\*(C`base\*(C'\fR pragma, an intermediate class with no fields used to messes
up private fields in the base class. This has been fixed.
.IP "\(bu" 4
Cwd upgraded to version 3.01 (as part of the new PathTools distribution)
.IP "\(bu" 4
Devel::PPPort upgraded to version 3.03
.IP "\(bu" 4
File::Spec upgraded to version 3.01 (as part of the new PathTools distribution)
.IP "\(bu" 4
Encode upgraded to version 2.08
.IP "\(bu" 4
ExtUtils::MakeMaker remains at version 6.17, as later stable releases currently
available on \s-1CPAN\s0 have some issues with core modules on some core platforms.
.IP "\(bu" 4
I18N::LangTags upgraded to version 0.35
.IP "\(bu" 4
Math::BigInt upgraded to version 1.73
.IP "\(bu" 4
Math::BigRat upgraded to version 0.13
.IP "\(bu" 4
MIME::Base64 upgraded to version 3.05
.IP "\(bu" 4
POSIX::sigprocmask function can now retrieve the current signal mask without
also setting it.
.IP "\(bu" 4
Time::HiRes upgraded to version 1.65
.SH "Utility Changes"
.IX Header "Utility Changes"
Perl has a new \-dt command-line flag, which enables threads support in the
debugger.
.SH "Performance Enhancements"
.IX Header "Performance Enhancements"
\&\f(CW\*(C`reverse sort ...\*(C'\fR is now optimized to sort in reverse, avoiding the
generation of a temporary intermediate list.
.PP
\&\f(CW\*(C`for (reverse @foo)\*(C'\fR now iterates in reverse, avoiding the generation of a
temporary reversed list.
.SH "Selected Bug Fixes"
.IX Header "Selected Bug Fixes"
The regexp engine is now more robust when given invalid utf8 input, as is
sometimes generated by buggy \s-1XS\s0 modules.
.PP
\&\f(CW\*(C`foreach\*(C'\fR on threads::shared array used to be able to crash Perl. This bug
has now been fixed.
.PP
A regexp in \f(CW\*(C`STDOUT\*(C'\fR's destructor used to coredump, because the regexp pad
was already freed. This has been fixed.
.PP
\&\f(CW\*(C`goto &\*(C'\fR is now more robust \- bugs in deep recursion and chained \f(CW\*(C`goto &\*(C'\fR
have been fixed.
.PP
Using \f(CW\*(C`delete\*(C'\fR on an array no longer leaks memory. A \f(CW\*(C`pop\*(C'\fR of an item from a
shared array reference no longer causes a leak.
.PP
\&\f(CW\*(C`eval_sv()\*(C'\fR failing a taint test could corrupt the stack \- this has been
fixed.
.PP
On platforms with 64 bit pointers numeric comparison operators used to
erroneously compare the addresses of references that are overloaded, rather
than using the overloaded values. This has been fixed.
.PP
\&\f(CW\*(C`read\*(C'\fR into a UTF8\-encoded buffer with an offset off the end of the buffer
no longer mis-calculates buffer lengths.
.PP
Although Perl has promised since version 5.8 that \f(CW\*(C`sort()\*(C'\fR would be
stable, the two cases \f(CW\*(C`sort {$b cmp $a}\*(C'\fR and \f(CW\*(C`sort {$b <=> $a}\*(C'\fR could
produce non-stable sorts.   This is corrected in perl5.8.6.
.PP
Localising \f(CW$^D\fR no longer generates a diagnostic message about valid \-D
flags.
.SH "New or Changed Diagnostics"
.IX Header "New or Changed Diagnostics"
For \-t and \-T,
   Too late for \*(L"\-T\*(R" option
has been changed to the more informative
   \*(L"\-T\*(R" is on the #! line, it must also be used on the command line
.SH "Changed Internals"
.IX Header "Changed Internals"
From now on all applications embedding perl will behave as if perl
were compiled with \-DPERL_USE_SAFE_PUTENV.  See \*(L"Environment access\*(R" in
the \fI\s-1INSTALL\s0\fR file for details.
.PP
Most \f(CW\*(C`C\*(C'\fR source files now have comments at the top explaining their purpose,
which should help anyone wishing to get an overview of the implementation.
.SH "New Tests"
.IX Header "New Tests"
There are significantly more tests for the \f(CW\*(C`B\*(C'\fR suite of modules.
.SH "Reporting Bugs"
.IX Header "Reporting Bugs"
If you find what you think is a bug, you might check the articles
recently posted to the comp.lang.perl.misc newsgroup and the perl
bug database at http://bugs.perl.org.  There may also be
information at http://www.perl.org, the Perl Home Page.
.PP
If you believe you have an unreported bug, please run the \fBperlbug\fR
program included with your release.  Be sure to trim your bug down
to a tiny but sufficient test case.  Your bug report, along with the
output of \f(CW\*(C`perl \-V\*(C'\fR, will be sent off to perlbug@perl.org to be
analysed by the Perl porting team.  You can browse and search
the Perl 5 bugs at http://bugs.perl.org/
.SH "SEE ALSO"
.IX Header "SEE ALSO"
The \fIChanges\fR file for exhaustive details on what changed.
.PP
The \fI\s-1INSTALL\s0\fR file for how to build Perl.
.PP
The \fI\s-1README\s0\fR file for general stuff.
.PP
The \fIArtistic\fR and \fICopying\fR files for copyright information.
  osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perl586delta5.18.1                           0100644 0001750 0001750 00000022317 12566207433 023500  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERL586DELTA 1"
.TH PERL586DELTA 1 "2013-11-04" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perl586delta \- what is new for perl v5.8.6
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document describes differences between the 5.8.5 release and
the 5.8.6 release.
.SH "Incompatible Changes"
.IX Header "Incompatible Changes"
There are no changes incompatible with 5.8.5.
.SH "Core Enhancements"
.IX Header "Core Enhancements"
The perl interpreter is now more tolerant of UTF\-16\-encoded scripts.
.PP
On Win32, Perl can now use non-IFS compatible LSPs, which allows Perl to
work in conjunction with firewalls such as McAfee Guardian. For full details
see the file \fI\s-1README\s0.win32\fR, particularly if you're running Win95.
.SH "Modules and Pragmata"
.IX Header "Modules and Pragmata"
.IP "\(bu" 4
With the \f(CW\*(C`base\*(C'\fR pragma, an intermediate class with no fields used to messes
up private fields in the base class. This has been fixed.
.IP "\(bu" 4
Cwd upgraded to version 3.01 (as part of the new PathTools distribution)
.IP "\(bu" 4
Devel::PPPort upgraded to version 3.03
.IP "\(bu" 4
File::Spec upgraded to version 3.01 (as part of the new PathTools distribution)
.IP "\(bu" 4
Encode upgraded to version 2.08
.IP "\(bu" 4
ExtUtils::MakeMaker remains at version 6.17, as later stable releases currently
available on \s-1CPAN\s0 have some issues with core modules on some core platforms.
.IP "\(bu" 4
I18N::LangTags upgraded to version 0.35
.IP "\(bu" 4
Math::BigInt upgraded to version 1.73
.IP "\(bu" 4
Math::BigRat upgraded to version 0.13
.IP "\(bu" 4
MIME::Base64 upgraded to version 3.05
.IP "\(bu" 4
POSIX::sigprocmask function can now retrieve the current signal mask without
also setting it.
.IP "\(bu" 4
Time::HiRes upgraded to version 1.65
.SH "Utility Changes"
.IX Header "Utility Changes"
Perl has a new \-dt command-line flag, which enables threads support in the
debugger.
.SH "Performance Enhancements"
.IX Header "Performance Enhancements"
\&\f(CW\*(C`reverse sort ...\*(C'\fR is now optimized to sort in reverse, avoiding the
generation of a temporary intermediate list.
.PP
\&\f(CW\*(C`for (reverse @foo)\*(C'\fR now iterates in reverse, avoiding the generation of a
temporary reversed list.
.SH "Selected Bug Fixes"
.IX Header "Selected Bug Fixes"
The regexp engine is now more robust when given invalid utf8 input, as is
sometimes generated by buggy \s-1XS\s0 modules.
.PP
\&\f(CW\*(C`foreach\*(C'\fR on threads::shared array used to be able to crash Perl. This bug
has now been fixed.
.PP
A regexp in \f(CW\*(C`STDOUT\*(C'\fR's destructor used to coredump, because the regexp pad
was already freed. This has been fixed.
.PP
\&\f(CW\*(C`goto &\*(C'\fR is now more robust \- bugs in deep recursion and chained \f(CW\*(C`goto &\*(C'\fR
have been fixed.
.PP
Using \f(CW\*(C`delete\*(C'\fR on an array no longer leaks memory. A \f(CW\*(C`pop\*(C'\fR of an item from a
shared array reference no longer causes a leak.
.PP
\&\f(CW\*(C`eval_sv()\*(C'\fR failing a taint test could corrupt the stack \- this has been
fixed.
.PP
On platforms with 64 bit pointers numeric comparison operators used to
erroneously compare the addresses of references that are overloaded, rather
than using the overloaded values. This has been fixed.
.PP
\&\f(CW\*(C`read\*(C'\fR into a UTF8\-encoded buffer with an offset off the end of the buffer
no longer mis-calculates buffer lengths.
.PP
Although Perl has promised since version 5.8 that \f(CW\*(C`sort()\*(C'\fR would be
stable, the two cases \f(CW\*(C`sort {$b cmp $a}\*(C'\fR and \f(CW\*(C`sort {$b <=> $a}\*(C'\fR could
produce non-stable sorts.   This is corrected in perl5.8.6.
.PP
Localising \f(CW$^D\fR no longer generates a diagnostic message about valid \-D
flags.
.SH "New or Changed Diagnostics"
.IX Header "New or Changed Diagnostics"
For \-t and \-T,
   Too late for \*(L"\-T\*(R" option
has been changed to the more informative
   \*(L"\-T\*(R" is on the #! line, it must also be used on the command line
.SH "Changed Internals"
.IX Header "Changed Internals"
From now on all applications embedding perl will behave as if perl
were compiled with \-DPERL_USE_SAFE_PUTENV.  See \*(L"Environment access\*(R" in
the \fI\s-1INSTALL\s0\fR file for details.
.PP
Most \f(CW\*(C`C\*(C'\fR source files now have comments at the top explaining their purpose,
which should help anyone wishing to get an overview of the implementation.
.SH "New Tests"
.IX Header "New Tests"
There are significantly more tests for the \f(CW\*(C`B\*(C'\fR suite of modules.
.SH "Reporting Bugs"
.IX Header "Reporting Bugs"
If you find what you think is a bug, you might check the articles
recently posted to the comp.lang.perl.misc newsgroup and the perl
bug database at http://bugs.perl.org.  There may also be
information at http://www.perl.org, the Perl Home Page.
.PP
If you believe you have an unreported bug, please run the \fBperlbug\fR
program included with your release.  Be sure to trim your bug down
to a tiny but sufficient test case.  Your bug report, along with the
output of \f(CW\*(C`perl \-V\*(C'\fR, will be sent off to perlbug@perl.org to be
analysed by the Perl porting team.  You can browse and search
the Perl 5 bugs at http://bugs.perl.org/
.SH "SEE ALSO"
.IX Header "SEE ALSO"
The \fIChanges\fR file for exhaustive details on what changed.
.PP
The \fI\s-1INSTALL\s0\fR file for how to build Perl.
.PP
The \fI\s-1README\s0\fR file for general stuff.
.PP
The \fIArtistic\fR and \fICopying\fR files for copyright information.
                                                                                                                                                                                                                                                                                                                 osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perl587delta.1                               0100644 0001750 0001750 00000033563 12566207434 023173  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERL587DELTA 1"
.TH PERL587DELTA 1 "2013-11-04" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perl587delta \- what is new for perl v5.8.7
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document describes differences between the 5.8.6 release and
the 5.8.7 release.
.SH "Incompatible Changes"
.IX Header "Incompatible Changes"
There are no changes incompatible with 5.8.6.
.SH "Core Enhancements"
.IX Header "Core Enhancements"
.SS "Unicode Character Database 4.1.0"
.IX Subsection "Unicode Character Database 4.1.0"
The copy of the Unicode Character Database included in Perl 5.8 has
been updated to 4.1.0 from 4.0.1. See
<http://www.unicode.org/versions/Unicode4.1.0/#NotableChanges> for the
notable changes.
.SS "suidperl less insecure"
.IX Subsection "suidperl less insecure"
A pair of exploits in \f(CW\*(C`suidperl\*(C'\fR involving debugging code have been closed.
.PP
For new projects the core perl team strongly recommends that you use
dedicated, single purpose security tools such as \f(CW\*(C`sudo\*(C'\fR in preference to
\&\f(CW\*(C`suidperl\*(C'\fR.
.SS "Optional site customization script"
.IX Subsection "Optional site customization script"
The perl interpreter can be built to allow the use of a site customization
script. By default this is not enabled, to be consistent with previous perl
releases. To use this, add \f(CW\*(C`\-Dusesitecustomize\*(C'\fR to the command line flags
when running the \f(CW\*(C`Configure\*(C'\fR script. See also \*(L"\-f\*(R" in perlrun.
.ie n .SS """Config.pm"" is now much smaller."
.el .SS "\f(CWConfig.pm\fP is now much smaller."
.IX Subsection "Config.pm is now much smaller."
\&\f(CW\*(C`Config.pm\*(C'\fR is now about 3K rather than 32K, with the infrequently used
code and \f(CW%Config\fR values loaded on demand. This is transparent to the
programmer, but means that most code will save parsing and loading 29K of
script (for example, code that uses \f(CW\*(C`File::Find\*(C'\fR).
.SH "Modules and Pragmata"
.IX Header "Modules and Pragmata"
.IP "\(bu" 4
B upgraded to version 1.09
.IP "\(bu" 4
base upgraded to version 2.07
.IP "\(bu" 4
bignum upgraded to version 0.17
.IP "\(bu" 4
bytes upgraded to version 1.02
.IP "\(bu" 4
Carp upgraded to version 1.04
.IP "\(bu" 4
\&\s-1CGI\s0 upgraded to version 3.10
.IP "\(bu" 4
Class::ISA upgraded to version 0.33
.IP "\(bu" 4
Data::Dumper upgraded to version 2.121_02
.IP "\(bu" 4
DB_File upgraded to version 1.811
.IP "\(bu" 4
Devel::PPPort upgraded to version 3.06
.IP "\(bu" 4
Digest upgraded to version 1.10
.IP "\(bu" 4
Encode upgraded to version 2.10
.IP "\(bu" 4
FileCache upgraded to version 1.05
.IP "\(bu" 4
File::Path upgraded to version 1.07
.IP "\(bu" 4
File::Temp upgraded to version 0.16
.IP "\(bu" 4
IO::File upgraded to version 1.11
.IP "\(bu" 4
IO::Socket upgraded to version 1.28
.IP "\(bu" 4
Math::BigInt upgraded to version 1.77
.IP "\(bu" 4
Math::BigRat upgraded to version 0.15
.IP "\(bu" 4
overload upgraded to version 1.03
.IP "\(bu" 4
PathTools upgraded to version 3.05
.IP "\(bu" 4
Pod::HTML upgraded to version 1.0503
.IP "\(bu" 4
Pod::Perldoc upgraded to version 3.14
.IP "\(bu" 4
Pod::LaTeX upgraded to version 0.58
.IP "\(bu" 4
Pod::Parser upgraded to version 1.30
.IP "\(bu" 4
Symbol upgraded to version 1.06
.IP "\(bu" 4
Term::ANSIColor upgraded to version 1.09
.IP "\(bu" 4
Test::Harness upgraded to version 2.48
.IP "\(bu" 4
Test::Simple upgraded to version 0.54
.IP "\(bu" 4
Text::Wrap upgraded to version 2001.09293, to fix a bug when \fIwrap()\fR was
called with a non-space separator.
.IP "\(bu" 4
threads::shared upgraded to version 0.93
.IP "\(bu" 4
Time::HiRes upgraded to version 1.66
.IP "\(bu" 4
Time::Local upgraded to version 1.11
.IP "\(bu" 4
Unicode::Normalize upgraded to version 0.32
.IP "\(bu" 4
utf8 upgraded to version 1.05
.IP "\(bu" 4
Win32 upgraded to version 0.24, which provides Win32::GetFileVersion
.SH "Utility Changes"
.IX Header "Utility Changes"
.SS "find2perl enhancements"
.IX Subsection "find2perl enhancements"
\&\f(CW\*(C`find2perl\*(C'\fR has new options \f(CW\*(C`\-iname\*(C'\fR, \f(CW\*(C`\-path\*(C'\fR and \f(CW\*(C`\-ipath\*(C'\fR.
.SH "Performance Enhancements"
.IX Header "Performance Enhancements"
The internal pointer mapping hash used during ithreads cloning now uses an
arena for memory allocation. In tests this reduced ithreads cloning time by
about 10%.
.SH "Installation and Configuration Improvements"
.IX Header "Installation and Configuration Improvements"
.IP "\(bu" 4
The Win32 \*(L"dmake\*(R" makefile.mk has been updated to make it compatible
with the latest versions of dmake.
.IP "\(bu" 4
\&\f(CW\*(C`PERL_MALLOC\*(C'\fR, \f(CW\*(C`DEBUG_MSTATS\*(C'\fR, \f(CW\*(C`PERL_HASH_SEED_EXPLICIT\*(C'\fR and \f(CW\*(C`NO_HASH_SEED\*(C'\fR
should now work in Win32 makefiles.
.SH "Selected Bug Fixes"
.IX Header "Selected Bug Fixes"
.IP "\(bu" 4
The \fIsocket()\fR function on Win32 has been fixed so that it is able to use
transport providers which specify a protocol of 0 (meaning any protocol
is allowed) once more.  (This was broken in 5.8.6, and typically caused
the use of \s-1ICMP\s0 sockets to fail.)
.IP "\(bu" 4
Another obscure bug involving \f(CW\*(C`substr\*(C'\fR and \s-1UTF\-8\s0 caused by bad internal
offset caching has been identified and fixed.
.IP "\(bu" 4
A bug involving the loading of \s-1UTF\-8\s0 tables by the regexp engine has been
fixed \- code such as \f(CW\*(C`"\ex{100}" =~ /[[:print:]]/\*(C'\fR will no longer give
corrupt results.
.IP "\(bu" 4
Case conversion operations such as \f(CW\*(C`uc\*(C'\fR on a long Unicode string could
exhaust memory. This has been fixed.
.IP "\(bu" 4
\&\f(CW\*(C`index\*(C'\fR/\f(CW\*(C`rindex\*(C'\fR were buggy for some combinations of Unicode and
non-Unicode data. This has been fixed.
.IP "\(bu" 4
\&\f(CW\*(C`read\*(C'\fR (and presumably \f(CW\*(C`sysread\*(C'\fR) would expose the \s-1UTF\-8\s0 internals when
reading from a byte oriented file handle into a \s-1UTF\-8\s0 scalar. This has
been fixed.
.IP "\(bu" 4
Several \f(CW\*(C`pack\*(C'\fR/\f(CW\*(C`unpack\*(C'\fR bug fixes:
.RS 4
.IP "\(bu" 4
Checksums with \f(CW\*(C`b\*(C'\fR or \f(CW\*(C`B\*(C'\fR formats were broken.
.IP "\(bu" 4
\&\f(CW\*(C`unpack\*(C'\fR checksums could overflow with the \f(CW\*(C`C\*(C'\fR format.
.IP "\(bu" 4
\&\f(CW\*(C`U0\*(C'\fR and \f(CW\*(C`C0\*(C'\fR are now scoped to \f(CW\*(C`()\*(C'\fR \f(CW\*(C`pack\*(C'\fR sub-templates.
.IP "\(bu" 4
Counted length prefixes now don't change \f(CW\*(C`C0\*(C'\fR/\f(CW\*(C`U0\*(C'\fR mode.
.IP "\(bu" 4
\&\f(CW\*(C`pack\*(C'\fR \f(CW\*(C`Z0\*(C'\fR used to destroy the preceding character.
.IP "\(bu" 4
\&\f(CW\*(C`P\*(C'\fR/\f(CW\*(C`p\*(C'\fR \f(CW\*(C`pack\*(C'\fR formats used to only recognise literal \f(CW\*(C`undef\*(C'\fR
.RE
.RS 4
.RE
.IP "\(bu" 4
Using closures with ithreads could cause perl to crash. This was due to
failure to correctly lock internal \s-1OP\s0 structures, and has been fixed.
.IP "\(bu" 4
The return value of \f(CW\*(C`close\*(C'\fR now correctly reflects any file errors that
occur while flushing the handle's data, instead of just giving failure if
the actual underlying file close operation failed.
.IP "\(bu" 4
\&\f(CW\*(C`not() || 1\*(C'\fR used to segfault. \f(CW\*(C`not()\*(C'\fR now behaves like \f(CWnot(0)\fR, which was
the pre 5.6.0 behaviour.
.IP "\(bu" 4
\&\f(CW\*(C`h2ph\*(C'\fR has various enhancements to cope with constructs in header files that
used to result in incorrect or invalid output.
.SH "New or Changed Diagnostics"
.IX Header "New or Changed Diagnostics"
There is a new taint error, \*(L"%ENV is aliased to \f(CW%s\fR\*(R". This error is thrown
when taint checks are enabled and when \f(CW*ENV\fR has been aliased, so that
\&\f(CW%ENV\fR has no env-magic anymore and hence the environment cannot be verified
as taint-free.
.PP
The internals of \f(CW\*(C`pack\*(C'\fR and \f(CW\*(C`unpack\*(C'\fR have been updated. All legitimate
templates should work as before, but there may be some changes in the error
reported for complex failure cases. Any behaviour changes for non-error cases
are bugs, and should be reported.
.SH "Changed Internals"
.IX Header "Changed Internals"
There has been a fair amount of refactoring of the \f(CW\*(C`C\*(C'\fR source code, partly to
make it tidier and more maintainable. The resulting object code and the
\&\f(CW\*(C`perl\*(C'\fR binary may well be smaller than 5.8.6, and hopefully faster in some
cases, but apart from this there should be no user-detectable changes.
.PP
\&\f(CW\*(C`${^UTF8LOCALE}\*(C'\fR has been added to give perl space access to \f(CW\*(C`PL_utf8locale\*(C'\fR.
.PP
The size of the arenas used to allocate \s-1SV\s0 heads and most \s-1SV\s0 bodies can now
be changed at compile time. The old size was 1008 bytes, the new default size
is 4080 bytes.
.SH "Known Problems"
.IX Header "Known Problems"
Unicode strings returned from overloaded operators can be buggy. This is a
long standing bug reported since 5.8.6 was released, but we do not yet have
a suitable fix for it.
.SH "Platform Specific Problems"
.IX Header "Platform Specific Problems"
On \s-1UNICOS,\s0 lib/Math/BigInt/t/bigintc.t hangs burning \s-1CPU.\s0
ext/B/t/bytecode.t and ext/Socket/t/socketpair.t both fail tests.
These are unlikely to be resolved, as our valiant \s-1UNICOS\s0 porter's last
Cray is being decommissioned.
.SH "Reporting Bugs"
.IX Header "Reporting Bugs"
If you find what you think is a bug, you might check the articles
recently posted to the comp.lang.perl.misc newsgroup and the perl
bug database at http://bugs.perl.org.  There may also be
information at http://www.perl.org, the Perl Home Page.
.PP
If you believe you have an unreported bug, please run the \fBperlbug\fR
program included with your release.  Be sure to trim your bug down
to a tiny but sufficient test case.  Your bug report, along with the
output of \f(CW\*(C`perl \-V\*(C'\fR, will be sent off to perlbug@perl.org to be
analysed by the Perl porting team.  You can browse and search
the Perl 5 bugs at http://bugs.perl.org/
.SH "SEE ALSO"
.IX Header "SEE ALSO"
The \fIChanges\fR file for exhaustive details on what changed.
.PP
The \fI\s-1INSTALL\s0\fR file for how to build Perl.
.PP
The \fI\s-1README\s0\fR file for general stuff.
.PP
The \fIArtistic\fR and \fICopying\fR files for copyright information.
                                                                                                                                             osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perl587delta5.16.1                           0100644 0001750 0001750 00000033242 12566207413 023474  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERL587DELTA 1"
.TH PERL587DELTA 1 "2013-02-26" "perl v5.16.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perl587delta \- what is new for perl v5.8.7
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document describes differences between the 5.8.6 release and
the 5.8.7 release.
.SH "Incompatible Changes"
.IX Header "Incompatible Changes"
There are no changes incompatible with 5.8.6.
.SH "Core Enhancements"
.IX Header "Core Enhancements"
.SS "Unicode Character Database 4.1.0"
.IX Subsection "Unicode Character Database 4.1.0"
The copy of the Unicode Character Database included in Perl 5.8 has
been updated to 4.1.0 from 4.0.1. See
<http://www.unicode.org/versions/Unicode4.1.0/#NotableChanges> for the
notable changes.
.SS "suidperl less insecure"
.IX Subsection "suidperl less insecure"
A pair of exploits in \f(CW\*(C`suidperl\*(C'\fR involving debugging code have been closed.
.PP
For new projects the core perl team strongly recommends that you use
dedicated, single purpose security tools such as \f(CW\*(C`sudo\*(C'\fR in preference to
\&\f(CW\*(C`suidperl\*(C'\fR.
.SS "Optional site customization script"
.IX Subsection "Optional site customization script"
The perl interpreter can be built to allow the use of a site customization
script. By default this is not enabled, to be consistent with previous perl
releases. To use this, add \f(CW\*(C`\-Dusesitecustomize\*(C'\fR to the command line flags
when running the \f(CW\*(C`Configure\*(C'\fR script. See also \*(L"\-f\*(R" in perlrun.
.ie n .SS """Config.pm"" is now much smaller."
.el .SS "\f(CWConfig.pm\fP is now much smaller."
.IX Subsection "Config.pm is now much smaller."
\&\f(CW\*(C`Config.pm\*(C'\fR is now about 3K rather than 32K, with the infrequently used
code and \f(CW%Config\fR values loaded on demand. This is transparent to the
programmer, but means that most code will save parsing and loading 29K of
script (for example, code that uses \f(CW\*(C`File::Find\*(C'\fR).
.SH "Modules and Pragmata"
.IX Header "Modules and Pragmata"
.IP "\(bu" 4
B upgraded to version 1.09
.IP "\(bu" 4
base upgraded to version 2.07
.IP "\(bu" 4
bignum upgraded to version 0.17
.IP "\(bu" 4
bytes upgraded to version 1.02
.IP "\(bu" 4
Carp upgraded to version 1.04
.IP "\(bu" 4
\&\s-1CGI\s0 upgraded to version 3.10
.IP "\(bu" 4
Class::ISA upgraded to version 0.33
.IP "\(bu" 4
Data::Dumper upgraded to version 2.121_02
.IP "\(bu" 4
DB_File upgraded to version 1.811
.IP "\(bu" 4
Devel::PPPort upgraded to version 3.06
.IP "\(bu" 4
Digest upgraded to version 1.10
.IP "\(bu" 4
Encode upgraded to version 2.10
.IP "\(bu" 4
FileCache upgraded to version 1.05
.IP "\(bu" 4
File::Path upgraded to version 1.07
.IP "\(bu" 4
File::Temp upgraded to version 0.16
.IP "\(bu" 4
IO::File upgraded to version 1.11
.IP "\(bu" 4
IO::Socket upgraded to version 1.28
.IP "\(bu" 4
Math::BigInt upgraded to version 1.77
.IP "\(bu" 4
Math::BigRat upgraded to version 0.15
.IP "\(bu" 4
overload upgraded to version 1.03
.IP "\(bu" 4
PathTools upgraded to version 3.05
.IP "\(bu" 4
Pod::HTML upgraded to version 1.0503
.IP "\(bu" 4
Pod::Perldoc upgraded to version 3.14
.IP "\(bu" 4
Pod::LaTeX upgraded to version 0.58
.IP "\(bu" 4
Pod::Parser upgraded to version 1.30
.IP "\(bu" 4
Symbol upgraded to version 1.06
.IP "\(bu" 4
Term::ANSIColor upgraded to version 1.09
.IP "\(bu" 4
Test::Harness upgraded to version 2.48
.IP "\(bu" 4
Test::Simple upgraded to version 0.54
.IP "\(bu" 4
Text::Wrap upgraded to version 2001.09293, to fix a bug when \fIwrap()\fR was
called with a non-space separator.
.IP "\(bu" 4
threads::shared upgraded to version 0.93
.IP "\(bu" 4
Time::HiRes upgraded to version 1.66
.IP "\(bu" 4
Time::Local upgraded to version 1.11
.IP "\(bu" 4
Unicode::Normalize upgraded to version 0.32
.IP "\(bu" 4
utf8 upgraded to version 1.05
.IP "\(bu" 4
Win32 upgraded to version 0.24, which provides Win32::GetFileVersion
.SH "Utility Changes"
.IX Header "Utility Changes"
.SS "find2perl enhancements"
.IX Subsection "find2perl enhancements"
\&\f(CW\*(C`find2perl\*(C'\fR has new options \f(CW\*(C`\-iname\*(C'\fR, \f(CW\*(C`\-path\*(C'\fR and \f(CW\*(C`\-ipath\*(C'\fR.
.SH "Performance Enhancements"
.IX Header "Performance Enhancements"
The internal pointer mapping hash used during ithreads cloning now uses an
arena for memory allocation. In tests this reduced ithreads cloning time by
about 10%.
.SH "Installation and Configuration Improvements"
.IX Header "Installation and Configuration Improvements"
.IP "\(bu" 4
The Win32 \*(L"dmake\*(R" makefile.mk has been updated to make it compatible
with the latest versions of dmake.
.IP "\(bu" 4
\&\f(CW\*(C`PERL_MALLOC\*(C'\fR, \f(CW\*(C`DEBUG_MSTATS\*(C'\fR, \f(CW\*(C`PERL_HASH_SEED_EXPLICIT\*(C'\fR and \f(CW\*(C`NO_HASH_SEED\*(C'\fR
should now work in Win32 makefiles.
.SH "Selected Bug Fixes"
.IX Header "Selected Bug Fixes"
.IP "\(bu" 4
The \fIsocket()\fR function on Win32 has been fixed so that it is able to use
transport providers which specify a protocol of 0 (meaning any protocol
is allowed) once more.  (This was broken in 5.8.6, and typically caused
the use of \s-1ICMP\s0 sockets to fail.)
.IP "\(bu" 4
Another obscure bug involving \f(CW\*(C`substr\*(C'\fR and \s-1UTF\-8\s0 caused by bad internal
offset caching has been identified and fixed.
.IP "\(bu" 4
A bug involving the loading of \s-1UTF\-8\s0 tables by the regexp engine has been
fixed \- code such as \f(CW\*(C`"\ex{100}" =~ /[[:print:]]/\*(C'\fR will no longer give
corrupt results.
.IP "\(bu" 4
Case conversion operations such as \f(CW\*(C`uc\*(C'\fR on a long Unicode string could
exhaust memory. This has been fixed.
.IP "\(bu" 4
\&\f(CW\*(C`index\*(C'\fR/\f(CW\*(C`rindex\*(C'\fR were buggy for some combinations of Unicode and
non-Unicode data. This has been fixed.
.IP "\(bu" 4
\&\f(CW\*(C`read\*(C'\fR (and presumably \f(CW\*(C`sysread\*(C'\fR) would expose the \s-1UTF\-8\s0 internals when
reading from a byte oriented file handle into a \s-1UTF\-8\s0 scalar. This has
been fixed.
.IP "\(bu" 4
Several \f(CW\*(C`pack\*(C'\fR/\f(CW\*(C`unpack\*(C'\fR bug fixes:
.RS 4
.IP "\(bu" 4
Checksums with \f(CW\*(C`b\*(C'\fR or \f(CW\*(C`B\*(C'\fR formats were broken.
.IP "\(bu" 4
\&\f(CW\*(C`unpack\*(C'\fR checksums could overflow with the \f(CW\*(C`C\*(C'\fR format.
.IP "\(bu" 4
\&\f(CW\*(C`U0\*(C'\fR and \f(CW\*(C`C0\*(C'\fR are now scoped to \f(CW\*(C`()\*(C'\fR \f(CW\*(C`pack\*(C'\fR sub-templates.
.IP "\(bu" 4
Counted length prefixes now don't change \f(CW\*(C`C0\*(C'\fR/\f(CW\*(C`U0\*(C'\fR mode.
.IP "\(bu" 4
\&\f(CW\*(C`pack\*(C'\fR \f(CW\*(C`Z0\*(C'\fR used to destroy the preceding character.
.IP "\(bu" 4
\&\f(CW\*(C`P\*(C'\fR/\f(CW\*(C`p\*(C'\fR \f(CW\*(C`pack\*(C'\fR formats used to only recognise literal \f(CW\*(C`undef\*(C'\fR
.RE
.RS 4
.RE
.IP "\(bu" 4
Using closures with ithreads could cause perl to crash. This was due to
failure to correctly lock internal \s-1OP\s0 structures, and has been fixed.
.IP "\(bu" 4
The return value of \f(CW\*(C`close\*(C'\fR now correctly reflects any file errors that
occur while flushing the handle's data, instead of just giving failure if
the actual underlying file close operation failed.
.IP "\(bu" 4
\&\f(CW\*(C`not() || 1\*(C'\fR used to segfault. \f(CW\*(C`not()\*(C'\fR now behaves like \f(CWnot(0)\fR, which was
the pre 5.6.0 behaviour.
.IP "\(bu" 4
\&\f(CW\*(C`h2ph\*(C'\fR has various enhancements to cope with constructs in header files that
used to result in incorrect or invalid output.
.SH "New or Changed Diagnostics"
.IX Header "New or Changed Diagnostics"
There is a new taint error, \*(L"%ENV is aliased to \f(CW%s\fR\*(R". This error is thrown
when taint checks are enabled and when \f(CW*ENV\fR has been aliased, so that
\&\f(CW%ENV\fR has no env-magic anymore and hence the environment cannot be verified
as taint-free.
.PP
The internals of \f(CW\*(C`pack\*(C'\fR and \f(CW\*(C`unpack\*(C'\fR have been updated. All legitimate
templates should work as before, but there may be some changes in the error
reported for complex failure cases. Any behaviour changes for non-error cases
are bugs, and should be reported.
.SH "Changed Internals"
.IX Header "Changed Internals"
There has been a fair amount of refactoring of the \f(CW\*(C`C\*(C'\fR source code, partly to
make it tidier and more maintainable. The resulting object code and the
\&\f(CW\*(C`perl\*(C'\fR binary may well be smaller than 5.8.6, and hopefully faster in some
cases, but apart from this there should be no user-detectable changes.
.PP
\&\f(CW\*(C`${^UTF8LOCALE}\*(C'\fR has been added to give perl space access to \f(CW\*(C`PL_utf8locale\*(C'\fR.
.PP
The size of the arenas used to allocate \s-1SV\s0 heads and most \s-1SV\s0 bodies can now
be changed at compile time. The old size was 1008 bytes, the new default size
is 4080 bytes.
.SH "Known Problems"
.IX Header "Known Problems"
Unicode strings returned from overloaded operators can be buggy. This is a
long standing bug reported since 5.8.6 was released, but we do not yet have
a suitable fix for it.
.SH "Platform Specific Problems"
.IX Header "Platform Specific Problems"
On \s-1UNICOS\s0, lib/Math/BigInt/t/bigintc.t hangs burning \s-1CPU\s0.
ext/B/t/bytecode.t and ext/Socket/t/socketpair.t both fail tests.
These are unlikely to be resolved, as our valiant \s-1UNICOS\s0 porter's last
Cray is being decommissioned.
.SH "Reporting Bugs"
.IX Header "Reporting Bugs"
If you find what you think is a bug, you might check the articles
recently posted to the comp.lang.perl.misc newsgroup and the perl
bug database at http://bugs.perl.org.  There may also be
information at http://www.perl.org, the Perl Home Page.
.PP
If you believe you have an unreported bug, please run the \fBperlbug\fR
program included with your release.  Be sure to trim your bug down
to a tiny but sufficient test case.  Your bug report, along with the
output of \f(CW\*(C`perl \-V\*(C'\fR, will be sent off to perlbug@perl.org to be
analysed by the Perl porting team.  You can browse and search
the Perl 5 bugs at http://bugs.perl.org/
.SH "SEE ALSO"
.IX Header "SEE ALSO"
The \fIChanges\fR file for exhaustive details on what changed.
.PP
The \fI\s-1INSTALL\s0\fR file for how to build Perl.
.PP
The \fI\s-1README\s0\fR file for general stuff.
.PP
The \fIArtistic\fR and \fICopying\fR files for copyright information.
                                                                                                                                                                                                                                                                                                                                                              osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perl587delta5.18.1                           0100644 0001750 0001750 00000033563 12566207434 023507  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERL587DELTA 1"
.TH PERL587DELTA 1 "2013-11-04" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perl587delta \- what is new for perl v5.8.7
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document describes differences between the 5.8.6 release and
the 5.8.7 release.
.SH "Incompatible Changes"
.IX Header "Incompatible Changes"
There are no changes incompatible with 5.8.6.
.SH "Core Enhancements"
.IX Header "Core Enhancements"
.SS "Unicode Character Database 4.1.0"
.IX Subsection "Unicode Character Database 4.1.0"
The copy of the Unicode Character Database included in Perl 5.8 has
been updated to 4.1.0 from 4.0.1. See
<http://www.unicode.org/versions/Unicode4.1.0/#NotableChanges> for the
notable changes.
.SS "suidperl less insecure"
.IX Subsection "suidperl less insecure"
A pair of exploits in \f(CW\*(C`suidperl\*(C'\fR involving debugging code have been closed.
.PP
For new projects the core perl team strongly recommends that you use
dedicated, single purpose security tools such as \f(CW\*(C`sudo\*(C'\fR in preference to
\&\f(CW\*(C`suidperl\*(C'\fR.
.SS "Optional site customization script"
.IX Subsection "Optional site customization script"
The perl interpreter can be built to allow the use of a site customization
script. By default this is not enabled, to be consistent with previous perl
releases. To use this, add \f(CW\*(C`\-Dusesitecustomize\*(C'\fR to the command line flags
when running the \f(CW\*(C`Configure\*(C'\fR script. See also \*(L"\-f\*(R" in perlrun.
.ie n .SS """Config.pm"" is now much smaller."
.el .SS "\f(CWConfig.pm\fP is now much smaller."
.IX Subsection "Config.pm is now much smaller."
\&\f(CW\*(C`Config.pm\*(C'\fR is now about 3K rather than 32K, with the infrequently used
code and \f(CW%Config\fR values loaded on demand. This is transparent to the
programmer, but means that most code will save parsing and loading 29K of
script (for example, code that uses \f(CW\*(C`File::Find\*(C'\fR).
.SH "Modules and Pragmata"
.IX Header "Modules and Pragmata"
.IP "\(bu" 4
B upgraded to version 1.09
.IP "\(bu" 4
base upgraded to version 2.07
.IP "\(bu" 4
bignum upgraded to version 0.17
.IP "\(bu" 4
bytes upgraded to version 1.02
.IP "\(bu" 4
Carp upgraded to version 1.04
.IP "\(bu" 4
\&\s-1CGI\s0 upgraded to version 3.10
.IP "\(bu" 4
Class::ISA upgraded to version 0.33
.IP "\(bu" 4
Data::Dumper upgraded to version 2.121_02
.IP "\(bu" 4
DB_File upgraded to version 1.811
.IP "\(bu" 4
Devel::PPPort upgraded to version 3.06
.IP "\(bu" 4
Digest upgraded to version 1.10
.IP "\(bu" 4
Encode upgraded to version 2.10
.IP "\(bu" 4
FileCache upgraded to version 1.05
.IP "\(bu" 4
File::Path upgraded to version 1.07
.IP "\(bu" 4
File::Temp upgraded to version 0.16
.IP "\(bu" 4
IO::File upgraded to version 1.11
.IP "\(bu" 4
IO::Socket upgraded to version 1.28
.IP "\(bu" 4
Math::BigInt upgraded to version 1.77
.IP "\(bu" 4
Math::BigRat upgraded to version 0.15
.IP "\(bu" 4
overload upgraded to version 1.03
.IP "\(bu" 4
PathTools upgraded to version 3.05
.IP "\(bu" 4
Pod::HTML upgraded to version 1.0503
.IP "\(bu" 4
Pod::Perldoc upgraded to version 3.14
.IP "\(bu" 4
Pod::LaTeX upgraded to version 0.58
.IP "\(bu" 4
Pod::Parser upgraded to version 1.30
.IP "\(bu" 4
Symbol upgraded to version 1.06
.IP "\(bu" 4
Term::ANSIColor upgraded to version 1.09
.IP "\(bu" 4
Test::Harness upgraded to version 2.48
.IP "\(bu" 4
Test::Simple upgraded to version 0.54
.IP "\(bu" 4
Text::Wrap upgraded to version 2001.09293, to fix a bug when \fIwrap()\fR was
called with a non-space separator.
.IP "\(bu" 4
threads::shared upgraded to version 0.93
.IP "\(bu" 4
Time::HiRes upgraded to version 1.66
.IP "\(bu" 4
Time::Local upgraded to version 1.11
.IP "\(bu" 4
Unicode::Normalize upgraded to version 0.32
.IP "\(bu" 4
utf8 upgraded to version 1.05
.IP "\(bu" 4
Win32 upgraded to version 0.24, which provides Win32::GetFileVersion
.SH "Utility Changes"
.IX Header "Utility Changes"
.SS "find2perl enhancements"
.IX Subsection "find2perl enhancements"
\&\f(CW\*(C`find2perl\*(C'\fR has new options \f(CW\*(C`\-iname\*(C'\fR, \f(CW\*(C`\-path\*(C'\fR and \f(CW\*(C`\-ipath\*(C'\fR.
.SH "Performance Enhancements"
.IX Header "Performance Enhancements"
The internal pointer mapping hash used during ithreads cloning now uses an
arena for memory allocation. In tests this reduced ithreads cloning time by
about 10%.
.SH "Installation and Configuration Improvements"
.IX Header "Installation and Configuration Improvements"
.IP "\(bu" 4
The Win32 \*(L"dmake\*(R" makefile.mk has been updated to make it compatible
with the latest versions of dmake.
.IP "\(bu" 4
\&\f(CW\*(C`PERL_MALLOC\*(C'\fR, \f(CW\*(C`DEBUG_MSTATS\*(C'\fR, \f(CW\*(C`PERL_HASH_SEED_EXPLICIT\*(C'\fR and \f(CW\*(C`NO_HASH_SEED\*(C'\fR
should now work in Win32 makefiles.
.SH "Selected Bug Fixes"
.IX Header "Selected Bug Fixes"
.IP "\(bu" 4
The \fIsocket()\fR function on Win32 has been fixed so that it is able to use
transport providers which specify a protocol of 0 (meaning any protocol
is allowed) once more.  (This was broken in 5.8.6, and typically caused
the use of \s-1ICMP\s0 sockets to fail.)
.IP "\(bu" 4
Another obscure bug involving \f(CW\*(C`substr\*(C'\fR and \s-1UTF\-8\s0 caused by bad internal
offset caching has been identified and fixed.
.IP "\(bu" 4
A bug involving the loading of \s-1UTF\-8\s0 tables by the regexp engine has been
fixed \- code such as \f(CW\*(C`"\ex{100}" =~ /[[:print:]]/\*(C'\fR will no longer give
corrupt results.
.IP "\(bu" 4
Case conversion operations such as \f(CW\*(C`uc\*(C'\fR on a long Unicode string could
exhaust memory. This has been fixed.
.IP "\(bu" 4
\&\f(CW\*(C`index\*(C'\fR/\f(CW\*(C`rindex\*(C'\fR were buggy for some combinations of Unicode and
non-Unicode data. This has been fixed.
.IP "\(bu" 4
\&\f(CW\*(C`read\*(C'\fR (and presumably \f(CW\*(C`sysread\*(C'\fR) would expose the \s-1UTF\-8\s0 internals when
reading from a byte oriented file handle into a \s-1UTF\-8\s0 scalar. This has
been fixed.
.IP "\(bu" 4
Several \f(CW\*(C`pack\*(C'\fR/\f(CW\*(C`unpack\*(C'\fR bug fixes:
.RS 4
.IP "\(bu" 4
Checksums with \f(CW\*(C`b\*(C'\fR or \f(CW\*(C`B\*(C'\fR formats were broken.
.IP "\(bu" 4
\&\f(CW\*(C`unpack\*(C'\fR checksums could overflow with the \f(CW\*(C`C\*(C'\fR format.
.IP "\(bu" 4
\&\f(CW\*(C`U0\*(C'\fR and \f(CW\*(C`C0\*(C'\fR are now scoped to \f(CW\*(C`()\*(C'\fR \f(CW\*(C`pack\*(C'\fR sub-templates.
.IP "\(bu" 4
Counted length prefixes now don't change \f(CW\*(C`C0\*(C'\fR/\f(CW\*(C`U0\*(C'\fR mode.
.IP "\(bu" 4
\&\f(CW\*(C`pack\*(C'\fR \f(CW\*(C`Z0\*(C'\fR used to destroy the preceding character.
.IP "\(bu" 4
\&\f(CW\*(C`P\*(C'\fR/\f(CW\*(C`p\*(C'\fR \f(CW\*(C`pack\*(C'\fR formats used to only recognise literal \f(CW\*(C`undef\*(C'\fR
.RE
.RS 4
.RE
.IP "\(bu" 4
Using closures with ithreads could cause perl to crash. This was due to
failure to correctly lock internal \s-1OP\s0 structures, and has been fixed.
.IP "\(bu" 4
The return value of \f(CW\*(C`close\*(C'\fR now correctly reflects any file errors that
occur while flushing the handle's data, instead of just giving failure if
the actual underlying file close operation failed.
.IP "\(bu" 4
\&\f(CW\*(C`not() || 1\*(C'\fR used to segfault. \f(CW\*(C`not()\*(C'\fR now behaves like \f(CWnot(0)\fR, which was
the pre 5.6.0 behaviour.
.IP "\(bu" 4
\&\f(CW\*(C`h2ph\*(C'\fR has various enhancements to cope with constructs in header files that
used to result in incorrect or invalid output.
.SH "New or Changed Diagnostics"
.IX Header "New or Changed Diagnostics"
There is a new taint error, \*(L"%ENV is aliased to \f(CW%s\fR\*(R". This error is thrown
when taint checks are enabled and when \f(CW*ENV\fR has been aliased, so that
\&\f(CW%ENV\fR has no env-magic anymore and hence the environment cannot be verified
as taint-free.
.PP
The internals of \f(CW\*(C`pack\*(C'\fR and \f(CW\*(C`unpack\*(C'\fR have been updated. All legitimate
templates should work as before, but there may be some changes in the error
reported for complex failure cases. Any behaviour changes for non-error cases
are bugs, and should be reported.
.SH "Changed Internals"
.IX Header "Changed Internals"
There has been a fair amount of refactoring of the \f(CW\*(C`C\*(C'\fR source code, partly to
make it tidier and more maintainable. The resulting object code and the
\&\f(CW\*(C`perl\*(C'\fR binary may well be smaller than 5.8.6, and hopefully faster in some
cases, but apart from this there should be no user-detectable changes.
.PP
\&\f(CW\*(C`${^UTF8LOCALE}\*(C'\fR has been added to give perl space access to \f(CW\*(C`PL_utf8locale\*(C'\fR.
.PP
The size of the arenas used to allocate \s-1SV\s0 heads and most \s-1SV\s0 bodies can now
be changed at compile time. The old size was 1008 bytes, the new default size
is 4080 bytes.
.SH "Known Problems"
.IX Header "Known Problems"
Unicode strings returned from overloaded operators can be buggy. This is a
long standing bug reported since 5.8.6 was released, but we do not yet have
a suitable fix for it.
.SH "Platform Specific Problems"
.IX Header "Platform Specific Problems"
On \s-1UNICOS,\s0 lib/Math/BigInt/t/bigintc.t hangs burning \s-1CPU.\s0
ext/B/t/bytecode.t and ext/Socket/t/socketpair.t both fail tests.
These are unlikely to be resolved, as our valiant \s-1UNICOS\s0 porter's last
Cray is being decommissioned.
.SH "Reporting Bugs"
.IX Header "Reporting Bugs"
If you find what you think is a bug, you might check the articles
recently posted to the comp.lang.perl.misc newsgroup and the perl
bug database at http://bugs.perl.org.  There may also be
information at http://www.perl.org, the Perl Home Page.
.PP
If you believe you have an unreported bug, please run the \fBperlbug\fR
program included with your release.  Be sure to trim your bug down
to a tiny but sufficient test case.  Your bug report, along with the
output of \f(CW\*(C`perl \-V\*(C'\fR, will be sent off to perlbug@perl.org to be
analysed by the Perl porting team.  You can browse and search
the Perl 5 bugs at http://bugs.perl.org/
.SH "SEE ALSO"
.IX Header "SEE ALSO"
The \fIChanges\fR file for exhaustive details on what changed.
.PP
The \fI\s-1INSTALL\s0\fR file for how to build Perl.
.PP
The \fI\s-1README\s0\fR file for general stuff.
.PP
The \fIArtistic\fR and \fICopying\fR files for copyright information.
                                                                                                                                             osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perl588delta.1                               0100644 0001750 0001750 00000105315 12566207434 023167  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERL588DELTA 1"
.TH PERL588DELTA 1 "2013-11-04" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perl588delta \- what is new for perl v5.8.8
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document describes differences between the 5.8.7 release and
the 5.8.8 release.
.SH "Incompatible Changes"
.IX Header "Incompatible Changes"
There are no changes intentionally incompatible with 5.8.7. If any exist,
they are bugs and reports are welcome.
.SH "Core Enhancements"
.IX Header "Core Enhancements"
.IP "\(bu" 4
\&\f(CW\*(C`chdir\*(C'\fR, \f(CW\*(C`chmod\*(C'\fR and \f(CW\*(C`chown\*(C'\fR can now work on filehandles as well as
filenames, if the system supports respectively \f(CW\*(C`fchdir\*(C'\fR, \f(CW\*(C`fchmod\*(C'\fR and
\&\f(CW\*(C`fchown\*(C'\fR, thanks to a patch provided by Gisle Aas.
.SH "Modules and Pragmata"
.IX Header "Modules and Pragmata"
.IP "\(bu" 4
\&\f(CW\*(C`Attribute::Handlers\*(C'\fR upgraded to version 0.78_02
.RS 4
.IP "\(bu" 4
Documentation typo fix
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`attrs\*(C'\fR upgraded to version 1.02
.RS 4
.IP "\(bu" 4
Internal cleanup only
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`autouse\*(C'\fR upgraded to version 1.05
.RS 4
.IP "\(bu" 4
Simplified implementation
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`B\*(C'\fR upgraded to version 1.09_01
.RS 4
.IP "\(bu" 4
The inheritance hierarchy of the \f(CW\*(C`B::\*(C'\fR modules has been corrected;
\&\f(CW\*(C`B::NV\*(C'\fR now inherits from \f(CW\*(C`B::SV\*(C'\fR (instead of \f(CW\*(C`B::IV\*(C'\fR).
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`blib\*(C'\fR upgraded to version 1.03
.RS 4
.IP "\(bu" 4
Documentation typo fix
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`ByteLoader\*(C'\fR upgraded to version 0.06
.RS 4
.IP "\(bu" 4
Internal cleanup
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`CGI\*(C'\fR upgraded to version 3.15
.RS 4
.IP "\(bu" 4
Extraneous \*(L"?\*(R" from \f(CW\*(C`self_url()\*(C'\fR removed
.IP "\(bu" 4
\&\f(CW\*(C`scrolling_list()\*(C'\fR select attribute fixed
.IP "\(bu" 4
\&\f(CW\*(C`virtual_port\*(C'\fR now works properly with the https protocol
.IP "\(bu" 4
\&\f(CW\*(C`upload_hook()\*(C'\fR and \f(CW\*(C`append()\*(C'\fR now works in function-oriented mode
.IP "\(bu" 4
\&\f(CW\*(C`POST_MAX\*(C'\fR doesn't cause the client to hang any more
.IP "\(bu" 4
Automatic tab indexes are now disabled and new \f(CW\*(C`\-tabindex\*(C'\fR pragma has
been added to turn automatic indexes back on
.IP "\(bu" 4
\&\f(CW\*(C`end_form()\*(C'\fR doesn't emit empty (and non-validating) \f(CW\*(C`<div>\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`CGI::Carp\*(C'\fR works better in certain mod_perl configurations
.IP "\(bu" 4
Setting \f(CW$CGI::TMPDIRECTORY\fR is now effective
.IP "\(bu" 4
Enhanced documentation
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`charnames\*(C'\fR upgraded to version 1.05
.RS 4
.IP "\(bu" 4
\&\f(CW\*(C`viacode()\*(C'\fR now accept hex strings and has been optimized.
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`CPAN\*(C'\fR upgraded to version 1.76_02
.RS 4
.IP "\(bu" 4
1 minor bug fix for Win32
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Cwd\*(C'\fR upgraded to version 3.12
.RS 4
.IP "\(bu" 4
\&\f(CW\*(C`canonpath()\*(C'\fR on Win32 now collapses \fIfoo\e..\fR sections correctly.
.IP "\(bu" 4
Improved behaviour on Symbian \s-1OS.\s0
.IP "\(bu" 4
Enhanced documentation and typo fixes
.IP "\(bu" 4
Internal cleanup
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Data::Dumper\*(C'\fR upgraded to version 2.121_08
.RS 4
.IP "\(bu" 4
A problem where \f(CW\*(C`Data::Dumper\*(C'\fR would sometimes update the iterator state
of hashes has been fixed
.IP "\(bu" 4
Numeric labels now work
.IP "\(bu" 4
Internal cleanup
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`DB\*(C'\fR upgraded to version 1.01
.RS 4
.IP "\(bu" 4
A problem where the state of the regexp engine would sometimes get clobbered when running
under the debugger has been fixed.
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`DB_File\*(C'\fR upgraded to version 1.814
.RS 4
.IP "\(bu" 4
Adds support for Berkeley \s-1DB 4.4.\s0
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Devel::DProf\*(C'\fR upgraded to version 20050603.00
.RS 4
.IP "\(bu" 4
Internal cleanup
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Devel::Peek\*(C'\fR upgraded to version 1.03
.RS 4
.IP "\(bu" 4
Internal cleanup
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Devel::PPPort\*(C'\fR upgraded to version 3.06_01
.RS 4
.IP "\(bu" 4
\&\f(CW\*(C`\-\-compat\-version\*(C'\fR argument checking has been improved
.IP "\(bu" 4
Files passed on the command line are filtered by default
.IP "\(bu" 4
\&\f(CW\*(C`\-\-nofilter\*(C'\fR option to override the filtering has been added
.IP "\(bu" 4
Enhanced documentation
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`diagnostics\*(C'\fR upgraded to version 1.15
.RS 4
.IP "\(bu" 4
Documentation typo fix
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Digest\*(C'\fR upgraded to version 1.14
.RS 4
.IP "\(bu" 4
The constructor now knows which module implements \s-1SHA\-224\s0
.IP "\(bu" 4
Documentation tweaks and typo fixes
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Digest::MD5\*(C'\fR upgraded to version 2.36
.RS 4
.IP "\(bu" 4
\&\f(CW\*(C`XSLoader\*(C'\fR is now used for faster loading
.IP "\(bu" 4
Enhanced documentation including \s-1MD5\s0 weaknesses discovered lately
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Dumpvalue\*(C'\fR upgraded to version 1.12
.RS 4
.IP "\(bu" 4
Documentation fix
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`DynaLoader\*(C'\fR upgraded but unfortunately we're not able to increment its version number :\-(
.RS 4
.IP "\(bu" 4
Implements \f(CW\*(C`dl_unload_file\*(C'\fR on Win32
.IP "\(bu" 4
Internal cleanup
.IP "\(bu" 4
\&\f(CW\*(C`XSLoader\*(C'\fR 0.06 incorporated; small optimisation for calling
\&\f(CW\*(C`bootstrap_inherit()\*(C'\fR and documentation enhancements.
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Encode\*(C'\fR upgraded to version 2.12
.RS 4
.IP "\(bu" 4
A coderef is now acceptable for \f(CW\*(C`CHECK\*(C'\fR!
.IP "\(bu" 4
3 new characters added to the \s-1ISO\-8859\-7\s0 encoding
.IP "\(bu" 4
New encoding \f(CW\*(C`MIME\-Header\-ISO_2022_JP\*(C'\fR added
.IP "\(bu" 4
Problem with partial characters and \f(CW\*(C`encoding(utf\-8\-strict)\*(C'\fR fixed.
.IP "\(bu" 4
Documentation enhancements and typo fixes
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`English\*(C'\fR upgraded to version 1.02
.RS 4
.IP "\(bu" 4
the \f(CW$COMPILING\fR variable has been added
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`ExtUtils::Constant\*(C'\fR upgraded to version 0.17
.RS 4
.IP "\(bu" 4
Improved compatibility with older versions of perl
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`ExtUtils::MakeMaker\*(C'\fR upgraded to version 6.30 (was 6.17)
.RS 4
.IP "\(bu" 4
Too much to list here;  see <http://search.cpan.org/dist/ExtUtils\-MakeMaker/Changes>
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`File::Basename\*(C'\fR upgraded to version 2.74, with changes contributed by Michael Schwern.
.RS 4
.IP "\(bu" 4
Documentation clarified and errors corrected.
.IP "\(bu" 4
\&\f(CW\*(C`basename\*(C'\fR now strips trailing path separators before processing the name.
.IP "\(bu" 4
\&\f(CW\*(C`basename\*(C'\fR now returns \f(CW\*(C`/\*(C'\fR for parameter \f(CW\*(C`/\*(C'\fR, to make \f(CW\*(C`basename\*(C'\fR
consistent with the shell utility of the same name.
.IP "\(bu" 4
The suffix is no longer stripped if it is identical to the remaining characters
in the name, again for consistency with the shell utility.
.IP "\(bu" 4
Some internal code cleanup.
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`File::Copy\*(C'\fR upgraded to version 2.09
.RS 4
.IP "\(bu" 4
Copying a file onto itself used to fail.
.IP "\(bu" 4
Moving a file between file systems now preserves the access and
modification time stamps
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`File::Find\*(C'\fR upgraded to version 1.10
.RS 4
.IP "\(bu" 4
Win32 portability fixes
.IP "\(bu" 4
Enhanced documentation
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`File::Glob\*(C'\fR upgraded to version 1.05
.RS 4
.IP "\(bu" 4
Internal cleanup
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`File::Path\*(C'\fR upgraded to version 1.08
.RS 4
.IP "\(bu" 4
\&\f(CW\*(C`mkpath\*(C'\fR now preserves \f(CW\*(C`errno\*(C'\fR when \f(CW\*(C`mkdir\*(C'\fR fails
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`File::Spec\*(C'\fR upgraded to version 3.12
.RS 4
.IP "\(bu" 4
\&\f(CW\*(C`File::Spec\-\*(C'\fR\fIrootdir()\fR> now returns \f(CW\*(C`\e\*(C'\fR on Win32, instead of \f(CW\*(C`/\*(C'\fR
.IP "\(bu" 4
\&\f(CW$^O\fR could sometimes become tainted. This has been fixed.
.IP "\(bu" 4
\&\f(CW\*(C`canonpath\*(C'\fR on Win32 now collapses \f(CW\*(C`foo/..\*(C'\fR (or \f(CW\*(C`foo\e..\*(C'\fR) sections
correctly, rather than doing the \*(L"misguided\*(R" work it was previously doing.
Note that \f(CW\*(C`canonpath\*(C'\fR on Unix still does \fBnot\fR collapse these sections, as
doing so would be incorrect.
.IP "\(bu" 4
Some documentation improvements
.IP "\(bu" 4
Some internal code cleanup
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`FileCache\*(C'\fR upgraded to version 1.06
.RS 4
.IP "\(bu" 4
\&\s-1POD\s0 formatting errors in the documentation fixed
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Filter::Simple\*(C'\fR upgraded to version 0.82
.IP "\(bu" 4
\&\f(CW\*(C`FindBin\*(C'\fR upgraded to version 1.47
.RS 4
.IP "\(bu" 4
Now works better with directories where access rights are more
restrictive than usual.
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`GDBM_File\*(C'\fR upgraded to version 1.08
.RS 4
.IP "\(bu" 4
Internal cleanup
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Getopt::Long\*(C'\fR upgraded to version 2.35
.RS 4
.IP "\(bu" 4
\&\f(CW\*(C`prefix_pattern\*(C'\fR has now been complemented by a new configuration
option \f(CW\*(C`long_prefix_pattern\*(C'\fR that allows the user to specify what
prefix patterns should have long option style semantics applied.
.IP "\(bu" 4
Options can now take multiple values at once (experimental)
.IP "\(bu" 4
Various bug fixes
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`if\*(C'\fR upgraded to version 0.05
.RS 4
.IP "\(bu" 4
Give more meaningful error messages from \f(CW\*(C`if\*(C'\fR when invoked with a
condition in list context.
.IP "\(bu" 4
Restore backwards compatibility with earlier versions of perl
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`IO\*(C'\fR upgraded to version 1.22
.RS 4
.IP "\(bu" 4
Enhanced documentation
.IP "\(bu" 4
Internal cleanup
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`IPC::Open2\*(C'\fR upgraded to version 1.02
.RS 4
.IP "\(bu" 4
Enhanced documentation
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`IPC::Open3\*(C'\fR upgraded to version 1.02
.RS 4
.IP "\(bu" 4
Enhanced documentation
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`List::Util\*(C'\fR upgraded to version 1.18 (was 1.14)
.RS 4
.IP "\(bu" 4
Fix pure-perl version of \f(CW\*(C`refaddr\*(C'\fR to avoid blessing an un-blessed reference
.IP "\(bu" 4
Use \f(CW\*(C`XSLoader\*(C'\fR for faster loading
.IP "\(bu" 4
Fixed various memory leaks
.IP "\(bu" 4
Internal cleanup and portability fixes
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Math::Complex\*(C'\fR upgraded to version 1.35
.RS 4
.IP "\(bu" 4
\&\f(CW\*(C`atan2(0, i)\*(C'\fR now works, as do all the (computable) complex argument cases
.IP "\(bu" 4
Fixes for certain bugs in \f(CW\*(C`make\*(C'\fR and \f(CW\*(C`emake\*(C'\fR
.IP "\(bu" 4
Support returning the \fIk\fRth root directly
.IP "\(bu" 4
Support \f(CW\*(C`[2,\-3pi/8]\*(C'\fR in \f(CW\*(C`emake\*(C'\fR
.IP "\(bu" 4
Support \f(CW\*(C`inf\*(C'\fR for \f(CW\*(C`make\*(C'\fR/\f(CW\*(C`emake\*(C'\fR
.IP "\(bu" 4
Document \f(CW\*(C`make\*(C'\fR/\f(CW\*(C`emake\*(C'\fR more visibly
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Math::Trig\*(C'\fR upgraded to version 1.03
.RS 4
.IP "\(bu" 4
Add more great circle routines: \f(CW\*(C`great_circle_waypoint\*(C'\fR and
\&\f(CW\*(C`great_circle_destination\*(C'\fR
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`MIME::Base64\*(C'\fR upgraded to version 3.07
.RS 4
.IP "\(bu" 4
Use \f(CW\*(C`XSLoader\*(C'\fR for faster loading
.IP "\(bu" 4
Enhanced documentation
.IP "\(bu" 4
Internal cleanup
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`NDBM_File\*(C'\fR upgraded to version 1.06
.RS 4
.IP "\(bu" 4
Enhanced documentation
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`ODBM_File\*(C'\fR upgraded to version 1.06
.RS 4
.IP "\(bu" 4
Documentation typo fixed
.IP "\(bu" 4
Internal cleanup
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Opcode\*(C'\fR upgraded to version 1.06
.RS 4
.IP "\(bu" 4
Enhanced documentation
.IP "\(bu" 4
Internal cleanup
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`open\*(C'\fR upgraded to version 1.05
.RS 4
.IP "\(bu" 4
Enhanced documentation
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`overload\*(C'\fR upgraded to version 1.04
.RS 4
.IP "\(bu" 4
Enhanced documentation
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`PerlIO\*(C'\fR upgraded to version 1.04
.RS 4
.IP "\(bu" 4
\&\f(CW\*(C`PerlIO::via\*(C'\fR iterate over layers properly now
.IP "\(bu" 4
\&\f(CW\*(C`PerlIO::scalar\*(C'\fR understands \f(CW\*(C`$/ = ""\*(C'\fR now
.IP "\(bu" 4
\&\f(CW\*(C`encoding(utf\-8\-strict)\*(C'\fR with partial characters now works
.IP "\(bu" 4
Enhanced documentation
.IP "\(bu" 4
Internal cleanup
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Pod::Functions\*(C'\fR upgraded to version 1.03
.RS 4
.IP "\(bu" 4
Documentation typos fixed
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Pod::Html\*(C'\fR upgraded to version 1.0504
.RS 4
.IP "\(bu" 4
\&\s-1HTML\s0 output will now correctly link
to \f(CW\*(C`=item\*(C'\fRs on the same page, and should be valid \s-1XHTML.\s0
.IP "\(bu" 4
Variable names are recognized as intended
.IP "\(bu" 4
Documentation typos fixed
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Pod::Parser\*(C'\fR upgraded to version 1.32
.RS 4
.IP "\(bu" 4
Allow files that start with \f(CW\*(C`=head\*(C'\fR on the first line
.IP "\(bu" 4
Win32 portability fix
.IP "\(bu" 4
Exit status of \f(CW\*(C`pod2usage\*(C'\fR fixed
.IP "\(bu" 4
New \f(CW\*(C`\-noperldoc\*(C'\fR switch for \f(CW\*(C`pod2usage\*(C'\fR
.IP "\(bu" 4
Arbitrary \s-1URL\s0 schemes now allowed
.IP "\(bu" 4
Documentation typos fixed
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`POSIX\*(C'\fR upgraded to version 1.09
.RS 4
.IP "\(bu" 4
Documentation typos fixed
.IP "\(bu" 4
Internal cleanup
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`re\*(C'\fR upgraded to version 0.05
.RS 4
.IP "\(bu" 4
Documentation typo fixed
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Safe\*(C'\fR upgraded to version 2.12
.RS 4
.IP "\(bu" 4
Minor documentation enhancement
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`SDBM_File\*(C'\fR upgraded to version 1.05
.RS 4
.IP "\(bu" 4
Documentation typo fixed
.IP "\(bu" 4
Internal cleanup
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Socket\*(C'\fR upgraded to version 1.78
.RS 4
.IP "\(bu" 4
Internal cleanup
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Storable\*(C'\fR upgraded to version 2.15
.RS 4
.IP "\(bu" 4
This includes the \f(CW\*(C`STORABLE_attach\*(C'\fR hook functionality added by
Adam Kennedy, and more frugal memory requirements when storing under \f(CW\*(C`ithreads\*(C'\fR, by
using the \f(CW\*(C`ithreads\*(C'\fR cloning tracking code.
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Switch\*(C'\fR upgraded to version 2.10_01
.RS 4
.IP "\(bu" 4
Documentation typos fixed
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Sys::Syslog\*(C'\fR upgraded to version 0.13
.RS 4
.IP "\(bu" 4
Now provides numeric macros and meaningful \f(CW\*(C`Exporter\*(C'\fR tags.
.IP "\(bu" 4
No longer uses \f(CW\*(C`Sys::Hostname\*(C'\fR as it may provide useless values in
unconfigured network environments, so instead uses \f(CW\*(C`INADDR_LOOPBACK\*(C'\fR directly.
.IP "\(bu" 4
\&\f(CW\*(C`syslog()\*(C'\fR now uses local timestamp.
.IP "\(bu" 4
\&\f(CW\*(C`setlogmask()\*(C'\fR now behaves like its C counterpart.
.IP "\(bu" 4
\&\f(CW\*(C`setlogsock()\*(C'\fR will now \f(CW\*(C`croak()\*(C'\fR as documented.
.IP "\(bu" 4
Improved error and warnings messages.
.IP "\(bu" 4
Improved documentation.
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Term::ANSIColor\*(C'\fR upgraded to version 1.10
.RS 4
.IP "\(bu" 4
Fixes a bug in \f(CW\*(C`colored\*(C'\fR when \f(CW$EACHLINE\fR is set that caused it to not color
lines consisting solely of 0 (literal zero).
.IP "\(bu" 4
Improved tests.
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Term::ReadLine\*(C'\fR upgraded to version 1.02
.RS 4
.IP "\(bu" 4
Documentation tweaks
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Test::Harness\*(C'\fR upgraded to version 2.56 (was 2.48)
.RS 4
.IP "\(bu" 4
The \f(CW\*(C`Test::Harness\*(C'\fR timer is now off by default.
.IP "\(bu" 4
Now shows elapsed time in milliseconds.
.IP "\(bu" 4
Various bug fixes
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Test::Simple\*(C'\fR upgraded to version 0.62 (was 0.54)
.RS 4
.IP "\(bu" 4
\&\f(CW\*(C`is_deeply()\*(C'\fR no longer fails to work for many cases
.IP "\(bu" 4
Various minor bug fixes
.IP "\(bu" 4
Documentation enhancements
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Text::Tabs\*(C'\fR upgraded to version 2005.0824
.RS 4
.IP "\(bu" 4
Provides a faster implementation of \f(CW\*(C`expand\*(C'\fR
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Text::Wrap\*(C'\fR upgraded to version 2005.082401
.RS 4
.IP "\(bu" 4
Adds \f(CW$Text::Wrap::separator2\fR, which allows you to preserve existing newlines
but add line-breaks with some other string.
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`threads\*(C'\fR upgraded to version 1.07
.RS 4
.IP "\(bu" 4
\&\f(CW\*(C`threads\*(C'\fR will now honour \f(CW\*(C`no warnings \*(Aqthreads\*(Aq\*(C'\fR
.IP "\(bu" 4
A thread's interpreter is now freed after \f(CW\*(C`$t\->join()\*(C'\fR rather than after
\&\f(CW\*(C`undef $t\*(C'\fR, which should fix some \f(CW\*(C`ithreads\*(C'\fR memory leaks. (Fixed by Dave
Mitchell)
.IP "\(bu" 4
Some documentation typo fixes.
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`threads::shared\*(C'\fR upgraded to version 0.94
.RS 4
.IP "\(bu" 4
Documentation changes only
.IP "\(bu" 4
Note: An improved implementation of \f(CW\*(C`threads::shared\*(C'\fR is available on
\&\s-1CPAN \-\s0 this will be merged into 5.8.9 if it proves stable.
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Tie::Hash\*(C'\fR upgraded to version 1.02
.RS 4
.IP "\(bu" 4
Documentation typo fixed
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Time::HiRes\*(C'\fR upgraded to version 1.86 (was 1.66)
.RS 4
.IP "\(bu" 4
\&\f(CW\*(C`clock_nanosleep()\*(C'\fR and \f(CW\*(C`clock()\*(C'\fR functions added
.IP "\(bu" 4
Support for the \s-1POSIX \s0\f(CW\*(C`clock_gettime()\*(C'\fR and \f(CW\*(C`clock_getres()\*(C'\fR has been added
.IP "\(bu" 4
Return \f(CW\*(C`undef\*(C'\fR or an empty list if the C \f(CW\*(C`gettimeofday()\*(C'\fR function fails
.IP "\(bu" 4
Improved \f(CW\*(C`nanosleep\*(C'\fR detection
.IP "\(bu" 4
Internal cleanup
.IP "\(bu" 4
Enhanced documentation
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Unicode::Collate\*(C'\fR upgraded to version 0.52
.RS 4
.IP "\(bu" 4
Now implements \s-1UCA\s0 Revision 14 (based on Unicode 4.1.0).
.IP "\(bu" 4
\&\f(CW\*(C`Unicode::Collate\-\*(C'\fRnew> method no longer overwrites user's \f(CW$_\fR
.IP "\(bu" 4
Enhanced documentation
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Unicode::UCD\*(C'\fR upgraded to version 0.24
.RS 4
.IP "\(bu" 4
Documentation typos fixed
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`User::grent\*(C'\fR upgraded to version 1.01
.RS 4
.IP "\(bu" 4
Documentation typo fixed
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`utf8\*(C'\fR upgraded to version 1.06
.RS 4
.IP "\(bu" 4
Documentation typos fixed
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`vmsish\*(C'\fR upgraded to version 1.02
.RS 4
.IP "\(bu" 4
Documentation typos fixed
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`warnings\*(C'\fR upgraded to version 1.05
.RS 4
.IP "\(bu" 4
Gentler messing with \f(CW\*(C`Carp::\*(C'\fR internals
.IP "\(bu" 4
Internal cleanup
.IP "\(bu" 4
Documentation update
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Win32\*(C'\fR upgraded to version 0.2601
.RS 4
.IP "\(bu" 4
Provides Windows Vista support to \f(CW\*(C`Win32::GetOSName\*(C'\fR
.IP "\(bu" 4
Documentation enhancements
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`XS::Typemap\*(C'\fR upgraded to version 0.02
.RS 4
.IP "\(bu" 4
Internal cleanup
.RE
.RS 4
.RE
.SH "Utility Changes"
.IX Header "Utility Changes"
.ie n .SS """h2xs"" enhancements"
.el .SS "\f(CWh2xs\fP enhancements"
.IX Subsection "h2xs enhancements"
\&\f(CW\*(C`h2xs\*(C'\fR implements new option \f(CW\*(C`\-\-use\-xsloader\*(C'\fR to force use of
\&\f(CW\*(C`XSLoader\*(C'\fR even in backwards compatible modules.
.PP
The handling of authors' names that had apostrophes has been fixed.
.PP
Any enums with negative values are now skipped.
.ie n .SS """perlivp"" enhancements"
.el .SS "\f(CWperlivp\fP enhancements"
.IX Subsection "perlivp enhancements"
\&\f(CW\*(C`perlivp\*(C'\fR implements new option \f(CW\*(C`\-a\*(C'\fR and will not check for \fI*.ph\fR
files by default any more.  Use the \f(CW\*(C`\-a\*(C'\fR option to run \fIall\fR tests.
.SH "New Documentation"
.IX Header "New Documentation"
The perlglossary manpage is a glossary of terms used in the Perl
documentation, technical and otherwise, kindly provided by O'Reilly Media,
inc.
.SH "Performance Enhancements"
.IX Header "Performance Enhancements"
.IP "\(bu" 4
Weak reference creation is now \fIO(1)\fR rather than \fIO(n)\fR, courtesy of
Nicholas Clark. Weak reference deletion remains \fIO(n)\fR, but if deletion only
happens at program exit, it may be skipped completely.
.IP "\(bu" 4
Salvador Fandin\*~o provided improvements to reduce the memory usage of \f(CW\*(C`sort\*(C'\fR
and to speed up some cases.
.IP "\(bu" 4
Jarkko Hietaniemi and Andy Lester worked to mark as much data as possible in
the C source files as \f(CW\*(C`static\*(C'\fR, to increase the proportion of the executable
file that the operating system can share between process, and thus reduce
real memory usage on multi-user systems.
.SH "Installation and Configuration Improvements"
.IX Header "Installation and Configuration Improvements"
Parallel makes should work properly now, although there may still be problems
if \f(CW\*(C`make test\*(C'\fR is instructed to run in parallel.
.PP
Building with Borland's compilers on Win32 should work more smoothly. In
particular Steve Hay has worked to side step many warnings emitted by their
compilers and at least one C compiler internal error.
.PP
\&\f(CW\*(C`Configure\*(C'\fR will now detect \f(CW\*(C`clearenv\*(C'\fR and \f(CW\*(C`unsetenv\*(C'\fR, thanks to a patch
from Alan Burlison. It will also probe for \f(CW\*(C`futimes\*(C'\fR and whether \f(CW\*(C`sprintf\*(C'\fR
correctly returns the length of the formatted string, which will both be used
in perl 5.8.9.
.PP
There are improved hints for next\-3.0, vmesa, \s-1IX,\s0 Darwin, Solaris, Linux,
\&\s-1DEC/OSF,\s0 HP-UX and MPE/iX
.PP
Perl extensions on Windows now can be statically built into the Perl \s-1DLL,\s0
thanks to a work by Vadim Konovalov. (This improvement was actually in 5.8.7,
but was accidentally omitted from perl587delta).
.SH "Selected Bug Fixes"
.IX Header "Selected Bug Fixes"
.SS "no warnings 'category' works correctly with \-w"
.IX Subsection "no warnings 'category' works correctly with -w"
Previously when running with warnings enabled globally via \f(CW\*(C`\-w\*(C'\fR, selective
disabling of specific warning categories would actually turn off all warnings.
This is now fixed; now \f(CW\*(C`no warnings \*(Aqio\*(Aq;\*(C'\fR will only turn off warnings in the
\&\f(CW\*(C`io\*(C'\fR class. Previously it would erroneously turn off all warnings.
.PP
This bug fix may cause some programs to start correctly issuing warnings.
.SS "Remove over-optimisation"
.IX Subsection "Remove over-optimisation"
Perl 5.8.4 introduced a change so that assignments of \f(CW\*(C`undef\*(C'\fR to a
scalar, or of an empty list to an array or a hash, were optimised away. As
this could cause problems when \f(CW\*(C`goto\*(C'\fR jumps were involved, this change
has been backed out.
.SS "\fIsprintf()\fP fixes"
.IX Subsection "sprintf() fixes"
Using the \fIsprintf()\fR function with some formats could lead to a buffer
overflow in some specific cases. This has been fixed, along with several
other bugs, notably in bounds checking.
.PP
In related fixes, it was possible for badly written code that did not follow
the documentation of \f(CW\*(C`Sys::Syslog\*(C'\fR to have formatting vulnerabilities.
\&\f(CW\*(C`Sys::Syslog\*(C'\fR has been changed to protect people from poor quality third
party code.
.SS "Debugger and Unicode slowdown"
.IX Subsection "Debugger and Unicode slowdown"
It had been reported that running under perl's debugger when processing
Unicode data could cause unexpectedly large slowdowns. The most likely cause
of this was identified and fixed by Nicholas Clark.
.SS "Smaller fixes"
.IX Subsection "Smaller fixes"
.IP "\(bu" 4
\&\f(CW\*(C`FindBin\*(C'\fR now works better with directories where access rights are more
restrictive than usual.
.IP "\(bu" 4
Several memory leaks in ithreads were closed. An improved implementation of
\&\f(CW\*(C`threads::shared\*(C'\fR is available on \s-1CPAN \-\s0 this will be merged into 5.8.9 if
it proves stable.
.IP "\(bu" 4
Trailing spaces are now trimmed from \f(CW$!\fR and \f(CW$^E\fR.
.IP "\(bu" 4
Operations that require perl to read a process's list of groups, such as reads
of \f(CW$(\fR and \f(CW$)\fR, now dynamically allocate memory rather than using a
fixed sized array. The fixed size array could cause C stack exhaustion on
systems configured to use large numbers of groups.
.IP "\(bu" 4
\&\f(CW\*(C`PerlIO::scalar\*(C'\fR now works better with non-default \f(CW$/\fR settings.
.IP "\(bu" 4
You can now use the \f(CW\*(C`x\*(C'\fR operator to repeat a \f(CW\*(C`qw//\*(C'\fR list. This used
to raise a syntax error.
.IP "\(bu" 4
The debugger now traces correctly execution in eval("")uated code that
contains #line directives.
.IP "\(bu" 4
The value of the \f(CW\*(C`open\*(C'\fR pragma is no longer ignored for three-argument
opens.
.IP "\(bu" 4
The optimisation of \f(CW\*(C`for (reverse @a)\*(C'\fR introduced in perl 5.8.6 could
misbehave when the array had undefined elements and was used in \s-1LVALUE\s0
context. Dave Mitchell provided a fix.
.IP "\(bu" 4
Some case insensitive matches between \s-1UTF\-8\s0 encoded data and 8 bit regexps,
and vice versa, could give malformed character warnings. These have been
fixed by Dave Mitchell and Yves Orton.
.IP "\(bu" 4
\&\f(CW\*(C`lcfirst\*(C'\fR and \f(CW\*(C`ucfirst\*(C'\fR could corrupt the string for certain cases where
the length \s-1UTF\-8\s0 encoding of the string in lower case, upper case or title
case differed. This was fixed by Nicholas Clark.
.IP "\(bu" 4
Perl will now use the C library calls \f(CW\*(C`unsetenv\*(C'\fR and \f(CW\*(C`clearenv\*(C'\fR if present
to delete keys from \f(CW%ENV\fR and delete \f(CW%ENV\fR entirely, thanks to a patch
from Alan Burlison.
.SH "New or Changed Diagnostics"
.IX Header "New or Changed Diagnostics"
.SS "Attempt to set length of freed array"
.IX Subsection "Attempt to set length of freed array"
This is a new warning, produced in situations such as this:
.PP
.Vb 2
\&    $r = do {my @a; \e$#a};
\&    $$r = 503;
.Ve
.SS "Non-string passed as bitmask"
.IX Subsection "Non-string passed as bitmask"
This is a new warning, produced when number has been passed as a argument to
\&\fIselect()\fR, instead of a bitmask.
.PP
.Vb 3
\&    # Wrong, will now warn
\&    $rin = fileno(STDIN);
\&    ($nfound,$timeleft) = select($rout=$rin, undef, undef, $timeout);
\&    
\&    # Should be
\&    $rin = \*(Aq\*(Aq;
\&    vec($rin,fileno(STDIN),1) = 1;
\&    ($nfound,$timeleft) = select($rout=$rin, undef, undef, $timeout);
.Ve
.SS "Search pattern not terminated or ternary operator parsed as search pattern"
.IX Subsection "Search pattern not terminated or ternary operator parsed as search pattern"
This syntax error indicates that the lexer couldn't find the final
delimiter of a \f(CW\*(C`?PATTERN?\*(C'\fR construct. Mentioning the ternary operator in
this error message makes it easier to diagnose syntax errors.
.SH "Changed Internals"
.IX Header "Changed Internals"
There has been a fair amount of refactoring of the \f(CW\*(C`C\*(C'\fR source code, partly to
make it tidier and more maintainable. The resulting object code and the
\&\f(CW\*(C`perl\*(C'\fR binary may well be smaller than 5.8.7, in particular due to a change
contributed by Dave Mitchell which reworked the warnings code to be
significantly smaller. Apart from being smaller and possibly faster, there
should be no user-detectable changes.
.PP
Andy Lester supplied many improvements to determine which function
parameters and local variables could actually be declared \f(CW\*(C`const\*(C'\fR to the C
compiler. Steve Peters provided new \f(CW*_set\fR macros and reworked the core to
use these rather than assigning to macros in \s-1LVALUE\s0 context.
.PP
Dave Mitchell improved the lexer debugging output under \f(CW\*(C`\-DT\*(C'\fR
.PP
Nicholas Clark changed the string buffer allocation so that it is now rounded
up to the next multiple of 4 (or 8 on platforms with 64 bit pointers). This
should reduce the number of calls to \f(CW\*(C`realloc\*(C'\fR without actually using any
extra memory.
.PP
The \f(CW\*(C`HV\*(C'\fR's array of \f(CW\*(C`HE*\*(C'\fRs is now allocated at the correct (minimal) size,
thanks to another change by Nicholas Clark. Compile with
\&\f(CW\*(C`\-DPERL_USE_LARGE_HV_ALLOC\*(C'\fR to use the old, sloppier, default.
.PP
For \s-1XS\s0 or embedding debugging purposes, if perl is compiled with
\&\f(CW\*(C`\-DDEBUG_LEAKING_SCALARS_FORK_DUMP\*(C'\fR in addition to
\&\f(CW\*(C`\-DDEBUG_LEAKING_SCALARS\*(C'\fR then a child process is \f(CW\*(C`fork\*(C'\fRed just before
global destruction, which is used to display the values of any scalars
found to have leaked at the end of global destruction. Without this, the
scalars have already been freed sufficiently at the point of detection that
it is impossible to produce any meaningful dump of their contents.  This
feature was implemented by the indefatigable Nicholas Clark, based on an idea
by Mike Giroux.
.SH "Platform Specific Problems"
.IX Header "Platform Specific Problems"
The optimiser on HP-UX 11.23 (Itanium 2) is currently partly disabled (scaled
down to +O1) when using \s-1HP\s0 C\-ANSI-C; the cause of problems at higher
optimisation levels is still unclear.
.PP
There are a handful of remaining test failures on \s-1VMS,\s0 mostly due to
test fixes and minor module tweaks with too many dependencies to
integrate into this release from the development stream, where they have
all been corrected.  The following is a list of expected failures with
the patch number of the fix where that is known:
.PP
.Vb 6
\&    ext/Devel/PPPort/t/ppphtest.t  #26913
\&    ext/List/Util/t/p_tainted.t    #26912
\&    lib/ExtUtils/t/PL_FILES.t      #26813
\&    lib/ExtUtils/t/basic.t         #26813
\&    t/io/fs.t
\&    t/op/cmp.t
.Ve
.SH "Reporting Bugs"
.IX Header "Reporting Bugs"
If you find what you think is a bug, you might check the articles
recently posted to the comp.lang.perl.misc newsgroup and the perl
bug database at http://bugs.perl.org.  There may also be
information at http://www.perl.org, the Perl Home Page.
.PP
If you believe you have an unreported bug, please run the \fBperlbug\fR
program included with your release.  Be sure to trim your bug down
to a tiny but sufficient test case.  Your bug report, along with the
output of \f(CW\*(C`perl \-V\*(C'\fR, will be sent off to perlbug@perl.org to be
analysed by the Perl porting team.  You can browse and search
the Perl 5 bugs at http://bugs.perl.org/
.SH "SEE ALSO"
.IX Header "SEE ALSO"
The \fIChanges\fR file for exhaustive details on what changed.
.PP
The \fI\s-1INSTALL\s0\fR file for how to build Perl.
.PP
The \fI\s-1README\s0\fR file for general stuff.
.PP
The \fIArtistic\fR and \fICopying\fR files for copyright information.
                                                                                                                                                                                                                                                                                                                   osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perl588delta5.16.1                           0100644 0001750 0001750 00000105063 12566207414 023477  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERL588DELTA 1"
.TH PERL588DELTA 1 "2013-03-04" "perl v5.16.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perl588delta \- what is new for perl v5.8.8
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document describes differences between the 5.8.7 release and
the 5.8.8 release.
.SH "Incompatible Changes"
.IX Header "Incompatible Changes"
There are no changes intentionally incompatible with 5.8.7. If any exist,
they are bugs and reports are welcome.
.SH "Core Enhancements"
.IX Header "Core Enhancements"
.IP "\(bu" 4
\&\f(CW\*(C`chdir\*(C'\fR, \f(CW\*(C`chmod\*(C'\fR and \f(CW\*(C`chown\*(C'\fR can now work on filehandles as well as
filenames, if the system supports respectively \f(CW\*(C`fchdir\*(C'\fR, \f(CW\*(C`fchmod\*(C'\fR and
\&\f(CW\*(C`fchown\*(C'\fR, thanks to a patch provided by Gisle Aas.
.SH "Modules and Pragmata"
.IX Header "Modules and Pragmata"
.IP "\(bu" 4
\&\f(CW\*(C`Attribute::Handlers\*(C'\fR upgraded to version 0.78_02
.RS 4
.IP "\(bu" 4
Documentation typo fix
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`attrs\*(C'\fR upgraded to version 1.02
.RS 4
.IP "\(bu" 4
Internal cleanup only
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`autouse\*(C'\fR upgraded to version 1.05
.RS 4
.IP "\(bu" 4
Simplified implementation
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`B\*(C'\fR upgraded to version 1.09_01
.RS 4
.IP "\(bu" 4
The inheritance hierarchy of the \f(CW\*(C`B::\*(C'\fR modules has been corrected;
\&\f(CW\*(C`B::NV\*(C'\fR now inherits from \f(CW\*(C`B::SV\*(C'\fR (instead of \f(CW\*(C`B::IV\*(C'\fR).
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`blib\*(C'\fR upgraded to version 1.03
.RS 4
.IP "\(bu" 4
Documentation typo fix
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`ByteLoader\*(C'\fR upgraded to version 0.06
.RS 4
.IP "\(bu" 4
Internal cleanup
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`CGI\*(C'\fR upgraded to version 3.15
.RS 4
.IP "\(bu" 4
Extraneous \*(L"?\*(R" from \f(CW\*(C`self_url()\*(C'\fR removed
.IP "\(bu" 4
\&\f(CW\*(C`scrolling_list()\*(C'\fR select attribute fixed
.IP "\(bu" 4
\&\f(CW\*(C`virtual_port\*(C'\fR now works properly with the https protocol
.IP "\(bu" 4
\&\f(CW\*(C`upload_hook()\*(C'\fR and \f(CW\*(C`append()\*(C'\fR now works in function-oriented mode
.IP "\(bu" 4
\&\f(CW\*(C`POST_MAX\*(C'\fR doesn't cause the client to hang any more
.IP "\(bu" 4
Automatic tab indexes are now disabled and new \f(CW\*(C`\-tabindex\*(C'\fR pragma has
been added to turn automatic indexes back on
.IP "\(bu" 4
\&\f(CW\*(C`end_form()\*(C'\fR doesn't emit empty (and non-validating) \f(CW\*(C`<div>\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`CGI::Carp\*(C'\fR works better in certain mod_perl configurations
.IP "\(bu" 4
Setting \f(CW$CGI::TMPDIRECTORY\fR is now effective
.IP "\(bu" 4
Enhanced documentation
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`charnames\*(C'\fR upgraded to version 1.05
.RS 4
.IP "\(bu" 4
\&\f(CW\*(C`viacode()\*(C'\fR now accept hex strings and has been optimized.
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`CPAN\*(C'\fR upgraded to version 1.76_02
.RS 4
.IP "\(bu" 4
1 minor bug fix for Win32
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Cwd\*(C'\fR upgraded to version 3.12
.RS 4
.IP "\(bu" 4
\&\f(CW\*(C`canonpath()\*(C'\fR on Win32 now collapses \fIfoo\e..\fR sections correctly.
.IP "\(bu" 4
Improved behaviour on Symbian \s-1OS\s0.
.IP "\(bu" 4
Enhanced documentation and typo fixes
.IP "\(bu" 4
Internal cleanup
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Data::Dumper\*(C'\fR upgraded to version 2.121_08
.RS 4
.IP "\(bu" 4
A problem where \f(CW\*(C`Data::Dumper\*(C'\fR would sometimes update the iterator state
of hashes has been fixed
.IP "\(bu" 4
Numeric labels now work
.IP "\(bu" 4
Internal cleanup
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`DB\*(C'\fR upgraded to version 1.01
.RS 4
.IP "\(bu" 4
A problem where the state of the regexp engine would sometimes get clobbered when running
under the debugger has been fixed.
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`DB_File\*(C'\fR upgraded to version 1.814
.RS 4
.IP "\(bu" 4
Adds support for Berkeley \s-1DB\s0 4.4.
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Devel::DProf\*(C'\fR upgraded to version 20050603.00
.RS 4
.IP "\(bu" 4
Internal cleanup
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Devel::Peek\*(C'\fR upgraded to version 1.03
.RS 4
.IP "\(bu" 4
Internal cleanup
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Devel::PPPort\*(C'\fR upgraded to version 3.06_01
.RS 4
.IP "\(bu" 4
\&\f(CW\*(C`\-\-compat\-version\*(C'\fR argument checking has been improved
.IP "\(bu" 4
Files passed on the command line are filtered by default
.IP "\(bu" 4
\&\f(CW\*(C`\-\-nofilter\*(C'\fR option to override the filtering has been added
.IP "\(bu" 4
Enhanced documentation
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`diagnostics\*(C'\fR upgraded to version 1.15
.RS 4
.IP "\(bu" 4
Documentation typo fix
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Digest\*(C'\fR upgraded to version 1.14
.RS 4
.IP "\(bu" 4
The constructor now knows which module implements \s-1SHA\-224\s0
.IP "\(bu" 4
Documentation tweaks and typo fixes
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Digest::MD5\*(C'\fR upgraded to version 2.36
.RS 4
.IP "\(bu" 4
\&\f(CW\*(C`XSLoader\*(C'\fR is now used for faster loading
.IP "\(bu" 4
Enhanced documentation including \s-1MD5\s0 weaknesses discovered lately
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Dumpvalue\*(C'\fR upgraded to version 1.12
.RS 4
.IP "\(bu" 4
Documentation fix
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`DynaLoader\*(C'\fR upgraded but unfortunately we're not able to increment its version number :\-(
.RS 4
.IP "\(bu" 4
Implements \f(CW\*(C`dl_unload_file\*(C'\fR on Win32
.IP "\(bu" 4
Internal cleanup
.IP "\(bu" 4
\&\f(CW\*(C`XSLoader\*(C'\fR 0.06 incorporated; small optimisation for calling
\&\f(CW\*(C`bootstrap_inherit()\*(C'\fR and documentation enhancements.
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Encode\*(C'\fR upgraded to version 2.12
.RS 4
.IP "\(bu" 4
A coderef is now acceptable for \f(CW\*(C`CHECK\*(C'\fR!
.IP "\(bu" 4
3 new characters added to the \s-1ISO\-8859\-7\s0 encoding
.IP "\(bu" 4
New encoding \f(CW\*(C`MIME\-Header\-ISO_2022_JP\*(C'\fR added
.IP "\(bu" 4
Problem with partial characters and \f(CW\*(C`encoding(utf\-8\-strict)\*(C'\fR fixed.
.IP "\(bu" 4
Documentation enhancements and typo fixes
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`English\*(C'\fR upgraded to version 1.02
.RS 4
.IP "\(bu" 4
the \f(CW$COMPILING\fR variable has been added
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`ExtUtils::Constant\*(C'\fR upgraded to version 0.17
.RS 4
.IP "\(bu" 4
Improved compatibility with older versions of perl
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`ExtUtils::MakeMaker\*(C'\fR upgraded to version 6.30 (was 6.17)
.RS 4
.IP "\(bu" 4
Too much to list here;  see http://search.cpan.org/dist/ExtUtils\-MakeMaker/Changes <http://search.cpan.org/dist/ExtUtils-MakeMaker/Changes>
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`File::Basename\*(C'\fR upgraded to version 2.74, with changes contributed by Michael Schwern.
.RS 4
.IP "\(bu" 4
Documentation clarified and errors corrected.
.IP "\(bu" 4
\&\f(CW\*(C`basename\*(C'\fR now strips trailing path separators before processing the name.
.IP "\(bu" 4
\&\f(CW\*(C`basename\*(C'\fR now returns \f(CW\*(C`/\*(C'\fR for parameter \f(CW\*(C`/\*(C'\fR, to make \f(CW\*(C`basename\*(C'\fR
consistent with the shell utility of the same name.
.IP "\(bu" 4
The suffix is no longer stripped if it is identical to the remaining characters
in the name, again for consistency with the shell utility.
.IP "\(bu" 4
Some internal code cleanup.
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`File::Copy\*(C'\fR upgraded to version 2.09
.RS 4
.IP "\(bu" 4
Copying a file onto itself used to fail.
.IP "\(bu" 4
Moving a file between file systems now preserves the access and
modification time stamps
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`File::Find\*(C'\fR upgraded to version 1.10
.RS 4
.IP "\(bu" 4
Win32 portability fixes
.IP "\(bu" 4
Enhanced documentation
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`File::Glob\*(C'\fR upgraded to version 1.05
.RS 4
.IP "\(bu" 4
Internal cleanup
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`File::Path\*(C'\fR upgraded to version 1.08
.RS 4
.IP "\(bu" 4
\&\f(CW\*(C`mkpath\*(C'\fR now preserves \f(CW\*(C`errno\*(C'\fR when \f(CW\*(C`mkdir\*(C'\fR fails
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`File::Spec\*(C'\fR upgraded to version 3.12
.RS 4
.IP "\(bu" 4
\&\f(CW\*(C`File::Spec\-\*(C'\fR\fIrootdir()\fR> now returns \f(CW\*(C`\e\*(C'\fR on Win32, instead of \f(CW\*(C`/\*(C'\fR
.IP "\(bu" 4
\&\f(CW$^O\fR could sometimes become tainted. This has been fixed.
.IP "\(bu" 4
\&\f(CW\*(C`canonpath\*(C'\fR on Win32 now collapses \f(CW\*(C`foo/..\*(C'\fR (or \f(CW\*(C`foo\e..\*(C'\fR) sections
correctly, rather than doing the \*(L"misguided\*(R" work it was previously doing.
Note that \f(CW\*(C`canonpath\*(C'\fR on Unix still does \fBnot\fR collapse these sections, as
doing so would be incorrect.
.IP "\(bu" 4
Some documentation improvements
.IP "\(bu" 4
Some internal code cleanup
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`FileCache\*(C'\fR upgraded to version 1.06
.RS 4
.IP "\(bu" 4
\&\s-1POD\s0 formatting errors in the documentation fixed
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Filter::Simple\*(C'\fR upgraded to version 0.82
.IP "\(bu" 4
\&\f(CW\*(C`FindBin\*(C'\fR upgraded to version 1.47
.RS 4
.IP "\(bu" 4
Now works better with directories where access rights are more
restrictive than usual.
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`GDBM_File\*(C'\fR upgraded to version 1.08
.RS 4
.IP "\(bu" 4
Internal cleanup
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Getopt::Long\*(C'\fR upgraded to version 2.35
.RS 4
.IP "\(bu" 4
\&\f(CW\*(C`prefix_pattern\*(C'\fR has now been complemented by a new configuration
option \f(CW\*(C`long_prefix_pattern\*(C'\fR that allows the user to specify what
prefix patterns should have long option style semantics applied.
.IP "\(bu" 4
Options can now take multiple values at once (experimental)
.IP "\(bu" 4
Various bug fixes
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`if\*(C'\fR upgraded to version 0.05
.RS 4
.IP "\(bu" 4
Give more meaningful error messages from \f(CW\*(C`if\*(C'\fR when invoked with a
condition in list context.
.IP "\(bu" 4
Restore backwards compatibility with earlier versions of perl
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`IO\*(C'\fR upgraded to version 1.22
.RS 4
.IP "\(bu" 4
Enhanced documentation
.IP "\(bu" 4
Internal cleanup
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`IPC::Open2\*(C'\fR upgraded to version 1.02
.RS 4
.IP "\(bu" 4
Enhanced documentation
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`IPC::Open3\*(C'\fR upgraded to version 1.02
.RS 4
.IP "\(bu" 4
Enhanced documentation
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`List::Util\*(C'\fR upgraded to version 1.18 (was 1.14)
.RS 4
.IP "\(bu" 4
Fix pure-perl version of \f(CW\*(C`refaddr\*(C'\fR to avoid blessing an un-blessed reference
.IP "\(bu" 4
Use \f(CW\*(C`XSLoader\*(C'\fR for faster loading
.IP "\(bu" 4
Fixed various memory leaks
.IP "\(bu" 4
Internal cleanup and portability fixes
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Math::Complex\*(C'\fR upgraded to version 1.35
.RS 4
.IP "\(bu" 4
\&\f(CW\*(C`atan2(0, i)\*(C'\fR now works, as do all the (computable) complex argument cases
.IP "\(bu" 4
Fixes for certain bugs in \f(CW\*(C`make\*(C'\fR and \f(CW\*(C`emake\*(C'\fR
.IP "\(bu" 4
Support returning the \fIk\fRth root directly
.IP "\(bu" 4
Support \f(CW\*(C`[2,\-3pi/8]\*(C'\fR in \f(CW\*(C`emake\*(C'\fR
.IP "\(bu" 4
Support \f(CW\*(C`inf\*(C'\fR for \f(CW\*(C`make\*(C'\fR/\f(CW\*(C`emake\*(C'\fR
.IP "\(bu" 4
Document \f(CW\*(C`make\*(C'\fR/\f(CW\*(C`emake\*(C'\fR more visibly
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Math::Trig\*(C'\fR upgraded to version 1.03
.RS 4
.IP "\(bu" 4
Add more great circle routines: \f(CW\*(C`great_circle_waypoint\*(C'\fR and
\&\f(CW\*(C`great_circle_destination\*(C'\fR
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`MIME::Base64\*(C'\fR upgraded to version 3.07
.RS 4
.IP "\(bu" 4
Use \f(CW\*(C`XSLoader\*(C'\fR for faster loading
.IP "\(bu" 4
Enhanced documentation
.IP "\(bu" 4
Internal cleanup
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`NDBM_File\*(C'\fR upgraded to version 1.06
.RS 4
.IP "\(bu" 4
Enhanced documentation
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`ODBM_File\*(C'\fR upgraded to version 1.06
.RS 4
.IP "\(bu" 4
Documentation typo fixed
.IP "\(bu" 4
Internal cleanup
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Opcode\*(C'\fR upgraded to version 1.06
.RS 4
.IP "\(bu" 4
Enhanced documentation
.IP "\(bu" 4
Internal cleanup
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`open\*(C'\fR upgraded to version 1.05
.RS 4
.IP "\(bu" 4
Enhanced documentation
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`overload\*(C'\fR upgraded to version 1.04
.RS 4
.IP "\(bu" 4
Enhanced documentation
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`PerlIO\*(C'\fR upgraded to version 1.04
.RS 4
.IP "\(bu" 4
\&\f(CW\*(C`PerlIO::via\*(C'\fR iterate over layers properly now
.IP "\(bu" 4
\&\f(CW\*(C`PerlIO::scalar\*(C'\fR understands \f(CW\*(C`$/ = ""\*(C'\fR now
.IP "\(bu" 4
\&\f(CW\*(C`encoding(utf\-8\-strict)\*(C'\fR with partial characters now works
.IP "\(bu" 4
Enhanced documentation
.IP "\(bu" 4
Internal cleanup
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Pod::Functions\*(C'\fR upgraded to version 1.03
.RS 4
.IP "\(bu" 4
Documentation typos fixed
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Pod::Html\*(C'\fR upgraded to version 1.0504
.RS 4
.IP "\(bu" 4
\&\s-1HTML\s0 output will now correctly link
to \f(CW\*(C`=item\*(C'\fRs on the same page, and should be valid \s-1XHTML\s0.
.IP "\(bu" 4
Variable names are recognized as intended
.IP "\(bu" 4
Documentation typos fixed
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Pod::Parser\*(C'\fR upgraded to version 1.32
.RS 4
.IP "\(bu" 4
Allow files that start with \f(CW\*(C`=head\*(C'\fR on the first line
.IP "\(bu" 4
Win32 portability fix
.IP "\(bu" 4
Exit status of \f(CW\*(C`pod2usage\*(C'\fR fixed
.IP "\(bu" 4
New \f(CW\*(C`\-noperldoc\*(C'\fR switch for \f(CW\*(C`pod2usage\*(C'\fR
.IP "\(bu" 4
Arbitrary \s-1URL\s0 schemes now allowed
.IP "\(bu" 4
Documentation typos fixed
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`POSIX\*(C'\fR upgraded to version 1.09
.RS 4
.IP "\(bu" 4
Documentation typos fixed
.IP "\(bu" 4
Internal cleanup
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`re\*(C'\fR upgraded to version 0.05
.RS 4
.IP "\(bu" 4
Documentation typo fixed
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Safe\*(C'\fR upgraded to version 2.12
.RS 4
.IP "\(bu" 4
Minor documentation enhancement
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`SDBM_File\*(C'\fR upgraded to version 1.05
.RS 4
.IP "\(bu" 4
Documentation typo fixed
.IP "\(bu" 4
Internal cleanup
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Socket\*(C'\fR upgraded to version 1.78
.RS 4
.IP "\(bu" 4
Internal cleanup
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Storable\*(C'\fR upgraded to version 2.15
.RS 4
.IP "\(bu" 4
This includes the \f(CW\*(C`STORABLE_attach\*(C'\fR hook functionality added by
Adam Kennedy, and more frugal memory requirements when storing under \f(CW\*(C`ithreads\*(C'\fR, by
using the \f(CW\*(C`ithreads\*(C'\fR cloning tracking code.
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Switch\*(C'\fR upgraded to version 2.10_01
.RS 4
.IP "\(bu" 4
Documentation typos fixed
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Sys::Syslog\*(C'\fR upgraded to version 0.13
.RS 4
.IP "\(bu" 4
Now provides numeric macros and meaningful \f(CW\*(C`Exporter\*(C'\fR tags.
.IP "\(bu" 4
No longer uses \f(CW\*(C`Sys::Hostname\*(C'\fR as it may provide useless values in
unconfigured network environments, so instead uses \f(CW\*(C`INADDR_LOOPBACK\*(C'\fR directly.
.IP "\(bu" 4
\&\f(CW\*(C`syslog()\*(C'\fR now uses local timestamp.
.IP "\(bu" 4
\&\f(CW\*(C`setlogmask()\*(C'\fR now behaves like its C counterpart.
.IP "\(bu" 4
\&\f(CW\*(C`setlogsock()\*(C'\fR will now \f(CW\*(C`croak()\*(C'\fR as documented.
.IP "\(bu" 4
Improved error and warnings messages.
.IP "\(bu" 4
Improved documentation.
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Term::ANSIColor\*(C'\fR upgraded to version 1.10
.RS 4
.IP "\(bu" 4
Fixes a bug in \f(CW\*(C`colored\*(C'\fR when \f(CW$EACHLINE\fR is set that caused it to not color
lines consisting solely of 0 (literal zero).
.IP "\(bu" 4
Improved tests.
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Term::ReadLine\*(C'\fR upgraded to version 1.02
.RS 4
.IP "\(bu" 4
Documentation tweaks
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Test::Harness\*(C'\fR upgraded to version 2.56 (was 2.48)
.RS 4
.IP "\(bu" 4
The \f(CW\*(C`Test::Harness\*(C'\fR timer is now off by default.
.IP "\(bu" 4
Now shows elapsed time in milliseconds.
.IP "\(bu" 4
Various bug fixes
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Test::Simple\*(C'\fR upgraded to version 0.62 (was 0.54)
.RS 4
.IP "\(bu" 4
\&\f(CW\*(C`is_deeply()\*(C'\fR no longer fails to work for many cases
.IP "\(bu" 4
Various minor bug fixes
.IP "\(bu" 4
Documentation enhancements
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Text::Tabs\*(C'\fR upgraded to version 2005.0824
.RS 4
.IP "\(bu" 4
Provides a faster implementation of \f(CW\*(C`expand\*(C'\fR
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Text::Wrap\*(C'\fR upgraded to version 2005.082401
.RS 4
.IP "\(bu" 4
Adds \f(CW$Text::Wrap::separator2\fR, which allows you to preserve existing newlines
but add line-breaks with some other string.
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`threads\*(C'\fR upgraded to version 1.07
.RS 4
.IP "\(bu" 4
\&\f(CW\*(C`threads\*(C'\fR will now honour \f(CW\*(C`no warnings \*(Aqthreads\*(Aq\*(C'\fR
.IP "\(bu" 4
A thread's interpreter is now freed after \f(CW\*(C`$t\->join()\*(C'\fR rather than after
\&\f(CW\*(C`undef $t\*(C'\fR, which should fix some \f(CW\*(C`ithreads\*(C'\fR memory leaks. (Fixed by Dave
Mitchell)
.IP "\(bu" 4
Some documentation typo fixes.
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`threads::shared\*(C'\fR upgraded to version 0.94
.RS 4
.IP "\(bu" 4
Documentation changes only
.IP "\(bu" 4
Note: An improved implementation of \f(CW\*(C`threads::shared\*(C'\fR is available on
\&\s-1CPAN\s0 \- this will be merged into 5.8.9 if it proves stable.
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Tie::Hash\*(C'\fR upgraded to version 1.02
.RS 4
.IP "\(bu" 4
Documentation typo fixed
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Time::HiRes\*(C'\fR upgraded to version 1.86 (was 1.66)
.RS 4
.IP "\(bu" 4
\&\f(CW\*(C`clock_nanosleep()\*(C'\fR and \f(CW\*(C`clock()\*(C'\fR functions added
.IP "\(bu" 4
Support for the \s-1POSIX\s0 \f(CW\*(C`clock_gettime()\*(C'\fR and \f(CW\*(C`clock_getres()\*(C'\fR has been added
.IP "\(bu" 4
Return \f(CW\*(C`undef\*(C'\fR or an empty list if the C \f(CW\*(C`gettimeofday()\*(C'\fR function fails
.IP "\(bu" 4
Improved \f(CW\*(C`nanosleep\*(C'\fR detection
.IP "\(bu" 4
Internal cleanup
.IP "\(bu" 4
Enhanced documentation
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Unicode::Collate\*(C'\fR upgraded to version 0.52
.RS 4
.IP "\(bu" 4
Now implements \s-1UCA\s0 Revision 14 (based on Unicode 4.1.0).
.IP "\(bu" 4
\&\f(CW\*(C`Unicode::Collate\-\*(C'\fRnew> method no longer overwrites user's \f(CW$_\fR
.IP "\(bu" 4
Enhanced documentation
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Unicode::UCD\*(C'\fR upgraded to version 0.24
.RS 4
.IP "\(bu" 4
Documentation typos fixed
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`User::grent\*(C'\fR upgraded to version 1.01
.RS 4
.IP "\(bu" 4
Documentation typo fixed
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`utf8\*(C'\fR upgraded to version 1.06
.RS 4
.IP "\(bu" 4
Documentation typos fixed
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`vmsish\*(C'\fR upgraded to version 1.02
.RS 4
.IP "\(bu" 4
Documentation typos fixed
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`warnings\*(C'\fR upgraded to version 1.05
.RS 4
.IP "\(bu" 4
Gentler messing with \f(CW\*(C`Carp::\*(C'\fR internals
.IP "\(bu" 4
Internal cleanup
.IP "\(bu" 4
Documentation update
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Win32\*(C'\fR upgraded to version 0.2601
.RS 4
.IP "\(bu" 4
Provides Windows Vista support to \f(CW\*(C`Win32::GetOSName\*(C'\fR
.IP "\(bu" 4
Documentation enhancements
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`XS::Typemap\*(C'\fR upgraded to version 0.02
.RS 4
.IP "\(bu" 4
Internal cleanup
.RE
.RS 4
.RE
.SH "Utility Changes"
.IX Header "Utility Changes"
.ie n .SS """h2xs"" enhancements"
.el .SS "\f(CWh2xs\fP enhancements"
.IX Subsection "h2xs enhancements"
\&\f(CW\*(C`h2xs\*(C'\fR implements new option \f(CW\*(C`\-\-use\-xsloader\*(C'\fR to force use of
\&\f(CW\*(C`XSLoader\*(C'\fR even in backwards compatible modules.
.PP
The handling of authors' names that had apostrophes has been fixed.
.PP
Any enums with negative values are now skipped.
.ie n .SS """perlivp"" enhancements"
.el .SS "\f(CWperlivp\fP enhancements"
.IX Subsection "perlivp enhancements"
\&\f(CW\*(C`perlivp\*(C'\fR implements new option \f(CW\*(C`\-a\*(C'\fR and will not check for \fI*.ph\fR
files by default any more.  Use the \f(CW\*(C`\-a\*(C'\fR option to run \fIall\fR tests.
.SH "New Documentation"
.IX Header "New Documentation"
The perlglossary manpage is a glossary of terms used in the Perl
documentation, technical and otherwise, kindly provided by O'Reilly Media,
inc.
.SH "Performance Enhancements"
.IX Header "Performance Enhancements"
.IP "\(bu" 4
Weak reference creation is now \fIO(1)\fR rather than \fIO(n)\fR, courtesy of
Nicholas Clark. Weak reference deletion remains \fIO(n)\fR, but if deletion only
happens at program exit, it may be skipped completely.
.IP "\(bu" 4
Salvador Fandin\*~o provided improvements to reduce the memory usage of \f(CW\*(C`sort\*(C'\fR
and to speed up some cases.
.IP "\(bu" 4
Jarkko Hietaniemi and Andy Lester worked to mark as much data as possible in
the C source files as \f(CW\*(C`static\*(C'\fR, to increase the proportion of the executable
file that the operating system can share between process, and thus reduce
real memory usage on multi-user systems.
.SH "Installation and Configuration Improvements"
.IX Header "Installation and Configuration Improvements"
Parallel makes should work properly now, although there may still be problems
if \f(CW\*(C`make test\*(C'\fR is instructed to run in parallel.
.PP
Building with Borland's compilers on Win32 should work more smoothly. In
particular Steve Hay has worked to side step many warnings emitted by their
compilers and at least one C compiler internal error.
.PP
\&\f(CW\*(C`Configure\*(C'\fR will now detect \f(CW\*(C`clearenv\*(C'\fR and \f(CW\*(C`unsetenv\*(C'\fR, thanks to a patch
from Alan Burlison. It will also probe for \f(CW\*(C`futimes\*(C'\fR and whether \f(CW\*(C`sprintf\*(C'\fR
correctly returns the length of the formatted string, which will both be used
in perl 5.8.9.
.PP
There are improved hints for next\-3.0, vmesa, \s-1IX\s0, Darwin, Solaris, Linux,
\&\s-1DEC/OSF\s0, HP-UX and MPE/iX
.PP
Perl extensions on Windows now can be statically built into the Perl \s-1DLL\s0,
thanks to a work by Vadim Konovalov. (This improvement was actually in 5.8.7,
but was accidentally omitted from perl587delta).
.SH "Selected Bug Fixes"
.IX Header "Selected Bug Fixes"
.SS "no warnings 'category' works correctly with \-w"
.IX Subsection "no warnings 'category' works correctly with -w"
Previously when running with warnings enabled globally via \f(CW\*(C`\-w\*(C'\fR, selective
disabling of specific warning categories would actually turn off all warnings.
This is now fixed; now \f(CW\*(C`no warnings \*(Aqio\*(Aq;\*(C'\fR will only turn off warnings in the
\&\f(CW\*(C`io\*(C'\fR class. Previously it would erroneously turn off all warnings.
.PP
This bug fix may cause some programs to start correctly issuing warnings.
.SS "Remove over-optimisation"
.IX Subsection "Remove over-optimisation"
Perl 5.8.4 introduced a change so that assignments of \f(CW\*(C`undef\*(C'\fR to a
scalar, or of an empty list to an array or a hash, were optimised away. As
this could cause problems when \f(CW\*(C`goto\*(C'\fR jumps were involved, this change
has been backed out.
.SS "\fIsprintf()\fP fixes"
.IX Subsection "sprintf() fixes"
Using the \fIsprintf()\fR function with some formats could lead to a buffer
overflow in some specific cases. This has been fixed, along with several
other bugs, notably in bounds checking.
.PP
In related fixes, it was possible for badly written code that did not follow
the documentation of \f(CW\*(C`Sys::Syslog\*(C'\fR to have formatting vulnerabilities.
\&\f(CW\*(C`Sys::Syslog\*(C'\fR has been changed to protect people from poor quality third
party code.
.SS "Debugger and Unicode slowdown"
.IX Subsection "Debugger and Unicode slowdown"
It had been reported that running under perl's debugger when processing
Unicode data could cause unexpectedly large slowdowns. The most likely cause
of this was identified and fixed by Nicholas Clark.
.SS "Smaller fixes"
.IX Subsection "Smaller fixes"
.IP "\(bu" 4
\&\f(CW\*(C`FindBin\*(C'\fR now works better with directories where access rights are more
restrictive than usual.
.IP "\(bu" 4
Several memory leaks in ithreads were closed. An improved implementation of
\&\f(CW\*(C`threads::shared\*(C'\fR is available on \s-1CPAN\s0 \- this will be merged into 5.8.9 if
it proves stable.
.IP "\(bu" 4
Trailing spaces are now trimmed from \f(CW$!\fR and \f(CW$^E\fR.
.IP "\(bu" 4
Operations that require perl to read a process's list of groups, such as reads
of \f(CW$(\fR and \f(CW$)\fR, now dynamically allocate memory rather than using a
fixed sized array. The fixed size array could cause C stack exhaustion on
systems configured to use large numbers of groups.
.IP "\(bu" 4
\&\f(CW\*(C`PerlIO::scalar\*(C'\fR now works better with non-default \f(CW$/\fR settings.
.IP "\(bu" 4
You can now use the \f(CW\*(C`x\*(C'\fR operator to repeat a \f(CW\*(C`qw//\*(C'\fR list. This used
to raise a syntax error.
.IP "\(bu" 4
The debugger now traces correctly execution in eval("")uated code that
contains #line directives.
.IP "\(bu" 4
The value of the \f(CW\*(C`open\*(C'\fR pragma is no longer ignored for three-argument
opens.
.IP "\(bu" 4
The optimisation of \f(CW\*(C`for (reverse @a)\*(C'\fR introduced in perl 5.8.6 could
misbehave when the array had undefined elements and was used in \s-1LVALUE\s0
context. Dave Mitchell provided a fix.
.IP "\(bu" 4
Some case insensitive matches between \s-1UTF\-8\s0 encoded data and 8 bit regexps,
and vice versa, could give malformed character warnings. These have been
fixed by Dave Mitchell and Yves Orton.
.IP "\(bu" 4
\&\f(CW\*(C`lcfirst\*(C'\fR and \f(CW\*(C`ucfirst\*(C'\fR could corrupt the string for certain cases where
the length \s-1UTF\-8\s0 encoding of the string in lower case, upper case or title
case differed. This was fixed by Nicholas Clark.
.IP "\(bu" 4
Perl will now use the C library calls \f(CW\*(C`unsetenv\*(C'\fR and \f(CW\*(C`clearenv\*(C'\fR if present
to delete keys from \f(CW%ENV\fR and delete \f(CW%ENV\fR entirely, thanks to a patch
from Alan Burlison.
.SH "New or Changed Diagnostics"
.IX Header "New or Changed Diagnostics"
.SS "Attempt to set length of freed array"
.IX Subsection "Attempt to set length of freed array"
This is a new warning, produced in situations such as this:
.PP
.Vb 2
\&    $r = do {my @a; \e$#a};
\&    $$r = 503;
.Ve
.SS "Non-string passed as bitmask"
.IX Subsection "Non-string passed as bitmask"
This is a new warning, produced when number has been passed as a argument to
\&\fIselect()\fR, instead of a bitmask.
.PP
.Vb 3
\&    # Wrong, will now warn
\&    $rin = fileno(STDIN);
\&    ($nfound,$timeleft) = select($rout=$rin, undef, undef, $timeout);
\&    
\&    # Should be
\&    $rin = \*(Aq\*(Aq;
\&    vec($rin,fileno(STDIN),1) = 1;
\&    ($nfound,$timeleft) = select($rout=$rin, undef, undef, $timeout);
.Ve
.SS "Search pattern not terminated or ternary operator parsed as search pattern"
.IX Subsection "Search pattern not terminated or ternary operator parsed as search pattern"
This syntax error indicates that the lexer couldn't find the final
delimiter of a \f(CW\*(C`?PATTERN?\*(C'\fR construct. Mentioning the ternary operator in
this error message makes it easier to diagnose syntax errors.
.SH "Changed Internals"
.IX Header "Changed Internals"
There has been a fair amount of refactoring of the \f(CW\*(C`C\*(C'\fR source code, partly to
make it tidier and more maintainable. The resulting object code and the
\&\f(CW\*(C`perl\*(C'\fR binary may well be smaller than 5.8.7, in particular due to a change
contributed by Dave Mitchell which reworked the warnings code to be
significantly smaller. Apart from being smaller and possibly faster, there
should be no user-detectable changes.
.PP
Andy Lester supplied many improvements to determine which function
parameters and local variables could actually be declared \f(CW\*(C`const\*(C'\fR to the C
compiler. Steve Peters provided new \f(CW*_set\fR macros and reworked the core to
use these rather than assigning to macros in \s-1LVALUE\s0 context.
.PP
Dave Mitchell improved the lexer debugging output under \f(CW\*(C`\-DT\*(C'\fR
.PP
Nicholas Clark changed the string buffer allocation so that it is now rounded
up to the next multiple of 4 (or 8 on platforms with 64 bit pointers). This
should reduce the number of calls to \f(CW\*(C`realloc\*(C'\fR without actually using any
extra memory.
.PP
The \f(CW\*(C`HV\*(C'\fR's array of \f(CW\*(C`HE*\*(C'\fRs is now allocated at the correct (minimal) size,
thanks to another change by Nicholas Clark. Compile with
\&\f(CW\*(C`\-DPERL_USE_LARGE_HV_ALLOC\*(C'\fR to use the old, sloppier, default.
.PP
For \s-1XS\s0 or embedding debugging purposes, if perl is compiled with
\&\f(CW\*(C`\-DDEBUG_LEAKING_SCALARS_FORK_DUMP\*(C'\fR in addition to
\&\f(CW\*(C`\-DDEBUG_LEAKING_SCALARS\*(C'\fR then a child process is \f(CW\*(C`fork\*(C'\fRed just before
global destruction, which is used to display the values of any scalars
found to have leaked at the end of global destruction. Without this, the
scalars have already been freed sufficiently at the point of detection that
it is impossible to produce any meaningful dump of their contents.  This
feature was implemented by the indefatigable Nicholas Clark, based on an idea
by Mike Giroux.
.SH "Platform Specific Problems"
.IX Header "Platform Specific Problems"
The optimiser on HP-UX 11.23 (Itanium 2) is currently partly disabled (scaled
down to +O1) when using \s-1HP\s0 C\-ANSI-C; the cause of problems at higher
optimisation levels is still unclear.
.PP
There are a handful of remaining test failures on \s-1VMS\s0, mostly due to
test fixes and minor module tweaks with too many dependencies to
integrate into this release from the development stream, where they have
all been corrected.  The following is a list of expected failures with
the patch number of the fix where that is known:
.PP
.Vb 6
\&    ext/Devel/PPPort/t/ppphtest.t  #26913
\&    ext/List/Util/t/p_tainted.t    #26912
\&    lib/ExtUtils/t/PL_FILES.t      #26813
\&    lib/ExtUtils/t/basic.t         #26813
\&    t/io/fs.t
\&    t/op/cmp.t
.Ve
.SH "Reporting Bugs"
.IX Header "Reporting Bugs"
If you find what you think is a bug, you might check the articles
recently posted to the comp.lang.perl.misc newsgroup and the perl
bug database at http://bugs.perl.org.  There may also be
information at http://www.perl.org, the Perl Home Page.
.PP
If you believe you have an unreported bug, please run the \fBperlbug\fR
program included with your release.  Be sure to trim your bug down
to a tiny but sufficient test case.  Your bug report, along with the
output of \f(CW\*(C`perl \-V\*(C'\fR, will be sent off to perlbug@perl.org to be
analysed by the Perl porting team.  You can browse and search
the Perl 5 bugs at http://bugs.perl.org/
.SH "SEE ALSO"
.IX Header "SEE ALSO"
The \fIChanges\fR file for exhaustive details on what changed.
.PP
The \fI\s-1INSTALL\s0\fR file for how to build Perl.
.PP
The \fI\s-1README\s0\fR file for general stuff.
.PP
The \fIArtistic\fR and \fICopying\fR files for copyright information.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                             osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perl588delta5.18.1                           0100644 0001750 0001750 00000105315 12566207434 023503  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERL588DELTA 1"
.TH PERL588DELTA 1 "2013-11-04" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perl588delta \- what is new for perl v5.8.8
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document describes differences between the 5.8.7 release and
the 5.8.8 release.
.SH "Incompatible Changes"
.IX Header "Incompatible Changes"
There are no changes intentionally incompatible with 5.8.7. If any exist,
they are bugs and reports are welcome.
.SH "Core Enhancements"
.IX Header "Core Enhancements"
.IP "\(bu" 4
\&\f(CW\*(C`chdir\*(C'\fR, \f(CW\*(C`chmod\*(C'\fR and \f(CW\*(C`chown\*(C'\fR can now work on filehandles as well as
filenames, if the system supports respectively \f(CW\*(C`fchdir\*(C'\fR, \f(CW\*(C`fchmod\*(C'\fR and
\&\f(CW\*(C`fchown\*(C'\fR, thanks to a patch provided by Gisle Aas.
.SH "Modules and Pragmata"
.IX Header "Modules and Pragmata"
.IP "\(bu" 4
\&\f(CW\*(C`Attribute::Handlers\*(C'\fR upgraded to version 0.78_02
.RS 4
.IP "\(bu" 4
Documentation typo fix
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`attrs\*(C'\fR upgraded to version 1.02
.RS 4
.IP "\(bu" 4
Internal cleanup only
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`autouse\*(C'\fR upgraded to version 1.05
.RS 4
.IP "\(bu" 4
Simplified implementation
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`B\*(C'\fR upgraded to version 1.09_01
.RS 4
.IP "\(bu" 4
The inheritance hierarchy of the \f(CW\*(C`B::\*(C'\fR modules has been corrected;
\&\f(CW\*(C`B::NV\*(C'\fR now inherits from \f(CW\*(C`B::SV\*(C'\fR (instead of \f(CW\*(C`B::IV\*(C'\fR).
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`blib\*(C'\fR upgraded to version 1.03
.RS 4
.IP "\(bu" 4
Documentation typo fix
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`ByteLoader\*(C'\fR upgraded to version 0.06
.RS 4
.IP "\(bu" 4
Internal cleanup
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`CGI\*(C'\fR upgraded to version 3.15
.RS 4
.IP "\(bu" 4
Extraneous \*(L"?\*(R" from \f(CW\*(C`self_url()\*(C'\fR removed
.IP "\(bu" 4
\&\f(CW\*(C`scrolling_list()\*(C'\fR select attribute fixed
.IP "\(bu" 4
\&\f(CW\*(C`virtual_port\*(C'\fR now works properly with the https protocol
.IP "\(bu" 4
\&\f(CW\*(C`upload_hook()\*(C'\fR and \f(CW\*(C`append()\*(C'\fR now works in function-oriented mode
.IP "\(bu" 4
\&\f(CW\*(C`POST_MAX\*(C'\fR doesn't cause the client to hang any more
.IP "\(bu" 4
Automatic tab indexes are now disabled and new \f(CW\*(C`\-tabindex\*(C'\fR pragma has
been added to turn automatic indexes back on
.IP "\(bu" 4
\&\f(CW\*(C`end_form()\*(C'\fR doesn't emit empty (and non-validating) \f(CW\*(C`<div>\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`CGI::Carp\*(C'\fR works better in certain mod_perl configurations
.IP "\(bu" 4
Setting \f(CW$CGI::TMPDIRECTORY\fR is now effective
.IP "\(bu" 4
Enhanced documentation
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`charnames\*(C'\fR upgraded to version 1.05
.RS 4
.IP "\(bu" 4
\&\f(CW\*(C`viacode()\*(C'\fR now accept hex strings and has been optimized.
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`CPAN\*(C'\fR upgraded to version 1.76_02
.RS 4
.IP "\(bu" 4
1 minor bug fix for Win32
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Cwd\*(C'\fR upgraded to version 3.12
.RS 4
.IP "\(bu" 4
\&\f(CW\*(C`canonpath()\*(C'\fR on Win32 now collapses \fIfoo\e..\fR sections correctly.
.IP "\(bu" 4
Improved behaviour on Symbian \s-1OS.\s0
.IP "\(bu" 4
Enhanced documentation and typo fixes
.IP "\(bu" 4
Internal cleanup
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Data::Dumper\*(C'\fR upgraded to version 2.121_08
.RS 4
.IP "\(bu" 4
A problem where \f(CW\*(C`Data::Dumper\*(C'\fR would sometimes update the iterator state
of hashes has been fixed
.IP "\(bu" 4
Numeric labels now work
.IP "\(bu" 4
Internal cleanup
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`DB\*(C'\fR upgraded to version 1.01
.RS 4
.IP "\(bu" 4
A problem where the state of the regexp engine would sometimes get clobbered when running
under the debugger has been fixed.
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`DB_File\*(C'\fR upgraded to version 1.814
.RS 4
.IP "\(bu" 4
Adds support for Berkeley \s-1DB 4.4.\s0
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Devel::DProf\*(C'\fR upgraded to version 20050603.00
.RS 4
.IP "\(bu" 4
Internal cleanup
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Devel::Peek\*(C'\fR upgraded to version 1.03
.RS 4
.IP "\(bu" 4
Internal cleanup
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Devel::PPPort\*(C'\fR upgraded to version 3.06_01
.RS 4
.IP "\(bu" 4
\&\f(CW\*(C`\-\-compat\-version\*(C'\fR argument checking has been improved
.IP "\(bu" 4
Files passed on the command line are filtered by default
.IP "\(bu" 4
\&\f(CW\*(C`\-\-nofilter\*(C'\fR option to override the filtering has been added
.IP "\(bu" 4
Enhanced documentation
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`diagnostics\*(C'\fR upgraded to version 1.15
.RS 4
.IP "\(bu" 4
Documentation typo fix
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Digest\*(C'\fR upgraded to version 1.14
.RS 4
.IP "\(bu" 4
The constructor now knows which module implements \s-1SHA\-224\s0
.IP "\(bu" 4
Documentation tweaks and typo fixes
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Digest::MD5\*(C'\fR upgraded to version 2.36
.RS 4
.IP "\(bu" 4
\&\f(CW\*(C`XSLoader\*(C'\fR is now used for faster loading
.IP "\(bu" 4
Enhanced documentation including \s-1MD5\s0 weaknesses discovered lately
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Dumpvalue\*(C'\fR upgraded to version 1.12
.RS 4
.IP "\(bu" 4
Documentation fix
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`DynaLoader\*(C'\fR upgraded but unfortunately we're not able to increment its version number :\-(
.RS 4
.IP "\(bu" 4
Implements \f(CW\*(C`dl_unload_file\*(C'\fR on Win32
.IP "\(bu" 4
Internal cleanup
.IP "\(bu" 4
\&\f(CW\*(C`XSLoader\*(C'\fR 0.06 incorporated; small optimisation for calling
\&\f(CW\*(C`bootstrap_inherit()\*(C'\fR and documentation enhancements.
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Encode\*(C'\fR upgraded to version 2.12
.RS 4
.IP "\(bu" 4
A coderef is now acceptable for \f(CW\*(C`CHECK\*(C'\fR!
.IP "\(bu" 4
3 new characters added to the \s-1ISO\-8859\-7\s0 encoding
.IP "\(bu" 4
New encoding \f(CW\*(C`MIME\-Header\-ISO_2022_JP\*(C'\fR added
.IP "\(bu" 4
Problem with partial characters and \f(CW\*(C`encoding(utf\-8\-strict)\*(C'\fR fixed.
.IP "\(bu" 4
Documentation enhancements and typo fixes
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`English\*(C'\fR upgraded to version 1.02
.RS 4
.IP "\(bu" 4
the \f(CW$COMPILING\fR variable has been added
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`ExtUtils::Constant\*(C'\fR upgraded to version 0.17
.RS 4
.IP "\(bu" 4
Improved compatibility with older versions of perl
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`ExtUtils::MakeMaker\*(C'\fR upgraded to version 6.30 (was 6.17)
.RS 4
.IP "\(bu" 4
Too much to list here;  see <http://search.cpan.org/dist/ExtUtils\-MakeMaker/Changes>
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`File::Basename\*(C'\fR upgraded to version 2.74, with changes contributed by Michael Schwern.
.RS 4
.IP "\(bu" 4
Documentation clarified and errors corrected.
.IP "\(bu" 4
\&\f(CW\*(C`basename\*(C'\fR now strips trailing path separators before processing the name.
.IP "\(bu" 4
\&\f(CW\*(C`basename\*(C'\fR now returns \f(CW\*(C`/\*(C'\fR for parameter \f(CW\*(C`/\*(C'\fR, to make \f(CW\*(C`basename\*(C'\fR
consistent with the shell utility of the same name.
.IP "\(bu" 4
The suffix is no longer stripped if it is identical to the remaining characters
in the name, again for consistency with the shell utility.
.IP "\(bu" 4
Some internal code cleanup.
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`File::Copy\*(C'\fR upgraded to version 2.09
.RS 4
.IP "\(bu" 4
Copying a file onto itself used to fail.
.IP "\(bu" 4
Moving a file between file systems now preserves the access and
modification time stamps
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`File::Find\*(C'\fR upgraded to version 1.10
.RS 4
.IP "\(bu" 4
Win32 portability fixes
.IP "\(bu" 4
Enhanced documentation
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`File::Glob\*(C'\fR upgraded to version 1.05
.RS 4
.IP "\(bu" 4
Internal cleanup
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`File::Path\*(C'\fR upgraded to version 1.08
.RS 4
.IP "\(bu" 4
\&\f(CW\*(C`mkpath\*(C'\fR now preserves \f(CW\*(C`errno\*(C'\fR when \f(CW\*(C`mkdir\*(C'\fR fails
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`File::Spec\*(C'\fR upgraded to version 3.12
.RS 4
.IP "\(bu" 4
\&\f(CW\*(C`File::Spec\-\*(C'\fR\fIrootdir()\fR> now returns \f(CW\*(C`\e\*(C'\fR on Win32, instead of \f(CW\*(C`/\*(C'\fR
.IP "\(bu" 4
\&\f(CW$^O\fR could sometimes become tainted. This has been fixed.
.IP "\(bu" 4
\&\f(CW\*(C`canonpath\*(C'\fR on Win32 now collapses \f(CW\*(C`foo/..\*(C'\fR (or \f(CW\*(C`foo\e..\*(C'\fR) sections
correctly, rather than doing the \*(L"misguided\*(R" work it was previously doing.
Note that \f(CW\*(C`canonpath\*(C'\fR on Unix still does \fBnot\fR collapse these sections, as
doing so would be incorrect.
.IP "\(bu" 4
Some documentation improvements
.IP "\(bu" 4
Some internal code cleanup
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`FileCache\*(C'\fR upgraded to version 1.06
.RS 4
.IP "\(bu" 4
\&\s-1POD\s0 formatting errors in the documentation fixed
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Filter::Simple\*(C'\fR upgraded to version 0.82
.IP "\(bu" 4
\&\f(CW\*(C`FindBin\*(C'\fR upgraded to version 1.47
.RS 4
.IP "\(bu" 4
Now works better with directories where access rights are more
restrictive than usual.
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`GDBM_File\*(C'\fR upgraded to version 1.08
.RS 4
.IP "\(bu" 4
Internal cleanup
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Getopt::Long\*(C'\fR upgraded to version 2.35
.RS 4
.IP "\(bu" 4
\&\f(CW\*(C`prefix_pattern\*(C'\fR has now been complemented by a new configuration
option \f(CW\*(C`long_prefix_pattern\*(C'\fR that allows the user to specify what
prefix patterns should have long option style semantics applied.
.IP "\(bu" 4
Options can now take multiple values at once (experimental)
.IP "\(bu" 4
Various bug fixes
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`if\*(C'\fR upgraded to version 0.05
.RS 4
.IP "\(bu" 4
Give more meaningful error messages from \f(CW\*(C`if\*(C'\fR when invoked with a
condition in list context.
.IP "\(bu" 4
Restore backwards compatibility with earlier versions of perl
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`IO\*(C'\fR upgraded to version 1.22
.RS 4
.IP "\(bu" 4
Enhanced documentation
.IP "\(bu" 4
Internal cleanup
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`IPC::Open2\*(C'\fR upgraded to version 1.02
.RS 4
.IP "\(bu" 4
Enhanced documentation
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`IPC::Open3\*(C'\fR upgraded to version 1.02
.RS 4
.IP "\(bu" 4
Enhanced documentation
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`List::Util\*(C'\fR upgraded to version 1.18 (was 1.14)
.RS 4
.IP "\(bu" 4
Fix pure-perl version of \f(CW\*(C`refaddr\*(C'\fR to avoid blessing an un-blessed reference
.IP "\(bu" 4
Use \f(CW\*(C`XSLoader\*(C'\fR for faster loading
.IP "\(bu" 4
Fixed various memory leaks
.IP "\(bu" 4
Internal cleanup and portability fixes
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Math::Complex\*(C'\fR upgraded to version 1.35
.RS 4
.IP "\(bu" 4
\&\f(CW\*(C`atan2(0, i)\*(C'\fR now works, as do all the (computable) complex argument cases
.IP "\(bu" 4
Fixes for certain bugs in \f(CW\*(C`make\*(C'\fR and \f(CW\*(C`emake\*(C'\fR
.IP "\(bu" 4
Support returning the \fIk\fRth root directly
.IP "\(bu" 4
Support \f(CW\*(C`[2,\-3pi/8]\*(C'\fR in \f(CW\*(C`emake\*(C'\fR
.IP "\(bu" 4
Support \f(CW\*(C`inf\*(C'\fR for \f(CW\*(C`make\*(C'\fR/\f(CW\*(C`emake\*(C'\fR
.IP "\(bu" 4
Document \f(CW\*(C`make\*(C'\fR/\f(CW\*(C`emake\*(C'\fR more visibly
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Math::Trig\*(C'\fR upgraded to version 1.03
.RS 4
.IP "\(bu" 4
Add more great circle routines: \f(CW\*(C`great_circle_waypoint\*(C'\fR and
\&\f(CW\*(C`great_circle_destination\*(C'\fR
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`MIME::Base64\*(C'\fR upgraded to version 3.07
.RS 4
.IP "\(bu" 4
Use \f(CW\*(C`XSLoader\*(C'\fR for faster loading
.IP "\(bu" 4
Enhanced documentation
.IP "\(bu" 4
Internal cleanup
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`NDBM_File\*(C'\fR upgraded to version 1.06
.RS 4
.IP "\(bu" 4
Enhanced documentation
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`ODBM_File\*(C'\fR upgraded to version 1.06
.RS 4
.IP "\(bu" 4
Documentation typo fixed
.IP "\(bu" 4
Internal cleanup
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Opcode\*(C'\fR upgraded to version 1.06
.RS 4
.IP "\(bu" 4
Enhanced documentation
.IP "\(bu" 4
Internal cleanup
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`open\*(C'\fR upgraded to version 1.05
.RS 4
.IP "\(bu" 4
Enhanced documentation
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`overload\*(C'\fR upgraded to version 1.04
.RS 4
.IP "\(bu" 4
Enhanced documentation
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`PerlIO\*(C'\fR upgraded to version 1.04
.RS 4
.IP "\(bu" 4
\&\f(CW\*(C`PerlIO::via\*(C'\fR iterate over layers properly now
.IP "\(bu" 4
\&\f(CW\*(C`PerlIO::scalar\*(C'\fR understands \f(CW\*(C`$/ = ""\*(C'\fR now
.IP "\(bu" 4
\&\f(CW\*(C`encoding(utf\-8\-strict)\*(C'\fR with partial characters now works
.IP "\(bu" 4
Enhanced documentation
.IP "\(bu" 4
Internal cleanup
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Pod::Functions\*(C'\fR upgraded to version 1.03
.RS 4
.IP "\(bu" 4
Documentation typos fixed
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Pod::Html\*(C'\fR upgraded to version 1.0504
.RS 4
.IP "\(bu" 4
\&\s-1HTML\s0 output will now correctly link
to \f(CW\*(C`=item\*(C'\fRs on the same page, and should be valid \s-1XHTML.\s0
.IP "\(bu" 4
Variable names are recognized as intended
.IP "\(bu" 4
Documentation typos fixed
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Pod::Parser\*(C'\fR upgraded to version 1.32
.RS 4
.IP "\(bu" 4
Allow files that start with \f(CW\*(C`=head\*(C'\fR on the first line
.IP "\(bu" 4
Win32 portability fix
.IP "\(bu" 4
Exit status of \f(CW\*(C`pod2usage\*(C'\fR fixed
.IP "\(bu" 4
New \f(CW\*(C`\-noperldoc\*(C'\fR switch for \f(CW\*(C`pod2usage\*(C'\fR
.IP "\(bu" 4
Arbitrary \s-1URL\s0 schemes now allowed
.IP "\(bu" 4
Documentation typos fixed
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`POSIX\*(C'\fR upgraded to version 1.09
.RS 4
.IP "\(bu" 4
Documentation typos fixed
.IP "\(bu" 4
Internal cleanup
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`re\*(C'\fR upgraded to version 0.05
.RS 4
.IP "\(bu" 4
Documentation typo fixed
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Safe\*(C'\fR upgraded to version 2.12
.RS 4
.IP "\(bu" 4
Minor documentation enhancement
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`SDBM_File\*(C'\fR upgraded to version 1.05
.RS 4
.IP "\(bu" 4
Documentation typo fixed
.IP "\(bu" 4
Internal cleanup
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Socket\*(C'\fR upgraded to version 1.78
.RS 4
.IP "\(bu" 4
Internal cleanup
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Storable\*(C'\fR upgraded to version 2.15
.RS 4
.IP "\(bu" 4
This includes the \f(CW\*(C`STORABLE_attach\*(C'\fR hook functionality added by
Adam Kennedy, and more frugal memory requirements when storing under \f(CW\*(C`ithreads\*(C'\fR, by
using the \f(CW\*(C`ithreads\*(C'\fR cloning tracking code.
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Switch\*(C'\fR upgraded to version 2.10_01
.RS 4
.IP "\(bu" 4
Documentation typos fixed
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Sys::Syslog\*(C'\fR upgraded to version 0.13
.RS 4
.IP "\(bu" 4
Now provides numeric macros and meaningful \f(CW\*(C`Exporter\*(C'\fR tags.
.IP "\(bu" 4
No longer uses \f(CW\*(C`Sys::Hostname\*(C'\fR as it may provide useless values in
unconfigured network environments, so instead uses \f(CW\*(C`INADDR_LOOPBACK\*(C'\fR directly.
.IP "\(bu" 4
\&\f(CW\*(C`syslog()\*(C'\fR now uses local timestamp.
.IP "\(bu" 4
\&\f(CW\*(C`setlogmask()\*(C'\fR now behaves like its C counterpart.
.IP "\(bu" 4
\&\f(CW\*(C`setlogsock()\*(C'\fR will now \f(CW\*(C`croak()\*(C'\fR as documented.
.IP "\(bu" 4
Improved error and warnings messages.
.IP "\(bu" 4
Improved documentation.
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Term::ANSIColor\*(C'\fR upgraded to version 1.10
.RS 4
.IP "\(bu" 4
Fixes a bug in \f(CW\*(C`colored\*(C'\fR when \f(CW$EACHLINE\fR is set that caused it to not color
lines consisting solely of 0 (literal zero).
.IP "\(bu" 4
Improved tests.
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Term::ReadLine\*(C'\fR upgraded to version 1.02
.RS 4
.IP "\(bu" 4
Documentation tweaks
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Test::Harness\*(C'\fR upgraded to version 2.56 (was 2.48)
.RS 4
.IP "\(bu" 4
The \f(CW\*(C`Test::Harness\*(C'\fR timer is now off by default.
.IP "\(bu" 4
Now shows elapsed time in milliseconds.
.IP "\(bu" 4
Various bug fixes
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Test::Simple\*(C'\fR upgraded to version 0.62 (was 0.54)
.RS 4
.IP "\(bu" 4
\&\f(CW\*(C`is_deeply()\*(C'\fR no longer fails to work for many cases
.IP "\(bu" 4
Various minor bug fixes
.IP "\(bu" 4
Documentation enhancements
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Text::Tabs\*(C'\fR upgraded to version 2005.0824
.RS 4
.IP "\(bu" 4
Provides a faster implementation of \f(CW\*(C`expand\*(C'\fR
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Text::Wrap\*(C'\fR upgraded to version 2005.082401
.RS 4
.IP "\(bu" 4
Adds \f(CW$Text::Wrap::separator2\fR, which allows you to preserve existing newlines
but add line-breaks with some other string.
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`threads\*(C'\fR upgraded to version 1.07
.RS 4
.IP "\(bu" 4
\&\f(CW\*(C`threads\*(C'\fR will now honour \f(CW\*(C`no warnings \*(Aqthreads\*(Aq\*(C'\fR
.IP "\(bu" 4
A thread's interpreter is now freed after \f(CW\*(C`$t\->join()\*(C'\fR rather than after
\&\f(CW\*(C`undef $t\*(C'\fR, which should fix some \f(CW\*(C`ithreads\*(C'\fR memory leaks. (Fixed by Dave
Mitchell)
.IP "\(bu" 4
Some documentation typo fixes.
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`threads::shared\*(C'\fR upgraded to version 0.94
.RS 4
.IP "\(bu" 4
Documentation changes only
.IP "\(bu" 4
Note: An improved implementation of \f(CW\*(C`threads::shared\*(C'\fR is available on
\&\s-1CPAN \-\s0 this will be merged into 5.8.9 if it proves stable.
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Tie::Hash\*(C'\fR upgraded to version 1.02
.RS 4
.IP "\(bu" 4
Documentation typo fixed
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Time::HiRes\*(C'\fR upgraded to version 1.86 (was 1.66)
.RS 4
.IP "\(bu" 4
\&\f(CW\*(C`clock_nanosleep()\*(C'\fR and \f(CW\*(C`clock()\*(C'\fR functions added
.IP "\(bu" 4
Support for the \s-1POSIX \s0\f(CW\*(C`clock_gettime()\*(C'\fR and \f(CW\*(C`clock_getres()\*(C'\fR has been added
.IP "\(bu" 4
Return \f(CW\*(C`undef\*(C'\fR or an empty list if the C \f(CW\*(C`gettimeofday()\*(C'\fR function fails
.IP "\(bu" 4
Improved \f(CW\*(C`nanosleep\*(C'\fR detection
.IP "\(bu" 4
Internal cleanup
.IP "\(bu" 4
Enhanced documentation
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Unicode::Collate\*(C'\fR upgraded to version 0.52
.RS 4
.IP "\(bu" 4
Now implements \s-1UCA\s0 Revision 14 (based on Unicode 4.1.0).
.IP "\(bu" 4
\&\f(CW\*(C`Unicode::Collate\-\*(C'\fRnew> method no longer overwrites user's \f(CW$_\fR
.IP "\(bu" 4
Enhanced documentation
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Unicode::UCD\*(C'\fR upgraded to version 0.24
.RS 4
.IP "\(bu" 4
Documentation typos fixed
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`User::grent\*(C'\fR upgraded to version 1.01
.RS 4
.IP "\(bu" 4
Documentation typo fixed
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`utf8\*(C'\fR upgraded to version 1.06
.RS 4
.IP "\(bu" 4
Documentation typos fixed
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`vmsish\*(C'\fR upgraded to version 1.02
.RS 4
.IP "\(bu" 4
Documentation typos fixed
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`warnings\*(C'\fR upgraded to version 1.05
.RS 4
.IP "\(bu" 4
Gentler messing with \f(CW\*(C`Carp::\*(C'\fR internals
.IP "\(bu" 4
Internal cleanup
.IP "\(bu" 4
Documentation update
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Win32\*(C'\fR upgraded to version 0.2601
.RS 4
.IP "\(bu" 4
Provides Windows Vista support to \f(CW\*(C`Win32::GetOSName\*(C'\fR
.IP "\(bu" 4
Documentation enhancements
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`XS::Typemap\*(C'\fR upgraded to version 0.02
.RS 4
.IP "\(bu" 4
Internal cleanup
.RE
.RS 4
.RE
.SH "Utility Changes"
.IX Header "Utility Changes"
.ie n .SS """h2xs"" enhancements"
.el .SS "\f(CWh2xs\fP enhancements"
.IX Subsection "h2xs enhancements"
\&\f(CW\*(C`h2xs\*(C'\fR implements new option \f(CW\*(C`\-\-use\-xsloader\*(C'\fR to force use of
\&\f(CW\*(C`XSLoader\*(C'\fR even in backwards compatible modules.
.PP
The handling of authors' names that had apostrophes has been fixed.
.PP
Any enums with negative values are now skipped.
.ie n .SS """perlivp"" enhancements"
.el .SS "\f(CWperlivp\fP enhancements"
.IX Subsection "perlivp enhancements"
\&\f(CW\*(C`perlivp\*(C'\fR implements new option \f(CW\*(C`\-a\*(C'\fR and will not check for \fI*.ph\fR
files by default any more.  Use the \f(CW\*(C`\-a\*(C'\fR option to run \fIall\fR tests.
.SH "New Documentation"
.IX Header "New Documentation"
The perlglossary manpage is a glossary of terms used in the Perl
documentation, technical and otherwise, kindly provided by O'Reilly Media,
inc.
.SH "Performance Enhancements"
.IX Header "Performance Enhancements"
.IP "\(bu" 4
Weak reference creation is now \fIO(1)\fR rather than \fIO(n)\fR, courtesy of
Nicholas Clark. Weak reference deletion remains \fIO(n)\fR, but if deletion only
happens at program exit, it may be skipped completely.
.IP "\(bu" 4
Salvador Fandin\*~o provided improvements to reduce the memory usage of \f(CW\*(C`sort\*(C'\fR
and to speed up some cases.
.IP "\(bu" 4
Jarkko Hietaniemi and Andy Lester worked to mark as much data as possible in
the C source files as \f(CW\*(C`static\*(C'\fR, to increase the proportion of the executable
file that the operating system can share between process, and thus reduce
real memory usage on multi-user systems.
.SH "Installation and Configuration Improvements"
.IX Header "Installation and Configuration Improvements"
Parallel makes should work properly now, although there may still be problems
if \f(CW\*(C`make test\*(C'\fR is instructed to run in parallel.
.PP
Building with Borland's compilers on Win32 should work more smoothly. In
particular Steve Hay has worked to side step many warnings emitted by their
compilers and at least one C compiler internal error.
.PP
\&\f(CW\*(C`Configure\*(C'\fR will now detect \f(CW\*(C`clearenv\*(C'\fR and \f(CW\*(C`unsetenv\*(C'\fR, thanks to a patch
from Alan Burlison. It will also probe for \f(CW\*(C`futimes\*(C'\fR and whether \f(CW\*(C`sprintf\*(C'\fR
correctly returns the length of the formatted string, which will both be used
in perl 5.8.9.
.PP
There are improved hints for next\-3.0, vmesa, \s-1IX,\s0 Darwin, Solaris, Linux,
\&\s-1DEC/OSF,\s0 HP-UX and MPE/iX
.PP
Perl extensions on Windows now can be statically built into the Perl \s-1DLL,\s0
thanks to a work by Vadim Konovalov. (This improvement was actually in 5.8.7,
but was accidentally omitted from perl587delta).
.SH "Selected Bug Fixes"
.IX Header "Selected Bug Fixes"
.SS "no warnings 'category' works correctly with \-w"
.IX Subsection "no warnings 'category' works correctly with -w"
Previously when running with warnings enabled globally via \f(CW\*(C`\-w\*(C'\fR, selective
disabling of specific warning categories would actually turn off all warnings.
This is now fixed; now \f(CW\*(C`no warnings \*(Aqio\*(Aq;\*(C'\fR will only turn off warnings in the
\&\f(CW\*(C`io\*(C'\fR class. Previously it would erroneously turn off all warnings.
.PP
This bug fix may cause some programs to start correctly issuing warnings.
.SS "Remove over-optimisation"
.IX Subsection "Remove over-optimisation"
Perl 5.8.4 introduced a change so that assignments of \f(CW\*(C`undef\*(C'\fR to a
scalar, or of an empty list to an array or a hash, were optimised away. As
this could cause problems when \f(CW\*(C`goto\*(C'\fR jumps were involved, this change
has been backed out.
.SS "\fIsprintf()\fP fixes"
.IX Subsection "sprintf() fixes"
Using the \fIsprintf()\fR function with some formats could lead to a buffer
overflow in some specific cases. This has been fixed, along with several
other bugs, notably in bounds checking.
.PP
In related fixes, it was possible for badly written code that did not follow
the documentation of \f(CW\*(C`Sys::Syslog\*(C'\fR to have formatting vulnerabilities.
\&\f(CW\*(C`Sys::Syslog\*(C'\fR has been changed to protect people from poor quality third
party code.
.SS "Debugger and Unicode slowdown"
.IX Subsection "Debugger and Unicode slowdown"
It had been reported that running under perl's debugger when processing
Unicode data could cause unexpectedly large slowdowns. The most likely cause
of this was identified and fixed by Nicholas Clark.
.SS "Smaller fixes"
.IX Subsection "Smaller fixes"
.IP "\(bu" 4
\&\f(CW\*(C`FindBin\*(C'\fR now works better with directories where access rights are more
restrictive than usual.
.IP "\(bu" 4
Several memory leaks in ithreads were closed. An improved implementation of
\&\f(CW\*(C`threads::shared\*(C'\fR is available on \s-1CPAN \-\s0 this will be merged into 5.8.9 if
it proves stable.
.IP "\(bu" 4
Trailing spaces are now trimmed from \f(CW$!\fR and \f(CW$^E\fR.
.IP "\(bu" 4
Operations that require perl to read a process's list of groups, such as reads
of \f(CW$(\fR and \f(CW$)\fR, now dynamically allocate memory rather than using a
fixed sized array. The fixed size array could cause C stack exhaustion on
systems configured to use large numbers of groups.
.IP "\(bu" 4
\&\f(CW\*(C`PerlIO::scalar\*(C'\fR now works better with non-default \f(CW$/\fR settings.
.IP "\(bu" 4
You can now use the \f(CW\*(C`x\*(C'\fR operator to repeat a \f(CW\*(C`qw//\*(C'\fR list. This used
to raise a syntax error.
.IP "\(bu" 4
The debugger now traces correctly execution in eval("")uated code that
contains #line directives.
.IP "\(bu" 4
The value of the \f(CW\*(C`open\*(C'\fR pragma is no longer ignored for three-argument
opens.
.IP "\(bu" 4
The optimisation of \f(CW\*(C`for (reverse @a)\*(C'\fR introduced in perl 5.8.6 could
misbehave when the array had undefined elements and was used in \s-1LVALUE\s0
context. Dave Mitchell provided a fix.
.IP "\(bu" 4
Some case insensitive matches between \s-1UTF\-8\s0 encoded data and 8 bit regexps,
and vice versa, could give malformed character warnings. These have been
fixed by Dave Mitchell and Yves Orton.
.IP "\(bu" 4
\&\f(CW\*(C`lcfirst\*(C'\fR and \f(CW\*(C`ucfirst\*(C'\fR could corrupt the string for certain cases where
the length \s-1UTF\-8\s0 encoding of the string in lower case, upper case or title
case differed. This was fixed by Nicholas Clark.
.IP "\(bu" 4
Perl will now use the C library calls \f(CW\*(C`unsetenv\*(C'\fR and \f(CW\*(C`clearenv\*(C'\fR if present
to delete keys from \f(CW%ENV\fR and delete \f(CW%ENV\fR entirely, thanks to a patch
from Alan Burlison.
.SH "New or Changed Diagnostics"
.IX Header "New or Changed Diagnostics"
.SS "Attempt to set length of freed array"
.IX Subsection "Attempt to set length of freed array"
This is a new warning, produced in situations such as this:
.PP
.Vb 2
\&    $r = do {my @a; \e$#a};
\&    $$r = 503;
.Ve
.SS "Non-string passed as bitmask"
.IX Subsection "Non-string passed as bitmask"
This is a new warning, produced when number has been passed as a argument to
\&\fIselect()\fR, instead of a bitmask.
.PP
.Vb 3
\&    # Wrong, will now warn
\&    $rin = fileno(STDIN);
\&    ($nfound,$timeleft) = select($rout=$rin, undef, undef, $timeout);
\&    
\&    # Should be
\&    $rin = \*(Aq\*(Aq;
\&    vec($rin,fileno(STDIN),1) = 1;
\&    ($nfound,$timeleft) = select($rout=$rin, undef, undef, $timeout);
.Ve
.SS "Search pattern not terminated or ternary operator parsed as search pattern"
.IX Subsection "Search pattern not terminated or ternary operator parsed as search pattern"
This syntax error indicates that the lexer couldn't find the final
delimiter of a \f(CW\*(C`?PATTERN?\*(C'\fR construct. Mentioning the ternary operator in
this error message makes it easier to diagnose syntax errors.
.SH "Changed Internals"
.IX Header "Changed Internals"
There has been a fair amount of refactoring of the \f(CW\*(C`C\*(C'\fR source code, partly to
make it tidier and more maintainable. The resulting object code and the
\&\f(CW\*(C`perl\*(C'\fR binary may well be smaller than 5.8.7, in particular due to a change
contributed by Dave Mitchell which reworked the warnings code to be
significantly smaller. Apart from being smaller and possibly faster, there
should be no user-detectable changes.
.PP
Andy Lester supplied many improvements to determine which function
parameters and local variables could actually be declared \f(CW\*(C`const\*(C'\fR to the C
compiler. Steve Peters provided new \f(CW*_set\fR macros and reworked the core to
use these rather than assigning to macros in \s-1LVALUE\s0 context.
.PP
Dave Mitchell improved the lexer debugging output under \f(CW\*(C`\-DT\*(C'\fR
.PP
Nicholas Clark changed the string buffer allocation so that it is now rounded
up to the next multiple of 4 (or 8 on platforms with 64 bit pointers). This
should reduce the number of calls to \f(CW\*(C`realloc\*(C'\fR without actually using any
extra memory.
.PP
The \f(CW\*(C`HV\*(C'\fR's array of \f(CW\*(C`HE*\*(C'\fRs is now allocated at the correct (minimal) size,
thanks to another change by Nicholas Clark. Compile with
\&\f(CW\*(C`\-DPERL_USE_LARGE_HV_ALLOC\*(C'\fR to use the old, sloppier, default.
.PP
For \s-1XS\s0 or embedding debugging purposes, if perl is compiled with
\&\f(CW\*(C`\-DDEBUG_LEAKING_SCALARS_FORK_DUMP\*(C'\fR in addition to
\&\f(CW\*(C`\-DDEBUG_LEAKING_SCALARS\*(C'\fR then a child process is \f(CW\*(C`fork\*(C'\fRed just before
global destruction, which is used to display the values of any scalars
found to have leaked at the end of global destruction. Without this, the
scalars have already been freed sufficiently at the point of detection that
it is impossible to produce any meaningful dump of their contents.  This
feature was implemented by the indefatigable Nicholas Clark, based on an idea
by Mike Giroux.
.SH "Platform Specific Problems"
.IX Header "Platform Specific Problems"
The optimiser on HP-UX 11.23 (Itanium 2) is currently partly disabled (scaled
down to +O1) when using \s-1HP\s0 C\-ANSI-C; the cause of problems at higher
optimisation levels is still unclear.
.PP
There are a handful of remaining test failures on \s-1VMS,\s0 mostly due to
test fixes and minor module tweaks with too many dependencies to
integrate into this release from the development stream, where they have
all been corrected.  The following is a list of expected failures with
the patch number of the fix where that is known:
.PP
.Vb 6
\&    ext/Devel/PPPort/t/ppphtest.t  #26913
\&    ext/List/Util/t/p_tainted.t    #26912
\&    lib/ExtUtils/t/PL_FILES.t      #26813
\&    lib/ExtUtils/t/basic.t         #26813
\&    t/io/fs.t
\&    t/op/cmp.t
.Ve
.SH "Reporting Bugs"
.IX Header "Reporting Bugs"
If you find what you think is a bug, you might check the articles
recently posted to the comp.lang.perl.misc newsgroup and the perl
bug database at http://bugs.perl.org.  There may also be
information at http://www.perl.org, the Perl Home Page.
.PP
If you believe you have an unreported bug, please run the \fBperlbug\fR
program included with your release.  Be sure to trim your bug down
to a tiny but sufficient test case.  Your bug report, along with the
output of \f(CW\*(C`perl \-V\*(C'\fR, will be sent off to perlbug@perl.org to be
analysed by the Perl porting team.  You can browse and search
the Perl 5 bugs at http://bugs.perl.org/
.SH "SEE ALSO"
.IX Header "SEE ALSO"
The \fIChanges\fR file for exhaustive details on what changed.
.PP
The \fI\s-1INSTALL\s0\fR file for how to build Perl.
.PP
The \fI\s-1README\s0\fR file for general stuff.
.PP
The \fIArtistic\fR and \fICopying\fR files for copyright information.
                                                                                                                                                                                                                                                                                                                   osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perl589delta.1                               0100644 0001750 0001750 00000215136 12566207434 023173  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERL589DELTA 1"
.TH PERL589DELTA 1 "2013-11-04" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perl589delta \- what is new for perl v5.8.9
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document describes differences between the 5.8.8 release and
the 5.8.9 release.
.SH "Notice"
.IX Header "Notice"
The 5.8.9 release will be the last significant release of the 5.8.x
series. Any future releases of 5.8.x will likely only be to deal with
security issues, and platform build failures. Hence you should look to
migrating to 5.10.x, if you have not started already.
See \*(L"Known Problems\*(R" for more information.
.SH "Incompatible Changes"
.IX Header "Incompatible Changes"
A particular construction in the source code of extensions written in \*(C+
may need changing. See \*(L"Changed Internals\*(R" for more details. All
extensions written in C, most written in \*(C+, and all existing compiled
extensions are unaffected. This was necessary to improve \*(C+ support.
.PP
Other than this, there are no changes intentionally incompatible with 5.8.8.
If any exist, they are bugs and reports are welcome.
.SH "Core Enhancements"
.IX Header "Core Enhancements"
.SS "Unicode Character Database 5.1.0."
.IX Subsection "Unicode Character Database 5.1.0."
The copy of the Unicode Character Database included in Perl 5.8 has
been updated to 5.1.0 from 4.1.0. See
<http://www.unicode.org/versions/Unicode5.1.0/#NotableChanges> for the
notable changes.
.SS "stat and \-X on directory handles"
.IX Subsection "stat and -X on directory handles"
It is now possible to call \f(CW\*(C`stat\*(C'\fR and the \f(CW\*(C`\-X\*(C'\fR filestat operators on
directory handles. As both directory and file handles are barewords, there
can be ambiguities over which was intended. In these situations the file
handle semantics are preferred. Both also treat \f(CW*FILE{IO}\fR filehandles
like \f(CW*FILE\fR filehandles.
.ie n .SS "Source filters in @INC"
.el .SS "Source filters in \f(CW@INC\fP"
.IX Subsection "Source filters in @INC"
It's possible to enhance the mechanism of subroutine hooks in \f(CW@INC\fR by
adding a source filter on top of the filehandle opened and returned by the
hook. This feature was planned a long time ago, but wasn't quite working
until now. See \*(L"require\*(R" in perlfunc for details. (Nicholas Clark)
.SS "Exceptions in constant folding"
.IX Subsection "Exceptions in constant folding"
The constant folding routine is now wrapped in an exception handler, and
if folding throws an exception (such as attempting to evaluate 0/0), perl
now retains the current optree, rather than aborting the whole program.
Without this change, programs would not compile if they had expressions that
happened to generate exceptions, even though those expressions were in code
that could never be reached at runtime. (Nicholas Clark, Dave Mitchell)
.ie n .SS """no VERSION"""
.el .SS "\f(CWno VERSION\fP"
.IX Subsection "no VERSION"
You can now use \f(CW\*(C`no\*(C'\fR followed by a version number to specify that you
want to use a version of perl older than the specified one.
.SS "Improved internal \s-1UTF\-8\s0 caching code"
.IX Subsection "Improved internal UTF-8 caching code"
The code that caches calculated \s-1UTF\-8\s0 byte offsets for character offsets for
a string has been re-written. Several bugs have been located and eliminated,
and the code now makes better use of the information it has, so should be
faster. In particular, it doesn't scan to the end of a string before
calculating an offset within the string, which should speed up some operations
on long strings. It is now possible to disable the caching code at run time,
to verify that it is not the cause of suspected problems.
.SS "Runtime relocatable installations"
.IX Subsection "Runtime relocatable installations"
There is now \fIConfigure\fR support for creating a perl tree that is relocatable
at run time. see \*(L"Relocatable installations\*(R".
.SS "New internal variables"
.IX Subsection "New internal variables"
.ie n .IP """${^CHILD_ERROR_NATIVE}""" 4
.el .IP "\f(CW${^CHILD_ERROR_NATIVE}\fR" 4
.IX Item "${^CHILD_ERROR_NATIVE}"
This variable gives the native status returned by the last pipe close,
backtick command, successful call to \f(CW\*(C`wait\*(C'\fR or \f(CW\*(C`waitpid\*(C'\fR, or from the
\&\f(CW\*(C`system\*(C'\fR operator. See perlvar for details. (Contributed by Gisle Aas.)
.ie n .IP """${^UTF8CACHE}""" 4
.el .IP "\f(CW${^UTF8CACHE}\fR" 4
.IX Item "${^UTF8CACHE}"
This variable controls the state of the internal \s-1UTF\-8\s0 offset caching code.
1 for on (the default), 0 for off, \-1 to debug the caching code by checking
all its results against linear scans, and panicking on any discrepancy.
.ie n .SS """readpipe"" is now overridable"
.el .SS "\f(CWreadpipe\fP is now overridable"
.IX Subsection "readpipe is now overridable"
The built-in function \f(CW\*(C`readpipe\*(C'\fR is now overridable. Overriding it permits
also to override its operator counterpart, \f(CW\*(C`qx//\*(C'\fR (also known as \f(CW\*(C`\`\`\*(C'\fR).
.SS "simple exception handling macros"
.IX Subsection "simple exception handling macros"
Perl 5.8.9 (and 5.10.0 onwards) now provides a couple of macros to do very
basic exception handling in \s-1XS\s0 modules. You can use these macros if you call
code that may \f(CW\*(C`croak\*(C'\fR, but you need to do some cleanup before giving control
back to Perl. See \*(L"Exception Handling\*(R" in perlguts for more details.
.SS "\-D option enhancements"
.IX Subsection "-D option enhancements"
.IP "\(bu" 4
\&\f(CW\*(C`\-Dq\*(C'\fR suppresses the \fI\s-1EXECUTING...\s0\fR message when running under \f(CW\*(C`\-D\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`\-Dl\*(C'\fR logs runops loop entry and exit, and jump level popping.
.IP "\(bu" 4
\&\f(CW\*(C`\-Dv\*(C'\fR displays the process id as part of the trace output.
.SS "XS-assisted \s-1SWASHGET\s0"
.IX Subsection "XS-assisted SWASHGET"
Some pure-perl code that the regexp engine was using to retrieve Unicode
properties and transliteration mappings has been reimplemented in \s-1XS\s0
for faster execution.
(\s-1SADAHIRO\s0 Tomoyuki)
.SS "Constant subroutines"
.IX Subsection "Constant subroutines"
The interpreter internals now support a far more memory efficient form of
inlineable constants. Storing a reference to a constant value in a symbol
table is equivalent to a full typeglob referencing a constant subroutine,
but using about 400 bytes less memory. This proxy constant subroutine is
automatically upgraded to a real typeglob with subroutine if necessary.
The approach taken is analogous to the existing space optimisation for
subroutine stub declarations, which are stored as plain scalars in place
of the full typeglob.
.PP
However, to aid backwards compatibility of existing code, which (wrongly)
does not expect anything other than typeglobs in symbol tables, nothing in
core uses this feature, other than the regression tests.
.PP
Stubs for prototyped subroutines have been stored in symbol tables as plain
strings, and stubs for unprototyped subroutines as the number \-1, since 5.005,
so code which assumes that the core only places typeglobs in symbol tables
has been making incorrect assumptions for over 10 years.
.SH "New Platforms"
.IX Header "New Platforms"
Compile support added for:
.IP "\(bu" 4
DragonFlyBSD
.IP "\(bu" 4
MidnightBSD
.IP "\(bu" 4
MirOS \s-1BSD\s0
.IP "\(bu" 4
\&\s-1RISC OS \s0
.IP "\(bu" 4
Cray XT4/Catamount
.SH "Modules and Pragmata"
.IX Header "Modules and Pragmata"
.SS "New Modules"
.IX Subsection "New Modules"
.IP "\(bu" 4
\&\f(CW\*(C`Module::Pluggable\*(C'\fR is a simple framework to create modules that accept
pluggable sub-modules. The bundled version is 3.8
.IP "\(bu" 4
\&\f(CW\*(C`Module::CoreList\*(C'\fR is a hash of hashes that is keyed on perl version as
indicated in \f(CW$]\fR. The bundled version is 2.17
.IP "\(bu" 4
\&\f(CW\*(C`Win32API::File\*(C'\fR now available in core on Microsoft Windows. The bundled
version is 0.1001_01
.IP "\(bu" 4
\&\f(CW\*(C`Devel::InnerPackage\*(C'\fR finds all the packages defined by a single file. It is
part of the \f(CW\*(C`Module::Pluggable\*(C'\fR distribution. The bundled version is 0.3
.SS "Updated Modules"
.IX Subsection "Updated Modules"
.IP "\(bu" 4
\&\f(CW\*(C`attributes\*(C'\fR upgraded to version 0.09
.IP "\(bu" 4
\&\f(CW\*(C`AutoLoader\*(C'\fR upgraded to version 5.67
.IP "\(bu" 4
\&\f(CW\*(C`AutoSplit\*(C'\fR upgraded to 1.06
.IP "\(bu" 4
\&\f(CW\*(C`autouse\*(C'\fR upgraded to version 1.06
.IP "\(bu" 4
\&\f(CW\*(C`B\*(C'\fR upgraded from 1.09_01 to 1.19
.RS 4
.IP "\(bu" 4
provides new pad related abstraction macros \f(CW\*(C`B::NV::COP_SEQ_RANGE_LOW\*(C'\fR,
\&\f(CW\*(C`B::NV::COP_SEQ_RANGE_HIGH\*(C'\fR, \f(CW\*(C`B::NV::PARENT_PAD_INDEX\*(C'\fR,
\&\f(CW\*(C`B::NV::PARENT_FAKELEX_FLAGS\*(C'\fR, which hides the difference in storage in
5.10.0 and later.
.IP "\(bu" 4
provides \f(CW\*(C`B::sub_generation\*(C'\fR, which exposes \f(CW\*(C`PL_sub_generation\*(C'\fR
.IP "\(bu" 4
provides \f(CW\*(C`B::GV::isGV_with_GP\*(C'\fR, which on pre\-5.10 perls always returns true.
.IP "\(bu" 4
New type \f(CW\*(C`B::HE\*(C'\fR added with methods \f(CW\*(C`VAL\*(C'\fR, \f(CW\*(C`HASH\*(C'\fR and \f(CW\*(C`SVKEY_force\*(C'\fR
.IP "\(bu" 4
The \f(CW\*(C`B::GVf_IMPORTED_CV\*(C'\fR flag is now set correctly when a proxy
constant subroutine is imported.
.IP "\(bu" 4
bugs fixed in the handling of \f(CW\*(C`PMOP\*(C'\fRs.
.IP "\(bu" 4
\&\f(CW\*(C`B::BM::PREVIOUS\*(C'\fR returns now \f(CW\*(C`U32\*(C'\fR, not \f(CW\*(C`U16\*(C'\fR.
\&\f(CW\*(C`B::CV::START\*(C'\fR and \f(CW\*(C`B:CV::ROOT\*(C'\fR return now \f(CW\*(C`NULL\*(C'\fR on an \s-1XSUB,
\&\s0\f(CW\*(C`B::CV::XSUB\*(C'\fR and \f(CW\*(C`B::CV::XSUBANY\*(C'\fR return 0 on a non-XSUB.
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`B::C\*(C'\fR upgraded to 1.05
.IP "\(bu" 4
\&\f(CW\*(C`B::Concise\*(C'\fR upgraded to 0.76
.RS 4
.IP "\(bu" 4
new option \f(CW\*(C`\-src\*(C'\fR causes the rendering of each statement (starting with
the nextstate \s-1OP\s0) to be preceded by the first line of source code that
generates it.
.IP "\(bu" 4
new option \f(CW\*(C`\-stash="somepackage"\*(C'\fR, \f(CW\*(C`require\*(C'\fRs \*(L"somepackage\*(R", and then renders
each function defined in its namespace.
.IP "\(bu" 4
now has documentation of detailed hint symbols.
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`B::Debug\*(C'\fR upgraded to version 1.05
.IP "\(bu" 4
\&\f(CW\*(C`B::Deparse\*(C'\fR upgraded to version 0.87
.RS 4
.IP "\(bu" 4
properly deparse \f(CW\*(C`print readpipe $x, $y\*(C'\fR.
.IP "\(bu" 4
now handles \f(CW\*(C`\*(Aq\*(Aq\-\*(C'\fR()>, \f(CW\*(C`::()\*(C'\fR, \f(CW\*(C`sub :: {}\*(C'\fR, \fIetc.\fR correctly [\s-1RT\s0 #43010].
All bugs in parsing these kinds of syntax are now fixed:
.Sp
.Vb 5
\&    perl \-MO=Deparse \-e \*(Aq"my %h = "\->()\*(Aq
\&    perl \-MO=Deparse \-e \*(Aq::\->()\*(Aq
\&    perl \-MO=Deparse \-e \*(Aqsub :: {}\*(Aq
\&    perl \-MO=Deparse \-e \*(Aqpackage a; sub a::b::c {}\*(Aq
\&    perl \-MO=Deparse \-e \*(Aqsub the::main::road {}\*(Aq
.Ve
.IP "\(bu" 4
does \fBnot\fR deparse \f(CW$^H{v_string}\fR, which is automatically set by the
internals.
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`B::Lint\*(C'\fR upgraded to version 1.11
.IP "\(bu" 4
\&\f(CW\*(C`B::Terse\*(C'\fR upgraded to version 1.05
.IP "\(bu" 4
\&\f(CW\*(C`base\*(C'\fR upgraded to version 2.13
.RS 4
.IP "\(bu" 4
loading a module via base.pm would mask a global \f(CW$SIG{_\|_DIE_\|_}\fR in that
module.
.IP "\(bu" 4
push all classes at once in \f(CW@ISA\fR
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Benchmark\*(C'\fR upgraded to version 1.10
.IP "\(bu" 4
\&\f(CW\*(C`bigint\*(C'\fR upgraded to 0.23
.IP "\(bu" 4
\&\f(CW\*(C`bignum\*(C'\fR upgraded to 0.23
.IP "\(bu" 4
\&\f(CW\*(C`bigrat\*(C'\fR upgraded to 0.23
.IP "\(bu" 4
\&\f(CW\*(C`blib\*(C'\fR upgraded to 0.04
.IP "\(bu" 4
\&\f(CW\*(C`Carp\*(C'\fR upgraded to version 1.10
.Sp
The argument backtrace code now shows \f(CW\*(C`undef\*(C'\fR as \f(CW\*(C`undef\*(C'\fR,
instead of a string \fI\*(L"undef\*(R"\fR.
.IP "\(bu" 4
\&\f(CW\*(C`CGI\*(C'\fR upgraded to version 3.42
.IP "\(bu" 4
\&\f(CW\*(C`charnames\*(C'\fR upgraded to 1.06
.IP "\(bu" 4
\&\f(CW\*(C`constant\*(C'\fR upgraded to version 1.17
.IP "\(bu" 4
\&\f(CW\*(C`CPAN\*(C'\fR upgraded to version 1.9301
.IP "\(bu" 4
\&\f(CW\*(C`Cwd\*(C'\fR upgraded to version 3.29 with some platform specific
improvements (including for \s-1VMS\s0).
.IP "\(bu" 4
\&\f(CW\*(C`Data::Dumper\*(C'\fR upgraded to version 2.121_17
.RS 4
.IP "\(bu" 4
Fixes hash iterator current position with the pure Perl version [\s-1RT\s0 #40668]
.IP "\(bu" 4
Performance enhancements, which will be most evident on platforms where
repeated calls to C's \f(CW\*(C`realloc()\*(C'\fR are slow, such as Win32.
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`DB_File\*(C'\fR upgraded to version 1.817
.IP "\(bu" 4
\&\f(CW\*(C`DB_Filter\*(C'\fR upgraded to version 0.02
.IP "\(bu" 4
\&\f(CW\*(C`Devel::DProf\*(C'\fR upgraded to version 20080331.00
.IP "\(bu" 4
\&\f(CW\*(C`Devel::Peek\*(C'\fR upgraded to version 1.04
.IP "\(bu" 4
\&\f(CW\*(C`Devel::PPPort\*(C'\fR upgraded to version 3.14
.IP "\(bu" 4
\&\f(CW\*(C`diagnostics\*(C'\fR upgraded to version 1.16
.IP "\(bu" 4
\&\f(CW\*(C`Digest\*(C'\fR upgraded to version 1.15
.IP "\(bu" 4
\&\f(CW\*(C`Digest::MD5\*(C'\fR upgraded to version 2.37
.IP "\(bu" 4
\&\f(CW\*(C`DirHandle\*(C'\fR upgraded to version 1.02
.RS 4
.IP "\(bu" 4
now localises \f(CW$.\fR, \f(CW$@\fR, \f(CW$!\fR, \f(CW$^E\fR, and \f(CW$?\fR before closing the
directory handle to suppress leaking any side effects of warnings about it
already being closed.
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`DynaLoader\*(C'\fR upgraded to version 1.09
.Sp
\&\f(CW\*(C`DynaLoader\*(C'\fR can now dynamically load a loadable object from a file with a
non-default file extension.
.IP "\(bu" 4
\&\f(CW\*(C`Encode\*(C'\fR upgraded to version 2.26
.Sp
\&\f(CW\*(C`Encode::Alias\*(C'\fR includes a fix for encoding \*(L"646\*(R" on Solaris (better known as
\&\s-1ASCII\s0).
.IP "\(bu" 4
\&\f(CW\*(C`English\*(C'\fR upgraded to version 1.03
.IP "\(bu" 4
\&\f(CW\*(C`Errno\*(C'\fR upgraded to version 1.10
.IP "\(bu" 4
\&\f(CW\*(C`Exporter\*(C'\fR upgraded to version 5.63
.IP "\(bu" 4
\&\f(CW\*(C`ExtUtils::Command\*(C'\fR upgraded to version 1.15
.IP "\(bu" 4
\&\f(CW\*(C`ExtUtils::Constant\*(C'\fR upgraded to version 0.21
.IP "\(bu" 4
\&\f(CW\*(C`ExtUtils::Embed\*(C'\fR upgraded to version 1.28
.IP "\(bu" 4
\&\f(CW\*(C`ExtUtils::Install\*(C'\fR upgraded to version 1.50_01
.IP "\(bu" 4
\&\f(CW\*(C`ExtUtils::Installed\*(C'\fR upgraded to version 1.43
.IP "\(bu" 4
\&\f(CW\*(C`ExtUtils::MakeMaker\*(C'\fR upgraded to version 6.48
.RS 4
.IP "\(bu" 4
support for \f(CW\*(C`INSTALLSITESCRIPT\*(C'\fR and \f(CW\*(C`INSTALLVENDORSCRIPT\*(C'\fR
configuration.
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`ExtUtils::Manifest\*(C'\fR upgraded to version 1.55
.IP "\(bu" 4
\&\f(CW\*(C`ExtUtils::ParseXS\*(C'\fR upgraded to version 2.19
.IP "\(bu" 4
\&\f(CW\*(C`Fatal\*(C'\fR upgraded to version 1.06
.RS 4
.IP "\(bu" 4
allows built-ins in \f(CW\*(C`CORE::GLOBAL\*(C'\fR to be made fatal.
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Fcntl\*(C'\fR upgraded to version 1.06
.IP "\(bu" 4
\&\f(CW\*(C`fields\*(C'\fR upgraded to version 2.12
.IP "\(bu" 4
\&\f(CW\*(C`File::Basename\*(C'\fR upgraded to version 2.77
.IP "\(bu" 4
\&\f(CW\*(C`FileCache\*(C'\fR upgraded to version 1.07
.IP "\(bu" 4
\&\f(CW\*(C`File::Compare\*(C'\fR upgraded to 1.1005
.IP "\(bu" 4
\&\f(CW\*(C`File::Copy\*(C'\fR upgraded to 2.13
.RS 4
.IP "\(bu" 4
now uses 3\-arg open.
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`File::DosGlob\*(C'\fR upgraded to 1.01
.IP "\(bu" 4
\&\f(CW\*(C`File::Find\*(C'\fR upgraded to version 1.13
.IP "\(bu" 4
\&\f(CW\*(C`File::Glob\*(C'\fR upgraded to version 1.06
.RS 4
.IP "\(bu" 4
fixes spurious results with brackets inside braces.
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`File::Path\*(C'\fR upgraded to version 2.07_02
.IP "\(bu" 4
\&\f(CW\*(C`File::Spec\*(C'\fR upgraded to version 3.29
.RS 4
.IP "\(bu" 4
improved handling of bad arguments.
.IP "\(bu" 4
some platform specific improvements (including for \s-1VMS\s0 and Cygwin), with
an optimisation on \f(CW\*(C`abs2rel\*(C'\fR when handling both relative arguments.
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`File::stat\*(C'\fR upgraded to version 1.01
.IP "\(bu" 4
\&\f(CW\*(C`File::Temp\*(C'\fR upgraded to version 0.20
.IP "\(bu" 4
\&\f(CW\*(C`filetest\*(C'\fR upgraded to version 1.02
.IP "\(bu" 4
\&\f(CW\*(C`Filter::Util::Call\*(C'\fR upgraded to version 1.07
.IP "\(bu" 4
\&\f(CW\*(C`Filter::Simple\*(C'\fR upgraded to version 0.83
.IP "\(bu" 4
\&\f(CW\*(C`FindBin\*(C'\fR upgraded to version 1.49
.IP "\(bu" 4
\&\f(CW\*(C`GDBM_File\*(C'\fR upgraded to version 1.09
.IP "\(bu" 4
\&\f(CW\*(C`Getopt::Long\*(C'\fR upgraded to version 2.37
.IP "\(bu" 4
\&\f(CW\*(C`Getopt::Std\*(C'\fR upgraded to version 1.06
.IP "\(bu" 4
\&\f(CW\*(C`Hash::Util\*(C'\fR upgraded to version 0.06
.IP "\(bu" 4
\&\f(CW\*(C`if\*(C'\fR upgraded to version 0.05
.IP "\(bu" 4
\&\f(CW\*(C`IO\*(C'\fR upgraded to version 1.23
.Sp
Reduced number of calls to \f(CW\*(C`getpeername\*(C'\fR in \f(CW\*(C`IO::Socket\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`IPC::Open\*(C'\fR upgraded to version 1.03
.IP "\(bu" 4
\&\f(CW\*(C`IPC::Open3\*(C'\fR upgraded to version 1.03
.IP "\(bu" 4
\&\f(CW\*(C`IPC::SysV\*(C'\fR upgraded to version 2.00
.IP "\(bu" 4
\&\f(CW\*(C`lib\*(C'\fR upgraded to version 0.61
.RS 4
.IP "\(bu" 4
avoid warning about loading \fI.par\fR files.
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`libnet\*(C'\fR upgraded to version 1.22
.IP "\(bu" 4
\&\f(CW\*(C`List::Util\*(C'\fR upgraded to 1.19
.IP "\(bu" 4
\&\f(CW\*(C`Locale::Maketext\*(C'\fR upgraded to 1.13
.IP "\(bu" 4
\&\f(CW\*(C`Math::BigFloat\*(C'\fR upgraded to version 1.60
.IP "\(bu" 4
\&\f(CW\*(C`Math::BigInt\*(C'\fR upgraded to version 1.89
.IP "\(bu" 4
\&\f(CW\*(C`Math::BigRat\*(C'\fR upgraded to version 0.22
.RS 4
.IP "\(bu" 4
implements new \f(CW\*(C`as_float\*(C'\fR method.
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Math::Complex\*(C'\fR upgraded to version 1.54.
.IP "\(bu" 4
\&\f(CW\*(C`Math::Trig\*(C'\fR upgraded to version 1.18.
.IP "\(bu" 4
\&\f(CW\*(C`NDBM_File\*(C'\fR upgraded to version 1.07
.RS 4
.IP "\(bu" 4
improve \fIg++\fR handling for systems using \s-1GDBM\s0 compatibility headers.
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Net::Ping\*(C'\fR upgraded to version 2.35
.IP "\(bu" 4
\&\f(CW\*(C`NEXT\*(C'\fR upgraded to version 0.61
.RS 4
.IP "\(bu" 4
fix several bugs with \f(CW\*(C`NEXT\*(C'\fR when working with \f(CW\*(C`AUTOLOAD\*(C'\fR, \f(CW\*(C`eval\*(C'\fR block, and
within overloaded stringification.
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`ODBM_File\*(C'\fR upgraded to 1.07
.IP "\(bu" 4
\&\f(CW\*(C`open\*(C'\fR upgraded to 1.06
.IP "\(bu" 4
\&\f(CW\*(C`ops\*(C'\fR upgraded to 1.02
.IP "\(bu" 4
\&\f(CW\*(C`PerlIO::encoding\*(C'\fR upgraded to version 0.11
.IP "\(bu" 4
\&\f(CW\*(C`PerlIO::scalar\*(C'\fR upgraded to version 0.06
.RS 4
.IP "\(bu" 4
[\s-1RT\s0 #40267] \f(CW\*(C`PerlIO::scalar\*(C'\fR doesn't respect readonly-ness.
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`PerlIO::via\*(C'\fR upgraded to version 0.05
.IP "\(bu" 4
\&\f(CW\*(C`Pod::Html\*(C'\fR upgraded to version 1.09
.IP "\(bu" 4
\&\f(CW\*(C`Pod::Parser\*(C'\fR upgraded to version 1.35
.IP "\(bu" 4
\&\f(CW\*(C`Pod::Usage\*(C'\fR upgraded to version 1.35
.IP "\(bu" 4
\&\f(CW\*(C`POSIX\*(C'\fR upgraded to version 1.15
.RS 4
.IP "\(bu" 4
\&\f(CW\*(C`POSIX\*(C'\fR constants that duplicate those in \f(CW\*(C`Fcntl\*(C'\fR are now imported from
\&\f(CW\*(C`Fcntl\*(C'\fR and re-exported, rather than being duplicated by \f(CW\*(C`POSIX\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`POSIX::remove\*(C'\fR can remove empty directories.
.IP "\(bu" 4
\&\f(CW\*(C`POSIX::setlocale\*(C'\fR safer to call multiple times.
.IP "\(bu" 4
\&\f(CW\*(C`POSIX::SigRt\*(C'\fR added, which provides access to \s-1POSIX\s0 realtime signal
functionality on systems that support it.
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`re\*(C'\fR upgraded to version 0.06_01
.IP "\(bu" 4
\&\f(CW\*(C`Safe\*(C'\fR upgraded to version 2.16
.IP "\(bu" 4
\&\f(CW\*(C`Scalar::Util\*(C'\fR upgraded to 1.19
.IP "\(bu" 4
\&\f(CW\*(C`SDBM_File\*(C'\fR upgraded to version 1.06
.IP "\(bu" 4
\&\f(CW\*(C`SelfLoader\*(C'\fR upgraded to version 1.17
.IP "\(bu" 4
\&\f(CW\*(C`Shell\*(C'\fR upgraded to version 0.72
.IP "\(bu" 4
\&\f(CW\*(C`sigtrap\*(C'\fR upgraded to version 1.04
.IP "\(bu" 4
\&\f(CW\*(C`Socket\*(C'\fR upgraded to version 1.81
.RS 4
.IP "\(bu" 4
this fixes an optimistic use of \f(CW\*(C`gethostbyname\*(C'\fR
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Storable\*(C'\fR upgraded to 2.19
.IP "\(bu" 4
\&\f(CW\*(C`Switch\*(C'\fR upgraded to version 2.13
.IP "\(bu" 4
\&\f(CW\*(C`Sys::Syslog\*(C'\fR upgraded to version 0.27
.IP "\(bu" 4
\&\f(CW\*(C`Term::ANSIColor\*(C'\fR upgraded to version 1.12
.IP "\(bu" 4
\&\f(CW\*(C`Term::Cap\*(C'\fR upgraded to version 1.12
.IP "\(bu" 4
\&\f(CW\*(C`Term::ReadLine\*(C'\fR upgraded to version 1.03
.IP "\(bu" 4
\&\f(CW\*(C`Test::Builder\*(C'\fR upgraded to version 0.80
.IP "\(bu" 4
\&\f(CW\*(C`Test::Harness\*(C'\fR upgraded version to 2.64
.RS 4
.IP "\(bu" 4
this makes it able to handle newlines.
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Test::More\*(C'\fR upgraded to version 0.80
.IP "\(bu" 4
\&\f(CW\*(C`Test::Simple\*(C'\fR upgraded to version 0.80
.IP "\(bu" 4
\&\f(CW\*(C`Text::Balanced\*(C'\fR upgraded to version 1.98
.IP "\(bu" 4
\&\f(CW\*(C`Text::ParseWords\*(C'\fR upgraded to version 3.27
.IP "\(bu" 4
\&\f(CW\*(C`Text::Soundex\*(C'\fR upgraded to version 3.03
.IP "\(bu" 4
\&\f(CW\*(C`Text::Tabs\*(C'\fR upgraded to version 2007.1117
.IP "\(bu" 4
\&\f(CW\*(C`Text::Wrap\*(C'\fR upgraded to version 2006.1117
.IP "\(bu" 4
\&\f(CW\*(C`Thread\*(C'\fR upgraded to version 2.01
.IP "\(bu" 4
\&\f(CW\*(C`Thread::Semaphore\*(C'\fR upgraded to version 2.09
.IP "\(bu" 4
\&\f(CW\*(C`Thread::Queue\*(C'\fR upgraded to version 2.11
.RS 4
.IP "\(bu" 4
added capability to add complex structures (e.g., hash of hashes) to queues.
.IP "\(bu" 4
added capability to dequeue multiple items at once.
.IP "\(bu" 4
added new methods to inspect and manipulate queues:  \f(CW\*(C`peek\*(C'\fR, \f(CW\*(C`insert\*(C'\fR and
\&\f(CW\*(C`extract\*(C'\fR
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Tie::Handle\*(C'\fR upgraded to version 4.2
.IP "\(bu" 4
\&\f(CW\*(C`Tie::Hash\*(C'\fR upgraded to version 1.03
.IP "\(bu" 4
\&\f(CW\*(C`Tie::Memoize\*(C'\fR upgraded to version 1.1
.RS 4
.IP "\(bu" 4
\&\f(CW\*(C`Tie::Memoize::EXISTS\*(C'\fR now correctly caches its results.
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Tie::RefHash\*(C'\fR upgraded to version 1.38
.IP "\(bu" 4
\&\f(CW\*(C`Tie::Scalar\*(C'\fR upgraded to version 1.01
.IP "\(bu" 4
\&\f(CW\*(C`Tie::StdHandle\*(C'\fR upgraded to version 4.2
.IP "\(bu" 4
\&\f(CW\*(C`Time::gmtime\*(C'\fR upgraded to version 1.03
.IP "\(bu" 4
\&\f(CW\*(C`Time::Local\*(C'\fR upgraded to version 1.1901
.IP "\(bu" 4
\&\f(CW\*(C`Time::HiRes\*(C'\fR upgraded to version 1.9715 with various build improvements 
(including \s-1VMS\s0) and minor platform-specific bug fixes (including
for HP-UX 11 ia64).
.IP "\(bu" 4
\&\f(CW\*(C`threads\*(C'\fR upgraded to 1.71
.RS 4
.IP "\(bu" 4
new thread state information methods: \f(CW\*(C`is_running\*(C'\fR, \f(CW\*(C`is_detached\*(C'\fR
and \f(CW\*(C`is_joinable\*(C'\fR.  \f(CW\*(C`list\*(C'\fR method enhanced to return running or joinable
threads.
.IP "\(bu" 4
new thread signal method: \f(CW\*(C`kill\*(C'\fR
.IP "\(bu" 4
added capability to specify thread stack size.
.IP "\(bu" 4
added capability to control thread exiting behavior.  Added a new \f(CW\*(C`exit\*(C'\fR
method.
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`threads::shared\*(C'\fR upgraded to version 1.27
.RS 4
.IP "\(bu" 4
smaller and faster implementation that eliminates one internal structure and
the consequent level of indirection.
.IP "\(bu" 4
user locks are now stored in a safer manner.
.IP "\(bu" 4
new function \f(CW\*(C`shared_clone\*(C'\fR creates a copy of an object leaving
shared elements as-is and deep-cloning non-shared elements.
.IP "\(bu" 4
added new \f(CW\*(C`is_shared\*(C'\fR method.
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Unicode::Normalize\*(C'\fR upgraded to version 1.02
.IP "\(bu" 4
\&\f(CW\*(C`Unicode::UCD\*(C'\fR upgraded to version 0.25
.IP "\(bu" 4
\&\f(CW\*(C`warnings\*(C'\fR upgraded to version 1.05_01
.IP "\(bu" 4
\&\f(CW\*(C`Win32\*(C'\fR upgraded to version 0.38
.RS 4
.IP "\(bu" 4
added new function \f(CW\*(C`GetCurrentProcessId\*(C'\fR which returns the regular Windows
process identifier of the current process, even when called from within a fork.
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`XSLoader\*(C'\fR upgraded to version 0.10
.IP "\(bu" 4
\&\f(CW\*(C`XS::APItest\*(C'\fR and \f(CW\*(C`XS::Typemap\*(C'\fR are for internal use only and hence
no longer installed. Many more tests have been added to \f(CW\*(C`XS::APItest\*(C'\fR.
.SH "Utility Changes"
.IX Header "Utility Changes"
.SS "debugger upgraded to version 1.31"
.IX Subsection "debugger upgraded to version 1.31"
.IP "\(bu" 4
Andreas Ko\*:nig contributed two functions to save and load the debugger
history.
.IP "\(bu" 4
\&\f(CW\*(C`NEXT::AUTOLOAD\*(C'\fR no longer emits warnings under the debugger.
.IP "\(bu" 4
The debugger should now correctly find tty the device on \s-1OS X 10.5\s0 and \s-1VMS\s0
when the program \f(CW\*(C`fork\*(C'\fRs.
.IP "\(bu" 4
\&\s-1LVALUE\s0 subs now work inside the debugger.
.SS "\fIperlthanks\fP"
.IX Subsection "perlthanks"
Perl 5.8.9 adds a new utility \fIperlthanks\fR, which is a variant of \fIperlbug\fR,
but for sending non-bug-reports to the authors and maintainers of Perl.
Getting nothing but bug reports can become a bit demoralising \- we'll see if
this changes things.
.SS "\fIperlbug\fP"
.IX Subsection "perlbug"
\&\fIperlbug\fR now checks if you're reporting about a non-core module and suggests
you report it to the \s-1CPAN\s0 author instead.
.SS "\fIh2xs\fP"
.IX Subsection "h2xs"
.IP "\(bu" 4
won't define an empty string as a constant [\s-1RT\s0 #25366]
.IP "\(bu" 4
has examples for \f(CW\*(C`h2xs \-X\*(C'\fR
.SS "\fIh2ph\fP"
.IX Subsection "h2ph"
.IP "\(bu" 4
now attempts to deal sensibly with the difference in path implications
between \f(CW""\fR and \f(CW\*(C`<>\*(C'\fR quoting in \f(CW\*(C`#include\*(C'\fR statements.
.IP "\(bu" 4
now generates correct code for \f(CW\*(C`#if defined A || defined B\*(C'\fR
[\s-1RT\s0 #39130]
.SH "New Documentation"
.IX Header "New Documentation"
As usual, the documentation received its share of corrections, clarifications
and other nitfixes. More \f(CW\*(C`\*(C'\fR tags were added for indexing.
.IX Xref "..."
.PP
perlunitut is a tutorial written by Juerd Waalboer on Unicode-related
terminology and how to correctly handle Unicode in Perl scripts.
.PP
perlunicode is updated in section user defined properties.
.PP
perluniintro has been updated in the example of detecting data that is not
valid in particular encoding.
.PP
perlcommunity provides an overview of the Perl Community along with further
resources.
.PP
\&\s-1CORE\s0 documents the pseudo-namespace for Perl's core routines.
.SH "Changes to Existing Documentation"
.IX Header "Changes to Existing Documentation"
perlglossary adds \fIdeprecated modules and features\fR and \fIto be dropped modules\fR.
.PP
perlhack has been updated and added resources on smoke testing.
.PP
The Perl FAQs (\fIperlfaq1\fR..\fIperlfaq9\fR) have been updated.
.PP
perlcheat is updated with better details on \f(CW\*(C`\ew\*(C'\fR, \f(CW\*(C`\ed\*(C'\fR, and \f(CW\*(C`\es\*(C'\fR.
.PP
perldebug is updated with information on how to call the debugger.
.PP
perldiag documentation updated with \fIsubroutine with an ampersand\fR on the
argument to \f(CW\*(C`exists\*(C'\fR and \f(CW\*(C`delete\*(C'\fR and also several terminology updates on
warnings.
.PP
perlfork documents the limitation of \f(CW\*(C`exec\*(C'\fR inside pseudo-processes.
.PP
perlfunc:
.IP "\(bu" 4
Documentation is fixed in section \f(CW\*(C`caller\*(C'\fR and \f(CW\*(C`pop\*(C'\fR.
.IP "\(bu" 4
Function \f(CW\*(C`alarm\*(C'\fR now mentions \f(CW\*(C`Time::HiRes::ualarm\*(C'\fR in preference
to \f(CW\*(C`select\*(C'\fR.
.IP "\(bu" 4
Regarding precedence in \f(CW\*(C`\-X\*(C'\fR, filetest operators are the same as unary
operators, but not regarding parsing and parentheses (spotted by Eirik Berg
Hanssen).
.IP "\(bu" 4
\&\f(CW\*(C`reverse\*(C'\fR function documentation received scalar context examples.
.PP
perllocale documentation is adjusted for number localization and
\&\f(CW\*(C`POSIX::setlocale\*(C'\fR to fix Debian bug #379463.
.PP
perlmodlib is updated with \f(CW\*(C`CPAN::API::HOWTO\*(C'\fR and
\&\f(CW\*(C`Sys::Syslog::win32::Win32\*(C'\fR
.PP
perlre documentation updated to reflect the differences between
\&\f(CW\*(C`[[:xxxxx:]]\*(C'\fR and \f(CW\*(C`\ep{IsXxxxx}\*(C'\fR matches. Also added section on \f(CW\*(C`/g\*(C'\fR and
\&\f(CW\*(C`/c\*(C'\fR modifiers.
.PP
perlreguts describe the internals of the regular expressions engine. It has
been contributed by Yves Orton.
.PP
perlrebackslash describes all perl regular expression backslash and escape
sequences.
.PP
perlrecharclass describes the syntax and use of character classes in
Perl Regular Expressions.
.PP
perlrun is updated to clarify on the hash seed \fI\s-1PERL_HASH_SEED\s0\fR. Also more
information in options \f(CW\*(C`\-x\*(C'\fR and \f(CW\*(C`\-u\*(C'\fR.
.PP
perlsub example is updated to use a lexical variable for \f(CW\*(C`opendir\*(C'\fR syntax.
.PP
perlvar fixes confusion about real \s-1GID \s0\f(CW$(\fR and effective \s-1GID \s0\f(CW$)\fR.
.PP
Perl thread tutorial example is fixed in section
\&\*(L"Queues: Passing Data Around\*(R" in perlthrtut and perlthrtut.
.PP
perlhack documentation extensively improved by Jarkko Hietaniemi and others.
.PP
perltoot provides information on modifying \f(CW@UNIVERSAL::ISA\fR.
.PP
perlport documentation extended to include different \f(CW\*(C`kill(\-9, ...)\*(C'\fR
semantics on Windows. It also clearly states \f(CW\*(C`dump\*(C'\fR is not supported on Win32
and cygwin.
.PP
\&\fI\s-1INSTALL\s0\fR has been updated and modernised.
.SH "Performance Enhancements"
.IX Header "Performance Enhancements"
.IP "\(bu" 4
The default since perl 5.000 has been for perl to create an empty scalar
with every new typeglob. The increased use of lexical variables means that
most are now unused. Thanks to Nicholas Clark's efforts, Perl can now be
compiled with \f(CW\*(C`\-DPERL_DONT_CREATE_GVSV\*(C'\fR to avoid creating these empty scalars.
This will significantly decrease the number of scalars allocated for all
configurations, and the number of scalars that need to be copied for ithread
creation. Whilst this option is binary compatible with existing perl
installations, it does change a long-standing assumption about the
internals, hence it is not enabled by default, as some third party code may
rely on the old behaviour.
.Sp
We would recommend testing with this configuration on new deployments of
perl, particularly for multi-threaded servers, to see whether all third party
code is compatible with it, as this configuration may give useful performance
improvements. For existing installations we would not recommend changing to
this configuration unless thorough testing is performed before deployment.
.IP "\(bu" 4
\&\f(CW\*(C`diagnostics\*(C'\fR no longer uses \f(CW$&\fR, which results in large speedups
for regexp matching in all code using it.
.IP "\(bu" 4
Regular expressions classes of a single character are now treated the same as
if the character had been used as a literal, meaning that code that uses
char-classes as an escaping mechanism will see a speedup. (Yves Orton)
.IP "\(bu" 4
Creating anonymous array and hash references (ie. \f(CW\*(C`[]\*(C'\fR and \f(CW\*(C`{}\*(C'\fR) now incurs
no more overhead than creating an anonymous list or hash. Nicholas Clark
provided changes with a saving of two ops and one stack push, which was measured
as a slightly better than 5% improvement for these operations.
.IP "\(bu" 4
Many calls to \f(CW\*(C`strlen()\*(C'\fR have been eliminated, either because the length was
already known, or by adopting or enhancing APIs that pass lengths. This has
been aided by the adoption of a \f(CW\*(C`my_sprintf()\*(C'\fR wrapper, which returns the
correct C89 value \- the length of the formatted string. Previously we could
not rely on the return value of \f(CW\*(C`sprintf()\*(C'\fR, because on some ancient but
extant platforms it still returns \f(CW\*(C`char *\*(C'\fR.
.IP "\(bu" 4
\&\f(CW\*(C`index\*(C'\fR is now faster if the search string is stored in \s-1UTF\-8\s0 but only contains
characters in the Latin\-1 range.
.IP "\(bu" 4
The Unicode swatch cache inside the regexp engine is now used. (the lookup had
a key mismatch, present since the initial implementation). [\s-1RT\s0 #42839]
.SH "Installation and Configuration Improvements"
.IX Header "Installation and Configuration Improvements"
.SS "Relocatable installations"
.IX Subsection "Relocatable installations"
There is now \fIConfigure\fR support for creating a relocatable perl tree. If
you \fIConfigure\fR with \f(CW\*(C`\-Duserelocatableinc\*(C'\fR, then the paths in \f(CW@INC\fR (and
everything else in \f(CW%Config\fR) can be optionally located via the path of the
\&\fIperl\fR executable.
.PP
At start time, if any paths in \f(CW@INC\fR or \f(CW\*(C`Config\*(C'\fR that \fIConfigure\fR marked
as relocatable (by starting them with \f(CW".../"\fR), then they are prefixed the
directory of \f(CW$^X\fR. This allows the relocation can be configured on a
per-directory basis, although the default with \f(CW\*(C`\-Duserelocatableinc\*(C'\fR is that
everything is relocated. The initial install is done to the original configured
prefix.
.SS "Configuration improvements"
.IX Subsection "Configuration improvements"
\&\fIConfigure\fR is now better at removing temporary files. Tom Callaway
(from RedHat) also contributed patches that complete the set of flags
passed to the compiler and the linker, in particular that \f(CW\*(C`\-fPIC\*(C'\fR is now
enabled on Linux. It will also croak when your \fI/dev/null\fR isn't a device.
.PP
A new configuration variable \f(CW\*(C`d_pseudofork\*(C'\fR has been to \fIConfigure\fR, and is
available as  \f(CW$Config{d_pseudofork}\fR in the \f(CW\*(C`Config\*(C'\fR module. This
distinguishes real \f(CW\*(C`fork\*(C'\fR support from the pseudofork emulation used on
Windows platforms.
.PP
\&\fIConfig.pod\fR and \fIconfig.sh\fR are now placed correctly for cross-compilation.
.PP
\&\f(CW$Config{useshrplib}\fR is now 'true' rather than 'yes' when using a shared perl
library.
.SS "Compilation improvements"
.IX Subsection "Compilation improvements"
Parallel makes should work properly now, although there may still be problems
if \f(CW\*(C`make test\*(C'\fR is instructed to run in parallel.
.PP
Many compilation warnings have been cleaned up. A very stubborn compiler
warning in \f(CW\*(C`S_emulate_eaccess()\*(C'\fR was killed after six attempts.
\&\fIg++\fR support has been tuned, especially for FreeBSD.
.PP
\&\fImkppport\fR has been integrated, and all \fIppport.h\fR files in the core will now
be autogenerated at build time (and removed during cleanup).
.SS "Installation improvements."
.IX Subsection "Installation improvements."
\&\fIinstallman\fR now works with \f(CW\*(C`\-Duserelocatableinc\*(C'\fR and \f(CW\*(C`DESTDIR\*(C'\fR.
.PP
\&\fIinstallperl\fR no longer installs:
.IP "\(bu" 4
static library files of statically linked extensions when a shared perl library
is being used. (They are not needed. See \*(L"Windows\*(R" below).
.IP "\(bu" 4
\&\fI\s-1SIGNATURE\s0\fR and \fIPAUSE*.pub\fR (\s-1CPAN\s0 files)
.IP "\(bu" 4
\&\fI\s-1NOTES\s0\fR and \fI\s-1PATCHING\s0\fR (ExtUtils files)
.IP "\(bu" 4
\&\fIperlld\fR and \fIld2\fR (Cygwin files)
.SS "Platform Specific Changes"
.IX Subsection "Platform Specific Changes"
There are improved hints for \s-1AIX,\s0 Cygwin, \s-1DEC/OSF,\s0 FreeBSD, \s-1HP/UX,\s0 Irix 6
Linux, MachTen, NetBSD, \s-1OS/390, QNX, SCO,\s0 Solaris, SunOS, System V Release 5.x
(UnixWare 7, OpenUNIX 8), Ultrix, \s-1UMIPS,\s0 uts and \s-1VOS.\s0
.PP
\fIFreeBSD\fR
.IX Subsection "FreeBSD"
.IP "\(bu" 4
Drop \f(CW\*(C`\-std=c89\*(C'\fR and \f(CW\*(C`\-ansi\*(C'\fR if using \f(CW\*(C`long long\*(C'\fR as the main integral type,
else in FreeBSD 6.2 (and perhaps other releases), system headers do not
declare some functions required by perl.
.PP
\fISolaris\fR
.IX Subsection "Solaris"
.IP "\(bu" 4
Starting with Solaris 10, we do not want versioned shared libraries, because
those often indicate a private use only library. These problems could often
be triggered when SUNWbdb (Berkeley \s-1DB\s0) was installed. Hence if Solaris 10
is detected set \f(CW\*(C`ignore_versioned_solibs=y\*(C'\fR.
.PP
\fI\s-1VMS\s0\fR
.IX Subsection "VMS"
.IP "\(bu" 4
Allow \s-1IEEE\s0 math to be deselected on OpenVMS I64 (but it remains the default).
.IP "\(bu" 4
Record \s-1IEEE\s0 usage in \f(CW\*(C`config.h\*(C'\fR
.IP "\(bu" 4
Help older \s-1VMS\s0 compilers by using \f(CW\*(C`ccflags\*(C'\fR when building \f(CW\*(C`munchconfig.exe\*(C'\fR.
.IP "\(bu" 4
Don't try to build old \f(CW\*(C`Thread\*(C'\fR extension on \s-1VMS\s0 when \f(CW\*(C`\-Duseithreads\*(C'\fR has
been chosen.
.IP "\(bu" 4
Passing a raw string of \*(L"NaN\*(R" to \fInawk\fR causes a core dump \- so the string
has been changed to \*(L"*NaN*\*(R"
.IP "\(bu" 4
\&\fIt/op/stat.t\fR tests will now test hard links on \s-1VMS\s0 if they are supported.
.PP
\fIWindows\fR
.IX Subsection "Windows"
.IP "\(bu" 4
When using a shared perl library \fIinstallperl\fR no longer installs static
library files, import library files and export library files (of statically
linked extensions) and empty bootstrap files (of dynamically linked
extensions). This fixes a problem building PAR-Packer on Win32 with a debug
build of perl.
.IP "\(bu" 4
Various improvements to the win32 build process, including support for Visual
\&\*(C+ 2005 Express Edition (aka Visual \*(C+ 8.x).
.IP "\(bu" 4
\&\fIperl.exe\fR will now have an icon if built with MinGW or Borland.
.IP "\(bu" 4
Improvements to the perl\-static.exe build process.
.IP "\(bu" 4
Add Win32 makefile option to link all extensions statically.
.IP "\(bu" 4
The \fIWinCE\fR directory has been merged into the \fIWin32\fR directory.
.IP "\(bu" 4
\&\f(CW\*(C`setlocale\*(C'\fR tests have been re-enabled for Windows \s-1XP\s0 onwards.
.SH "Selected Bug Fixes"
.IX Header "Selected Bug Fixes"
.SS "Unicode"
.IX Subsection "Unicode"
Many many bugs related to the internal Unicode implementation (\s-1UTF\-8\s0) have
been fixed. In particular, long standing bugs related to returning Unicode
via \f(CW\*(C`tie\*(C'\fR, overloading or \f(CW$@\fR are now gone, some of which were never
reported.
.PP
\&\f(CW\*(C`unpack\*(C'\fR will internally convert the string back from \s-1UTF\-8\s0 on numeric types.
This is a compromise between the full consistency now in 5.10, and the current
behaviour, which is often used as a \*(L"feature\*(R" on string types.
.PP
Using \f(CW\*(C`:crlf\*(C'\fR and \f(CW\*(C`UTF\-16\*(C'\fR \s-1IO\s0 layers together will now work.
.PP
Fixed problems with \f(CW\*(C`split\*(C'\fR, Unicode \f(CW\*(C`/\es+/\*(C'\fR and \f(CW\*(C`/ \e0/\*(C'\fR.
.PP
Fixed bug \s-1RT\s0 #40641 \- encoding of Unicode characters in regular expressions.
.PP
Fixed a bug where using certain patterns in a regexp led to a panic.
[\s-1RT\s0 #45337]
.PP
Perl no longer segfaults (due to infinite internal recursion) if the locale's
character is not \s-1UTF\-8\s0 [\s-1RT\s0 #41442]:
.PP
.Vb 2
\&    use open \*(Aq:locale\*(Aq;
\&    print STDERR "\ex{201e}"; # &bdquo;
.Ve
.SS "PerlIO"
.IX Subsection "PerlIO"
Inconsistencies have been fixed in the reference counting PerlIO uses to keep
track of Unix file descriptors, and the \s-1API\s0 used by \s-1XS\s0 code to manage getting
and releasing \f(CW\*(C`FILE *\*(C'\fRs
.SS "Magic"
.IX Subsection "Magic"
Several bugs have been fixed in Magic, the internal system used to implement
features such as \f(CW\*(C`tie\*(C'\fR, tainting and threads sharing.
.PP
\&\f(CW\*(C`undef @array\*(C'\fR on a tied array now correctly calls the \f(CW\*(C`CLEAR\*(C'\fR method.
.PP
Some of the bitwise ops were not checking whether their arguments were magical
before using them. [\s-1RT\s0 #24816]
.PP
Magic is no longer invoked twice by the expression \f(CW\*(C`\e&$x\*(C'\fR
.PP
A bug with assigning large numbers and tainting has been resolved.
[\s-1RT\s0 #40708]
.PP
A new entry has been added to the \s-1MAGIC\s0 vtable \- \f(CW\*(C`svt_local\*(C'\fR. This is used
when copying magic to the new value during \f(CW\*(C`local\*(C'\fR, allowing certain problems
with localising shared variables to be resolved.
.PP
For the implementation details, see \*(L"Magic Virtual Tables\*(R" in perlguts.
.SS "Reblessing overloaded objects now works"
.IX Subsection "Reblessing overloaded objects now works"
Internally, perl object-ness is on the referent, not the reference, even
though methods can only be called via a reference. However, the original
implementation of overloading stored flags related to overloading on the
reference, relying on the flags being copied when the reference was copied,
or set at the creation of a new reference. This manifests in a bug \- if you
rebless an object from a class that has overloading, into one that does not,
then any other existing references think that they (still) point to an
overloaded object, choose these C code paths, and then throw errors.
Analogously, blessing into an overloaded class when other references exist will
result in them not using overloading.
.PP
The implementation has been fixed for 5.10, but this fix changes the semantics
of flag bits, so is not binary compatible, so can't be applied to 5.8.9.
However, 5.8.9 has a work-around that implements the same bug fix. If the
referent has multiple references, then all the other references are located and
corrected. A full search is avoided whenever possible by scanning lexicals
outwards from the current subroutine, and the argument stack.
.PP
A certain well known Linux vendor applied incomplete versions of this bug fix
to their \fI/usr/bin/perl\fR and then prematurely closed bug reports about
performance issues without consulting back upstream. This not being enough,
they then proceeded to ignore the necessary fixes to these unreleased changes
for 11 months, until massive pressure was applied by their long-suffering
paying customers, catalysed by the failings being featured on a prominent blog
and Slashdot.
.ie n .SS """strict"" now propagates correctly into string evals"
.el .SS "\f(CWstrict\fP now propagates correctly into string evals"
.IX Subsection "strict now propagates correctly into string evals"
Under 5.8.8 and earlier:
.PP
.Vb 3
\&    $ perl5.8.8 \-e \*(Aquse strict; eval "use foo bar" or die $@\*(Aq
\&    Can\*(Aqt locate foo.pm in @INC (@INC contains: ... .) at (eval 1) line 2.
\&    BEGIN failed\-\-compilation aborted at (eval 1) line 2.
.Ve
.PP
Under 5.8.9 and later:
.PP
.Vb 2
\&    $ perl5.8.9 \-e \*(Aquse strict; eval "use foo bar" or die $@\*(Aq
\&    Bareword "bar" not allowed while "strict subs" in use at (eval 1) line 1.
.Ve
.PP
This may cause problems with programs that parse the error message and rely
on the buggy behaviour.
.SS "Other fixes"
.IX Subsection "Other fixes"
.IP "\(bu" 4
The tokenizer no longer treats \f(CW\*(C`=cute\*(C'\fR (and other words beginning
with \f(CW\*(C`=cut\*(C'\fR) as a synonym for \f(CW\*(C`=cut\*(C'\fR.
.IP "\(bu" 4
Calling \f(CW\*(C`CORE::require\*(C'\fR
.Sp
\&\f(CW\*(C`CORE::require\*(C'\fR and \f(CW\*(C`CORE::do\*(C'\fR were always parsed as \f(CW\*(C`require\*(C'\fR and \f(CW\*(C`do\*(C'\fR
when they were overridden. This is now fixed.
.IP "\(bu" 4
Stopped memory leak on long \fI/etc/groups\fR entries.
.IP "\(bu" 4
\&\f(CW\*(C`while (my $x ...) { ...; redo }\*(C'\fR shouldn't \f(CW\*(C`undef $x\*(C'\fR.
.Sp
In the presence of \f(CW\*(C`my\*(C'\fR in the conditional of a \f(CW\*(C`while()\*(C'\fR, \f(CW\*(C`until()\*(C'\fR,
or \f(CW\*(C`for(;;)\*(C'\fR loop, we now add an extra scope to the body so that \f(CW\*(C`redo\*(C'\fR
doesn't \f(CW\*(C`undef\*(C'\fR the lexical.
.IP "\(bu" 4
The \f(CW\*(C`encoding\*(C'\fR pragma now correctly ignores anything following an \f(CW\*(C`@\*(C'\fR 
character in the \f(CW\*(C`LC_ALL\*(C'\fR and \f(CW\*(C`LANG\*(C'\fR environment variables. [\s-1RT\s0 # 49646]
.IP "\(bu" 4
A segfault observed with some \fIgcc\fR 3.3 optimisations is resolved.
.IP "\(bu" 4
A possible segfault when \f(CW\*(C`unpack\*(C'\fR used in scalar context with \f(CW\*(C`()\*(C'\fR groups
is resolved. [\s-1RT\s0 #50256]
.IP "\(bu" 4
Resolved issue where \f(CW$!\fR could be changed by a signal handler interrupting
a \f(CW\*(C`system\*(C'\fR call.
.IP "\(bu" 4
Fixed bug \s-1RT\s0 #37886, symbolic dereferencing was allowed in the argument of
\&\f(CW\*(C`defined\*(C'\fR even under the influence of \f(CW\*(C`use strict \*(Aqrefs\*(Aq\*(C'\fR.
.IP "\(bu" 4
Fixed bug \s-1RT\s0 #43207, where \f(CW\*(C`lc\*(C'\fR/\f(CW\*(C`uc\*(C'\fR inside \f(CW\*(C`sort\*(C'\fR affected the return
value.
.IP "\(bu" 4
Fixed bug \s-1RT\s0 #45607, where \f(CW\*(C`*{"BONK"} = \e&{"BONK"}\*(C'\fR didn't work correctly.
.IP "\(bu" 4
Fixed bug \s-1RT\s0 #35878, croaking from a \s-1XSUB\s0 called via \f(CW\*(C`goto &xsub\*(C'\fR corrupts perl
internals.
.IP "\(bu" 4
Fixed bug \s-1RT\s0 #32539, \fIDynaLoader.o\fR is moved into \fIlibperl.so\fR to avoid the
need to statically link DynaLoader into the stub perl executable. With this
\&\fIlibperl.so\fR provides everything needed to get a functional embedded perl
interpreter to run.
.IP "\(bu" 4
Fix bug \s-1RT\s0 #36267 so that assigning to a tied hash doesn't change the
underlying hash.
.IP "\(bu" 4
Fix bug \s-1RT\s0 #6006, regexp replaces using large replacement variables
fail some of the time, \fIi.e.\fR when substitution contains something
like \f(CW\*(C`${10}\*(C'\fR (note the bracket) instead of just \f(CW$10\fR.
.IP "\(bu" 4
Fix bug \s-1RT\s0 #45053, \f(CW\*(C`Perl_newCONSTSUB()\*(C'\fR is now thread safe.
.SS "Platform Specific Fixes"
.IX Subsection "Platform Specific Fixes"
\fIDarwin / MacOS X\fR
.IX Subsection "Darwin / MacOS X"
.IP "\(bu" 4
Various improvements to 64 bit builds.
.IP "\(bu" 4
Mutex protection added in \f(CW\*(C`PerlIOStdio_close()\*(C'\fR to avoid race conditions.
Hopefully this fixes failures in the threads tests \fIfree.t\fR and \fIblocks.t\fR.
.IP "\(bu" 4
Added forked terminal support to the debugger, with the ability to update the
window title.
.PP
\fI\s-1OS/2\s0\fR
.IX Subsection "OS/2"
.IP "\(bu" 4
A build problem with specifying \f(CW\*(C`USE_MULTI\*(C'\fR and \f(CW\*(C`USE_ITHREADS\*(C'\fR but without
\&\f(CW\*(C`USE_IMP_SYS\*(C'\fR has been fixed.
.IP "\(bu" 4
\&\f(CW\*(C`OS2::REXX\*(C'\fR upgraded to version 1.04
.PP
\fITru64\fR
.IX Subsection "Tru64"
.IP "\(bu" 4
Aligned floating point build policies for \fIcc\fR and \fIgcc\fR.
.PP
\fIRedHat Linux\fR
.IX Subsection "RedHat Linux"
.IP "\(bu" 4
Revisited a patch from 5.6.1 for \s-1RH7.2\s0 for Intel's \fIicc\fR [\s-1RT\s0 #7916], added an
additional check for \f(CW$Config{gccversion}\fR.
.PP
\fISolaris/i386\fR
.IX Subsection "Solaris/i386"
.IP "\(bu" 4
Use \f(CW\*(C`\-DPTR_IS_LONG\*(C'\fR when using 64 bit integers
.PP
\fI\s-1VMS\s0\fR
.IX Subsection "VMS"
.IP "\(bu" 4
Fixed \f(CW\*(C`PerlIO::Scalar\*(C'\fR in-memory file record-style reads.
.IP "\(bu" 4
pipe shutdown at process exit should now be more robust.
.IP "\(bu" 4
Bugs in \s-1VMS\s0 exit handling tickled by \f(CW\*(C`Test::Harness\*(C'\fR 2.64 have been fixed.
.IP "\(bu" 4
Fix \f(CW\*(C`fcntl()\*(C'\fR locking capability test in \fIconfigure.com\fR.
.IP "\(bu" 4
Replaced \f(CW\*(C`shrplib=\*(Aqdefine\*(Aq\*(C'\fR with \f(CW\*(C`useshrplib=\*(Aqtrue\*(Aq\*(C'\fR on \s-1VMS.\s0
.PP
\fIWindows\fR
.IX Subsection "Windows"
.IP "\(bu" 4
\&\f(CW\*(C`File::Find\*(C'\fR used to fail when the target directory is a bare drive letter and
\&\f(CW\*(C`no_chdir\*(C'\fR is 1 (the default is 0). [\s-1RT\s0 #41555]
.IP "\(bu" 4
A build problem with specifying \f(CW\*(C`USE_MULTI\*(C'\fR and \f(CW\*(C`USE_ITHREADS\*(C'\fR but without
\&\f(CW\*(C`USE_IMP_SYS\*(C'\fR has been fixed.
.IP "\(bu" 4
The process id is no longer truncated to 16 bits on some Windows platforms
( http://bugs.activestate.com/show_bug.cgi?id=72443 )
.IP "\(bu" 4
Fixed bug \s-1RT\s0 #54828 in \fIperlio.c\fR where calling \f(CW\*(C`binmode\*(C'\fR on Win32 and Cygwin
may cause a segmentation fault.
.SS "Smaller fixes"
.IX Subsection "Smaller fixes"
.IP "\(bu" 4
It is now possible to overload \f(CW\*(C`eq\*(C'\fR when using \f(CW\*(C`nomethod\*(C'\fR.
.IP "\(bu" 4
Various problems using \f(CW\*(C`overload\*(C'\fR with 64 bit integers corrected.
.IP "\(bu" 4
The reference count of \f(CW\*(C`PerlIO\*(C'\fR file descriptors is now correctly handled.
.IP "\(bu" 4
On \s-1VMS,\s0 escaped dots will be preserved when converted to Unix syntax.
.IP "\(bu" 4
\&\f(CW\*(C`keys %+\*(C'\fR no longer throws an \f(CW\*(Aqambiguous\*(Aq\fR warning.
.IP "\(bu" 4
Using \f(CW\*(C`#!perl \-d\*(C'\fR could trigger an assertion, which has been fixed.
.IP "\(bu" 4
Don't stringify tied code references in \f(CW@INC\fR when calling \f(CW\*(C`require\*(C'\fR.
.IP "\(bu" 4
Code references in \f(CW@INC\fR report the correct file name when \f(CW\*(C`_\|_FILE_\|_\*(C'\fR is
used.
.IP "\(bu" 4
Width and precision in sprintf didn't handle characters above 255 correctly.
[\s-1RT\s0 #40473]
.IP "\(bu" 4
List slices with indices out of range now work more consistently.
[\s-1RT\s0 #39882]
.IP "\(bu" 4
A change introduced with perl 5.8.1 broke the parsing of arguments of the form
\&\f(CW\*(C`\-foo=bar\*(C'\fR with the \f(CW\*(C`\-s\*(C'\fR on the <#!> line. This has been fixed. See
http://bugs.activestate.com/show_bug.cgi?id=43483
.IP "\(bu" 4
\&\f(CW\*(C`tr///\*(C'\fR is now threadsafe. Previously it was storing a swash inside its \s-1OP,\s0
rather than in a pad.
.IP "\(bu" 4
\&\fIpod2html\fR labels anchors more consistently and handles nested definition
lists better.
.IP "\(bu" 4
\&\f(CW\*(C`threads\*(C'\fR cleanup veto has been extended to include \f(CW\*(C`perl_free()\*(C'\fR and
\&\f(CW\*(C`perl_destruct()\*(C'\fR
.IP "\(bu" 4
On some systems, changes to \f(CW$ENV{TZ}\fR would not always be
respected by the underlying calls to \f(CW\*(C`localtime_r()\*(C'\fR.  Perl now
forces the inspection of the environment on these systems.
.IP "\(bu" 4
The special variable \f(CW$^R\fR is now more consistently set when executing
regexps using the \f(CW\*(C`(?{...})\*(C'\fR construct.  In particular, it will still
be set even if backreferences or optional sub-patterns \f(CW\*(C`(?:...)?\*(C'\fR are
used.
.SH "New or Changed Diagnostics"
.IX Header "New or Changed Diagnostics"
.ie n .SS "panic: sv_chop %s"
.el .SS "panic: sv_chop \f(CW%s\fP"
.IX Subsection "panic: sv_chop %s"
This new fatal error occurs when the C routine \f(CW\*(C`Perl_sv_chop()\*(C'\fR was passed a
position that is not within the scalar's string buffer. This is caused by
buggy \s-1XS\s0 code, and at this point recovery is not possible.
.SS "Maximal count of pending signals (%s) exceeded"
.IX Subsection "Maximal count of pending signals (%s) exceeded"
This new fatal error occurs when the perl process has to abort due to
too many pending signals, which is bound to prevent perl from being
able to handle further incoming signals safely.
.ie n .SS "panic: attempt to call %s in %s"
.el .SS "panic: attempt to call \f(CW%s\fP in \f(CW%s\fP"
.IX Subsection "panic: attempt to call %s in %s"
This new fatal error occurs when the \s-1ACL\s0 version file test operator is used
where it is not available on the current platform. Earlier checks mean that
it should never be possible to get this.
.SS "\s-1FETCHSIZE\s0 returned a negative value"
.IX Subsection "FETCHSIZE returned a negative value"
New error indicating that a tied array has claimed to have a negative
number of elements.
.ie n .SS "Can't upgrade %s (%d) to %d"
.el .SS "Can't upgrade \f(CW%s\fP (%d) to \f(CW%d\fP"
.IX Subsection "Can't upgrade %s (%d) to %d"
Previously the internal error from the \s-1SV\s0 upgrade code was the less informative
\&\fICan't upgrade that kind of scalar\fR. It now reports the current internal type,
and the new type requested.
.ie n .SS "%s argument is not a \s-1HASH\s0 or \s-1ARRAY\s0 element or a subroutine"
.el .SS "\f(CW%s\fP argument is not a \s-1HASH\s0 or \s-1ARRAY\s0 element or a subroutine"
.IX Subsection "%s argument is not a HASH or ARRAY element or a subroutine"
This error, thrown if an invalid argument is provided to \f(CW\*(C`exists\*(C'\fR now
correctly includes \*(L"or a subroutine\*(R". [\s-1RT\s0 #38955]
.ie n .SS "Cannot make the non-overridable builtin %s fatal"
.el .SS "Cannot make the non-overridable builtin \f(CW%s\fP fatal"
.IX Subsection "Cannot make the non-overridable builtin %s fatal"
This error in \f(CW\*(C`Fatal\*(C'\fR previously did not show the name of the builtin in
question (now represented by \f(CW%s\fR above).
.ie n .SS "Unrecognized character '%s' in column %d"
.el .SS "Unrecognized character '%s' in column \f(CW%d\fP"
.IX Subsection "Unrecognized character '%s' in column %d"
This error previously did not state the column.
.SS "Offset outside string"
.IX Subsection "Offset outside string"
This can now also be generated by a \f(CW\*(C`seek\*(C'\fR on a file handle using
\&\f(CW\*(C`PerlIO::scalar\*(C'\fR.
.SS "Invalid escape in the specified encoding in regexp; marked by <\-\- \s-1HERE\s0 in m/%s/"
.IX Subsection "Invalid escape in the specified encoding in regexp; marked by <-- HERE in m/%s/"
New error, introduced as part of the fix to \s-1RT\s0 #40641 to handle encoding
of Unicode characters in regular expression comments.
.SS "Your machine doesn't support dump/undump."
.IX Subsection "Your machine doesn't support dump/undump."
A more informative fatal error issued when calling \f(CW\*(C`dump\*(C'\fR on Win32 and
Cygwin. (Given that the purpose of \f(CW\*(C`dump\*(C'\fR is to abort with a core dump,
and core dumps can't be produced on these platforms, this is more useful than
silently exiting.)
.SH "Changed Internals"
.IX Header "Changed Internals"
The perl sources can now be compiled with a \*(C+ compiler instead of a C
compiler. A necessary implementation details is that under \*(C+, the macro
\&\f(CW\*(C`XS\*(C'\fR used to define XSUBs now includes an \f(CW\*(C`extern "C"\*(C'\fR definition. A side
effect of this is that \fB\*(C+\fR code that used the construction
.PP
.Vb 1
\&    typedef XS(SwigPerlWrapper);
.Ve
.PP
now needs to be written
.PP
.Vb 1
\&    typedef XSPROTO(SwigPerlWrapper);
.Ve
.PP
using the new \f(CW\*(C`XSPROTO\*(C'\fR macro, in order to compile. C extensions are
unaffected, although C extensions are encouraged to use \f(CW\*(C`XSPROTO\*(C'\fR too.
This change was present in the 5.10.0 release of perl, so any actively
maintained code that happened to use this construction should already have
been adapted. Code that needs changing will fail with a compilation error.
.PP
\&\f(CW\*(C`set\*(C'\fR magic on localizing/assigning to a magic variable will now only
trigger for \fIcontainer magics\fR, i.e. it will for \f(CW%ENV\fR or \f(CW%SIG\fR
but not for \f(CW$#array\fR.
.PP
The new \s-1API\s0 macro \f(CW\*(C`newSVpvs()\*(C'\fR can be used in place of constructions such as
\&\f(CW\*(C`newSVpvn("ISA", 3)\*(C'\fR. It takes a single string constant, and at C compile
time determines its length.
.PP
The new \s-1API\s0 function \f(CW\*(C`Perl_newSV_type()\*(C'\fR can be used as a more efficient
replacement of the common idiom
.PP
.Vb 2
\&    sv = newSV(0);
\&    sv_upgrade(sv, type);
.Ve
.PP
Similarly \f(CW\*(C`Perl_newSVpvn_flags()\*(C'\fR can be used to combine
\&\f(CW\*(C`Perl_newSVpv()\*(C'\fR with \f(CW\*(C`Perl_sv_2mortal()\*(C'\fR or the equivalent
\&\f(CW\*(C`Perl_sv_newmortal()\*(C'\fR with \f(CW\*(C`Perl_sv_setpvn()\*(C'\fR
.PP
Two new macros \f(CW\*(C`mPUSHs()\*(C'\fR and \f(CW\*(C`mXPUSHs()\*(C'\fR are added, to make it easier to
push mortal SVs onto the stack. They were then used to fix several bugs where
values on the stack had not been mortalised.
.PP
A \f(CW\*(C`Perl_signbit()\*(C'\fR function was added to test the sign of an \f(CW\*(C`NV\*(C'\fR. It 
maps to the system one when available.
.PP
\&\f(CW\*(C`Perl_av_reify()\*(C'\fR, \f(CW\*(C`Perl_lex_end()\*(C'\fR, \f(CW\*(C`Perl_mod()\*(C'\fR, \f(CW\*(C`Perl_op_clear()\*(C'\fR,
\&\f(CW\*(C`Perl_pop_return()\*(C'\fR, \f(CW\*(C`Perl_qerror()\*(C'\fR, \f(CW\*(C`Perl_setdefout()\*(C'\fR,
\&\f(CW\*(C`Perl_vivify_defelem()\*(C'\fR and \f(CW\*(C`Perl_yylex()\*(C'\fR are now visible to extensions.
This was required to allow \f(CW\*(C`Data::Alias\*(C'\fR to work on Windows.
.PP
\&\f(CW\*(C`Perl_find_runcv()\*(C'\fR is now visible to perl core extensions. This was required
to allow \f(CW\*(C`Sub::Current\*(C'\fR to work on Windows.
.PP
\&\f(CW\*(C`ptr_table*\*(C'\fR functions are now available in unthreaded perl. \f(CW\*(C`Storable\*(C'\fR
takes advantage of this.
.PP
There have been many small cleanups made to the internals. In particular,
\&\f(CW\*(C`Perl_sv_upgrade()\*(C'\fR has been simplified considerably, with a straight-through
code path that uses \f(CW\*(C`memset()\*(C'\fR and \f(CW\*(C`memcpy()\*(C'\fR to initialise the new body,
rather than assignment via multiple temporary variables. It has also
benefited from simplification and de-duplication of the arena management
code.
.PP
A lot of small improvements in the code base were made due to reports from
the Coverity static code analyzer.
.PP
Corrected use and documentation of \f(CW\*(C`Perl_gv_stashpv()\*(C'\fR, \f(CW\*(C`Perl_gv_stashpvn()\*(C'\fR,
\&\f(CW\*(C`Perl_gv_stashsv()\*(C'\fR functions (last parameter is a bitmask, not boolean).
.PP
\&\f(CW\*(C`PERL_SYS_INIT\*(C'\fR, \f(CW\*(C`PERL_SYS_INIT3\*(C'\fR and \f(CW\*(C`PERL_SYS_TERM\*(C'\fR macros have been
changed into functions.
.PP
\&\f(CW\*(C`PERLSYS_TERM\*(C'\fR no longer requires a context. \f(CW\*(C`PerlIO_teardown()\*(C'\fR
is now called without a context, and debugging output in this function has
been disabled because that required that an interpreter was present, an invalid
assumption at termination time.
.PP
All compile time options which affect binary compatibility have been grouped
together into a global variable (\f(CW\*(C`PL_bincompat_options\*(C'\fR).
.PP
The values of \f(CW\*(C`PERL_REVISION\*(C'\fR, \f(CW\*(C`PERL_VERSION\*(C'\fR and \f(CW\*(C`PERL_SUBVERSION\*(C'\fR are
now baked into global variables (and hence into any shared perl library).
Additionally under \f(CW\*(C`MULTIPLICITY\*(C'\fR, the perl executable now records the size of
the interpreter structure (total, and for this version). Coupled with
\&\f(CW\*(C`PL_bincompat_options\*(C'\fR this will allow 5.8.10 (and later), when compiled with a
shared perl library, to perform sanity checks in \f(CW\*(C`main()\*(C'\fR to verify that the
shared library is indeed binary compatible.
.PP
Symbolic references can now have embedded NULs. The new public function
\&\f(CW\*(C`Perl_get_cvn_flags()\*(C'\fR can be used in extensions if you have to handle them.
.SS "Macro cleanups"
.IX Subsection "Macro cleanups"
The core code, and \s-1XS\s0 code in \fIext\fR that is not dual-lived on \s-1CPAN,\s0 no longer
uses the macros \f(CW\*(C`PL_na\*(C'\fR, \f(CW\*(C`NEWSV()\*(C'\fR, \f(CW\*(C`Null()\*(C'\fR, \f(CW\*(C`Nullav\*(C'\fR, \f(CW\*(C`Nullcv\*(C'\fR,
\&\f(CW\*(C`Nullhv\*(C'\fR, \f(CW\*(C`Nullhv\*(C'\fR \fIetc\fR. Their use is discouraged in new code,
particularly \f(CW\*(C`PL_na\*(C'\fR, which is a small performance hit.
.SH "New Tests"
.IX Header "New Tests"
Many modules updated from \s-1CPAN\s0 incorporate new tests. Some core specific
tests have been added:
.IP "ext/DynaLoader/t/DynaLoader.t" 4
.IX Item "ext/DynaLoader/t/DynaLoader.t"
Tests for the \f(CW\*(C`DynaLoader\*(C'\fR module.
.IP "t/comp/fold.t" 4
.IX Item "t/comp/fold.t"
Tests for compile-time constant folding.
.IP "t/io/pvbm.t" 4
.IX Item "t/io/pvbm.t"
Tests incorporated from 5.10.0 which check that there is no unexpected
interaction between the internal types \f(CW\*(C`PVBM\*(C'\fR and \f(CW\*(C`PVGV\*(C'\fR.
.IP "t/lib/proxy_constant_subs.t" 4
.IX Item "t/lib/proxy_constant_subs.t"
Tests for the new form of constant subroutines.
.IP "t/op/attrhand.t" 4
.IX Item "t/op/attrhand.t"
Tests for \f(CW\*(C`Attribute::Handlers\*(C'\fR.
.IP "t/op/dbm.t" 4
.IX Item "t/op/dbm.t"
Tests for \f(CW\*(C`dbmopen\*(C'\fR.
.IP "t/op/inccode\-tie.t" 4
.IX Item "t/op/inccode-tie.t"
Calls all tests in \fIt/op/inccode.t\fR after first tying \f(CW@INC\fR.
.IP "t/op/incfilter.t" 4
.IX Item "t/op/incfilter.t"
Tests for source filters returned from code references in \f(CW@INC\fR.
.IP "t/op/kill0.t" 4
.IX Item "t/op/kill0.t"
Tests for \s-1RT\s0 #30970.
.IP "t/op/qrstack.t" 4
.IX Item "t/op/qrstack.t"
Tests for \s-1RT\s0 #41484.
.IP "t/op/qr.t" 4
.IX Item "t/op/qr.t"
Tests for the \f(CW\*(C`qr//\*(C'\fR construct.
.IP "t/op/regexp_qr_embed.t" 4
.IX Item "t/op/regexp_qr_embed.t"
Tests for the \f(CW\*(C`qr//\*(C'\fR construct within another regexp.
.IP "t/op/regexp_qr.t" 4
.IX Item "t/op/regexp_qr.t"
Tests for the \f(CW\*(C`qr//\*(C'\fR construct.
.IP "t/op/rxcode.t" 4
.IX Item "t/op/rxcode.t"
Tests for \s-1RT\s0 #32840.
.IP "t/op/studytied.t" 4
.IX Item "t/op/studytied.t"
Tests for \f(CW\*(C`study\*(C'\fR on tied scalars.
.IP "t/op/substT.t" 4
.IX Item "t/op/substT.t"
Tests for \f(CW\*(C`subst\*(C'\fR run under \f(CW\*(C`\-T\*(C'\fR mode.
.IP "t/op/symbolcache.t" 4
.IX Item "t/op/symbolcache.t"
Tests for \f(CW\*(C`undef\*(C'\fR and \f(CW\*(C`delete\*(C'\fR on stash entries that are bound to
subroutines or methods.
.IP "t/op/upgrade.t" 4
.IX Item "t/op/upgrade.t"
Tests for \f(CW\*(C`Perl_sv_upgrade()\*(C'\fR.
.IP "t/mro/package_aliases.t" 4
.IX Item "t/mro/package_aliases.t"
\&\s-1MRO\s0 tests for \f(CW\*(C`isa\*(C'\fR and package aliases.
.IP "t/pod/twice.t" 4
.IX Item "t/pod/twice.t"
Tests for calling \f(CW\*(C`Pod::Parser\*(C'\fR twice.
.IP "t/run/cloexec.t" 4
.IX Item "t/run/cloexec.t"
Tests for inheriting file descriptors across \f(CW\*(C`exec\*(C'\fR (close-on-exec).
.IP "t/uni/cache.t" 4
.IX Item "t/uni/cache.t"
Tests for the \s-1UTF\-8\s0 caching code.
.IP "t/uni/chr.t" 4
.IX Item "t/uni/chr.t"
Test that strange encodings do not upset \f(CW\*(C`Perl_pp_chr()\*(C'\fR.
.IP "t/uni/greek.t" 4
.IX Item "t/uni/greek.t"
Tests for \s-1RT\s0 #40641.
.IP "t/uni/latin2.t" 4
.IX Item "t/uni/latin2.t"
Tests for \s-1RT\s0 #40641.
.IP "t/uni/overload.t" 4
.IX Item "t/uni/overload.t"
Tests for returning Unicode from overloaded values.
.IP "t/uni/tie.t" 4
.IX Item "t/uni/tie.t"
Tests for returning Unicode from tied variables.
.SH "Known Problems"
.IX Header "Known Problems"
There are no known new bugs.
.PP
However, programs that rely on bugs that have been fixed will have problems.
Also, many bug fixes present in 5.10.0 can't be back-ported to the 5.8.x
branch, because they require changes that are binary incompatible, or because
the code changes are too large and hence too risky to incorporate.
.PP
We have only limited volunteer labour, and the maintenance burden is
getting increasingly complex. Hence this will be the last significant
release of the 5.8.x series. Any future releases of 5.8.x will likely
only be to deal with security issues, and platform build
failures. Hence you should look to migrating to 5.10.x, if you have
not started already. Alternatively, if business requirements constrain
you to continue to use 5.8.x, you may wish to consider commercial
support from firms such as ActiveState.
.SH "Platform Specific Notes"
.IX Header "Platform Specific Notes"
.SS "Win32"
.IX Subsection "Win32"
\&\f(CW\*(C`readdir()\*(C'\fR, \f(CW\*(C`cwd()\*(C'\fR, \f(CW$^X\fR and \f(CW@INC\fR now use the alternate (short)
filename if the long name is outside the current codepage (Jan Dubois).
.PP
\fIUpdated Modules\fR
.IX Subsection "Updated Modules"
.IP "\(bu" 4
\&\f(CW\*(C`Win32\*(C'\fR upgraded to version 0.38. Now has a documented 'WinVista' response
from \f(CW\*(C`GetOSName\*(C'\fR and support for Vista's privilege elevation in \f(CW\*(C`IsAdminUser\*(C'\fR.
Support for Unicode characters in path names. Improved cygwin and Win64
compatibility.
.IP "\(bu" 4
\&\f(CW\*(C`Win32API\*(C'\fR updated to 0.1001_01
.IP "\(bu" 4
\&\f(CW\*(C`killpg()\*(C'\fR support added to \f(CW\*(C`MSWin32\*(C'\fR (Jan Dubois).
.IP "\(bu" 4
\&\f(CW\*(C`File::Spec::Win32\*(C'\fR upgraded to version 3.2701
.SS "\s-1OS/2\s0"
.IX Subsection "OS/2"
\fIUpdated Modules\fR
.IX Subsection "Updated Modules"
.IP "\(bu" 4
\&\f(CW\*(C`OS2::Process\*(C'\fR upgraded to 1.03
.Sp
Ilya Zakharevich has added and documented several \f(CW\*(C`Window*\*(C'\fR and \f(CW\*(C`Clipbrd*\*(C'\fR
functions.
.IP "\(bu" 4
\&\f(CW\*(C`OS2::REXX::DLL\*(C'\fR, \f(CW\*(C`OS2::REXX\*(C'\fR updated to version 1.03
.SS "\s-1VMS\s0"
.IX Subsection "VMS"
\fIUpdated Modules\fR
.IX Subsection "Updated Modules"
.IP "\(bu" 4
\&\f(CW\*(C`DCLsym\*(C'\fR upgraded to version 1.03
.IP "\(bu" 4
\&\f(CW\*(C`Stdio\*(C'\fR upgraded to version 2.4
.IP "\(bu" 4
\&\f(CW\*(C`VMS::XSSymSet\*(C'\fR upgraded to 1.1.
.SH "Obituary"
.IX Header "Obituary"
Nick Ing-Simmons, long time Perl hacker, author of the \f(CW\*(C`Tk\*(C'\fR and \f(CW\*(C`Encode\*(C'\fR
modules, \fIperlio.c\fR in the core, and 5.003_02 pumpking, died of a heart
attack on 25th September 2006. He will be missed.
.SH "Acknowledgements"
.IX Header "Acknowledgements"
Some of the work in this release was funded by a \s-1TPF\s0 grant.
.PP
Steve Hay worked behind the scenes working out the causes of the differences
between core modules, their \s-1CPAN\s0 releases, and previous core releases, and
the best way to rectify them. He doesn't want to do it again. I know this
feeling, and I'm very glad he did it this time, instead of me.
.PP
Paul Fenwick assembled a team of 18 volunteers, who broke the back of writing
this document. In particular, Bradley Dean, Eddy Tan, and Vincent Pit
provided half the team's contribution.
.PP
Schwern verified the list of updated module versions, correcting quite a few
errors that I (and everyone else) had missed, both wrongly stated module
versions, and changed modules that had not been listed.
.PP
The crack Berlin-based \s-1QA\s0 team of Andreas Ko\*:nig and Slaven Rezic
tirelessly re-built snapshots, tested most everything \s-1CPAN\s0 against
them, and then identified the changes responsible for any module regressions,
ensuring that several show-stopper bugs were stomped before the first release
candidate was cut.
.PP
The other core committers contributed most of the changes, and applied most
of the patches sent in by the hundreds of contributors listed in \fI\s-1AUTHORS\s0\fR.
.PP
And obviously, Larry Wall, without whom we wouldn't have Perl.
.SH "Reporting Bugs"
.IX Header "Reporting Bugs"
If you find what you think is a bug, you might check the articles
recently posted to the comp.lang.perl.misc newsgroup and the perl
bug database at http://bugs.perl.org.  There may also be
information at http://www.perl.org, the Perl Home Page.
.PP
If you believe you have an unreported bug, please run the \fBperlbug\fR
program included with your release.  Be sure to trim your bug down
to a tiny but sufficient test case.  Your bug report, along with the
output of \f(CW\*(C`perl \-V\*(C'\fR, will be sent off to perlbug@perl.org to be
analysed by the Perl porting team.  You can browse and search
the Perl 5 bugs at http://bugs.perl.org/
.PP
If the bug you are reporting has security implications, which make it
inappropriate to send to a publicly archived mailing list, then please send
it to perl5\-security\-report@perl.org. This points to a closed subscription
unarchived mailing list, which includes
all the core committers, who will be able
to help assess the impact of issues, figure out a resolution, and help
co-ordinate the release of patches to mitigate or fix the problem across all
platforms on which Perl is supported. Please only use this address for security
issues in the Perl core, not for modules independently distributed on \s-1CPAN.\s0
.SH "SEE ALSO"
.IX Header "SEE ALSO"
The \fIChanges\fR file for exhaustive details on what changed.
.PP
The \fI\s-1INSTALL\s0\fR file for how to build Perl.
.PP
The \fI\s-1README\s0\fR file for general stuff.
.PP
The \fIArtistic\fR and \fICopying\fR files for copyright information.
                                                                                                                                                                                                                                                                                                                                                                                                                                  osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perl589delta5.16.1                           0100644 0001750 0001750 00000214641 12566207414 023503  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERL589DELTA 1"
.TH PERL589DELTA 1 "2013-03-04" "perl v5.16.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perl589delta \- what is new for perl v5.8.9
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document describes differences between the 5.8.8 release and
the 5.8.9 release.
.SH "Notice"
.IX Header "Notice"
The 5.8.9 release will be the last significant release of the 5.8.x
series. Any future releases of 5.8.x will likely only be to deal with
security issues, and platform build failures. Hence you should look to
migrating to 5.10.x, if you have not started already.
See \*(L"Known Problems\*(R" for more information.
.SH "Incompatible Changes"
.IX Header "Incompatible Changes"
A particular construction in the source code of extensions written in \*(C+
may need changing. See \*(L"Changed Internals\*(R" for more details. All
extensions written in C, most written in \*(C+, and all existing compiled
extensions are unaffected. This was necessary to improve \*(C+ support.
.PP
Other than this, there are no changes intentionally incompatible with 5.8.8.
If any exist, they are bugs and reports are welcome.
.SH "Core Enhancements"
.IX Header "Core Enhancements"
.SS "Unicode Character Database 5.1.0."
.IX Subsection "Unicode Character Database 5.1.0."
The copy of the Unicode Character Database included in Perl 5.8 has
been updated to 5.1.0 from 4.1.0. See
<http://www.unicode.org/versions/Unicode5.1.0/#NotableChanges> for the
notable changes.
.SS "stat and \-X on directory handles"
.IX Subsection "stat and -X on directory handles"
It is now possible to call \f(CW\*(C`stat\*(C'\fR and the \f(CW\*(C`\-X\*(C'\fR filestat operators on
directory handles. As both directory and file handles are barewords, there
can be ambiguities over which was intended. In these situations the file
handle semantics are preferred. Both also treat \f(CW*FILE{IO}\fR filehandles
like \f(CW*FILE\fR filehandles.
.ie n .SS "Source filters in @INC"
.el .SS "Source filters in \f(CW@INC\fP"
.IX Subsection "Source filters in @INC"
It's possible to enhance the mechanism of subroutine hooks in \f(CW@INC\fR by
adding a source filter on top of the filehandle opened and returned by the
hook. This feature was planned a long time ago, but wasn't quite working
until now. See \*(L"require\*(R" in perlfunc for details. (Nicholas Clark)
.SS "Exceptions in constant folding"
.IX Subsection "Exceptions in constant folding"
The constant folding routine is now wrapped in an exception handler, and
if folding throws an exception (such as attempting to evaluate 0/0), perl
now retains the current optree, rather than aborting the whole program.
Without this change, programs would not compile if they had expressions that
happened to generate exceptions, even though those expressions were in code
that could never be reached at runtime. (Nicholas Clark, Dave Mitchell)
.ie n .SS """no VERSION"""
.el .SS "\f(CWno VERSION\fP"
.IX Subsection "no VERSION"
You can now use \f(CW\*(C`no\*(C'\fR followed by a version number to specify that you
want to use a version of perl older than the specified one.
.SS "Improved internal \s-1UTF\-8\s0 caching code"
.IX Subsection "Improved internal UTF-8 caching code"
The code that caches calculated \s-1UTF\-8\s0 byte offsets for character offsets for
a string has been re-written. Several bugs have been located and eliminated,
and the code now makes better use of the information it has, so should be
faster. In particular, it doesn't scan to the end of a string before
calculating an offset within the string, which should speed up some operations
on long strings. It is now possible to disable the caching code at run time,
to verify that it is not the cause of suspected problems.
.SS "Runtime relocatable installations"
.IX Subsection "Runtime relocatable installations"
There is now \fIConfigure\fR support for creating a perl tree that is relocatable
at run time. see \*(L"Relocatable installations\*(R".
.SS "New internal variables"
.IX Subsection "New internal variables"
.ie n .IP """${^CHILD_ERROR_NATIVE}""" 4
.el .IP "\f(CW${^CHILD_ERROR_NATIVE}\fR" 4
.IX Item "${^CHILD_ERROR_NATIVE}"
This variable gives the native status returned by the last pipe close,
backtick command, successful call to \f(CW\*(C`wait\*(C'\fR or \f(CW\*(C`waitpid\*(C'\fR, or from the
\&\f(CW\*(C`system\*(C'\fR operator. See perlvar for details. (Contributed by Gisle Aas.)
.ie n .IP """${^UTF8CACHE}""" 4
.el .IP "\f(CW${^UTF8CACHE}\fR" 4
.IX Item "${^UTF8CACHE}"
This variable controls the state of the internal \s-1UTF\-8\s0 offset caching code.
1 for on (the default), 0 for off, \-1 to debug the caching code by checking
all its results against linear scans, and panicking on any discrepancy.
.ie n .SS """readpipe"" is now overridable"
.el .SS "\f(CWreadpipe\fP is now overridable"
.IX Subsection "readpipe is now overridable"
The built-in function \f(CW\*(C`readpipe\*(C'\fR is now overridable. Overriding it permits
also to override its operator counterpart, \f(CW\*(C`qx//\*(C'\fR (also known as \f(CW\*(C`\`\`\*(C'\fR).
.SS "simple exception handling macros"
.IX Subsection "simple exception handling macros"
Perl 5.8.9 (and 5.10.0 onwards) now provides a couple of macros to do very
basic exception handling in \s-1XS\s0 modules. You can use these macros if you call
code that may \f(CW\*(C`croak\*(C'\fR, but you need to do some cleanup before giving control
back to Perl. See \*(L"Exception Handling\*(R" in perlguts for more details.
.SS "\-D option enhancements"
.IX Subsection "-D option enhancements"
.IP "\(bu" 4
\&\f(CW\*(C`\-Dq\*(C'\fR suppresses the \fI\s-1EXECUTING\s0...\fR message when running under \f(CW\*(C`\-D\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`\-Dl\*(C'\fR logs runops loop entry and exit, and jump level popping.
.IP "\(bu" 4
\&\f(CW\*(C`\-Dv\*(C'\fR displays the process id as part of the trace output.
.SS "XS-assisted \s-1SWASHGET\s0"
.IX Subsection "XS-assisted SWASHGET"
Some pure-perl code that the regexp engine was using to retrieve Unicode
properties and transliteration mappings has been reimplemented in \s-1XS\s0
for faster execution.
(\s-1SADAHIRO\s0 Tomoyuki)
.SS "Constant subroutines"
.IX Subsection "Constant subroutines"
The interpreter internals now support a far more memory efficient form of
inlineable constants. Storing a reference to a constant value in a symbol
table is equivalent to a full typeglob referencing a constant subroutine,
but using about 400 bytes less memory. This proxy constant subroutine is
automatically upgraded to a real typeglob with subroutine if necessary.
The approach taken is analogous to the existing space optimisation for
subroutine stub declarations, which are stored as plain scalars in place
of the full typeglob.
.PP
However, to aid backwards compatibility of existing code, which (wrongly)
does not expect anything other than typeglobs in symbol tables, nothing in
core uses this feature, other than the regression tests.
.PP
Stubs for prototyped subroutines have been stored in symbol tables as plain
strings, and stubs for unprototyped subroutines as the number \-1, since 5.005,
so code which assumes that the core only places typeglobs in symbol tables
has been making incorrect assumptions for over 10 years.
.SH "New Platforms"
.IX Header "New Platforms"
Compile support added for:
.IP "\(bu" 4
DragonFlyBSD
.IP "\(bu" 4
MidnightBSD
.IP "\(bu" 4
MirOS \s-1BSD\s0
.IP "\(bu" 4
\&\s-1RISC\s0 \s-1OS\s0
.IP "\(bu" 4
Cray XT4/Catamount
.SH "Modules and Pragmata"
.IX Header "Modules and Pragmata"
.SS "New Modules"
.IX Subsection "New Modules"
.IP "\(bu" 4
\&\f(CW\*(C`Module::Pluggable\*(C'\fR is a simple framework to create modules that accept
pluggable sub-modules. The bundled version is 3.8
.IP "\(bu" 4
\&\f(CW\*(C`Module::CoreList\*(C'\fR is a hash of hashes that is keyed on perl version as
indicated in \f(CW$]\fR. The bundled version is 2.17
.IP "\(bu" 4
\&\f(CW\*(C`Win32API::File\*(C'\fR now available in core on Microsoft Windows. The bundled
version is 0.1001_01
.IP "\(bu" 4
\&\f(CW\*(C`Devel::InnerPackage\*(C'\fR finds all the packages defined by a single file. It is
part of the \f(CW\*(C`Module::Pluggable\*(C'\fR distribution. The bundled version is 0.3
.SS "Updated Modules"
.IX Subsection "Updated Modules"
.IP "\(bu" 4
\&\f(CW\*(C`attributes\*(C'\fR upgraded to version 0.09
.IP "\(bu" 4
\&\f(CW\*(C`AutoLoader\*(C'\fR upgraded to version 5.67
.IP "\(bu" 4
\&\f(CW\*(C`AutoSplit\*(C'\fR upgraded to 1.06
.IP "\(bu" 4
\&\f(CW\*(C`autouse\*(C'\fR upgraded to version 1.06
.IP "\(bu" 4
\&\f(CW\*(C`B\*(C'\fR upgraded from 1.09_01 to 1.19
.RS 4
.IP "\(bu" 4
provides new pad related abstraction macros \f(CW\*(C`B::NV::COP_SEQ_RANGE_LOW\*(C'\fR,
\&\f(CW\*(C`B::NV::COP_SEQ_RANGE_HIGH\*(C'\fR, \f(CW\*(C`B::NV::PARENT_PAD_INDEX\*(C'\fR,
\&\f(CW\*(C`B::NV::PARENT_FAKELEX_FLAGS\*(C'\fR, which hides the difference in storage in
5.10.0 and later.
.IP "\(bu" 4
provides \f(CW\*(C`B::sub_generation\*(C'\fR, which exposes \f(CW\*(C`PL_sub_generation\*(C'\fR
.IP "\(bu" 4
provides \f(CW\*(C`B::GV::isGV_with_GP\*(C'\fR, which on pre\-5.10 perls always returns true.
.IP "\(bu" 4
New type \f(CW\*(C`B::HE\*(C'\fR added with methods \f(CW\*(C`VAL\*(C'\fR, \f(CW\*(C`HASH\*(C'\fR and \f(CW\*(C`SVKEY_force\*(C'\fR
.IP "\(bu" 4
The \f(CW\*(C`B::GVf_IMPORTED_CV\*(C'\fR flag is now set correctly when a proxy
constant subroutine is imported.
.IP "\(bu" 4
bugs fixed in the handling of \f(CW\*(C`PMOP\*(C'\fRs.
.IP "\(bu" 4
\&\f(CW\*(C`B::BM::PREVIOUS\*(C'\fR returns now \f(CW\*(C`U32\*(C'\fR, not \f(CW\*(C`U16\*(C'\fR.
\&\f(CW\*(C`B::CV::START\*(C'\fR and \f(CW\*(C`B:CV::ROOT\*(C'\fR return now \f(CW\*(C`NULL\*(C'\fR on an \s-1XSUB\s0,
\&\f(CW\*(C`B::CV::XSUB\*(C'\fR and \f(CW\*(C`B::CV::XSUBANY\*(C'\fR return 0 on a non-XSUB.
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`B::C\*(C'\fR upgraded to 1.05
.IP "\(bu" 4
\&\f(CW\*(C`B::Concise\*(C'\fR upgraded to 0.76
.RS 4
.IP "\(bu" 4
new option \f(CW\*(C`\-src\*(C'\fR causes the rendering of each statement (starting with
the nextstate \s-1OP\s0) to be preceded by the first line of source code that
generates it.
.IP "\(bu" 4
new option \f(CW\*(C`\-stash="somepackage"\*(C'\fR, \f(CW\*(C`require\*(C'\fRs \*(L"somepackage\*(R", and then renders
each function defined in its namespace.
.IP "\(bu" 4
now has documentation of detailed hint symbols.
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`B::Debug\*(C'\fR upgraded to version 1.05
.IP "\(bu" 4
\&\f(CW\*(C`B::Deparse\*(C'\fR upgraded to version 0.87
.RS 4
.IP "\(bu" 4
properly deparse \f(CW\*(C`print readpipe $x, $y\*(C'\fR.
.IP "\(bu" 4
now handles \f(CW\*(C`\*(Aq\*(Aq\-\*(C'\fR()>, \f(CW\*(C`::()\*(C'\fR, \f(CW\*(C`sub :: {}\*(C'\fR, \fIetc.\fR correctly [\s-1RT\s0 #43010].
All bugs in parsing these kinds of syntax are now fixed:
.Sp
.Vb 5
\&    perl \-MO=Deparse \-e \*(Aq"my %h = "\->()\*(Aq
\&    perl \-MO=Deparse \-e \*(Aq::\->()\*(Aq
\&    perl \-MO=Deparse \-e \*(Aqsub :: {}\*(Aq
\&    perl \-MO=Deparse \-e \*(Aqpackage a; sub a::b::c {}\*(Aq
\&    perl \-MO=Deparse \-e \*(Aqsub the::main::road {}\*(Aq
.Ve
.IP "\(bu" 4
does \fBnot\fR deparse \f(CW$^H{v_string}\fR, which is automatically set by the
internals.
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`B::Lint\*(C'\fR upgraded to version 1.11
.IP "\(bu" 4
\&\f(CW\*(C`B::Terse\*(C'\fR upgraded to version 1.05
.IP "\(bu" 4
\&\f(CW\*(C`base\*(C'\fR upgraded to version 2.13
.RS 4
.IP "\(bu" 4
loading a module via base.pm would mask a global \f(CW$SIG{_\|_DIE_\|_}\fR in that
module.
.IP "\(bu" 4
push all classes at once in \f(CW@ISA\fR
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Benchmark\*(C'\fR upgraded to version 1.10
.IP "\(bu" 4
\&\f(CW\*(C`bigint\*(C'\fR upgraded to 0.23
.IP "\(bu" 4
\&\f(CW\*(C`bignum\*(C'\fR upgraded to 0.23
.IP "\(bu" 4
\&\f(CW\*(C`bigrat\*(C'\fR upgraded to 0.23
.IP "\(bu" 4
\&\f(CW\*(C`blib\*(C'\fR upgraded to 0.04
.IP "\(bu" 4
\&\f(CW\*(C`Carp\*(C'\fR upgraded to version 1.10
.Sp
The argument backtrace code now shows \f(CW\*(C`undef\*(C'\fR as \f(CW\*(C`undef\*(C'\fR,
instead of a string \fI\*(L"undef\*(R"\fR.
.IP "\(bu" 4
\&\f(CW\*(C`CGI\*(C'\fR upgraded to version 3.42
.IP "\(bu" 4
\&\f(CW\*(C`charnames\*(C'\fR upgraded to 1.06
.IP "\(bu" 4
\&\f(CW\*(C`constant\*(C'\fR upgraded to version 1.17
.IP "\(bu" 4
\&\f(CW\*(C`CPAN\*(C'\fR upgraded to version 1.9301
.IP "\(bu" 4
\&\f(CW\*(C`Cwd\*(C'\fR upgraded to version 3.29 with some platform specific
improvements (including for \s-1VMS\s0).
.IP "\(bu" 4
\&\f(CW\*(C`Data::Dumper\*(C'\fR upgraded to version 2.121_17
.RS 4
.IP "\(bu" 4
Fixes hash iterator current position with the pure Perl version [\s-1RT\s0 #40668]
.IP "\(bu" 4
Performance enhancements, which will be most evident on platforms where
repeated calls to C's \f(CW\*(C`realloc()\*(C'\fR are slow, such as Win32.
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`DB_File\*(C'\fR upgraded to version 1.817
.IP "\(bu" 4
\&\f(CW\*(C`DB_Filter\*(C'\fR upgraded to version 0.02
.IP "\(bu" 4
\&\f(CW\*(C`Devel::DProf\*(C'\fR upgraded to version 20080331.00
.IP "\(bu" 4
\&\f(CW\*(C`Devel::Peek\*(C'\fR upgraded to version 1.04
.IP "\(bu" 4
\&\f(CW\*(C`Devel::PPPort\*(C'\fR upgraded to version 3.14
.IP "\(bu" 4
\&\f(CW\*(C`diagnostics\*(C'\fR upgraded to version 1.16
.IP "\(bu" 4
\&\f(CW\*(C`Digest\*(C'\fR upgraded to version 1.15
.IP "\(bu" 4
\&\f(CW\*(C`Digest::MD5\*(C'\fR upgraded to version 2.37
.IP "\(bu" 4
\&\f(CW\*(C`DirHandle\*(C'\fR upgraded to version 1.02
.RS 4
.IP "\(bu" 4
now localises \f(CW$.\fR, \f(CW$@\fR, \f(CW$!\fR, \f(CW$^E\fR, and \f(CW$?\fR before closing the
directory handle to suppress leaking any side effects of warnings about it
already being closed.
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`DynaLoader\*(C'\fR upgraded to version 1.09
.Sp
\&\f(CW\*(C`DynaLoader\*(C'\fR can now dynamically load a loadable object from a file with a
non-default file extension.
.IP "\(bu" 4
\&\f(CW\*(C`Encode\*(C'\fR upgraded to version 2.26
.Sp
\&\f(CW\*(C`Encode::Alias\*(C'\fR includes a fix for encoding \*(L"646\*(R" on Solaris (better known as
\&\s-1ASCII\s0).
.IP "\(bu" 4
\&\f(CW\*(C`English\*(C'\fR upgraded to version 1.03
.IP "\(bu" 4
\&\f(CW\*(C`Errno\*(C'\fR upgraded to version 1.10
.IP "\(bu" 4
\&\f(CW\*(C`Exporter\*(C'\fR upgraded to version 5.63
.IP "\(bu" 4
\&\f(CW\*(C`ExtUtils::Command\*(C'\fR upgraded to version 1.15
.IP "\(bu" 4
\&\f(CW\*(C`ExtUtils::Constant\*(C'\fR upgraded to version 0.21
.IP "\(bu" 4
\&\f(CW\*(C`ExtUtils::Embed\*(C'\fR upgraded to version 1.28
.IP "\(bu" 4
\&\f(CW\*(C`ExtUtils::Install\*(C'\fR upgraded to version 1.50_01
.IP "\(bu" 4
\&\f(CW\*(C`ExtUtils::Installed\*(C'\fR upgraded to version 1.43
.IP "\(bu" 4
\&\f(CW\*(C`ExtUtils::MakeMaker\*(C'\fR upgraded to version 6.48
.RS 4
.IP "\(bu" 4
support for \f(CW\*(C`INSTALLSITESCRIPT\*(C'\fR and \f(CW\*(C`INSTALLVENDORSCRIPT\*(C'\fR
configuration.
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`ExtUtils::Manifest\*(C'\fR upgraded to version 1.55
.IP "\(bu" 4
\&\f(CW\*(C`ExtUtils::ParseXS\*(C'\fR upgraded to version 2.19
.IP "\(bu" 4
\&\f(CW\*(C`Fatal\*(C'\fR upgraded to version 1.06
.RS 4
.IP "\(bu" 4
allows built-ins in \f(CW\*(C`CORE::GLOBAL\*(C'\fR to be made fatal.
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Fcntl\*(C'\fR upgraded to version 1.06
.IP "\(bu" 4
\&\f(CW\*(C`fields\*(C'\fR upgraded to version 2.12
.IP "\(bu" 4
\&\f(CW\*(C`File::Basename\*(C'\fR upgraded to version 2.77
.IP "\(bu" 4
\&\f(CW\*(C`FileCache\*(C'\fR upgraded to version 1.07
.IP "\(bu" 4
\&\f(CW\*(C`File::Compare\*(C'\fR upgraded to 1.1005
.IP "\(bu" 4
\&\f(CW\*(C`File::Copy\*(C'\fR upgraded to 2.13
.RS 4
.IP "\(bu" 4
now uses 3\-arg open.
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`File::DosGlob\*(C'\fR upgraded to 1.01
.IP "\(bu" 4
\&\f(CW\*(C`File::Find\*(C'\fR upgraded to version 1.13
.IP "\(bu" 4
\&\f(CW\*(C`File::Glob\*(C'\fR upgraded to version 1.06
.RS 4
.IP "\(bu" 4
fixes spurious results with brackets inside braces.
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`File::Path\*(C'\fR upgraded to version 2.07_02
.IP "\(bu" 4
\&\f(CW\*(C`File::Spec\*(C'\fR upgraded to version 3.29
.RS 4
.IP "\(bu" 4
improved handling of bad arguments.
.IP "\(bu" 4
some platform specific improvements (including for \s-1VMS\s0 and Cygwin), with
an optimisation on \f(CW\*(C`abs2rel\*(C'\fR when handling both relative arguments.
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`File::stat\*(C'\fR upgraded to version 1.01
.IP "\(bu" 4
\&\f(CW\*(C`File::Temp\*(C'\fR upgraded to version 0.20
.IP "\(bu" 4
\&\f(CW\*(C`filetest\*(C'\fR upgraded to version 1.02
.IP "\(bu" 4
\&\f(CW\*(C`Filter::Util::Call\*(C'\fR upgraded to version 1.07
.IP "\(bu" 4
\&\f(CW\*(C`Filter::Simple\*(C'\fR upgraded to version 0.83
.IP "\(bu" 4
\&\f(CW\*(C`FindBin\*(C'\fR upgraded to version 1.49
.IP "\(bu" 4
\&\f(CW\*(C`GDBM_File\*(C'\fR upgraded to version 1.09
.IP "\(bu" 4
\&\f(CW\*(C`Getopt::Long\*(C'\fR upgraded to version 2.37
.IP "\(bu" 4
\&\f(CW\*(C`Getopt::Std\*(C'\fR upgraded to version 1.06
.IP "\(bu" 4
\&\f(CW\*(C`Hash::Util\*(C'\fR upgraded to version 0.06
.IP "\(bu" 4
\&\f(CW\*(C`if\*(C'\fR upgraded to version 0.05
.IP "\(bu" 4
\&\f(CW\*(C`IO\*(C'\fR upgraded to version 1.23
.Sp
Reduced number of calls to \f(CW\*(C`getpeername\*(C'\fR in \f(CW\*(C`IO::Socket\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`IPC::Open\*(C'\fR upgraded to version 1.03
.IP "\(bu" 4
\&\f(CW\*(C`IPC::Open3\*(C'\fR upgraded to version 1.03
.IP "\(bu" 4
\&\f(CW\*(C`IPC::SysV\*(C'\fR upgraded to version 2.00
.IP "\(bu" 4
\&\f(CW\*(C`lib\*(C'\fR upgraded to version 0.61
.RS 4
.IP "\(bu" 4
avoid warning about loading \fI.par\fR files.
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`libnet\*(C'\fR upgraded to version 1.22
.IP "\(bu" 4
\&\f(CW\*(C`List::Util\*(C'\fR upgraded to 1.19
.IP "\(bu" 4
\&\f(CW\*(C`Locale::Maketext\*(C'\fR upgraded to 1.13
.IP "\(bu" 4
\&\f(CW\*(C`Math::BigFloat\*(C'\fR upgraded to version 1.60
.IP "\(bu" 4
\&\f(CW\*(C`Math::BigInt\*(C'\fR upgraded to version 1.89
.IP "\(bu" 4
\&\f(CW\*(C`Math::BigRat\*(C'\fR upgraded to version 0.22
.RS 4
.IP "\(bu" 4
implements new \f(CW\*(C`as_float\*(C'\fR method.
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Math::Complex\*(C'\fR upgraded to version 1.54.
.IP "\(bu" 4
\&\f(CW\*(C`Math::Trig\*(C'\fR upgraded to version 1.18.
.IP "\(bu" 4
\&\f(CW\*(C`NDBM_File\*(C'\fR upgraded to version 1.07
.RS 4
.IP "\(bu" 4
improve \fIg++\fR handling for systems using \s-1GDBM\s0 compatibility headers.
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Net::Ping\*(C'\fR upgraded to version 2.35
.IP "\(bu" 4
\&\f(CW\*(C`NEXT\*(C'\fR upgraded to version 0.61
.RS 4
.IP "\(bu" 4
fix several bugs with \f(CW\*(C`NEXT\*(C'\fR when working with \f(CW\*(C`AUTOLOAD\*(C'\fR, \f(CW\*(C`eval\*(C'\fR block, and
within overloaded stringification.
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`ODBM_File\*(C'\fR upgraded to 1.07
.IP "\(bu" 4
\&\f(CW\*(C`open\*(C'\fR upgraded to 1.06
.IP "\(bu" 4
\&\f(CW\*(C`ops\*(C'\fR upgraded to 1.02
.IP "\(bu" 4
\&\f(CW\*(C`PerlIO::encoding\*(C'\fR upgraded to version 0.11
.IP "\(bu" 4
\&\f(CW\*(C`PerlIO::scalar\*(C'\fR upgraded to version 0.06
.RS 4
.IP "\(bu" 4
[\s-1RT\s0 #40267] \f(CW\*(C`PerlIO::scalar\*(C'\fR doesn't respect readonly-ness.
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`PerlIO::via\*(C'\fR upgraded to version 0.05
.IP "\(bu" 4
\&\f(CW\*(C`Pod::Html\*(C'\fR upgraded to version 1.09
.IP "\(bu" 4
\&\f(CW\*(C`Pod::Parser\*(C'\fR upgraded to version 1.35
.IP "\(bu" 4
\&\f(CW\*(C`Pod::Usage\*(C'\fR upgraded to version 1.35
.IP "\(bu" 4
\&\f(CW\*(C`POSIX\*(C'\fR upgraded to version 1.15
.RS 4
.IP "\(bu" 4
\&\f(CW\*(C`POSIX\*(C'\fR constants that duplicate those in \f(CW\*(C`Fcntl\*(C'\fR are now imported from
\&\f(CW\*(C`Fcntl\*(C'\fR and re-exported, rather than being duplicated by \f(CW\*(C`POSIX\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`POSIX::remove\*(C'\fR can remove empty directories.
.IP "\(bu" 4
\&\f(CW\*(C`POSIX::setlocale\*(C'\fR safer to call multiple times.
.IP "\(bu" 4
\&\f(CW\*(C`POSIX::SigRt\*(C'\fR added, which provides access to \s-1POSIX\s0 realtime signal
functionality on systems that support it.
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`re\*(C'\fR upgraded to version 0.06_01
.IP "\(bu" 4
\&\f(CW\*(C`Safe\*(C'\fR upgraded to version 2.16
.IP "\(bu" 4
\&\f(CW\*(C`Scalar::Util\*(C'\fR upgraded to 1.19
.IP "\(bu" 4
\&\f(CW\*(C`SDBM_File\*(C'\fR upgraded to version 1.06
.IP "\(bu" 4
\&\f(CW\*(C`SelfLoader\*(C'\fR upgraded to version 1.17
.IP "\(bu" 4
\&\f(CW\*(C`Shell\*(C'\fR upgraded to version 0.72
.IP "\(bu" 4
\&\f(CW\*(C`sigtrap\*(C'\fR upgraded to version 1.04
.IP "\(bu" 4
\&\f(CW\*(C`Socket\*(C'\fR upgraded to version 1.81
.RS 4
.IP "\(bu" 4
this fixes an optimistic use of \f(CW\*(C`gethostbyname\*(C'\fR
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Storable\*(C'\fR upgraded to 2.19
.IP "\(bu" 4
\&\f(CW\*(C`Switch\*(C'\fR upgraded to version 2.13
.IP "\(bu" 4
\&\f(CW\*(C`Sys::Syslog\*(C'\fR upgraded to version 0.27
.IP "\(bu" 4
\&\f(CW\*(C`Term::ANSIColor\*(C'\fR upgraded to version 1.12
.IP "\(bu" 4
\&\f(CW\*(C`Term::Cap\*(C'\fR upgraded to version 1.12
.IP "\(bu" 4
\&\f(CW\*(C`Term::ReadLine\*(C'\fR upgraded to version 1.03
.IP "\(bu" 4
\&\f(CW\*(C`Test::Builder\*(C'\fR upgraded to version 0.80
.IP "\(bu" 4
\&\f(CW\*(C`Test::Harness\*(C'\fR upgraded version to 2.64
.RS 4
.IP "\(bu" 4
this makes it able to handle newlines.
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Test::More\*(C'\fR upgraded to version 0.80
.IP "\(bu" 4
\&\f(CW\*(C`Test::Simple\*(C'\fR upgraded to version 0.80
.IP "\(bu" 4
\&\f(CW\*(C`Text::Balanced\*(C'\fR upgraded to version 1.98
.IP "\(bu" 4
\&\f(CW\*(C`Text::ParseWords\*(C'\fR upgraded to version 3.27
.IP "\(bu" 4
\&\f(CW\*(C`Text::Soundex\*(C'\fR upgraded to version 3.03
.IP "\(bu" 4
\&\f(CW\*(C`Text::Tabs\*(C'\fR upgraded to version 2007.1117
.IP "\(bu" 4
\&\f(CW\*(C`Text::Wrap\*(C'\fR upgraded to version 2006.1117
.IP "\(bu" 4
\&\f(CW\*(C`Thread\*(C'\fR upgraded to version 2.01
.IP "\(bu" 4
\&\f(CW\*(C`Thread::Semaphore\*(C'\fR upgraded to version 2.09
.IP "\(bu" 4
\&\f(CW\*(C`Thread::Queue\*(C'\fR upgraded to version 2.11
.RS 4
.IP "\(bu" 4
added capability to add complex structures (e.g., hash of hashes) to queues.
.IP "\(bu" 4
added capability to dequeue multiple items at once.
.IP "\(bu" 4
added new methods to inspect and manipulate queues:  \f(CW\*(C`peek\*(C'\fR, \f(CW\*(C`insert\*(C'\fR and
\&\f(CW\*(C`extract\*(C'\fR
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Tie::Handle\*(C'\fR upgraded to version 4.2
.IP "\(bu" 4
\&\f(CW\*(C`Tie::Hash\*(C'\fR upgraded to version 1.03
.IP "\(bu" 4
\&\f(CW\*(C`Tie::Memoize\*(C'\fR upgraded to version 1.1
.RS 4
.IP "\(bu" 4
\&\f(CW\*(C`Tie::Memoize::EXISTS\*(C'\fR now correctly caches its results.
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Tie::RefHash\*(C'\fR upgraded to version 1.38
.IP "\(bu" 4
\&\f(CW\*(C`Tie::Scalar\*(C'\fR upgraded to version 1.01
.IP "\(bu" 4
\&\f(CW\*(C`Tie::StdHandle\*(C'\fR upgraded to version 4.2
.IP "\(bu" 4
\&\f(CW\*(C`Time::gmtime\*(C'\fR upgraded to version 1.03
.IP "\(bu" 4
\&\f(CW\*(C`Time::Local\*(C'\fR upgraded to version 1.1901
.IP "\(bu" 4
\&\f(CW\*(C`Time::HiRes\*(C'\fR upgraded to version 1.9715 with various build improvements 
(including \s-1VMS\s0) and minor platform-specific bug fixes (including
for HP-UX 11 ia64).
.IP "\(bu" 4
\&\f(CW\*(C`threads\*(C'\fR upgraded to 1.71
.RS 4
.IP "\(bu" 4
new thread state information methods: \f(CW\*(C`is_running\*(C'\fR, \f(CW\*(C`is_detached\*(C'\fR
and \f(CW\*(C`is_joinable\*(C'\fR.  \f(CW\*(C`list\*(C'\fR method enhanced to return running or joinable
threads.
.IP "\(bu" 4
new thread signal method: \f(CW\*(C`kill\*(C'\fR
.IP "\(bu" 4
added capability to specify thread stack size.
.IP "\(bu" 4
added capability to control thread exiting behavior.  Added a new \f(CW\*(C`exit\*(C'\fR
method.
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`threads::shared\*(C'\fR upgraded to version 1.27
.RS 4
.IP "\(bu" 4
smaller and faster implementation that eliminates one internal structure and
the consequent level of indirection.
.IP "\(bu" 4
user locks are now stored in a safer manner.
.IP "\(bu" 4
new function \f(CW\*(C`shared_clone\*(C'\fR creates a copy of an object leaving
shared elements as-is and deep-cloning non-shared elements.
.IP "\(bu" 4
added new \f(CW\*(C`is_shared\*(C'\fR method.
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Unicode::Normalize\*(C'\fR upgraded to version 1.02
.IP "\(bu" 4
\&\f(CW\*(C`Unicode::UCD\*(C'\fR upgraded to version 0.25
.IP "\(bu" 4
\&\f(CW\*(C`warnings\*(C'\fR upgraded to version 1.05_01
.IP "\(bu" 4
\&\f(CW\*(C`Win32\*(C'\fR upgraded to version 0.38
.RS 4
.IP "\(bu" 4
added new function \f(CW\*(C`GetCurrentProcessId\*(C'\fR which returns the regular Windows
process identifier of the current process, even when called from within a fork.
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`XSLoader\*(C'\fR upgraded to version 0.10
.IP "\(bu" 4
\&\f(CW\*(C`XS::APItest\*(C'\fR and \f(CW\*(C`XS::Typemap\*(C'\fR are for internal use only and hence
no longer installed. Many more tests have been added to \f(CW\*(C`XS::APItest\*(C'\fR.
.SH "Utility Changes"
.IX Header "Utility Changes"
.SS "debugger upgraded to version 1.31"
.IX Subsection "debugger upgraded to version 1.31"
.IP "\(bu" 4
Andreas Ko\*:nig contributed two functions to save and load the debugger
history.
.IP "\(bu" 4
\&\f(CW\*(C`NEXT::AUTOLOAD\*(C'\fR no longer emits warnings under the debugger.
.IP "\(bu" 4
The debugger should now correctly find tty the device on \s-1OS\s0 X 10.5 and \s-1VMS\s0
when the program \f(CW\*(C`fork\*(C'\fRs.
.IP "\(bu" 4
\&\s-1LVALUE\s0 subs now work inside the debugger.
.SS "\fIperlthanks\fP"
.IX Subsection "perlthanks"
Perl 5.8.9 adds a new utility \fIperlthanks\fR, which is a variant of \fIperlbug\fR,
but for sending non-bug-reports to the authors and maintainers of Perl.
Getting nothing but bug reports can become a bit demoralising \- we'll see if
this changes things.
.SS "\fIperlbug\fP"
.IX Subsection "perlbug"
\&\fIperlbug\fR now checks if you're reporting about a non-core module and suggests
you report it to the \s-1CPAN\s0 author instead.
.SS "\fIh2xs\fP"
.IX Subsection "h2xs"
.IP "\(bu" 4
won't define an empty string as a constant [\s-1RT\s0 #25366]
.IP "\(bu" 4
has examples for \f(CW\*(C`h2xs \-X\*(C'\fR
.SS "\fIh2ph\fP"
.IX Subsection "h2ph"
.IP "\(bu" 4
now attempts to deal sensibly with the difference in path implications
between \f(CW""\fR and \f(CW\*(C`<>\*(C'\fR quoting in \f(CW\*(C`#include\*(C'\fR statements.
.IP "\(bu" 4
now generates correct code for \f(CW\*(C`#if defined A || defined B\*(C'\fR
[\s-1RT\s0 #39130]
.SH "New Documentation"
.IX Header "New Documentation"
As usual, the documentation received its share of corrections, clarifications
and other nitfixes. More \f(CW\*(C`\*(C'\fR tags were added for indexing.
.IX Xref "..."
.PP
perlunitut is a tutorial written by Juerd Waalboer on Unicode-related
terminology and how to correctly handle Unicode in Perl scripts.
.PP
perlunicode is updated in section user defined properties.
.PP
perluniintro has been updated in the example of detecting data that is not
valid in particular encoding.
.PP
perlcommunity provides an overview of the Perl Community along with further
resources.
.PP
\&\s-1CORE\s0 documents the pseudo-namespace for Perl's core routines.
.SH "Changes to Existing Documentation"
.IX Header "Changes to Existing Documentation"
perlglossary adds \fIdeprecated modules and features\fR and \fIto be dropped modules\fR.
.PP
perlhack has been updated and added resources on smoke testing.
.PP
The Perl FAQs (\fIperlfaq1\fR..\fIperlfaq9\fR) have been updated.
.PP
perlcheat is updated with better details on \f(CW\*(C`\ew\*(C'\fR, \f(CW\*(C`\ed\*(C'\fR, and \f(CW\*(C`\es\*(C'\fR.
.PP
perldebug is updated with information on how to call the debugger.
.PP
perldiag documentation updated with \fIsubroutine with an ampersand\fR on the
argument to \f(CW\*(C`exists\*(C'\fR and \f(CW\*(C`delete\*(C'\fR and also several terminology updates on
warnings.
.PP
perlfork documents the limitation of \f(CW\*(C`exec\*(C'\fR inside pseudo-processes.
.PP
perlfunc:
.IP "\(bu" 4
Documentation is fixed in section \f(CW\*(C`caller\*(C'\fR and \f(CW\*(C`pop\*(C'\fR.
.IP "\(bu" 4
Function \f(CW\*(C`alarm\*(C'\fR now mentions \f(CW\*(C`Time::HiRes::ualarm\*(C'\fR in preference
to \f(CW\*(C`select\*(C'\fR.
.IP "\(bu" 4
Regarding precedence in \f(CW\*(C`\-X\*(C'\fR, filetest operators are the same as unary
operators, but not regarding parsing and parentheses (spotted by Eirik Berg
Hanssen).
.IP "\(bu" 4
\&\f(CW\*(C`reverse\*(C'\fR function documentation received scalar context examples.
.PP
perllocale documentation is adjusted for number localization and
\&\f(CW\*(C`POSIX::setlocale\*(C'\fR to fix Debian bug #379463.
.PP
perlmodlib is updated with \f(CW\*(C`CPAN::API::HOWTO\*(C'\fR and
\&\f(CW\*(C`Sys::Syslog::win32::Win32\*(C'\fR
.PP
perlre documentation updated to reflect the differences between
\&\f(CW\*(C`[[:xxxxx:]]\*(C'\fR and \f(CW\*(C`\ep{IsXxxxx}\*(C'\fR matches. Also added section on \f(CW\*(C`/g\*(C'\fR and
\&\f(CW\*(C`/c\*(C'\fR modifiers.
.PP
perlreguts describe the internals of the regular expressions engine. It has
been contributed by Yves Orton.
.PP
perlrebackslash describes all perl regular expression backslash and escape
sequences.
.PP
perlrecharclass describes the syntax and use of character classes in
Perl Regular Expressions.
.PP
perlrun is updated to clarify on the hash seed \fI\s-1PERL_HASH_SEED\s0\fR. Also more
information in options \f(CW\*(C`\-x\*(C'\fR and \f(CW\*(C`\-u\*(C'\fR.
.PP
perlsub example is updated to use a lexical variable for \f(CW\*(C`opendir\*(C'\fR syntax.
.PP
perlvar fixes confusion about real \s-1GID\s0 \f(CW$(\fR and effective \s-1GID\s0 \f(CW$)\fR.
.PP
Perl thread tutorial example is fixed in section
\&\*(L"Queues: Passing Data Around\*(R" in perlthrtut and perlthrtut.
.PP
perlhack documentation extensively improved by Jarkko Hietaniemi and others.
.PP
perltoot provides information on modifying \f(CW@UNIVERSAL::ISA\fR.
.PP
perlport documentation extended to include different \f(CW\*(C`kill(\-9, ...)\*(C'\fR
semantics on Windows. It also clearly states \f(CW\*(C`dump\*(C'\fR is not supported on Win32
and cygwin.
.PP
\&\fI\s-1INSTALL\s0\fR has been updated and modernised.
.SH "Performance Enhancements"
.IX Header "Performance Enhancements"
.IP "\(bu" 4
The default since perl 5.000 has been for perl to create an empty scalar
with every new typeglob. The increased use of lexical variables means that
most are now unused. Thanks to Nicholas Clark's efforts, Perl can now be
compiled with \f(CW\*(C`\-DPERL_DONT_CREATE_GVSV\*(C'\fR to avoid creating these empty scalars.
This will significantly decrease the number of scalars allocated for all
configurations, and the number of scalars that need to be copied for ithread
creation. Whilst this option is binary compatible with existing perl
installations, it does change a long-standing assumption about the
internals, hence it is not enabled by default, as some third party code may
rely on the old behaviour.
.Sp
We would recommend testing with this configuration on new deployments of
perl, particularly for multi-threaded servers, to see whether all third party
code is compatible with it, as this configuration may give useful performance
improvements. For existing installations we would not recommend changing to
this configuration unless thorough testing is performed before deployment.
.IP "\(bu" 4
\&\f(CW\*(C`diagnostics\*(C'\fR no longer uses \f(CW$&\fR, which results in large speedups
for regexp matching in all code using it.
.IP "\(bu" 4
Regular expressions classes of a single character are now treated the same as
if the character had been used as a literal, meaning that code that uses
char-classes as an escaping mechanism will see a speedup. (Yves Orton)
.IP "\(bu" 4
Creating anonymous array and hash references (ie. \f(CW\*(C`[]\*(C'\fR and \f(CW\*(C`{}\*(C'\fR) now incurs
no more overhead than creating an anonymous list or hash. Nicholas Clark
provided changes with a saving of two ops and one stack push, which was measured
as a slightly better than 5% improvement for these operations.
.IP "\(bu" 4
Many calls to \f(CW\*(C`strlen()\*(C'\fR have been eliminated, either because the length was
already known, or by adopting or enhancing APIs that pass lengths. This has
been aided by the adoption of a \f(CW\*(C`my_sprintf()\*(C'\fR wrapper, which returns the
correct C89 value \- the length of the formatted string. Previously we could
not rely on the return value of \f(CW\*(C`sprintf()\*(C'\fR, because on some ancient but
extant platforms it still returns \f(CW\*(C`char *\*(C'\fR.
.IP "\(bu" 4
\&\f(CW\*(C`index\*(C'\fR is now faster if the search string is stored in \s-1UTF\-8\s0 but only contains
characters in the Latin\-1 range.
.IP "\(bu" 4
The Unicode swatch cache inside the regexp engine is now used. (the lookup had
a key mismatch, present since the initial implementation). [\s-1RT\s0 #42839]
.SH "Installation and Configuration Improvements"
.IX Header "Installation and Configuration Improvements"
.SS "Relocatable installations"
.IX Subsection "Relocatable installations"
There is now \fIConfigure\fR support for creating a relocatable perl tree. If
you \fIConfigure\fR with \f(CW\*(C`\-Duserelocatableinc\*(C'\fR, then the paths in \f(CW@INC\fR (and
everything else in \f(CW%Config\fR) can be optionally located via the path of the
\&\fIperl\fR executable.
.PP
At start time, if any paths in \f(CW@INC\fR or \f(CW\*(C`Config\*(C'\fR that \fIConfigure\fR marked
as relocatable (by starting them with \f(CW".../"\fR), then they are prefixed the
directory of \f(CW$^X\fR. This allows the relocation can be configured on a
per-directory basis, although the default with \f(CW\*(C`\-Duserelocatableinc\*(C'\fR is that
everything is relocated. The initial install is done to the original configured
prefix.
.SS "Configuration improvements"
.IX Subsection "Configuration improvements"
\&\fIConfigure\fR is now better at removing temporary files. Tom Callaway
(from RedHat) also contributed patches that complete the set of flags
passed to the compiler and the linker, in particular that \f(CW\*(C`\-fPIC\*(C'\fR is now
enabled on Linux. It will also croak when your \fI/dev/null\fR isn't a device.
.PP
A new configuration variable \f(CW\*(C`d_pseudofork\*(C'\fR has been to \fIConfigure\fR, and is
available as  \f(CW$Config{d_pseudofork}\fR in the \f(CW\*(C`Config\*(C'\fR module. This
distinguishes real \f(CW\*(C`fork\*(C'\fR support from the pseudofork emulation used on
Windows platforms.
.PP
\&\fIConfig.pod\fR and \fIconfig.sh\fR are now placed correctly for cross-compilation.
.PP
\&\f(CW$Config{useshrplib}\fR is now 'true' rather than 'yes' when using a shared perl
library.
.SS "Compilation improvements"
.IX Subsection "Compilation improvements"
Parallel makes should work properly now, although there may still be problems
if \f(CW\*(C`make test\*(C'\fR is instructed to run in parallel.
.PP
Many compilation warnings have been cleaned up. A very stubborn compiler
warning in \f(CW\*(C`S_emulate_eaccess()\*(C'\fR was killed after six attempts.
\&\fIg++\fR support has been tuned, especially for FreeBSD.
.PP
\&\fImkppport\fR has been integrated, and all \fIppport.h\fR files in the core will now
be autogenerated at build time (and removed during cleanup).
.SS "Installation improvements."
.IX Subsection "Installation improvements."
\&\fIinstallman\fR now works with \f(CW\*(C`\-Duserelocatableinc\*(C'\fR and \f(CW\*(C`DESTDIR\*(C'\fR.
.PP
\&\fIinstallperl\fR no longer installs:
.IP "\(bu" 4
static library files of statically linked extensions when a shared perl library
is being used. (They are not needed. See \*(L"Windows\*(R" below).
.IP "\(bu" 4
\&\fI\s-1SIGNATURE\s0\fR and \fIPAUSE*.pub\fR (\s-1CPAN\s0 files)
.IP "\(bu" 4
\&\fI\s-1NOTES\s0\fR and \fI\s-1PATCHING\s0\fR (ExtUtils files)
.IP "\(bu" 4
\&\fIperlld\fR and \fIld2\fR (Cygwin files)
.SS "Platform Specific Changes"
.IX Subsection "Platform Specific Changes"
There are improved hints for \s-1AIX\s0, Cygwin, \s-1DEC/OSF\s0, FreeBSD, \s-1HP/UX\s0, Irix 6
Linux, MachTen, NetBSD, \s-1OS/390\s0, \s-1QNX\s0, \s-1SCO\s0, Solaris, SunOS, System V Release 5.x
(UnixWare 7, OpenUNIX 8), Ultrix, \s-1UMIPS\s0, uts and \s-1VOS\s0.
.PP
\fIFreeBSD\fR
.IX Subsection "FreeBSD"
.IP "\(bu" 4
Drop \f(CW\*(C`\-std=c89\*(C'\fR and \f(CW\*(C`\-ansi\*(C'\fR if using \f(CW\*(C`long long\*(C'\fR as the main integral type,
else in FreeBSD 6.2 (and perhaps other releases), system headers do not
declare some functions required by perl.
.PP
\fISolaris\fR
.IX Subsection "Solaris"
.IP "\(bu" 4
Starting with Solaris 10, we do not want versioned shared libraries, because
those often indicate a private use only library. These problems could often
be triggered when SUNWbdb (Berkeley \s-1DB\s0) was installed. Hence if Solaris 10
is detected set \f(CW\*(C`ignore_versioned_solibs=y\*(C'\fR.
.PP
\fI\s-1VMS\s0\fR
.IX Subsection "VMS"
.IP "\(bu" 4
Allow \s-1IEEE\s0 math to be deselected on OpenVMS I64 (but it remains the default).
.IP "\(bu" 4
Record \s-1IEEE\s0 usage in \f(CW\*(C`config.h\*(C'\fR
.IP "\(bu" 4
Help older \s-1VMS\s0 compilers by using \f(CW\*(C`ccflags\*(C'\fR when building \f(CW\*(C`munchconfig.exe\*(C'\fR.
.IP "\(bu" 4
Don't try to build old \f(CW\*(C`Thread\*(C'\fR extension on \s-1VMS\s0 when \f(CW\*(C`\-Duseithreads\*(C'\fR has
been chosen.
.IP "\(bu" 4
Passing a raw string of \*(L"NaN\*(R" to \fInawk\fR causes a core dump \- so the string
has been changed to \*(L"*NaN*\*(R"
.IP "\(bu" 4
\&\fIt/op/stat.t\fR tests will now test hard links on \s-1VMS\s0 if they are supported.
.PP
\fIWindows\fR
.IX Subsection "Windows"
.IP "\(bu" 4
When using a shared perl library \fIinstallperl\fR no longer installs static
library files, import library files and export library files (of statically
linked extensions) and empty bootstrap files (of dynamically linked
extensions). This fixes a problem building PAR-Packer on Win32 with a debug
build of perl.
.IP "\(bu" 4
Various improvements to the win32 build process, including support for Visual
\&\*(C+ 2005 Express Edition (aka Visual \*(C+ 8.x).
.IP "\(bu" 4
\&\fIperl.exe\fR will now have an icon if built with MinGW or Borland.
.IP "\(bu" 4
Improvements to the perl\-static.exe build process.
.IP "\(bu" 4
Add Win32 makefile option to link all extensions statically.
.IP "\(bu" 4
The \fIWinCE\fR directory has been merged into the \fIWin32\fR directory.
.IP "\(bu" 4
\&\f(CW\*(C`setlocale\*(C'\fR tests have been re-enabled for Windows \s-1XP\s0 onwards.
.SH "Selected Bug Fixes"
.IX Header "Selected Bug Fixes"
.SS "Unicode"
.IX Subsection "Unicode"
Many many bugs related to the internal Unicode implementation (\s-1UTF\-8\s0) have
been fixed. In particular, long standing bugs related to returning Unicode
via \f(CW\*(C`tie\*(C'\fR, overloading or \f(CW$@\fR are now gone, some of which were never
reported.
.PP
\&\f(CW\*(C`unpack\*(C'\fR will internally convert the string back from \s-1UTF\-8\s0 on numeric types.
This is a compromise between the full consistency now in 5.10, and the current
behaviour, which is often used as a \*(L"feature\*(R" on string types.
.PP
Using \f(CW\*(C`:crlf\*(C'\fR and \f(CW\*(C`UTF\-16\*(C'\fR \s-1IO\s0 layers together will now work.
.PP
Fixed problems with \f(CW\*(C`split\*(C'\fR, Unicode \f(CW\*(C`/\es+/\*(C'\fR and \f(CW\*(C`/ \e0/\*(C'\fR.
.PP
Fixed bug \s-1RT\s0 #40641 \- encoding of Unicode characters in regular expressions.
.PP
Fixed a bug where using certain patterns in a regexp led to a panic.
[\s-1RT\s0 #45337]
.PP
Perl no longer segfaults (due to infinite internal recursion) if the locale's
character is not \s-1UTF\-8\s0 [\s-1RT\s0 #41442]:
.PP
.Vb 2
\&    use open \*(Aq:locale\*(Aq;
\&    print STDERR "\ex{201e}"; # &bdquo;
.Ve
.SS "PerlIO"
.IX Subsection "PerlIO"
Inconsistencies have been fixed in the reference counting PerlIO uses to keep
track of Unix file descriptors, and the \s-1API\s0 used by \s-1XS\s0 code to manage getting
and releasing \f(CW\*(C`FILE *\*(C'\fRs
.SS "Magic"
.IX Subsection "Magic"
Several bugs have been fixed in Magic, the internal system used to implement
features such as \f(CW\*(C`tie\*(C'\fR, tainting and threads sharing.
.PP
\&\f(CW\*(C`undef @array\*(C'\fR on a tied array now correctly calls the \f(CW\*(C`CLEAR\*(C'\fR method.
.PP
Some of the bitwise ops were not checking whether their arguments were magical
before using them. [\s-1RT\s0 #24816]
.PP
Magic is no longer invoked twice by the expression \f(CW\*(C`\e&$x\*(C'\fR
.PP
A bug with assigning large numbers and tainting has been resolved.
[\s-1RT\s0 #40708]
.PP
A new entry has been added to the \s-1MAGIC\s0 vtable \- \f(CW\*(C`svt_local\*(C'\fR. This is used
when copying magic to the new value during \f(CW\*(C`local\*(C'\fR, allowing certain problems
with localising shared variables to be resolved.
.PP
For the implementation details, see \*(L"Magic Virtual Tables\*(R" in perlguts.
.SS "Reblessing overloaded objects now works"
.IX Subsection "Reblessing overloaded objects now works"
Internally, perl object-ness is on the referent, not the reference, even
though methods can only be called via a reference. However, the original
implementation of overloading stored flags related to overloading on the
reference, relying on the flags being copied when the reference was copied,
or set at the creation of a new reference. This manifests in a bug \- if you
rebless an object from a class that has overloading, into one that does not,
then any other existing references think that they (still) point to an
overloaded object, choose these C code paths, and then throw errors.
Analogously, blessing into an overloaded class when other references exist will
result in them not using overloading.
.PP
The implementation has been fixed for 5.10, but this fix changes the semantics
of flag bits, so is not binary compatible, so can't be applied to 5.8.9.
However, 5.8.9 has a work-around that implements the same bug fix. If the
referent has multiple references, then all the other references are located and
corrected. A full search is avoided whenever possible by scanning lexicals
outwards from the current subroutine, and the argument stack.
.PP
A certain well known Linux vendor applied incomplete versions of this bug fix
to their \fI/usr/bin/perl\fR and then prematurely closed bug reports about
performance issues without consulting back upstream. This not being enough,
they then proceeded to ignore the necessary fixes to these unreleased changes
for 11 months, until massive pressure was applied by their long-suffering
paying customers, catalysed by the failings being featured on a prominent blog
and Slashdot.
.ie n .SS """strict"" now propagates correctly into string evals"
.el .SS "\f(CWstrict\fP now propagates correctly into string evals"
.IX Subsection "strict now propagates correctly into string evals"
Under 5.8.8 and earlier:
.PP
.Vb 3
\&    $ perl5.8.8 \-e \*(Aquse strict; eval "use foo bar" or die $@\*(Aq
\&    Can\*(Aqt locate foo.pm in @INC (@INC contains: ... .) at (eval 1) line 2.
\&    BEGIN failed\-\-compilation aborted at (eval 1) line 2.
.Ve
.PP
Under 5.8.9 and later:
.PP
.Vb 2
\&    $ perl5.8.9 \-e \*(Aquse strict; eval "use foo bar" or die $@\*(Aq
\&    Bareword "bar" not allowed while "strict subs" in use at (eval 1) line 1.
.Ve
.PP
This may cause problems with programs that parse the error message and rely
on the buggy behaviour.
.SS "Other fixes"
.IX Subsection "Other fixes"
.IP "\(bu" 4
The tokenizer no longer treats \f(CW\*(C`=cute\*(C'\fR (and other words beginning
with \f(CW\*(C`=cut\*(C'\fR) as a synonym for \f(CW\*(C`=cut\*(C'\fR.
.IP "\(bu" 4
Calling \f(CW\*(C`CORE::require\*(C'\fR
.Sp
\&\f(CW\*(C`CORE::require\*(C'\fR and \f(CW\*(C`CORE::do\*(C'\fR were always parsed as \f(CW\*(C`require\*(C'\fR and \f(CW\*(C`do\*(C'\fR
when they were overridden. This is now fixed.
.IP "\(bu" 4
Stopped memory leak on long \fI/etc/groups\fR entries.
.IP "\(bu" 4
\&\f(CW\*(C`while (my $x ...) { ...; redo }\*(C'\fR shouldn't \f(CW\*(C`undef $x\*(C'\fR.
.Sp
In the presence of \f(CW\*(C`my\*(C'\fR in the conditional of a \f(CW\*(C`while()\*(C'\fR, \f(CW\*(C`until()\*(C'\fR,
or \f(CW\*(C`for(;;)\*(C'\fR loop, we now add an extra scope to the body so that \f(CW\*(C`redo\*(C'\fR
doesn't \f(CW\*(C`undef\*(C'\fR the lexical.
.IP "\(bu" 4
The \f(CW\*(C`encoding\*(C'\fR pragma now correctly ignores anything following an \f(CW\*(C`@\*(C'\fR 
character in the \f(CW\*(C`LC_ALL\*(C'\fR and \f(CW\*(C`LANG\*(C'\fR environment variables. [\s-1RT\s0 # 49646]
.IP "\(bu" 4
A segfault observed with some \fIgcc\fR 3.3 optimisations is resolved.
.IP "\(bu" 4
A possible segfault when \f(CW\*(C`unpack\*(C'\fR used in scalar context with \f(CW\*(C`()\*(C'\fR groups
is resolved. [\s-1RT\s0 #50256]
.IP "\(bu" 4
Resolved issue where \f(CW$!\fR could be changed by a signal handler interrupting
a \f(CW\*(C`system\*(C'\fR call.
.IP "\(bu" 4
Fixed bug \s-1RT\s0 #37886, symbolic dereferencing was allowed in the argument of
\&\f(CW\*(C`defined\*(C'\fR even under the influence of \f(CW\*(C`use strict \*(Aqrefs\*(Aq\*(C'\fR.
.IP "\(bu" 4
Fixed bug \s-1RT\s0 #43207, where \f(CW\*(C`lc\*(C'\fR/\f(CW\*(C`uc\*(C'\fR inside \f(CW\*(C`sort\*(C'\fR affected the return
value.
.IP "\(bu" 4
Fixed bug \s-1RT\s0 #45607, where \f(CW\*(C`*{"BONK"} = \e&{"BONK"}\*(C'\fR didn't work correctly.
.IP "\(bu" 4
Fixed bug \s-1RT\s0 #35878, croaking from a \s-1XSUB\s0 called via \f(CW\*(C`goto &xsub\*(C'\fR corrupts perl
internals.
.IP "\(bu" 4
Fixed bug \s-1RT\s0 #32539, \fIDynaLoader.o\fR is moved into \fIlibperl.so\fR to avoid the
need to statically link DynaLoader into the stub perl executable. With this
\&\fIlibperl.so\fR provides everything needed to get a functional embedded perl
interpreter to run.
.IP "\(bu" 4
Fix bug \s-1RT\s0 #36267 so that assigning to a tied hash doesn't change the
underlying hash.
.IP "\(bu" 4
Fix bug \s-1RT\s0 #6006, regexp replaces using large replacement variables
fail some of the time, \fIi.e.\fR when substitution contains something
like \f(CW\*(C`${10}\*(C'\fR (note the bracket) instead of just \f(CW$10\fR.
.IP "\(bu" 4
Fix bug \s-1RT\s0 #45053, \f(CW\*(C`Perl_newCONSTSUB()\*(C'\fR is now thread safe.
.SS "Platform Specific Fixes"
.IX Subsection "Platform Specific Fixes"
\fIDarwin / MacOS X\fR
.IX Subsection "Darwin / MacOS X"
.IP "\(bu" 4
Various improvements to 64 bit builds.
.IP "\(bu" 4
Mutex protection added in \f(CW\*(C`PerlIOStdio_close()\*(C'\fR to avoid race conditions.
Hopefully this fixes failures in the threads tests \fIfree.t\fR and \fIblocks.t\fR.
.IP "\(bu" 4
Added forked terminal support to the debugger, with the ability to update the
window title.
.PP
\fI\s-1OS/2\s0\fR
.IX Subsection "OS/2"
.IP "\(bu" 4
A build problem with specifying \f(CW\*(C`USE_MULTI\*(C'\fR and \f(CW\*(C`USE_ITHREADS\*(C'\fR but without
\&\f(CW\*(C`USE_IMP_SYS\*(C'\fR has been fixed.
.IP "\(bu" 4
\&\f(CW\*(C`OS2::REXX\*(C'\fR upgraded to version 1.04
.PP
\fITru64\fR
.IX Subsection "Tru64"
.IP "\(bu" 4
Aligned floating point build policies for \fIcc\fR and \fIgcc\fR.
.PP
\fIRedHat Linux\fR
.IX Subsection "RedHat Linux"
.IP "\(bu" 4
Revisited a patch from 5.6.1 for \s-1RH7\s0.2 for Intel's \fIicc\fR [\s-1RT\s0 #7916], added an
additional check for \f(CW$Config{gccversion}\fR.
.PP
\fISolaris/i386\fR
.IX Subsection "Solaris/i386"
.IP "\(bu" 4
Use \f(CW\*(C`\-DPTR_IS_LONG\*(C'\fR when using 64 bit integers
.PP
\fI\s-1VMS\s0\fR
.IX Subsection "VMS"
.IP "\(bu" 4
Fixed \f(CW\*(C`PerlIO::Scalar\*(C'\fR in-memory file record-style reads.
.IP "\(bu" 4
pipe shutdown at process exit should now be more robust.
.IP "\(bu" 4
Bugs in \s-1VMS\s0 exit handling tickled by \f(CW\*(C`Test::Harness\*(C'\fR 2.64 have been fixed.
.IP "\(bu" 4
Fix \f(CW\*(C`fcntl()\*(C'\fR locking capability test in \fIconfigure.com\fR.
.IP "\(bu" 4
Replaced \f(CW\*(C`shrplib=\*(Aqdefine\*(Aq\*(C'\fR with \f(CW\*(C`useshrplib=\*(Aqtrue\*(Aq\*(C'\fR on \s-1VMS\s0.
.PP
\fIWindows\fR
.IX Subsection "Windows"
.IP "\(bu" 4
\&\f(CW\*(C`File::Find\*(C'\fR used to fail when the target directory is a bare drive letter and
\&\f(CW\*(C`no_chdir\*(C'\fR is 1 (the default is 0). [\s-1RT\s0 #41555]
.IP "\(bu" 4
A build problem with specifying \f(CW\*(C`USE_MULTI\*(C'\fR and \f(CW\*(C`USE_ITHREADS\*(C'\fR but without
\&\f(CW\*(C`USE_IMP_SYS\*(C'\fR has been fixed.
.IP "\(bu" 4
The process id is no longer truncated to 16 bits on some Windows platforms
( http://bugs.activestate.com/show_bug.cgi?id=72443 )
.IP "\(bu" 4
Fixed bug \s-1RT\s0 #54828 in \fIperlio.c\fR where calling \f(CW\*(C`binmode\*(C'\fR on Win32 and Cygwin
may cause a segmentation fault.
.SS "Smaller fixes"
.IX Subsection "Smaller fixes"
.IP "\(bu" 4
It is now possible to overload \f(CW\*(C`eq\*(C'\fR when using \f(CW\*(C`nomethod\*(C'\fR.
.IP "\(bu" 4
Various problems using \f(CW\*(C`overload\*(C'\fR with 64 bit integers corrected.
.IP "\(bu" 4
The reference count of \f(CW\*(C`PerlIO\*(C'\fR file descriptors is now correctly handled.
.IP "\(bu" 4
On \s-1VMS\s0, escaped dots will be preserved when converted to Unix syntax.
.IP "\(bu" 4
\&\f(CW\*(C`keys %+\*(C'\fR no longer throws an \f(CW\*(Aqambiguous\*(Aq\fR warning.
.IP "\(bu" 4
Using \f(CW\*(C`#!perl \-d\*(C'\fR could trigger an assertion, which has been fixed.
.IP "\(bu" 4
Don't stringify tied code references in \f(CW@INC\fR when calling \f(CW\*(C`require\*(C'\fR.
.IP "\(bu" 4
Code references in \f(CW@INC\fR report the correct file name when \f(CW\*(C`_\|_FILE_\|_\*(C'\fR is
used.
.IP "\(bu" 4
Width and precision in sprintf didn't handle characters above 255 correctly.
[\s-1RT\s0 #40473]
.IP "\(bu" 4
List slices with indices out of range now work more consistently.
[\s-1RT\s0 #39882]
.IP "\(bu" 4
A change introduced with perl 5.8.1 broke the parsing of arguments of the form
\&\f(CW\*(C`\-foo=bar\*(C'\fR with the \f(CW\*(C`\-s\*(C'\fR on the <#!> line. This has been fixed. See
http://bugs.activestate.com/show_bug.cgi?id=43483
.IP "\(bu" 4
\&\f(CW\*(C`tr///\*(C'\fR is now threadsafe. Previously it was storing a swash inside its \s-1OP\s0,
rather than in a pad.
.IP "\(bu" 4
\&\fIpod2html\fR labels anchors more consistently and handles nested definition
lists better.
.IP "\(bu" 4
\&\f(CW\*(C`threads\*(C'\fR cleanup veto has been extended to include \f(CW\*(C`perl_free()\*(C'\fR and
\&\f(CW\*(C`perl_destruct()\*(C'\fR
.IP "\(bu" 4
On some systems, changes to \f(CW$ENV{TZ}\fR would not always be
respected by the underlying calls to \f(CW\*(C`localtime_r()\*(C'\fR.  Perl now
forces the inspection of the environment on these systems.
.IP "\(bu" 4
The special variable \f(CW$^R\fR is now more consistently set when executing
regexps using the \f(CW\*(C`(?{...})\*(C'\fR construct.  In particular, it will still
be set even if backreferences or optional sub-patterns \f(CW\*(C`(?:...)?\*(C'\fR are
used.
.SH "New or Changed Diagnostics"
.IX Header "New or Changed Diagnostics"
.ie n .SS "panic: sv_chop %s"
.el .SS "panic: sv_chop \f(CW%s\fP"
.IX Subsection "panic: sv_chop %s"
This new fatal error occurs when the C routine \f(CW\*(C`Perl_sv_chop()\*(C'\fR was passed a
position that is not within the scalar's string buffer. This is caused by
buggy \s-1XS\s0 code, and at this point recovery is not possible.
.SS "Maximal count of pending signals (%s) exceeded"
.IX Subsection "Maximal count of pending signals (%s) exceeded"
This new fatal error occurs when the perl process has to abort due to
too many pending signals, which is bound to prevent perl from being
able to handle further incoming signals safely.
.ie n .SS "panic: attempt to call %s in %s"
.el .SS "panic: attempt to call \f(CW%s\fP in \f(CW%s\fP"
.IX Subsection "panic: attempt to call %s in %s"
This new fatal error occurs when the \s-1ACL\s0 version file test operator is used
where it is not available on the current platform. Earlier checks mean that
it should never be possible to get this.
.SS "\s-1FETCHSIZE\s0 returned a negative value"
.IX Subsection "FETCHSIZE returned a negative value"
New error indicating that a tied array has claimed to have a negative
number of elements.
.ie n .SS "Can't upgrade %s (%d) to %d"
.el .SS "Can't upgrade \f(CW%s\fP (%d) to \f(CW%d\fP"
.IX Subsection "Can't upgrade %s (%d) to %d"
Previously the internal error from the \s-1SV\s0 upgrade code was the less informative
\&\fICan't upgrade that kind of scalar\fR. It now reports the current internal type,
and the new type requested.
.ie n .SS "%s argument is not a \s-1HASH\s0 or \s-1ARRAY\s0 element or a subroutine"
.el .SS "\f(CW%s\fP argument is not a \s-1HASH\s0 or \s-1ARRAY\s0 element or a subroutine"
.IX Subsection "%s argument is not a HASH or ARRAY element or a subroutine"
This error, thrown if an invalid argument is provided to \f(CW\*(C`exists\*(C'\fR now
correctly includes \*(L"or a subroutine\*(R". [\s-1RT\s0 #38955]
.ie n .SS "Cannot make the non-overridable builtin %s fatal"
.el .SS "Cannot make the non-overridable builtin \f(CW%s\fP fatal"
.IX Subsection "Cannot make the non-overridable builtin %s fatal"
This error in \f(CW\*(C`Fatal\*(C'\fR previously did not show the name of the builtin in
question (now represented by \f(CW%s\fR above).
.ie n .SS "Unrecognized character '%s' in column %d"
.el .SS "Unrecognized character '%s' in column \f(CW%d\fP"
.IX Subsection "Unrecognized character '%s' in column %d"
This error previously did not state the column.
.SS "Offset outside string"
.IX Subsection "Offset outside string"
This can now also be generated by a \f(CW\*(C`seek\*(C'\fR on a file handle using
\&\f(CW\*(C`PerlIO::scalar\*(C'\fR.
.SS "Invalid escape in the specified encoding in regexp; marked by <\-\- \s-1HERE\s0 in m/%s/"
.IX Subsection "Invalid escape in the specified encoding in regexp; marked by <-- HERE in m/%s/"
New error, introduced as part of the fix to \s-1RT\s0 #40641 to handle encoding
of Unicode characters in regular expression comments.
.SS "Your machine doesn't support dump/undump."
.IX Subsection "Your machine doesn't support dump/undump."
A more informative fatal error issued when calling \f(CW\*(C`dump\*(C'\fR on Win32 and
Cygwin. (Given that the purpose of \f(CW\*(C`dump\*(C'\fR is to abort with a core dump,
and core dumps can't be produced on these platforms, this is more useful than
silently exiting.)
.SH "Changed Internals"
.IX Header "Changed Internals"
The perl sources can now be compiled with a \*(C+ compiler instead of a C
compiler. A necessary implementation details is that under \*(C+, the macro
\&\f(CW\*(C`XS\*(C'\fR used to define XSUBs now includes an \f(CW\*(C`extern "C"\*(C'\fR definition. A side
effect of this is that \fB\*(C+\fR code that used the construction
.PP
.Vb 1
\&    typedef XS(SwigPerlWrapper);
.Ve
.PP
now needs to be written
.PP
.Vb 1
\&    typedef XSPROTO(SwigPerlWrapper);
.Ve
.PP
using the new \f(CW\*(C`XSPROTO\*(C'\fR macro, in order to compile. C extensions are
unaffected, although C extensions are encouraged to use \f(CW\*(C`XSPROTO\*(C'\fR too.
This change was present in the 5.10.0 release of perl, so any actively
maintained code that happened to use this construction should already have
been adapted. Code that needs changing will fail with a compilation error.
.PP
\&\f(CW\*(C`set\*(C'\fR magic on localizing/assigning to a magic variable will now only
trigger for \fIcontainer magics\fR, i.e. it will for \f(CW%ENV\fR or \f(CW%SIG\fR
but not for \f(CW$#array\fR.
.PP
The new \s-1API\s0 macro \f(CW\*(C`newSVpvs()\*(C'\fR can be used in place of constructions such as
\&\f(CW\*(C`newSVpvn("ISA", 3)\*(C'\fR. It takes a single string constant, and at C compile
time determines its length.
.PP
The new \s-1API\s0 function \f(CW\*(C`Perl_newSV_type()\*(C'\fR can be used as a more efficient
replacement of the common idiom
.PP
.Vb 2
\&    sv = newSV(0);
\&    sv_upgrade(sv, type);
.Ve
.PP
Similarly \f(CW\*(C`Perl_newSVpvn_flags()\*(C'\fR can be used to combine
\&\f(CW\*(C`Perl_newSVpv()\*(C'\fR with \f(CW\*(C`Perl_sv_2mortal()\*(C'\fR or the equivalent
\&\f(CW\*(C`Perl_sv_newmortal()\*(C'\fR with \f(CW\*(C`Perl_sv_setpvn()\*(C'\fR
.PP
Two new macros \f(CW\*(C`mPUSHs()\*(C'\fR and \f(CW\*(C`mXPUSHs()\*(C'\fR are added, to make it easier to
push mortal SVs onto the stack. They were then used to fix several bugs where
values on the stack had not been mortalised.
.PP
A \f(CW\*(C`Perl_signbit()\*(C'\fR function was added to test the sign of an \f(CW\*(C`NV\*(C'\fR. It 
maps to the system one when available.
.PP
\&\f(CW\*(C`Perl_av_reify()\*(C'\fR, \f(CW\*(C`Perl_lex_end()\*(C'\fR, \f(CW\*(C`Perl_mod()\*(C'\fR, \f(CW\*(C`Perl_op_clear()\*(C'\fR,
\&\f(CW\*(C`Perl_pop_return()\*(C'\fR, \f(CW\*(C`Perl_qerror()\*(C'\fR, \f(CW\*(C`Perl_setdefout()\*(C'\fR,
\&\f(CW\*(C`Perl_vivify_defelem()\*(C'\fR and \f(CW\*(C`Perl_yylex()\*(C'\fR are now visible to extensions.
This was required to allow \f(CW\*(C`Data::Alias\*(C'\fR to work on Windows.
.PP
\&\f(CW\*(C`Perl_find_runcv()\*(C'\fR is now visible to perl core extensions. This was required
to allow \f(CW\*(C`Sub::Current\*(C'\fR to work on Windows.
.PP
\&\f(CW\*(C`ptr_table*\*(C'\fR functions are now available in unthreaded perl. \f(CW\*(C`Storable\*(C'\fR
takes advantage of this.
.PP
There have been many small cleanups made to the internals. In particular,
\&\f(CW\*(C`Perl_sv_upgrade()\*(C'\fR has been simplified considerably, with a straight-through
code path that uses \f(CW\*(C`memset()\*(C'\fR and \f(CW\*(C`memcpy()\*(C'\fR to initialise the new body,
rather than assignment via multiple temporary variables. It has also
benefited from simplification and de-duplication of the arena management
code.
.PP
A lot of small improvements in the code base were made due to reports from
the Coverity static code analyzer.
.PP
Corrected use and documentation of \f(CW\*(C`Perl_gv_stashpv()\*(C'\fR, \f(CW\*(C`Perl_gv_stashpvn()\*(C'\fR,
\&\f(CW\*(C`Perl_gv_stashsv()\*(C'\fR functions (last parameter is a bitmask, not boolean).
.PP
\&\f(CW\*(C`PERL_SYS_INIT\*(C'\fR, \f(CW\*(C`PERL_SYS_INIT3\*(C'\fR and \f(CW\*(C`PERL_SYS_TERM\*(C'\fR macros have been
changed into functions.
.PP
\&\f(CW\*(C`PERLSYS_TERM\*(C'\fR no longer requires a context. \f(CW\*(C`PerlIO_teardown()\*(C'\fR
is now called without a context, and debugging output in this function has
been disabled because that required that an interpreter was present, an invalid
assumption at termination time.
.PP
All compile time options which affect binary compatibility have been grouped
together into a global variable (\f(CW\*(C`PL_bincompat_options\*(C'\fR).
.PP
The values of \f(CW\*(C`PERL_REVISION\*(C'\fR, \f(CW\*(C`PERL_VERSION\*(C'\fR and \f(CW\*(C`PERL_SUBVERSION\*(C'\fR are
now baked into global variables (and hence into any shared perl library).
Additionally under \f(CW\*(C`MULTIPLICITY\*(C'\fR, the perl executable now records the size of
the interpreter structure (total, and for this version). Coupled with
\&\f(CW\*(C`PL_bincompat_options\*(C'\fR this will allow 5.8.10 (and later), when compiled with a
shared perl library, to perform sanity checks in \f(CW\*(C`main()\*(C'\fR to verify that the
shared library is indeed binary compatible.
.PP
Symbolic references can now have embedded NULs. The new public function
\&\f(CW\*(C`Perl_get_cvn_flags()\*(C'\fR can be used in extensions if you have to handle them.
.SS "Macro cleanups"
.IX Subsection "Macro cleanups"
The core code, and \s-1XS\s0 code in \fIext\fR that is not dual-lived on \s-1CPAN\s0, no longer
uses the macros \f(CW\*(C`PL_na\*(C'\fR, \f(CW\*(C`NEWSV()\*(C'\fR, \f(CW\*(C`Null()\*(C'\fR, \f(CW\*(C`Nullav\*(C'\fR, \f(CW\*(C`Nullcv\*(C'\fR,
\&\f(CW\*(C`Nullhv\*(C'\fR, \f(CW\*(C`Nullhv\*(C'\fR \fIetc\fR. Their use is discouraged in new code,
particularly \f(CW\*(C`PL_na\*(C'\fR, which is a small performance hit.
.SH "New Tests"
.IX Header "New Tests"
Many modules updated from \s-1CPAN\s0 incorporate new tests. Some core specific
tests have been added:
.IP "ext/DynaLoader/t/DynaLoader.t" 4
.IX Item "ext/DynaLoader/t/DynaLoader.t"
Tests for the \f(CW\*(C`DynaLoader\*(C'\fR module.
.IP "t/comp/fold.t" 4
.IX Item "t/comp/fold.t"
Tests for compile-time constant folding.
.IP "t/io/pvbm.t" 4
.IX Item "t/io/pvbm.t"
Tests incorporated from 5.10.0 which check that there is no unexpected
interaction between the internal types \f(CW\*(C`PVBM\*(C'\fR and \f(CW\*(C`PVGV\*(C'\fR.
.IP "t/lib/proxy_constant_subs.t" 4
.IX Item "t/lib/proxy_constant_subs.t"
Tests for the new form of constant subroutines.
.IP "t/op/attrhand.t" 4
.IX Item "t/op/attrhand.t"
Tests for \f(CW\*(C`Attribute::Handlers\*(C'\fR.
.IP "t/op/dbm.t" 4
.IX Item "t/op/dbm.t"
Tests for \f(CW\*(C`dbmopen\*(C'\fR.
.IP "t/op/inccode\-tie.t" 4
.IX Item "t/op/inccode-tie.t"
Calls all tests in \fIt/op/inccode.t\fR after first tying \f(CW@INC\fR.
.IP "t/op/incfilter.t" 4
.IX Item "t/op/incfilter.t"
Tests for source filters returned from code references in \f(CW@INC\fR.
.IP "t/op/kill0.t" 4
.IX Item "t/op/kill0.t"
Tests for \s-1RT\s0 #30970.
.IP "t/op/qrstack.t" 4
.IX Item "t/op/qrstack.t"
Tests for \s-1RT\s0 #41484.
.IP "t/op/qr.t" 4
.IX Item "t/op/qr.t"
Tests for the \f(CW\*(C`qr//\*(C'\fR construct.
.IP "t/op/regexp_qr_embed.t" 4
.IX Item "t/op/regexp_qr_embed.t"
Tests for the \f(CW\*(C`qr//\*(C'\fR construct within another regexp.
.IP "t/op/regexp_qr.t" 4
.IX Item "t/op/regexp_qr.t"
Tests for the \f(CW\*(C`qr//\*(C'\fR construct.
.IP "t/op/rxcode.t" 4
.IX Item "t/op/rxcode.t"
Tests for \s-1RT\s0 #32840.
.IP "t/op/studytied.t" 4
.IX Item "t/op/studytied.t"
Tests for \f(CW\*(C`study\*(C'\fR on tied scalars.
.IP "t/op/substT.t" 4
.IX Item "t/op/substT.t"
Tests for \f(CW\*(C`subst\*(C'\fR run under \f(CW\*(C`\-T\*(C'\fR mode.
.IP "t/op/symbolcache.t" 4
.IX Item "t/op/symbolcache.t"
Tests for \f(CW\*(C`undef\*(C'\fR and \f(CW\*(C`delete\*(C'\fR on stash entries that are bound to
subroutines or methods.
.IP "t/op/upgrade.t" 4
.IX Item "t/op/upgrade.t"
Tests for \f(CW\*(C`Perl_sv_upgrade()\*(C'\fR.
.IP "t/mro/package_aliases.t" 4
.IX Item "t/mro/package_aliases.t"
\&\s-1MRO\s0 tests for \f(CW\*(C`isa\*(C'\fR and package aliases.
.IP "t/pod/twice.t" 4
.IX Item "t/pod/twice.t"
Tests for calling \f(CW\*(C`Pod::Parser\*(C'\fR twice.
.IP "t/run/cloexec.t" 4
.IX Item "t/run/cloexec.t"
Tests for inheriting file descriptors across \f(CW\*(C`exec\*(C'\fR (close-on-exec).
.IP "t/uni/cache.t" 4
.IX Item "t/uni/cache.t"
Tests for the \s-1UTF\-8\s0 caching code.
.IP "t/uni/chr.t" 4
.IX Item "t/uni/chr.t"
Test that strange encodings do not upset \f(CW\*(C`Perl_pp_chr()\*(C'\fR.
.IP "t/uni/greek.t" 4
.IX Item "t/uni/greek.t"
Tests for \s-1RT\s0 #40641.
.IP "t/uni/latin2.t" 4
.IX Item "t/uni/latin2.t"
Tests for \s-1RT\s0 #40641.
.IP "t/uni/overload.t" 4
.IX Item "t/uni/overload.t"
Tests for returning Unicode from overloaded values.
.IP "t/uni/tie.t" 4
.IX Item "t/uni/tie.t"
Tests for returning Unicode from tied variables.
.SH "Known Problems"
.IX Header "Known Problems"
There are no known new bugs.
.PP
However, programs that rely on bugs that have been fixed will have problems.
Also, many bug fixes present in 5.10.0 can't be back-ported to the 5.8.x
branch, because they require changes that are binary incompatible, or because
the code changes are too large and hence too risky to incorporate.
.PP
We have only limited volunteer labour, and the maintenance burden is
getting increasingly complex. Hence this will be the last significant
release of the 5.8.x series. Any future releases of 5.8.x will likely
only be to deal with security issues, and platform build
failures. Hence you should look to migrating to 5.10.x, if you have
not started already. Alternatively, if business requirements constrain
you to continue to use 5.8.x, you may wish to consider commercial
support from firms such as ActiveState.
.SH "Platform Specific Notes"
.IX Header "Platform Specific Notes"
.SS "Win32"
.IX Subsection "Win32"
\&\f(CW\*(C`readdir()\*(C'\fR, \f(CW\*(C`cwd()\*(C'\fR, \f(CW$^X\fR and \f(CW@INC\fR now use the alternate (short)
filename if the long name is outside the current codepage (Jan Dubois).
.PP
\fIUpdated Modules\fR
.IX Subsection "Updated Modules"
.IP "\(bu" 4
\&\f(CW\*(C`Win32\*(C'\fR upgraded to version 0.38. Now has a documented 'WinVista' response
from \f(CW\*(C`GetOSName\*(C'\fR and support for Vista's privilege elevation in \f(CW\*(C`IsAdminUser\*(C'\fR.
Support for Unicode characters in path names. Improved cygwin and Win64
compatibility.
.IP "\(bu" 4
\&\f(CW\*(C`Win32API\*(C'\fR updated to 0.1001_01
.IP "\(bu" 4
\&\f(CW\*(C`killpg()\*(C'\fR support added to \f(CW\*(C`MSWin32\*(C'\fR (Jan Dubois).
.IP "\(bu" 4
\&\f(CW\*(C`File::Spec::Win32\*(C'\fR upgraded to version 3.2701
.SS "\s-1OS/2\s0"
.IX Subsection "OS/2"
\fIUpdated Modules\fR
.IX Subsection "Updated Modules"
.IP "\(bu" 4
\&\f(CW\*(C`OS2::Process\*(C'\fR upgraded to 1.03
.Sp
Ilya Zakharevich has added and documented several \f(CW\*(C`Window*\*(C'\fR and \f(CW\*(C`Clipbrd*\*(C'\fR
functions.
.IP "\(bu" 4
\&\f(CW\*(C`OS2::REXX::DLL\*(C'\fR, \f(CW\*(C`OS2::REXX\*(C'\fR updated to version 1.03
.SS "\s-1VMS\s0"
.IX Subsection "VMS"
\fIUpdated Modules\fR
.IX Subsection "Updated Modules"
.IP "\(bu" 4
\&\f(CW\*(C`DCLsym\*(C'\fR upgraded to version 1.03
.IP "\(bu" 4
\&\f(CW\*(C`Stdio\*(C'\fR upgraded to version 2.4
.IP "\(bu" 4
\&\f(CW\*(C`VMS::XSSymSet\*(C'\fR upgraded to 1.1.
.SH "Obituary"
.IX Header "Obituary"
Nick Ing-Simmons, long time Perl hacker, author of the \f(CW\*(C`Tk\*(C'\fR and \f(CW\*(C`Encode\*(C'\fR
modules, \fIperlio.c\fR in the core, and 5.003_02 pumpking, died of a heart
attack on 25th September 2006. He will be missed.
.SH "Acknowledgements"
.IX Header "Acknowledgements"
Some of the work in this release was funded by a \s-1TPF\s0 grant.
.PP
Steve Hay worked behind the scenes working out the causes of the differences
between core modules, their \s-1CPAN\s0 releases, and previous core releases, and
the best way to rectify them. He doesn't want to do it again. I know this
feeling, and I'm very glad he did it this time, instead of me.
.PP
Paul Fenwick assembled a team of 18 volunteers, who broke the back of writing
this document. In particular, Bradley Dean, Eddy Tan, and Vincent Pit
provided half the team's contribution.
.PP
Schwern verified the list of updated module versions, correcting quite a few
errors that I (and everyone else) had missed, both wrongly stated module
versions, and changed modules that had not been listed.
.PP
The crack Berlin-based \s-1QA\s0 team of Andreas Ko\*:nig and Slaven Rezic
tirelessly re-built snapshots, tested most everything \s-1CPAN\s0 against
them, and then identified the changes responsible for any module regressions,
ensuring that several show-stopper bugs were stomped before the first release
candidate was cut.
.PP
The other core committers contributed most of the changes, and applied most
of the patches sent in by the hundreds of contributors listed in \fI\s-1AUTHORS\s0\fR.
.PP
And obviously, Larry Wall, without whom we wouldn't have Perl.
.SH "Reporting Bugs"
.IX Header "Reporting Bugs"
If you find what you think is a bug, you might check the articles
recently posted to the comp.lang.perl.misc newsgroup and the perl
bug database at http://bugs.perl.org.  There may also be
information at http://www.perl.org, the Perl Home Page.
.PP
If you believe you have an unreported bug, please run the \fBperlbug\fR
program included with your release.  Be sure to trim your bug down
to a tiny but sufficient test case.  Your bug report, along with the
output of \f(CW\*(C`perl \-V\*(C'\fR, will be sent off to perlbug@perl.org to be
analysed by the Perl porting team.  You can browse and search
the Perl 5 bugs at http://bugs.perl.org/
.PP
If the bug you are reporting has security implications, which make it
inappropriate to send to a publicly archived mailing list, then please send
it to perl5\-security\-report@perl.org. This points to a closed subscription
unarchived mailing list, which includes
all the core committers, who will be able
to help assess the impact of issues, figure out a resolution, and help
co-ordinate the release of patches to mitigate or fix the problem across all
platforms on which Perl is supported. Please only use this address for security
issues in the Perl core, not for modules independently distributed on \s-1CPAN\s0.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
The \fIChanges\fR file for exhaustive details on what changed.
.PP
The \fI\s-1INSTALL\s0\fR file for how to build Perl.
.PP
The \fI\s-1README\s0\fR file for general stuff.
.PP
The \fIArtistic\fR and \fICopying\fR files for copyright information.
                                                                                               osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perl589delta5.18.1                           0100644 0001750 0001750 00000215136 12566207434 023507  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERL589DELTA 1"
.TH PERL589DELTA 1 "2013-11-04" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perl589delta \- what is new for perl v5.8.9
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document describes differences between the 5.8.8 release and
the 5.8.9 release.
.SH "Notice"
.IX Header "Notice"
The 5.8.9 release will be the last significant release of the 5.8.x
series. Any future releases of 5.8.x will likely only be to deal with
security issues, and platform build failures. Hence you should look to
migrating to 5.10.x, if you have not started already.
See \*(L"Known Problems\*(R" for more information.
.SH "Incompatible Changes"
.IX Header "Incompatible Changes"
A particular construction in the source code of extensions written in \*(C+
may need changing. See \*(L"Changed Internals\*(R" for more details. All
extensions written in C, most written in \*(C+, and all existing compiled
extensions are unaffected. This was necessary to improve \*(C+ support.
.PP
Other than this, there are no changes intentionally incompatible with 5.8.8.
If any exist, they are bugs and reports are welcome.
.SH "Core Enhancements"
.IX Header "Core Enhancements"
.SS "Unicode Character Database 5.1.0."
.IX Subsection "Unicode Character Database 5.1.0."
The copy of the Unicode Character Database included in Perl 5.8 has
been updated to 5.1.0 from 4.1.0. See
<http://www.unicode.org/versions/Unicode5.1.0/#NotableChanges> for the
notable changes.
.SS "stat and \-X on directory handles"
.IX Subsection "stat and -X on directory handles"
It is now possible to call \f(CW\*(C`stat\*(C'\fR and the \f(CW\*(C`\-X\*(C'\fR filestat operators on
directory handles. As both directory and file handles are barewords, there
can be ambiguities over which was intended. In these situations the file
handle semantics are preferred. Both also treat \f(CW*FILE{IO}\fR filehandles
like \f(CW*FILE\fR filehandles.
.ie n .SS "Source filters in @INC"
.el .SS "Source filters in \f(CW@INC\fP"
.IX Subsection "Source filters in @INC"
It's possible to enhance the mechanism of subroutine hooks in \f(CW@INC\fR by
adding a source filter on top of the filehandle opened and returned by the
hook. This feature was planned a long time ago, but wasn't quite working
until now. See \*(L"require\*(R" in perlfunc for details. (Nicholas Clark)
.SS "Exceptions in constant folding"
.IX Subsection "Exceptions in constant folding"
The constant folding routine is now wrapped in an exception handler, and
if folding throws an exception (such as attempting to evaluate 0/0), perl
now retains the current optree, rather than aborting the whole program.
Without this change, programs would not compile if they had expressions that
happened to generate exceptions, even though those expressions were in code
that could never be reached at runtime. (Nicholas Clark, Dave Mitchell)
.ie n .SS """no VERSION"""
.el .SS "\f(CWno VERSION\fP"
.IX Subsection "no VERSION"
You can now use \f(CW\*(C`no\*(C'\fR followed by a version number to specify that you
want to use a version of perl older than the specified one.
.SS "Improved internal \s-1UTF\-8\s0 caching code"
.IX Subsection "Improved internal UTF-8 caching code"
The code that caches calculated \s-1UTF\-8\s0 byte offsets for character offsets for
a string has been re-written. Several bugs have been located and eliminated,
and the code now makes better use of the information it has, so should be
faster. In particular, it doesn't scan to the end of a string before
calculating an offset within the string, which should speed up some operations
on long strings. It is now possible to disable the caching code at run time,
to verify that it is not the cause of suspected problems.
.SS "Runtime relocatable installations"
.IX Subsection "Runtime relocatable installations"
There is now \fIConfigure\fR support for creating a perl tree that is relocatable
at run time. see \*(L"Relocatable installations\*(R".
.SS "New internal variables"
.IX Subsection "New internal variables"
.ie n .IP """${^CHILD_ERROR_NATIVE}""" 4
.el .IP "\f(CW${^CHILD_ERROR_NATIVE}\fR" 4
.IX Item "${^CHILD_ERROR_NATIVE}"
This variable gives the native status returned by the last pipe close,
backtick command, successful call to \f(CW\*(C`wait\*(C'\fR or \f(CW\*(C`waitpid\*(C'\fR, or from the
\&\f(CW\*(C`system\*(C'\fR operator. See perlvar for details. (Contributed by Gisle Aas.)
.ie n .IP """${^UTF8CACHE}""" 4
.el .IP "\f(CW${^UTF8CACHE}\fR" 4
.IX Item "${^UTF8CACHE}"
This variable controls the state of the internal \s-1UTF\-8\s0 offset caching code.
1 for on (the default), 0 for off, \-1 to debug the caching code by checking
all its results against linear scans, and panicking on any discrepancy.
.ie n .SS """readpipe"" is now overridable"
.el .SS "\f(CWreadpipe\fP is now overridable"
.IX Subsection "readpipe is now overridable"
The built-in function \f(CW\*(C`readpipe\*(C'\fR is now overridable. Overriding it permits
also to override its operator counterpart, \f(CW\*(C`qx//\*(C'\fR (also known as \f(CW\*(C`\`\`\*(C'\fR).
.SS "simple exception handling macros"
.IX Subsection "simple exception handling macros"
Perl 5.8.9 (and 5.10.0 onwards) now provides a couple of macros to do very
basic exception handling in \s-1XS\s0 modules. You can use these macros if you call
code that may \f(CW\*(C`croak\*(C'\fR, but you need to do some cleanup before giving control
back to Perl. See \*(L"Exception Handling\*(R" in perlguts for more details.
.SS "\-D option enhancements"
.IX Subsection "-D option enhancements"
.IP "\(bu" 4
\&\f(CW\*(C`\-Dq\*(C'\fR suppresses the \fI\s-1EXECUTING...\s0\fR message when running under \f(CW\*(C`\-D\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`\-Dl\*(C'\fR logs runops loop entry and exit, and jump level popping.
.IP "\(bu" 4
\&\f(CW\*(C`\-Dv\*(C'\fR displays the process id as part of the trace output.
.SS "XS-assisted \s-1SWASHGET\s0"
.IX Subsection "XS-assisted SWASHGET"
Some pure-perl code that the regexp engine was using to retrieve Unicode
properties and transliteration mappings has been reimplemented in \s-1XS\s0
for faster execution.
(\s-1SADAHIRO\s0 Tomoyuki)
.SS "Constant subroutines"
.IX Subsection "Constant subroutines"
The interpreter internals now support a far more memory efficient form of
inlineable constants. Storing a reference to a constant value in a symbol
table is equivalent to a full typeglob referencing a constant subroutine,
but using about 400 bytes less memory. This proxy constant subroutine is
automatically upgraded to a real typeglob with subroutine if necessary.
The approach taken is analogous to the existing space optimisation for
subroutine stub declarations, which are stored as plain scalars in place
of the full typeglob.
.PP
However, to aid backwards compatibility of existing code, which (wrongly)
does not expect anything other than typeglobs in symbol tables, nothing in
core uses this feature, other than the regression tests.
.PP
Stubs for prototyped subroutines have been stored in symbol tables as plain
strings, and stubs for unprototyped subroutines as the number \-1, since 5.005,
so code which assumes that the core only places typeglobs in symbol tables
has been making incorrect assumptions for over 10 years.
.SH "New Platforms"
.IX Header "New Platforms"
Compile support added for:
.IP "\(bu" 4
DragonFlyBSD
.IP "\(bu" 4
MidnightBSD
.IP "\(bu" 4
MirOS \s-1BSD\s0
.IP "\(bu" 4
\&\s-1RISC OS \s0
.IP "\(bu" 4
Cray XT4/Catamount
.SH "Modules and Pragmata"
.IX Header "Modules and Pragmata"
.SS "New Modules"
.IX Subsection "New Modules"
.IP "\(bu" 4
\&\f(CW\*(C`Module::Pluggable\*(C'\fR is a simple framework to create modules that accept
pluggable sub-modules. The bundled version is 3.8
.IP "\(bu" 4
\&\f(CW\*(C`Module::CoreList\*(C'\fR is a hash of hashes that is keyed on perl version as
indicated in \f(CW$]\fR. The bundled version is 2.17
.IP "\(bu" 4
\&\f(CW\*(C`Win32API::File\*(C'\fR now available in core on Microsoft Windows. The bundled
version is 0.1001_01
.IP "\(bu" 4
\&\f(CW\*(C`Devel::InnerPackage\*(C'\fR finds all the packages defined by a single file. It is
part of the \f(CW\*(C`Module::Pluggable\*(C'\fR distribution. The bundled version is 0.3
.SS "Updated Modules"
.IX Subsection "Updated Modules"
.IP "\(bu" 4
\&\f(CW\*(C`attributes\*(C'\fR upgraded to version 0.09
.IP "\(bu" 4
\&\f(CW\*(C`AutoLoader\*(C'\fR upgraded to version 5.67
.IP "\(bu" 4
\&\f(CW\*(C`AutoSplit\*(C'\fR upgraded to 1.06
.IP "\(bu" 4
\&\f(CW\*(C`autouse\*(C'\fR upgraded to version 1.06
.IP "\(bu" 4
\&\f(CW\*(C`B\*(C'\fR upgraded from 1.09_01 to 1.19
.RS 4
.IP "\(bu" 4
provides new pad related abstraction macros \f(CW\*(C`B::NV::COP_SEQ_RANGE_LOW\*(C'\fR,
\&\f(CW\*(C`B::NV::COP_SEQ_RANGE_HIGH\*(C'\fR, \f(CW\*(C`B::NV::PARENT_PAD_INDEX\*(C'\fR,
\&\f(CW\*(C`B::NV::PARENT_FAKELEX_FLAGS\*(C'\fR, which hides the difference in storage in
5.10.0 and later.
.IP "\(bu" 4
provides \f(CW\*(C`B::sub_generation\*(C'\fR, which exposes \f(CW\*(C`PL_sub_generation\*(C'\fR
.IP "\(bu" 4
provides \f(CW\*(C`B::GV::isGV_with_GP\*(C'\fR, which on pre\-5.10 perls always returns true.
.IP "\(bu" 4
New type \f(CW\*(C`B::HE\*(C'\fR added with methods \f(CW\*(C`VAL\*(C'\fR, \f(CW\*(C`HASH\*(C'\fR and \f(CW\*(C`SVKEY_force\*(C'\fR
.IP "\(bu" 4
The \f(CW\*(C`B::GVf_IMPORTED_CV\*(C'\fR flag is now set correctly when a proxy
constant subroutine is imported.
.IP "\(bu" 4
bugs fixed in the handling of \f(CW\*(C`PMOP\*(C'\fRs.
.IP "\(bu" 4
\&\f(CW\*(C`B::BM::PREVIOUS\*(C'\fR returns now \f(CW\*(C`U32\*(C'\fR, not \f(CW\*(C`U16\*(C'\fR.
\&\f(CW\*(C`B::CV::START\*(C'\fR and \f(CW\*(C`B:CV::ROOT\*(C'\fR return now \f(CW\*(C`NULL\*(C'\fR on an \s-1XSUB,
\&\s0\f(CW\*(C`B::CV::XSUB\*(C'\fR and \f(CW\*(C`B::CV::XSUBANY\*(C'\fR return 0 on a non-XSUB.
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`B::C\*(C'\fR upgraded to 1.05
.IP "\(bu" 4
\&\f(CW\*(C`B::Concise\*(C'\fR upgraded to 0.76
.RS 4
.IP "\(bu" 4
new option \f(CW\*(C`\-src\*(C'\fR causes the rendering of each statement (starting with
the nextstate \s-1OP\s0) to be preceded by the first line of source code that
generates it.
.IP "\(bu" 4
new option \f(CW\*(C`\-stash="somepackage"\*(C'\fR, \f(CW\*(C`require\*(C'\fRs \*(L"somepackage\*(R", and then renders
each function defined in its namespace.
.IP "\(bu" 4
now has documentation of detailed hint symbols.
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`B::Debug\*(C'\fR upgraded to version 1.05
.IP "\(bu" 4
\&\f(CW\*(C`B::Deparse\*(C'\fR upgraded to version 0.87
.RS 4
.IP "\(bu" 4
properly deparse \f(CW\*(C`print readpipe $x, $y\*(C'\fR.
.IP "\(bu" 4
now handles \f(CW\*(C`\*(Aq\*(Aq\-\*(C'\fR()>, \f(CW\*(C`::()\*(C'\fR, \f(CW\*(C`sub :: {}\*(C'\fR, \fIetc.\fR correctly [\s-1RT\s0 #43010].
All bugs in parsing these kinds of syntax are now fixed:
.Sp
.Vb 5
\&    perl \-MO=Deparse \-e \*(Aq"my %h = "\->()\*(Aq
\&    perl \-MO=Deparse \-e \*(Aq::\->()\*(Aq
\&    perl \-MO=Deparse \-e \*(Aqsub :: {}\*(Aq
\&    perl \-MO=Deparse \-e \*(Aqpackage a; sub a::b::c {}\*(Aq
\&    perl \-MO=Deparse \-e \*(Aqsub the::main::road {}\*(Aq
.Ve
.IP "\(bu" 4
does \fBnot\fR deparse \f(CW$^H{v_string}\fR, which is automatically set by the
internals.
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`B::Lint\*(C'\fR upgraded to version 1.11
.IP "\(bu" 4
\&\f(CW\*(C`B::Terse\*(C'\fR upgraded to version 1.05
.IP "\(bu" 4
\&\f(CW\*(C`base\*(C'\fR upgraded to version 2.13
.RS 4
.IP "\(bu" 4
loading a module via base.pm would mask a global \f(CW$SIG{_\|_DIE_\|_}\fR in that
module.
.IP "\(bu" 4
push all classes at once in \f(CW@ISA\fR
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Benchmark\*(C'\fR upgraded to version 1.10
.IP "\(bu" 4
\&\f(CW\*(C`bigint\*(C'\fR upgraded to 0.23
.IP "\(bu" 4
\&\f(CW\*(C`bignum\*(C'\fR upgraded to 0.23
.IP "\(bu" 4
\&\f(CW\*(C`bigrat\*(C'\fR upgraded to 0.23
.IP "\(bu" 4
\&\f(CW\*(C`blib\*(C'\fR upgraded to 0.04
.IP "\(bu" 4
\&\f(CW\*(C`Carp\*(C'\fR upgraded to version 1.10
.Sp
The argument backtrace code now shows \f(CW\*(C`undef\*(C'\fR as \f(CW\*(C`undef\*(C'\fR,
instead of a string \fI\*(L"undef\*(R"\fR.
.IP "\(bu" 4
\&\f(CW\*(C`CGI\*(C'\fR upgraded to version 3.42
.IP "\(bu" 4
\&\f(CW\*(C`charnames\*(C'\fR upgraded to 1.06
.IP "\(bu" 4
\&\f(CW\*(C`constant\*(C'\fR upgraded to version 1.17
.IP "\(bu" 4
\&\f(CW\*(C`CPAN\*(C'\fR upgraded to version 1.9301
.IP "\(bu" 4
\&\f(CW\*(C`Cwd\*(C'\fR upgraded to version 3.29 with some platform specific
improvements (including for \s-1VMS\s0).
.IP "\(bu" 4
\&\f(CW\*(C`Data::Dumper\*(C'\fR upgraded to version 2.121_17
.RS 4
.IP "\(bu" 4
Fixes hash iterator current position with the pure Perl version [\s-1RT\s0 #40668]
.IP "\(bu" 4
Performance enhancements, which will be most evident on platforms where
repeated calls to C's \f(CW\*(C`realloc()\*(C'\fR are slow, such as Win32.
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`DB_File\*(C'\fR upgraded to version 1.817
.IP "\(bu" 4
\&\f(CW\*(C`DB_Filter\*(C'\fR upgraded to version 0.02
.IP "\(bu" 4
\&\f(CW\*(C`Devel::DProf\*(C'\fR upgraded to version 20080331.00
.IP "\(bu" 4
\&\f(CW\*(C`Devel::Peek\*(C'\fR upgraded to version 1.04
.IP "\(bu" 4
\&\f(CW\*(C`Devel::PPPort\*(C'\fR upgraded to version 3.14
.IP "\(bu" 4
\&\f(CW\*(C`diagnostics\*(C'\fR upgraded to version 1.16
.IP "\(bu" 4
\&\f(CW\*(C`Digest\*(C'\fR upgraded to version 1.15
.IP "\(bu" 4
\&\f(CW\*(C`Digest::MD5\*(C'\fR upgraded to version 2.37
.IP "\(bu" 4
\&\f(CW\*(C`DirHandle\*(C'\fR upgraded to version 1.02
.RS 4
.IP "\(bu" 4
now localises \f(CW$.\fR, \f(CW$@\fR, \f(CW$!\fR, \f(CW$^E\fR, and \f(CW$?\fR before closing the
directory handle to suppress leaking any side effects of warnings about it
already being closed.
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`DynaLoader\*(C'\fR upgraded to version 1.09
.Sp
\&\f(CW\*(C`DynaLoader\*(C'\fR can now dynamically load a loadable object from a file with a
non-default file extension.
.IP "\(bu" 4
\&\f(CW\*(C`Encode\*(C'\fR upgraded to version 2.26
.Sp
\&\f(CW\*(C`Encode::Alias\*(C'\fR includes a fix for encoding \*(L"646\*(R" on Solaris (better known as
\&\s-1ASCII\s0).
.IP "\(bu" 4
\&\f(CW\*(C`English\*(C'\fR upgraded to version 1.03
.IP "\(bu" 4
\&\f(CW\*(C`Errno\*(C'\fR upgraded to version 1.10
.IP "\(bu" 4
\&\f(CW\*(C`Exporter\*(C'\fR upgraded to version 5.63
.IP "\(bu" 4
\&\f(CW\*(C`ExtUtils::Command\*(C'\fR upgraded to version 1.15
.IP "\(bu" 4
\&\f(CW\*(C`ExtUtils::Constant\*(C'\fR upgraded to version 0.21
.IP "\(bu" 4
\&\f(CW\*(C`ExtUtils::Embed\*(C'\fR upgraded to version 1.28
.IP "\(bu" 4
\&\f(CW\*(C`ExtUtils::Install\*(C'\fR upgraded to version 1.50_01
.IP "\(bu" 4
\&\f(CW\*(C`ExtUtils::Installed\*(C'\fR upgraded to version 1.43
.IP "\(bu" 4
\&\f(CW\*(C`ExtUtils::MakeMaker\*(C'\fR upgraded to version 6.48
.RS 4
.IP "\(bu" 4
support for \f(CW\*(C`INSTALLSITESCRIPT\*(C'\fR and \f(CW\*(C`INSTALLVENDORSCRIPT\*(C'\fR
configuration.
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`ExtUtils::Manifest\*(C'\fR upgraded to version 1.55
.IP "\(bu" 4
\&\f(CW\*(C`ExtUtils::ParseXS\*(C'\fR upgraded to version 2.19
.IP "\(bu" 4
\&\f(CW\*(C`Fatal\*(C'\fR upgraded to version 1.06
.RS 4
.IP "\(bu" 4
allows built-ins in \f(CW\*(C`CORE::GLOBAL\*(C'\fR to be made fatal.
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Fcntl\*(C'\fR upgraded to version 1.06
.IP "\(bu" 4
\&\f(CW\*(C`fields\*(C'\fR upgraded to version 2.12
.IP "\(bu" 4
\&\f(CW\*(C`File::Basename\*(C'\fR upgraded to version 2.77
.IP "\(bu" 4
\&\f(CW\*(C`FileCache\*(C'\fR upgraded to version 1.07
.IP "\(bu" 4
\&\f(CW\*(C`File::Compare\*(C'\fR upgraded to 1.1005
.IP "\(bu" 4
\&\f(CW\*(C`File::Copy\*(C'\fR upgraded to 2.13
.RS 4
.IP "\(bu" 4
now uses 3\-arg open.
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`File::DosGlob\*(C'\fR upgraded to 1.01
.IP "\(bu" 4
\&\f(CW\*(C`File::Find\*(C'\fR upgraded to version 1.13
.IP "\(bu" 4
\&\f(CW\*(C`File::Glob\*(C'\fR upgraded to version 1.06
.RS 4
.IP "\(bu" 4
fixes spurious results with brackets inside braces.
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`File::Path\*(C'\fR upgraded to version 2.07_02
.IP "\(bu" 4
\&\f(CW\*(C`File::Spec\*(C'\fR upgraded to version 3.29
.RS 4
.IP "\(bu" 4
improved handling of bad arguments.
.IP "\(bu" 4
some platform specific improvements (including for \s-1VMS\s0 and Cygwin), with
an optimisation on \f(CW\*(C`abs2rel\*(C'\fR when handling both relative arguments.
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`File::stat\*(C'\fR upgraded to version 1.01
.IP "\(bu" 4
\&\f(CW\*(C`File::Temp\*(C'\fR upgraded to version 0.20
.IP "\(bu" 4
\&\f(CW\*(C`filetest\*(C'\fR upgraded to version 1.02
.IP "\(bu" 4
\&\f(CW\*(C`Filter::Util::Call\*(C'\fR upgraded to version 1.07
.IP "\(bu" 4
\&\f(CW\*(C`Filter::Simple\*(C'\fR upgraded to version 0.83
.IP "\(bu" 4
\&\f(CW\*(C`FindBin\*(C'\fR upgraded to version 1.49
.IP "\(bu" 4
\&\f(CW\*(C`GDBM_File\*(C'\fR upgraded to version 1.09
.IP "\(bu" 4
\&\f(CW\*(C`Getopt::Long\*(C'\fR upgraded to version 2.37
.IP "\(bu" 4
\&\f(CW\*(C`Getopt::Std\*(C'\fR upgraded to version 1.06
.IP "\(bu" 4
\&\f(CW\*(C`Hash::Util\*(C'\fR upgraded to version 0.06
.IP "\(bu" 4
\&\f(CW\*(C`if\*(C'\fR upgraded to version 0.05
.IP "\(bu" 4
\&\f(CW\*(C`IO\*(C'\fR upgraded to version 1.23
.Sp
Reduced number of calls to \f(CW\*(C`getpeername\*(C'\fR in \f(CW\*(C`IO::Socket\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`IPC::Open\*(C'\fR upgraded to version 1.03
.IP "\(bu" 4
\&\f(CW\*(C`IPC::Open3\*(C'\fR upgraded to version 1.03
.IP "\(bu" 4
\&\f(CW\*(C`IPC::SysV\*(C'\fR upgraded to version 2.00
.IP "\(bu" 4
\&\f(CW\*(C`lib\*(C'\fR upgraded to version 0.61
.RS 4
.IP "\(bu" 4
avoid warning about loading \fI.par\fR files.
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`libnet\*(C'\fR upgraded to version 1.22
.IP "\(bu" 4
\&\f(CW\*(C`List::Util\*(C'\fR upgraded to 1.19
.IP "\(bu" 4
\&\f(CW\*(C`Locale::Maketext\*(C'\fR upgraded to 1.13
.IP "\(bu" 4
\&\f(CW\*(C`Math::BigFloat\*(C'\fR upgraded to version 1.60
.IP "\(bu" 4
\&\f(CW\*(C`Math::BigInt\*(C'\fR upgraded to version 1.89
.IP "\(bu" 4
\&\f(CW\*(C`Math::BigRat\*(C'\fR upgraded to version 0.22
.RS 4
.IP "\(bu" 4
implements new \f(CW\*(C`as_float\*(C'\fR method.
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Math::Complex\*(C'\fR upgraded to version 1.54.
.IP "\(bu" 4
\&\f(CW\*(C`Math::Trig\*(C'\fR upgraded to version 1.18.
.IP "\(bu" 4
\&\f(CW\*(C`NDBM_File\*(C'\fR upgraded to version 1.07
.RS 4
.IP "\(bu" 4
improve \fIg++\fR handling for systems using \s-1GDBM\s0 compatibility headers.
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Net::Ping\*(C'\fR upgraded to version 2.35
.IP "\(bu" 4
\&\f(CW\*(C`NEXT\*(C'\fR upgraded to version 0.61
.RS 4
.IP "\(bu" 4
fix several bugs with \f(CW\*(C`NEXT\*(C'\fR when working with \f(CW\*(C`AUTOLOAD\*(C'\fR, \f(CW\*(C`eval\*(C'\fR block, and
within overloaded stringification.
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`ODBM_File\*(C'\fR upgraded to 1.07
.IP "\(bu" 4
\&\f(CW\*(C`open\*(C'\fR upgraded to 1.06
.IP "\(bu" 4
\&\f(CW\*(C`ops\*(C'\fR upgraded to 1.02
.IP "\(bu" 4
\&\f(CW\*(C`PerlIO::encoding\*(C'\fR upgraded to version 0.11
.IP "\(bu" 4
\&\f(CW\*(C`PerlIO::scalar\*(C'\fR upgraded to version 0.06
.RS 4
.IP "\(bu" 4
[\s-1RT\s0 #40267] \f(CW\*(C`PerlIO::scalar\*(C'\fR doesn't respect readonly-ness.
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`PerlIO::via\*(C'\fR upgraded to version 0.05
.IP "\(bu" 4
\&\f(CW\*(C`Pod::Html\*(C'\fR upgraded to version 1.09
.IP "\(bu" 4
\&\f(CW\*(C`Pod::Parser\*(C'\fR upgraded to version 1.35
.IP "\(bu" 4
\&\f(CW\*(C`Pod::Usage\*(C'\fR upgraded to version 1.35
.IP "\(bu" 4
\&\f(CW\*(C`POSIX\*(C'\fR upgraded to version 1.15
.RS 4
.IP "\(bu" 4
\&\f(CW\*(C`POSIX\*(C'\fR constants that duplicate those in \f(CW\*(C`Fcntl\*(C'\fR are now imported from
\&\f(CW\*(C`Fcntl\*(C'\fR and re-exported, rather than being duplicated by \f(CW\*(C`POSIX\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`POSIX::remove\*(C'\fR can remove empty directories.
.IP "\(bu" 4
\&\f(CW\*(C`POSIX::setlocale\*(C'\fR safer to call multiple times.
.IP "\(bu" 4
\&\f(CW\*(C`POSIX::SigRt\*(C'\fR added, which provides access to \s-1POSIX\s0 realtime signal
functionality on systems that support it.
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`re\*(C'\fR upgraded to version 0.06_01
.IP "\(bu" 4
\&\f(CW\*(C`Safe\*(C'\fR upgraded to version 2.16
.IP "\(bu" 4
\&\f(CW\*(C`Scalar::Util\*(C'\fR upgraded to 1.19
.IP "\(bu" 4
\&\f(CW\*(C`SDBM_File\*(C'\fR upgraded to version 1.06
.IP "\(bu" 4
\&\f(CW\*(C`SelfLoader\*(C'\fR upgraded to version 1.17
.IP "\(bu" 4
\&\f(CW\*(C`Shell\*(C'\fR upgraded to version 0.72
.IP "\(bu" 4
\&\f(CW\*(C`sigtrap\*(C'\fR upgraded to version 1.04
.IP "\(bu" 4
\&\f(CW\*(C`Socket\*(C'\fR upgraded to version 1.81
.RS 4
.IP "\(bu" 4
this fixes an optimistic use of \f(CW\*(C`gethostbyname\*(C'\fR
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Storable\*(C'\fR upgraded to 2.19
.IP "\(bu" 4
\&\f(CW\*(C`Switch\*(C'\fR upgraded to version 2.13
.IP "\(bu" 4
\&\f(CW\*(C`Sys::Syslog\*(C'\fR upgraded to version 0.27
.IP "\(bu" 4
\&\f(CW\*(C`Term::ANSIColor\*(C'\fR upgraded to version 1.12
.IP "\(bu" 4
\&\f(CW\*(C`Term::Cap\*(C'\fR upgraded to version 1.12
.IP "\(bu" 4
\&\f(CW\*(C`Term::ReadLine\*(C'\fR upgraded to version 1.03
.IP "\(bu" 4
\&\f(CW\*(C`Test::Builder\*(C'\fR upgraded to version 0.80
.IP "\(bu" 4
\&\f(CW\*(C`Test::Harness\*(C'\fR upgraded version to 2.64
.RS 4
.IP "\(bu" 4
this makes it able to handle newlines.
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Test::More\*(C'\fR upgraded to version 0.80
.IP "\(bu" 4
\&\f(CW\*(C`Test::Simple\*(C'\fR upgraded to version 0.80
.IP "\(bu" 4
\&\f(CW\*(C`Text::Balanced\*(C'\fR upgraded to version 1.98
.IP "\(bu" 4
\&\f(CW\*(C`Text::ParseWords\*(C'\fR upgraded to version 3.27
.IP "\(bu" 4
\&\f(CW\*(C`Text::Soundex\*(C'\fR upgraded to version 3.03
.IP "\(bu" 4
\&\f(CW\*(C`Text::Tabs\*(C'\fR upgraded to version 2007.1117
.IP "\(bu" 4
\&\f(CW\*(C`Text::Wrap\*(C'\fR upgraded to version 2006.1117
.IP "\(bu" 4
\&\f(CW\*(C`Thread\*(C'\fR upgraded to version 2.01
.IP "\(bu" 4
\&\f(CW\*(C`Thread::Semaphore\*(C'\fR upgraded to version 2.09
.IP "\(bu" 4
\&\f(CW\*(C`Thread::Queue\*(C'\fR upgraded to version 2.11
.RS 4
.IP "\(bu" 4
added capability to add complex structures (e.g., hash of hashes) to queues.
.IP "\(bu" 4
added capability to dequeue multiple items at once.
.IP "\(bu" 4
added new methods to inspect and manipulate queues:  \f(CW\*(C`peek\*(C'\fR, \f(CW\*(C`insert\*(C'\fR and
\&\f(CW\*(C`extract\*(C'\fR
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Tie::Handle\*(C'\fR upgraded to version 4.2
.IP "\(bu" 4
\&\f(CW\*(C`Tie::Hash\*(C'\fR upgraded to version 1.03
.IP "\(bu" 4
\&\f(CW\*(C`Tie::Memoize\*(C'\fR upgraded to version 1.1
.RS 4
.IP "\(bu" 4
\&\f(CW\*(C`Tie::Memoize::EXISTS\*(C'\fR now correctly caches its results.
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Tie::RefHash\*(C'\fR upgraded to version 1.38
.IP "\(bu" 4
\&\f(CW\*(C`Tie::Scalar\*(C'\fR upgraded to version 1.01
.IP "\(bu" 4
\&\f(CW\*(C`Tie::StdHandle\*(C'\fR upgraded to version 4.2
.IP "\(bu" 4
\&\f(CW\*(C`Time::gmtime\*(C'\fR upgraded to version 1.03
.IP "\(bu" 4
\&\f(CW\*(C`Time::Local\*(C'\fR upgraded to version 1.1901
.IP "\(bu" 4
\&\f(CW\*(C`Time::HiRes\*(C'\fR upgraded to version 1.9715 with various build improvements 
(including \s-1VMS\s0) and minor platform-specific bug fixes (including
for HP-UX 11 ia64).
.IP "\(bu" 4
\&\f(CW\*(C`threads\*(C'\fR upgraded to 1.71
.RS 4
.IP "\(bu" 4
new thread state information methods: \f(CW\*(C`is_running\*(C'\fR, \f(CW\*(C`is_detached\*(C'\fR
and \f(CW\*(C`is_joinable\*(C'\fR.  \f(CW\*(C`list\*(C'\fR method enhanced to return running or joinable
threads.
.IP "\(bu" 4
new thread signal method: \f(CW\*(C`kill\*(C'\fR
.IP "\(bu" 4
added capability to specify thread stack size.
.IP "\(bu" 4
added capability to control thread exiting behavior.  Added a new \f(CW\*(C`exit\*(C'\fR
method.
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`threads::shared\*(C'\fR upgraded to version 1.27
.RS 4
.IP "\(bu" 4
smaller and faster implementation that eliminates one internal structure and
the consequent level of indirection.
.IP "\(bu" 4
user locks are now stored in a safer manner.
.IP "\(bu" 4
new function \f(CW\*(C`shared_clone\*(C'\fR creates a copy of an object leaving
shared elements as-is and deep-cloning non-shared elements.
.IP "\(bu" 4
added new \f(CW\*(C`is_shared\*(C'\fR method.
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`Unicode::Normalize\*(C'\fR upgraded to version 1.02
.IP "\(bu" 4
\&\f(CW\*(C`Unicode::UCD\*(C'\fR upgraded to version 0.25
.IP "\(bu" 4
\&\f(CW\*(C`warnings\*(C'\fR upgraded to version 1.05_01
.IP "\(bu" 4
\&\f(CW\*(C`Win32\*(C'\fR upgraded to version 0.38
.RS 4
.IP "\(bu" 4
added new function \f(CW\*(C`GetCurrentProcessId\*(C'\fR which returns the regular Windows
process identifier of the current process, even when called from within a fork.
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`XSLoader\*(C'\fR upgraded to version 0.10
.IP "\(bu" 4
\&\f(CW\*(C`XS::APItest\*(C'\fR and \f(CW\*(C`XS::Typemap\*(C'\fR are for internal use only and hence
no longer installed. Many more tests have been added to \f(CW\*(C`XS::APItest\*(C'\fR.
.SH "Utility Changes"
.IX Header "Utility Changes"
.SS "debugger upgraded to version 1.31"
.IX Subsection "debugger upgraded to version 1.31"
.IP "\(bu" 4
Andreas Ko\*:nig contributed two functions to save and load the debugger
history.
.IP "\(bu" 4
\&\f(CW\*(C`NEXT::AUTOLOAD\*(C'\fR no longer emits warnings under the debugger.
.IP "\(bu" 4
The debugger should now correctly find tty the device on \s-1OS X 10.5\s0 and \s-1VMS\s0
when the program \f(CW\*(C`fork\*(C'\fRs.
.IP "\(bu" 4
\&\s-1LVALUE\s0 subs now work inside the debugger.
.SS "\fIperlthanks\fP"
.IX Subsection "perlthanks"
Perl 5.8.9 adds a new utility \fIperlthanks\fR, which is a variant of \fIperlbug\fR,
but for sending non-bug-reports to the authors and maintainers of Perl.
Getting nothing but bug reports can become a bit demoralising \- we'll see if
this changes things.
.SS "\fIperlbug\fP"
.IX Subsection "perlbug"
\&\fIperlbug\fR now checks if you're reporting about a non-core module and suggests
you report it to the \s-1CPAN\s0 author instead.
.SS "\fIh2xs\fP"
.IX Subsection "h2xs"
.IP "\(bu" 4
won't define an empty string as a constant [\s-1RT\s0 #25366]
.IP "\(bu" 4
has examples for \f(CW\*(C`h2xs \-X\*(C'\fR
.SS "\fIh2ph\fP"
.IX Subsection "h2ph"
.IP "\(bu" 4
now attempts to deal sensibly with the difference in path implications
between \f(CW""\fR and \f(CW\*(C`<>\*(C'\fR quoting in \f(CW\*(C`#include\*(C'\fR statements.
.IP "\(bu" 4
now generates correct code for \f(CW\*(C`#if defined A || defined B\*(C'\fR
[\s-1RT\s0 #39130]
.SH "New Documentation"
.IX Header "New Documentation"
As usual, the documentation received its share of corrections, clarifications
and other nitfixes. More \f(CW\*(C`\*(C'\fR tags were added for indexing.
.IX Xref "..."
.PP
perlunitut is a tutorial written by Juerd Waalboer on Unicode-related
terminology and how to correctly handle Unicode in Perl scripts.
.PP
perlunicode is updated in section user defined properties.
.PP
perluniintro has been updated in the example of detecting data that is not
valid in particular encoding.
.PP
perlcommunity provides an overview of the Perl Community along with further
resources.
.PP
\&\s-1CORE\s0 documents the pseudo-namespace for Perl's core routines.
.SH "Changes to Existing Documentation"
.IX Header "Changes to Existing Documentation"
perlglossary adds \fIdeprecated modules and features\fR and \fIto be dropped modules\fR.
.PP
perlhack has been updated and added resources on smoke testing.
.PP
The Perl FAQs (\fIperlfaq1\fR..\fIperlfaq9\fR) have been updated.
.PP
perlcheat is updated with better details on \f(CW\*(C`\ew\*(C'\fR, \f(CW\*(C`\ed\*(C'\fR, and \f(CW\*(C`\es\*(C'\fR.
.PP
perldebug is updated with information on how to call the debugger.
.PP
perldiag documentation updated with \fIsubroutine with an ampersand\fR on the
argument to \f(CW\*(C`exists\*(C'\fR and \f(CW\*(C`delete\*(C'\fR and also several terminology updates on
warnings.
.PP
perlfork documents the limitation of \f(CW\*(C`exec\*(C'\fR inside pseudo-processes.
.PP
perlfunc:
.IP "\(bu" 4
Documentation is fixed in section \f(CW\*(C`caller\*(C'\fR and \f(CW\*(C`pop\*(C'\fR.
.IP "\(bu" 4
Function \f(CW\*(C`alarm\*(C'\fR now mentions \f(CW\*(C`Time::HiRes::ualarm\*(C'\fR in preference
to \f(CW\*(C`select\*(C'\fR.
.IP "\(bu" 4
Regarding precedence in \f(CW\*(C`\-X\*(C'\fR, filetest operators are the same as unary
operators, but not regarding parsing and parentheses (spotted by Eirik Berg
Hanssen).
.IP "\(bu" 4
\&\f(CW\*(C`reverse\*(C'\fR function documentation received scalar context examples.
.PP
perllocale documentation is adjusted for number localization and
\&\f(CW\*(C`POSIX::setlocale\*(C'\fR to fix Debian bug #379463.
.PP
perlmodlib is updated with \f(CW\*(C`CPAN::API::HOWTO\*(C'\fR and
\&\f(CW\*(C`Sys::Syslog::win32::Win32\*(C'\fR
.PP
perlre documentation updated to reflect the differences between
\&\f(CW\*(C`[[:xxxxx:]]\*(C'\fR and \f(CW\*(C`\ep{IsXxxxx}\*(C'\fR matches. Also added section on \f(CW\*(C`/g\*(C'\fR and
\&\f(CW\*(C`/c\*(C'\fR modifiers.
.PP
perlreguts describe the internals of the regular expressions engine. It has
been contributed by Yves Orton.
.PP
perlrebackslash describes all perl regular expression backslash and escape
sequences.
.PP
perlrecharclass describes the syntax and use of character classes in
Perl Regular Expressions.
.PP
perlrun is updated to clarify on the hash seed \fI\s-1PERL_HASH_SEED\s0\fR. Also more
information in options \f(CW\*(C`\-x\*(C'\fR and \f(CW\*(C`\-u\*(C'\fR.
.PP
perlsub example is updated to use a lexical variable for \f(CW\*(C`opendir\*(C'\fR syntax.
.PP
perlvar fixes confusion about real \s-1GID \s0\f(CW$(\fR and effective \s-1GID \s0\f(CW$)\fR.
.PP
Perl thread tutorial example is fixed in section
\&\*(L"Queues: Passing Data Around\*(R" in perlthrtut and perlthrtut.
.PP
perlhack documentation extensively improved by Jarkko Hietaniemi and others.
.PP
perltoot provides information on modifying \f(CW@UNIVERSAL::ISA\fR.
.PP
perlport documentation extended to include different \f(CW\*(C`kill(\-9, ...)\*(C'\fR
semantics on Windows. It also clearly states \f(CW\*(C`dump\*(C'\fR is not supported on Win32
and cygwin.
.PP
\&\fI\s-1INSTALL\s0\fR has been updated and modernised.
.SH "Performance Enhancements"
.IX Header "Performance Enhancements"
.IP "\(bu" 4
The default since perl 5.000 has been for perl to create an empty scalar
with every new typeglob. The increased use of lexical variables means that
most are now unused. Thanks to Nicholas Clark's efforts, Perl can now be
compiled with \f(CW\*(C`\-DPERL_DONT_CREATE_GVSV\*(C'\fR to avoid creating these empty scalars.
This will significantly decrease the number of scalars allocated for all
configurations, and the number of scalars that need to be copied for ithread
creation. Whilst this option is binary compatible with existing perl
installations, it does change a long-standing assumption about the
internals, hence it is not enabled by default, as some third party code may
rely on the old behaviour.
.Sp
We would recommend testing with this configuration on new deployments of
perl, particularly for multi-threaded servers, to see whether all third party
code is compatible with it, as this configuration may give useful performance
improvements. For existing installations we would not recommend changing to
this configuration unless thorough testing is performed before deployment.
.IP "\(bu" 4
\&\f(CW\*(C`diagnostics\*(C'\fR no longer uses \f(CW$&\fR, which results in large speedups
for regexp matching in all code using it.
.IP "\(bu" 4
Regular expressions classes of a single character are now treated the same as
if the character had been used as a literal, meaning that code that uses
char-classes as an escaping mechanism will see a speedup. (Yves Orton)
.IP "\(bu" 4
Creating anonymous array and hash references (ie. \f(CW\*(C`[]\*(C'\fR and \f(CW\*(C`{}\*(C'\fR) now incurs
no more overhead than creating an anonymous list or hash. Nicholas Clark
provided changes with a saving of two ops and one stack push, which was measured
as a slightly better than 5% improvement for these operations.
.IP "\(bu" 4
Many calls to \f(CW\*(C`strlen()\*(C'\fR have been eliminated, either because the length was
already known, or by adopting or enhancing APIs that pass lengths. This has
been aided by the adoption of a \f(CW\*(C`my_sprintf()\*(C'\fR wrapper, which returns the
correct C89 value \- the length of the formatted string. Previously we could
not rely on the return value of \f(CW\*(C`sprintf()\*(C'\fR, because on some ancient but
extant platforms it still returns \f(CW\*(C`char *\*(C'\fR.
.IP "\(bu" 4
\&\f(CW\*(C`index\*(C'\fR is now faster if the search string is stored in \s-1UTF\-8\s0 but only contains
characters in the Latin\-1 range.
.IP "\(bu" 4
The Unicode swatch cache inside the regexp engine is now used. (the lookup had
a key mismatch, present since the initial implementation). [\s-1RT\s0 #42839]
.SH "Installation and Configuration Improvements"
.IX Header "Installation and Configuration Improvements"
.SS "Relocatable installations"
.IX Subsection "Relocatable installations"
There is now \fIConfigure\fR support for creating a relocatable perl tree. If
you \fIConfigure\fR with \f(CW\*(C`\-Duserelocatableinc\*(C'\fR, then the paths in \f(CW@INC\fR (and
everything else in \f(CW%Config\fR) can be optionally located via the path of the
\&\fIperl\fR executable.
.PP
At start time, if any paths in \f(CW@INC\fR or \f(CW\*(C`Config\*(C'\fR that \fIConfigure\fR marked
as relocatable (by starting them with \f(CW".../"\fR), then they are prefixed the
directory of \f(CW$^X\fR. This allows the relocation can be configured on a
per-directory basis, although the default with \f(CW\*(C`\-Duserelocatableinc\*(C'\fR is that
everything is relocated. The initial install is done to the original configured
prefix.
.SS "Configuration improvements"
.IX Subsection "Configuration improvements"
\&\fIConfigure\fR is now better at removing temporary files. Tom Callaway
(from RedHat) also contributed patches that complete the set of flags
passed to the compiler and the linker, in particular that \f(CW\*(C`\-fPIC\*(C'\fR is now
enabled on Linux. It will also croak when your \fI/dev/null\fR isn't a device.
.PP
A new configuration variable \f(CW\*(C`d_pseudofork\*(C'\fR has been to \fIConfigure\fR, and is
available as  \f(CW$Config{d_pseudofork}\fR in the \f(CW\*(C`Config\*(C'\fR module. This
distinguishes real \f(CW\*(C`fork\*(C'\fR support from the pseudofork emulation used on
Windows platforms.
.PP
\&\fIConfig.pod\fR and \fIconfig.sh\fR are now placed correctly for cross-compilation.
.PP
\&\f(CW$Config{useshrplib}\fR is now 'true' rather than 'yes' when using a shared perl
library.
.SS "Compilation improvements"
.IX Subsection "Compilation improvements"
Parallel makes should work properly now, although there may still be problems
if \f(CW\*(C`make test\*(C'\fR is instructed to run in parallel.
.PP
Many compilation warnings have been cleaned up. A very stubborn compiler
warning in \f(CW\*(C`S_emulate_eaccess()\*(C'\fR was killed after six attempts.
\&\fIg++\fR support has been tuned, especially for FreeBSD.
.PP
\&\fImkppport\fR has been integrated, and all \fIppport.h\fR files in the core will now
be autogenerated at build time (and removed during cleanup).
.SS "Installation improvements."
.IX Subsection "Installation improvements."
\&\fIinstallman\fR now works with \f(CW\*(C`\-Duserelocatableinc\*(C'\fR and \f(CW\*(C`DESTDIR\*(C'\fR.
.PP
\&\fIinstallperl\fR no longer installs:
.IP "\(bu" 4
static library files of statically linked extensions when a shared perl library
is being used. (They are not needed. See \*(L"Windows\*(R" below).
.IP "\(bu" 4
\&\fI\s-1SIGNATURE\s0\fR and \fIPAUSE*.pub\fR (\s-1CPAN\s0 files)
.IP "\(bu" 4
\&\fI\s-1NOTES\s0\fR and \fI\s-1PATCHING\s0\fR (ExtUtils files)
.IP "\(bu" 4
\&\fIperlld\fR and \fIld2\fR (Cygwin files)
.SS "Platform Specific Changes"
.IX Subsection "Platform Specific Changes"
There are improved hints for \s-1AIX,\s0 Cygwin, \s-1DEC/OSF,\s0 FreeBSD, \s-1HP/UX,\s0 Irix 6
Linux, MachTen, NetBSD, \s-1OS/390, QNX, SCO,\s0 Solaris, SunOS, System V Release 5.x
(UnixWare 7, OpenUNIX 8), Ultrix, \s-1UMIPS,\s0 uts and \s-1VOS.\s0
.PP
\fIFreeBSD\fR
.IX Subsection "FreeBSD"
.IP "\(bu" 4
Drop \f(CW\*(C`\-std=c89\*(C'\fR and \f(CW\*(C`\-ansi\*(C'\fR if using \f(CW\*(C`long long\*(C'\fR as the main integral type,
else in FreeBSD 6.2 (and perhaps other releases), system headers do not
declare some functions required by perl.
.PP
\fISolaris\fR
.IX Subsection "Solaris"
.IP "\(bu" 4
Starting with Solaris 10, we do not want versioned shared libraries, because
those often indicate a private use only library. These problems could often
be triggered when SUNWbdb (Berkeley \s-1DB\s0) was installed. Hence if Solaris 10
is detected set \f(CW\*(C`ignore_versioned_solibs=y\*(C'\fR.
.PP
\fI\s-1VMS\s0\fR
.IX Subsection "VMS"
.IP "\(bu" 4
Allow \s-1IEEE\s0 math to be deselected on OpenVMS I64 (but it remains the default).
.IP "\(bu" 4
Record \s-1IEEE\s0 usage in \f(CW\*(C`config.h\*(C'\fR
.IP "\(bu" 4
Help older \s-1VMS\s0 compilers by using \f(CW\*(C`ccflags\*(C'\fR when building \f(CW\*(C`munchconfig.exe\*(C'\fR.
.IP "\(bu" 4
Don't try to build old \f(CW\*(C`Thread\*(C'\fR extension on \s-1VMS\s0 when \f(CW\*(C`\-Duseithreads\*(C'\fR has
been chosen.
.IP "\(bu" 4
Passing a raw string of \*(L"NaN\*(R" to \fInawk\fR causes a core dump \- so the string
has been changed to \*(L"*NaN*\*(R"
.IP "\(bu" 4
\&\fIt/op/stat.t\fR tests will now test hard links on \s-1VMS\s0 if they are supported.
.PP
\fIWindows\fR
.IX Subsection "Windows"
.IP "\(bu" 4
When using a shared perl library \fIinstallperl\fR no longer installs static
library files, import library files and export library files (of statically
linked extensions) and empty bootstrap files (of dynamically linked
extensions). This fixes a problem building PAR-Packer on Win32 with a debug
build of perl.
.IP "\(bu" 4
Various improvements to the win32 build process, including support for Visual
\&\*(C+ 2005 Express Edition (aka Visual \*(C+ 8.x).
.IP "\(bu" 4
\&\fIperl.exe\fR will now have an icon if built with MinGW or Borland.
.IP "\(bu" 4
Improvements to the perl\-static.exe build process.
.IP "\(bu" 4
Add Win32 makefile option to link all extensions statically.
.IP "\(bu" 4
The \fIWinCE\fR directory has been merged into the \fIWin32\fR directory.
.IP "\(bu" 4
\&\f(CW\*(C`setlocale\*(C'\fR tests have been re-enabled for Windows \s-1XP\s0 onwards.
.SH "Selected Bug Fixes"
.IX Header "Selected Bug Fixes"
.SS "Unicode"
.IX Subsection "Unicode"
Many many bugs related to the internal Unicode implementation (\s-1UTF\-8\s0) have
been fixed. In particular, long standing bugs related to returning Unicode
via \f(CW\*(C`tie\*(C'\fR, overloading or \f(CW$@\fR are now gone, some of which were never
reported.
.PP
\&\f(CW\*(C`unpack\*(C'\fR will internally convert the string back from \s-1UTF\-8\s0 on numeric types.
This is a compromise between the full consistency now in 5.10, and the current
behaviour, which is often used as a \*(L"feature\*(R" on string types.
.PP
Using \f(CW\*(C`:crlf\*(C'\fR and \f(CW\*(C`UTF\-16\*(C'\fR \s-1IO\s0 layers together will now work.
.PP
Fixed problems with \f(CW\*(C`split\*(C'\fR, Unicode \f(CW\*(C`/\es+/\*(C'\fR and \f(CW\*(C`/ \e0/\*(C'\fR.
.PP
Fixed bug \s-1RT\s0 #40641 \- encoding of Unicode characters in regular expressions.
.PP
Fixed a bug where using certain patterns in a regexp led to a panic.
[\s-1RT\s0 #45337]
.PP
Perl no longer segfaults (due to infinite internal recursion) if the locale's
character is not \s-1UTF\-8\s0 [\s-1RT\s0 #41442]:
.PP
.Vb 2
\&    use open \*(Aq:locale\*(Aq;
\&    print STDERR "\ex{201e}"; # &bdquo;
.Ve
.SS "PerlIO"
.IX Subsection "PerlIO"
Inconsistencies have been fixed in the reference counting PerlIO uses to keep
track of Unix file descriptors, and the \s-1API\s0 used by \s-1XS\s0 code to manage getting
and releasing \f(CW\*(C`FILE *\*(C'\fRs
.SS "Magic"
.IX Subsection "Magic"
Several bugs have been fixed in Magic, the internal system used to implement
features such as \f(CW\*(C`tie\*(C'\fR, tainting and threads sharing.
.PP
\&\f(CW\*(C`undef @array\*(C'\fR on a tied array now correctly calls the \f(CW\*(C`CLEAR\*(C'\fR method.
.PP
Some of the bitwise ops were not checking whether their arguments were magical
before using them. [\s-1RT\s0 #24816]
.PP
Magic is no longer invoked twice by the expression \f(CW\*(C`\e&$x\*(C'\fR
.PP
A bug with assigning large numbers and tainting has been resolved.
[\s-1RT\s0 #40708]
.PP
A new entry has been added to the \s-1MAGIC\s0 vtable \- \f(CW\*(C`svt_local\*(C'\fR. This is used
when copying magic to the new value during \f(CW\*(C`local\*(C'\fR, allowing certain problems
with localising shared variables to be resolved.
.PP
For the implementation details, see \*(L"Magic Virtual Tables\*(R" in perlguts.
.SS "Reblessing overloaded objects now works"
.IX Subsection "Reblessing overloaded objects now works"
Internally, perl object-ness is on the referent, not the reference, even
though methods can only be called via a reference. However, the original
implementation of overloading stored flags related to overloading on the
reference, relying on the flags being copied when the reference was copied,
or set at the creation of a new reference. This manifests in a bug \- if you
rebless an object from a class that has overloading, into one that does not,
then any other existing references think that they (still) point to an
overloaded object, choose these C code paths, and then throw errors.
Analogously, blessing into an overloaded class when other references exist will
result in them not using overloading.
.PP
The implementation has been fixed for 5.10, but this fix changes the semantics
of flag bits, so is not binary compatible, so can't be applied to 5.8.9.
However, 5.8.9 has a work-around that implements the same bug fix. If the
referent has multiple references, then all the other references are located and
corrected. A full search is avoided whenever possible by scanning lexicals
outwards from the current subroutine, and the argument stack.
.PP
A certain well known Linux vendor applied incomplete versions of this bug fix
to their \fI/usr/bin/perl\fR and then prematurely closed bug reports about
performance issues without consulting back upstream. This not being enough,
they then proceeded to ignore the necessary fixes to these unreleased changes
for 11 months, until massive pressure was applied by their long-suffering
paying customers, catalysed by the failings being featured on a prominent blog
and Slashdot.
.ie n .SS """strict"" now propagates correctly into string evals"
.el .SS "\f(CWstrict\fP now propagates correctly into string evals"
.IX Subsection "strict now propagates correctly into string evals"
Under 5.8.8 and earlier:
.PP
.Vb 3
\&    $ perl5.8.8 \-e \*(Aquse strict; eval "use foo bar" or die $@\*(Aq
\&    Can\*(Aqt locate foo.pm in @INC (@INC contains: ... .) at (eval 1) line 2.
\&    BEGIN failed\-\-compilation aborted at (eval 1) line 2.
.Ve
.PP
Under 5.8.9 and later:
.PP
.Vb 2
\&    $ perl5.8.9 \-e \*(Aquse strict; eval "use foo bar" or die $@\*(Aq
\&    Bareword "bar" not allowed while "strict subs" in use at (eval 1) line 1.
.Ve
.PP
This may cause problems with programs that parse the error message and rely
on the buggy behaviour.
.SS "Other fixes"
.IX Subsection "Other fixes"
.IP "\(bu" 4
The tokenizer no longer treats \f(CW\*(C`=cute\*(C'\fR (and other words beginning
with \f(CW\*(C`=cut\*(C'\fR) as a synonym for \f(CW\*(C`=cut\*(C'\fR.
.IP "\(bu" 4
Calling \f(CW\*(C`CORE::require\*(C'\fR
.Sp
\&\f(CW\*(C`CORE::require\*(C'\fR and \f(CW\*(C`CORE::do\*(C'\fR were always parsed as \f(CW\*(C`require\*(C'\fR and \f(CW\*(C`do\*(C'\fR
when they were overridden. This is now fixed.
.IP "\(bu" 4
Stopped memory leak on long \fI/etc/groups\fR entries.
.IP "\(bu" 4
\&\f(CW\*(C`while (my $x ...) { ...; redo }\*(C'\fR shouldn't \f(CW\*(C`undef $x\*(C'\fR.
.Sp
In the presence of \f(CW\*(C`my\*(C'\fR in the conditional of a \f(CW\*(C`while()\*(C'\fR, \f(CW\*(C`until()\*(C'\fR,
or \f(CW\*(C`for(;;)\*(C'\fR loop, we now add an extra scope to the body so that \f(CW\*(C`redo\*(C'\fR
doesn't \f(CW\*(C`undef\*(C'\fR the lexical.
.IP "\(bu" 4
The \f(CW\*(C`encoding\*(C'\fR pragma now correctly ignores anything following an \f(CW\*(C`@\*(C'\fR 
character in the \f(CW\*(C`LC_ALL\*(C'\fR and \f(CW\*(C`LANG\*(C'\fR environment variables. [\s-1RT\s0 # 49646]
.IP "\(bu" 4
A segfault observed with some \fIgcc\fR 3.3 optimisations is resolved.
.IP "\(bu" 4
A possible segfault when \f(CW\*(C`unpack\*(C'\fR used in scalar context with \f(CW\*(C`()\*(C'\fR groups
is resolved. [\s-1RT\s0 #50256]
.IP "\(bu" 4
Resolved issue where \f(CW$!\fR could be changed by a signal handler interrupting
a \f(CW\*(C`system\*(C'\fR call.
.IP "\(bu" 4
Fixed bug \s-1RT\s0 #37886, symbolic dereferencing was allowed in the argument of
\&\f(CW\*(C`defined\*(C'\fR even under the influence of \f(CW\*(C`use strict \*(Aqrefs\*(Aq\*(C'\fR.
.IP "\(bu" 4
Fixed bug \s-1RT\s0 #43207, where \f(CW\*(C`lc\*(C'\fR/\f(CW\*(C`uc\*(C'\fR inside \f(CW\*(C`sort\*(C'\fR affected the return
value.
.IP "\(bu" 4
Fixed bug \s-1RT\s0 #45607, where \f(CW\*(C`*{"BONK"} = \e&{"BONK"}\*(C'\fR didn't work correctly.
.IP "\(bu" 4
Fixed bug \s-1RT\s0 #35878, croaking from a \s-1XSUB\s0 called via \f(CW\*(C`goto &xsub\*(C'\fR corrupts perl
internals.
.IP "\(bu" 4
Fixed bug \s-1RT\s0 #32539, \fIDynaLoader.o\fR is moved into \fIlibperl.so\fR to avoid the
need to statically link DynaLoader into the stub perl executable. With this
\&\fIlibperl.so\fR provides everything needed to get a functional embedded perl
interpreter to run.
.IP "\(bu" 4
Fix bug \s-1RT\s0 #36267 so that assigning to a tied hash doesn't change the
underlying hash.
.IP "\(bu" 4
Fix bug \s-1RT\s0 #6006, regexp replaces using large replacement variables
fail some of the time, \fIi.e.\fR when substitution contains something
like \f(CW\*(C`${10}\*(C'\fR (note the bracket) instead of just \f(CW$10\fR.
.IP "\(bu" 4
Fix bug \s-1RT\s0 #45053, \f(CW\*(C`Perl_newCONSTSUB()\*(C'\fR is now thread safe.
.SS "Platform Specific Fixes"
.IX Subsection "Platform Specific Fixes"
\fIDarwin / MacOS X\fR
.IX Subsection "Darwin / MacOS X"
.IP "\(bu" 4
Various improvements to 64 bit builds.
.IP "\(bu" 4
Mutex protection added in \f(CW\*(C`PerlIOStdio_close()\*(C'\fR to avoid race conditions.
Hopefully this fixes failures in the threads tests \fIfree.t\fR and \fIblocks.t\fR.
.IP "\(bu" 4
Added forked terminal support to the debugger, with the ability to update the
window title.
.PP
\fI\s-1OS/2\s0\fR
.IX Subsection "OS/2"
.IP "\(bu" 4
A build problem with specifying \f(CW\*(C`USE_MULTI\*(C'\fR and \f(CW\*(C`USE_ITHREADS\*(C'\fR but without
\&\f(CW\*(C`USE_IMP_SYS\*(C'\fR has been fixed.
.IP "\(bu" 4
\&\f(CW\*(C`OS2::REXX\*(C'\fR upgraded to version 1.04
.PP
\fITru64\fR
.IX Subsection "Tru64"
.IP "\(bu" 4
Aligned floating point build policies for \fIcc\fR and \fIgcc\fR.
.PP
\fIRedHat Linux\fR
.IX Subsection "RedHat Linux"
.IP "\(bu" 4
Revisited a patch from 5.6.1 for \s-1RH7.2\s0 for Intel's \fIicc\fR [\s-1RT\s0 #7916], added an
additional check for \f(CW$Config{gccversion}\fR.
.PP
\fISolaris/i386\fR
.IX Subsection "Solaris/i386"
.IP "\(bu" 4
Use \f(CW\*(C`\-DPTR_IS_LONG\*(C'\fR when using 64 bit integers
.PP
\fI\s-1VMS\s0\fR
.IX Subsection "VMS"
.IP "\(bu" 4
Fixed \f(CW\*(C`PerlIO::Scalar\*(C'\fR in-memory file record-style reads.
.IP "\(bu" 4
pipe shutdown at process exit should now be more robust.
.IP "\(bu" 4
Bugs in \s-1VMS\s0 exit handling tickled by \f(CW\*(C`Test::Harness\*(C'\fR 2.64 have been fixed.
.IP "\(bu" 4
Fix \f(CW\*(C`fcntl()\*(C'\fR locking capability test in \fIconfigure.com\fR.
.IP "\(bu" 4
Replaced \f(CW\*(C`shrplib=\*(Aqdefine\*(Aq\*(C'\fR with \f(CW\*(C`useshrplib=\*(Aqtrue\*(Aq\*(C'\fR on \s-1VMS.\s0
.PP
\fIWindows\fR
.IX Subsection "Windows"
.IP "\(bu" 4
\&\f(CW\*(C`File::Find\*(C'\fR used to fail when the target directory is a bare drive letter and
\&\f(CW\*(C`no_chdir\*(C'\fR is 1 (the default is 0). [\s-1RT\s0 #41555]
.IP "\(bu" 4
A build problem with specifying \f(CW\*(C`USE_MULTI\*(C'\fR and \f(CW\*(C`USE_ITHREADS\*(C'\fR but without
\&\f(CW\*(C`USE_IMP_SYS\*(C'\fR has been fixed.
.IP "\(bu" 4
The process id is no longer truncated to 16 bits on some Windows platforms
( http://bugs.activestate.com/show_bug.cgi?id=72443 )
.IP "\(bu" 4
Fixed bug \s-1RT\s0 #54828 in \fIperlio.c\fR where calling \f(CW\*(C`binmode\*(C'\fR on Win32 and Cygwin
may cause a segmentation fault.
.SS "Smaller fixes"
.IX Subsection "Smaller fixes"
.IP "\(bu" 4
It is now possible to overload \f(CW\*(C`eq\*(C'\fR when using \f(CW\*(C`nomethod\*(C'\fR.
.IP "\(bu" 4
Various problems using \f(CW\*(C`overload\*(C'\fR with 64 bit integers corrected.
.IP "\(bu" 4
The reference count of \f(CW\*(C`PerlIO\*(C'\fR file descriptors is now correctly handled.
.IP "\(bu" 4
On \s-1VMS,\s0 escaped dots will be preserved when converted to Unix syntax.
.IP "\(bu" 4
\&\f(CW\*(C`keys %+\*(C'\fR no longer throws an \f(CW\*(Aqambiguous\*(Aq\fR warning.
.IP "\(bu" 4
Using \f(CW\*(C`#!perl \-d\*(C'\fR could trigger an assertion, which has been fixed.
.IP "\(bu" 4
Don't stringify tied code references in \f(CW@INC\fR when calling \f(CW\*(C`require\*(C'\fR.
.IP "\(bu" 4
Code references in \f(CW@INC\fR report the correct file name when \f(CW\*(C`_\|_FILE_\|_\*(C'\fR is
used.
.IP "\(bu" 4
Width and precision in sprintf didn't handle characters above 255 correctly.
[\s-1RT\s0 #40473]
.IP "\(bu" 4
List slices with indices out of range now work more consistently.
[\s-1RT\s0 #39882]
.IP "\(bu" 4
A change introduced with perl 5.8.1 broke the parsing of arguments of the form
\&\f(CW\*(C`\-foo=bar\*(C'\fR with the \f(CW\*(C`\-s\*(C'\fR on the <#!> line. This has been fixed. See
http://bugs.activestate.com/show_bug.cgi?id=43483
.IP "\(bu" 4
\&\f(CW\*(C`tr///\*(C'\fR is now threadsafe. Previously it was storing a swash inside its \s-1OP,\s0
rather than in a pad.
.IP "\(bu" 4
\&\fIpod2html\fR labels anchors more consistently and handles nested definition
lists better.
.IP "\(bu" 4
\&\f(CW\*(C`threads\*(C'\fR cleanup veto has been extended to include \f(CW\*(C`perl_free()\*(C'\fR and
\&\f(CW\*(C`perl_destruct()\*(C'\fR
.IP "\(bu" 4
On some systems, changes to \f(CW$ENV{TZ}\fR would not always be
respected by the underlying calls to \f(CW\*(C`localtime_r()\*(C'\fR.  Perl now
forces the inspection of the environment on these systems.
.IP "\(bu" 4
The special variable \f(CW$^R\fR is now more consistently set when executing
regexps using the \f(CW\*(C`(?{...})\*(C'\fR construct.  In particular, it will still
be set even if backreferences or optional sub-patterns \f(CW\*(C`(?:...)?\*(C'\fR are
used.
.SH "New or Changed Diagnostics"
.IX Header "New or Changed Diagnostics"
.ie n .SS "panic: sv_chop %s"
.el .SS "panic: sv_chop \f(CW%s\fP"
.IX Subsection "panic: sv_chop %s"
This new fatal error occurs when the C routine \f(CW\*(C`Perl_sv_chop()\*(C'\fR was passed a
position that is not within the scalar's string buffer. This is caused by
buggy \s-1XS\s0 code, and at this point recovery is not possible.
.SS "Maximal count of pending signals (%s) exceeded"
.IX Subsection "Maximal count of pending signals (%s) exceeded"
This new fatal error occurs when the perl process has to abort due to
too many pending signals, which is bound to prevent perl from being
able to handle further incoming signals safely.
.ie n .SS "panic: attempt to call %s in %s"
.el .SS "panic: attempt to call \f(CW%s\fP in \f(CW%s\fP"
.IX Subsection "panic: attempt to call %s in %s"
This new fatal error occurs when the \s-1ACL\s0 version file test operator is used
where it is not available on the current platform. Earlier checks mean that
it should never be possible to get this.
.SS "\s-1FETCHSIZE\s0 returned a negative value"
.IX Subsection "FETCHSIZE returned a negative value"
New error indicating that a tied array has claimed to have a negative
number of elements.
.ie n .SS "Can't upgrade %s (%d) to %d"
.el .SS "Can't upgrade \f(CW%s\fP (%d) to \f(CW%d\fP"
.IX Subsection "Can't upgrade %s (%d) to %d"
Previously the internal error from the \s-1SV\s0 upgrade code was the less informative
\&\fICan't upgrade that kind of scalar\fR. It now reports the current internal type,
and the new type requested.
.ie n .SS "%s argument is not a \s-1HASH\s0 or \s-1ARRAY\s0 element or a subroutine"
.el .SS "\f(CW%s\fP argument is not a \s-1HASH\s0 or \s-1ARRAY\s0 element or a subroutine"
.IX Subsection "%s argument is not a HASH or ARRAY element or a subroutine"
This error, thrown if an invalid argument is provided to \f(CW\*(C`exists\*(C'\fR now
correctly includes \*(L"or a subroutine\*(R". [\s-1RT\s0 #38955]
.ie n .SS "Cannot make the non-overridable builtin %s fatal"
.el .SS "Cannot make the non-overridable builtin \f(CW%s\fP fatal"
.IX Subsection "Cannot make the non-overridable builtin %s fatal"
This error in \f(CW\*(C`Fatal\*(C'\fR previously did not show the name of the builtin in
question (now represented by \f(CW%s\fR above).
.ie n .SS "Unrecognized character '%s' in column %d"
.el .SS "Unrecognized character '%s' in column \f(CW%d\fP"
.IX Subsection "Unrecognized character '%s' in column %d"
This error previously did not state the column.
.SS "Offset outside string"
.IX Subsection "Offset outside string"
This can now also be generated by a \f(CW\*(C`seek\*(C'\fR on a file handle using
\&\f(CW\*(C`PerlIO::scalar\*(C'\fR.
.SS "Invalid escape in the specified encoding in regexp; marked by <\-\- \s-1HERE\s0 in m/%s/"
.IX Subsection "Invalid escape in the specified encoding in regexp; marked by <-- HERE in m/%s/"
New error, introduced as part of the fix to \s-1RT\s0 #40641 to handle encoding
of Unicode characters in regular expression comments.
.SS "Your machine doesn't support dump/undump."
.IX Subsection "Your machine doesn't support dump/undump."
A more informative fatal error issued when calling \f(CW\*(C`dump\*(C'\fR on Win32 and
Cygwin. (Given that the purpose of \f(CW\*(C`dump\*(C'\fR is to abort with a core dump,
and core dumps can't be produced on these platforms, this is more useful than
silently exiting.)
.SH "Changed Internals"
.IX Header "Changed Internals"
The perl sources can now be compiled with a \*(C+ compiler instead of a C
compiler. A necessary implementation details is that under \*(C+, the macro
\&\f(CW\*(C`XS\*(C'\fR used to define XSUBs now includes an \f(CW\*(C`extern "C"\*(C'\fR definition. A side
effect of this is that \fB\*(C+\fR code that used the construction
.PP
.Vb 1
\&    typedef XS(SwigPerlWrapper);
.Ve
.PP
now needs to be written
.PP
.Vb 1
\&    typedef XSPROTO(SwigPerlWrapper);
.Ve
.PP
using the new \f(CW\*(C`XSPROTO\*(C'\fR macro, in order to compile. C extensions are
unaffected, although C extensions are encouraged to use \f(CW\*(C`XSPROTO\*(C'\fR too.
This change was present in the 5.10.0 release of perl, so any actively
maintained code that happened to use this construction should already have
been adapted. Code that needs changing will fail with a compilation error.
.PP
\&\f(CW\*(C`set\*(C'\fR magic on localizing/assigning to a magic variable will now only
trigger for \fIcontainer magics\fR, i.e. it will for \f(CW%ENV\fR or \f(CW%SIG\fR
but not for \f(CW$#array\fR.
.PP
The new \s-1API\s0 macro \f(CW\*(C`newSVpvs()\*(C'\fR can be used in place of constructions such as
\&\f(CW\*(C`newSVpvn("ISA", 3)\*(C'\fR. It takes a single string constant, and at C compile
time determines its length.
.PP
The new \s-1API\s0 function \f(CW\*(C`Perl_newSV_type()\*(C'\fR can be used as a more efficient
replacement of the common idiom
.PP
.Vb 2
\&    sv = newSV(0);
\&    sv_upgrade(sv, type);
.Ve
.PP
Similarly \f(CW\*(C`Perl_newSVpvn_flags()\*(C'\fR can be used to combine
\&\f(CW\*(C`Perl_newSVpv()\*(C'\fR with \f(CW\*(C`Perl_sv_2mortal()\*(C'\fR or the equivalent
\&\f(CW\*(C`Perl_sv_newmortal()\*(C'\fR with \f(CW\*(C`Perl_sv_setpvn()\*(C'\fR
.PP
Two new macros \f(CW\*(C`mPUSHs()\*(C'\fR and \f(CW\*(C`mXPUSHs()\*(C'\fR are added, to make it easier to
push mortal SVs onto the stack. They were then used to fix several bugs where
values on the stack had not been mortalised.
.PP
A \f(CW\*(C`Perl_signbit()\*(C'\fR function was added to test the sign of an \f(CW\*(C`NV\*(C'\fR. It 
maps to the system one when available.
.PP
\&\f(CW\*(C`Perl_av_reify()\*(C'\fR, \f(CW\*(C`Perl_lex_end()\*(C'\fR, \f(CW\*(C`Perl_mod()\*(C'\fR, \f(CW\*(C`Perl_op_clear()\*(C'\fR,
\&\f(CW\*(C`Perl_pop_return()\*(C'\fR, \f(CW\*(C`Perl_qerror()\*(C'\fR, \f(CW\*(C`Perl_setdefout()\*(C'\fR,
\&\f(CW\*(C`Perl_vivify_defelem()\*(C'\fR and \f(CW\*(C`Perl_yylex()\*(C'\fR are now visible to extensions.
This was required to allow \f(CW\*(C`Data::Alias\*(C'\fR to work on Windows.
.PP
\&\f(CW\*(C`Perl_find_runcv()\*(C'\fR is now visible to perl core extensions. This was required
to allow \f(CW\*(C`Sub::Current\*(C'\fR to work on Windows.
.PP
\&\f(CW\*(C`ptr_table*\*(C'\fR functions are now available in unthreaded perl. \f(CW\*(C`Storable\*(C'\fR
takes advantage of this.
.PP
There have been many small cleanups made to the internals. In particular,
\&\f(CW\*(C`Perl_sv_upgrade()\*(C'\fR has been simplified considerably, with a straight-through
code path that uses \f(CW\*(C`memset()\*(C'\fR and \f(CW\*(C`memcpy()\*(C'\fR to initialise the new body,
rather than assignment via multiple temporary variables. It has also
benefited from simplification and de-duplication of the arena management
code.
.PP
A lot of small improvements in the code base were made due to reports from
the Coverity static code analyzer.
.PP
Corrected use and documentation of \f(CW\*(C`Perl_gv_stashpv()\*(C'\fR, \f(CW\*(C`Perl_gv_stashpvn()\*(C'\fR,
\&\f(CW\*(C`Perl_gv_stashsv()\*(C'\fR functions (last parameter is a bitmask, not boolean).
.PP
\&\f(CW\*(C`PERL_SYS_INIT\*(C'\fR, \f(CW\*(C`PERL_SYS_INIT3\*(C'\fR and \f(CW\*(C`PERL_SYS_TERM\*(C'\fR macros have been
changed into functions.
.PP
\&\f(CW\*(C`PERLSYS_TERM\*(C'\fR no longer requires a context. \f(CW\*(C`PerlIO_teardown()\*(C'\fR
is now called without a context, and debugging output in this function has
been disabled because that required that an interpreter was present, an invalid
assumption at termination time.
.PP
All compile time options which affect binary compatibility have been grouped
together into a global variable (\f(CW\*(C`PL_bincompat_options\*(C'\fR).
.PP
The values of \f(CW\*(C`PERL_REVISION\*(C'\fR, \f(CW\*(C`PERL_VERSION\*(C'\fR and \f(CW\*(C`PERL_SUBVERSION\*(C'\fR are
now baked into global variables (and hence into any shared perl library).
Additionally under \f(CW\*(C`MULTIPLICITY\*(C'\fR, the perl executable now records the size of
the interpreter structure (total, and for this version). Coupled with
\&\f(CW\*(C`PL_bincompat_options\*(C'\fR this will allow 5.8.10 (and later), when compiled with a
shared perl library, to perform sanity checks in \f(CW\*(C`main()\*(C'\fR to verify that the
shared library is indeed binary compatible.
.PP
Symbolic references can now have embedded NULs. The new public function
\&\f(CW\*(C`Perl_get_cvn_flags()\*(C'\fR can be used in extensions if you have to handle them.
.SS "Macro cleanups"
.IX Subsection "Macro cleanups"
The core code, and \s-1XS\s0 code in \fIext\fR that is not dual-lived on \s-1CPAN,\s0 no longer
uses the macros \f(CW\*(C`PL_na\*(C'\fR, \f(CW\*(C`NEWSV()\*(C'\fR, \f(CW\*(C`Null()\*(C'\fR, \f(CW\*(C`Nullav\*(C'\fR, \f(CW\*(C`Nullcv\*(C'\fR,
\&\f(CW\*(C`Nullhv\*(C'\fR, \f(CW\*(C`Nullhv\*(C'\fR \fIetc\fR. Their use is discouraged in new code,
particularly \f(CW\*(C`PL_na\*(C'\fR, which is a small performance hit.
.SH "New Tests"
.IX Header "New Tests"
Many modules updated from \s-1CPAN\s0 incorporate new tests. Some core specific
tests have been added:
.IP "ext/DynaLoader/t/DynaLoader.t" 4
.IX Item "ext/DynaLoader/t/DynaLoader.t"
Tests for the \f(CW\*(C`DynaLoader\*(C'\fR module.
.IP "t/comp/fold.t" 4
.IX Item "t/comp/fold.t"
Tests for compile-time constant folding.
.IP "t/io/pvbm.t" 4
.IX Item "t/io/pvbm.t"
Tests incorporated from 5.10.0 which check that there is no unexpected
interaction between the internal types \f(CW\*(C`PVBM\*(C'\fR and \f(CW\*(C`PVGV\*(C'\fR.
.IP "t/lib/proxy_constant_subs.t" 4
.IX Item "t/lib/proxy_constant_subs.t"
Tests for the new form of constant subroutines.
.IP "t/op/attrhand.t" 4
.IX Item "t/op/attrhand.t"
Tests for \f(CW\*(C`Attribute::Handlers\*(C'\fR.
.IP "t/op/dbm.t" 4
.IX Item "t/op/dbm.t"
Tests for \f(CW\*(C`dbmopen\*(C'\fR.
.IP "t/op/inccode\-tie.t" 4
.IX Item "t/op/inccode-tie.t"
Calls all tests in \fIt/op/inccode.t\fR after first tying \f(CW@INC\fR.
.IP "t/op/incfilter.t" 4
.IX Item "t/op/incfilter.t"
Tests for source filters returned from code references in \f(CW@INC\fR.
.IP "t/op/kill0.t" 4
.IX Item "t/op/kill0.t"
Tests for \s-1RT\s0 #30970.
.IP "t/op/qrstack.t" 4
.IX Item "t/op/qrstack.t"
Tests for \s-1RT\s0 #41484.
.IP "t/op/qr.t" 4
.IX Item "t/op/qr.t"
Tests for the \f(CW\*(C`qr//\*(C'\fR construct.
.IP "t/op/regexp_qr_embed.t" 4
.IX Item "t/op/regexp_qr_embed.t"
Tests for the \f(CW\*(C`qr//\*(C'\fR construct within another regexp.
.IP "t/op/regexp_qr.t" 4
.IX Item "t/op/regexp_qr.t"
Tests for the \f(CW\*(C`qr//\*(C'\fR construct.
.IP "t/op/rxcode.t" 4
.IX Item "t/op/rxcode.t"
Tests for \s-1RT\s0 #32840.
.IP "t/op/studytied.t" 4
.IX Item "t/op/studytied.t"
Tests for \f(CW\*(C`study\*(C'\fR on tied scalars.
.IP "t/op/substT.t" 4
.IX Item "t/op/substT.t"
Tests for \f(CW\*(C`subst\*(C'\fR run under \f(CW\*(C`\-T\*(C'\fR mode.
.IP "t/op/symbolcache.t" 4
.IX Item "t/op/symbolcache.t"
Tests for \f(CW\*(C`undef\*(C'\fR and \f(CW\*(C`delete\*(C'\fR on stash entries that are bound to
subroutines or methods.
.IP "t/op/upgrade.t" 4
.IX Item "t/op/upgrade.t"
Tests for \f(CW\*(C`Perl_sv_upgrade()\*(C'\fR.
.IP "t/mro/package_aliases.t" 4
.IX Item "t/mro/package_aliases.t"
\&\s-1MRO\s0 tests for \f(CW\*(C`isa\*(C'\fR and package aliases.
.IP "t/pod/twice.t" 4
.IX Item "t/pod/twice.t"
Tests for calling \f(CW\*(C`Pod::Parser\*(C'\fR twice.
.IP "t/run/cloexec.t" 4
.IX Item "t/run/cloexec.t"
Tests for inheriting file descriptors across \f(CW\*(C`exec\*(C'\fR (close-on-exec).
.IP "t/uni/cache.t" 4
.IX Item "t/uni/cache.t"
Tests for the \s-1UTF\-8\s0 caching code.
.IP "t/uni/chr.t" 4
.IX Item "t/uni/chr.t"
Test that strange encodings do not upset \f(CW\*(C`Perl_pp_chr()\*(C'\fR.
.IP "t/uni/greek.t" 4
.IX Item "t/uni/greek.t"
Tests for \s-1RT\s0 #40641.
.IP "t/uni/latin2.t" 4
.IX Item "t/uni/latin2.t"
Tests for \s-1RT\s0 #40641.
.IP "t/uni/overload.t" 4
.IX Item "t/uni/overload.t"
Tests for returning Unicode from overloaded values.
.IP "t/uni/tie.t" 4
.IX Item "t/uni/tie.t"
Tests for returning Unicode from tied variables.
.SH "Known Problems"
.IX Header "Known Problems"
There are no known new bugs.
.PP
However, programs that rely on bugs that have been fixed will have problems.
Also, many bug fixes present in 5.10.0 can't be back-ported to the 5.8.x
branch, because they require changes that are binary incompatible, or because
the code changes are too large and hence too risky to incorporate.
.PP
We have only limited volunteer labour, and the maintenance burden is
getting increasingly complex. Hence this will be the last significant
release of the 5.8.x series. Any future releases of 5.8.x will likely
only be to deal with security issues, and platform build
failures. Hence you should look to migrating to 5.10.x, if you have
not started already. Alternatively, if business requirements constrain
you to continue to use 5.8.x, you may wish to consider commercial
support from firms such as ActiveState.
.SH "Platform Specific Notes"
.IX Header "Platform Specific Notes"
.SS "Win32"
.IX Subsection "Win32"
\&\f(CW\*(C`readdir()\*(C'\fR, \f(CW\*(C`cwd()\*(C'\fR, \f(CW$^X\fR and \f(CW@INC\fR now use the alternate (short)
filename if the long name is outside the current codepage (Jan Dubois).
.PP
\fIUpdated Modules\fR
.IX Subsection "Updated Modules"
.IP "\(bu" 4
\&\f(CW\*(C`Win32\*(C'\fR upgraded to version 0.38. Now has a documented 'WinVista' response
from \f(CW\*(C`GetOSName\*(C'\fR and support for Vista's privilege elevation in \f(CW\*(C`IsAdminUser\*(C'\fR.
Support for Unicode characters in path names. Improved cygwin and Win64
compatibility.
.IP "\(bu" 4
\&\f(CW\*(C`Win32API\*(C'\fR updated to 0.1001_01
.IP "\(bu" 4
\&\f(CW\*(C`killpg()\*(C'\fR support added to \f(CW\*(C`MSWin32\*(C'\fR (Jan Dubois).
.IP "\(bu" 4
\&\f(CW\*(C`File::Spec::Win32\*(C'\fR upgraded to version 3.2701
.SS "\s-1OS/2\s0"
.IX Subsection "OS/2"
\fIUpdated Modules\fR
.IX Subsection "Updated Modules"
.IP "\(bu" 4
\&\f(CW\*(C`OS2::Process\*(C'\fR upgraded to 1.03
.Sp
Ilya Zakharevich has added and documented several \f(CW\*(C`Window*\*(C'\fR and \f(CW\*(C`Clipbrd*\*(C'\fR
functions.
.IP "\(bu" 4
\&\f(CW\*(C`OS2::REXX::DLL\*(C'\fR, \f(CW\*(C`OS2::REXX\*(C'\fR updated to version 1.03
.SS "\s-1VMS\s0"
.IX Subsection "VMS"
\fIUpdated Modules\fR
.IX Subsection "Updated Modules"
.IP "\(bu" 4
\&\f(CW\*(C`DCLsym\*(C'\fR upgraded to version 1.03
.IP "\(bu" 4
\&\f(CW\*(C`Stdio\*(C'\fR upgraded to version 2.4
.IP "\(bu" 4
\&\f(CW\*(C`VMS::XSSymSet\*(C'\fR upgraded to 1.1.
.SH "Obituary"
.IX Header "Obituary"
Nick Ing-Simmons, long time Perl hacker, author of the \f(CW\*(C`Tk\*(C'\fR and \f(CW\*(C`Encode\*(C'\fR
modules, \fIperlio.c\fR in the core, and 5.003_02 pumpking, died of a heart
attack on 25th September 2006. He will be missed.
.SH "Acknowledgements"
.IX Header "Acknowledgements"
Some of the work in this release was funded by a \s-1TPF\s0 grant.
.PP
Steve Hay worked behind the scenes working out the causes of the differences
between core modules, their \s-1CPAN\s0 releases, and previous core releases, and
the best way to rectify them. He doesn't want to do it again. I know this
feeling, and I'm very glad he did it this time, instead of me.
.PP
Paul Fenwick assembled a team of 18 volunteers, who broke the back of writing
this document. In particular, Bradley Dean, Eddy Tan, and Vincent Pit
provided half the team's contribution.
.PP
Schwern verified the list of updated module versions, correcting quite a few
errors that I (and everyone else) had missed, both wrongly stated module
versions, and changed modules that had not been listed.
.PP
The crack Berlin-based \s-1QA\s0 team of Andreas Ko\*:nig and Slaven Rezic
tirelessly re-built snapshots, tested most everything \s-1CPAN\s0 against
them, and then identified the changes responsible for any module regressions,
ensuring that several show-stopper bugs were stomped before the first release
candidate was cut.
.PP
The other core committers contributed most of the changes, and applied most
of the patches sent in by the hundreds of contributors listed in \fI\s-1AUTHORS\s0\fR.
.PP
And obviously, Larry Wall, without whom we wouldn't have Perl.
.SH "Reporting Bugs"
.IX Header "Reporting Bugs"
If you find what you think is a bug, you might check the articles
recently posted to the comp.lang.perl.misc newsgroup and the perl
bug database at http://bugs.perl.org.  There may also be
information at http://www.perl.org, the Perl Home Page.
.PP
If you believe you have an unreported bug, please run the \fBperlbug\fR
program included with your release.  Be sure to trim your bug down
to a tiny but sufficient test case.  Your bug report, along with the
output of \f(CW\*(C`perl \-V\*(C'\fR, will be sent off to perlbug@perl.org to be
analysed by the Perl porting team.  You can browse and search
the Perl 5 bugs at http://bugs.perl.org/
.PP
If the bug you are reporting has security implications, which make it
inappropriate to send to a publicly archived mailing list, then please send
it to perl5\-security\-report@perl.org. This points to a closed subscription
unarchived mailing list, which includes
all the core committers, who will be able
to help assess the impact of issues, figure out a resolution, and help
co-ordinate the release of patches to mitigate or fix the problem across all
platforms on which Perl is supported. Please only use this address for security
issues in the Perl core, not for modules independently distributed on \s-1CPAN.\s0
.SH "SEE ALSO"
.IX Header "SEE ALSO"
The \fIChanges\fR file for exhaustive details on what changed.
.PP
The \fI\s-1INSTALL\s0\fR file for how to build Perl.
.PP
The \fI\s-1README\s0\fR file for general stuff.
.PP
The \fIArtistic\fR and \fICopying\fR files for copyright information.
                                                                                                                                                                                                                                                                                                                                                                                                                                  osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perl58delta.1                                0100644 0001750 0001750 00000410176 12566207434 023103  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERL58DELTA 1"
.TH PERL58DELTA 1 "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perl58delta \- what is new for perl v5.8.0
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document describes differences between the 5.6.0 release and
the 5.8.0 release.
.PP
Many of the bug fixes in 5.8.0 were already seen in the 5.6.1
maintenance release since the two releases were kept closely
coordinated (while 5.8.0 was still called 5.7.something).
.PP
Changes that were integrated into the 5.6.1 release are marked \f(CW\*(C`[561]\*(C'\fR.
Many of these changes have been further developed since 5.6.1 was released,
those are marked \f(CW\*(C`[561+]\*(C'\fR.
.PP
You can see the list of changes in the 5.6.1 release (both from the
5.005_03 release and the 5.6.0 release) by reading perl561delta.
.SH "Highlights In 5.8.0"
.IX Header "Highlights In 5.8.0"
.IP "\(bu" 4
Better Unicode support
.IP "\(bu" 4
New \s-1IO\s0 Implementation
.IP "\(bu" 4
New Thread Implementation
.IP "\(bu" 4
Better Numeric Accuracy
.IP "\(bu" 4
Safe Signals
.IP "\(bu" 4
Many New Modules
.IP "\(bu" 4
More Extensive Regression Testing
.SH "Incompatible Changes"
.IX Header "Incompatible Changes"
.SS "Binary Incompatibility"
.IX Subsection "Binary Incompatibility"
\&\fBPerl 5.8 is not binary compatible with earlier releases of Perl.\fR
.PP
\&\fBYou have to recompile your \s-1XS\s0 modules.\fR
.PP
(Pure Perl modules should continue to work.)
.PP
The major reason for the discontinuity is the new \s-1IO\s0 architecture
called PerlIO.  PerlIO is the default configuration because without
it many new features of Perl 5.8 cannot be used.  In other words:
you just have to recompile your modules containing \s-1XS\s0 code, sorry
about that.
.PP
In future releases of Perl, non-PerlIO aware \s-1XS\s0 modules may become
completely unsupported.  This shouldn't be too difficult for module
authors, however: PerlIO has been designed as a drop-in replacement
(at the source code level) for the stdio interface.
.PP
Depending on your platform, there are also other reasons why
we decided to break binary compatibility, please read on.
.SS "64\-bit platforms and malloc"
.IX Subsection "64-bit platforms and malloc"
If your pointers are 64 bits wide, the Perl malloc is no longer being
used because it does not work well with 8\-byte pointers.  Also,
usually the system mallocs on such platforms are much better optimized
for such large memory models than the Perl malloc.  Some memory-hungry
Perl applications like the \s-1PDL\s0 don't work well with Perl's malloc.
Finally, other applications than Perl (such as mod_perl) tend to prefer
the system malloc.  Such platforms include Alpha and 64\-bit \s-1HPPA,
MIPS, PPC,\s0 and Sparc.
.SS "\s-1AIX\s0 Dynaloading"
.IX Subsection "AIX Dynaloading"
The \s-1AIX\s0 dynaloading now uses in \s-1AIX\s0 releases 4.3 and newer the native
dlopen interface of \s-1AIX\s0 instead of the old emulated interface.  This
change will probably break backward compatibility with compiled
modules.  The change was made to make Perl more compliant with other
applications like mod_perl which are using the \s-1AIX\s0 native interface.
.ie n .SS "Attributes for ""my"" variables now handled at run-time"
.el .SS "Attributes for \f(CWmy\fP variables now handled at run-time"
.IX Subsection "Attributes for my variables now handled at run-time"
The \f(CW\*(C`my EXPR : ATTRS\*(C'\fR syntax now applies variable attributes at
run-time.  (Subroutine and \f(CW\*(C`our\*(C'\fR variables still get attributes applied
at compile-time.)  See attributes for additional details.  In particular,
however, this allows variable attributes to be useful for \f(CW\*(C`tie\*(C'\fR interfaces,
which was a deficiency of earlier releases.  Note that the new semantics
doesn't work with the Attribute::Handlers module (as of version 0.76).
.SS "Socket Extension Dynamic in \s-1VMS\s0"
.IX Subsection "Socket Extension Dynamic in VMS"
The Socket extension is now dynamically loaded instead of being
statically built in.  This may or may not be a problem with ancient
\&\s-1TCP/IP\s0 stacks of \s-1VMS:\s0 we do not know since we weren't able to test
Perl in such configurations.
.SS "IEEE-format Floating Point Default on OpenVMS Alpha"
.IX Subsection "IEEE-format Floating Point Default on OpenVMS Alpha"
Perl now uses \s-1IEEE\s0 format (T_FLOAT) as the default internal floating
point format on OpenVMS Alpha, potentially breaking binary compatibility
with external libraries or existing data.  G_FLOAT is still available as
a configuration option.  The default on \s-1VAX \s0(D_FLOAT) has not changed.
.ie n .SS "New Unicode Semantics (no more ""use utf8"", almost)"
.el .SS "New Unicode Semantics (no more \f(CWuse utf8\fP, almost)"
.IX Subsection "New Unicode Semantics (no more use utf8, almost)"
Previously in Perl 5.6 to use Unicode one would say \*(L"use utf8\*(R" and
then the operations (like string concatenation) were Unicode-aware
in that lexical scope.
.PP
This was found to be an inconvenient interface, and in Perl 5.8 the
Unicode model has completely changed: now the \*(L"Unicodeness\*(R" is bound
to the data itself, and for most of the time \*(L"use utf8\*(R" is not needed
at all.  The only remaining use of \*(L"use utf8\*(R" is when the Perl script
itself has been written in the \s-1UTF\-8\s0 encoding of Unicode.  (\s-1UTF\-8\s0 has
not been made the default since there are many Perl scripts out there
that are using various national eight-bit character sets, which would
be illegal in \s-1UTF\-8.\s0)
.PP
See perluniintro for the explanation of the current model,
and utf8 for the current use of the utf8 pragma.
.SS "New Unicode Properties"
.IX Subsection "New Unicode Properties"
Unicode \fIscripts\fR are now supported. Scripts are similar to (and superior
to) Unicode \fIblocks\fR. The difference between scripts and blocks is that
scripts are the glyphs used by a language or a group of languages, while
the blocks are more artificial groupings of (mostly) 256 characters based
on the Unicode numbering.
.PP
In general, scripts are more inclusive, but not universally so. For
example, while the script \f(CW\*(C`Latin\*(C'\fR includes all the Latin characters and
their various diacritic-adorned versions, it does not include the various
punctuation or digits (since they are not solely \f(CW\*(C`Latin\*(C'\fR).
.PP
A number of other properties are now supported, including \f(CW\*(C`\ep{L&}\*(C'\fR,
\&\f(CW\*(C`\ep{Any}\*(C'\fR \f(CW\*(C`\ep{Assigned}\*(C'\fR, \f(CW\*(C`\ep{Unassigned}\*(C'\fR, \f(CW\*(C`\ep{Blank}\*(C'\fR [561] and
\&\f(CW\*(C`\ep{SpacePerl}\*(C'\fR [561] (along with their \f(CW\*(C`\eP{...}\*(C'\fR versions, of course).
See perlunicode for details, and more additions.
.PP
The \f(CW\*(C`In\*(C'\fR or \f(CW\*(C`Is\*(C'\fR prefix to names used with the \f(CW\*(C`\ep{...}\*(C'\fR and \f(CW\*(C`\eP{...}\*(C'\fR
are now almost always optional. The only exception is that a \f(CW\*(C`In\*(C'\fR prefix
is required to signify a Unicode block when a block name conflicts with a
script name. For example, \f(CW\*(C`\ep{Tibetan}\*(C'\fR refers to the script, while
\&\f(CW\*(C`\ep{InTibetan}\*(C'\fR refers to the block. When there is no name conflict, you
can omit the \f(CW\*(C`In\*(C'\fR from the block name (e.g. \f(CW\*(C`\ep{BraillePatterns}\*(C'\fR), but
to be safe, it's probably best to always use the \f(CW\*(C`In\*(C'\fR).
.SS "\s-1REF\s0(...) Instead Of \s-1SCALAR\s0(...)"
.IX Subsection "REF(...) Instead Of SCALAR(...)"
A reference to a reference now stringifies as \*(L"\s-1REF\s0(0x81485ec)\*(R" instead
of \*(L"\s-1SCALAR\s0(0x81485ec)\*(R" in order to be more consistent with the return
value of \fIref()\fR.
.SS "pack/unpack D/F recycled"
.IX Subsection "pack/unpack D/F recycled"
The undocumented pack/unpack template letters D/F have been recycled
for better use: now they stand for long double (if supported by the
platform) and \s-1NV \s0(Perl internal floating point type).  (They used
to be aliases for d/f, but you never knew that.)
.SS "\fIglob()\fP now returns filenames in alphabetical order"
.IX Subsection "glob() now returns filenames in alphabetical order"
The list of filenames from \fIglob()\fR (or <...>) is now by default sorted
alphabetically to be csh-compliant (which is what happened before
in most Unix platforms).  (\fIbsd_glob()\fR does still sort platform
natively, \s-1ASCII\s0 or \s-1EBCDIC,\s0 unless \s-1GLOB_ALPHASORT\s0 is specified.) [561]
.SS "Deprecations"
.IX Subsection "Deprecations"
.IP "\(bu" 4
The semantics of bless(\s-1REF, REF\s0) were unclear and until someone proves
it to make some sense, it is forbidden.
.IP "\(bu" 4
The obsolete chat2 library that should never have been allowed
to escape the laboratory has been decommissioned.
.IP "\(bu" 4
Using chdir("") or chdir(undef) instead of explicit \fIchdir()\fR is
doubtful.  A failure (think chdir(\fIsome_function()\fR) can lead into
unintended \fIchdir()\fR to the home directory, therefore this behaviour
is deprecated.
.IP "\(bu" 4
The builtin \fIdump()\fR function has probably outlived most of its
usefulness.  The core-dumping functionality will remain in future
available as an explicit call to \f(CW\*(C`CORE::dump()\*(C'\fR, but in future
releases the behaviour of an unqualified \f(CW\*(C`dump()\*(C'\fR call may change.
.IP "\(bu" 4
The very dusty examples in the eg/ directory have been removed.
Suggestions for new shiny examples welcome but the main issue is that
the examples need to be documented, tested and (most importantly)
maintained.
.IP "\(bu" 4
The (bogus) escape sequences \e8 and \e9 now give an optional warning
(\*(L"Unrecognized escape passed through\*(R").  There is no need to \e\-escape
any \f(CW\*(C`\ew\*(C'\fR character.
.IP "\(bu" 4
The *glob{\s-1FILEHANDLE\s0} is deprecated, use *glob{\s-1IO\s0} instead.
.IP "\(bu" 4
The \f(CW\*(C`package;\*(C'\fR syntax (\f(CW\*(C`package\*(C'\fR without an argument) has been
deprecated.  Its semantics were never that clear and its
implementation even less so.  If you have used that feature to
disallow all but fully qualified variables, \f(CW\*(C`use strict;\*(C'\fR instead.
.IP "\(bu" 4
The unimplemented \s-1POSIX\s0 regex features [[.cc.]] and [[=c=]] are still
recognised but now cause fatal errors.  The previous behaviour of
ignoring them by default and warning if requested was unacceptable
since it, in a way, falsely promised that the features could be used.
.IP "\(bu" 4
In future releases, non-PerlIO aware \s-1XS\s0 modules may become completely
unsupported.  Since PerlIO is a drop-in replacement for stdio at the
source code level, this shouldn't be that drastic a change.
.IP "\(bu" 4
Previous versions of perl and some readings of some sections of Camel
\&\s-1III\s0 implied that the \f(CW\*(C`:raw\*(C'\fR \*(L"discipline\*(R" was the inverse of \f(CW\*(C`:crlf\*(C'\fR.
Turning off \*(L"clrfness\*(R" is no longer enough to make a stream truly
binary. So the PerlIO \f(CW\*(C`:raw\*(C'\fR layer (or \*(L"discipline\*(R", to use the Camel
book's older terminology) is now formally defined as being equivalent
to binmode(\s-1FH\s0) \- which is in turn defined as doing whatever is
necessary to pass each byte as-is without any translation.  In
particular binmode(\s-1FH\s0) \- and hence \f(CW\*(C`:raw\*(C'\fR \- will now turn off both
\&\s-1CRLF\s0 and \s-1UTF\-8\s0 translation and remove other layers (e.g. :\fIencoding()\fR)
which would modify byte stream.
.IP "\(bu" 4
The current user-visible implementation of pseudo-hashes (the weird
use of the first array element) is deprecated starting from Perl 5.8.0
and will be removed in Perl 5.10.0, and the feature will be
implemented differently.  Not only is the current interface rather
ugly, but the current implementation slows down normal array and hash
use quite noticeably. The \f(CW\*(C`fields\*(C'\fR pragma interface will remain
available.  The \fIrestricted hashes\fR interface is expected to
be the replacement interface (see Hash::Util).  If your existing
programs depends on the underlying implementation, consider using
Class::PseudoHash from \s-1CPAN.\s0
.IP "\(bu" 4
The syntaxes \f(CW\*(C`@a\->[...]\*(C'\fR and  \f(CW\*(C`%h\->{...}\*(C'\fR have now been deprecated.
.IP "\(bu" 4
After years of trying, suidperl is considered to be too complex to
ever be considered truly secure.  The suidperl functionality is likely
to be removed in a future release.
.IP "\(bu" 4
The 5.005 threads model (module \f(CW\*(C`Thread\*(C'\fR) is deprecated and expected
to be removed in Perl 5.10.  Multithreaded code should be migrated to
the new ithreads model (see threads, threads::shared and
perlthrtut).
.IP "\(bu" 4
The long deprecated uppercase aliases for the string comparison
operators (\s-1EQ, NE, LT, LE, GE, GT\s0) have now been removed.
.IP "\(bu" 4
The tr///C and tr///U features have been removed and will not return;
the interface was a mistake.  Sorry about that.  For similar
functionality, see pack('U0', ...) and pack('C0', ...). [561]
.IP "\(bu" 4
Earlier Perls treated \*(L"sub foo (@bar)\*(R" as equivalent to \*(L"sub foo (@)\*(R".
The prototypes are now checked better at compile-time for invalid
syntax.  An optional warning is generated (\*(L"Illegal character in
prototype...\*(R")  but this may be upgraded to a fatal error in a future
release.
.IP "\(bu" 4
The \f(CW\*(C`exec LIST\*(C'\fR and \f(CW\*(C`system LIST\*(C'\fR operations now produce warnings on
tainted data and in some future release they will produce fatal errors.
.IP "\(bu" 4
The existing behaviour when localising tied arrays and hashes is wrong,
and will be changed in a future release, so do not rely on the existing
behaviour. See \*(L"Localising Tied Arrays and Hashes Is Broken\*(R".
.SH "Core Enhancements"
.IX Header "Core Enhancements"
.SS "Unicode Overhaul"
.IX Subsection "Unicode Overhaul"
Unicode in general should be now much more usable than in Perl 5.6.0
(or even in 5.6.1).  Unicode can be used in hash keys, Unicode in
regular expressions should work now, Unicode in tr/// should work now,
Unicode in I/O should work now.  See perluniintro for introduction
and perlunicode for details.
.IP "\(bu" 4
The Unicode Character Database coming with Perl has been upgraded
to Unicode 3.2.0.  For more information, see http://www.unicode.org/ .
[561+] (5.6.1 has \s-1UCD 3.0.1.\s0)
.IP "\(bu" 4
For developers interested in enhancing Perl's Unicode capabilities:
almost all the \s-1UCD\s0 files are included with the Perl distribution in
the \fIlib/unicore\fR subdirectory.  The most notable omission, for space
considerations, is the Unihan database.
.IP "\(bu" 4
The properties \ep{Blank} and \ep{SpacePerl} have been added. \*(L"Blank\*(R" is like
C \fIisblank()\fR, that is, it contains only \*(L"horizontal whitespace\*(R" (the space
character is, the newline isn't), and the \*(L"SpacePerl\*(R" is the Unicode
equivalent of \f(CW\*(C`\es\*(C'\fR (\ep{Space} isn't, since that includes the vertical
tabulator character, whereas \f(CW\*(C`\es\*(C'\fR doesn't.)
.Sp
See \*(L"New Unicode Properties\*(R" earlier in this document for additional
information on changes with Unicode properties.
.SS "PerlIO is Now The Default"
.IX Subsection "PerlIO is Now The Default"
.IP "\(bu" 4
\&\s-1IO\s0 is now by default done via PerlIO rather than system's \*(L"stdio\*(R".
PerlIO allows \*(L"layers\*(R" to be \*(L"pushed\*(R" onto a file handle to alter the
handle's behaviour.  Layers can be specified at open time via 3\-arg
form of open:
.Sp
.Vb 1
\&   open($fh,\*(Aq>:crlf :utf8\*(Aq, $path) || ...
.Ve
.Sp
or on already opened handles via extended \f(CW\*(C`binmode\*(C'\fR:
.Sp
.Vb 1
\&   binmode($fh,\*(Aq:encoding(iso\-8859\-7)\*(Aq);
.Ve
.Sp
The built-in layers are: unix (low level read/write), stdio (as in
previous Perls), perlio (re-implementation of stdio buffering in a
portable manner), crlf (does \s-1CRLF\s0 <=> \*(L"\en\*(R" translation as on Win32,
but available on any platform).  A mmap layer may be available if
platform supports it (mostly Unixes).
.Sp
Layers to be applied by default may be specified via the 'open' pragma.
.Sp
See \*(L"Installation and Configuration Improvements\*(R" for the effects
of PerlIO on your architecture name.
.IP "\(bu" 4
If your platform supports \fIfork()\fR, you can use the list form of \f(CW\*(C`open\*(C'\fR
for pipes.  For example:
.Sp
.Vb 1
\&    open KID_PS, "\-|", "ps", "aux" or die $!;
.Ve
.Sp
forks the \fIps\fR\|(1) command (without spawning a shell, as there are more
than three arguments to \fIopen()\fR), and reads its standard output via the
\&\f(CW\*(C`KID_PS\*(C'\fR filehandle.  See perlipc.
.IP "\(bu" 4
File handles can be marked as accepting Perl's internal encoding of Unicode
(\s-1UTF\-8\s0 or UTF-EBCDIC depending on platform) by a pseudo layer \*(L":utf8\*(R" :
.Sp
.Vb 1
\&   open($fh,">:utf8","Uni.txt");
.Ve
.Sp
Note for \s-1EBCDIC\s0 users: the pseudo layer \*(L":utf8\*(R" is erroneously named
for you since it's not \s-1UTF\-8\s0 what you will be getting but instead
UTF-EBCDIC.  See perlunicode, utf8, and
http://www.unicode.org/unicode/reports/tr16/ for more information.
In future releases this naming may change.  See perluniintro
for more information about \s-1UTF\-8.\s0
.IP "\(bu" 4
If your environment variables (\s-1LC_ALL, LC_CTYPE, LANG\s0) look like you
want to use \s-1UTF\-8 \s0(any of the variables match \f(CW\*(C`/utf\-?8/i\*(C'\fR), your
\&\s-1STDIN, STDOUT, STDERR\s0 handles and the default open layer (see open)
are marked as \s-1UTF\-8.  \s0(This feature, like other new features that
combine Unicode and I/O, work only if you are using PerlIO, but that's
the default.)
.Sp
Note that after this Perl really does assume that everything is \s-1UTF\-8:\s0
for example if some input handle is not, Perl will probably very soon
complain about the input data like this \*(L"Malformed \s-1UTF\-8 ...\*(R"\s0 since
any old eight-bit data is not legal \s-1UTF\-8.\s0
.Sp
Note for code authors: if you want to enable your users to use \s-1UTF\-8\s0
as their default encoding  but in your code still have eight-bit I/O streams
(such as images or zip files), you need to explicitly \fIopen()\fR or \fIbinmode()\fR
with \f(CW\*(C`:bytes\*(C'\fR (see \*(L"open\*(R" in perlfunc and \*(L"binmode\*(R" in perlfunc), or you
can just use \f(CW\*(C`binmode(FH)\*(C'\fR (nice for pre\-5.8.0 backward compatibility).
.IP "\(bu" 4
File handles can translate character encodings from/to Perl's internal
Unicode form on read/write via the \*(L":\fIencoding()\fR\*(R" layer.
.IP "\(bu" 4
File handles can be opened to \*(L"in memory\*(R" files held in Perl scalars via:
.Sp
.Vb 1
\&   open($fh,\*(Aq>\*(Aq, \e$variable) || ...
.Ve
.IP "\(bu" 4
Anonymous temporary files are available without need to
\&'use FileHandle' or other module via
.Sp
.Vb 1
\&   open($fh,"+>", undef) || ...
.Ve
.Sp
That is a literal undef, not an undefined value.
.SS "ithreads"
.IX Subsection "ithreads"
The new interpreter threads (\*(L"ithreads\*(R" for short) implementation of
multithreading, by Arthur Bergman, replaces the old \*(L"5.005 threads\*(R"
implementation.  In the ithreads model any data sharing between
threads must be explicit, as opposed to the model where data sharing
was implicit.  See threads and threads::shared, and
perlthrtut.
.PP
As a part of the ithreads implementation Perl will also use
any necessary and detectable reentrant libc interfaces.
.SS "Restricted Hashes"
.IX Subsection "Restricted Hashes"
A restricted hash is restricted to a certain set of keys, no keys
outside the set can be added.  Also individual keys can be restricted
so that the key cannot be deleted and the value cannot be changed.
No new syntax is involved: the Hash::Util module is the interface.
.SS "Safe Signals"
.IX Subsection "Safe Signals"
Perl used to be fragile in that signals arriving at inopportune moments
could corrupt Perl's internal state.  Now Perl postpones handling of
signals until it's safe (between opcodes).
.PP
This change may have surprising side effects because signals no longer
interrupt Perl instantly.  Perl will now first finish whatever it was
doing, like finishing an internal operation (like \fIsort()\fR) or an
external operation (like an I/O operation), and only then look at any
arrived signals (and before starting the next operation).  No more corrupt
internal state since the current operation is always finished first,
but the signal may take more time to get heard.  Note that breaking
out from potentially blocking operations should still work, though.
.SS "Understanding of Numbers"
.IX Subsection "Understanding of Numbers"
In general a lot of fixing has happened in the area of Perl's
understanding of numbers, both integer and floating point.  Since in
many systems the standard number parsing functions like \f(CW\*(C`strtoul()\*(C'\fR
and \f(CW\*(C`atof()\*(C'\fR seem to have bugs, Perl tries to work around their
deficiencies.  This results hopefully in more accurate numbers.
.PP
Perl now tries internally to use integer values in numeric conversions
and basic arithmetics (+ \- * /) if the arguments are integers, and
tries also to keep the results stored internally as integers.
This change leads to often slightly faster and always less lossy
arithmetics. (Previously Perl always preferred floating point numbers
in its math.)
.SS "Arrays now always interpolate into double-quoted strings [561]"
.IX Subsection "Arrays now always interpolate into double-quoted strings [561]"
In double-quoted strings, arrays now interpolate, no matter what.  The
behavior in earlier versions of perl 5 was that arrays would interpolate
into strings if the array had been mentioned before the string was
compiled, and otherwise Perl would raise a fatal compile-time error.
In versions 5.000 through 5.003, the error was
.PP
.Vb 1
\&        Literal @example now requires backslash
.Ve
.PP
In versions 5.004_01 through 5.6.0, the error was
.PP
.Vb 1
\&        In string, @example now must be written as \e@example
.Ve
.PP
The idea here was to get people into the habit of writing
\&\f(CW"fred\e@example.com"\fR when they wanted a literal \f(CW\*(C`@\*(C'\fR sign, just as
they have always written \f(CW"Give me back my \e$5"\fR when they wanted a
literal \f(CW\*(C`$\*(C'\fR sign.
.PP
Starting with 5.6.1, when Perl now sees an \f(CW\*(C`@\*(C'\fR sign in a
double-quoted string, it \fIalways\fR attempts to interpolate an array,
regardless of whether or not the array has been used or declared
already.  The fatal error has been downgraded to an optional warning:
.PP
.Vb 1
\&        Possible unintended interpolation of @example in string
.Ve
.PP
This warns you that \f(CW"fred@example.com"\fR is going to turn into
\&\f(CW\*(C`fred.com\*(C'\fR if you don't backslash the \f(CW\*(C`@\*(C'\fR.
See http://perl.plover.com/at\-error.html for more details
about the history here.
.SS "Miscellaneous Changes"
.IX Subsection "Miscellaneous Changes"
.IP "\(bu" 4
\&\s-1AUTOLOAD\s0 is now lvaluable, meaning that you can add the :lvalue attribute
to \s-1AUTOLOAD\s0 subroutines and you can assign to the \s-1AUTOLOAD\s0 return value.
.IP "\(bu" 4
The \f(CW$Config\fR{byteorder} (and corresponding \s-1BYTEORDER\s0 in config.h) was
previously wrong in platforms if sizeof(long) was 4, but sizeof(\s-1IV\s0)
was 8.  The byteorder was only sizeof(long) bytes long (1234 or 4321),
but now it is correctly sizeof(\s-1IV\s0) bytes long, (12345678 or 87654321).
(This problem didn't affect Windows platforms.)
.Sp
Also, \f(CW$Config\fR{byteorder} is now computed dynamically\*(--this is more
robust with \*(L"fat binaries\*(R" where an executable image contains binaries
for more than one binary platform, and when cross-compiling.
.IP "\(bu" 4
\&\f(CW\*(C`perl \-d:Module=arg,arg,arg\*(C'\fR now works (previously one couldn't pass
in multiple arguments.)
.IP "\(bu" 4
\&\f(CW\*(C`do\*(C'\fR followed by a bareword now ensures that this bareword isn't
a keyword (to avoid a bug where \f(CW\*(C`do q(foo.pl)\*(C'\fR tried to call a
subroutine called \f(CW\*(C`q\*(C'\fR).  This means that for example instead of
\&\f(CW\*(C`do format()\*(C'\fR you must write \f(CW\*(C`do &format()\*(C'\fR.
.IP "\(bu" 4
The builtin \fIdump()\fR now gives an optional warning
\&\f(CW\*(C`dump() better written as CORE::dump()\*(C'\fR,
meaning that by default \f(CW\*(C`dump(...)\*(C'\fR is resolved as the builtin
\&\fIdump()\fR which dumps core and aborts, not as (possibly) user-defined
\&\f(CW\*(C`sub dump\*(C'\fR.  To call the latter, qualify the call as \f(CW\*(C`&dump(...)\*(C'\fR.
(The whole \fIdump()\fR feature is to considered deprecated, and possibly
removed/changed in future releases.)
.IP "\(bu" 4
\&\fIchomp()\fR and \fIchop()\fR are now overridable.  Note, however, that their
prototype (as given by \f(CW\*(C`prototype("CORE::chomp")\*(C'\fR is undefined,
because it cannot be expressed and therefore one cannot really write
replacements to override these builtins.
.IP "\(bu" 4
\&\s-1END\s0 blocks are now run even if you exit/die in a \s-1BEGIN\s0 block.
Internally, the execution of \s-1END\s0 blocks is now controlled by
PL_exit_flags & \s-1PERL_EXIT_DESTRUCT_END.\s0 This enables the new
behaviour for Perl embedders. This will default in 5.10. See
perlembed.
.IP "\(bu" 4
Formats now support zero-padded decimal fields.
.IP "\(bu" 4
Although \*(L"you shouldn't do that\*(R", it was possible to write code that
depends on Perl's hashed key order (Data::Dumper does this).  The new
algorithm \*(L"One-at-a-Time\*(R" produces a different hashed key order.
More details are in \*(L"Performance Enhancements\*(R".
.IP "\(bu" 4
lstat(\s-1FILEHANDLE\s0) now gives a warning because the operation makes no sense.
In future releases this may become a fatal error.
.IP "\(bu" 4
Spurious syntax errors generated in certain situations, when \fIglob()\fR
caused File::Glob to be loaded for the first time, have been fixed. [561]
.IP "\(bu" 4
Lvalue subroutines can now return \f(CW\*(C`undef\*(C'\fR in list context.  However,
the lvalue subroutine feature still remains experimental.  [561+]
.IP "\(bu" 4
A lost warning \*(L"Can't declare ... dereference in my\*(R" has been
restored (Perl had it earlier but it became lost in later releases.)
.IP "\(bu" 4
A new special regular expression variable has been introduced:
\&\f(CW$^N\fR, which contains the most-recently closed group (submatch).
.IP "\(bu" 4
\&\f(CW\*(C`no Module;\*(C'\fR does not produce an error even if Module does not have an
\&\fIunimport()\fR method.  This parallels the behavior of \f(CW\*(C`use\*(C'\fR vis-a-vis
\&\f(CW\*(C`import\*(C'\fR. [561]
.IP "\(bu" 4
The numerical comparison operators return \f(CW\*(C`undef\*(C'\fR if either operand
is a NaN.  Previously the behaviour was unspecified.
.IP "\(bu" 4
\&\f(CW\*(C`our\*(C'\fR can now have an experimental optional attribute \f(CW\*(C`unique\*(C'\fR that
affects how global variables are shared among multiple interpreters,
see \*(L"our\*(R" in perlfunc.
.IP "\(bu" 4
The following builtin functions are now overridable: \fIeach()\fR, \fIkeys()\fR,
\&\fIpop()\fR, \fIpush()\fR, \fIshift()\fR, \fIsplice()\fR, \fIunshift()\fR. [561]
.IP "\(bu" 4
\&\f(CW\*(C`pack() / unpack()\*(C'\fR can now group template letters with \f(CW\*(C`()\*(C'\fR and then
apply repetition/count modifiers on the groups.
.IP "\(bu" 4
\&\f(CW\*(C`pack() / unpack()\*(C'\fR can now process the Perl internal numeric types:
IVs, UVs, NVs\*(-- and also long doubles, if supported by the platform.
The template letters are \f(CW\*(C`j\*(C'\fR, \f(CW\*(C`J\*(C'\fR, \f(CW\*(C`F\*(C'\fR, and \f(CW\*(C`D\*(C'\fR.
.IP "\(bu" 4
\&\f(CW\*(C`pack(\*(AqU0a*\*(Aq, ...)\*(C'\fR can now be used to force a string to \s-1UTF\-8.\s0
.IP "\(bu" 4
my _\|_PACKAGE_\|_ \f(CW$obj\fR now works. [561]
.IP "\(bu" 4
\&\fIPOSIX::sleep()\fR now returns the number of \fIunslept\fR seconds
(as the \s-1POSIX\s0 standard says), as opposed to \fICORE::sleep()\fR which
returns the number of slept seconds.
.IP "\(bu" 4
\&\fIprintf()\fR and \fIsprintf()\fR now support parameter reordering using the
\&\f(CW\*(C`%\ed+\e$\*(C'\fR and \f(CW\*(C`*\ed+\e$\*(C'\fR syntaxes.  For example
.Sp
.Vb 1
\&    printf "%2\e$s %1\e$s\en", "foo", "bar";
.Ve
.Sp
will print \*(L"bar foo\en\*(R".  This feature helps in writing
internationalised software, and in general when the order
of the parameters can vary.
.IP "\(bu" 4
The (\e&) prototype now works properly. [561]
.IP "\(bu" 4
prototype(\e[$@%&]) is now available to implicitly create references
(useful for example if you want to emulate the \fItie()\fR interface).
.IP "\(bu" 4
A new command-line option, \f(CW\*(C`\-t\*(C'\fR is available.  It is the
little brother of \f(CW\*(C`\-T\*(C'\fR: instead of dying on taint violations,
lexical warnings are given.  \fBThis is only meant as a temporary
debugging aid while securing the code of old legacy applications.
This is not a substitute for \-T.\fR
.IP "\(bu" 4
In other taint news, the \f(CW\*(C`exec LIST\*(C'\fR and \f(CW\*(C`system LIST\*(C'\fR have now been
considered too risky (think \f(CW\*(C`exec @ARGV\*(C'\fR: it can start any program
with any arguments), and now the said forms cause a warning under
lexical warnings.  You should carefully launder the arguments to
guarantee their validity.  In future releases of Perl the forms will
become fatal errors so consider starting laundering now.
.IP "\(bu" 4
Tied hash interfaces are now required to have the \s-1EXISTS\s0 and \s-1DELETE\s0
methods (either own or inherited).
.IP "\(bu" 4
If tr/// is just counting characters, it doesn't attempt to
modify its target.
.IP "\(bu" 4
\&\fIuntie()\fR will now call an \s-1\fIUNTIE\s0()\fR hook if it exists.  See perltie
for details. [561]
.IP "\(bu" 4
\&\*(L"utime\*(R" in perlfunc now supports \f(CW\*(C`utime undef, undef, @files\*(C'\fR to change the
file timestamps to the current time.
.IP "\(bu" 4
The rules for allowing underscores (underbars) in numeric constants
have been relaxed and simplified: now you can have an underscore
simply \fBbetween digits\fR.
.IP "\(bu" 4
Rather than relying on C's argv[0] (which may not contain a full pathname)
where possible $^X is now set by asking the operating system.
(eg by reading \fI/proc/self/exe\fR on Linux, \fI/proc/curproc/file\fR on FreeBSD)
.IP "\(bu" 4
A new variable, \f(CW\*(C`${^TAINT}\*(C'\fR, indicates whether taint mode is enabled.
.IP "\(bu" 4
You can now override the \fIreadline()\fR builtin, and this overrides also
the <\s-1FILEHANDLE\s0> angle bracket operator.
.IP "\(bu" 4
The command-line options \-s and \-F are now recognized on the shebang
(#!) line.
.IP "\(bu" 4
Use of the \f(CW\*(C`/c\*(C'\fR match modifier without an accompanying \f(CW\*(C`/g\*(C'\fR modifier
elicits a new warning: \f(CW\*(C`Use of /c modifier is meaningless without /g\*(C'\fR.
.Sp
Use of \f(CW\*(C`/c\*(C'\fR in substitutions, even with \f(CW\*(C`/g\*(C'\fR, elicits
\&\f(CW\*(C`Use of /c modifier is meaningless in s///\*(C'\fR.
.Sp
Use of \f(CW\*(C`/g\*(C'\fR with \f(CW\*(C`split\*(C'\fR elicits \f(CW\*(C`Use of /g modifier is meaningless
in split\*(C'\fR.
.IP "\(bu" 4
Support for the \f(CW\*(C`CLONE\*(C'\fR special subroutine had been added.
With ithreads, when a new thread is created, all Perl data is cloned,
however non-Perl data cannot be cloned automatically.  In \f(CW\*(C`CLONE\*(C'\fR you
can do whatever you need to do, like for example handle the cloning of
non-Perl data, if necessary.  \f(CW\*(C`CLONE\*(C'\fR will be executed once for every
package that has it defined or inherited.  It will be called in the
context of the new thread, so all modifications are made in the new area.
.Sp
See perlmod
.SH "Modules and Pragmata"
.IX Header "Modules and Pragmata"
.SS "New Modules and Pragmata"
.IX Subsection "New Modules and Pragmata"
.IP "\(bu" 4
\&\f(CW\*(C`Attribute::Handlers\*(C'\fR, originally by Damian Conway and now maintained
by Arthur Bergman, allows a class to define attribute handlers.
.Sp
.Vb 3
\&    package MyPack;
\&    use Attribute::Handlers;
\&    sub Wolf :ATTR(SCALAR) { print "howl!\en" }
\&
\&    # later, in some package using or inheriting from MyPack...
\&
\&    my MyPack $Fluffy : Wolf; # the attribute handler Wolf will be called
.Ve
.Sp
Both variables and routines can have attribute handlers.  Handlers can
be specific to type (\s-1SCALAR, ARRAY, HASH,\s0 or \s-1CODE\s0), or specific to the
exact compilation phase (\s-1BEGIN, CHECK, INIT,\s0 or \s-1END\s0).
See Attribute::Handlers.
.IP "\(bu" 4
\&\f(CW\*(C`B::Concise\*(C'\fR, by Stephen McCamant, is a new compiler backend for
walking the Perl syntax tree, printing concise info about ops.
The output is highly customisable.  See B::Concise. [561+]
.IP "\(bu" 4
The new bignum, bigint, and bigrat pragmas, by Tels, implement
transparent bignum support (using the Math::BigInt, Math::BigFloat,
and Math::BigRat backends).
.IP "\(bu" 4
\&\f(CW\*(C`Class::ISA\*(C'\fR, by Sean Burke, is a module for reporting the search
path for a class's \s-1ISA\s0 tree.  See Class::ISA.
.IP "\(bu" 4
\&\f(CW\*(C`Cwd\*(C'\fR now has a split personality: if possible, an \s-1XS\s0 extension is
used, (this will hopefully be faster, more secure, and more robust)
but if not possible, the familiar Perl implementation is used.
.IP "\(bu" 4
\&\f(CW\*(C`Devel::PPPort\*(C'\fR, originally by Kenneth Albanowski and now
maintained by Paul Marquess, has been added.  It is primarily used
by \f(CW\*(C`h2xs\*(C'\fR to enhance portability of \s-1XS\s0 modules between different
versions of Perl.  See Devel::PPPort.
.IP "\(bu" 4
\&\f(CW\*(C`Digest\*(C'\fR, frontend module for calculating digests (checksums), from
Gisle Aas, has been added.  See Digest.
.IP "\(bu" 4
\&\f(CW\*(C`Digest::MD5\*(C'\fR for calculating \s-1MD5\s0 digests (checksums) as defined in
\&\s-1RFC 1321,\s0 from Gisle Aas, has been added.  See Digest::MD5.
.Sp
.Vb 1
\&    use Digest::MD5 \*(Aqmd5_hex\*(Aq;
\&
\&    $digest = md5_hex("Thirsty Camel");
\&
\&    print $digest, "\en"; # 01d19d9d2045e005c3f1b80e8b164de1
.Ve
.Sp
\&\s-1NOTE:\s0 the \f(CW\*(C`MD5\*(C'\fR backward compatibility module is deliberately not
included since its further use is discouraged.
.Sp
See also PerlIO::via::QuotedPrint.
.IP "\(bu" 4
\&\f(CW\*(C`Encode\*(C'\fR, originally by Nick Ing-Simmons and now maintained by Dan
Kogai, provides a mechanism to translate between different character
encodings.  Support for Unicode, \s-1ISO\-8859\-1,\s0 and \s-1ASCII\s0 are compiled in
to the module.  Several other encodings (like the rest of the
\&\s-1ISO\-8859,\s0 CP*/Win*, Mac, \s-1KOI8\-R,\s0 three variants \s-1EBCDIC,\s0 Chinese,
Japanese, and Korean encodings) are included and can be loaded at
runtime.  (For space considerations, the largest Chinese encodings
have been separated into their own \s-1CPAN\s0 module, Encode::HanExtra,
which Encode will use if available).  See Encode.
.Sp
Any encoding supported by Encode module is also available to the
\&\*(L":\fIencoding()\fR\*(R" layer if PerlIO is used.
.IP "\(bu" 4
\&\f(CW\*(C`Hash::Util\*(C'\fR is the interface to the new \fIrestricted hashes\fR
feature.  (Implemented by Jeffrey Friedl, Nick Ing-Simmons, and
Michael Schwern.)  See Hash::Util.
.IP "\(bu" 4
\&\f(CW\*(C`I18N::Langinfo\*(C'\fR can be used to query locale information.
See I18N::Langinfo.
.IP "\(bu" 4
\&\f(CW\*(C`I18N::LangTags\*(C'\fR, by Sean Burke, has functions for dealing with
RFC3066\-style language tags.  See I18N::LangTags.
.IP "\(bu" 4
\&\f(CW\*(C`ExtUtils::Constant\*(C'\fR, by Nicholas Clark, is a new tool for extension
writers for generating \s-1XS\s0 code to import C header constants.
See ExtUtils::Constant.
.IP "\(bu" 4
\&\f(CW\*(C`Filter::Simple\*(C'\fR, by Damian Conway, is an easy-to-use frontend to
Filter::Util::Call.  See Filter::Simple.
.Sp
.Vb 1
\&    # in MyFilter.pm:
\&
\&    package MyFilter;
\&
\&    use Filter::Simple sub {
\&        while (my ($from, $to) = splice @_, 0, 2) {
\&                s/$from/$to/g;
\&        }
\&    };
\&
\&    1;
\&
\&    # in user\*(Aqs code:
\&
\&    use MyFilter qr/red/ => \*(Aqgreen\*(Aq;
\&
\&    print "red\en";   # this code is filtered, will print "green\en"
\&    print "bored\en"; # this code is filtered, will print "bogreen\en"
\&
\&    no MyFilter;
\&
\&    print "red\en";   # this code is not filtered, will print "red\en"
.Ve
.IP "\(bu" 4
\&\f(CW\*(C`File::Temp\*(C'\fR, by Tim Jenness, allows one to create temporary files
and directories in an easy, portable, and secure way.  See File::Temp.
[561+]
.IP "\(bu" 4
\&\f(CW\*(C`Filter::Util::Call\*(C'\fR, by Paul Marquess, provides you with the
framework to write \fIsource filters\fR in Perl.  For most uses, the
frontend Filter::Simple is to be preferred.  See Filter::Util::Call.
.IP "\(bu" 4
\&\f(CW\*(C`if\*(C'\fR, by Ilya Zakharevich, is a new pragma for conditional inclusion
of modules.
.IP "\(bu" 4
libnet, by Graham Barr, is a collection of perl5 modules related
to network programming.  See Net::FTP, Net::NNTP, Net::Ping
(not part of libnet, but related), Net::POP3, Net::SMTP,
and Net::Time.
.Sp
Perl installation leaves libnet unconfigured; use \fIlibnetcfg\fR
to configure it.
.IP "\(bu" 4
\&\f(CW\*(C`List::Util\*(C'\fR, by Graham Barr, is a selection of general-utility
list subroutines, such as \fIsum()\fR, \fImin()\fR, \fIfirst()\fR, and \fIshuffle()\fR.
See List::Util.
.IP "\(bu" 4
\&\f(CW\*(C`Locale::Constants\*(C'\fR, \f(CW\*(C`Locale::Country\*(C'\fR, \f(CW\*(C`Locale::Currency\*(C'\fR
\&\f(CW\*(C`Locale::Language\*(C'\fR, and Locale::Script, by Neil Bowers, have
been added.  They provide the codes for various locale standards, such
as \*(L"fr\*(R" for France, \*(L"usd\*(R" for \s-1US\s0 Dollar, and \*(L"ja\*(R" for Japanese.
.Sp
.Vb 1
\&    use Locale::Country;
\&
\&    $country = code2country(\*(Aqjp\*(Aq);               # $country gets \*(AqJapan\*(Aq
\&    $code    = country2code(\*(AqNorway\*(Aq);           # $code gets \*(Aqno\*(Aq
.Ve
.Sp
See Locale::Constants, Locale::Country, Locale::Currency,
and Locale::Language.
.IP "\(bu" 4
\&\f(CW\*(C`Locale::Maketext\*(C'\fR, by Sean Burke, is a localization framework.  See
Locale::Maketext, and Locale::Maketext::TPJ13.  The latter is an
article about software localization, originally published in The Perl
Journal #13, and republished here with kind permission.
.IP "\(bu" 4
\&\f(CW\*(C`Math::BigRat\*(C'\fR for big rational numbers, to accompany Math::BigInt and
Math::BigFloat, from Tels.  See Math::BigRat.
.IP "\(bu" 4
\&\f(CW\*(C`Memoize\*(C'\fR can make your functions faster by trading space for time,
from Mark-Jason Dominus.  See Memoize.
.IP "\(bu" 4
\&\f(CW\*(C`MIME::Base64\*(C'\fR, by Gisle Aas, allows you to encode data in base64,
as defined in \s-1RFC 2045 \- \s0\fI\s-1MIME \s0(Multipurpose Internet Mail
Extensions)\fR.
.Sp
.Vb 1
\&    use MIME::Base64;
\&
\&    $encoded = encode_base64(\*(AqAladdin:open sesame\*(Aq);
\&    $decoded = decode_base64($encoded);
\&
\&    print $encoded, "\en"; # "QWxhZGRpbjpvcGVuIHNlc2FtZQ=="
.Ve
.Sp
See MIME::Base64.
.IP "\(bu" 4
\&\f(CW\*(C`MIME::QuotedPrint\*(C'\fR, by Gisle Aas, allows you to encode data
in quoted-printable encoding, as defined in \s-1RFC 2045 \- \s0\fI\s-1MIME
\&\s0(Multipurpose Internet Mail Extensions)\fR.
.Sp
.Vb 1
\&    use MIME::QuotedPrint;
\&
\&    $encoded = encode_qp("\exDE\exAD\exBE\exEF");
\&    $decoded = decode_qp($encoded);
\&
\&    print $encoded, "\en"; # "=DE=AD=BE=EF\en"
\&    print $decoded, "\en"; # "\exDE\exAD\exBE\exEF\en"
.Ve
.Sp
See also PerlIO::via::QuotedPrint.
.IP "\(bu" 4
\&\f(CW\*(C`NEXT\*(C'\fR, by Damian Conway, is a pseudo-class for method redispatch.
See \s-1NEXT\s0.
.IP "\(bu" 4
\&\f(CW\*(C`open\*(C'\fR is a new pragma for setting the default I/O layers
for \fIopen()\fR.
.IP "\(bu" 4
\&\f(CW\*(C`PerlIO::scalar\*(C'\fR, by Nick Ing-Simmons, provides the implementation
of \s-1IO\s0 to \*(L"in memory\*(R" Perl scalars as discussed above.  It also serves
as an example of a loadable PerlIO layer.  Other future possibilities
include PerlIO::Array and PerlIO::Code.  See PerlIO::scalar.
.IP "\(bu" 4
\&\f(CW\*(C`PerlIO::via\*(C'\fR, by Nick Ing-Simmons, acts as a PerlIO layer and wraps
PerlIO layer functionality provided by a class (typically implemented
in Perl code).
.IP "\(bu" 4
\&\f(CW\*(C`PerlIO::via::QuotedPrint\*(C'\fR, by Elizabeth Mattijsen, is an example
of a \f(CW\*(C`PerlIO::via\*(C'\fR class:
.Sp
.Vb 2
\&    use PerlIO::via::QuotedPrint;
\&    open($fh,">:via(QuotedPrint)",$path);
.Ve
.Sp
This will automatically convert everything output to \f(CW$fh\fR to
Quoted-Printable.  See PerlIO::via and PerlIO::via::QuotedPrint.
.IP "\(bu" 4
\&\f(CW\*(C`Pod::ParseLink\*(C'\fR, by Russ Allbery, has been added,
to parse L<> links in pods as described in the new
perlpodspec.
.IP "\(bu" 4
\&\f(CW\*(C`Pod::Text::Overstrike\*(C'\fR, by Joe Smith, has been added.
It converts \s-1POD\s0 data to formatted overstrike text.
See Pod::Text::Overstrike. [561+]
.IP "\(bu" 4
\&\f(CW\*(C`Scalar::Util\*(C'\fR is a selection of general-utility scalar subroutines,
such as \fIblessed()\fR, \fIreftype()\fR, and \fItainted()\fR.  See Scalar::Util.
.IP "\(bu" 4
\&\f(CW\*(C`sort\*(C'\fR is a new pragma for controlling the behaviour of \fIsort()\fR.
.IP "\(bu" 4
\&\f(CW\*(C`Storable\*(C'\fR gives persistence to Perl data structures by allowing the
storage and retrieval of Perl data to and from files in a fast and
compact binary format.  Because in effect Storable does serialisation
of Perl data structures, with it you can also clone deep, hierarchical
datastructures.  Storable was originally created by Raphael Manfredi,
but it is now maintained by Abhijit Menon-Sen.  Storable has been
enhanced to understand the two new hash features, Unicode keys and
restricted hashes.  See Storable.
.IP "\(bu" 4
\&\f(CW\*(C`Switch\*(C'\fR, by Damian Conway, has been added.  Just by saying
.Sp
.Vb 1
\&    use Switch;
.Ve
.Sp
you have \f(CW\*(C`switch\*(C'\fR and \f(CW\*(C`case\*(C'\fR available in Perl.
.Sp
.Vb 1
\&    use Switch;
\&
\&    switch ($val) {
\&
\&                case 1          { print "number 1" }
\&                case "a"        { print "string a" }
\&                case [1..10,42] { print "number in list" }
\&                case (@array)   { print "number in list" }
\&                case /\ew+/      { print "pattern" }
\&                case qr/\ew+/    { print "pattern" }
\&                case (%hash)    { print "entry in hash" }
\&                case (\e%hash)   { print "entry in hash" }
\&                case (\e&sub)    { print "arg to subroutine" }
\&                else            { print "previous case not true" }
\&    }
.Ve
.Sp
See Switch.
.IP "\(bu" 4
\&\f(CW\*(C`Test::More\*(C'\fR, by Michael Schwern, is yet another framework for writing
test scripts, more extensive than Test::Simple.  See Test::More.
.IP "\(bu" 4
\&\f(CW\*(C`Test::Simple\*(C'\fR, by Michael Schwern, has basic utilities for writing
tests.   See Test::Simple.
.IP "\(bu" 4
\&\f(CW\*(C`Text::Balanced\*(C'\fR, by Damian Conway, has been added, for extracting
delimited text sequences from strings.
.Sp
.Vb 1
\&    use Text::Balanced \*(Aqextract_delimited\*(Aq;
\&
\&    ($a, $b) = extract_delimited("\*(Aqnever say never\*(Aq, he never said", "\*(Aq", \*(Aq\*(Aq);
.Ve
.Sp
\&\f(CW$a\fR will be \*(L"'never say never'\*(R", \f(CW$b\fR will be ', he never said'.
.Sp
In addition to \fIextract_delimited()\fR, there are also \fIextract_bracketed()\fR,
\&\fIextract_quotelike()\fR, \fIextract_codeblock()\fR, \fIextract_variable()\fR,
\&\fIextract_tagged()\fR, \fIextract_multiple()\fR, \fIgen_delimited_pat()\fR, and
\&\fIgen_extract_tagged()\fR.  With these, you can implement rather advanced
parsing algorithms.  See Text::Balanced.
.IP "\(bu" 4
\&\f(CW\*(C`threads\*(C'\fR, by Arthur Bergman, is an interface to interpreter threads.
Interpreter threads (ithreads) is the new thread model introduced in
Perl 5.6 but only available as an internal interface for extension
writers (and for Win32 Perl for \f(CW\*(C`fork()\*(C'\fR emulation).  See threads,
threads::shared, and perlthrtut.
.IP "\(bu" 4
\&\f(CW\*(C`threads::shared\*(C'\fR, by Arthur Bergman, allows data sharing for
interpreter threads.  See threads::shared.
.IP "\(bu" 4
\&\f(CW\*(C`Tie::File\*(C'\fR, by Mark-Jason Dominus, associates a Perl array with the
lines of a file.  See Tie::File.
.IP "\(bu" 4
\&\f(CW\*(C`Tie::Memoize\*(C'\fR, by Ilya Zakharevich, provides on-demand loaded hashes.
See Tie::Memoize.
.IP "\(bu" 4
\&\f(CW\*(C`Tie::RefHash::Nestable\*(C'\fR, by Edward Avis, allows storing hash
references (unlike the standard Tie::RefHash)  The module is contained
within Tie::RefHash.  See Tie::RefHash.
.IP "\(bu" 4
\&\f(CW\*(C`Time::HiRes\*(C'\fR, by Douglas E. Wegscheid, provides high resolution
timing (ualarm, usleep, and gettimeofday).  See Time::HiRes.
.IP "\(bu" 4
\&\f(CW\*(C`Unicode::UCD\*(C'\fR offers a querying interface to the Unicode Character
Database.  See Unicode::UCD.
.IP "\(bu" 4
\&\f(CW\*(C`Unicode::Collate\*(C'\fR, by \s-1SADAHIRO\s0 Tomoyuki, implements the \s-1UCA
\&\s0(Unicode Collation Algorithm) for sorting Unicode strings.
See Unicode::Collate.
.IP "\(bu" 4
\&\f(CW\*(C`Unicode::Normalize\*(C'\fR, by \s-1SADAHIRO\s0 Tomoyuki, implements the various
Unicode normalization forms.  See Unicode::Normalize.
.IP "\(bu" 4
\&\f(CW\*(C`XS::APItest\*(C'\fR, by Tim Jenness, is a test extension that exercises \s-1XS\s0
APIs.  Currently only \f(CW\*(C`printf()\*(C'\fR is tested: how to output various
basic data types from \s-1XS.\s0
.IP "\(bu" 4
\&\f(CW\*(C`XS::Typemap\*(C'\fR, by Tim Jenness, is a test extension that exercises
\&\s-1XS\s0 typemaps.  Nothing gets installed, but the code is worth studying
for extension writers.
.SS "Updated And Improved Modules and Pragmata"
.IX Subsection "Updated And Improved Modules and Pragmata"
.IP "\(bu" 4
The following independently supported modules have been updated to the
newest versions from \s-1CPAN: CGI, CPAN,\s0 DB_File, File::Spec, File::Temp,
Getopt::Long, Math::BigFloat, Math::BigInt, the podlators bundle
(Pod::Man, Pod::Text), Pod::LaTeX [561+], Pod::Parser, Storable,
Term::ANSIColor, Test, Text\-Tabs+Wrap.
.IP "\(bu" 4
\&\fIattributes::reftype()\fR now works on tied arguments.
.IP "\(bu" 4
AutoLoader can now be disabled with \f(CW\*(C`no AutoLoader;\*(C'\fR.
.IP "\(bu" 4
B::Deparse has been significantly enhanced by Robin Houston.  It can
now deparse almost all of the standard test suite (so that the tests
still succeed).  There is a make target \*(L"test.deparse\*(R" for trying this
out.
.IP "\(bu" 4
Carp now has better interface documentation, and the \f(CW@CARP_NOT\fR
interface has been added to get optional control over where errors
are reported independently of \f(CW@ISA\fR, by Ben Tilly.
.IP "\(bu" 4
Class::Struct can now define the classes in compile time.
.IP "\(bu" 4
Class::Struct now assigns the array/hash element if the accessor
is called with an array/hash element as the \fBsole\fR argument.
.IP "\(bu" 4
The return value of \fICwd::fastcwd()\fR is now tainted.
.IP "\(bu" 4
Data::Dumper now has an option to sort hashes.
.IP "\(bu" 4
Data::Dumper now has an option to dump code references
using B::Deparse.
.IP "\(bu" 4
DB_File now supports newer Berkeley \s-1DB\s0 versions, among
other improvements.
.IP "\(bu" 4
Devel::Peek now has an interface for the Perl memory statistics
(this works only if you are using perl's malloc, and if you have
compiled with debugging).
.IP "\(bu" 4
The English module can now be used without the infamous performance
hit by saying
.Sp
.Vb 1
\&        use English \*(Aq\-no_match_vars\*(Aq;
.Ve
.Sp
(Assuming, of course, that you don't need the troublesome variables
\&\f(CW\*(C`$\`\*(C'\fR, \f(CW$&\fR, or \f(CW\*(C`$\*(Aq\*(C'\fR.)  Also, introduced \f(CW@LAST_MATCH_START\fR and
\&\f(CW@LAST_MATCH_END\fR English aliases for \f(CW\*(C`@\-\*(C'\fR and \f(CW\*(C`@+\*(C'\fR.
.IP "\(bu" 4
ExtUtils::MakeMaker has been significantly cleaned up and fixed.
The enhanced version has also been backported to earlier releases
of Perl and submitted to \s-1CPAN\s0 so that the earlier releases can
enjoy the fixes.
.IP "\(bu" 4
The arguments of \fIWriteMakefile()\fR in Makefile.PL are now checked
for sanity much more carefully than before.  This may cause new
warnings when modules are being installed.  See ExtUtils::MakeMaker
for more details.
.IP "\(bu" 4
ExtUtils::MakeMaker now uses File::Spec internally, which hopefully
leads to better portability.
.IP "\(bu" 4
Fcntl, Socket, and Sys::Syslog have been rewritten by Nicholas Clark
to use the new-style constant dispatch section (see ExtUtils::Constant).
This means that they will be more robust and hopefully faster.
.IP "\(bu" 4
File::Find now \fIchdir()\fRs correctly when chasing symbolic links. [561]
.IP "\(bu" 4
File::Find now has pre\- and post-processing callbacks.  It also
correctly changes directories when chasing symbolic links.  Callbacks
(naughtily) exiting with \*(L"next;\*(R" instead of \*(L"return;\*(R" now work.
.IP "\(bu" 4
File::Find is now (again) reentrant.  It also has been made
more portable.
.IP "\(bu" 4
The warnings issued by File::Find now belong to their own category.
You can enable/disable them with \f(CW\*(C`use/no warnings \*(AqFile::Find\*(Aq;\*(C'\fR.
.IP "\(bu" 4
\&\fIFile::Glob::glob()\fR has been renamed to \fIFile::Glob::bsd_glob()\fR
because the name clashes with the builtin \fIglob()\fR.  The older
name is still available for compatibility, but is deprecated. [561]
.IP "\(bu" 4
File::Glob now supports \f(CW\*(C`GLOB_LIMIT\*(C'\fR constant to limit the size of
the returned list of filenames.
.IP "\(bu" 4
IPC::Open3 now allows the use of numeric file descriptors.
.IP "\(bu" 4
IO::Socket now has an \fIatmark()\fR method, which returns true if the socket
is positioned at the out-of-band mark.  The method is also exportable
as a \fIsockatmark()\fR function.
.IP "\(bu" 4
IO::Socket::INET failed to open the specified port if the service name
was not known.  It now correctly uses the supplied port number as is. [561]
.IP "\(bu" 4
IO::Socket::INET has support for the ReusePort option (if your
platform supports it).  The Reuse option now has an alias, ReuseAddr.
For clarity, you may want to prefer ReuseAddr.
.IP "\(bu" 4
IO::Socket::INET now supports a value of zero for \f(CW\*(C`LocalPort\*(C'\fR
(usually meaning that the operating system will make one up.)
.IP "\(bu" 4
\&'use lib' now works identically to \f(CW@INC\fR.  Removing directories
with 'no lib' now works.
.IP "\(bu" 4
Math::BigFloat and Math::BigInt have undergone a full rewrite by Tels.
They are now magnitudes faster, and they support various bignum
libraries such as \s-1GMP\s0 and \s-1PARI\s0 as their backends.
.IP "\(bu" 4
Math::Complex handles inf, NaN etc., better.
.IP "\(bu" 4
Net::Ping has been considerably enhanced by Rob Brown: multihoming is
now supported, Win32 functionality is better, there is now time
measuring functionality (optionally high-resolution using
Time::HiRes), and there is now \*(L"external\*(R" protocol which uses
Net::Ping::External module which runs your external ping utility and
parses the output.  A version of Net::Ping::External is available in
\&\s-1CPAN.\s0
.Sp
Note that some of the Net::Ping tests are disabled when running
under the Perl distribution since one cannot assume one or more
of the following: enabled echo port at localhost, full Internet
connectivity, or sympathetic firewalls.  You can set the environment
variable PERL_TEST_Net_Ping to \*(L"1\*(R" (one) before running the Perl test
suite to enable all the Net::Ping tests.
.IP "\(bu" 4
\&\fIPOSIX::sigaction()\fR is now much more flexible and robust.
You can now install coderef handlers, '\s-1DEFAULT\s0', and '\s-1IGNORE\s0'
handlers, installing new handlers was not atomic.
.IP "\(bu" 4
In Safe, \f(CW%INC\fR is now localised in a Safe compartment so that
use/require work.
.IP "\(bu" 4
In SDBM_File on dosish platforms, some keys went missing because of
lack of support for files with \*(L"holes\*(R".  A workaround for the problem
has been added.
.IP "\(bu" 4
In Search::Dict one can now have a pre-processing hook for the
lines being searched.
.IP "\(bu" 4
The Shell module now has an \s-1OO\s0 interface.
.IP "\(bu" 4
In Sys::Syslog there is now a failover mechanism that will go
through alternative connection mechanisms until the message
is successfully logged.
.IP "\(bu" 4
The Test module has been significantly enhanced.
.IP "\(bu" 4
\&\fITime::Local::timelocal()\fR does not handle fractional seconds anymore.
The rationale is that neither does \fIlocaltime()\fR, and \fItimelocal()\fR and
\&\fIlocaltime()\fR are supposed to be inverses of each other.
.IP "\(bu" 4
The vars pragma now supports declaring fully qualified variables.
(Something that \f(CW\*(C`our()\*(C'\fR does not and will not support.)
.IP "\(bu" 4
The \f(CW\*(C`utf8::\*(C'\fR name space (as in the pragma) provides various
Perl-callable functions to provide low level access to Perl's
internal Unicode representation.  At the moment only \fIlength()\fR
has been implemented.
.SH "Utility Changes"
.IX Header "Utility Changes"
.IP "\(bu" 4
Emacs perl mode (emacs/cperl\-mode.el) has been updated to version
4.31.
.IP "\(bu" 4
\&\fIemacs/e2ctags.pl\fR is now much faster.
.IP "\(bu" 4
\&\f(CW\*(C`enc2xs\*(C'\fR is a tool for people adding their own encodings to the
Encode module.
.IP "\(bu" 4
\&\f(CW\*(C`h2ph\*(C'\fR now supports C trigraphs.
.IP "\(bu" 4
\&\f(CW\*(C`h2xs\*(C'\fR now produces a template \s-1README.\s0
.IP "\(bu" 4
\&\f(CW\*(C`h2xs\*(C'\fR now uses \f(CW\*(C`Devel::PPPort\*(C'\fR for better portability between
different versions of Perl.
.IP "\(bu" 4
\&\f(CW\*(C`h2xs\*(C'\fR uses the new ExtUtils::Constant module
which will affect newly created extensions that define constants.
Since the new code is more correct (if you have two constants where the
first one is a prefix of the second one, the first constant \fBnever\fR
got defined), less lossy (it uses integers for integer constant,
as opposed to the old code that used floating point numbers even for
integer constants), and slightly faster, you might want to consider
regenerating your extension code (the new scheme makes regenerating
easy).  h2xs now also supports C trigraphs.
.IP "\(bu" 4
\&\f(CW\*(C`libnetcfg\*(C'\fR has been added to configure libnet.
.IP "\(bu" 4
\&\f(CW\*(C`perlbug\*(C'\fR is now much more robust.  It also sends the bug report to
perl.org, not perl.com.
.IP "\(bu" 4
\&\f(CW\*(C`perlcc\*(C'\fR has been rewritten and its user interface (that is,
command line) is much more like that of the Unix C compiler, cc.
(The perlbc tools has been removed.  Use \f(CW\*(C`perlcc \-B\*(C'\fR instead.)
\&\fBNote that perlcc is still considered very experimental and
unsupported.\fR [561]
.IP "\(bu" 4
\&\f(CW\*(C`perlivp\*(C'\fR is a new Installation Verification Procedure utility
for running any time after installing Perl.
.IP "\(bu" 4
\&\f(CW\*(C`piconv\*(C'\fR is an implementation of the character conversion utility
\&\f(CW\*(C`iconv\*(C'\fR, demonstrating the new Encode module.
.IP "\(bu" 4
\&\f(CW\*(C`pod2html\*(C'\fR now allows specifying a cache directory.
.IP "\(bu" 4
\&\f(CW\*(C`pod2html\*(C'\fR now produces \s-1XHTML 1.0.\s0
.IP "\(bu" 4
\&\f(CW\*(C`pod2html\*(C'\fR now understands \s-1POD\s0 written using different line endings
(PC-like \s-1CRLF\s0 versus Unix-like \s-1LF\s0 versus MacClassic-like \s-1CR\s0).
.IP "\(bu" 4
\&\f(CW\*(C`s2p\*(C'\fR has been completely rewritten in Perl.  (It is in fact a full
implementation of sed in Perl: you can use the sed functionality by
using the \f(CW\*(C`psed\*(C'\fR utility.)
.IP "\(bu" 4
\&\f(CW\*(C`xsubpp\*(C'\fR now understands \s-1POD\s0 documentation embedded in the *.xs
files. [561]
.IP "\(bu" 4
\&\f(CW\*(C`xsubpp\*(C'\fR now supports the \s-1OUT\s0 keyword.
.SH "New Documentation"
.IX Header "New Documentation"
.IP "\(bu" 4
perl56delta details the changes between the 5.005 release and the
5.6.0 release.
.IP "\(bu" 4
perlclib documents the internal replacements for standard C library
functions.  (Interesting only for extension writers and Perl core
hackers.) [561+]
.IP "\(bu" 4
perldebtut is a Perl debugging tutorial. [561+]
.IP "\(bu" 4
perlebcdic contains considerations for running Perl on \s-1EBCDIC\s0
platforms. [561+]
.IP "\(bu" 4
perlintro is a gentle introduction to Perl.
.IP "\(bu" 4
perliol documents the internals of PerlIO with layers.
.IP "\(bu" 4
perlmodstyle is a style guide for writing modules.
.IP "\(bu" 4
perlnewmod tells about writing and submitting a new module. [561+]
.IP "\(bu" 4
perlpacktut is a \fIpack()\fR tutorial.
.IP "\(bu" 4
perlpod has been rewritten to be clearer and to record the best
practices gathered over the years.
.IP "\(bu" 4
perlpodspec is a more formal specification of the pod format,
mainly of interest for writers of pod applications, not to
people writing in pod.
.IP "\(bu" 4
perlretut is a regular expression tutorial. [561+]
.IP "\(bu" 4
perlrequick is a regular expressions quick-start guide.
Yes, much quicker than perlretut. [561]
.IP "\(bu" 4
perltodo has been updated.
.IP "\(bu" 4
perltootc has been renamed as perltooc (to not to conflict
with perltoot in filesystems restricted to \*(L"8.3\*(R" names).
.IP "\(bu" 4
perluniintro is an introduction to using Unicode in Perl.
(perlunicode is more of a detailed reference and background
information)
.IP "\(bu" 4
perlutil explains the command line utilities packaged with the Perl
distribution. [561+]
.PP
The following platform-specific documents are available before
the installation as \s-1README.\s0\fIplatform\fR, and after the installation
as perl\fIplatform\fR:
.PP
.Vb 5
\&    perlaix perlamiga perlapollo perlbeos perlbs2000
\&    perlce perlcygwin perldgux perldos perlepoc perlfreebsd perlhpux
\&    perlhurd perlirix perlmachten perlmacos perlmint perlmpeix
\&    perlnetware perlos2 perlos390 perlplan9 perlqnx perlsolaris
\&    perltru64 perluts perlvmesa perlvms perlvos perlwin32
.Ve
.PP
These documents usually detail one or more of the following subjects:
configuring, building, testing, installing, and sometimes also using
Perl on the said platform.
.PP
Eastern Asian Perl users are now welcomed in their own languages:
\&\s-1README\s0.jp (Japanese), \s-1README\s0.ko (Korean), \s-1README\s0.cn (simplified
Chinese) and \s-1README\s0.tw (traditional Chinese), which are written in
normal pod but encoded in EUC-JP, EUC-KR, EUC-CN and Big5.  These
will get installed as
.PP
.Vb 1
\&   perljp perlko perlcn perltw
.Ve
.IP "\(bu" 4
The documentation for the POSIX-BC platform is called \*(L"\s-1BS2000\*(R",\s0 to avoid
confusion with the Perl \s-1POSIX\s0 module.
.IP "\(bu" 4
The documentation for the WinCE platform is called perlce (\s-1README\s0.ce
in the source code kit), to avoid confusion with the perlwin32
documentation on 8.3\-restricted filesystems.
.SH "Performance Enhancements"
.IX Header "Performance Enhancements"
.IP "\(bu" 4
\&\fImap()\fR could get pathologically slow when the result list it generates
is larger than the source list.  The performance has been improved for
common scenarios. [561]
.IP "\(bu" 4
\&\fIsort()\fR is also fully reentrant, in the sense that the sort function
can itself call \fIsort()\fR.  This did not work reliably in previous
releases. [561]
.IP "\(bu" 4
\&\fIsort()\fR has been changed to use primarily mergesort internally as
opposed to the earlier quicksort.  For very small lists this may
result in slightly slower sorting times, but in general the speedup
should be at least 20%.  Additional bonuses are that the worst case
behaviour of \fIsort()\fR is now better (in computer science terms it now
runs in time O(N log N), as opposed to quicksort's Theta(N**2)
worst-case run time behaviour), and that \fIsort()\fR is now stable
(meaning that elements with identical keys will stay ordered as they
were before the sort).  See the \f(CW\*(C`sort\*(C'\fR pragma for information.
.Sp
The story in more detail: suppose you want to serve yourself a little
slice of Pi.
.Sp
.Vb 1
\&    @digits = ( 3,1,4,1,5,9 );
.Ve
.Sp
A numerical sort of the digits will yield (1,1,3,4,5,9), as expected.
Which \f(CW1\fR comes first is hard to know, since one \f(CW1\fR looks pretty
much like any other.  You can regard this as totally trivial,
or somewhat profound.  However, if you just want to sort the even
digits ahead of the odd ones, then what will
.Sp
.Vb 1
\&    sort { ($a % 2) <=> ($b % 2) } @digits;
.Ve
.Sp
yield?  The only even digit, \f(CW4\fR, will come first.  But how about
the odd numbers, which all compare equal?  With the quicksort algorithm
used to implement Perl 5.6 and earlier, the order of ties is left up
to the sort.  So, as you add more and more digits of Pi, the order
in which the sorted even and odd digits appear will change.
and, for sufficiently large slices of Pi, the quicksort algorithm
in Perl 5.8 won't return the same results even if reinvoked with the
same input.  The justification for this rests with quicksort's
worst case behavior.  If you run
.Sp
.Vb 1
\&   sort { $a <=> $b } ( 1 .. $N , 1 .. $N );
.Ve
.Sp
(something you might approximate if you wanted to merge two sorted
arrays using sort), doubling \f(CW$N\fR doesn't just double the quicksort time,
it \fIquadruples\fR it.  Quicksort has a worst case run time that can
grow like N**2, so-called \fIquadratic\fR behaviour, and it can happen
on patterns that may well arise in normal use.  You won't notice this
for small arrays, but you \fIwill\fR notice it with larger arrays,
and you may not live long enough for the sort to complete on arrays
of a million elements.  So the 5.8 quicksort scrambles large arrays
before sorting them, as a statistical defence against quadratic behaviour.
But that means if you sort the same large array twice, ties may be
broken in different ways.
.Sp
Because of the unpredictability of tie-breaking order, and the quadratic
worst-case behaviour, quicksort was \fIalmost\fR replaced completely with
a stable mergesort.  \fIStable\fR means that ties are broken to preserve
the original order of appearance in the input array.  So
.Sp
.Vb 1
\&    sort { ($a % 2) <=> ($b % 2) } (3,1,4,1,5,9);
.Ve
.Sp
will yield (4,3,1,1,5,9), guaranteed.  The even and odd numbers
appear in the output in the same order they appeared in the input.
Mergesort has worst case O(N log N) behaviour, the best value
attainable.  And, ironically, this mergesort does particularly
well where quicksort goes quadratic:  mergesort sorts (1..$N, 1..$N)
in O(N) time.  But quicksort was rescued at the last moment because
it is faster than mergesort on certain inputs and platforms.
For example, if you really \fIdon't\fR care about the order of even
and odd digits, quicksort will run in O(N) time; it's very good
at sorting many repetitions of a small number of distinct elements.
The quicksort divide and conquer strategy works well on platforms
with relatively small, very fast, caches.  Eventually, the problem gets
whittled down to one that fits in the cache, from which point it
benefits from the increased memory speed.
.Sp
Quicksort was rescued by implementing a sort pragma to control aspects
of the sort.  The \fBstable\fR subpragma forces stable behaviour,
regardless of algorithm.  The \fB_quicksort\fR and \fB_mergesort\fR
subpragmas are heavy-handed ways to select the underlying implementation.
The leading \f(CW\*(C`_\*(C'\fR is a reminder that these subpragmas may not survive
beyond 5.8.  More appropriate mechanisms for selecting the implementation
exist, but they wouldn't have arrived in time to save quicksort.
.IP "\(bu" 4
Hashes now use Bob Jenkins \*(L"One-at-a-Time\*(R" hashing key algorithm
( http://burtleburtle.net/bob/hash/doobs.html ).  This algorithm is
reasonably fast while producing a much better spread of values than
the old hashing algorithm (originally by Chris Torek, later tweaked by
Ilya Zakharevich).  Hash values output from the algorithm on a hash of
all 3\-char printable \s-1ASCII\s0 keys comes much closer to passing the
\&\s-1DIEHARD\s0 random number generation tests.  According to perlbench, this
change has not affected the overall speed of Perl.
.IP "\(bu" 4
\&\fIunshift()\fR should now be noticeably faster.
.SH "Installation and Configuration Improvements"
.IX Header "Installation and Configuration Improvements"
.SS "Generic Improvements"
.IX Subsection "Generic Improvements"
.IP "\(bu" 4
\&\s-1INSTALL\s0 now explains how you can configure Perl to use 64\-bit
integers even on non\-64\-bit platforms.
.IP "\(bu" 4
Policy.sh policy change: if you are reusing a Policy.sh file
(see \s-1INSTALL\s0) and you use Configure \-Dprefix=/foo/bar and in the old
Policy \f(CW$prefix\fR eq \f(CW$siteprefix\fR and \f(CW$prefix\fR eq \f(CW$vendorprefix\fR, all of
them will now be changed to the new prefix, /foo/bar.  (Previously
only \f(CW$prefix\fR changed.)  If you do not like this new behaviour,
specify prefix, siteprefix, and vendorprefix explicitly.
.IP "\(bu" 4
A new optional location for Perl libraries, otherlibdirs, is available.
It can be used for example for vendor add-ons without disturbing Perl's
own library directories.
.IP "\(bu" 4
In many platforms, the vendor-supplied 'cc' is too stripped-down to
build Perl (basically, 'cc' doesn't do \s-1ANSI C\s0).  If this seems
to be the case and 'cc' does not seem to be the \s-1GNU C\s0 compiler
\&'gcc', an automatic attempt is made to find and use 'gcc' instead.
.IP "\(bu" 4
gcc needs to closely track the operating system release to avoid
build problems. If Configure finds that gcc was built for a different
operating system release than is running, it now gives a clearly visible
warning that there may be trouble ahead.
.IP "\(bu" 4
Since Perl 5.8 is not binary-compatible with previous releases
of Perl, Configure no longer suggests including the 5.005
modules in \f(CW@INC\fR.
.IP "\(bu" 4
Configure \f(CW\*(C`\-S\*(C'\fR can now run non-interactively. [561]
.IP "\(bu" 4
Configure support for pdp11\-style memory models has been removed due
to obsolescence. [561]
.IP "\(bu" 4
configure.gnu now works with options with whitespace in them.
.IP "\(bu" 4
installperl now outputs everything to \s-1STDERR.\s0
.IP "\(bu" 4
Because PerlIO is now the default on most platforms, \*(L"\-perlio\*(R" doesn't
get appended to the \f(CW$Config\fR{archname} (also known as $^O) anymore.
Instead, if you explicitly choose not to use perlio (Configure command
line option \-Uuseperlio), you will get \*(L"\-stdio\*(R" appended.
.IP "\(bu" 4
Another change related to the architecture name is that \*(L"\-64all\*(R"
(\-Duse64bitall, or \*(L"maximally 64\-bit\*(R") is appended only if your
pointers are 64 bits wide.  (To be exact, the use64bitall is ignored.)
.IP "\(bu" 4
In \s-1AFS\s0 installations, one can configure the root of the \s-1AFS\s0 to be
somewhere else than the default \fI/afs\fR by using the Configure
parameter \f(CW\*(C`\-Dafsroot=/some/where/else\*(C'\fR.
.IP "\(bu" 4
\&\s-1APPLLIB_EXP,\s0 a lesser-known configuration-time definition, has been
documented.  It can be used to prepend site-specific directories
to Perl's default search path (@INC); see \s-1INSTALL\s0 for information.
.IP "\(bu" 4
The version of Berkeley \s-1DB\s0 used when the Perl (and, presumably, the
DB_File extension) was built is now available as
\&\f(CW@Config{qw(db_version_major db_version_minor db_version_patch)}\fR
from Perl and as \f(CW\*(C`DB_VERSION_MAJOR_CFG DB_VERSION_MINOR_CFG
DB_VERSION_PATCH_CFG\*(C'\fR from C.
.IP "\(bu" 4
Building Berkeley \s-1DB3\s0 for compatibility modes for \s-1DB, NDBM,\s0 and \s-1ODBM\s0
has been documented in \s-1INSTALL.\s0
.IP "\(bu" 4
If you have \s-1CPAN\s0 access (either network or a local copy such as a
CD-ROM) you can during specify extra modules to Configure to build and
install with Perl using the \-Dextras=...  option.  See \s-1INSTALL\s0 for
more details.
.IP "\(bu" 4
In addition to config.over, a new override file, config.arch, is
available.  This file is supposed to be used by hints file writers
for architecture-wide changes (as opposed to config.over which is
for site-wide changes).
.IP "\(bu" 4
If your file system supports symbolic links, you can build Perl outside
of the source directory by
.Sp
.Vb 3
\&        mkdir perl/build/directory
\&        cd perl/build/directory
\&        sh /path/to/perl/source/Configure \-Dmksymlinks ...
.Ve
.Sp
This will create in perl/build/directory a tree of symbolic links
pointing to files in /path/to/perl/source.  The original files are left
unaffected.  After Configure has finished, you can just say
.Sp
.Vb 1
\&        make all test
.Ve
.Sp
and Perl will be built and tested, all in perl/build/directory.
[561]
.IP "\(bu" 4
For Perl developers, several new make targets for profiling
and debugging have been added; see perlhack.
.RS 4
.IP "\(bu" 8
Use of the \fIgprof\fR tool to profile Perl has been documented in
perlhack.  There is a make target called \*(L"perl.gprof\*(R" for
generating a gprofiled Perl executable.
.IP "\(bu" 8
If you have \s-1GCC 3,\s0 there is a make target called \*(L"perl.gcov\*(R" for
creating a gcoved Perl executable for coverage analysis.  See
perlhack.
.IP "\(bu" 8
If you are on \s-1IRIX\s0 or Tru64 platforms, new profiling/debugging options
have been added; see perlhack for more information about pixie and
Third Degree.
.RE
.RS 4
.RE
.IP "\(bu" 4
Guidelines of how to construct minimal Perl installations have
been added to \s-1INSTALL.\s0
.IP "\(bu" 4
The Thread extension is now not built at all under ithreads
(\f(CW\*(C`Configure \-Duseithreads\*(C'\fR) because it wouldn't work anyway (the
Thread extension requires being Configured with \f(CW\*(C`\-Duse5005threads\*(C'\fR).
.Sp
\&\fBNote that the 5.005 threads are unsupported and deprecated: if you
have code written for the old threads you should migrate it to the
new ithreads model.\fR
.IP "\(bu" 4
The Gconvert macro ($Config{d_Gconvert}) used by perl for stringifying
floating-point numbers is now more picky about using sprintf %.*g
rules for the conversion.  Some platforms that used to use gcvt may
now resort to the slower sprintf.
.IP "\(bu" 4
The obsolete method of making a special (e.g., debugging) flavor
of perl by saying
.Sp
.Vb 1
\&        make LIBPERL=libperld.a
.Ve
.Sp
has been removed. Use \-DDEBUGGING instead.
.SS "New Or Improved Platforms"
.IX Subsection "New Or Improved Platforms"
For the list of platforms known to support Perl,
see \*(L"Supported Platforms\*(R" in perlport.
.IP "\(bu" 4
\&\s-1AIX\s0 dynamic loading should be now better supported.
.IP "\(bu" 4
\&\s-1AIX\s0 should now work better with gcc, threads, and 64\-bitness.  Also the
long doubles support in \s-1AIX\s0 should be better now.  See perlaix.
.IP "\(bu" 4
AtheOS ( http://www.atheos.cx/ ) is a new platform.
.IP "\(bu" 4
BeOS has been reclaimed.
.IP "\(bu" 4
The \s-1DG/UX\s0 platform now supports 5.005\-style threads.
See perldgux.
.IP "\(bu" 4
The DYNIX/ptx platform (also known as dynixptx) is supported at or
near osvers 4.5.2.
.IP "\(bu" 4
\&\s-1EBCDIC\s0 platforms (z/OS (also known as \s-1OS/390\s0), POSIX-BC, and \s-1VM/ESA\s0)
have been regained.  Many test suite tests still fail and the
co-existence of Unicode and \s-1EBCDIC\s0 isn't quite settled, but the
situation is much better than with Perl 5.6.  See perlos390,
perlbs2000 (for POSIX-BC), and perlvmesa for more information.
(\fBNote:\fR support for \s-1VM/ESA\s0 was removed in Perl v5.18.0. The relevant
information was in \fI\s-1README\s0.vmesa\fR)
.IP "\(bu" 4
Building perl with \-Duseithreads or \-Duse5005threads now works under
HP-UX 10.20 (previously it only worked under 10.30 or later). You will
need a thread library package installed. See \s-1README\s0.hpux. [561]
.IP "\(bu" 4
Mac \s-1OS\s0 Classic is now supported in the mainstream source package
(MacPerl has of course been available since perl 5.004 but now the
source code bases of standard Perl and MacPerl have been synchronised)
[561]
.IP "\(bu" 4
Mac \s-1OS X \s0(or Darwin) should now be able to build Perl even on \s-1HFS+\s0
filesystems.  (The case-insensitivity used to confuse the Perl build
process.)
.IP "\(bu" 4
\&\s-1NCR\s0 MP-RAS is now supported. [561]
.IP "\(bu" 4
All the NetBSD specific patches (except for the installation
specific ones) have been merged back to the main distribution.
.IP "\(bu" 4
NetWare from Novell is now supported.  See perlnetware.
.IP "\(bu" 4
NonStop-UX is now supported. [561]
.IP "\(bu" 4
\&\s-1NEC\s0 SUPER-UX is now supported.
.IP "\(bu" 4
All the OpenBSD specific patches (except for the installation
specific ones) have been merged back to the main distribution.
.IP "\(bu" 4
Perl has been tested with the \s-1GNU\s0 pth userlevel thread package
( http://www.gnu.org/software/pth/pth.html ).  All thread tests
of Perl now work, but not without adding some \fIyield()\fRs to the tests,
so while pth (and other userlevel thread implementations) can be
considered to be \*(L"working\*(R" with Perl ithreads, keep in mind the
possible non-preemptability of the underlying thread implementation.
.IP "\(bu" 4
Stratus \s-1VOS\s0 is now supported using Perl's native build method
(Configure).  This is the recommended method to build Perl on
\&\s-1VOS. \s0 The older methods, which build miniperl, are still
available.  See perlvos. [561+]
.IP "\(bu" 4
The Amdahl \s-1UTS\s0 Unix mainframe platform is now supported. [561]
.IP "\(bu" 4
WinCE is now supported.  See perlce.
.IP "\(bu" 4
z/OS (formerly known as \s-1OS/390,\s0 formerly known as \s-1MVS OE\s0) now has
support for dynamic loading.  This is not selected by default,
however, you must specify \-Dusedl in the arguments of Configure. [561]
.SH "Selected Bug Fixes"
.IX Header "Selected Bug Fixes"
Numerous memory leaks and uninitialized memory accesses have been
hunted down.  Most importantly, anonymous subs used to leak quite
a bit. [561]
.IP "\(bu" 4
The autouse pragma didn't work for Multi::Part::Function::Names.
.IP "\(bu" 4
\&\fIcaller()\fR could cause core dumps in certain situations.  Carp was
sometimes affected by this problem.  In particular, \fIcaller()\fR now
returns a subroutine name of \f(CW\*(C`(unknown)\*(C'\fR for subroutines that have
been removed from the symbol table.
.IP "\(bu" 4
chop(@list) in list context returned the characters chopped in
reverse order.  This has been reversed to be in the right order. [561]
.IP "\(bu" 4
Configure no longer includes the \s-1DBM\s0 libraries (dbm, gdbm, db, ndbm)
when building the Perl binary.  The only exception to this is SunOS 4.x,
which needs them. [561]
.IP "\(bu" 4
The behaviour of non-decimal but numeric string constants such as
\&\*(L"0x23\*(R" was platform-dependent: in some platforms that was seen as 35,
in some as 0, in some as a floating point number (don't ask).  This
was caused by Perl's using the operating system libraries in a situation
where the result of the string to number conversion is undefined: now
Perl consistently handles such strings as zero in numeric contexts.
.IP "\(bu" 4
Several debugger fixes: exit code now reflects the script exit code,
condition \f(CW"0"\fR now treated correctly, the \f(CW\*(C`d\*(C'\fR command now checks
line number, \f(CW$.\fR no longer gets corrupted, and all debugger output
now goes correctly to the socket if RemotePort is set. [561]
.IP "\(bu" 4
The debugger (perl5db.pl) has been modified to present a more
consistent commands interface, via (CommandSet=580).  perl5db.t was
also added to test the changes, and as a placeholder for further tests.
.Sp
See perldebug.
.IP "\(bu" 4
The debugger has a new \f(CW\*(C`dumpDepth\*(C'\fR option to control the maximum
depth to which nested structures are dumped.  The \f(CW\*(C`x\*(C'\fR command has
been extended so that \f(CW\*(C`x N EXPR\*(C'\fR dumps out the value of \fI\s-1EXPR\s0\fR to a
depth of at most \fIN\fR levels.
.IP "\(bu" 4
The debugger can now show lexical variables if you have the \s-1CPAN\s0
module PadWalker installed.
.IP "\(bu" 4
The order of DESTROYs has been made more predictable.
.IP "\(bu" 4
Perl 5.6.0 could emit spurious warnings about redefinition of
\&\fIdl_error()\fR when statically building extensions into perl.
This has been corrected. [561]
.IP "\(bu" 4
dprofpp \-R didn't work.
.IP "\(bu" 4
\&\f(CW*foo{FORMAT}\fR now works.
.IP "\(bu" 4
Infinity is now recognized as a number.
.IP "\(bu" 4
UNIVERSAL::isa no longer caches methods incorrectly.  (This broke
the Tk extension with 5.6.0.) [561]
.IP "\(bu" 4
Lexicals I: lexicals outside an eval "\*(L" weren't resolved
correctly inside a subroutine definition inside the eval \*(R"\*(L" if they
were not already referenced in the top level of the eval\*(R""ed code.
.IP "\(bu" 4
Lexicals \s-1II:\s0 lexicals leaked at file scope into subroutines that
were declared before the lexicals.
.IP "\(bu" 4
Lexical warnings now propagating correctly between scopes
and into \f(CW\*(C`eval "..."\*(C'\fR.
.IP "\(bu" 4
\&\f(CW\*(C`use warnings qw(FATAL all)\*(C'\fR did not work as intended.  This has been
corrected. [561]
.IP "\(bu" 4
\&\fIwarnings::enabled()\fR now reports the state of $^W correctly if the caller
isn't using lexical warnings. [561]
.IP "\(bu" 4
Line renumbering with eval and \f(CW\*(C`#line\*(C'\fR now works. [561]
.IP "\(bu" 4
Fixed numerous memory leaks, especially in eval "".
.IP "\(bu" 4
Localised tied variables no longer leak memory
.Sp
.Vb 2
\&    use Tie::Hash;
\&    tie my %tied_hash => \*(AqTie::StdHash\*(Aq;
\&
\&    ...
\&
\&    # Used to leak memory every time local() was called;
\&    # in a loop, this added up.
\&    local($tied_hash{Foo}) = 1;
.Ve
.IP "\(bu" 4
Localised hash elements (and \f(CW%ENV\fR) are correctly unlocalised to not
exist, if they didn't before they were localised.
.Sp
.Vb 2
\&    use Tie::Hash;
\&    tie my %tied_hash => \*(AqTie::StdHash\*(Aq;
\&
\&    ...
\&
\&    # Nothing has set the FOO element so far
\&
\&    { local $tied_hash{FOO} = \*(AqBar\*(Aq }
\&
\&    # This used to print, but not now.
\&    print "exists!\en" if exists $tied_hash{FOO};
.Ve
.Sp
As a side effect of this fix, tied hash interfaces \fBmust\fR define
the \s-1EXISTS\s0 and \s-1DELETE\s0 methods.
.IP "\(bu" 4
\&\fImkdir()\fR now ignores trailing slashes in the directory name,
as mandated by \s-1POSIX.\s0
.IP "\(bu" 4
Some versions of glibc have a broken \fImodfl()\fR.  This affects builds
with \f(CW\*(C`\-Duselongdouble\*(C'\fR.  This version of Perl detects this brokenness
and has a workaround for it.  The glibc release 2.2.2 is known to have
fixed the \fImodfl()\fR bug.
.IP "\(bu" 4
Modulus of unsigned numbers now works (4063328477 % 65535 used to
return 27406, instead of 27047). [561]
.IP "\(bu" 4
Some \*(L"not a number\*(R" warnings introduced in 5.6.0 eliminated to be
more compatible with 5.005.  Infinity is now recognised as a number. [561]
.IP "\(bu" 4
Numeric conversions did not recognize changes in the string value
properly in certain circumstances. [561]
.IP "\(bu" 4
Attributes (such as :shared) didn't work with \fIour()\fR.
.IP "\(bu" 4
\&\fIour()\fR variables will not cause bogus \*(L"Variable will not stay shared\*(R"
warnings. [561]
.IP "\(bu" 4
\&\*(L"our\*(R" variables of the same name declared in two sibling blocks
resulted in bogus warnings about \*(L"redeclaration\*(R" of the variables.
The problem has been corrected. [561]
.IP "\(bu" 4
pack \*(L"Z\*(R" now correctly terminates the string with \*(L"\e0\*(R".
.IP "\(bu" 4
Fix password routines which in some shadow password platforms
(e.g. HP-UX) caused \fIgetpwent()\fR to return every other entry.
.IP "\(bu" 4
The \s-1PERL5OPT\s0 environment variable (for passing command line arguments
to Perl) didn't work for more than a single group of options. [561]
.IP "\(bu" 4
\&\s-1PERL5OPT\s0 with embedded spaces didn't work.
.IP "\(bu" 4
\&\fIprintf()\fR no longer resets the numeric locale to \*(L"C\*(R".
.IP "\(bu" 4
\&\f(CW\*(C`qw(a\e\eb)\*(C'\fR now parses correctly as \f(CW\*(Aqa\e\eb\*(Aq\fR: that is, as three
characters, not four. [561]
.IP "\(bu" 4
\&\fIpos()\fR did not return the correct value within s///ge in earlier
versions.  This is now handled correctly. [561]
.IP "\(bu" 4
Printing quads (64\-bit integers) with printf/sprintf now works
without the q L ll prefixes (assuming you are on a quad-capable platform).
.IP "\(bu" 4
Regular expressions on references and overloaded scalars now work. [561+]
.IP "\(bu" 4
Right-hand side magic (\s-1GMAGIC\s0) could in many cases such as string
concatenation be invoked too many times.
.IP "\(bu" 4
\&\fIscalar()\fR now forces scalar context even when used in void context.
.IP "\(bu" 4
\&\s-1SOCKS\s0 support is now much more robust.
.IP "\(bu" 4
\&\fIsort()\fR arguments are now compiled in the right wantarray context
(they were accidentally using the context of the \fIsort()\fR itself).
The comparison block is now run in scalar context, and the arguments
to be sorted are always provided list context. [561]
.IP "\(bu" 4
Changed the \s-1POSIX\s0 character class \f(CW\*(C`[[:space:]]\*(C'\fR to include the (very
rarely used) vertical tab character.  Added a new POSIX-ish character
class \f(CW\*(C`[[:blank:]]\*(C'\fR which stands for horizontal whitespace
(currently, the space and the tab).
.IP "\(bu" 4
The tainting behaviour of \fIsprintf()\fR has been rationalized.  It does
not taint the result of floating point formats anymore, making the
behaviour consistent with that of string interpolation. [561]
.IP "\(bu" 4
Some cases of inconsistent taint propagation (such as within hash
values) have been fixed.
.IP "\(bu" 4
The \s-1RE\s0 engine found in Perl 5.6.0 accidentally pessimised certain kinds
of simple pattern matches.  These are now handled better. [561]
.IP "\(bu" 4
Regular expression debug output (whether through \f(CW\*(C`use re \*(Aqdebug\*(Aq\*(C'\fR
or via \f(CW\*(C`\-Dr\*(C'\fR) now looks better. [561]
.IP "\(bu" 4
Multi-line matches like \f(CW\*(C`"a\enxb\en" =~ /(?!\eA)x/m\*(C'\fR were flawed.  The
bug has been fixed. [561]
.IP "\(bu" 4
Use of $& could trigger a core dump under some situations.  This
is now avoided. [561]
.IP "\(bu" 4
The regular expression captured submatches ($1, \f(CW$2\fR, ...) are now
more consistently unset if the match fails, instead of leaving false
data lying around in them. [561]
.IP "\(bu" 4
\&\fIreadline()\fR on files opened in \*(L"slurp\*(R" mode could return an extra
"" (blank line) at the end in certain situations.  This has been
corrected. [561]
.IP "\(bu" 4
Autovivification of symbolic references of special variables described
in perlvar (as in \f(CW\*(C`${$num}\*(C'\fR) was accidentally disabled.  This works
again now. [561]
.IP "\(bu" 4
Sys::Syslog ignored the \f(CW\*(C`LOG_AUTH\*(C'\fR constant.
.IP "\(bu" 4
\&\f(CW$AUTOLOAD\fR, \fIsort()\fR, \fIlock()\fR, and spawning subprocesses
in multiple threads simultaneously are now thread-safe.
.IP "\(bu" 4
Tie::Array's \s-1SPLICE\s0 method was broken.
.IP "\(bu" 4
Allow a read-only string on the left-hand side of a non-modifying tr///.
.IP "\(bu" 4
If \f(CW\*(C`STDERR\*(C'\fR is tied, warnings caused by \f(CW\*(C`warn\*(C'\fR and \f(CW\*(C`die\*(C'\fR now
correctly pass to it.
.IP "\(bu" 4
Several Unicode fixes.
.RS 4
.IP "\(bu" 8
BOMs (byte order marks) at the beginning of Perl files
(scripts, modules) should now be transparently skipped.
\&\s-1UTF\-16\s0 and \s-1UCS\-2\s0 encoded Perl files should now be read correctly.
.IP "\(bu" 8
The character tables have been updated to Unicode 3.2.0.
.IP "\(bu" 8
Comparing with utf8 data does not magically upgrade non\-utf8 data
into utf8.  (This was a problem for example if you were mixing data
from I/O and Unicode data: your output might have got magically encoded
as \s-1UTF\-8.\s0)
.IP "\(bu" 8
Generating illegal Unicode code points such as U+FFFE, or the \s-1UTF\-16\s0
surrogates, now also generates an optional warning.
.IP "\(bu" 8
\&\f(CW\*(C`IsAlnum\*(C'\fR, \f(CW\*(C`IsAlpha\*(C'\fR, and \f(CW\*(C`IsWord\*(C'\fR now match titlecase.
.IP "\(bu" 8
Concatenation with the \f(CW\*(C`.\*(C'\fR operator or via variable interpolation,
\&\f(CW\*(C`eq\*(C'\fR, \f(CW\*(C`substr\*(C'\fR, \f(CW\*(C`reverse\*(C'\fR, \f(CW\*(C`quotemeta\*(C'\fR, the \f(CW\*(C`x\*(C'\fR operator,
substitution with \f(CW\*(C`s///\*(C'\fR, single-quoted \s-1UTF\-8,\s0 should now work.
.IP "\(bu" 8
The \f(CW\*(C`tr///\*(C'\fR operator now works.  Note that the \f(CW\*(C`tr///CU\*(C'\fR
functionality has been removed (but see pack('U0', ...)).
.IP "\(bu" 8
\&\f(CW\*(C`eval "v200"\*(C'\fR now works.
.IP "\(bu" 8
Perl 5.6.0 parsed m/\ex{ab}/ incorrectly, leading to spurious warnings.
This has been corrected. [561]
.IP "\(bu" 8
Zero entries were missing from the Unicode classes such as \f(CW\*(C`IsDigit\*(C'\fR.
.RE
.RS 4
.RE
.IP "\(bu" 4
Large unsigned numbers (those above 2**31) could sometimes lose their
unsignedness, causing bogus results in arithmetic operations. [561]
.IP "\(bu" 4
The Perl parser has been stress tested using both random input and
Markov chain input and the few found crashes and lockups have been
fixed.
.SS "Platform Specific Changes and Fixes"
.IX Subsection "Platform Specific Changes and Fixes"
.IP "\(bu" 4
\&\s-1BSDI 4\s0.*
.Sp
Perl now works on post\-4.0 BSD/OSes.
.IP "\(bu" 4
All BSDs
.Sp
Setting \f(CW$0\fR now works (as much as possible; see perlvar for details).
.IP "\(bu" 4
Cygwin
.Sp
Numerous updates; currently synchronised with Cygwin 1.3.10.
.IP "\(bu" 4
Previously DYNIX/ptx had problems in its Configure probe for non-blocking I/O.
.IP "\(bu" 4
\&\s-1EPOC\s0
.Sp
\&\s-1EPOC\s0 now better supported.  See \s-1README\s0.epoc. [561]
.IP "\(bu" 4
FreeBSD 3.*
.Sp
Perl now works on post\-3.0 FreeBSDs.
.IP "\(bu" 4
HP-UX
.Sp
\&\s-1README\s0.hpux updated; \f(CW\*(C`Configure \-Duse64bitall\*(C'\fR now works;
now uses HP-UX malloc instead of Perl malloc.
.IP "\(bu" 4
\&\s-1IRIX\s0
.Sp
Numerous compilation flag and hint enhancements; accidental mixing
of 32\-bit and 64\-bit libraries (a doomed attempt) made much harder.
.IP "\(bu" 4
Linux
.RS 4
.IP "\(bu" 8
Long doubles should now work (see \s-1INSTALL\s0). [561]
.IP "\(bu" 8
Linux previously had problems related to sockaddrlen when using
\&\fIaccept()\fR, \fIrecvfrom()\fR (in Perl: \fIrecv()\fR), \fIgetpeername()\fR, and
\&\fIgetsockname()\fR.
.RE
.RS 4
.RE
.IP "\(bu" 4
Mac \s-1OS\s0 Classic
.Sp
Compilation of the standard Perl distribution in Mac \s-1OS\s0 Classic should
now work if you have the Metrowerks development environment and the
missing Mac-specific toolkit bits.  Contact the macperl mailing list
for details.
.IP "\(bu" 4
MPE/iX
.Sp
MPE/iX update after Perl 5.6.0.  See \s-1README\s0.mpeix. [561]
.IP "\(bu" 4
NetBSD/threads: try installing the \s-1GNU\s0 pth (should be in the
packages collection, or http://www.gnu.org/software/pth/),
and Configure with \-Duseithreads.
.IP "\(bu" 4
NetBSD/sparc
.Sp
Perl now works on NetBSD/sparc.
.IP "\(bu" 4
\&\s-1OS/2\s0
.Sp
Now works with usethreads (see \s-1INSTALL\s0). [561]
.IP "\(bu" 4
Solaris
.Sp
64\-bitness using the Sun Workshop compiler now works.
.IP "\(bu" 4
Stratus \s-1VOS\s0
.Sp
The native build method requires at least \s-1VOS\s0 Release 14.5.0
and \s-1GNU \*(C+/GNU\s0 Tools 2.0.1 or later.  The Perl pack function
now maps overflowed values to +infinity and underflowed values
to \-infinity.
.IP "\(bu" 4
Tru64 (aka Digital \s-1UNIX,\s0 aka \s-1DEC OSF/1\s0)
.Sp
The operating system version letter now recorded in \f(CW$Config\fR{osvers}.
Allow compiling with gcc (previously explicitly forbidden).  Compiling
with gcc still not recommended because buggy code results, even with
gcc 2.95.2.
.IP "\(bu" 4
Unicos
.Sp
Fixed various alignment problems that lead into core dumps either
during build or later; no longer dies on math errors at runtime;
now using full quad integers (64 bits), previously was using
only 46 bit integers for speed.
.IP "\(bu" 4
\&\s-1VMS\s0
.Sp
See \*(L"Socket Extension Dynamic in \s-1VMS\*(R"\s0 and \*(L"IEEE-format Floating Point
Default on OpenVMS Alpha\*(R" for important changes not otherwise listed here.
.Sp
\&\fIchdir()\fR now works better despite a \s-1CRT\s0 bug; now works with \s-1MULTIPLICITY
\&\s0(see \s-1INSTALL\s0); now works with Perl's malloc.
.Sp
The tainting of \f(CW%ENV\fR elements via \f(CW\*(C`keys\*(C'\fR or \f(CW\*(C`values\*(C'\fR was previously
unimplemented.  It now works as documented.
.Sp
The \f(CW\*(C`waitpid\*(C'\fR emulation has been improved.  The worst bug (now fixed)
was that a pid of \-1 would cause a wildcard search of all processes on
the system.
.Sp
POSIX-style signals are now emulated much better on \s-1VMS\s0 versions prior
to 7.0.
.Sp
The \f(CW\*(C`system\*(C'\fR function and backticks operator have improved
functionality and better error handling. [561]
.Sp
File access tests now use current process privileges rather than the
user's default privileges, which could sometimes result in a mismatch
between reported access and actual access.  This improvement is only
available on \s-1VMS\s0 v6.0 and later.
.Sp
There is a new \f(CW\*(C`kill\*(C'\fR implementation based on \f(CW\*(C`sys$sigprc\*(C'\fR that allows
older \s-1VMS\s0 systems (pre\-7.0) to use \f(CW\*(C`kill\*(C'\fR to send signals rather than
simply force exit.  This implementation also allows later systems to
call \f(CW\*(C`kill\*(C'\fR from within a signal handler.
.Sp
Iterative logical name translations are now limited to 10 iterations in
imitation of \s-1SHOW LOGICAL\s0 and other OpenVMS facilities.
.IP "\(bu" 4
Windows
.RS 4
.IP "\(bu" 8
Signal handling now works better than it used to.  It is now implemented
using a Windows message loop, and is therefore less prone to random
crashes.
.IP "\(bu" 8
\&\fIfork()\fR emulation is now more robust, but still continues to have a few
esoteric bugs and caveats.  See perlfork for details. [561+]
.IP "\(bu" 8
A failed (pseudo)fork now returns undef and sets errno to \s-1EAGAIN.\s0 [561]
.IP "\(bu" 8
The following modules now work on Windows:
.Sp
.Vb 4
\&    ExtUtils::Embed         [561]
\&    IO::Pipe
\&    IO::Poll
\&    Net::Ping
.Ve
.IP "\(bu" 8
\&\fIIO::File::new_tmpfile()\fR is no longer limited to 32767 invocations
per-process.
.IP "\(bu" 8
Better \fIchdir()\fR return value for a non-existent directory.
.IP "\(bu" 8
Compiling perl using the 64\-bit Platform \s-1SDK\s0 tools is now supported.
.IP "\(bu" 8
The \fIWin32::SetChildShowWindow()\fR builtin can be used to control the
visibility of windows created by child processes.  See Win32 for
details.
.IP "\(bu" 8
Non-blocking waits for child processes (or pseudo-processes) are
supported via \f(CW\*(C`waitpid($pid, &POSIX::WNOHANG)\*(C'\fR.
.IP "\(bu" 8
The behavior of \fIsystem()\fR with multiple arguments has been rationalized.
Each unquoted argument will be automatically quoted to protect whitespace,
and any existing whitespace in the arguments will be preserved.  This
improves the portability of system(@args) by avoiding the need for
Windows \f(CW\*(C`cmd\*(C'\fR shell specific quoting in perl programs.
.Sp
Note that this means that some scripts that may have relied on earlier
buggy behavior may no longer work correctly.  For example,
\&\f(CW\*(C`system("nmake /nologo", @args)\*(C'\fR will now attempt to run the file
\&\f(CW\*(C`nmake /nologo\*(C'\fR and will fail when such a file isn't found.
On the other hand, perl will now execute code such as
\&\f(CW\*(C`system("c:/Program Files/MyApp/foo.exe", @args)\*(C'\fR correctly.
.IP "\(bu" 8
The perl header files no longer suppress common warnings from the
Microsoft Visual \*(C+ compiler.  This means that additional warnings may
now show up when compiling \s-1XS\s0 code.
.IP "\(bu" 8
Borland \*(C+ v5.5 is now a supported compiler that can build Perl.
However, the generated binaries continue to be incompatible with those
generated by the other supported compilers (\s-1GCC\s0 and Visual \*(C+). [561]
.IP "\(bu" 8
Duping socket handles with open(F, \*(L">&MYSOCK\*(R") now works under Windows 9x.
[561]
.IP "\(bu" 8
Current directory entries in \f(CW%ENV\fR are now correctly propagated to child
processes. [561]
.IP "\(bu" 8
New \f(CW%ENV\fR entries now propagate to subprocesses. [561]
.IP "\(bu" 8
\&\fIWin32::GetCwd()\fR correctly returns C:\e instead of C: when at the drive root.
Other bugs in \fIchdir()\fR and \fICwd::cwd()\fR have also been fixed. [561]
.IP "\(bu" 8
The makefiles now default to the features enabled in ActiveState ActivePerl
(a popular Win32 binary distribution). [561]
.IP "\(bu" 8
\&\s-1HTML\s0 files will now be installed in c:\eperl\ehtml instead of
c:\eperl\elib\epod\ehtml
.IP "\(bu" 8
\&\s-1REG_EXPAND_SZ\s0 keys are now allowed in registry settings used by perl. [561]
.IP "\(bu" 8
Can now \fIsend()\fR from all threads, not just the first one. [561]
.IP "\(bu" 8
ExtUtils::MakeMaker now uses \f(CW$ENV\fR{\s-1LIB\s0} to search for libraries. [561]
.IP "\(bu" 8
Less stack reserved per thread so that more threads can run
concurrently. (Still 16M per thread.) [561]
.IP "\(bu" 8
\&\f(CW\*(C`File::Spec\->tmpdir()\*(C'\fR now prefers C:/temp over /tmp
(works better when perl is running as service).
.IP "\(bu" 8
Better \s-1UNC\s0 path handling under ithreads. [561]
.IP "\(bu" 8
\&\fIwait()\fR, \fIwaitpid()\fR, and backticks now return the correct exit status
under Windows 9x. [561]
.IP "\(bu" 8
A socket handle leak in \fIaccept()\fR has been fixed. [561]
.RE
.RS 4
.RE
.SH "New or Changed Diagnostics"
.IX Header "New or Changed Diagnostics"
Please see perldiag for more details.
.IP "\(bu" 4
Ambiguous range in the transliteration operator (like a\-z\-9) now
gives a warning.
.IP "\(bu" 4
chdir("") and chdir(undef) now give a deprecation warning because they
cause a possible unintentional chdir to the home directory.
Say \fIchdir()\fR if you really mean that.
.IP "\(bu" 4
Two new debugging options have been added: if you have compiled your
Perl with debugging, you can use the \-DT [561] and \-DR options to trace
tokenising and to add reference counts to displaying variables,
respectively.
.IP "\(bu" 4
The lexical warnings category \*(L"deprecated\*(R" is no longer a sub-category
of the \*(L"syntax\*(R" category. It is now a top-level category in its own
right.
.IP "\(bu" 4
Unadorned \fIdump()\fR will now give a warning suggesting to
use explicit \fICORE::dump()\fR if that's what really is meant.
.IP "\(bu" 4
The \*(L"Unrecognized escape\*(R" warning has been extended to include \f(CW\*(C`\e8\*(C'\fR,
\&\f(CW\*(C`\e9\*(C'\fR, and \f(CW\*(C`\e_\*(C'\fR.  There is no need to escape any of the \f(CW\*(C`\ew\*(C'\fR characters.
.IP "\(bu" 4
All regular expression compilation error messages are now hopefully
easier to understand both because the error message now comes before
the failed regex and because the point of failure is now clearly
marked by a \f(CW\*(C`<\-\- HERE\*(C'\fR marker.
.IP "\(bu" 4
Various I/O (and socket) functions like \fIbinmode()\fR, \fIclose()\fR, and so
forth now more consistently warn if they are used illogically either
on a yet unopened or on an already closed filehandle (or socket).
.IP "\(bu" 4
Using \fIlstat()\fR on a filehandle now gives a warning.  (It's a non-sensical
thing to do.)
.IP "\(bu" 4
The \f(CW\*(C`\-M\*(C'\fR and \f(CW\*(C`\-m\*(C'\fR options now warn if you didn't supply the module name.
.IP "\(bu" 4
If you in \f(CW\*(C`use\*(C'\fR specify a required minimum version, modules matching
the name and but not defining a \f(CW$VERSION\fR will cause a fatal failure.
.IP "\(bu" 4
Using negative offset for \fIvec()\fR in lvalue context is now a warnable offense.
.IP "\(bu" 4
Odd number of arguments to overload::constant now elicits a warning.
.IP "\(bu" 4
Odd number of elements in anonymous hash now elicits a warning.
.IP "\(bu" 4
The various \*(L"opened only for\*(R", \*(L"on closed\*(R", \*(L"never opened\*(R" warnings
drop the \f(CW\*(C`main::\*(C'\fR prefix for filehandles in the \f(CW\*(C`main\*(C'\fR package,
for example \f(CW\*(C`STDIN\*(C'\fR instead of \f(CW\*(C`main::STDIN\*(C'\fR.
.IP "\(bu" 4
Subroutine prototypes are now checked more carefully, you may
get warnings for example if you have used non-prototype characters.
.IP "\(bu" 4
If an attempt to use a (non-blessed) reference as an array index
is made, a warning is given.
.IP "\(bu" 4
\&\f(CW\*(C`push @a;\*(C'\fR and \f(CW\*(C`unshift @a;\*(C'\fR (with no values to push or unshift)
now give a warning.  This may be a problem for generated and eval'ed
code.
.IP "\(bu" 4
If you try to \*(L"pack\*(R" in perlfunc a number less than 0 or larger than 255
using the \f(CW"C"\fR format you will get an optional warning.  Similarly
for the \f(CW"c"\fR format and a number less than \-128 or more than 127.
.IP "\(bu" 4
pack \f(CW\*(C`P\*(C'\fR format now demands an explicit size.
.IP "\(bu" 4
unpack \f(CW\*(C`w\*(C'\fR now warns of unterminated compressed integers.
.IP "\(bu" 4
Warnings relating to the use of PerlIO have been added.
.IP "\(bu" 4
Certain regex modifiers such as \f(CW\*(C`(?o)\*(C'\fR make sense only if applied to
the entire regex.  You will get an optional warning if you try to do
otherwise.
.IP "\(bu" 4
Variable length lookbehind has not yet been implemented, trying to
use it will tell that.
.IP "\(bu" 4
Using arrays or hashes as references (e.g. \f(CW\*(C`%foo\->{bar}\*(C'\fR
has been deprecated for a while.  Now you will get an optional warning.
.IP "\(bu" 4
Warnings relating to the use of the new restricted hashes feature
have been added.
.IP "\(bu" 4
Self-ties of arrays and hashes are not supported and fatal errors
will happen even at an attempt to do so.
.IP "\(bu" 4
Using \f(CW\*(C`sort\*(C'\fR in scalar context now issues an optional warning.
This didn't do anything useful, as the sort was not performed.
.IP "\(bu" 4
Using the /g modifier in \fIsplit()\fR is meaningless and will cause a warning.
.IP "\(bu" 4
Using \fIsplice()\fR past the end of an array now causes a warning.
.IP "\(bu" 4
Malformed Unicode encodings (\s-1UTF\-8\s0 and \s-1UTF\-16\s0) cause a lot of warnings,
as does trying to use \s-1UTF\-16\s0 surrogates (which are unimplemented).
.IP "\(bu" 4
Trying to use Unicode characters on an I/O stream without marking the
stream's encoding (using \fIopen()\fR or \fIbinmode()\fR) will cause \*(L"Wide character\*(R"
warnings.
.IP "\(bu" 4
Use of v\-strings in use/require causes a (backward) portability warning.
.IP "\(bu" 4
Warnings relating to the use interpreter threads and their shared data
have been added.
.SH "Changed Internals"
.IX Header "Changed Internals"
.IP "\(bu" 4
PerlIO is now the default.
.IP "\(bu" 4
perlapi.pod (a companion to perlguts) now attempts to document the
internal \s-1API.\s0
.IP "\(bu" 4
You can now build a really minimal perl called microperl.
Building microperl does not require even running Configure;
\&